diff a/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.word/src/jdk/internal/vm/compiler/word/UnsignedWord.java b/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.word/src/jdk/internal/vm/compiler/word/UnsignedWord.java
--- a/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.word/src/jdk/internal/vm/compiler/word/UnsignedWord.java
+++ b/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.word/src/jdk/internal/vm/compiler/word/UnsignedWord.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -41,180 +41,180 @@
 package jdk.internal.vm.compiler.word;
 
 /**
  * Represents an unsigned word-sized value.
  *
- * @since 1.0
+ * @since 19.0
  */
 public interface UnsignedWord extends ComparableWord {
 
     /**
      * Returns a Unsigned whose value is {@code (this + val)}.
      *
      * @param val value to be added to this Unsigned.
      * @return {@code this + val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord add(UnsignedWord val);
 
     /**
      * Returns a Unsigned whose value is {@code (this - val)}.
      *
      * @param val value to be subtracted from this Unsigned.
      * @return {@code this - val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord subtract(UnsignedWord val);
 
     /**
      * Returns a Unsigned whose value is {@code (this * val)}.
      *
      * @param val value to be multiplied by this Unsigned.
      * @return {@code this * val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord multiply(UnsignedWord val);
 
     /**
      * Returns a Unsigned whose value is {@code (this / val)}.
      *
      * @param val value by which this Unsigned is to be divided.
      * @return {@code this / val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord unsignedDivide(UnsignedWord val);
 
     /**
      * Returns a Unsigned whose value is {@code (this % val)}.
      *
      * @param val value by which this Unsigned is to be divided, and the remainder computed.
      * @return {@code this % val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord unsignedRemainder(UnsignedWord val);
 
     /**
      * Returns a Unsigned whose value is {@code (this << n)}.
      *
      * @param n shift distance, in bits.
      * @return {@code this << n}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord shiftLeft(UnsignedWord n);
 
     /**
      * Returns a Unsigned whose value is {@code (this >>> n)}. No sign extension is performed.
      *
      * @param n shift distance, in bits.
      * @return {@code this >> n}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord unsignedShiftRight(UnsignedWord n);
 
     /**
      * Returns a Unsigned whose value is {@code (this & val)}.
      *
      * @param val value to be AND'ed with this Unsigned.
      * @return {@code this & val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord and(UnsignedWord val);
 
     /**
      * Returns a Unsigned whose value is {@code (this | val)}.
      *
      * @param val value to be OR'ed with this Unsigned.
      * @return {@code this | val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord or(UnsignedWord val);
 
     /**
      * Returns a Unsigned whose value is {@code (this ^ val)}.
      *
      * @param val value to be XOR'ed with this Unsigned.
      * @return {@code this ^ val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord xor(UnsignedWord val);
 
     /**
      * Returns a Unsigned whose value is {@code (~this)}.
      *
      * @return {@code ~this}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord not();
 
     /**
      * Compares this Unsigned with the specified value.
      *
      * @param val value to which this Unsigned is to be compared.
      * @return {@code this == val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean equal(UnsignedWord val);
 
     /**
      * Compares this Unsigned with the specified value.
      *
      * @param val value to which this Unsigned is to be compared.
      * @return {@code this != val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean notEqual(UnsignedWord val);
 
     /**
      * Compares this Unsigned with the specified value.
      *
      * @param val value to which this Unsigned is to be compared.
      * @return {@code this < val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean belowThan(UnsignedWord val);
 
     /**
      * Compares this Unsigned with the specified value.
      *
      * @param val value to which this Unsigned is to be compared.
      * @return {@code this <= val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean belowOrEqual(UnsignedWord val);
 
     /**
      * Compares this Unsigned with the specified value.
      *
      * @param val value to which this Unsigned is to be compared.
      * @return {@code this > val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean aboveThan(UnsignedWord val);
 
     /**
      * Compares this Unsigned with the specified value.
      *
      * @param val value to which this Unsigned is to be compared.
      * @return {@code this >= val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean aboveOrEqual(UnsignedWord val);
 
     /**
      * Returns a Unsigned whose value is {@code (this + val)}.
@@ -223,11 +223,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value to be added to this Unsigned.
      * @return {@code this + val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord add(int val);
 
     /**
      * Returns a Unsigned whose value is {@code (this - val)}.
@@ -236,11 +236,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value to be subtracted from this Unsigned.
      * @return {@code this - val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord subtract(int val);
 
     /**
      * Returns a Unsigned whose value is {@code (this * val)}.
@@ -249,11 +249,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value to be multiplied by this Unsigned.
      * @return {@code this * val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord multiply(int val);
 
     /**
      * Returns a Unsigned whose value is {@code (this / val)}.
@@ -262,11 +262,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value by which this Unsigned is to be divided.
      * @return {@code this / val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord unsignedDivide(int val);
 
     /**
      * Returns a Unsigned whose value is {@code (this % val)}.
@@ -275,11 +275,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value by which this Unsigned is to be divided, and the remainder computed.
      * @return {@code this % val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord unsignedRemainder(int val);
 
     /**
      * Returns a Unsigned whose value is {@code (this << n)}.
@@ -288,11 +288,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param n shift distance, in bits.
      * @return {@code this << n}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord shiftLeft(int n);
 
     /**
      * Returns a Unsigned whose value is {@code (this >>> n)}. No sign extension is performed.
@@ -301,11 +301,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param n shift distance, in bits.
      * @return {@code this >> n}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord unsignedShiftRight(int n);
 
     /**
      * Returns a Unsigned whose value is {@code (this & val)}.
@@ -314,11 +314,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value to be AND'ed with this Unsigned.
      * @return {@code this & val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord and(int val);
 
     /**
      * Returns a Unsigned whose value is {@code (this | val)}.
@@ -327,11 +327,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value to be OR'ed with this Unsigned.
      * @return {@code this | val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord or(int val);
 
     /**
      * Returns a Unsigned whose value is {@code (this ^ val)}.
@@ -340,11 +340,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value to be XOR'ed with this Unsigned.
      * @return {@code this ^ val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     UnsignedWord xor(int val);
 
     /**
      * Compares this Unsigned with the specified value.
@@ -353,11 +353,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value to which this Unsigned is to be compared.
      * @return {@code this == val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean equal(int val);
 
     /**
      * Compares this Unsigned with the specified value.
@@ -366,11 +366,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value to which this Unsigned is to be compared.
      * @return {@code this != val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean notEqual(int val);
 
     /**
      * Compares this Unsigned with the specified value.
@@ -379,11 +379,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value to which this Unsigned is to be compared.
      * @return {@code this < val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean belowThan(int val);
 
     /**
      * Compares this Unsigned with the specified value.
@@ -392,11 +392,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value to which this Unsigned is to be compared.
      * @return {@code this <= val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean belowOrEqual(int val);
 
     /**
      * Compares this Unsigned with the specified value.
@@ -405,11 +405,11 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value to which this Unsigned is to be compared.
      * @return {@code this > val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean aboveThan(int val);
 
     /**
      * Compares this Unsigned with the specified value.
@@ -418,9 +418,9 @@
      * Therefore, the result is only well-defined for positive right operands.
      *
      * @param val value to which this Unsigned is to be compared.
      * @return {@code this >= val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean aboveOrEqual(int val);
 }
