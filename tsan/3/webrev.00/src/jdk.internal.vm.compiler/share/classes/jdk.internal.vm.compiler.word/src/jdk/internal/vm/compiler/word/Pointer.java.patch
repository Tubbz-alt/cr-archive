diff a/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.word/src/jdk/internal/vm/compiler/word/Pointer.java b/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.word/src/jdk/internal/vm/compiler/word/Pointer.java
--- a/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.word/src/jdk/internal/vm/compiler/word/Pointer.java
+++ b/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.word/src/jdk/internal/vm/compiler/word/Pointer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -45,33 +45,33 @@
  * <p>
  * Do not use these methods to access Java objects. These methods access the raw memory without any
  * null checks, read- or write barriers. Even when the VM uses compressed pointers, then readObject
  * and writeObject methods access uncompressed pointers.
  *
- * @since 1.0
+ * @since 19.0
  */
 public interface Pointer extends UnsignedWord, PointerBase {
 
     /**
      * Unsafe conversion of this Pointer to a Java language object. No correctness checks or type
      * checks are performed. The caller must ensure that the Pointer contains a valid Java object
      * that can i.e., processed by the garbage collector.
      *
      * @return this Pointer cast to Object.
      *
-     * @since 1.0
+     * @since 19.0
      */
     Object toObject();
 
     /**
      * Unsafe conversion of this Pointer to a Java language object. No correctness checks or type
      * checks are performed. The caller must ensure that the Pointer contains a valid Java object
      * that can i.e., processed by the garbage collector and the Pointer does not contain 0.
      *
      * @return this Pointer cast to non-null Object.
      *
-     * @since 1.0
+     * @since 19.0
      */
     Object toObjectNonNull();
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -83,11 +83,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     byte readByte(WordBase offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -99,11 +99,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     char readChar(WordBase offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -115,11 +115,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     short readShort(WordBase offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -131,11 +131,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     int readInt(WordBase offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -147,11 +147,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     long readLong(WordBase offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -163,11 +163,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     float readFloat(WordBase offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -179,11 +179,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     double readDouble(WordBase offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -195,11 +195,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     <T extends WordBase> T readWord(WordBase offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -211,11 +211,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     Object readObject(WordBase offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -223,11 +223,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     byte readByte(int offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -235,11 +235,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     char readChar(int offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -247,11 +247,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     short readShort(int offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -259,11 +259,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     int readInt(int offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -271,11 +271,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     long readLong(int offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -283,11 +283,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     float readFloat(int offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -295,11 +295,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     double readDouble(int offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -307,11 +307,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     <T extends WordBase> T readWord(int offset, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -319,11 +319,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the read
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     Object readObject(int offset, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -335,11 +335,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeByte(WordBase offset, byte val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -351,11 +351,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeChar(WordBase offset, char val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -367,11 +367,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeShort(WordBase offset, short val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -383,11 +383,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeInt(WordBase offset, int val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -399,11 +399,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeLong(WordBase offset, long val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -415,11 +415,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeFloat(WordBase offset, float val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -431,11 +431,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeDouble(WordBase offset, double val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -447,11 +447,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeWord(WordBase offset, WordBase val, LocationIdentity locationIdentity);
 
     /**
      * Initializes the memory at address {@code (this + offset)}. Both the base address and offset
@@ -463,11 +463,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void initializeLong(WordBase offset, long val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -479,11 +479,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeObject(WordBase offset, Object val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -491,11 +491,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeByte(int offset, byte val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -503,11 +503,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeChar(int offset, char val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -515,11 +515,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeShort(int offset, short val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -527,11 +527,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeInt(int offset, int val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -539,11 +539,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeLong(int offset, long val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -551,11 +551,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeFloat(int offset, float val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -563,11 +563,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeDouble(int offset, double val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -575,11 +575,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeWord(int offset, WordBase val, LocationIdentity locationIdentity);
 
     /**
      * Initializes the memory at address {@code (this + offset)}. Both the base address and offset
@@ -587,11 +587,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void initializeLong(int offset, long val, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -599,11 +599,11 @@
      *
      * @param offset the signed offset for the memory access
      * @param locationIdentity the identity of the write
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeObject(int offset, Object val, LocationIdentity locationIdentity);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -614,11 +614,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     byte readByte(WordBase offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -629,11 +629,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     char readChar(WordBase offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -644,11 +644,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     short readShort(WordBase offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -659,11 +659,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     int readInt(WordBase offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -674,11 +674,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     long readLong(WordBase offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -689,11 +689,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     float readFloat(WordBase offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -704,11 +704,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     double readDouble(WordBase offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -719,11 +719,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     <T extends WordBase> T readWord(WordBase offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -734,110 +734,110 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     Object readObject(WordBase offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     byte readByte(int offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     char readChar(int offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     short readShort(int offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     int readInt(int offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     long readLong(int offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     float readFloat(int offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     double readDouble(int offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     <T extends WordBase> T readWord(int offset);
 
     /**
      * Reads the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @return the result of the memory access
      *
-     * @since 1.0
+     * @since 19.0
      */
     Object readObject(int offset);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -848,11 +848,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeByte(WordBase offset, byte val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -863,11 +863,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeChar(WordBase offset, char val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -878,11 +878,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeShort(WordBase offset, short val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -893,11 +893,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeInt(WordBase offset, int val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -908,11 +908,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeLong(WordBase offset, long val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -923,11 +923,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeFloat(WordBase offset, float val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -938,11 +938,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeDouble(WordBase offset, double val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -953,11 +953,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeWord(WordBase offset, WordBase val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
@@ -968,11 +968,11 @@
      * knows that the highest-order bit of the unsigned value is never used).
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeObject(WordBase offset, Object val);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -988,11 +988,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return The value that was read for comparison, which is {@code expectedValue} if the
      *         exchange was performed.
      *
-     * @since 1.0
+     * @since 19.0
      */
     int compareAndSwapInt(WordBase offset, int expectedValue, int newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1008,11 +1008,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return The value that was read for comparison, which is {@code expectedValue} if the
      *         exchange was performed.
      *
-     * @since 1.0
+     * @since 19.0
      */
     long compareAndSwapLong(WordBase offset, long expectedValue, long newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1028,11 +1028,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return The value that was read for comparison, which is {@code expectedValue} if the
      *         exchange was performed.
      *
-     * @since 1.0
+     * @since 19.0
      */
     <T extends WordBase> T compareAndSwapWord(WordBase offset, T expectedValue, T newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1048,11 +1048,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return The value that was read for comparison, which is {@code expectedValue} if the
      *         exchange was performed.
      *
-     * @since 1.0
+     * @since 19.0
      */
     Object compareAndSwapObject(WordBase offset, Object expectedValue, Object newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1068,11 +1068,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return {@code true} if successful. False return indicates that the actual value was not
      *         equal to the expected value.
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean logicCompareAndSwapInt(WordBase offset, int expectedValue, int newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1088,11 +1088,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return {@code true} if successful. False return indicates that the actual value was not
      *         equal to the expected value.
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean logicCompareAndSwapLong(WordBase offset, long expectedValue, long newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1108,11 +1108,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return {@code true} if successful. False return indicates that the actual value was not
      *         equal to the expected value.
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean logicCompareAndSwapWord(WordBase offset, WordBase expectedValue, WordBase newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1128,110 +1128,110 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return {@code true} if successful. False return indicates that the actual value was not
      *         equal to the expected value.
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean logicCompareAndSwapObject(WordBase offset, Object expectedValue, Object newValue, LocationIdentity locationIdentity);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeByte(int offset, byte val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeChar(int offset, char val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeShort(int offset, short val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeInt(int offset, int val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeLong(int offset, long val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeFloat(int offset, float val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeDouble(int offset, double val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeWord(int offset, WordBase val);
 
     /**
      * Writes the memory at address {@code (this + offset)}. Both the base address and offset are in
      * bytes.
      *
      * @param offset the signed offset for the memory access
      * @param val the value to be written to memory
      *
-     * @since 1.0
+     * @since 19.0
      */
     void writeObject(int offset, Object val);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1243,11 +1243,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return The value that was read for comparison, which is {@code expectedValue} if the
      *         exchange was performed.
      *
-     * @since 1.0
+     * @since 19.0
      */
     int compareAndSwapInt(int offset, int expectedValue, int newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1259,11 +1259,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return The value that was read for comparison, which is {@code expectedValue} if the
      *         exchange was performed.
      *
-     * @since 1.0
+     * @since 19.0
      */
     long compareAndSwapLong(int offset, long expectedValue, long newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1275,11 +1275,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return The value that was read for comparison, which is {@code expectedValue} if the
      *         exchange was performed.
      *
-     * @since 1.0
+     * @since 19.0
      */
     <T extends WordBase> T compareAndSwapWord(int offset, T expectedValue, T newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1291,11 +1291,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return The value that was read for comparison, which is {@code expectedValue} if the
      *         exchange was performed.
      *
-     * @since 1.0
+     * @since 19.0
      */
     Object compareAndSwapObject(int offset, Object expectedValue, Object newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1307,11 +1307,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return {@code true} if successful. False return indicates that the actual value was not
      *         equal to the expected value.
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean logicCompareAndSwapInt(int offset, int expectedValue, int newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1323,11 +1323,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return {@code true} if successful. False return indicates that the actual value was not
      *         equal to the expected value.
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean logicCompareAndSwapLong(int offset, long expectedValue, long newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1339,11 +1339,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return {@code true} if successful. False return indicates that the actual value was not
      *         equal to the expected value.
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean logicCompareAndSwapWord(int offset, WordBase expectedValue, WordBase newValue, LocationIdentity locationIdentity);
 
     /**
      * In a single atomic step, compares the memory at address {@code (this + offset)} to the
@@ -1355,11 +1355,11 @@
      * @param newValue the new value for the atomic exchange
      * @param locationIdentity the identity of the memory location
      * @return {@code true} if successful. False return indicates that the actual value was not
      *         equal to the expected value.
      *
-     * @since 1.0
+     * @since 19.0
      */
     boolean logicCompareAndSwapObject(int offset, Object expectedValue, Object newValue, LocationIdentity locationIdentity);
 
     // Math functions that are defined in Unsigned, but known to preserve the
     // pointer-characteristics.
@@ -1369,87 +1369,87 @@
      * Returns a Pointer whose value is {@code (this + val)}.
      *
      * @param val value to be added to this Pointer.
      * @return {@code this + val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     @Override
     Pointer add(UnsignedWord val);
 
     /**
      * Returns a Pointer whose value is {@code (this + val)}.
      *
      * @param val value to be added to this Pointer.
      * @return {@code this + val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     @Override
     Pointer add(int val);
 
     /**
      * Returns a Pointer whose value is {@code (this - val)}.
      *
      * @param val value to be subtracted from this Pointer.
      * @return {@code this - val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     @Override
     Pointer subtract(UnsignedWord val);
 
     /**
      * Returns a Pointer whose value is {@code (this - val)}.
      *
      * @param val value to be subtracted from this Pointer.
      * @return {@code this - val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     @Override
     Pointer subtract(int val);
 
     /**
      * Returns a Pointer whose value is {@code (this & val)}.
      *
      * @param val value to be AND'ed with this Pointer.
      * @return {@code this & val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     @Override
     Pointer and(UnsignedWord val);
 
     /**
      * Returns a Pointer whose value is {@code (this & val)}.
      *
      * @param val value to be AND'ed with this Pointer.
      * @return {@code this & val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     @Override
     Pointer and(int val);
 
     /**
      * Returns a Pointer whose value is {@code (this | val)}.
      *
      * @param val value to be OR'ed with this Pointer.
      * @return {@code this | val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     @Override
     Pointer or(UnsignedWord val);
 
     /**
      * Returns a Pointer whose value is {@code (this | val)}.
      *
      * @param val value to be OR'ed with this Pointer.
      * @return {@code this | val}
      *
-     * @since 1.0
+     * @since 19.0
      */
     @Override
     Pointer or(int val);
 }
