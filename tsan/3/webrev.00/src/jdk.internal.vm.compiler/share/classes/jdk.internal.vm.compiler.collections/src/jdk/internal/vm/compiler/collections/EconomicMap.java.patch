diff a/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.collections/src/jdk/internal/vm/compiler/collections/EconomicMap.java b/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.collections/src/jdk/internal/vm/compiler/collections/EconomicMap.java
--- a/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.collections/src/jdk/internal/vm/compiler/collections/EconomicMap.java
+++ b/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.collections/src/jdk/internal/vm/compiler/collections/EconomicMap.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -45,28 +45,28 @@
 import java.util.function.BiFunction;
 
 /**
  * Memory efficient map data structure.
  *
- * @since 1.0
+ * @since 19.0
  */
 public interface EconomicMap<K, V> extends UnmodifiableEconomicMap<K, V> {
 
     /**
      * Associates {@code value} with {@code key} in this map. If the map previously contained a
      * mapping for {@code key}, the old value is replaced by {@code value}.
      *
      * @return the previous value associated with {@code key}, or {@code null} if there was no
      *         mapping for {@code key}.
-     * @since 1.0
+     * @since 19.0
      */
     V put(K key, V value);
 
     /**
      * Copies all of the mappings from {@code other} to this map.
      *
-     * @since 1.0
+     * @since 19.0
      */
     default void putAll(EconomicMap<K, V> other) {
         MapCursor<K, V> e = other.getEntries();
         while (e.advance()) {
             put(e.getKey(), e.getValue());
@@ -74,11 +74,11 @@
     }
 
     /**
      * Copies all of the mappings from {@code other} to this map.
      *
-     * @since 1.0
+     * @since 19.0
      */
     default void putAll(UnmodifiableEconomicMap<? extends K, ? extends V> other) {
         UnmodifiableMapCursor<? extends K, ? extends V> entry = other.getEntries();
         while (entry.advance()) {
             put(entry.getKey(), entry.getValue());
@@ -86,107 +86,107 @@
     }
 
     /**
      * Removes all of the mappings from this map. The map will be empty after this call returns.
      *
-     * @since 1.0
+     * @since 19.0
      */
     void clear();
 
     /**
      * Removes the mapping for {@code key} from this map if it is present. The map will not contain
      * a mapping for {@code key} once the call returns.
      *
      * @return the previous value associated with {@code key}, or {@code null} if there was no
      *         mapping for {@code key}.
-     * @since 1.0
+     * @since 19.0
      */
     V removeKey(K key);
 
     /**
      * Returns a {@link MapCursor} view of the mappings contained in this map.
      *
-     * @since 1.0
+     * @since 19.0
      */
     @Override
     MapCursor<K, V> getEntries();
 
     /**
      * Replaces each entry's value with the result of invoking {@code function} on that entry until
      * all entries have been processed or the function throws an exception. Exceptions thrown by the
      * function are relayed to the caller.
      *
-     * @since 1.0
+     * @since 19.0
      */
     void replaceAll(BiFunction<? super K, ? super V, ? extends V> function);
 
     /**
      * Creates a new map that guarantees insertion order on the key set with the default
      * {@link Equivalence#DEFAULT} comparison strategy for keys.
      *
-     * @since 1.0
+     * @since 19.0
      */
     static <K, V> EconomicMap<K, V> create() {
         return EconomicMap.create(Equivalence.DEFAULT);
     }
 
     /**
      * Creates a new map that guarantees insertion order on the key set with the default
      * {@link Equivalence#DEFAULT} comparison strategy for keys and initializes with a specified
      * capacity.
      *
-     * @since 1.0
+     * @since 19.0
      */
     static <K, V> EconomicMap<K, V> create(int initialCapacity) {
         return EconomicMap.create(Equivalence.DEFAULT, initialCapacity);
     }
 
     /**
      * Creates a new map that guarantees insertion order on the key set with the given comparison
      * strategy for keys.
      *
-     * @since 1.0
+     * @since 19.0
      */
     static <K, V> EconomicMap<K, V> create(Equivalence strategy) {
         return EconomicMapImpl.create(strategy, false);
     }
 
     /**
      * Creates a new map that guarantees insertion order on the key set with the default
      * {@link Equivalence#DEFAULT} comparison strategy for keys and copies all elements from the
      * specified existing map.
      *
-     * @since 1.0
+     * @since 19.0
      */
     static <K, V> EconomicMap<K, V> create(UnmodifiableEconomicMap<K, V> m) {
         return EconomicMap.create(Equivalence.DEFAULT, m);
     }
 
     /**
      * Creates a new map that guarantees insertion order on the key set and copies all elements from
      * the specified existing map.
      *
-     * @since 1.0
+     * @since 19.0
      */
     static <K, V> EconomicMap<K, V> create(Equivalence strategy, UnmodifiableEconomicMap<K, V> m) {
         return EconomicMapImpl.create(strategy, m, false);
     }
 
     /**
      * Creates a new map that guarantees insertion order on the key set and initializes with a
      * specified capacity.
      *
-     * @since 1.0
+     * @since 19.0
      */
     static <K, V> EconomicMap<K, V> create(Equivalence strategy, int initialCapacity) {
         return EconomicMapImpl.create(strategy, initialCapacity, false);
     }
 
     /**
      * Wraps an existing {@link Map} as an {@link EconomicMap}.
      *
-     * @since 1.0
+     * @since 19.0
      */
     static <K, V> EconomicMap<K, V> wrapMap(Map<K, V> map) {
         return new EconomicMap<K, V>() {
 
             @Override
