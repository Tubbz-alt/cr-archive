diff a/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.collections/src/jdk/internal/vm/compiler/collections/Pair.java b/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.collections/src/jdk/internal/vm/compiler/collections/Pair.java
--- a/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.collections/src/jdk/internal/vm/compiler/collections/Pair.java
+++ b/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.collections/src/jdk/internal/vm/compiler/collections/Pair.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -43,11 +43,11 @@
 import java.util.Objects;
 
 /**
  * Utility class representing a pair of values.
  *
- * @since 1.0
+ * @since 19.0
  */
 public final class Pair<L, R> {
 
     private static final Pair<Object, Object> EMPTY = new Pair<>(null, null);
 
@@ -55,11 +55,11 @@
     private final R right;
 
     /**
      * Returns an empty pair.
      *
-     * @since 1.0
+     * @since 19.0
      */
     @SuppressWarnings("unchecked")
     public static <L, R> Pair<L, R> empty() {
         return (Pair<L, R>) EMPTY;
     }
@@ -67,11 +67,11 @@
     /**
      * Constructs a pair with its left value being {@code left}, or returns an empty pair if
      * {@code left} is null.
      *
      * @return the constructed pair or an empty pair if {@code left} is null.
-     * @since 1.0
+     * @since 19.0
      */
     public static <L, R> Pair<L, R> createLeft(L left) {
         if (left == null) {
             return empty();
         } else {
@@ -82,11 +82,11 @@
     /**
      * Constructs a pair with its right value being {@code right}, or returns an empty pair if
      * {@code right} is null.
      *
      * @return the constructed pair or an empty pair if {@code right} is null.
-     * @since 1.0
+     * @since 19.0
      */
     public static <L, R> Pair<L, R> createRight(R right) {
         if (right == null) {
             return empty();
         } else {
@@ -97,11 +97,11 @@
     /**
      * Constructs a pair with its left value being {@code left}, and its right value being
      * {@code right}, or returns an empty pair if both inputs are null.
      *
      * @return the constructed pair or an empty pair if both inputs are null.
-     * @since 1.0
+     * @since 19.0
      */
     public static <L, R> Pair<L, R> create(L left, R right) {
         if (right == null && left == null) {
             return empty();
         } else {
@@ -115,39 +115,39 @@
     }
 
     /**
      * Returns the left value of this pair.
      *
-     * @since 1.0
+     * @since 19.0
      */
     public L getLeft() {
         return left;
     }
 
     /**
      * Returns the right value of this pair.
      *
-     * @since 1.0
+     * @since 19.0
      */
     public R getRight() {
         return right;
     }
 
     /**
      * {@inheritDoc}
      *
-     * @since 1.0
+     * @since 19.0
      */
     @Override
     public int hashCode() {
         return Objects.hashCode(left) + 31 * Objects.hashCode(right);
     }
 
     /**
      * {@inheritDoc}
      *
-     * @since 1.0
+     * @since 19.0
      */
     @SuppressWarnings("unchecked")
     @Override
     public boolean equals(Object obj) {
         if (obj == this) {
@@ -163,11 +163,11 @@
     }
 
     /**
      * {@inheritDoc}
      *
-     * @since 1.0
+     * @since 19.0
      */
     @Override
     public String toString() {
         return String.format("(%s, %s)", left, right);
     }
