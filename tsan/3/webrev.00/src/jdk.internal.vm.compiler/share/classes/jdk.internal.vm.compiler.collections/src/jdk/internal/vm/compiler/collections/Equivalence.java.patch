diff a/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.collections/src/jdk/internal/vm/compiler/collections/Equivalence.java b/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.collections/src/jdk/internal/vm/compiler/collections/Equivalence.java
--- a/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.collections/src/jdk/internal/vm/compiler/collections/Equivalence.java
+++ b/src/jdk.internal.vm.compiler/share/classes/jdk.internal.vm.compiler.collections/src/jdk/internal/vm/compiler/collections/Equivalence.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -42,20 +42,20 @@
 
 /**
  * Strategy for comparing two objects. Default predefined strategies are {@link #DEFAULT},
  * {@link #IDENTITY}, and {@link #IDENTITY_WITH_SYSTEM_HASHCODE}.
  *
- * @since 1.0
+ * @since 19.0
  */
 public abstract class Equivalence {
 
     /**
      * Default equivalence calling {@link #equals(Object)} to check equality and {@link #hashCode()}
      * for obtaining hash values. Do not change the logic of this class as it may be inlined in
      * other places.
      *
-     * @since 1.0
+     * @since 19.0
      */
     public static final Equivalence DEFAULT = new Equivalence() {
 
         @Override
         public boolean equals(Object a, Object b) {
@@ -70,11 +70,11 @@
 
     /**
      * Identity equivalence using {@code ==} to check equality and {@link #hashCode()} for obtaining
      * hash values. Do not change the logic of this class as it may be inlined in other places.
      *
-     * @since 1.0
+     * @since 19.0
      */
     public static final Equivalence IDENTITY = new Equivalence() {
 
         @Override
         public boolean equals(Object a, Object b) {
@@ -90,11 +90,11 @@
     /**
      * Identity equivalence using {@code ==} to check equality and
      * {@link System#identityHashCode(Object)} for obtaining hash values. Do not change the logic of
      * this class as it may be inlined in other places.
      *
-     * @since 1.0
+     * @since 19.0
      */
     public static final Equivalence IDENTITY_WITH_SYSTEM_HASHCODE = new Equivalence() {
 
         @Override
         public boolean equals(Object a, Object b) {
@@ -108,25 +108,25 @@
     };
 
     /**
      * Subclass for creating custom equivalence definitions.
      *
-     * @since 1.0
+     * @since 19.0
      */
     protected Equivalence() {
     }
 
     /**
      * Returns {@code true} if the non-{@code null} arguments are equal to each other and
      * {@code false} otherwise.
      *
-     * @since 1.0
+     * @since 19.0
      */
     public abstract boolean equals(Object a, Object b);
 
     /**
      * Returns the hash code of a non-{@code null} argument {@code o}.
      *
-     * @since 1.0
+     * @since 19.0
      */
     public abstract int hashCode(Object o);
 }
