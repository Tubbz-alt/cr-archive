diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.jtt/src/org/graalvm/compiler/jtt/threads/SynchronizedLoopExit01.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.jtt/src/org/graalvm/compiler/jtt/threads/SynchronizedLoopExit01.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.jtt/src/org/graalvm/compiler/jtt/threads/SynchronizedLoopExit01.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.jtt/src/org/graalvm/compiler/jtt/threads/SynchronizedLoopExit01.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -42,10 +42,11 @@
     @Rule public TestRule timeout = createTimeoutSeconds(20);
 
     protected Object object = new Object();
     protected volatile boolean drained = false;
     protected volatile boolean someBoolean = true;
+    protected volatile int someInt = 3;
 
     public boolean test() {
         boolean b = true;
         while (!drained) {
             synchronized (object) {
@@ -61,6 +62,51 @@
     @Test
     public void run0() throws Throwable {
         runTest("test");
     }
 
+    public synchronized boolean test1() {
+        boolean b = true;
+        while (!drained) {
+            synchronized (object) {
+                boolean c = b = someBoolean;
+                if (c || drained) {
+                    break;
+                }
+            }
+        }
+        return b;
+    }
+
+    @Test
+    public void run1() throws Throwable {
+        runTest("test1");
+    }
+
+    public synchronized boolean test2() {
+        boolean b = true;
+        while (!drained) {
+            synchronized (object) {
+                boolean c = b = someBoolean;
+                if (c || drained) {
+                    break;
+                }
+                if (someInt > 0) {
+                    throw new RuntimeException();
+                }
+            }
+            if (someInt < -10) {
+                throw new IndexOutOfBoundsException();
+            }
+        }
+        if (someInt < -5) {
+            throw new IllegalArgumentException();
+        }
+        return b;
+    }
+
+    @Test
+    public void run2() throws Throwable {
+        runTest("test2");
+    }
+
 }
