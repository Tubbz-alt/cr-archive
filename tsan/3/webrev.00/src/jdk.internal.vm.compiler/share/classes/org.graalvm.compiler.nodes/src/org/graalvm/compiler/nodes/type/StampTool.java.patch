diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/type/StampTool.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/type/StampTool.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/type/StampTool.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/type/StampTool.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -119,13 +119,14 @@
         int max = Long.numberOfLeadingZeros(valueStamp.downMask() & mask) - adjust;
         return StampFactory.forInteger(JavaKind.Int, min, max);
     }
 
     public static Stamp stampForTrailingZeros(IntegerStamp valueStamp) {
-        long mask = CodeUtil.mask(valueStamp.getBits());
-        int min = Long.numberOfTrailingZeros(valueStamp.upMask() & mask);
-        int max = Long.numberOfTrailingZeros(valueStamp.downMask() & mask);
+        int bits = valueStamp.getBits();
+        long mask = CodeUtil.mask(bits);
+        int min = Math.min(Long.numberOfTrailingZeros(valueStamp.upMask() & mask), bits);
+        int max = Math.min(Long.numberOfTrailingZeros(valueStamp.downMask() & mask), bits);
         return StampFactory.forInteger(JavaKind.Int, min, max);
     }
 
     /**
      * Checks whether this {@link ValueNode} represents a {@linkplain Stamp#hasValues() legal}
