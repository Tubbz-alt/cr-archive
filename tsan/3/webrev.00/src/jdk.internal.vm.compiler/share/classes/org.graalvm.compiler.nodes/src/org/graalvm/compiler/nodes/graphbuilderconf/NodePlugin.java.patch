diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/graphbuilderconf/NodePlugin.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/graphbuilderconf/NodePlugin.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/graphbuilderconf/NodePlugin.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/graphbuilderconf/NodePlugin.java
@@ -22,12 +22,15 @@
  */
 
 
 package org.graalvm.compiler.nodes.graphbuilderconf;
 
+import java.util.function.Supplier;
+
 import org.graalvm.compiler.graph.Node.ValueNumberable;
 import org.graalvm.compiler.nodes.FixedWithNextNode;
+import org.graalvm.compiler.nodes.FrameState;
 import org.graalvm.compiler.nodes.StructuredGraph;
 import org.graalvm.compiler.nodes.ValueNode;
 import org.graalvm.compiler.nodes.extended.GuardingNode;
 
 import jdk.vm.ci.meta.JavaKind;
@@ -224,13 +227,14 @@
      * The reason for this constraint is that when this plugin runs, it's inserting instructions
      * into a different block than the one currently being parsed.
      *
      * @param graph the graph being parsed
      * @param afterExceptionLoaded the last fixed node after loading the exception
+     * @param frameStateFunction a helper that produces a FrameState suitable for deopt
      * @return the last fixed node after instrumentation
      */
-    default FixedWithNextNode instrumentExceptionDispatch(StructuredGraph graph, FixedWithNextNode afterExceptionLoaded) {
+    default FixedWithNextNode instrumentExceptionDispatch(StructuredGraph graph, FixedWithNextNode afterExceptionLoaded, Supplier<FrameState> frameStateFunction) {
         return afterExceptionLoaded;
     }
 
     /**
      * If the plugin {@link GraphBuilderContext#push pushes} a value with a different
