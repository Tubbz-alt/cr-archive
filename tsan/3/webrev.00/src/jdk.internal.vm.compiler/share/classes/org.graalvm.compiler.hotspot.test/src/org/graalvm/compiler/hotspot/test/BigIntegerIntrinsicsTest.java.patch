diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot.test/src/org/graalvm/compiler/hotspot/test/BigIntegerIntrinsicsTest.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot.test/src/org/graalvm/compiler/hotspot/test/BigIntegerIntrinsicsTest.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot.test/src/org/graalvm/compiler/hotspot/test/BigIntegerIntrinsicsTest.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot.test/src/org/graalvm/compiler/hotspot/test/BigIntegerIntrinsicsTest.java
@@ -19,10 +19,12 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+
+
 package org.graalvm.compiler.hotspot.test;
 
 import java.lang.reflect.InvocationTargetException;
 import java.math.BigInteger;
 import java.util.Random;
@@ -191,12 +193,11 @@
         }
 
         Object invokeCode(Object... args) {
             try {
                 return testcode.executeVarargs(args);
-            }
-            catch (InvalidInstalledCodeException e) {
+            } catch (InvalidInstalledCodeException e) {
                 // Ensure the installed code is valid, possibly recompiled.
                 testcode = getCode(testmethod);
 
                 assert testcode != null;
                 assert testcode.isValid();
@@ -206,24 +207,22 @@
         }
 
         private Object invokeSafe(ResolvedJavaMethod method, Object receiver, Object... args) {
             try {
                 return invoke(method, receiver, args);
-            } catch (IllegalAccessException   | InvocationTargetException |
-                     IllegalArgumentException | InstantiationException e) {
+            } catch (IllegalAccessException | InvocationTargetException | IllegalArgumentException | InstantiationException e) {
                 throw new RuntimeException(e);
             }
         }
 
         // Private data section:
         private ResolvedJavaMethod javamethod;
         private ResolvedJavaMethod testmethod;
         private InstalledCode testcode;
     }
 
-    private static GraalHotSpotVMConfig config =
-        ((HotSpotGraalRuntimeProvider) Graal.getRequiredCapability(RuntimeProvider.class)).getVMConfig();
+    private static GraalHotSpotVMConfig config = ((HotSpotGraalRuntimeProvider) Graal.getRequiredCapability(RuntimeProvider.class)).getVMConfig();
 
     private static BigInteger bigTwo = BigInteger.valueOf(2);
     private static Random rnd = new Random(17);
 
     private static BigInteger randomBig(int i) {
