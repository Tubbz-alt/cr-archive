diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.jtt/src/org/graalvm/compiler/lir/jtt/StackMoveTest.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.jtt/src/org/graalvm/compiler/lir/jtt/StackMoveTest.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.jtt/src/org/graalvm/compiler/lir/jtt/StackMoveTest.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir.jtt/src/org/graalvm/compiler/lir/jtt/StackMoveTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -96,11 +96,11 @@
         out[3] = getOutput(stackCopy, "slot2", a);
         return out;
     }
 
     @Test
-    public void runInt() throws Throwable {
+    public void runInt() {
         runTest("testInt", Integer.MIN_VALUE, supply(() -> new int[4]));
         runTest("testInt", -1, supply(() -> new int[4]));
         runTest("testInt", 0, supply(() -> new int[4]));
         runTest("testInt", 1, supply(() -> new int[4]));
         runTest("testInt", Integer.MAX_VALUE, supply(() -> new int[4]));
@@ -123,11 +123,11 @@
         out[3] = getOutput(stackCopy, "slot2", a);
         return out;
     }
 
     @Test
-    public void runLong() throws Throwable {
+    public void runLong() {
         runTest("testLong", Long.MIN_VALUE, supply(() -> new long[3]));
         runTest("testLong", -1L, supply(() -> new long[3]));
         runTest("testLong", 0L, supply(() -> new long[3]));
         runTest("testLong", 1L, supply(() -> new long[3]));
         runTest("testLong", Long.MAX_VALUE, supply(() -> new long[3]));
@@ -150,11 +150,11 @@
         out[3] = getOutput(stackCopy, "slot2", a);
         return out;
     }
 
     @Test
-    public void runFloat() throws Throwable {
+    public void runFloat() {
         runTest("testFloat", Float.MIN_VALUE, supply(() -> new float[3]));
         runTest("testFloat", -1f, supply(() -> new float[3]));
         runTest("testFloat", -0.1f, supply(() -> new float[3]));
         runTest("testFloat", 0f, supply(() -> new float[3]));
         runTest("testFloat", 0.1f, supply(() -> new float[3]));
@@ -215,11 +215,11 @@
         out[3] = getOutput(shortStackCopy, "slot2", a);
         return out;
     }
 
     @Test
-    public void runShort() throws Throwable {
+    public void runShort() {
         runTest("testShort", Short.MIN_VALUE, supply(() -> new short[3]));
         runTest("testShort", (short) -1, supply(() -> new short[3]));
         runTest("testShort", (short) 0, supply(() -> new short[3]));
         runTest("testShort", (short) 1, supply(() -> new short[3]));
         runTest("testShort", Short.MAX_VALUE, supply(() -> new short[3]));
@@ -249,11 +249,11 @@
         out[3] = getOutput(byteStackCopy, "slot2", a);
         return out;
     }
 
     @Test
-    public void runByte() throws Throwable {
+    public void runByte() {
         runTest("testByte", Byte.MIN_VALUE, supply(() -> new byte[3]));
         runTest("testByte", (byte) -1, supply(() -> new byte[3]));
         runTest("testByte", (byte) 0, supply(() -> new byte[3]));
         runTest("testByte", (byte) 1, supply(() -> new byte[3]));
         runTest("testByte", Byte.MAX_VALUE, supply(() -> new byte[3]));
