diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements.test/src/org/graalvm/compiler/replacements/test/ClassCastBytecodeExceptionTest.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements.test/src/org/graalvm/compiler/replacements/test/ClassCastBytecodeExceptionTest.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements.test/src/org/graalvm/compiler/replacements/test/ClassCastBytecodeExceptionTest.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements.test/src/org/graalvm/compiler/replacements/test/ClassCastBytecodeExceptionTest.java
@@ -25,75 +25,21 @@
 package org.graalvm.compiler.replacements.test;
 
 import java.util.ArrayList;
 import java.util.Collection;
 
+import org.graalvm.compiler.api.directives.GraalDirectives;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 
-import org.graalvm.compiler.api.directives.GraalDirectives;
-import org.graalvm.compiler.core.common.type.Stamp;
-import org.graalvm.compiler.core.common.type.StampFactory;
-import org.graalvm.compiler.core.common.type.TypeReference;
-import org.graalvm.compiler.nodes.ConstantNode;
-import org.graalvm.compiler.nodes.ValueNode;
-import org.graalvm.compiler.nodes.extended.BytecodeExceptionNode.BytecodeExceptionKind;
-import org.graalvm.compiler.nodes.graphbuilderconf.GraphBuilderContext;
-import org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugin;
-import org.graalvm.compiler.nodes.graphbuilderconf.InvocationPlugins;
-
-import jdk.vm.ci.meta.Constant;
-import jdk.vm.ci.meta.ResolvedJavaMethod;
-import jdk.vm.ci.meta.ResolvedJavaType;
-
 @RunWith(Parameterized.class)
 public class ClassCastBytecodeExceptionTest extends BytecodeExceptionTest {
 
-    private static class Exceptions {
-
-        public static void throwClassCast(Object obj, Class<?> cls) {
-            /*
-             * We don't use cls.cast(obj) here because that gives a different exception message than
-             * the checkcast bytecode.
-             */
-            if (cls == Double.class) {
-                Double cast = (Double) obj;
-                GraalDirectives.blackhole(cast);
-            } else if (cls == byte[].class) {
-                byte[] cast = (byte[]) obj;
-                GraalDirectives.blackhole(cast);
-            } else if (cls == String[].class) {
-                String[] cast = (String[]) obj;
-                GraalDirectives.blackhole(cast);
-            } else if (cls == Object[][].class) {
-                Object[][] cast = (Object[][]) obj;
-                GraalDirectives.blackhole(cast);
-            } else {
-                Assert.fail("unexpected class argument");
-            }
-        }
-    }
-
-    @Override
-    protected void registerInvocationPlugins(InvocationPlugins invocationPlugins) {
-        invocationPlugins.register(new InvocationPlugin() {
-            @Override
-            public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode obj, ValueNode classNode) {
-                ResolvedJavaType type = b.getConstantReflection().asJavaType(classNode.asConstant());
-                Constant hub = b.getConstantReflection().asObjectHub(type);
-                Stamp hubStamp = b.getStampProvider().createHubStamp(StampFactory.object(TypeReference.createExactTrusted(type)));
-                ConstantNode hubConst = b.add(ConstantNode.forConstant(hubStamp, hub, b.getMetaAccess()));
-                return throwBytecodeException(b, BytecodeExceptionKind.CLASS_CAST, obj, hubConst);
-            }
-        }, Exceptions.class, "throwClassCast", Object.class, Class.class);
-        super.registerInvocationPlugins(invocationPlugins);
-    }
-
     @Parameter(0) public Object object;
     @Parameter(1) public Class<?> cls;
 
     @Parameters(name = "{1}")
     public static Collection<Object[]> data() {
@@ -105,38 +51,110 @@
         }
         return ret;
     }
 
     public static void castToDouble(Object obj) {
-        Exceptions.throwClassCast(obj, Double.class);
+        /*
+         * We don't use cls.cast(obj) here because that gives a different exception message than the
+         * checkcast bytecode.
+         */
+        if (Double.class == Double.class) {
+            Double cast = (Double) obj;
+            GraalDirectives.blackhole(cast);
+        } else if ((Class<?>) Double.class == byte[].class) {
+            byte[] cast = (byte[]) obj;
+            GraalDirectives.blackhole(cast);
+        } else if ((Class<?>) Double.class == String[].class) {
+            String[] cast = (String[]) obj;
+            GraalDirectives.blackhole(cast);
+        } else if ((Class<?>) Double.class == Object[][].class) {
+            Object[][] cast = (Object[][]) obj;
+            GraalDirectives.blackhole(cast);
+        } else {
+            Assert.fail("unexpected class argument");
+        }
     }
 
     @Test
     public void testCastToDouble() {
         test("castToDouble", object);
     }
 
     public static void castToByteArray(Object obj) {
-        Exceptions.throwClassCast(obj, byte[].class);
+        /*
+         * We don't use cls.cast(obj) here because that gives a different exception message than the
+         * checkcast bytecode.
+         */
+        if ((Class<?>) byte[].class == Double.class) {
+            Double cast = (Double) obj;
+            GraalDirectives.blackhole(cast);
+        } else if (byte[].class == byte[].class) {
+            byte[] cast = (byte[]) obj;
+            GraalDirectives.blackhole(cast);
+        } else if ((Class<?>) byte[].class == String[].class) {
+            String[] cast = (String[]) obj;
+            GraalDirectives.blackhole(cast);
+        } else if ((Class<?>) byte[].class == Object[][].class) {
+            Object[][] cast = (Object[][]) obj;
+            GraalDirectives.blackhole(cast);
+        } else {
+            Assert.fail("unexpected class argument");
+        }
     }
 
     @Test
     public void testCastToByteArray() {
         test("castToByteArray", object);
     }
 
     public static void castToStringArray(Object obj) {
-        Exceptions.throwClassCast(obj, String[].class);
+        /*
+         * We don't use cls.cast(obj) here because that gives a different exception message than the
+         * checkcast bytecode.
+         */
+        if ((Class<?>) String[].class == Double.class) {
+            Double cast = (Double) obj;
+            GraalDirectives.blackhole(cast);
+        } else if ((Class<?>) String[].class == byte[].class) {
+            byte[] cast = (byte[]) obj;
+            GraalDirectives.blackhole(cast);
+        } else if (String[].class == String[].class) {
+            String[] cast = (String[]) obj;
+            GraalDirectives.blackhole(cast);
+        } else if ((Class<?>) String[].class == Object[][].class) {
+            Object[][] cast = (Object[][]) obj;
+            GraalDirectives.blackhole(cast);
+        } else {
+            Assert.fail("unexpected class argument");
+        }
     }
 
     @Test
     public void testCastToStringArray() {
         test("castToStringArray", object);
     }
 
     public static void castToArrayArray(Object obj) {
-        Exceptions.throwClassCast(obj, Object[][].class);
+        /*
+         * We don't use cls.cast(obj) here because that gives a different exception message than the
+         * checkcast bytecode.
+         */
+        if ((Class<?>) Object[][].class == Double.class) {
+            Double cast = (Double) obj;
+            GraalDirectives.blackhole(cast);
+        } else if ((Class<?>) Object[][].class == byte[].class) {
+            byte[] cast = (byte[]) obj;
+            GraalDirectives.blackhole(cast);
+        } else if ((Class<?>) Object[][].class == String[].class) {
+            String[] cast = (String[]) obj;
+            GraalDirectives.blackhole(cast);
+        } else if (Object[][].class == Object[][].class) {
+            Object[][] cast = (Object[][]) obj;
+            GraalDirectives.blackhole(cast);
+        } else {
+            Assert.fail("unexpected class argument");
+        }
     }
 
     @Test
     public void testCastToArrayArray() {
         test("castToArrayArray", object);
