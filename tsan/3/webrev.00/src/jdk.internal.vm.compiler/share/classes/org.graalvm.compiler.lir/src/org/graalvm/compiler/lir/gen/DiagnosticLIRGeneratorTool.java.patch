diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/gen/DiagnosticLIRGeneratorTool.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/gen/DiagnosticLIRGeneratorTool.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/gen/DiagnosticLIRGeneratorTool.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.lir/src/org/graalvm/compiler/lir/gen/DiagnosticLIRGeneratorTool.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -24,10 +24,12 @@
 
 package org.graalvm.compiler.lir.gen;
 
 import org.graalvm.compiler.lir.LIRInstruction;
 import org.graalvm.compiler.lir.StandardOp.SaveRegistersOp;
+import org.graalvm.compiler.lir.StandardOp.ZapRegistersOp;
+
 import jdk.vm.ci.code.Register;
 import jdk.vm.ci.code.RegisterConfig;
 import jdk.vm.ci.code.StackSlot;
 import jdk.vm.ci.meta.JavaConstant;
 import jdk.vm.ci.meta.Value;
@@ -39,29 +41,35 @@
 
     /**
      * Creates a {@link SaveRegistersOp} that fills a given set of registers with known garbage
      * value.
      *
-     * The set of registers actually touched might be {@link SaveRegistersOp#remove reduced} later.
-     *
      * @param zappedRegisters registers to be zapped
      * @param zapValues values used for zapping
      *
      * @see DiagnosticLIRGeneratorTool#createZapRegisters()
      */
-    SaveRegistersOp createZapRegisters(Register[] zappedRegisters, JavaConstant[] zapValues);
+    ZapRegistersOp createZapRegisters(Register[] zappedRegisters, JavaConstant[] zapValues);
 
     /**
-     * Creates a {@link SaveRegistersOp} that fills all
-     * {@link RegisterConfig#getAllocatableRegisters() allocatable registers} with a
+     * Creates a {@link SaveRegistersOp} that fills a given set of registers with a
      * {@link LIRGenerator#zapValueForKind known garbage value}.
      *
-     * The set of registers actually touched might be {@link SaveRegistersOp#remove reduced} later.
+     * @param zappedRegisters registers to be zapped
+     *
+     * @see DiagnosticLIRGeneratorTool#createZapRegisters()
+     */
+    ZapRegistersOp createZapRegisters(Register[] zappedRegisters);
+
+    /**
+     * Creates a {@link ZapRegistersOp} that fills all
+     * {@link RegisterConfig#getAllocatableRegisters() allocatable registers} with a
+     * {@link LIRGenerator#zapValueForKind known garbage value}.
      *
      * @see DiagnosticLIRGeneratorTool#createZapRegisters(Register[], JavaConstant[])
      */
-    SaveRegistersOp createZapRegisters();
+    ZapRegistersOp createZapRegisters();
 
     /**
      * Marker interface for {@link LIRInstruction instructions} that should be succeeded with a
      * {@link DiagnosticLIRGeneratorTool#createZapRegisters() ZapRegisterOp} if assertions are
      * enabled.
