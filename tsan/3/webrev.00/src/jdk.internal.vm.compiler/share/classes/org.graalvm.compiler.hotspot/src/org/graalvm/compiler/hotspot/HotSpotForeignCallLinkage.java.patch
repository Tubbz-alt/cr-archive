diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotForeignCallLinkage.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotForeignCallLinkage.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotForeignCallLinkage.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/HotSpotForeignCallLinkage.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,17 +22,17 @@
  */
 
 
 package org.graalvm.compiler.hotspot;
 
-import jdk.vm.ci.meta.InvokeTarget;
-
 import org.graalvm.compiler.core.common.spi.ForeignCallLinkage;
 import org.graalvm.compiler.core.target.Backend;
 import org.graalvm.compiler.hotspot.stubs.Stub;
 import jdk.internal.vm.compiler.word.LocationIdentity;
 
+import jdk.vm.ci.meta.InvokeTarget;
+
 /**
  * The details required to link a HotSpot runtime or stub call.
  */
 public interface HotSpotForeignCallLinkage extends ForeignCallLinkage, InvokeTarget {
 
@@ -40,26 +40,29 @@
      * Constants for specifying whether a foreign call destroys or preserves registers. A foreign
      * call will always destroy {@link HotSpotForeignCallLinkage#getOutgoingCallingConvention() its}
      * {@linkplain ForeignCallLinkage#getTemporaries() temporary} registers.
      */
     enum RegisterEffect {
-        DESTROYS_REGISTERS,
-        PRESERVES_REGISTERS
+        DESTROYS_ALL_CALLER_SAVE_REGISTERS,
+        COMPUTES_REGISTERS_KILLED
     }
 
     /**
      * Constants for specifying whether a call is a leaf or not and whether a
      * {@code JavaFrameAnchor} prologue and epilogue is required around the call. A leaf function
      * does not lock, GC or throw exceptions.
      */
     enum Transition {
         /**
-         * A call to a leaf function that is guaranteed to not use floating point registers and will
-         * never have its caller stack inspected by the VM. That is, {@code JavaFrameAnchor}
-         * management around the call can be omitted.
+         * A call to a leaf function that is guaranteed to not use floating point registers.
+         * Consequently, floating point registers cleanup will be waived. On AMD64, this means the
+         * compiler will no longer emit vzeroupper instruction around the foreign call, which it
+         * normally does for unknown foreign calls to avoid potential SSE-AVX transition penalty.
+         * Besides, this foreign call will never have its caller stack inspected by the VM. That is,
+         * {@code JavaFrameAnchor} management around the call can be omitted.
          */
-        LEAF_NOFP,
+        LEAF_NO_VZERO,
 
         /**
          * A call to a leaf function that might use floating point registers but will never have its
          * caller stack inspected. That is, {@code JavaFrameAnchor} management around the call can
          * be omitted.
@@ -91,19 +94,10 @@
          * deoptimized and the exception is passed on to be dispatched. If the call can throw an
          * exception it needs to have a precise frame state.
          */
         NOT_REEXECUTABLE,
 
-        /**
-         * Denotes a call that can only be re-executed if it returns with a pending exception. This
-         * type of call models a function that may throw exceptions before any side effects happen.
-         * In this case if an exception is raised the call may be deoptimized and reexecuted. It
-         * also means that while the call has side effects and may deoptimize it doesn't necessarily
-         * need to have a precise frame state.
-         */
-        REEXECUTABLE_ONLY_AFTER_EXCEPTION,
-
         /**
          * Denotes a call that can always be re-executed. If an exception is raised by the call it
          * may be cleared, compiled code deoptimized and reexecuted. Since the call has no side
          * effects it is assumed that the same exception will be thrown.
          */
@@ -118,19 +112,16 @@
     /**
      * Determines if the call has side effects.
      */
     boolean isReexecutable();
 
-    /**
-     * Determines if the call returning a pending exception implies it is side-effect free.
-     */
-    boolean isReexecutableOnlyAfterException();
-
     LocationIdentity[] getKilledLocations();
 
     void setCompiledStub(Stub stub);
 
+    RegisterEffect getEffect();
+
     /**
      * Determines if this is a call to a compiled {@linkplain Stub stub}.
      */
     boolean isCompiledStub();
 
