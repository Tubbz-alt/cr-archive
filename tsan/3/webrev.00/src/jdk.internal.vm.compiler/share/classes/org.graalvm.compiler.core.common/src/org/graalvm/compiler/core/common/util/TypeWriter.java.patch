diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/util/TypeWriter.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/util/TypeWriter.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/util/TypeWriter.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/util/TypeWriter.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -27,11 +27,10 @@
 /**
  * Provides low-level sequential write access for signed and unsigned values of size 1, 2, 4, and 8
  * bytes.
  */
 public interface TypeWriter {
-
     /**
      * Returns the number of bytes that have been written, i.e., the byte index of the next byte to
      * be written.
      */
     long getBytesWritten();
@@ -49,42 +48,20 @@
     void putU2(long value);
 
     /** Writes a signed 4 byte value. */
     void putS4(long value);
 
+    /** Patches a previously written signed 4 byte value at a given offset. */
+    void patchS4(long value, long offset);
+
     /** Writes an unsigned 4 byte value. */
     void putU4(long value);
 
     /** Writes a signed 8 byte value. */
     void putS8(long value);
 
-    /**
-     * Writes a signed value in a variable byte size encoding.
-     */
-    default void putSV(long value) {
-        long cur = value;
-        while (true) {
-            if (cur >= -64 && cur < 64) {
-                putU1(cur & 0x7f);
-                return;
-            }
-            putU1(0x80 | (cur & 0x7f));
-            cur = cur >> 7;
-        }
-    }
+    /** Writes a signed value in a variable byte size encoding. */
+    void putSV(long value);
 
-    /**
-     * Writes an unsigned value in a variable byte size encoding.
-     */
-    default void putUV(long value) {
-        long cur = value;
-        while (true) {
-            assert cur >= 0;
-            if (cur < 128) {
-                putU1(cur & 0x7f);
-                return;
-            }
-            putU1(0x80 | (cur & 0x7f));
-            cur = cur >> 7;
-        }
-    }
+    /** Writes an unsigned value in a variable byte size encoding. */
+    void putUV(long value);
 }
