diff a/src/jdk.jdwp.agent/windows/native/libdt_socket/socket_md.c b/src/jdk.jdwp.agent/windows/native/libdt_socket/socket_md.c
--- a/src/jdk.jdwp.agent/windows/native/libdt_socket/socket_md.c
+++ b/src/jdk.jdwp.agent/windows/native/libdt_socket/socket_md.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -197,14 +197,19 @@
 dbgsysSend(int fd, char *buf, size_t nBytes, int flags) {
     return send(fd, buf, (int)nBytes, flags);
 }
 
 int
-dbgsysGetAddrInfo(char *hostname, char *service,
-                  struct addrinfo *hints,
+dbgsysGetAddrInfo(const char *hostname, const char *service,
+                  const struct addrinfo *hints,
                   struct addrinfo **result) {
-  return getaddrinfo(hostname, service, hints, result);
+    return getaddrinfo(hostname, service, hints, result);
+}
+
+void
+dbgsysFreeAddrInfo(struct addrinfo *info) {
+    freeaddrinfo(info);
 }
 
 unsigned short
 dbgsysHostToNetworkShort(unsigned short hostshort) {
     return htons(hostshort);
@@ -212,11 +217,11 @@
 
 int
 dbgsysSocket(int domain, int type, int protocol) {
   int fd = (int)socket(domain, type, protocol);
   if (fd != SOCKET_ERROR) {
-      SetHandleInformation((HANDLE)(UINT_PTR)fd, HANDLE_FLAG_INHERIT, FALSE);
+    SetHandleInformation((HANDLE)(UINT_PTR)fd, HANDLE_FLAG_INHERIT, FALSE);
   }
   return fd;
 }
 
 int
@@ -238,19 +243,10 @@
 dbgsysBind(int fd, struct sockaddr *name, socklen_t namelen) {
     return bind(fd, name, namelen);
 }
 
 
-uint32_t
-dbgsysInetAddr(const char* cp) {
-    uint32_t addr;
-    if (inet_pton(AF_INET, cp, &addr) < 1) {
-      return -1;
-    }
-    return addr;
-}
-
 uint32_t
 dbgsysHostToNetworkLong(uint32_t hostlong) {
     return (uint32_t)htonl((u_long)hostlong);
 }
 
