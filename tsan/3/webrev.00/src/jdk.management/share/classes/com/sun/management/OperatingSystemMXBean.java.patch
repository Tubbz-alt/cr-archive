diff a/src/jdk.management/share/classes/com/sun/management/OperatingSystemMXBean.java b/src/jdk.management/share/classes/com/sun/management/OperatingSystemMXBean.java
--- a/src/jdk.management/share/classes/com/sun/management/OperatingSystemMXBean.java
+++ b/src/jdk.management/share/classes/com/sun/management/OperatingSystemMXBean.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,10 +28,16 @@
 /**
  * Platform-specific management interface for the operating system
  * on which the Java virtual machine is running.
  *
  * <p>
+ * This interface provides information about the operating environment
+ * on which the Java virtual machine is running. That might be a native
+ * operating system, a virtualized operating system environment, or a
+ * container-managed environment.
+ *
+ * <p>
  * The {@code OperatingSystemMXBean} object returned by
  * {@link java.lang.management.ManagementFactory#getOperatingSystemMXBean()}
  * is an instance of the implementation class of this interface
  * or {@link UnixOperatingSystemMXBean} interface depending on
  * its underlying operating system.
@@ -80,20 +86,50 @@
     public long getProcessCpuTime();
 
     /**
      * Returns the amount of free physical memory in bytes.
      *
+     * @deprecated Use {@link #getFreeMemorySize()} instead of
+     * this historically named method.
+     *
+     * @implSpec This implementation must return the same value
+     * as {@link #getFreeMemorySize()}.
+     *
      * @return the amount of free physical memory in bytes.
      */
-    public long getFreePhysicalMemorySize();
+    @Deprecated(since="14")
+    public default long getFreePhysicalMemorySize() { return getFreeMemorySize(); }
+
+    /**
+     * Returns the amount of free memory in bytes.
+     *
+     * @return the amount of free memory in bytes.
+     * @since 14
+     */
+    public long getFreeMemorySize();
 
     /**
      * Returns the total amount of physical memory in bytes.
      *
+     * @deprecated Use {@link #getMemorySize()} instead of
+     * this historically named method.
+     *
+     * @implSpec This implementation must return the same value
+     * as {@link #getMemorySize()}.
+     *
      * @return the total amount of physical memory in  bytes.
      */
-    public long getTotalPhysicalMemorySize();
+    @Deprecated(since="14")
+    public default long getTotalPhysicalMemorySize() { return getTotalMemorySize(); }
+
+    /**
+     * Returns the total amount of memory in bytes.
+     *
+     * @return the total amount of memory in  bytes.
+     * @since 14
+     */
+    public long getTotalMemorySize();
 
     /**
      * Returns the "recent cpu usage" for the whole system. This value is a
      * double in the [0.0,1.0] interval. A value of 0.0 means that all CPUs
      * were idle during the recent period of time observed, while a value
@@ -101,15 +137,38 @@
      * during the recent period being observed. All values betweens 0.0 and
      * 1.0 are possible depending of the activities going on in the system.
      * If the system recent cpu usage is not available, the method returns a
      * negative value.
      *
+     * @deprecated Use {@link #getCpuLoad()} instead of
+     * this historically named method.
+     *
+     * @implSpec This implementation must return the same value
+     * as {@link #getCpuLoad()}.
+     *
      * @return the "recent cpu usage" for the whole system; a negative
      * value if not available.
      * @since   1.7
      */
-    public double getSystemCpuLoad();
+    @Deprecated(since="14")
+    public default double getSystemCpuLoad() { return getCpuLoad(); }
+
+    /**
+     * Returns the "recent cpu usage" for the operating environment. This value
+     * is a double in the [0.0,1.0] interval. A value of 0.0 means that all CPUs
+     * were idle during the recent period of time observed, while a value
+     * of 1.0 means that all CPUs were actively running 100% of the time
+     * during the recent period being observed. All values betweens 0.0 and
+     * 1.0 are possible depending of the activities going on.
+     * If the recent cpu usage is not available, the method returns a
+     * negative value.
+     *
+     * @return the "recent cpu usage" for the whole operating environment;
+     * a negative value if not available.
+     * @since 14
+     */
+    public double getCpuLoad();
 
     /**
      * Returns the "recent cpu usage" for the Java Virtual Machine process.
      * This value is a double in the [0.0,1.0] interval. A value of 0.0 means
      * that none of the CPUs were running threads from the JVM process during
