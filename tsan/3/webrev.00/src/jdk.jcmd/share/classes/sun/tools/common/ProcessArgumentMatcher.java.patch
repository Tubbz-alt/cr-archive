diff a/src/jdk.jcmd/share/classes/sun/tools/common/ProcessArgumentMatcher.java b/src/jdk.jcmd/share/classes/sun/tools/common/ProcessArgumentMatcher.java
--- a/src/jdk.jcmd/share/classes/sun/tools/common/ProcessArgumentMatcher.java
+++ b/src/jdk.jcmd/share/classes/sun/tools/common/ProcessArgumentMatcher.java
@@ -77,19 +77,14 @@
         return excludeClass.getName();
     }
 
     private static boolean check(VirtualMachineDescriptor vmd, String excludeClass, String partialMatch) {
 
-        String mainClass = null;
+        // Try to get the main class name using (platform specific) ProcessHelper
+        String mainClass = ProcessHelper.getMainClass(vmd.id());
 
-        // Get the main class name using platform specific helper
-        ProcessHelper helper = ProcessHelper.platformProcessHelper();
-        if (helper != null) {
-            mainClass = helper.getMainClass(vmd.id());
-        }
-
-        // If the main class name is still unset then retrieve it with the attach mechanism
+        // If the main class name could not be retrieved by ProcessHelper, get it with the attach mechanism
         if (mainClass == null) {
             try {
                 VmIdentifier vmId = new VmIdentifier(vmd.id());
                 MonitoredHost monitoredHost = MonitoredHost.getMonitoredHost(vmId);
                 MonitoredVm monitoredVm = monitoredHost.getMonitoredVm(vmId, -1);
@@ -143,31 +138,24 @@
             }
         }
         return vids;
     }
 
-    public Collection<VirtualMachineDescriptor> getVirtualMachineDescriptors(Class<?> excludeClass) {
+    public Collection<VirtualMachineDescriptor> getVirtualMachineDescriptors() {
         if (singlePid != null) {
             return getSingleVMD(singlePid);
         } else {
-            return getVMDs(excludeClass, matchClass);
+            return getVMDs(null, matchClass);
         }
     }
 
-    public Collection<VirtualMachineDescriptor> getVirtualMachineDescriptors() {
-        return this.getVirtualMachineDescriptors(null);
-    }
-
     public Collection<String> getVirtualMachinePids(Class<?> excludeClass) {
         if (singlePid != null) {
             // There is a bug in AttachProvider, when VM is debuggee-suspended it's not listed by the AttachProvider.
             // If we are talking about a specific pid, just return it.
             return List.of(singlePid);
         } else {
             return getVMDs(excludeClass, matchClass).stream().map(x -> {return x.id();}).collect(Collectors.toList());
         }
     }
 
-    public Collection<String> getVirtualMachinePids() {
-        return this.getVirtualMachinePids(null);
-    }
 }
