diff a/src/java.rmi/share/classes/sun/rmi/runtime/Log.java b/src/java.rmi/share/classes/sun/rmi/runtime/Log.java
--- a/src/java.rmi/share/classes/sun/rmi/runtime/Log.java
+++ b/src/java.rmi/share/classes/sun/rmi/runtime/Log.java
@@ -26,12 +26,14 @@
 package sun.rmi.runtime;
 
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
 import java.io.OutputStream;
+import java.lang.StackWalker.StackFrame;
 import java.rmi.server.LogStream;
 import java.security.PrivilegedAction;
+import java.util.Set;
 import java.util.logging.Handler;
 import java.util.logging.SimpleFormatter;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.logging.LogRecord;
@@ -60,10 +62,12 @@
 
     /** Logger re-definition of old RMI log values */
     public static final Level BRIEF = Level.FINE;
     public static final Level VERBOSE = Level.FINER;
 
+    private static final StackWalker WALKER = StackWalker.getInstance(Set.of(), 4);
+
     /* selects log implementation */
     private static final LogFactory logFactory;
     static {
         boolean useOld = java.security.AccessController.doPrivileged(
             (PrivilegedAction<Boolean>) () -> Boolean.getBoolean("sun.rmi.log.useOld"));
@@ -215,20 +219,20 @@
             return logger.isLoggable(level);
         }
 
         public void log(Level level, String message) {
             if (isLoggable(level)) {
-                String[] source = getSource();
-                logger.logp(level, source[0], source[1],
+                StackFrame sourceFrame = getSource();
+                logger.logp(level, sourceFrame.getClassName(), sourceFrame.getMethodName(),
                            Thread.currentThread().getName() + ": " + message);
             }
         }
 
         public void log(Level level, String message, Throwable thrown) {
             if (isLoggable(level)) {
-                String[] source = getSource();
-                logger.logp(level, source[0], source[1],
+                StackFrame sourceFrame = getSource();
+                logger.logp(level, sourceFrame.getClassName(), sourceFrame.getMethodName(),
                     Thread.currentThread().getName() + ": " +
                            message, thrown);
             }
         }
 
@@ -388,26 +392,26 @@
             return (level.intValue() >= levelValue);
         }
 
         public void log(Level messageLevel, String message) {
             if (isLoggable(messageLevel)) {
-                String[] source = getSource();
-                stream.println(unqualifiedName(source[0]) +
-                               "." + source[1] + ": " + message);
+                StackFrame sourceFrame = getSource();
+                stream.println(unqualifiedName(sourceFrame.getClassName()) +
+                               "." + sourceFrame.getMethodName() + ": " + message);
             }
         }
 
         public void log(Level level, String message, Throwable thrown) {
             if (isLoggable(level)) {
                 /*
                  * keep output contiguous and maintain the contract of
                  * RemoteServer.getLog
                  */
                 synchronized (stream) {
-                    String[] source = getSource();
-                    stream.println(unqualifiedName(source[0]) + "." +
-                                   source[1] + ": " + message);
+                    StackFrame sourceFrame = getSource();
+                    stream.println(unqualifiedName(sourceFrame.getClassName()) + "." +
+                                    sourceFrame.getMethodName() + ": " + message);
                     thrown.printStackTrace(stream);
                 }
             }
         }
 
@@ -439,15 +443,14 @@
             return name;
         }
     }
 
     /**
-     * Obtain class and method names of code calling a log method.
+     * Obtain stack frame of code calling a log method.
      */
-    private static String[] getSource() {
-        StackTraceElement[] trace = (new Exception()).getStackTrace();
-        return new String[] {
-            trace[3].getClassName(),
-            trace[3].getMethodName()
-        };
+    private static StackFrame getSource() {
+        return WALKER.walk(s -> s
+                                 .skip(3)
+                                 .findFirst()
+                                 .get());
     }
 }
