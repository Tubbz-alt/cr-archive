diff a/src/java.desktop/macosx/native/libosxapp/NSApplicationAWT.m b/src/java.desktop/macosx/native/libosxapp/NSApplicationAWT.m
--- a/src/java.desktop/macosx/native/libosxapp/NSApplicationAWT.m
+++ b/src/java.desktop/macosx/native/libosxapp/NSApplicationAWT.m
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -48,11 +48,11 @@
 
 /**
  * Subtypes of NSApplicationDefined, which are used for custom events.
  */
 enum {
-    ExecuteBlockEvent, NativeSyncQueueEvent
+    ExecuteBlockEvent = 777, NativeSyncQueueEvent
 };
 
 @implementation NSApplicationAWT
 
 - (id) init
@@ -89,10 +89,29 @@
 {
 AWT_ASSERT_APPKIT_THREAD;
 
     JNIEnv *env = [ThreadUtilities getJNIEnv];
 
+    SEL appearanceSel = @selector(setAppearance:); // macOS 10.14+
+    if ([self respondsToSelector:appearanceSel]) {
+        NSString *appearanceProp = [PropertiesUtilities
+                javaSystemPropertyForKey:@"apple.awt.application.appearance"
+                                 withEnv:env];
+        if (![@"system" isEqual:appearanceProp]) {
+            // by default use light mode, because dark mode is not supported yet
+            NSAppearance *appearance = [NSAppearance appearanceNamed:NSAppearanceNameAqua];
+            if (appearanceProp != nil) {
+                NSAppearance *requested = [NSAppearance appearanceNamed:appearanceProp];
+                if (requested != nil) {
+                    appearance = requested;
+                }
+            }
+            // [self setAppearance:appearance];
+            [self performSelector:appearanceSel withObject:appearance];
+        }
+    }
+
     // Get default nib file location
     // NOTE: This should learn about the current java.version. Probably best thru
     //  the Makefile system's -DFRAMEWORK_VERSION define. Need to be able to pass this
     //  thru to PB from the Makefile system and for local builds.
     NSString *defaultNibFile = [PropertiesUtilities javaSystemPropertyForKey:@"apple.awt.application.nib" withEnv:env];
@@ -364,15 +383,18 @@
 
 - (void)sendEvent:(NSEvent *)event
 {
     if ([event type] == NSApplicationDefined
             && TS_EQUAL([event timestamp], dummyEventTimestamp)
-            && [event subtype] == NativeSyncQueueEvent) {
+            && (short)[event subtype] == NativeSyncQueueEvent
+            && [event data1] == NativeSyncQueueEvent
+            && [event data2] == NativeSyncQueueEvent) {
         [seenDummyEventLock lockWhenCondition:NO];
         [seenDummyEventLock unlockWithCondition:YES];
-
-    } else if ([event type] == NSApplicationDefined && [event subtype] == ExecuteBlockEvent) {
+    } else if ([event type] == NSApplicationDefined
+               && (short)[event subtype] == ExecuteBlockEvent
+               && [event data1] != 0 && [event data2] == ExecuteBlockEvent) {
         void (^block)() = (void (^)()) [event data1];
         block();
         [block release];
     } else if ([event type] == NSKeyUp && ([event modifierFlags] & NSCommandKeyMask)) {
         // Cocoa won't send us key up event when releasing a key while Cmd is down,
@@ -399,11 +421,11 @@
                                        timestamp: 0
                                     windowNumber: 0
                                          context: nil
                                          subtype: ExecuteBlockEvent
                                            data1: encode
-                                           data2: 0];
+                                           data2: ExecuteBlockEvent];
 
     [NSApp postEvent: event atStart: NO];
     [pool drain];
 }
 
@@ -417,12 +439,12 @@
                                    modifierFlags: 0
                                        timestamp: dummyEventTimestamp
                                     windowNumber: 0
                                          context: nil
                                          subtype: NativeSyncQueueEvent
-                                           data1: 0
-                                           data2: 0];
+                                           data1: NativeSyncQueueEvent
+                                           data2: NativeSyncQueueEvent];
     if (useCocoa) {
         [NSApp postEvent:event atStart:NO];
     } else {
         ProcessSerialNumber psn;
         GetCurrentProcess(&psn);
