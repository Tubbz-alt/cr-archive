diff a/src/java.desktop/macosx/classes/sun/lwawt/macosx/CPlatformView.java b/src/java.desktop/macosx/classes/sun/lwawt/macosx/CPlatformView.java
--- a/src/java.desktop/macosx/classes/sun/lwawt/macosx/CPlatformView.java
+++ b/src/java.desktop/macosx/classes/sun/lwawt/macosx/CPlatformView.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,23 +23,23 @@
  * questions.
  */
 
 package sun.lwawt.macosx;
 
-import java.awt.*;
+import java.awt.GraphicsDevice;
+import java.awt.GraphicsEnvironment;
+import java.awt.Point;
+import java.awt.Rectangle;
 import java.awt.geom.Rectangle2D;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 
-import sun.awt.CGraphicsConfig;
 import sun.awt.CGraphicsEnvironment;
-import sun.lwawt.LWWindowPeer;
-
 import sun.java2d.SurfaceData;
 import sun.java2d.opengl.CGLLayer;
-import sun.java2d.opengl.CGLSurfaceData;
+import sun.lwawt.LWWindowPeer;
 
 public class CPlatformView extends CFRetainedResource {
     private native long nativeCreateView(int x, int y, int width, int height, long windowLayerPtr);
     private static native void nativeSetAutoResizable(long awtView, boolean toResize);
     private static native int nativeGetNSViewDisplayID(long awtView);
@@ -56,13 +56,11 @@
     }
 
     public void initialize(LWWindowPeer peer, CPlatformResponder responder) {
         initializeBase(peer, responder);
 
-        if (!LWCToolkit.getSunAwtDisableCALayers()) {
-            this.windowLayer = createCGLayer();
-        }
+        this.windowLayer = createCGLayer();
         setPtr(nativeCreateView(0, 0, 0, 0, getWindowLayerPtr()));
     }
 
     public CGLLayer createCGLayer() {
         return new CGLLayer(peer);
@@ -75,14 +73,10 @@
 
     public long getAWTView() {
         return ptr;
     }
 
-    public boolean isOpaque() {
-        return !peer.isTranslucent();
-    }
-
     /*
      * All coordinates passed to the method should be based on the origin being in the bottom-left corner (standard
      * Cocoa coordinates).
      */
     public void setBounds(int x, int y, int width, int height) {
@@ -92,63 +86,34 @@
     // REMIND: CGLSurfaceData expects top-level's size
     public Rectangle getBounds() {
         return peer.getBounds();
     }
 
-    public Object getDestination() {
-        return peer;
-    }
-
     public void setToolTip(String msg) {
         execute(ptr -> CWrapper.NSView.setToolTip(ptr, msg));
     }
 
     // ----------------------------------------------------------------------
     // PAINTING METHODS
     // ----------------------------------------------------------------------
     public SurfaceData replaceSurfaceData() {
-        if (!LWCToolkit.getSunAwtDisableCALayers()) {
-            surfaceData = windowLayer.replaceSurfaceData();
-        } else {
-            if (surfaceData == null) {
-                CGraphicsConfig graphicsConfig = (CGraphicsConfig)getGraphicsConfiguration();
-                surfaceData = graphicsConfig.createSurfaceData(this);
-            } else {
-                validateSurface();
-            }
-        }
+        surfaceData = windowLayer.replaceSurfaceData();
         return surfaceData;
     }
 
-    private void validateSurface() {
-        if (surfaceData != null) {
-            ((CGLSurfaceData)surfaceData).validate();
-        }
-    }
-
-    public GraphicsConfiguration getGraphicsConfiguration() {
-        return peer.getGraphicsConfiguration();
-    }
-
     public SurfaceData getSurfaceData() {
         return surfaceData;
     }
 
     @Override
     public void dispose() {
-        if (!LWCToolkit.getSunAwtDisableCALayers()) {
-            windowLayer.dispose();
-        }
+        windowLayer.dispose();
         super.dispose();
     }
 
     public long getWindowLayerPtr() {
-        if (!LWCToolkit.getSunAwtDisableCALayers()) {
-            return windowLayer.getPointer();
-        } else {
-            return 0;
-        }
+        return windowLayer.getPointer();
     }
 
     public void setAutoResizable(boolean toResize) {
         execute(ptr -> nativeSetAutoResizable(ptr, toResize));
     }
