diff a/src/java.desktop/macosx/classes/sun/lwawt/macosx/CPlatformWindow.java b/src/java.desktop/macosx/classes/sun/lwawt/macosx/CPlatformWindow.java
--- a/src/java.desktop/macosx/classes/sun/lwawt/macosx/CPlatformWindow.java
+++ b/src/java.desktop/macosx/classes/sun/lwawt/macosx/CPlatformWindow.java
@@ -60,11 +60,10 @@
 import com.apple.laf.ClientPropertyApplicator.Property;
 import sun.awt.AWTAccessor;
 import sun.awt.AWTAccessor.ComponentAccessor;
 import sun.awt.AWTAccessor.WindowAccessor;
 import sun.java2d.SurfaceData;
-import sun.java2d.opengl.CGLSurfaceData;
 import sun.lwawt.LWLightweightFramePeer;
 import sun.lwawt.LWToolkit;
 import sun.lwawt.LWWindowPeer;
 import sun.lwawt.LWWindowPeer.PeerType;
 import sun.lwawt.PlatformWindow;
@@ -307,16 +306,15 @@
      * Delegate initialization (create native window and all the
      * related resources).
      */
     @Override // PlatformWindow
     public void initialize(Window _target, LWWindowPeer _peer, PlatformWindow _owner) {
-        initializeBase(_target, _peer, _owner, new CPlatformView());
+        initializeBase(_target, _peer, _owner);
 
         final int styleBits = getInitialStyleBits();
 
         responder = createPlatformResponder();
-        contentView = createContentView();
         contentView.initialize(peer, responder);
 
         Rectangle bounds;
         if (!IS(DECORATED, styleBits)) {
             // For undecorated frames the move/resize event does not come if the frame is centered on the screen
@@ -353,28 +351,26 @@
                     CLIENT_PROPERTY_APPLICATOR.attachAndApplyClientProperties(rootpane);
                     rootpane.removePropertyChangeListener("ancestor", this);
                 }
             });
         }
-
-        validateSurface();
     }
 
-    protected void initializeBase(Window target, LWWindowPeer peer, PlatformWindow owner, CPlatformView view) {
+    void initializeBase(Window target, LWWindowPeer peer, PlatformWindow owner) {
         this.peer = peer;
         this.target = target;
         if (owner instanceof CPlatformWindow) {
             this.owner = (CPlatformWindow)owner;
         }
-        this.contentView = view;
+        contentView = createContentView();
     }
 
     protected CPlatformResponder createPlatformResponder() {
         return new CPlatformResponder(peer, false);
     }
 
-    protected CPlatformView createContentView() {
+    CPlatformView createContentView() {
         return new CPlatformView();
     }
 
     protected int getInitialStyleBits() {
         // defaults style bits
@@ -1050,17 +1046,10 @@
     @Override
     public long getLayerPtr() {
         return contentView.getWindowLayerPtr();
     }
 
-    private void validateSurface() {
-        SurfaceData surfaceData = getSurfaceData();
-        if (surfaceData instanceof CGLSurfaceData) {
-            ((CGLSurfaceData)surfaceData).validate();
-        }
-    }
-
     void flushBuffers() {
         if (isVisible() && !nativeBounds.isEmpty() && !isFullScreenMode) {
             try {
                 LWCToolkit.invokeAndWait(new Runnable() {
                     @Override
