diff a/src/java.desktop/windows/native/libawt/windows/awt_Frame.cpp b/src/java.desktop/windows/native/libawt/windows/awt_Frame.cpp
--- a/src/java.desktop/windows/native/libawt/windows/awt_Frame.cpp
+++ b/src/java.desktop/windows/native/libawt/windows/awt_Frame.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -895,10 +895,25 @@
     if (m_maxSize.y != java_lang_Integer_MAX_VALUE)
         lpmmi->ptMaxSize.y = m_maxSize.y;
     return mrConsume;
 }
 
+MsgRouting AwtFrame::WmWindowPosChanging(LPARAM windowPos) {
+    if (::IsZoomed(GetHWnd()) && m_maxBoundsSet) {
+        // Limits the size of the maximized window, effectively cuts the
+        // adjustments added by the window manager
+        WINDOWPOS *wp = (WINDOWPOS *) windowPos;
+        if (m_maxSize.x < java_lang_Integer_MAX_VALUE && wp->cx > m_maxSize.x) {
+            wp->cx = m_maxSize.x;
+        }
+        if (m_maxSize.y < java_lang_Integer_MAX_VALUE && wp->cy > m_maxSize.y) {
+            wp->cy = m_maxSize.y;
+        }
+    }
+    return AwtWindow::WmWindowPosChanging(windowPos);
+}
+
 MsgRouting AwtFrame::WmSize(UINT type, int w, int h)
 {
     currentWmSizeState = type;
     if (currentWmSizeState == SIZE_MINIMIZED) {
         UpdateSecurityWarningVisibility();
