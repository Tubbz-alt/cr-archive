diff a/src/java.desktop/share/native/libsplashscreen/splashscreen_impl.c b/src/java.desktop/share/native/libsplashscreen/splashscreen_impl.c
--- a/src/java.desktop/share/native/libsplashscreen/splashscreen_impl.c
+++ b/src/java.desktop/share/native/libsplashscreen/splashscreen_impl.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -44,35 +44,35 @@
         preInitialized = 1;
     }
     return &splash;
 }
 
-JNIEXPORT void JNICALL
+JNIEXPORT void
 SplashSetFileJarName(const char* fileName, const char* jarName) {
     Splash *splash = SplashGetInstance();
 
     free(splash->fileName);
     splash->fileName = SplashConvertStringAlloc(fileName, &splash->fileNameLen);
 
     free(splash->jarName);
     splash->jarName = SplashConvertStringAlloc(jarName, &splash->jarNameLen);
 }
 
-JNIEXPORT void JNICALL
+JNIEXPORT int
 SplashInit()
 {
     Splash *splash = SplashGetInstance();
 
     memset(splash, 0, sizeof(Splash));
     splash->currentFrame = -1;
     splash->scaleFactor = 1;
     initFormat(&splash->imageFormat, QUAD_RED_MASK, QUAD_GREEN_MASK,
         QUAD_BLUE_MASK, QUAD_ALPHA_MASK);
-    SplashInitPlatform(splash);
+    return SplashInitPlatform(splash);
 }
 
-JNIEXPORT void JNICALL
+JNIEXPORT void
 SplashClose()
 {
     Splash *splash = SplashGetInstance();
 
     if (splash->isVisible > 0) {
@@ -105,11 +105,11 @@
         splash->overlayData = NULL;
     }
     SplashSetFileJarName(NULL, NULL);
 }
 
-JNIEXPORT void JNICALL
+JNIEXPORT void
 SplashSetScaleFactor(float scaleFactor)
 {
     Splash *splash = SplashGetInstance();
     splash->scaleFactor = scaleFactor;
 }
@@ -261,10 +261,11 @@
     int c;
     size_t i;
 
     Splash *splash = SplashGetInstance();
     if (splash->isVisible < 0) {
+        stream->close(stream);
         return 0;
     }
 
     SplashLock(splash);
 
@@ -300,19 +301,19 @@
         SplashUnlock(splash);
     }
     return success;
 }
 
-JNIEXPORT int JNICALL
+JNIEXPORT int
 SplashLoadFile(const char *filename)
 {
     SplashStream stream;
     return SplashStreamInitFile(&stream, filename) &&
                 SplashLoadStream(&stream);
 }
 
-JNIEXPORT int JNICALL
+JNIEXPORT int
 SplashLoadMemory(void *data, int size)
 {
     SplashStream stream;
     return SplashStreamInitMemory(&stream, data, size) &&
                 SplashLoadStream(&stream);
@@ -393,11 +394,11 @@
     pStream->peek = peekMem;
     pStream->close = closeMem;
     return 1;
 }
 
-JNIEXPORT int JNICALL
+JNIEXPORT int
 SplashGetScaledImgNameMaxPstfixLen(const char *fileName){
     return strlen(fileName) + strlen("@100pct") + 1;
 }
 
 jboolean GetScaledImageName(const char *fileName, char *scaleImageName,
