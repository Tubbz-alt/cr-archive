diff a/src/java.desktop/share/native/libfreetype/include/freetype/internal/pshints.h b/src/java.desktop/share/native/libfreetype/include/freetype/internal/pshints.h
--- a/src/java.desktop/share/native/libfreetype/include/freetype/internal/pshints.h
+++ b/src/java.desktop/share/native/libfreetype/include/freetype/internal/pshints.h
@@ -1,23 +1,23 @@
-/***************************************************************************/
-/*                                                                         */
-/*  pshints.h                                                              */
-/*                                                                         */
-/*    Interface to Postscript-specific (Type 1 and Type 2) hints           */
-/*    recorders (specification only).  These are used to support native    */
-/*    T1/T2 hints in the `type1', `cid', and `cff' font drivers.           */
-/*                                                                         */
-/*  Copyright 2001-2018 by                                                 */
-/*  David Turner, Robert Wilhelm, and Werner Lemberg.                      */
-/*                                                                         */
-/*  This file is part of the FreeType project, and may only be used,       */
-/*  modified, and distributed under the terms of the FreeType project      */
-/*  license, LICENSE.TXT.  By continuing to use, modify, or distribute     */
-/*  this file you indicate that you have read the license and              */
-/*  understand and accept it fully.                                        */
-/*                                                                         */
-/***************************************************************************/
+/****************************************************************************
+ *
+ * pshints.h
+ *
+ *   Interface to Postscript-specific (Type 1 and Type 2) hints
+ *   recorders (specification only).  These are used to support native
+ *   T1/T2 hints in the 'type1', 'cid', and 'cff' font drivers.
+ *
+ * Copyright (C) 2001-2019 by
+ * David Turner, Robert Wilhelm, and Werner Lemberg.
+ *
+ * This file is part of the FreeType project, and may only be used,
+ * modified, and distributed under the terms of the FreeType project
+ * license, LICENSE.TXT.  By continuing to use, modify, or distribute
+ * this file you indicate that you have read the license and
+ * understand and accept it fully.
+ *
+ */
 
 
 #ifndef PSHINTS_H_
 #define PSHINTS_H_
 
@@ -71,11 +71,11 @@
   /*****                  PUBLIC TYPE 1 HINTS RECORDER                 *****/
   /*****                                                               *****/
   /*************************************************************************/
   /*************************************************************************/
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @type:
    *   T1_Hints
    *
    * @description:
@@ -84,29 +84,29 @@
    *
    *   The methods used to operate on this object are defined by the
    *   @T1_Hints_FuncsRec structure.  Recording glyph hints is normally
    *   achieved through the following scheme:
    *
-   *   - Open a new hint recording session by calling the `open' method.
+   *   - Open a new hint recording session by calling the 'open' method.
    *     This rewinds the recorder and prepare it for new input.
    *
    *   - For each hint found in the glyph charstring, call the corresponding
-   *     method (`stem', `stem3', or `reset').  Note that these functions do
+   *     method ('stem', 'stem3', or 'reset').  Note that these functions do
    *     not return an error code.
    *
-   *   - Close the recording session by calling the `close' method.  It
-   *     returns an error code if the hints were invalid or something
-   *     strange happened (e.g., memory shortage).
+   *   - Close the recording session by calling the 'close' method.  It
+   *     returns an error code if the hints were invalid or something strange
+   *     happened (e.g., memory shortage).
    *
    *   The hints accumulated in the object can later be used by the
    *   PostScript hinter.
    *
    */
   typedef struct T1_HintsRec_*  T1_Hints;
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @type:
    *   T1_Hints_Funcs
    *
    * @description:
@@ -115,11 +115,11 @@
    *
    */
   typedef const struct T1_Hints_FuncsRec_*  T1_Hints_Funcs;
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @functype:
    *   T1_Hints_OpenFunc
    *
    * @description:
@@ -137,18 +137,18 @@
    */
   typedef void
   (*T1_Hints_OpenFunc)( T1_Hints  hints );
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @functype:
    *   T1_Hints_SetStemFunc
    *
    * @description:
    *   A method of the @T1_Hints class used to record a new horizontal or
-   *   vertical stem.  This corresponds to the Type 1 `hstem' and `vstem'
+   *   vertical stem.  This corresponds to the Type 1 'hstem' and 'vstem'
    *   operators.
    *
    * @input:
    *   hints ::
    *     A handle to the Type 1 hints recorder.
@@ -162,28 +162,28 @@
    *
    * @note:
    *   Use vertical coordinates (y) for horizontal stems (dim=0).  Use
    *   horizontal coordinates (x) for vertical stems (dim=1).
    *
-   *   `coords[0]' is the absolute stem position (lowest coordinate);
-   *   `coords[1]' is the length.
+   *   'coords[0]' is the absolute stem position (lowest coordinate);
+   *   'coords[1]' is the length.
    *
    *   The length can be negative, in which case it must be either -20 or
-   *   -21.  It is interpreted as a `ghost' stem, according to the Type 1
+   *   -21.  It is interpreted as a 'ghost' stem, according to the Type 1
    *   specification.
    *
-   *   If the length is -21 (corresponding to a bottom ghost stem), then
-   *   the real stem position is `coords[0]+coords[1]'.
+   *   If the length is -21 (corresponding to a bottom ghost stem), then the
+   *   real stem position is 'coords[0]+coords[1]'.
    *
    */
   typedef void
   (*T1_Hints_SetStemFunc)( T1_Hints   hints,
                            FT_UInt    dimension,
                            FT_Fixed*  coords );
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @functype:
    *   T1_Hints_SetStem3Func
    *
    * @description:
@@ -213,11 +213,11 @@
   (*T1_Hints_SetStem3Func)( T1_Hints   hints,
                             FT_UInt    dimension,
                             FT_Fixed*  coords );
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @functype:
    *   T1_Hints_ResetFunc
    *
    * @description:
@@ -236,11 +236,11 @@
   typedef void
   (*T1_Hints_ResetFunc)( T1_Hints  hints,
                          FT_UInt   end_point );
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @functype:
    *   T1_Hints_CloseFunc
    *
    * @description:
@@ -265,11 +265,11 @@
   typedef FT_Error
   (*T1_Hints_CloseFunc)( T1_Hints  hints,
                          FT_UInt   end_point );
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @functype:
    *   T1_Hints_ApplyFunc
    *
    * @description:
@@ -295,22 +295,22 @@
    *
    * @note:
    *   On input, all points within the outline are in font coordinates. On
    *   output, they are in 1/64th of pixels.
    *
-   *   The scaling transformation is taken from the `globals' object which
+   *   The scaling transformation is taken from the 'globals' object which
    *   must correspond to the same font as the glyph.
    *
    */
   typedef FT_Error
   (*T1_Hints_ApplyFunc)( T1_Hints        hints,
                          FT_Outline*     outline,
                          PSH_Globals     globals,
                          FT_Render_Mode  hint_mode );
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @struct:
    *   T1_Hints_FuncsRec
    *
    * @description:
@@ -358,11 +358,11 @@
   /*****                  PUBLIC TYPE 2 HINTS RECORDER                 *****/
   /*****                                                               *****/
   /*************************************************************************/
   /*************************************************************************/
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @type:
    *   T2_Hints
    *
    * @description:
@@ -371,29 +371,29 @@
    *
    *   The methods used to operate on this object are defined by the
    *   @T2_Hints_FuncsRec structure.  Recording glyph hints is normally
    *   achieved through the following scheme:
    *
-   *   - Open a new hint recording session by calling the `open' method.
+   *   - Open a new hint recording session by calling the 'open' method.
    *     This rewinds the recorder and prepare it for new input.
    *
    *   - For each hint found in the glyph charstring, call the corresponding
-   *     method (`stems', `hintmask', `counters').  Note that these
-   *     functions do not return an error code.
+   *     method ('stems', 'hintmask', 'counters').  Note that these functions
+   *     do not return an error code.
    *
-   *   - Close the recording session by calling the `close' method.  It
-   *     returns an error code if the hints were invalid or something
-   *     strange happened (e.g., memory shortage).
+   *   - Close the recording session by calling the 'close' method.  It
+   *     returns an error code if the hints were invalid or something strange
+   *     happened (e.g., memory shortage).
    *
    *   The hints accumulated in the object can later be used by the
    *   Postscript hinter.
    *
    */
   typedef struct T2_HintsRec_*  T2_Hints;
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @type:
    *   T2_Hints_Funcs
    *
    * @description:
@@ -402,11 +402,11 @@
    *
    */
   typedef const struct T2_Hints_FuncsRec_*  T2_Hints_Funcs;
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @functype:
    *   T2_Hints_OpenFunc
    *
    * @description:
@@ -424,19 +424,19 @@
    */
   typedef void
   (*T2_Hints_OpenFunc)( T2_Hints  hints );
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @functype:
    *   T2_Hints_StemsFunc
    *
    * @description:
    *   A method of the @T2_Hints class used to set the table of stems in
    *   either the vertical or horizontal dimension.  Equivalent to the
-   *   `hstem', `vstem', `hstemhm', and `vstemhm' Type 2 operators.
+   *   'hstem', 'vstem', 'hstemhm', and 'vstemhm' Type 2 operators.
    *
    * @input:
    *   hints ::
    *     A handle to the Type 2 hints recorder.
    *
@@ -445,82 +445,82 @@
    *
    *   count ::
    *     The number of stems.
    *
    *   coords ::
-   *     An array of `count' (position,length) pairs in 16.16 format.
+   *     An array of 'count' (position,length) pairs in 16.16 format.
    *
    * @note:
    *   Use vertical coordinates (y) for horizontal stems (dim=0).  Use
    *   horizontal coordinates (x) for vertical stems (dim=1).
    *
-   *   There are `2*count' elements in the `coords' array.  Each even
-   *   element is an absolute position in font units, each odd element is a
-   *   length in font units.
+   *   There are '2*count' elements in the 'coords' array.  Each even element
+   *   is an absolute position in font units, each odd element is a length in
+   *   font units.
    *
-   *   A length can be negative, in which case it must be either -20 or
-   *   -21.  It is interpreted as a `ghost' stem, according to the Type 1
+   *   A length can be negative, in which case it must be either -20 or -21.
+   *   It is interpreted as a 'ghost' stem, according to the Type 1
    *   specification.
    *
    */
   typedef void
   (*T2_Hints_StemsFunc)( T2_Hints   hints,
                          FT_UInt    dimension,
                          FT_Int     count,
                          FT_Fixed*  coordinates );
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @functype:
    *   T2_Hints_MaskFunc
    *
    * @description:
    *   A method of the @T2_Hints class used to set a given hintmask (this
-   *   corresponds to the `hintmask' Type 2 operator).
+   *   corresponds to the 'hintmask' Type 2 operator).
    *
    * @input:
    *   hints ::
    *     A handle to the Type 2 hints recorder.
    *
    *   end_point ::
-   *     The glyph index of the last point to which the previously defined
-   *     or activated hints apply.
+   *     The glyph index of the last point to which the previously defined or
+   *     activated hints apply.
    *
    *   bit_count ::
    *     The number of bits in the hint mask.
    *
    *   bytes ::
    *     An array of bytes modelling the hint mask.
    *
    * @note:
    *   If the hintmask starts the charstring (before any glyph point
-   *   definition), the value of `end_point' should be 0.
+   *   definition), the value of `end_point` should be 0.
    *
-   *   `bit_count' is the number of meaningful bits in the `bytes' array; it
+   *   `bit_count` is the number of meaningful bits in the 'bytes' array; it
    *   must be equal to the total number of hints defined so far (i.e.,
    *   horizontal+verticals).
    *
-   *   The `bytes' array can come directly from the Type 2 charstring and
+   *   The 'bytes' array can come directly from the Type 2 charstring and
    *   respects the same format.
    *
    */
   typedef void
   (*T2_Hints_MaskFunc)( T2_Hints        hints,
                         FT_UInt         end_point,
                         FT_UInt         bit_count,
                         const FT_Byte*  bytes );
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @functype:
    *   T2_Hints_CounterFunc
    *
    * @description:
-   *   A method of the @T2_Hints class used to set a given counter mask
-   *   (this corresponds to the `hintmask' Type 2 operator).
+   *   A method of the @T2_Hints class used to set a given counter mask (this
+   *   corresponds to the 'hintmask' Type 2 operator).
    *
    * @input:
    *   hints ::
    *     A handle to the Type 2 hints recorder.
    *
@@ -534,27 +534,27 @@
    *   bytes ::
    *     An array of bytes modelling the hint mask.
    *
    * @note:
    *   If the hintmask starts the charstring (before any glyph point
-   *   definition), the value of `end_point' should be 0.
+   *   definition), the value of `end_point` should be 0.
    *
-   *   `bit_count' is the number of meaningful bits in the `bytes' array; it
+   *   `bit_count` is the number of meaningful bits in the 'bytes' array; it
    *   must be equal to the total number of hints defined so far (i.e.,
    *   horizontal+verticals).
    *
-   *    The `bytes' array can come directly from the Type 2 charstring and
+   *    The 'bytes' array can come directly from the Type 2 charstring and
    *    respects the same format.
    *
    */
   typedef void
   (*T2_Hints_CounterFunc)( T2_Hints        hints,
                            FT_UInt         bit_count,
                            const FT_Byte*  bytes );
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @functype:
    *   T2_Hints_CloseFunc
    *
    * @description:
@@ -579,19 +579,18 @@
   typedef FT_Error
   (*T2_Hints_CloseFunc)( T2_Hints  hints,
                          FT_UInt   end_point );
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @functype:
    *   T2_Hints_ApplyFunc
    *
    * @description:
    *   A method of the @T2_Hints class used to apply hints to the
-   *   corresponding glyph outline.  Must be called after the `close'
-   *   method.
+   *   corresponding glyph outline.  Must be called after the 'close' method.
    *
    * @input:
    *   hints ::
    *     A handle to the Type 2 hints recorder.
    *
@@ -609,22 +608,22 @@
    *
    * @note:
    *   On input, all points within the outline are in font coordinates. On
    *   output, they are in 1/64th of pixels.
    *
-   *   The scaling transformation is taken from the `globals' object which
+   *   The scaling transformation is taken from the 'globals' object which
    *   must correspond to the same font than the glyph.
    *
    */
   typedef FT_Error
   (*T2_Hints_ApplyFunc)( T2_Hints        hints,
                          FT_Outline*     outline,
                          PSH_Globals     globals,
                          FT_Render_Mode  hint_mode );
 
 
-  /*************************************************************************
+  /**************************************************************************
    *
    * @struct:
    *   T2_Hints_FuncsRec
    *
    * @description:
@@ -678,12 +677,10 @@
   } PSHinter_Interface;
 
   typedef PSHinter_Interface*  PSHinter_Service;
 
 
-#ifndef FT_CONFIG_OPTION_PIC
-
 #define FT_DEFINE_PSHINTER_INTERFACE(        \
           class_,                            \
           get_globals_funcs_,                \
           get_t1_funcs_,                     \
           get_t2_funcs_ )                    \
@@ -692,29 +689,10 @@
     get_globals_funcs_,                      \
     get_t1_funcs_,                           \
     get_t2_funcs_                            \
   };
 
-#else /* FT_CONFIG_OPTION_PIC */
-
-#define FT_DEFINE_PSHINTER_INTERFACE(                      \
-          class_,                                          \
-          get_globals_funcs_,                              \
-          get_t1_funcs_,                                   \
-          get_t2_funcs_ )                                  \
-  void                                                     \
-  FT_Init_Class_ ## class_( FT_Library           library,  \
-                            PSHinter_Interface*  clazz )   \
-  {                                                        \
-    FT_UNUSED( library );                                  \
-                                                           \
-    clazz->get_globals_funcs = get_globals_funcs_;         \
-    clazz->get_t1_funcs      = get_t1_funcs_;              \
-    clazz->get_t2_funcs      = get_t2_funcs_;              \
-  }
-
-#endif /* FT_CONFIG_OPTION_PIC */
 
 FT_END_HEADER
 
 #endif /* PSHINTS_H_ */
 
