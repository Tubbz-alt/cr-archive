diff a/src/java.desktop/share/classes/java/awt/AlphaComposite.java b/src/java.desktop/share/classes/java/awt/AlphaComposite.java
--- a/src/java.desktop/share/classes/java/awt/AlphaComposite.java
+++ b/src/java.desktop/share/classes/java/awt/AlphaComposite.java
@@ -161,11 +161,11 @@
  *     <th scope="row"><em>C<sub>df</sub></em>
  *     <td>the final raw color component stored in the destination
  * </tbody>
  * </table>
  *
- * <h3>Preparing Inputs</h3>
+ * <h2>Preparing Inputs</h2>
  *
  * <p>
  * The {@code AlphaComposite} class defines an additional alpha
  * value that is applied to the source alpha.
  * This value is applied as if an implicit SRC_IN rule were first
@@ -202,20 +202,20 @@
  *
  * <pre>
  *      <em>C<sub>d</sub></em> = <em>C<sub>dr</sub></em> * <em>A<sub>d</sub></em>    (if destination is not premultiplied)
  *      <em>C<sub>d</sub></em> = <em>C<sub>dr</sub></em>         (if destination is premultiplied) </pre>
  *
- * <h3>Applying the Blending Equation</h3>
+ * <h2>Applying the Blending Equation</h2>
  *
  * <p>
  * The adjusted <em>A<sub>s</sub></em>, <em>A<sub>d</sub></em>,
  * <em>C<sub>s</sub></em>, and <em>C<sub>d</sub></em> are used in the standard
  * Porter and Duff equations to calculate the blending factors
  * <em>F<sub>s</sub></em> and <em>F<sub>d</sub></em> and then the resulting
  * premultiplied components <em>A<sub>r</sub></em> and <em>C<sub>r</sub></em>.
  *
- * <h3>Preparing Results</h3>
+ * <h2>Preparing Results</h2>
  *
  * <p>
  * The results only need to be adjusted if they are to be stored
  * back into a destination buffer that holds data that is not
  * premultiplied, using the following equations:
@@ -228,11 +228,11 @@
  * Note that since the division is undefined if the resulting alpha
  * is zero, the division in that case is omitted to avoid the "divide
  * by zero" and the color components are left as
  * all zeros.
  *
- * <h3>Performance Considerations</h3>
+ * <h2>Performance Considerations</h2>
  *
  * <p>
  * For performance reasons, it is preferable that
  * {@code Raster} objects passed to the {@code compose}
  * method of a {@link CompositeContext} object created by the
@@ -241,11 +241,11 @@
  * or the destination {@code Raster}
  * is not premultiplied, however,
  * appropriate conversions are performed before and after the compositing
  * operation.
  *
- * <h3><a id="caveats">Implementation Caveats</a></h3>
+ * <h2><a id="caveats">Implementation Caveats</a></h2>
  *
  * <ul>
  * <li>
  * Many sources, such as some of the opaque image types listed
  * in the {@code BufferedImage} class, do not store alpha values
