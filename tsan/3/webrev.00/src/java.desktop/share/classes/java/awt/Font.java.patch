diff a/src/java.desktop/share/classes/java/awt/Font.java b/src/java.desktop/share/classes/java/awt/Font.java
--- a/src/java.desktop/share/classes/java/awt/Font.java
+++ b/src/java.desktop/share/classes/java/awt/Font.java
@@ -72,11 +72,11 @@
  * A font provides the information needed to map sequences of
  * <em>characters</em> to sequences of <em>glyphs</em>
  * and to render sequences of glyphs on {@code Graphics} and
  * {@code Component} objects.
  *
- * <h3>Characters and Glyphs</h3>
+ * <h2>Characters and Glyphs</h2>
  *
  * A <em>character</em> is a symbol that represents an item such as a letter,
  * a digit, or punctuation in an abstract way. For example, {@code 'g'},
  * LATIN SMALL LETTER G, is a character.
  * <p>
@@ -94,11 +94,11 @@
  *
  * A font encapsulates the collection of glyphs needed to render a selected set
  * of characters as well as the tables needed to map sequences of characters to
  * corresponding sequences of glyphs.
  *
- * <h3>Physical and Logical Fonts</h3>
+ * <h2>Physical and Logical Fonts</h2>
  *
  * The Java Platform distinguishes between two kinds of fonts:
  * <em>physical</em> fonts and <em>logical</em> fonts.
  * <p>
  * <em>Physical</em> fonts are the actual font libraries containing glyph data
@@ -133,11 +133,11 @@
  * <a href="https://docs.oracle.com/javase/tutorial/2d/text/fonts.html#advantages-and-disadvantages">
  *    Physical and Logical Fonts</a>
  * in <a href="https://docs.oracle.com/javase/tutorial/index.html">The Java Tutorials</a>
  * document.
  *
- * <h3>Font Faces and Names</h3>
+ * <h2>Font Faces and Names</h2>
  *
  * A {@code Font}
  * can have many faces, such as heavy, medium, oblique, gothic and
  * regular. All of these faces have similar typographic design.
  * <p>
@@ -167,11 +167,11 @@
  * transform and default font features. These
  * base fonts can then be used to derive new {@code Font} objects
  * with varying sizes, styles, transforms and font features via the
  * {@code deriveFont} methods in this class.
  *
- * <h3>Font and TextAttribute</h3>
+ * <h2>Font and TextAttribute</h2>
  *
  * <p>{@code Font} supports most
  * {@code TextAttribute}s.  This makes some operations, such as
  * rendering underlined text, convenient since it is not
  * necessary to explicitly construct a {@code TextLayout} object.
@@ -1927,23 +1927,27 @@
         // defined values.  So, 1.6 streams in from a 1.5 stream,
         // it check each of these values and 'undefines' it if the
         // value is the default.
 
         if (fRequestedAttributes != null) {
+            try {
             values = getAttributeValues(); // init
             AttributeValues extras =
                 AttributeValues.fromSerializableHashtable(fRequestedAttributes);
             if (!AttributeValues.is16Hashtable(fRequestedAttributes)) {
                 extras.unsetDefault(); // if legacy stream, undefine these
             }
             values = getAttributeValues().merge(extras);
             this.nonIdentityTx = values.anyNonDefault(EXTRA_MASK);
             this.hasLayoutAttributes =  values.anyNonDefault(LAYOUT_MASK);
-
+            } catch (Throwable t) {
+                throw new IOException(t);
+            } finally {
             fRequestedAttributes = null; // don't need it any more
         }
     }
+    }
 
     /**
      * Returns the number of glyphs in this {@code Font}. Glyph codes
      * for this {@code Font} range from 0 to
      * {@code getNumGlyphs()} - 1.
@@ -2142,13 +2146,14 @@
 
     /**
      * Checks if this {@code Font} has a glyph for the specified
      * character.
      *
-     * <p> <b>Note:</b> This method cannot handle <a
-     * href="../../java/lang/Character.html#supplementary"> supplementary
-     * characters</a>. To support all Unicode characters, including
+     * <p> <b>Note:</b> This method cannot handle
+     * <a href="../../../java.base/java/lang/Character.html#supplementary">
+     * supplementary characters</a>.
+     * To support all Unicode characters, including
      * supplementary characters, use the {@link #canDisplay(int)}
      * method or {@code canDisplayUpTo} methods.
      *
      * @param c the character for which a glyph is needed
      * @return {@code true} if this {@code Font} has a glyph for this
