diff a/src/java.desktop/share/classes/java/awt/GraphicsEnvironment.java b/src/java.desktop/share/classes/java/awt/GraphicsEnvironment.java
--- a/src/java.desktop/share/classes/java/awt/GraphicsEnvironment.java
+++ b/src/java.desktop/share/classes/java/awt/GraphicsEnvironment.java
@@ -29,10 +29,11 @@
 import java.awt.image.BufferedImage;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 import java.util.Locale;
 
+import sun.awt.PlatformGraphicsInfo;
 import sun.font.FontManager;
 import sun.font.FontManagerFactory;
 import sun.java2d.HeadlessGraphicsEnvironment;
 import sun.java2d.SunGraphicsEnvironment;
 import sun.security.action.GetPropertyAction;
@@ -82,42 +83,18 @@
          */
         static final GraphicsEnvironment INSTANCE = createGE();
 
         /**
          * Creates and returns the GraphicsEnvironment, according to the
-         * system property 'java.awt.graphicsenv'.
+         * platform-specific proxy class.
          *
          * @return the graphics environment
          */
         private static GraphicsEnvironment createGE() {
-            GraphicsEnvironment ge;
-            String nm = AccessController.doPrivileged(new GetPropertyAction("java.awt.graphicsenv", null));
-            try {
-//              long t0 = System.currentTimeMillis();
-                Class<?> geCls;
-                try {
-                    // First we try if the bootstrap class loader finds the
-                    // requested class. This way we can avoid to run in a privileged
-                    // block.
-                    geCls = Class.forName(nm);
-                } catch (ClassNotFoundException ex) {
-                    // If the bootstrap class loader fails, we try again with the
-                    // application class loader.
-                    ClassLoader cl = ClassLoader.getSystemClassLoader();
-                    geCls = Class.forName(nm, true, cl);
-                }
-                ge = (GraphicsEnvironment)geCls.getConstructor().newInstance();
-//              long t1 = System.currentTimeMillis();
-//              System.out.println("GE creation took " + (t1-t0)+ "ms.");
-                if (isHeadless()) {
-                    ge = new HeadlessGraphicsEnvironment(ge);
-                }
-            } catch (ClassNotFoundException e) {
-                throw new Error("Could not find class: "+nm);
-            } catch (ReflectiveOperationException | IllegalArgumentException e) {
-                throw new Error("Could not instantiate Graphics Environment: "
-                        + nm);
+            GraphicsEnvironment ge = PlatformGraphicsInfo.createGE();
+            if (isHeadless()) {
+                ge = new HeadlessGraphicsEnvironment(ge);
             }
             return ge;
         }
     }
 
@@ -153,12 +130,11 @@
     static String getHeadlessMessage() {
         if (headless == null) {
             getHeadlessProperty(); // initialize the values
         }
         return defaultHeadless != Boolean.TRUE ? null :
-            "\nNo X11 DISPLAY variable was set, " +
-            "but this program performed an operation which requires it.";
+            PlatformGraphicsInfo.getDefaultHeadlessMessage();
     }
 
     /**
      * @return the value of the property "java.awt.headless"
      * @since 1.4
@@ -167,20 +143,12 @@
         if (headless == null) {
             AccessController.doPrivileged((PrivilegedAction<Void>) () -> {
                 String nm = System.getProperty("java.awt.headless");
 
                 if (nm == null) {
-                    final String osName = System.getProperty("os.name");
-                    final String display = System.getenv("DISPLAY");
                     headless = defaultHeadless =
-                                ("Linux".equals(osName) ||
-                                 "SunOS".equals(osName) ||
-                                 "FreeBSD".equals(osName) ||
-                                 "NetBSD".equals(osName) ||
-                                 "OpenBSD".equals(osName) ||
-                                 "AIX".equals(osName)) &&
-                                 (display == null || display.trim().isEmpty());
+                        PlatformGraphicsInfo.getDefaultHeadlessProperty();
                 } else {
                     headless = Boolean.valueOf(nm);
                 }
                 return null;
             });
