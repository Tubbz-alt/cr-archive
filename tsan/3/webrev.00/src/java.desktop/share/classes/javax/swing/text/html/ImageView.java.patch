diff a/src/java.desktop/share/classes/javax/swing/text/html/ImageView.java b/src/java.desktop/share/classes/javax/swing/text/html/ImageView.java
--- a/src/java.desktop/share/classes/javax/swing/text/html/ImageView.java
+++ b/src/java.desktop/share/classes/javax/swing/text/html/ImageView.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -24,10 +24,11 @@
  */
 package javax.swing.text.html;
 
 import java.awt.Rectangle;
 import java.awt.Image;
+import java.awt.Dimension;
 import java.awt.Container;
 import java.awt.Color;
 import java.awt.Shape;
 import java.awt.Graphics;
 import java.awt.Toolkit;
@@ -780,10 +781,39 @@
 
             if (newHeight > 0) {
                 newState |= HEIGHT_FLAG;
             }
 
+            Image img;
+            synchronized(this) {
+                img = image;
+            }
+            if (newWidth <= 0) {
+                newWidth = img.getWidth(imageObserver);
+                if (newWidth <= 0) {
+                    newWidth = DEFAULT_WIDTH;
+                }
+            }
+            if (newHeight <= 0) {
+                newHeight = img.getHeight(imageObserver);
+                if (newHeight <= 0) {
+                    newHeight = DEFAULT_HEIGHT;
+                }
+            }
+            /*
+            If synchronous loading flag is set, then make sure that the image is
+            scaled appropriately.
+            Otherwise, the ImageHandler::imageUpdate takes care of scaling the image
+            appropriately.
+            */
+            if (getLoadsSynchronously()) {
+                Dimension d = adjustWidthHeight(newWidth, newHeight);
+                newWidth = d.width;
+                newHeight = d.height;
+                newState |= (WIDTH_FLAG | HEIGHT_FLAG);
+            }
+
             // Make sure the image starts loading:
             if ((newState & (WIDTH_FLAG | HEIGHT_FLAG)) != 0) {
                 Toolkit.getDefaultToolkit().prepareImage(newImage, newWidth,
                                                          newHeight,
                                                          imageObserver);
@@ -883,10 +913,44 @@
                     }
                 });
         }
     }
 
+    private Dimension adjustWidthHeight(int newWidth, int newHeight) {
+        Dimension d = new Dimension();
+        double proportion = 0.0;
+        final int specifiedWidth = getIntAttr(HTML.Attribute.WIDTH, -1);
+        final int specifiedHeight = getIntAttr(HTML.Attribute.HEIGHT, -1);
+        /**
+         * If either of the attributes are not specified, then calculate the
+         * proportion for the specified dimension wrt actual value, and then
+         * apply the same proportion to the unspecified dimension as well,
+         * so that the aspect ratio of the image is maintained.
+         */
+        if (specifiedWidth != -1 && specifiedHeight != -1) {
+            newWidth = specifiedWidth;
+            newHeight = specifiedHeight;
+        } else if (specifiedWidth != -1 ^ specifiedHeight != -1) {
+            if (specifiedWidth <= 0) {
+                proportion = specifiedHeight / ((double)newHeight);
+                newWidth = (int)(proportion * newWidth);
+                newHeight = specifiedHeight;
+            }
+
+            if (specifiedHeight <= 0) {
+                proportion = specifiedWidth / ((double)newWidth);
+                newHeight = (int)(proportion * newHeight);
+                newWidth = specifiedWidth;
+            }
+        }
+
+        d.width = newWidth;
+        d.height = newHeight;
+
+        return d;
+    }
+
     /**
      * ImageHandler implements the ImageObserver to correctly update the
      * display as new parts of the image become available.
      */
     private class ImageHandler implements ImageObserver {
@@ -948,31 +1012,14 @@
                  * then figure out if scaling is necessary based on the
                  * specified HTML attributes.
                  */
                 if (((flags & ImageObserver.HEIGHT) != 0) &&
                     ((flags & ImageObserver.WIDTH) != 0)) {
-                    double proportion = 0.0;
-                    final int specifiedWidth = getIntAttr(HTML.Attribute.WIDTH, -1);
-                    final int specifiedHeight = getIntAttr(HTML.Attribute.HEIGHT, -1);
-                    /**
-                     * If either of the attributes are not specified, then calculate the
-                     * proportion for the specified dimension wrt actual value, and then
-                     * apply the same proportion to the unspecified dimension as well,
-                     * so that the aspect ratio of the image is maintained.
-                     */
-                    if (specifiedWidth != -1 ^ specifiedHeight != -1) {
-                        if (specifiedWidth <= 0) {
-                            proportion = specifiedHeight / ((double)newHeight);
-                            newWidth = (int)(proportion * newWidth);
-                        }
-
-                        if (specifiedHeight <= 0) {
-                            proportion = specifiedWidth / ((double)newWidth);
-                            newHeight = (int)(proportion * newHeight);
-                        }
+                        Dimension d = adjustWidthHeight(newWidth, newHeight);
+                        newWidth = d.width;
+                        newHeight = d.height;
                         changed |= 3;
-                    }
                 }
                 synchronized(ImageView.this) {
                     if ((changed & 1) == 1 && (state & HEIGHT_FLAG) == 0) {
                         height = newHeight;
                     }
