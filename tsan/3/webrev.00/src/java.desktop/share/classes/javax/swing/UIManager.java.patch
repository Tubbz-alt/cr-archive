diff a/src/java.desktop/share/classes/javax/swing/UIManager.java b/src/java.desktop/share/classes/javax/swing/UIManager.java
--- a/src/java.desktop/share/classes/javax/swing/UIManager.java
+++ b/src/java.desktop/share/classes/javax/swing/UIManager.java
@@ -68,11 +68,11 @@
  * {@code UIManager} manages the current look and feel, the set of
  * available look and feels, {@code PropertyChangeListeners} that
  * are notified when the look and feel changes, look and feel defaults, and
  * convenience methods for obtaining various default values.
  *
- * <h3>Specifying the look and feel</h3>
+ * <h2>Specifying the look and feel</h2>
  *
  * The look and feel can be specified in two distinct ways: by
  * specifying the fully qualified name of the class for the look and
  * feel, or by creating an instance of {@code LookAndFeel} and passing
  * it to {@code setLookAndFeel}. The following example illustrates
@@ -92,11 +92,11 @@
  * details. The exact behavior of not invoking {@code
  * updateUI} after changing the look and feel is
  * unspecified. It is very possible to receive unexpected exceptions,
  * painting problems, or worse.
  *
- * <h3>Default look and feel</h3>
+ * <h2>Default look and feel</h2>
  *
  * The class used for the default look and feel is chosen in the following
  * manner:
  * <ol>
  *   <li>If the system property <code>swing.defaultlaf</code> is
@@ -112,11 +112,11 @@
  *       Refer to the release notes of the implementation being used for
  *       further details.
  *   <li>Otherwise use the cross platform look and feel.
  * </ol>
  *
- * <h3>Defaults</h3>
+ * <h2>Defaults</h2>
  *
  * {@code UIManager} manages three sets of {@code UIDefaults}. In order, they
  * are:
  * <ol>
  *   <li>Developer defaults. With few exceptions Swing does not
@@ -655,17 +655,18 @@
         }
         OSInfo.OSType osType = AccessController.doPrivileged(OSInfo.getOSTypeAction());
         if (osType == OSInfo.OSType.WINDOWS) {
             return "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";
         } else {
-            String desktop = AccessController.doPrivileged(new GetPropertyAction("sun.desktop"));
             Toolkit toolkit = Toolkit.getDefaultToolkit();
-            if ("gnome".equals(desktop) &&
-                    toolkit instanceof SunToolkit &&
-                    ((SunToolkit) toolkit).isNativeGTKAvailable()) {
-                // May be set on Linux and Solaris boxs.
-                return "com.sun.java.swing.plaf.gtk.GTKLookAndFeel";
+            if (toolkit instanceof SunToolkit) {
+                SunToolkit suntk = (SunToolkit)toolkit;
+                String desktop = suntk.getDesktop();
+                boolean gtkAvailable = suntk.isNativeGTKAvailable();
+                if ("gnome".equals(desktop) && gtkAvailable) {
+                    return "com.sun.java.swing.plaf.gtk.GTKLookAndFeel";
+                }
             }
             if (osType == OSInfo.OSType.MACOSX) {
                 if (toolkit.getClass() .getName()
                                        .equals("sun.lwawt.macosx.LWCToolkit")) {
                     return "com.apple.laf.AquaLookAndFeel";
