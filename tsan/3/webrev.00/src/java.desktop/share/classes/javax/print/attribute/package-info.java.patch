diff a/src/java.desktop/share/classes/javax/print/attribute/package-info.java b/src/java.desktop/share/classes/javax/print/attribute/package-info.java
--- a/src/java.desktop/share/classes/javax/print/attribute/package-info.java
+++ b/src/java.desktop/share/classes/javax/print/attribute/package-info.java
@@ -25,11 +25,11 @@
 
 /**
  * Provides classes and interfaces that describe the types of Java&trade; Print
  * Service attributes and how they can be collected into attribute sets.
  *
- * <h3>What is an Attribute?</h3>
+ * <h2>What is an Attribute?</h2>
  * When setting up a print job, a client specifies two things: <b>print data</b>
  * and <b>processing instructions.</b> The print data is the actual content to
  * be printed. The processing instructions tell the printer how to print the
  * print data, such as: what media to use, how many copies to print, and whether
  * to print on one or both sides of a sheet. The client specifies these
@@ -58,11 +58,11 @@
  * a print job. The print job determines the manner in which it achieves the
  * results specified by the processing instructions. Representing processing
  * instructions as descriptive items provides more flexibility for implementing
  * print jobs.
  *
- * <h4>Attribute Categories and Values</h4>
+ * <h3>Attribute Categories and Values</h3>
  * Each printer has a set of capabilities, such as the ability to print on
  * different paper sizes or the ability to print more than one copy. Each of the
  * capabilities has a range of values. For example, a printer's orientation
  * capability might have this range of values: [landscape, portrait]. For each
  * print request, the capability is set to one of these values. The Java Print
@@ -78,11 +78,11 @@
  * number of desired copies and uses the {@code Copies} instance as part of the
  * print request. In this case, the {@code Copies} class represents the
  * attribute category, and the {@code Copies} instance represents the attribute
  * value.
  *
- * <h4><a id="role"></a>Attribute Roles</h4>
+ * <h3><a id="role"></a>Attribute Roles</h3>
  * When submitting a print job to a printer, the client provides the attributes
  * describing the characteristics of the print data, such as the document name,
  * and how the print data should be printed, such as double-sided, five copies.
  * If a print job consists of multiple pieces of print data, different pieces
  * might have different processing instructions, such as 8 x 11 inch media for
@@ -126,20 +126,20 @@
  * 1.1. The standard attribute classes are in the subpackage
  * {@code javax.print.attribute.standard} to keep the actual attribute classes
  * conceptually separate from the generic apparatus defined in package
  * {@code javax.print.attribute}.
  *
- * <h3>Attribute Sets</h3>
+ * <h2>Attribute Sets</h2>
  * A client usually needs to provide more than one processing instruction when
  * submitting a print job. For example, the client might need to specify a media
  * size of A4 and a landscape orientation. To send more than one processing
  * instruction, the client collects the attributes into an attribute set, which
  * the Java Print Service API represents with the
  * <a href="AttributeSet.html">AttributeSet</a> interface.
  * <p>
  * The {@code AttributeSet} interface is similar to the
- * <a href="../../../java/util/Map.html">Map</a> interface: it provides a map of
+ * {@link java.util.Map Map} interface: it provides a map of
  * key to values, in which each key is unique and can contain no more than one
  * value. However, the {@code AttributeSet} interface is designed to
  * specifically support the needs of the Java Print Service API. An
  * {@code AttributeSet} requires that:
  * <ol type=1>
@@ -199,11 +199,11 @@
  * All of these classes extend
  * <a href="HashAttributeSet.html">HashAttributeSet</a> and enforce the
  * restriction that the attribute set is only allowed to contain the
  * corresponding kind of attribute.
  *
- * <h3>Attribute Class Design</h3>
+ * <h2>Attribute Class Design</h2>
  * An attribute value is a small, atomic data item, such as an integer or an
  * enumerated value. The Java Print Service API does not use primitive data
  * types, such as int, to represent attribute values for these reasons:
  * <ul>
  *   <li>Primitive data types are not type-safe. For example, a compiler should
@@ -293,11 +293,11 @@
  * subclasses of a standard attribute class appear in the same category. Every
  * attribute object is immutable once constructed so that attribute object
  * references can be passed around freely. To get a different attribute value,
  * construct a different attribute object.
  *
- * <h3>Attribute Vendors</h3>
+ * <h2>Attribute Vendors</h2>
  * The Java Print Service API is designed so that vendors can:
  * <ul>
  *   <li>define new vendor-specific values for any standard attribute defined in
  *   <a href="standard/package-summary.html">javax.print.attribute.standard</a>.
  *   <li>define new attribute categories representing the vendor printer's
@@ -319,11 +319,11 @@
  * {@code Attribute} or one of its subinterfaces and extends an abstract syntax
  * class. The vendor can either use an existing abstract syntax class or define
  * a new one. The new vendor-defined attribute can be used wherever an
  * {@code Attribute} is used, such as in an {@code AttributeSet}.
  *
- * <h3>Using Attributes</h3>
+ * <h2>Using Attributes</h2>
  * A typical printing application uses the {@code PrintRequestAttributeSet}
  * because print-request attributes are the types of attributes that client
  * usually specifies. This example demonstrates creating an attribute set of
  * print-request attributes and locating a printer that can print the document
  * according to the specified attributes:
