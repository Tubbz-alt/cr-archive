diff a/src/java.desktop/share/classes/javax/print/package-info.java b/src/java.desktop/share/classes/javax/print/package-info.java
--- a/src/java.desktop/share/classes/javax/print/package-info.java
+++ b/src/java.desktop/share/classes/javax/print/package-info.java
@@ -32,11 +32,11 @@
  *   <li>Specify the format of print data
  *   <li>Submit print jobs to services that support the document type to be
  *   printed.
  * </ul>
  *
- * <h3>Print Service Discovery</h3>
+ * <h2>Print Service Discovery</h2>
  * An application invokes the static methods of the abstract class
  * {@link javax.print.PrintServiceLookup PrintServiceLookup} to locate print
  * services that have the capabilities to satisfy the application's print
  * request. For example, to print a double-sided document, the application first
  * needs to find printers that have the double-sided printing capability.
@@ -46,11 +46,11 @@
  * IPP printers or JINI printers, a print-service provider can write
  * implementations of {@code PrintServiceLookup}. The print-service provider can
  * dynamically install these {@code PrintServiceLookup} implementations using
  * the {@link java.util.ServiceLoader} facility.
  *
- * <h3>Attribute Definitions</h3>
+ * <h2>Attribute Definitions</h2>
  * The {@link javax.print.attribute} and {@link javax.print.attribute.standard}
  * packages define print attributes, which describe the capabilities of a print
  * service, specify the requirements of a print job, and track the progress of a
  * print job.
  * <p>
@@ -63,20 +63,20 @@
  * Protocol, 1.1: Model and Semantics</a>, dated September 2000. The attributes
  * specified in {@code javax.print.attribute.standard} include common
  * capabilities, such as: resolution, copies, media sizes, job priority, and
  * page ranges.
  *
- * <h3>Document Type Specification</h3>
+ * <h2>Document Type Specification</h2>
  * The {@link javax.print.DocFlavor DocFlavor} class represents the print data
  * format, such as JPEG or PostScript. A {@code DocFlavor} object consists of a
  * MIME type, which describes the format, and a document representation class
  * name that indicates how the document is delivered to the printer or output
  * stream. An application uses the {@code DocFlavor} and an attribute set to
  * find printers that can print the document type specified by the
  * {@code DocFlavor} and have the capabilities specified by the attribute set.
  *
- * <h3>Using the API</h3>
+ * <h2>Using the API</h2>
  * A typical application using the Java Print Service API performs these steps
  * to process a print request:
  * <ol>
  *   <li>Chooses a {@code DocFlavor}.
  *   <li>Creates a set of attributes.
