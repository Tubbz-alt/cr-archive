diff a/src/java.desktop/share/classes/javax/swing/plaf/metal/MetalToolTipUI.java b/src/java.desktop/share/classes/javax/swing/plaf/metal/MetalToolTipUI.java
--- a/src/java.desktop/share/classes/javax/swing/plaf/metal/MetalToolTipUI.java
+++ b/src/java.desktop/share/classes/javax/swing/plaf/metal/MetalToolTipUI.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -130,11 +130,11 @@
             SwingUtilities2.drawString(tip, g, tipText, paintTextR.x,
                                   paintTextR.y + metrics.getAscent());
             accelBL = metrics.getAscent();
         }
 
-        if (!accelString.equals("")) {
+        if (!accelString.isEmpty()) {
             g.setFont(smallFont);
             g.setColor( MetalLookAndFeel.getPrimaryControlDarkShadow() );
             SwingUtilities2.drawString(tip, g, accelString,
                                        tip.getWidth() - 1 - insets.right
                                            - accelSpacing
@@ -143,21 +143,21 @@
                                        paintTextR.y + accelBL);
         }
     }
 
     private int calcAccelSpacing(JComponent c, FontMetrics fm, String accel) {
-        return accel.equals("")
+        return accel.isEmpty()
                ? 0
                : padSpaceBetweenStrings +
                  SwingUtilities2.stringWidth(c, fm, accel);
     }
 
     public Dimension getPreferredSize(JComponent c) {
         Dimension d = super.getPreferredSize(c);
 
         String key = getAcceleratorString((JToolTip)c);
-        if (!(key.equals(""))) {
+        if (!key.isEmpty()) {
             d.width += calcAccelSpacing(c, c.getFontMetrics(smallFont), key);
         }
         return d;
     }
 
