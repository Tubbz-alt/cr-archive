diff a/src/java.desktop/share/classes/javax/accessibility/package-info.java b/src/java.desktop/share/classes/javax/accessibility/package-info.java
--- a/src/java.desktop/share/classes/javax/accessibility/package-info.java
+++ b/src/java.desktop/share/classes/javax/accessibility/package-info.java
@@ -35,23 +35,23 @@
  * <p>
  * The Java Accessibility API package consists of 8 Java programming language
  * interfaces, and 6 Java programming language classes. These are described
  * below.
  *
- * <h3><a id="Accessible"></a><a href="Accessible.html">Interface
- * Accessible</a></h3>
+ * <h2><a id="Accessible"></a><a href="Accessible.html">Interface
+ * Accessible</a></h2>
  * <a href="Accessible.html">Interface Accessible</a> is the main interface of
  * the Java Accessibility API. All components that support the Java
  * Accessibility API must implement this interface. It contains a single method,
  * {@code getAccessibleContext}, that returns an instance of the class
  * <a href="#AccessibleContext">AccessibleContext</a>. Sun thinks that
  * implementing this interface is the absolute minimum requirement of every
  * object that is part of the user interface of a Java application, if that
  * program is to be compatible with assistive technologies.
  *
- * <h3><a id="AccessibleContext"></a><a href="AccessibleContext.html">Class
- * AccessibleContext</a></h3>
+ * <h2><a id="AccessibleContext"></a><a href="AccessibleContext.html">Class
+ * AccessibleContext</a></h2>
  * <a href="AccessibleContext.html">AccessibleContext</a> represents the minimum
  * information all accessible objects return and is obtained by calling the
  * {@code getAccessibleContext} method on an object that implements the
  * <a href="#Accessible">Accessible</a> interface. This information includes the
  * accessible name, description, <a href="#AccessibleRole">role</a>, and
@@ -106,12 +106,12 @@
  *     object that supports a numerical value should return an object that
  *     implements this interface when the {@code getAccessibleValue} method is
  *     called on an AccessibleContext.</li>
  * </ul>
  *
- * <h3><a id="AccessibleRole"></a><a href="AccessibleRole.html">Class
- * AccessibleRole</a></h3>
+ * <h2><a id="AccessibleRole"></a><a href="AccessibleRole.html">Class
+ * AccessibleRole</a></h2>
  * This class encapsulates the Accessible object's role in the user interface
  * and is obtained by calling the {@code getAccessibleRole} method on an
  * <a href="#AccessibleContext">AccessibleContext</a>. Accessible roles include
  * "Check box", "Menu Item", "Panel", etc. These roles are identified by the
  * constants in this class such as {@code AccessibleRole.CHECK_BOX,
@@ -121,12 +121,12 @@
  * should use one of the constants from this class. Although this class
  * pre-defines a large list of standard roles, it is extensible so additional
  * programmer-defined roles can be added in the future without needing to modify
  * the base class.
  *
- * <h3><a id="AccessibleState"></a><a href="AccessibleState.html">Class
- * AccessibleState</a></h3>
+ * <h2><a id="AccessibleState"></a><a href="AccessibleState.html">Class
+ * AccessibleState</a></h2>
  * This class encapsulates a particular state of the Accessible object.
  * Accessible states include things like "Armed", "Busy", "Checked", "Focused",
  * etc. These roles are identified by the constants in this class such as
  * {@code AccessibleState.ARMED, AccessibleState.BUSY, AccessibleState.CHECKED,}
  * and {@code AccessibleState.FOCUSED}. The sum of all the states of an
@@ -140,31 +140,31 @@
  * and applications should use one of the constants from this class. Although
  * this class pre-defines a large list of standard roles, it is extensible so
  * additional, programmer-defined roles can be added in the future without
  * needing to modify the base class.
  *
- * <h3><a id="AccessibleStateSet"></a><a href="AccessibleStateSet.html">Class
- * AccessibleStateSet</a></h3>
+ * <h2><a id="AccessibleStateSet"></a><a href="AccessibleStateSet.html">Class
+ * AccessibleStateSet</a></h2>
  * This class encapsulates a collection of states of the Accessible object and
  * is obtained by calling the {@code getAccessibleStateSet} method on an
  * <a href="#AccessibleContext">AccessibleContext</a>. Since an object might
  * have multiple states (e.g. it might be both "Checked" and "Focused"), this
  * class is needed to encapsulate a collection of these states. Methods in the
  * class provide for retrieving the individual
  * <a href="#AccessibleState">AccessibleStates</a> on the state set.
  *
- * <h3><a id="AccessibleBundle"></a><a href="AccessibleBundle.html">Class
- * AccessibleBundle</a></h3>
+ * <h2><a id="AccessibleBundle"></a><a href="AccessibleBundle.html">Class
+ * AccessibleBundle</a></h2>
  * This class is used to maintain a strongly typed enumeration. It is the super
  * class of both the <a href="#AccessibleRole">AccessibleRole</a> and
  * <a href="#AccessibleState">AccessibleState</a> classes. Programmers normally
  * do not interact with this class directly, but will instead use the
  * <a href="#AccessibleRole">AccessibleRole</a> and
  * <a href="#AccessibleState">AccessibleState</a> classes.
  *
- * <h3><a id="AccessibleAction"></a><a href="AccessibleAction.html">Interface
- * AccessibleAction</a></h3>
+ * <h2><a id="AccessibleAction"></a><a href="AccessibleAction.html">Interface
+ * AccessibleAction</a></h2>
  * The <a href="AccessibleAction.html">AccessibleAction</a> interface should be
  * supported by any object that can perform one or more actions. This interface
  * provides the standard mechanism for an assistive technology to determine what
  * those actions are as well as tell the object to perform those actions. Any
  * object that can be manipulated should support this interface.
@@ -175,12 +175,12 @@
  * <a href="#Accessible">Accessible</a>) and then calling the
  * {@code getAccessibleAction} method of
  * <a href="#AccessibleContext">AccessibleContext</a>. If the return value is
  * not {@code null}, the object supports this interface.
  *
- * <h3> <a id="AccessibleComponent"></a><a href="AccessibleComponent.html">
- * Interface AccessibleComponent</a></h3>
+ * <h2> <a id="AccessibleComponent"></a><a href="AccessibleComponent.html">
+ * Interface AccessibleComponent</a></h2>
  * The <a href="AccessibleComponent.html">AccessibleComponent</a> interface
  * should be supported by any object that is rendered on the screen. This
  * interface provides the standard mechanism for an assistive technology to
  * determine and set the graphical representation of an object. <p>Applications
  * can determine if an object supports the AccessibleComponent interface by
@@ -188,12 +188,12 @@
  * <a href="#Accessible">Accessible</a>) and then calling the
  * {@code getAccessibleComponent} method of
  * <a href="#AccessibleContext">AccessibleContext</a>. If the return value is
  * not {@code null}, the object supports this interface.
  *
- * <h3><a id="AccessibleSelection"></a><a href="AccessibleSelection.html">
- * Interface AccessibleSelection</a></h3>
+ * <h2><a id="AccessibleSelection"></a><a href="AccessibleSelection.html">
+ * Interface AccessibleSelection</a></h2>
  * The <a href="AccessibleSelection.html">AccessibleSelection</a> interface
  * provides the standard mechanism for an assistive technology to determine what
  * the current selected children are, as well as modify the selection set. Any
  * object that has children that can be selected should support this the
  * AccessibleSelection interface.
@@ -204,12 +204,12 @@
  * <a href="#Accessible">Accessible</a>) and then calling the
  * {@code getAccessibleSelection} method of
  * <a href="#AccessibleContext">AccessibleContext</a>. If the return value is
  * not {@code null}, the object supports this interface.
  *
- * <h3><a id="AccessibleText"></a><a href="AccessibleText.html">Interface
- * AccessibleText</a></h3>
+ * <h2><a id="AccessibleText"></a><a href="AccessibleText.html">Interface
+ * AccessibleText</a></h2>
  * Interface <a href="AccessibleText.html">AccessibleText</a> is the contract
  * for making rich, editable text Accessible. Not all text displayed on the
  * screen is rich and editable (e.g. text contained in buttons, labels, menus,
  * etc., which users aren't expected to manipulate). However, objects containing
  * editable text must implement interface AccessibleText if they are to
@@ -228,12 +228,12 @@
  * (see <a href="#Accessible">Accessible</a>) and then calling the
  * {@code getAccessibleText} method of
  * <a href="#AccessibleContext">AccessibleContext</a>. If the return value is
  * not {@code null}, the object supports this interface.
  *
- * <h3><a id="AccessibleHypertext"></a> <a href="AccessibleHypertext.html">
- * Interface AccessibleHypertext</a></h3>
+ * <h2><a id="AccessibleHypertext"></a> <a href="AccessibleHypertext.html">
+ * Interface AccessibleHypertext</a></h2>
  * The <a href="AccessibleHypertext.html">AccessibleHypertext</a> interface
  * should be supported by any object that presents hypertext information on the
  * display. This interface provides the standard mechanism for an assistive
  * technology to access that text via its content, attributes, and spatial
  * location. It also provides standard mechanisms for manipulating
@@ -244,20 +244,20 @@
  * AccessibleContext.getAccessibleText() method of
  * <a href="#AccessibleContext">AccessibleContext</a>. If the return value is a
  * class which extends AccessibleHypertext, then that object supports
  * AccessibleHypertext.
  *
- * <h3><a id="AccessibleHyperlink"></a><a href="AccessibleHyperlink.html">
- * Interface AccessibleHyperlink</a></h3>
+ * <h2><a id="AccessibleHyperlink"></a><a href="AccessibleHyperlink.html">
+ * Interface AccessibleHyperlink</a></h2>
  * An object that is a hyperlink should support the
  * <a href="AccessibleHyperlink.html">AccessibleHyperlink</a> interface.&nbsp;
  * An object that implements this interface will be returned by calling the
  * getLink method on an <a href="#AccessibleHypertext">AccessibleHypertext</a>
  * object.
  *
- * <h3><a id="AccessibleValue"></a><a href="AccessibleValue.html">Interface
- * AccessibleValue</a></h3>
+ * <h2><a id="AccessibleValue"></a><a href="AccessibleValue.html">Interface
+ * AccessibleValue</a></h2>
  * The <a href="AccessibleValue.html">AccessibleValue</a> interface should be
  * supported by any object that supports a numerical value (e.g., a scroll bar).
  * This interface provides the standard mechanism for an assistive technology to
  * determine and set the numerical value as well as get the minimum and maximum
  * values.
