diff a/src/java.desktop/share/classes/javax/print/DocFlavor.java b/src/java.desktop/share/classes/javax/print/DocFlavor.java
--- a/src/java.desktop/share/classes/javax/print/DocFlavor.java
+++ b/src/java.desktop/share/classes/javax/print/DocFlavor.java
@@ -42,13 +42,13 @@
  *   <a href="http://www.ietf.org/rfc/rfc2046.txt">RFC 2046</a>) that specifies
  *   how the print data is to be interpreted. The charset of text data should be
  *   the IANA MIME-preferred name, or its canonical name if no preferred name is
  *   specified. Additionally a few historical names supported by earlier
  *   versions of the Java platform may be recognized. See
- *   <a href="../../java/lang/package-summary.html#charenc">character encodings
- *   </a> for more information on the character encodings supported on the Java
- *   platform.
+ *   <a href="../../../java.base/java/lang/package-summary.html#charenc">
+ *   character encodings</a> for more information on the character encodings
+ *   supported on the Java platform.
  *   <li><b>Representation class name.</b> This specifies the fully-qualified
  *   name of the class of the object from which the actual print data comes, as
  *   returned by the {@link Class#getName() Class.getName()} method. (Thus the
  *   class name for {@code byte[]} is {@code "[B"}, for {@code char[]} it is
  *   {@code "[C"}.)
@@ -58,11 +58,11 @@
  * the doc flavor the client can supply. A {@code Doc} object also lets the
  * {@code DocPrintJob} obtain an instance of the doc flavor's representation
  * class, from which the {@code DocPrintJob} then obtains the actual print data.
  *
  * <hr>
- * <h3>Client Formatted Print Data</h3>
+ * <h2>Client Formatted Print Data</h2>
  * There are two broad categories of print data, client formatted print data and
  * service formatted print data.
  * <p>
  * For <b>client formatted print data</b>, the client determines or knows the
  * print data format. For example the client may have a JPEG encoded image, a
@@ -118,11 +118,11 @@
  *   client open an input stream on the {@code URL} or file and use an input
  *   stream data flavor.
  * </ul>
  *
  * <hr>
- * <h3>Default and Platform Encodings</h3>
+ * <h2>Default and Platform Encodings</h2>
  * For byte print data where the doc flavor's MIME type does not include a
  * {@code charset} parameter, the Java Print Service instance assumes the
  * US-ASCII character set by default. This is in accordance with
  * <a href="http://www.ietf.org/rfc/rfc2046.txt">RFC 2046</a>, which says the
  * default character set is US-ASCII. Note that US-ASCII is a subset of UTF-8,
@@ -159,11 +159,11 @@
  * See <a href="../../java/lang/package-summary.html#charenc">character
  * encodings</a> for more information on the character encodings supported on
  * the Java platform.
  *
  * <hr>
- * <h3>Recommended DocFlavors</h3>
+ * <h2>Recommended DocFlavors</h2>
  * The Java Print Service API does not define any mandatorily supported
  * {@code DocFlavors}. However, here are some examples of MIME types that a Java
  * Print Service instance might support for client formatted print data. Nested
  * classes inside class {@code DocFlavor} declare predefined static constant
  * {@code DocFlavor} objects for these example doc flavors; class
@@ -259,11 +259,11 @@
  *   autosense print data is provided in a byte oriented representation class
  *   (byte array, {@code InputStream}, {@code URL}).
  * </ul>
  *
  * <hr>
- * <h3>Service Formatted Print Data</h3>
+ * <h2>Service Formatted Print Data</h2>
  * For <b>service formatted print data</b>, the Java Print Service instance
  * determines the print data format. The doc flavor's representation class
  * denotes an interface whose methods the {@code DocPrintJob} invokes to
  * determine the content to be printed -- such as a renderable image interface
  * or a Java printable interface. The doc flavor's MIME type is the special
@@ -294,11 +294,11 @@
  *   For each page, the printer supplies a graphics context, and whatever the
  *   client draws in that graphics context gets printed.
  * </ul>
  *
  * <hr>
- * <h3>Pre-defined Doc Flavors</h3>
+ * <h2>Pre-defined Doc Flavors</h2>
  * A Java Print Service instance is not <b><i>required</i></b> to support the
  * following print data formats and print data representation classes. In fact,
  * a developer using this class should <b>never</b> assume that a particular
  * print service supports the document types corresponding to these pre-defined
  * doc flavors. Always query the print service to determine what doc flavors it
@@ -340,11 +340,11 @@
  *   the next line."
  * </ul>
  * The client must itself perform all plain text print data formatting not
  * addressed by the above requirements.
  *
- * <h3>Design Rationale</h3>
+ * <h2>Design Rationale</h2>
  * Class {@code DocFlavor} in package {@code javax.print} is similar to class
  * {@link java.awt.datatransfer.DataFlavor}. Class {@code DataFlavor} is not
  * used in the Java Print Service (JPS) API for three reasons which are all
  * rooted in allowing the JPS API to be shared by other print services APIs
  * which may need to run on Java profiles which do not include all of the Java
