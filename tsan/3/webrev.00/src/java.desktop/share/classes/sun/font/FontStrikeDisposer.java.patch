diff a/src/java.desktop/share/classes/sun/font/FontStrikeDisposer.java b/src/java.desktop/share/classes/sun/font/FontStrikeDisposer.java
--- a/src/java.desktop/share/classes/sun/font/FontStrikeDisposer.java
+++ b/src/java.desktop/share/classes/sun/font/FontStrikeDisposer.java
@@ -23,10 +23,12 @@
  * questions.
  */
 
 package sun.font;
 
+import java.lang.ref.Reference;
+import java.util.concurrent.ConcurrentHashMap;
 import sun.java2d.Disposer;
 import sun.java2d.DisposerRecord;
 
 /*
  * This keeps track of data that needs to be cleaned up once a
@@ -51,11 +53,11 @@
  */
 
 class FontStrikeDisposer
     implements DisposerRecord, Disposer.PollDisposable {
 
-    Font2D font2D;
+    ConcurrentHashMap<FontStrikeDesc, Reference<FontStrike>> strikeCache;
     FontStrikeDesc desc;
     long[] longGlyphImages;
     int [] intGlyphImages;
     int [][] segIntGlyphImages;
     long[][] segLongGlyphImages;
@@ -63,40 +65,46 @@
     boolean disposed = false;
     boolean comp = false;
 
     public FontStrikeDisposer(Font2D font2D, FontStrikeDesc desc,
                               long pContext, int[] images) {
-        this.font2D = font2D;
+        this.strikeCache = font2D.strikeCache;
         this.desc = desc;
         this.pScalerContext = pContext;
         this.intGlyphImages = images;
     }
 
     public FontStrikeDisposer(Font2D font2D, FontStrikeDesc desc,
                               long pContext, long[] images) {
-        this.font2D = font2D;
+        this.strikeCache = font2D.strikeCache;
         this.desc = desc;
         this.pScalerContext = pContext;
         this.longGlyphImages = images;
     }
 
     public FontStrikeDisposer(Font2D font2D, FontStrikeDesc desc,
                               long pContext) {
-        this.font2D = font2D;
+        this.strikeCache = font2D.strikeCache;
         this.desc = desc;
         this.pScalerContext = pContext;
     }
 
     public FontStrikeDisposer(Font2D font2D, FontStrikeDesc desc) {
-        this.font2D = font2D;
+        this.strikeCache = font2D.strikeCache;
         this.desc = desc;
         this.comp = true;
     }
 
     public synchronized void dispose() {
         if (!disposed) {
-            font2D.removeFromCache(desc);
+            Reference<FontStrike> ref = strikeCache.get(desc);
+            if (ref != null) {
+                Object o = ref.get();
+                if (o == null) {
+                    strikeCache.remove(desc);
+                }
+            }
             StrikeCache.disposeStrike(this);
             disposed = true;
         }
     }
 }
