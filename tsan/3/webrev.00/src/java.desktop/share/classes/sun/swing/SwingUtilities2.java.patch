diff a/src/java.desktop/share/classes/sun/swing/SwingUtilities2.java b/src/java.desktop/share/classes/sun/swing/SwingUtilities2.java
--- a/src/java.desktop/share/classes/sun/swing/SwingUtilities2.java
+++ b/src/java.desktop/share/classes/sun/swing/SwingUtilities2.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -380,11 +380,11 @@
      * @param string String to get the width of
      * @param useFPAPI use floating point API
      */
     public static float stringWidth(JComponent c, FontMetrics fm, String string,
             boolean useFPAPI){
-        if (string == null || string.equals("")) {
+        if (string == null || string.isEmpty()) {
             return 0;
         }
         boolean needsTextLayout = ((c != null) &&
                 (c.getClientProperty(TextAttribute.NUMERIC_SHAPING) != null));
         if (needsTextLayout) {
@@ -413,11 +413,11 @@
      * @return Clipped string that can fit in the provided space.
      */
     public static String clipStringIfNecessary(JComponent c, FontMetrics fm,
                                                String string,
                                                int availTextWidth) {
-        if ((string == null) || (string.equals("")))  {
+        if (string == null || string.isEmpty())  {
             return "";
         }
         int textWidth = SwingUtilities2.stringWidth(c, fm, string);
         if (textWidth > availTextWidth) {
             return SwingUtilities2.clipString(c, fm, string, availTextWidth);
@@ -522,15 +522,19 @@
                  * more evenly than directly laying out to the screen advances.
                  */
                 String trimmedText = trimTrailingSpaces(text);
                 if (!trimmedText.isEmpty()) {
                     float screenWidth = (float) g2d.getFont().getStringBounds
-                            (trimmedText, DEFAULT_FRC).getWidth();
+                            (trimmedText, getFontRenderContext(c)).getWidth();
                     TextLayout layout = createTextLayout(c, text, g2d.getFont(),
                                                        g2d.getFontRenderContext());
 
-                    layout = layout.getJustifiedLayout(screenWidth);
+                    // If text fits the screenWidth, then do not need to justify
+                    if (SwingUtilities2.stringWidth(c, g2d.getFontMetrics(),
+                                            trimmedText) > screenWidth) {
+                        layout = layout.getJustifiedLayout(screenWidth);
+                    }
                     /* Use alternate print color if specified */
                     Color col = g2d.getColor();
                     if (col instanceof PrintColorUIResource) {
                         g2d.setColor(((PrintColorUIResource)col).getPrintColor());
                     }
@@ -675,12 +679,16 @@
                     TextLayout layout =
                         createTextLayout(c, text, g2d.getFont(),
                                        g2d.getFontRenderContext());
                     if (isPrinting) {
                         float screenWidth = (float)g2d.getFont().
-                            getStringBounds(text, DEFAULT_FRC).getWidth();
-                        layout = layout.getJustifiedLayout(screenWidth);
+                            getStringBounds(text, getFontRenderContext(c)).getWidth();
+                        // If text fits the screenWidth, then do not need to justify
+                        if (SwingUtilities2.stringWidth(c, g2d.getFontMetrics(),
+                                                        text) > screenWidth) {
+                            layout = layout.getJustifiedLayout(screenWidth);
+                        }
                     }
                     TextHitInfo leading =
                         TextHitInfo.leading(underlinedIndex);
                     TextHitInfo trailing =
                         TextHitInfo.trailing(underlinedIndex);
@@ -861,11 +869,15 @@
                                     deviceFontRenderContext);
                     String trimmedText = trimTrailingSpaces(text);
                     if (!trimmedText.isEmpty()) {
                         float screenWidth = (float)g2d.getFont().
                             getStringBounds(trimmedText, frc).getWidth();
-                        layout = layout.getJustifiedLayout(screenWidth);
+                        // If text fits the screenWidth, then do not need to justify
+                        if (SwingUtilities2.stringWidth(c, g2d.getFontMetrics(),
+                                                trimmedText) > screenWidth) {
+                            layout = layout.getJustifiedLayout(screenWidth);
+                        }
 
                         /* Use alternate print color if specified */
                         Color col = g2d.getColor();
                         if (col instanceof PrintColorUIResource) {
                             g2d.setColor(((PrintColorUIResource)col).getPrintColor());
