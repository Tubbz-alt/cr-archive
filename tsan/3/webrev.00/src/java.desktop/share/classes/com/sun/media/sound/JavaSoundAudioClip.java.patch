diff a/src/java.desktop/share/classes/com/sun/media/sound/JavaSoundAudioClip.java b/src/java.desktop/share/classes/com/sun/media/sound/JavaSoundAudioClip.java
--- a/src/java.desktop/share/classes/com/sun/media/sound/JavaSoundAudioClip.java
+++ b/src/java.desktop/share/classes/com/sun/media/sound/JavaSoundAudioClip.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -58,11 +58,10 @@
  * @author Florian Bomers
  */
 @SuppressWarnings("deprecation")
 public final class JavaSoundAudioClip implements AudioClip, MetaEventListener, LineListener {
 
-    private static final boolean DEBUG = false;
     private static final int BUFFER_SIZE = 16384; // number of bytes written each time to the source data line
 
     private long lastPlayCall = 0;
     private static final int MINIMUM_PLAY_DELAY = 30;
 
@@ -113,12 +112,10 @@
         }
         return clip;
     }
 
     private void init(InputStream in) throws IOException {
-        if (DEBUG || Printer.debug)Printer.debug("JavaSoundAudioClip.<init>");
-
         BufferedInputStream bis = new BufferedInputStream(in, STREAM_BUFFER_SIZE);
         bis.mark(STREAM_BUFFER_SIZE);
         try {
             AudioInputStream as = AudioSystem.getAudioInputStream(bis);
             // load the stream data into memory
@@ -163,16 +160,13 @@
     private synchronized void startImpl(boolean loop) {
         // hack for some applets that call the start method very rapidly...
         long currentTime = System.currentTimeMillis();
         long diff = currentTime - lastPlayCall;
         if (diff < MINIMUM_PLAY_DELAY) {
-            if (DEBUG || Printer.debug) Printer.debug("JavaSoundAudioClip.startImpl(loop="+loop+"): abort - too rapdly");
             return;
         }
         lastPlayCall = currentTime;
-
-        if (DEBUG || Printer.debug) Printer.debug("JavaSoundAudioClip.startImpl(loop="+loop+")");
         try {
             if (clip != null) {
                 // We need to disable autoclosing mechanism otherwise the clip
                 // can be closed after "!clip.isOpen()" check, because of
                 // previous inactivity.
@@ -198,11 +192,10 @@
                 } finally {
                     clip.setAutoClosing(true);
                 }
             } else if (datapusher != null ) {
                 datapusher.start(loop);
-                if (DEBUG || Printer.debug)Printer.debug("Stream should be playing/looping");
 
             } else if (sequencer != null) {
                 sequencerloop = loop;
                 if (sequencer.isRunning()) {
                     sequencer.setMicrosecondPosition(0);
@@ -211,56 +204,47 @@
                     try {
                         sequencer.open();
                         sequencer.setSequence(sequence);
 
                     } catch (InvalidMidiDataException e1) {
-                        if (DEBUG || Printer.err)e1.printStackTrace();
+                        if (Printer.err) e1.printStackTrace();
                     } catch (MidiUnavailableException e2) {
-                        if (DEBUG || Printer.err)e2.printStackTrace();
+                        if (Printer.err) e2.printStackTrace();
                     }
                 }
                 sequencer.addMetaEventListener(this);
                 try {
                     sequencer.start();
                 } catch (Exception e) {
-                    if (DEBUG || Printer.err) e.printStackTrace();
+                    if (Printer.err) e.printStackTrace();
                 }
-                if (DEBUG || Printer.debug)Printer.debug("Sequencer should be playing/looping");
             }
         } catch (Exception e) {
-            if (DEBUG || Printer.err)e.printStackTrace();
+            if (Printer.err) e.printStackTrace();
         }
     }
 
     @Override
     public synchronized void stop() {
         if (!success) {
             return;
         }
-
-        if (DEBUG || Printer.debug)Printer.debug("JavaSoundAudioClip->stop()");
         lastPlayCall = 0;
 
         if (clip != null) {
             try {
-                if (DEBUG || Printer.trace)Printer.trace("JavaSoundAudioClip: clip.flush()");
                 clip.flush();
             } catch (Exception e1) {
                 if (Printer.err) e1.printStackTrace();
             }
             try {
-                if (DEBUG || Printer.trace)Printer.trace("JavaSoundAudioClip: clip.stop()");
                 clip.stop();
             } catch (Exception e2) {
                 if (Printer.err) e2.printStackTrace();
             }
-            if (DEBUG || Printer.debug)Printer.debug("Clip should be stopped");
-
         } else if (datapusher != null) {
             datapusher.stop();
-            if (DEBUG || Printer.debug)Printer.debug("Stream should be stopped");
-
         } else if (sequencer != null) {
             try {
                 sequencerloop = false;
                 sequencer.removeMetaEventListener(this);
                 sequencer.stop();
@@ -270,28 +254,23 @@
             try {
                 sequencer.close();
             } catch (Exception e4) {
                 if (Printer.err) e4.printStackTrace();
             }
-            if (DEBUG || Printer.debug)Printer.debug("Sequencer should be stopped");
         }
     }
 
     // Event handlers (for debugging)
 
     @Override
     public synchronized void update(LineEvent event) {
-        if (DEBUG || Printer.debug) Printer.debug("line event received: "+event);
     }
 
     // handle MIDI track end meta events for looping
 
     @Override
     public synchronized void meta(MetaMessage message) {
-
-        if (DEBUG || Printer.debug)Printer.debug("META EVENT RECEIVED!!!!! ");
-
         if( message.getType() == 47 ) {
             if (sequencerloop){
                 //notifyAll();
                 sequencer.setMicrosecondPosition(0);
                 loop();
@@ -308,11 +287,10 @@
 
     @Override
     protected void finalize() {
 
         if (clip != null) {
-            if (DEBUG || Printer.trace)Printer.trace("JavaSoundAudioClip.finalize: clip.close()");
             clip.close();
         }
 
         //$$fb 2001-09-26: may improve situation related to bug #4302884
         if (datapusher != null) {
@@ -325,12 +303,10 @@
     }
 
     // FILE LOADING METHODS
 
     private boolean loadAudioData(AudioInputStream as)  throws IOException, UnsupportedAudioFileException {
-        if (DEBUG || Printer.debug)Printer.debug("JavaSoundAudioClip->openAsClip()");
-
         // first possibly convert this stream to PCM
         as = Toolkit.getPCMConvertedAudioInputStream(as);
         if (as == null) {
             return false;
         }
@@ -402,79 +378,67 @@
     }
 
     // METHODS FOR CREATING THE DEVICE
 
     private boolean createClip() {
-
-        if (DEBUG || Printer.debug)Printer.debug("JavaSoundAudioClip.createClip()");
-
         try {
             DataLine.Info info = new DataLine.Info(Clip.class, loadedAudioFormat);
             if (!(AudioSystem.isLineSupported(info)) ) {
-                if (DEBUG || Printer.err)Printer.err("Clip not supported: "+loadedAudioFormat);
+                if (Printer.err) Printer.err("Clip not supported: "+loadedAudioFormat);
                 // fail silently
                 return false;
             }
             Object line = AudioSystem.getLine(info);
             if (!(line instanceof AutoClosingClip)) {
-                if (DEBUG || Printer.err)Printer.err("Clip is not auto closing!"+clip);
+                if (Printer.err) Printer.err("Clip is not auto closing!"+clip);
                 // fail -> will try with SourceDataLine
                 return false;
             }
             clip = (AutoClosingClip) line;
             clip.setAutoClosing(true);
-            if (DEBUG || Printer.debug) clip.addLineListener(this);
         } catch (Exception e) {
-            if (DEBUG || Printer.err)e.printStackTrace();
+            if (Printer.err) e.printStackTrace();
             // fail silently
             return false;
         }
 
         if (clip==null) {
             // fail silently
             return false;
         }
-
-        if (DEBUG || Printer.debug)Printer.debug("Loaded clip.");
         return true;
     }
 
     private boolean createSourceDataLine() {
-        if (DEBUG || Printer.debug)Printer.debug("JavaSoundAudioClip.createSourceDataLine()");
         try {
             DataLine.Info info = new DataLine.Info(SourceDataLine.class, loadedAudioFormat);
             if (!(AudioSystem.isLineSupported(info)) ) {
-                if (DEBUG || Printer.err)Printer.err("Line not supported: "+loadedAudioFormat);
+                if (Printer.err) Printer.err("Line not supported: "+loadedAudioFormat);
                 // fail silently
                 return false;
             }
             SourceDataLine source = (SourceDataLine) AudioSystem.getLine(info);
             datapusher = new DataPusher(source, loadedAudioFormat, loadedAudio, loadedAudioByteLength);
         } catch (Exception e) {
-            if (DEBUG || Printer.err)e.printStackTrace();
+            if (Printer.err) e.printStackTrace();
             // fail silently
             return false;
         }
 
         if (datapusher==null) {
             // fail silently
             return false;
         }
-
-        if (DEBUG || Printer.debug)Printer.debug("Created SourceDataLine.");
         return true;
     }
 
     private boolean createSequencer(BufferedInputStream in) throws IOException {
-
-        if (DEBUG || Printer.debug)Printer.debug("JavaSoundAudioClip.createSequencer()");
-
         // get the sequencer
         try {
             sequencer = MidiSystem.getSequencer( );
         } catch(MidiUnavailableException me) {
-            if (DEBUG || Printer.err)me.printStackTrace();
+            if (Printer.err) me.printStackTrace();
             return false;
         }
         if (sequencer==null) {
             return false;
         }
@@ -483,15 +447,13 @@
             sequence = MidiSystem.getSequence(in);
             if (sequence == null) {
                 return false;
             }
         } catch (InvalidMidiDataException e) {
-            if (DEBUG || Printer.err)e.printStackTrace();
+            if (Printer.err) e.printStackTrace();
             return false;
         }
-
-        if (DEBUG || Printer.debug)Printer.debug("Created Sequencer.");
         return true;
     }
 
     /*
      * private inner class representing a ByteArrayOutputStream
