diff a/src/java.desktop/share/classes/com/sun/media/sound/PortMixer.java b/src/java.desktop/share/classes/com/sun/media/sound/PortMixer.java
--- a/src/java.desktop/share/classes/com/sun/media/sound/PortMixer.java
+++ b/src/java.desktop/share/classes/com/sun/media/sound/PortMixer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -65,24 +65,20 @@
         // pass in Line.Info, mixer, controls
         super(portMixerInfo,              // Mixer.Info
               null,                       // Control[]
               null,                       // Line.Info[] sourceLineInfo
               null);                      // Line.Info[] targetLineInfo
-
-        if (Printer.trace) Printer.trace(">> PortMixer: constructor");
-
         int count = 0;
         int srcLineCount = 0;
         int dstLineCount = 0;
 
         try {
             try {
                 id = nOpen(getMixerIndex());
                 if (id != 0) {
                     count = nGetPortCount(id);
                     if (count < 0) {
-                        if (Printer.trace) Printer.trace("nGetPortCount() returned error code: " + count);
                         count = 0;
                     }
                 }
             } catch (Exception e) {}
 
@@ -111,12 +107,10 @@
                 sourceLineInfo[srcLineCount++] = portInfos[i];
             } else {
                 targetLineInfo[dstLineCount++] = portInfos[i];
             }
         }
-
-        if (Printer.trace) Printer.trace("<< PortMixer: constructor completed");
     }
 
     @Override
     public Line getLine(Line.Info info) throws LineUnavailableException {
         Line.Info fullInfo = getLineInfo(info);
@@ -147,22 +141,16 @@
         return 0;
     }
 
     @Override
     protected void implOpen() throws LineUnavailableException {
-        if (Printer.trace) Printer.trace(">> PortMixer: implOpen (id="+id+")");
-
         // open the mixer device
         id = nOpen(getMixerIndex());
-
-        if (Printer.trace) Printer.trace("<< PortMixer: implOpen succeeded.");
     }
 
     @Override
     protected void implClose() {
-        if (Printer.trace) Printer.trace(">> PortMixer: implClose");
-
         // close the mixer device
         long thisID = id;
         id = 0;
         nClose(thisID);
         if (ports != null) {
@@ -170,12 +158,10 @@
                 if (ports[i] != null) {
                     ports[i].disposeControls();
                 }
             }
         }
-
-        if (Printer.trace) Printer.trace("<< PortMixer: implClose succeeded");
     }
 
     @Override
     protected void implStart() {}
     @Override
@@ -192,11 +178,11 @@
         case DST_SPEAKER:      return Port.Info.SPEAKER;
         case DST_HEADPHONE:    return Port.Info.HEADPHONE;
         case DST_LINE_OUT:     return Port.Info.LINE_OUT;
         }
         // should never happen...
-        if (Printer.debug) Printer.debug("unknown port type: "+type);
+        if (Printer.err) Printer.err("unknown port type: "+type);
         return null;
     }
 
     int getMixerIndex() {
         return ((PortMixerProvider.PortMixerInfo) getMixerInfo()).getIndex();
@@ -229,16 +215,14 @@
 
         private PortMixerPort(Port.Info info,
                               PortMixer mixer,
                               int portIndex) {
             super(info, mixer, null);
-            if (Printer.trace) Printer.trace("PortMixerPort CONSTRUCTOR: info: " + info);
             this.portIndex = portIndex;
         }
 
         void implOpen() throws LineUnavailableException {
-            if (Printer.trace) Printer.trace(">> PortMixerPort: implOpen().");
             long newID = ((PortMixer) mixer).getID();
             if ((id == 0) || (newID != id) || (controls.length == 0)) {
                 id = newID;
                 Vector<Control> vector = new Vector<>();
                 synchronized (vector) {
@@ -249,11 +233,10 @@
                     }
                 }
             } else {
                 enableControls(controls, true);
             }
-            if (Printer.trace) Printer.trace("<< PortMixerPort: implOpen() succeeded");
         }
 
         private void enableControls(Control[] controls, boolean enable) {
             for (int i = 0; i < controls.length; i++) {
                 if (controls[i] instanceof BoolCtrl) {
@@ -272,23 +255,20 @@
             enableControls(controls, false);
             controls = new Control[0];
         }
 
         void implClose() {
-            if (Printer.trace) Printer.trace(">> PortMixerPort: implClose()");
             // get rid of controls
             enableControls(controls, false);
-            if (Printer.trace) Printer.trace("<< PortMixerPort: implClose() succeeded");
         }
 
         // this is very similar to open(AudioFormat, int) in AbstractDataLine...
         @Override
         public void open() throws LineUnavailableException {
             synchronized (mixer) {
                 // if the line is not currently open, try to open it with this format and buffer size
                 if (!isOpen()) {
-                    if (Printer.trace) Printer.trace("> PortMixerPort: open");
                     // reserve mixer resources for this line
                     mixer.open(this);
                     try {
                         // open the line.  may throw LineUnavailableException.
                         implOpen();
@@ -298,31 +278,27 @@
                     } catch (LineUnavailableException e) {
                         // release mixer resources for this line and then throw the exception
                         mixer.close(this);
                         throw e;
                     }
-                    if (Printer.trace) Printer.trace("< PortMixerPort: open succeeded");
                 }
             }
         }
 
         // this is very similar to close() in AbstractDataLine...
         @Override
         public void close() {
             synchronized (mixer) {
                 if (isOpen()) {
-                    if (Printer.trace) Printer.trace("> PortMixerPort.close()");
-
                     // set the open state to false and send events
                     setOpen(false);
 
                     // close resources for this line
                     implClose();
 
                     // release mixer resources for this line
                     mixer.close(this);
-                    if (Printer.trace) Printer.trace("< PortMixerPort.close() succeeded");
                 }
             }
         }
 
     } // class PortMixerPort
