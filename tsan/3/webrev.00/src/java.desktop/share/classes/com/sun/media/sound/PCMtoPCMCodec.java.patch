diff a/src/java.desktop/share/classes/com/sun/media/sound/PCMtoPCMCodec.java b/src/java.desktop/share/classes/com/sun/media/sound/PCMtoPCMCodec.java
--- a/src/java.desktop/share/classes/com/sun/media/sound/PCMtoPCMCodec.java
+++ b/src/java.desktop/share/classes/com/sun/media/sound/PCMtoPCMCodec.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -372,49 +372,35 @@
 
             if( sampleSizeInBits==8 ) {
                 if( AudioFormat.Encoding.PCM_UNSIGNED.equals(inputEncoding) &&
                     AudioFormat.Encoding.PCM_SIGNED.equals(outputEncoding) ) {
                     conversionType = PCM_SWITCH_SIGNED_8BIT;
-                    if(Printer.debug) Printer.debug("PCMtoPCMCodecStream: conversionType = PCM_SWITCH_SIGNED_8BIT");
-
                 } else if( AudioFormat.Encoding.PCM_SIGNED.equals(inputEncoding) &&
                            AudioFormat.Encoding.PCM_UNSIGNED.equals(outputEncoding) ) {
                     conversionType = PCM_SWITCH_SIGNED_8BIT;
-                    if(Printer.debug) Printer.debug("PCMtoPCMCodecStream: conversionType = PCM_SWITCH_SIGNED_8BIT");
                 }
             } else {
 
                 if( inputEncoding.equals(outputEncoding) && (inputIsBigEndian != outputIsBigEndian) ) {
 
                     conversionType = PCM_SWITCH_ENDIAN;
-                    if(Printer.debug) Printer.debug("PCMtoPCMCodecStream: conversionType = PCM_SWITCH_ENDIAN");
-
-
                 } else if (AudioFormat.Encoding.PCM_UNSIGNED.equals(inputEncoding) && !inputIsBigEndian &&
                             AudioFormat.Encoding.PCM_SIGNED.equals(outputEncoding) && outputIsBigEndian) {
 
                     conversionType = PCM_UNSIGNED_LE2SIGNED_BE;
-                    if(Printer.debug) Printer.debug("PCMtoPCMCodecStream: conversionType = PCM_UNSIGNED_LE2SIGNED_BE");
-
                 } else if (AudioFormat.Encoding.PCM_SIGNED.equals(inputEncoding) && !inputIsBigEndian &&
                            AudioFormat.Encoding.PCM_UNSIGNED.equals(outputEncoding) && outputIsBigEndian) {
 
                     conversionType = PCM_SIGNED_LE2UNSIGNED_BE;
-                    if(Printer.debug) Printer.debug("PCMtoPCMCodecStream: conversionType = PCM_SIGNED_LE2UNSIGNED_BE");
-
                 } else if (AudioFormat.Encoding.PCM_UNSIGNED.equals(inputEncoding) && inputIsBigEndian &&
                            AudioFormat.Encoding.PCM_SIGNED.equals(outputEncoding) && !outputIsBigEndian) {
 
                     conversionType = PCM_UNSIGNED_BE2SIGNED_LE;
-                    if(Printer.debug) Printer.debug("PCMtoPCMCodecStream: conversionType = PCM_UNSIGNED_BE2SIGNED_LE");
-
                 } else if (AudioFormat.Encoding.PCM_SIGNED.equals(inputEncoding) && inputIsBigEndian &&
                            AudioFormat.Encoding.PCM_UNSIGNED.equals(outputEncoding) && !outputIsBigEndian) {
 
                     conversionType = PCM_SIGNED_BE2UNSIGNED_LE;
-                    if(Printer.debug) Printer.debug("PCMtoPCMCodecStream: conversionType = PCM_SIGNED_BE2UNSIGNED_LE");
-
                 }
             }
 
             // set the audio stream length in frames if we know it
 
