diff a/src/java.desktop/share/classes/com/sun/media/sound/AbstractMixer.java b/src/java.desktop/share/classes/com/sun/media/sound/AbstractMixer.java
--- a/src/java.desktop/share/classes/com/sun/media/sound/AbstractMixer.java
+++ b/src/java.desktop/share/classes/com/sun/media/sound/AbstractMixer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -280,21 +280,18 @@
 
     /**
      * This implementation tries to open the mixer with its current format and buffer size settings.
      */
     final synchronized void open(boolean manual) throws LineUnavailableException {
-        if (Printer.trace) Printer.trace(">> AbstractMixer: open()");
         if (!isOpen()) {
             implOpen();
             // if the mixer is not currently open, set open to true and send event
             setOpen(true);
             if (manual) {
                 manuallyOpened = true;
             }
         }
-
-        if (Printer.trace) Printer.trace("<< AbstractMixer: open() succeeded");
     }
 
     // METHOD FOR INTERNAL IMPLEMENTATION USE
 
     /**
@@ -303,16 +300,12 @@
      * mixer, and adds the line to the appropriate vector.
      * The mixer may be opened at a format different than the line's
      * format if it is a DataLine.
      */
     final synchronized void open(Line line) throws LineUnavailableException {
-
-        if (Printer.trace) Printer.trace(">> AbstractMixer: open(line = " + line + ")");
-
         // $$kk: 06.11.99: ignore ourselves for now
         if (this.equals(line)) {
-            if (Printer.trace) Printer.trace("<< AbstractMixer: open(" + line + ") nothing done");
             return;
         }
 
         // source line?
         if (isSourceLine(line.getLineInfo())) {
@@ -337,50 +330,36 @@
                 }
             } else {
                 if (Printer.err) Printer.err("Unknown line received for AbstractMixer.open(Line): " + line);
             }
         }
-
-        if (Printer.trace) Printer.trace("<< AbstractMixer: open(" + line + ") completed");
     }
 
     /**
      * Removes this line from the list of open source lines and
      * open target lines, if it exists in either.
      * If the list is now empty, closes the mixer.
      */
     final synchronized void close(Line line) {
-
-        if (Printer.trace) Printer.trace(">> AbstractMixer: close(" + line + ")");
-
         // $$kk: 06.11.99: ignore ourselves for now
         if (this.equals(line)) {
-            if (Printer.trace) Printer.trace("<< AbstractMixer: close(" + line + ") nothing done");
             return;
         }
 
         sourceLines.removeElement(line);
         targetLines.removeElement(line);
 
-        if (Printer.debug) Printer.debug("AbstractMixer: close(line): sourceLines.size() now: " + sourceLines.size());
-        if (Printer.debug) Printer.debug("AbstractMixer: close(line): targetLines.size() now: " + targetLines.size());
-
-
         if (sourceLines.isEmpty() && targetLines.isEmpty() && !manuallyOpened) {
-            if (Printer.trace) Printer.trace("AbstractMixer: close(" + line + "): need to close the mixer");
             close();
         }
-
-        if (Printer.trace) Printer.trace("<< AbstractMixer: close(" + line + ") succeeded");
     }
 
     /**
      * Close all lines and then close this mixer.
      */
     @Override
     public final synchronized void close() {
-        if (Printer.trace) Printer.trace(">> AbstractMixer: close()");
         if (isOpen()) {
             // close all source lines
             Line[] localLines = getSourceLines();
             for (int i = 0; i<localLines.length; i++) {
                 localLines[i].close();
@@ -396,46 +375,34 @@
 
             // set the open state to false and send events
             setOpen(false);
         }
         manuallyOpened = false;
-        if (Printer.trace) Printer.trace("<< AbstractMixer: close() succeeded");
     }
 
     /**
      * Starts the mixer.
      */
     final synchronized void start(Line line) {
-
-        if (Printer.trace) Printer.trace(">> AbstractMixer: start(" + line + ")");
-
         // $$kk: 06.11.99: ignore ourselves for now
         if (this.equals(line)) {
-            if (Printer.trace) Printer.trace("<< AbstractMixer: start(" + line + ") nothing done");
             return;
         }
 
         // we just start the mixer regardless of anything else here.
         if (!started) {
-            if (Printer.debug) Printer.debug("AbstractMixer: start(line): starting the mixer");
             implStart();
             started = true;
         }
-
-        if (Printer.trace) Printer.trace("<< AbstractMixer: start(" + line + ") succeeded");
     }
 
     /**
      * Stops the mixer if this was the last running line.
      */
     final synchronized void stop(Line line) {
-
-        if (Printer.trace) Printer.trace(">> AbstractMixer: stop(" + line + ")");
-
         // $$kk: 06.11.99: ignore ourselves for now
         if (this.equals(line)) {
-            if (Printer.trace) Printer.trace("<< AbstractMixer: stop(" + line + ") nothing done");
             return;
         }
 
         @SuppressWarnings("unchecked")
         Vector<Line> localSourceLines = (Vector<Line>)sourceLines.clone();
@@ -445,11 +412,10 @@
 
             // this covers clips and source data lines
             if (localSourceLines.elementAt(i) instanceof AbstractDataLine) {
                 AbstractDataLine sourceLine = (AbstractDataLine)localSourceLines.elementAt(i);
                 if ( sourceLine.isStartedRunning() && (!sourceLine.equals(line)) ) {
-                    if (Printer.trace) Printer.trace("<< AbstractMixer: stop(" + line + ") found running sourceLine: " + sourceLine);
                     return;
                 }
             }
         }
 
@@ -460,22 +426,18 @@
             // if any other open line is running, return
             // this covers target data lines
             if (localTargetLines.elementAt(i) instanceof AbstractDataLine) {
                 AbstractDataLine targetLine = (AbstractDataLine)localTargetLines.elementAt(i);
                 if ( targetLine.isStartedRunning() && (!targetLine.equals(line)) ) {
-                    if (Printer.trace) Printer.trace("<< AbstractMixer: stop(" + line + ") found running targetLine: " + targetLine);
                     return;
                 }
             }
         }
 
         // otherwise, stop
-        if (Printer.debug) Printer.debug("AbstractMixer: stop(line): stopping the mixer");
         started = false;
         implStop();
-
-        if (Printer.trace) Printer.trace("<< AbstractMixer: stop(" + line + ") succeeded");
     }
 
     /**
      * Determines whether this is a source line for this mixer.
      * Right now this just checks whether it's supported, but should
