diff a/src/java.desktop/share/classes/com/sun/media/sound/AbstractDataLine.java b/src/java.desktop/share/classes/com/sun/media/sound/AbstractDataLine.java
--- a/src/java.desktop/share/classes/com/sun/media/sound/AbstractDataLine.java
+++ b/src/java.desktop/share/classes/com/sun/media/sound/AbstractDataLine.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -99,19 +99,15 @@
     // DATA LINE METHODS
 
     public final void open(AudioFormat format, int bufferSize) throws LineUnavailableException {
         //$$fb 2001-10-09: Bug #4517739: avoiding deadlock by synchronizing to mixer !
         synchronized (mixer) {
-            if (Printer.trace) Printer.trace("> AbstractDataLine.open(format, bufferSize) (class: "+getClass().getName());
-
             // if the line is not currently open, try to open it with this format and buffer size
             if (!isOpen()) {
                 // make sure that the format is specified correctly
                 // $$fb part of fix for 4679187: Clip.open() throws unexpected Exceptions
                 Toolkit.isFullySpecifiedAudioFormat(format);
-
-                if (Printer.debug) Printer.debug("  need to open the mixer...");
                 // reserve mixer resources for this line
                 //mixer.open(this, format, bufferSize);
                 mixer.open(this);
 
                 try {
@@ -125,12 +121,10 @@
                     // release mixer resources for this line and then throw the exception
                     mixer.close(this);
                     throw e;
                 }
             } else {
-                if (Printer.debug) Printer.debug("  dataline already open");
-
                 // if the line is already open and the requested format differs from the
                 // current settings, throw an IllegalStateException
                 //$$fb 2002-04-02: fix for 4661602: Buffersize is checked when re-opening line
                 if (!format.matches(getFormat())) {
                     throw new IllegalStateException("Line is already open with format " + getFormat() +
@@ -139,12 +133,10 @@
                 //$$fb 2002-07-26: allow changing the buffersize of already open lines
                 if (bufferSize > 0) {
                     setBufferSize(bufferSize);
                 }
             }
-
-            if (Printer.trace) Printer.trace("< AbstractDataLine.open(format, bufferSize) completed");
         }
     }
 
     public final void open(AudioFormat format) throws LineUnavailableException {
         open(format, AudioSystem.NOT_SPECIFIED);
@@ -161,26 +153,23 @@
     /**
      * This implementation does nothing.
      */
     @Override
     public void drain() {
-        if (Printer.trace) Printer.trace("AbstractDataLine: drain");
     }
 
     /**
      * This implementation does nothing.
      */
     @Override
     public void flush() {
-        if (Printer.trace) Printer.trace("AbstractDataLine: flush");
     }
 
     @Override
     public final void start() {
         //$$fb 2001-10-09: Bug #4517739: avoiding deadlock by synchronizing to mixer !
         synchronized(mixer) {
-            if (Printer.trace) Printer.trace("> "+getClass().getName()+".start() - AbstractDataLine");
 
             // $$kk: 06.06.99: if not open, this doesn't work....???
             if (isOpen()) {
 
                 if (!isStartedRunning()) {
@@ -192,21 +181,17 @@
         }
 
         synchronized(lock) {
             lock.notifyAll();
         }
-
-        if (Printer.trace) Printer.trace("< "+getClass().getName()+".start() - AbstractDataLine");
     }
 
     @Override
     public final void stop() {
 
         //$$fb 2001-10-09: Bug #4517739: avoiding deadlock by synchronizing to mixer !
         synchronized(mixer) {
-            if (Printer.trace) Printer.trace("> "+getClass().getName()+".stop() - AbstractDataLine");
-
             // $$kk: 06.06.99: if not open, this doesn't work.
             if (isOpen()) {
 
                 if (isStartedRunning()) {
 
@@ -224,12 +209,10 @@
         }
 
         synchronized(lock) {
             lock.notifyAll();
         }
-
-        if (Printer.trace) Printer.trace("< "+getClass().getName()+".stop() - AbstractDataLine");
     }
 
     // $$jb: 12.10.99: The official API for this is isRunning().
     // Per the denied RFE 4297981,
     // the change to isStarted() is technically an unapproved API change.
@@ -307,13 +290,10 @@
     /**
      * This method sets the active state and generates
      * events if it changes.
      */
     final void setActive(boolean active) {
-
-        if (Printer.trace) Printer.trace("> AbstractDataLine: setActive(" + active + ")");
-
         //boolean sendEvents = false;
         //long position = getLongFramePosition();
 
         synchronized (this) {
 
@@ -339,13 +319,10 @@
     /**
      * This method sets the started state and generates
      * events if it changes.
      */
     final void setStarted(boolean started) {
-
-        if (Printer.trace) Printer.trace("> AbstractDataLine: setStarted(" + started + ")");
-
         boolean sendEvents = false;
         long position = getLongFramePosition();
 
         synchronized (this) {
 
@@ -361,24 +338,20 @@
                 sendEvents(new LineEvent(this, LineEvent.Type.START, position));
             } else {
                 sendEvents(new LineEvent(this, LineEvent.Type.STOP, position));
             }
         }
-        if (Printer.trace) Printer.trace("< AbstractDataLine: setStarted completed");
     }
 
     /**
      * This method generates a STOP event and sets the started state to false.
      * It is here for historic reasons when an EOM event existed.
      */
     final void setEOM() {
-
-        if (Printer.trace) Printer.trace("> AbstractDataLine: setEOM()");
         //$$fb 2002-04-21: sometimes, 2 STOP events are generated.
         // better use setStarted() to send STOP event.
         setStarted(false);
-        if (Printer.trace) Printer.trace("< AbstractDataLine: setEOM() completed");
     }
 
     // OVERRIDES OF ABSTRACT LINE METHODS
 
     /**
@@ -387,28 +360,22 @@
      * line is open, this should return quietly because the values
      * requested will match the current ones.
      */
     @Override
     public final void open() throws LineUnavailableException {
-
-        if (Printer.trace) Printer.trace("> "+getClass().getName()+".open() - AbstractDataLine");
-
         // this may throw a LineUnavailableException.
         open(format, bufferSize);
-        if (Printer.trace) Printer.trace("< "+getClass().getName()+".open() - AbstractDataLine");
     }
 
     /**
      * This should also stop the line.  The closed line should not be running or active.
      * After we close the line, we reset the format and buffer size to the defaults.
      */
     @Override
     public final void close() {
         //$$fb 2001-10-09: Bug #4517739: avoiding deadlock by synchronizing to mixer !
         synchronized (mixer) {
-            if (Printer.trace) Printer.trace("> "+getClass().getName()+".close() - in AbstractDataLine.");
-
             if (isOpen()) {
 
                 // stop
                 stop();
 
@@ -424,11 +391,10 @@
                 // reset format and buffer size to the defaults
                 format = defaultFormat;
                 bufferSize = defaultBufferSize;
             }
         }
-        if (Printer.trace) Printer.trace("< "+getClass().getName()+".close() - in AbstractDataLine");
     }
 
     abstract void implOpen(AudioFormat format, int bufferSize) throws LineUnavailableException;
     abstract void implClose();
 
