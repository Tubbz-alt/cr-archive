diff a/src/java.desktop/share/classes/com/sun/media/sound/AbstractMidiDevice.java b/src/java.desktop/share/classes/com/sun/media/sound/AbstractMidiDevice.java
--- a/src/java.desktop/share/classes/com/sun/media/sound/AbstractMidiDevice.java
+++ b/src/java.desktop/share/classes/com/sun/media/sound/AbstractMidiDevice.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -48,12 +48,10 @@
  * @author Matthias Pfisterer
  * @author Florian Bomers
  */
 abstract class AbstractMidiDevice implements MidiDevice, ReferenceCountingDevice {
 
-    private static final boolean TRACE_TRANSMITTER = false;
-
     private ArrayList<Receiver> receiverList;
 
     private TransmitterList transmitterList;
 
     // lock to protect receiverList and transmitterList
@@ -86,17 +84,12 @@
      */
     /*
      * The initial mode and only supported mode default to OMNI_ON_POLY.
      */
     protected AbstractMidiDevice(MidiDevice.Info info) {
-
-        if(Printer.trace) Printer.trace(">> AbstractMidiDevice CONSTRUCTOR");
-
         this.info = info;
         openRefCount = 0;
-
-        if(Printer.trace) Printer.trace("<< AbstractMidiDevice CONSTRUCTOR completed");
     }
 
     // MIDI DEVICE METHODS
 
     @Override
@@ -109,16 +102,14 @@
      * opened the device implicitly from closing it. The only way to close the device after
      * this call is a call to close().
      */
     @Override
     public final void open() throws MidiUnavailableException {
-        if (Printer.trace) Printer.trace("> AbstractMidiDevice: open()");
         synchronized(this) {
             openRefCount = -1;
             doOpen();
         }
-        if (Printer.trace) Printer.trace("< AbstractMidiDevice: open() completed");
     }
 
     /** Open the device implicitly.
      * This method is intended to be used by AbstractReceiver
      * and BasicTransmitter. Actually, it is called by getReceiverReferenceCounting() and
@@ -129,41 +120,35 @@
      * R/T's are ones that opened the device implicitly.
      *
      * @object The Receiver or Transmitter instance that triggered this implicit open.
      */
     private void openInternal(Object object) throws MidiUnavailableException {
-        if (Printer.trace) Printer.trace("> AbstractMidiDevice: openInternal()");
         synchronized(this) {
             if (openRefCount != -1) {
                 openRefCount++;
                 getOpenKeepingObjects().add(object);
             }
             // double calls to doOpens() will be catched by the open flag.
             doOpen();
         }
-        if (Printer.trace) Printer.trace("< AbstractMidiDevice: openInternal() completed");
     }
 
     private void doOpen() throws MidiUnavailableException {
-        if (Printer.trace) Printer.trace("> AbstractMidiDevice: doOpen()");
         synchronized(this) {
             if (! isOpen()) {
                 implOpen();
                 open = true;
             }
         }
-        if (Printer.trace) Printer.trace("< AbstractMidiDevice: doOpen() completed");
     }
 
     @Override
     public final void close() {
-        if (Printer.trace) Printer.trace("> AbstractMidiDevice: close()");
         synchronized (this) {
             doClose();
             openRefCount = 0;
         }
-        if (Printer.trace) Printer.trace("< AbstractMidiDevice: close() completed");
     }
 
     /** Close the device for an object that implicitely opened it.
      * This method is intended to be used by Transmitter.close() and Receiver.close().
      * Those methods should pass this for the object parameter. Since Transmitters or Receivers
@@ -175,33 +160,29 @@
      *
      * @param object The object that might have been opening the device implicitely (for now,
      * this may be a Transmitter or receiver).
      */
     public final void closeInternal(Object object) {
-        if (Printer.trace) Printer.trace("> AbstractMidiDevice: closeInternal()");
         synchronized(this) {
             if (getOpenKeepingObjects().remove(object)) {
                 if (openRefCount > 0) {
                     openRefCount--;
                     if (openRefCount == 0) {
                         doClose();
                     }
                 }
             }
         }
-        if (Printer.trace) Printer.trace("< AbstractMidiDevice: closeInternal() completed");
     }
 
     public final void doClose() {
-        if (Printer.trace) Printer.trace("> AbstractMidiDevice: doClose()");
         synchronized(this) {
             if (isOpen()) {
                 implClose();
                 open = false;
             }
         }
-        if (Printer.trace) Printer.trace("< AbstractMidiDevice: doClose() completed");
     }
 
     @Override
     public final boolean isOpen() {
         return open;
@@ -528,11 +509,10 @@
         }
 
         @Override
         public final void setReceiver(Receiver receiver) {
             if (tlist != null && this.receiver != receiver) {
-                if (Printer.debug) Printer.debug("Transmitter "+toString()+": set receiver "+receiver);
                 tlist.receiverChanged(this, this.receiver, receiver);
                 this.receiver = receiver;
             }
         }
 
@@ -581,19 +561,17 @@
                 transmitters.add(t);
             }
             if (t instanceof BasicTransmitter) {
                 ((BasicTransmitter) t).setTransmitterList(this);
             }
-            if (Printer.debug) Printer.debug("--added transmitter "+t);
         }
 
         private void remove(Transmitter t) {
             synchronized(transmitters) {
                 int index = transmitters.indexOf(t);
                 if (index >= 0) {
                     transmitters.remove(index);
-                    if (Printer.debug) Printer.debug("--removed transmitter "+t);
                 }
             }
         }
 
         private void receiverChanged(BasicTransmitter t,
@@ -623,11 +601,10 @@
                 for(int i = 0; i < transmitters.size(); i++) {
                     transmitters.get(i).close();
                 }
                 transmitters.clear();
             }
-            if (Printer.trace) Printer.trace("TransmitterList.close() succeeded");
         }
 
 
 
         /**
@@ -640,15 +617,13 @@
             try {
                 synchronized(transmitters) {
                     int size = transmitters.size();
                     if (optimizedReceiverCount == size) {
                         if (midiOutReceiver != null) {
-                            if (TRACE_TRANSMITTER) Printer.println("Sending packed message to MidiOutReceiver");
                             midiOutReceiver.sendPackedMidiMessage(packedMessage, timeStamp);
                         }
                     } else {
-                        if (TRACE_TRANSMITTER) Printer.println("Sending packed message to "+size+" transmitter's receivers");
                         for (int i = 0; i < size; i++) {
                             Receiver receiver = transmitters.get(i).getReceiver();
                             if (receiver != null) {
                                 if (optimizedReceiverCount > 0) {
                                     if (receiver instanceof MidiOutDevice.MidiOutReceiver) {
@@ -670,11 +645,10 @@
 
         void sendMessage(byte[] data, long timeStamp) {
             try {
                 synchronized(transmitters) {
                     int size = transmitters.size();
-                    if (TRACE_TRANSMITTER) Printer.println("Sending long message to "+size+" transmitter's receivers");
                     for (int i = 0; i < size; i++) {
                         Receiver receiver = transmitters.get(i).getReceiver();
                         if (receiver != null) {
                             //$$fb 2002-04-02: SysexMessages are mutable, so
                             // an application could change the contents of this object,
@@ -701,15 +675,13 @@
             }
             synchronized(transmitters) {
                 int size = transmitters.size();
                 if (optimizedReceiverCount == size) {
                     if (midiOutReceiver != null) {
-                        if (TRACE_TRANSMITTER) Printer.println("Sending MIDI message to MidiOutReceiver");
                         midiOutReceiver.send(message, timeStamp);
                     }
                 } else {
-                    if (TRACE_TRANSMITTER) Printer.println("Sending MIDI message to "+size+" transmitter's receivers");
                     for (int i = 0; i < size; i++) {
                         Receiver receiver = transmitters.get(i).getReceiver();
                         if (receiver != null) {
                             //$$fb 2002-04-02: ShortMessages are mutable, so
                             // an application could change the contents of this object,
