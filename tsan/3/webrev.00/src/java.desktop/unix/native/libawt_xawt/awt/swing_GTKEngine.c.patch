diff a/src/java.desktop/unix/native/libawt_xawt/awt/swing_GTKEngine.c b/src/java.desktop/unix/native/libawt_xawt/awt/swing_GTKEngine.c
--- a/src/java.desktop/unix/native/libawt_xawt/awt/swing_GTKEngine.c
+++ b/src/java.desktop/unix/native/libawt_xawt/awt/swing_GTKEngine.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -22,24 +22,26 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 #include <stdlib.h>
+#include <string.h>
 #include "gtk_interface.h"
 #include "com_sun_java_swing_plaf_gtk_GTKEngine.h"
 
 /* Static buffer for conversion from java.lang.String to UTF-8 */
-static char conversionBuffer[CONV_BUFFER_SIZE];
+static char conversionBuffer[(CONV_BUFFER_SIZE - 1) * 3 + 1];
 
 const char *getStrFor(JNIEnv *env, jstring val)
 {
     int length = (*env)->GetStringLength(env, val);
     if (length > CONV_BUFFER_SIZE-1)
     {
         length = CONV_BUFFER_SIZE-1;
     }
 
+    memset(conversionBuffer, 0, sizeof(conversionBuffer));
     (*env)->GetStringUTFRegion(env, val, 0, length, conversionBuffer);
     return conversionBuffer;
 }
 
 /*
