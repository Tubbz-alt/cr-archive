diff a/src/java.desktop/unix/native/libsplashscreen/splashscreen_sys.c b/src/java.desktop/unix/native/libsplashscreen/splashscreen_sys.c
--- a/src/java.desktop/unix/native/libsplashscreen/splashscreen_sys.c
+++ b/src/java.desktop/unix/native/libsplashscreen/splashscreen_sys.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -403,11 +403,11 @@
     SplashCleanup(SplashGetInstance());
     pthread_exit(NULL);
     return 0;
 }
 
-void
+int
 SplashInitPlatform(Splash * splash) {
     int shapeVersionMajor, shapeVersionMinor;
 
     // This setting enables the synchronous Xlib mode!
     // Don't use it == 1 in production builds!
@@ -422,11 +422,11 @@
 //    XSetIOErrorHandler(HandleIOError);
     XSetIOErrorHandler(NULL);
     splash->display = XOpenDisplay(NULL);
     if (!splash->display) {
         splash->isVisible = -1;
-        return;
+        return 0;
     }
 
     shapeSupported = XShapeQueryExtension(splash->display, &shapeEventBase,
             &shapeErrorBase);
     if (shapeSupported) {
@@ -472,11 +472,11 @@
                 splash->isVisible = -1;
                 splash->display = NULL;
                 splash->screen = NULL;
                 splash->visual = NULL;
                 fprintf(stderr, "Warning: unable to initialize the splashscreen. Not enough available color cells.\n");
-                return;
+                return 0;
             }
             splash->cmap = AllocColors(splash->display, splash->screen,
                     numColors, colorIndex);
             for (i = 0; i < numColors; i++) {
                 splash->colorIndex[i] = colorIndex[i];
@@ -504,10 +504,11 @@
             break;
         }
     default:
         ; /* FIXME: should probably be fixed, but javaws splash screen doesn't support other visuals either */
     }
+    return 1;
 }
 
 
 void
 SplashCleanupPlatform(Splash * splash) {
@@ -799,11 +800,11 @@
 void
 SplashReconfigure(Splash * splash) {
     sendctl(splash, SPLASHCTL_RECONFIGURE);
 }
 
-JNIEXPORT jboolean JNICALL
+JNIEXPORT jboolean
 SplashGetScaledImageName(const char* jarName, const char* fileName,
                            float *scaleFactor, char *scaledImgName,
                            const size_t scaledImageNameLength)
 {
     *scaleFactor = 1;
