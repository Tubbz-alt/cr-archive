diff a/src/java.desktop/unix/classes/sun/awt/X11/XEmbedChildProxyPeer.java b/src/java.desktop/unix/classes/sun/awt/X11/XEmbedChildProxyPeer.java
--- a/src/java.desktop/unix/classes/sun/awt/X11/XEmbedChildProxyPeer.java
+++ b/src/java.desktop/unix/classes/sun/awt/X11/XEmbedChildProxyPeer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,19 +23,38 @@
  * questions.
  */
 
 package sun.awt.X11;
 
-import java.awt.*;
-import java.awt.event.*;
+import java.awt.AWTEvent;
+import java.awt.AWTException;
+import java.awt.BufferCapabilities;
+import java.awt.Color;
+import java.awt.Component;
+import java.awt.Container;
+import java.awt.Dimension;
+import java.awt.Font;
+import java.awt.FontMetrics;
+import java.awt.Graphics;
+import java.awt.GraphicsConfiguration;
+import java.awt.Image;
+import java.awt.Point;
+import java.awt.Rectangle;
+import java.awt.Toolkit;
+import java.awt.Window;
+import java.awt.event.ComponentEvent;
+import java.awt.event.FocusEvent;
+import java.awt.event.InputEvent;
+import java.awt.event.InvocationEvent;
+import java.awt.event.KeyEvent;
+import java.awt.event.PaintEvent;
 import java.awt.image.ColorModel;
-import java.awt.image.ImageObserver;
-import java.awt.image.ImageProducer;
 import java.awt.image.VolatileImage;
-import java.awt.peer.*;
+import java.awt.peer.ComponentPeer;
+import java.awt.peer.ContainerPeer;
+
 import sun.java2d.pipe.Region;
-import sun.awt.*;
 
 public class XEmbedChildProxyPeer implements ComponentPeer, XEventDispatcher{
     XEmbeddingContainer container;
     XEmbedChildProxy proxy;
     long handle;
@@ -246,15 +265,12 @@
     }
     public boolean              isFocusable() {
         return true;
     }
 
-    public Image                createImage(ImageProducer producer) { return null; }
     public Image                createImage(int width, int height) { return null; }
     public VolatileImage        createVolatileImage(int width, int height) { return null; }
-    public boolean              prepareImage(Image img, int w, int h, ImageObserver o) { return false; }
-    public int                  checkImage(Image img, int w, int h, ImageObserver o) { return 0; }
     public GraphicsConfiguration getGraphicsConfiguration() { return null; }
     public boolean     handlesWheelScrolling() { return true; }
     public void createBuffers(int numBuffers, BufferCapabilities caps)
       throws AWTException { }
     public Image getBackBuffer() { return null; }
