diff a/src/java.desktop/unix/classes/sun/awt/X11/XPopupMenuPeer.java b/src/java.desktop/unix/classes/sun/awt/X11/XPopupMenuPeer.java
--- a/src/java.desktop/unix/classes/sun/awt/X11/XPopupMenuPeer.java
+++ b/src/java.desktop/unix/classes/sun/awt/X11/XPopupMenuPeer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -77,46 +77,36 @@
      *
      ************************************************/
     /*
      * From MenuComponentPeer
      */
+    @Override
     public void setFont(Font f) {
         resetMapping();
         setItemsFont(f);
         postPaintEvent();
     }
 
     /*
      * From MenuItemPeer
      */
+    @Override
     public void setLabel(String label) {
         resetMapping();
         postPaintEvent();
     }
 
 
+    @Override
     public void setEnabled(boolean enabled) {
         postPaintEvent();
     }
 
-    /*
-     * From MenuPeer
-     */
-    /**
-     * addSeparator routines are not used
-     * in peers. Shared code invokes addItem("-")
-     * for adding separators
-     */
-    public void addSeparator() {
-        if (log.isLoggable(PlatformLogger.Level.FINER)) {
-            log.finer("addSeparator is not implemented");
-        }
-    }
-
     /*
      * From PopupMenuPeer
      */
+    @Override
     @SuppressWarnings("deprecation")
     public void show(Event e) {
         target = (Component)e.target;
         // Get menus from the target.
         Vector<MenuItem> targetItemVector = getMenuTargetItems();
@@ -171,10 +161,11 @@
             return false;
         }
         return AWTAccessor.getMenuItemAccessor().isEnabled(popupMenuTarget);
     }
 
+    @Override
     Vector<MenuItem> getMenuTargetItems() {
         if (popupMenuTarget == null) {
             return null;
         }
         return AWTAccessor.getMenuAccessor().getItems(popupMenuTarget);
@@ -229,13 +220,14 @@
      ************************************************/
     /**
      * Returns height of menu window's caption.
      * Can be overriden for popup menus and tear-off menus
      */
+    @Override
     protected Dimension getCaptionSize() {
         String s = getTargetLabel();
-        if (s.equals("")) {
+        if (s.isEmpty()) {
             return null;
         }
         Graphics g = getGraphics();
         if (g == null) {
             return null;
@@ -256,13 +248,14 @@
     /**
      * Paints menu window's caption.
      * Can be overriden for popup menus and tear-off menus.
      * Default implementation does nothing
      */
+    @Override
     protected void paintCaption(Graphics g, Rectangle rect) {
         String s = getTargetLabel();
-        if (s.equals("")) {
+        if (s.isEmpty()) {
             return;
         }
         g.setFont(getTargetFont());
         FontMetrics fm = g.getFontMetrics();
         String str = getTargetLabel();
@@ -278,15 +271,17 @@
     /************************************************
      *
      * Overriden XBaseMenuWindow functions
      *
      ************************************************/
+    @Override
     protected void doDispose() {
         super.doDispose();
         XToolkit.targetDisposedPeer(popupMenuTarget, this);
     }
 
+    @Override
     protected void handleEvent(AWTEvent event) {
         switch(event.getID()) {
         case MouseEvent.MOUSE_PRESSED:
         case MouseEvent.MOUSE_RELEASED:
         case MouseEvent.MOUSE_CLICKED:
@@ -309,10 +304,11 @@
     /************************************************
      *
      * Overriden XWindow general-purpose functions
      *
      ************************************************/
+    @Override
     void ungrabInputImpl() {
         hide();
     }
 
     /************************************************
@@ -324,10 +320,11 @@
     /*
      * In previous version keys were handled in handleKeyPress.
      * Now we override this function do disable F10 explicit
      * processing. All processing is done using KeyEvent.
      */
+    @Override
     public void handleKeyPress(XEvent xev) {
         XKeyEvent xkey = xev.get_xkey();
         if (log.isLoggable(PlatformLogger.Level.FINE)) {
             log.fine(xkey.toString());
         }
