diff a/src/java.scripting/share/man/jrunscript.1 b/src/java.scripting/share/man/jrunscript.1
--- a/src/java.scripting/share/man/jrunscript.1
+++ b/src/java.scripting/share/man/jrunscript.1
@@ -1,16 +1,15 @@
-'\" t
-.\" Copyright (c) 2006, 2013, Oracle and/or its affiliates. All rights reserved.
+.\" Copyright (c) 1994, 2019, Oracle and/or its affiliates. All rights reserved.
 .\" DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 .\"
 .\" This code is free software; you can redistribute it and/or modify it
 .\" under the terms of the GNU General Public License version 2 only, as
 .\" published by the Free Software Foundation.
 .\"
 .\" This code is distributed in the hope that it will be useful, but WITHOUT
 .\" ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
-.\" FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+.\" FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 .\" version 2 for more details (a copy is included in the LICENSE file that
 .\" accompanied this code).
 .\"
 .\" You should have received a copy of the GNU General Public License version
 .\" 2 along with this work; if not, write to the Free Software Foundation,
@@ -18,178 +17,159 @@
 .\"
 .\" Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 .\" or visit www.oracle.com if you need additional information or have any
 .\" questions.
 .\"
-.\"     Arch: generic
-.\"     Software: JDK 8
-.\"     Date: 21 November 2013
-.\"     SectDesc: Scripting Tools
-.\"     Title: jrunscript.1
+.\" Automatically generated by Pandoc 2.3.1
 .\"
-.if n .pl 99999
-.TH jrunscript 1 "21 November 2013" "JDK 8" "Scripting Tools"
-.\" -----------------------------------------------------------------
-.\" * Define some portability stuff
-.\" -----------------------------------------------------------------
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.\" http://bugs.debian.org/507673
-.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
-.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-.ie \n(.g .ds Aq \(aq
-.el       .ds Aq '
-.\" -----------------------------------------------------------------
-.\" * set default formatting
-.\" -----------------------------------------------------------------
-.\" disable hyphenation
-.nh
-.\" disable justification (adjust text to left margin only)
-.ad l
-.\" -----------------------------------------------------------------
-.\" * MAIN CONTENT STARTS HERE *
-.\" -----------------------------------------------------------------
-
-.SH NAME    
-jrunscript \- Runs a command-line script shell that supports interactive and batch modes\&. This command is experimental and unsupported\&.
-.SH SYNOPSIS    
-.sp     
-.nf     
-
-\fBjrunscript\fR [\fIoptions\fR] [\fIarguments\fR]
-.fi     
-.sp     
-.TP     
-\fIoptions\fR
-The command-line options\&. See Options\&.
-.TP     
-\fIarguments\fR
-Arguments, when used, follow immediately after options or the command name\&. See Arguments\&.
-.SH DESCRIPTION    
-The \f3jrunscript\fR command is a language-independent command-line script shell\&. The \f3jrunscript\fR command supports both an interactive (read-eval-print) mode and a batch (\f3-f\fR option) mode of script execution\&. By default, JavaScript is the language used, but the \f3-l\fR option can be used to specify a different language\&. By using Java to scripting language communication, the \f3jrunscript\fR command supports an exploratory programming style\&.
-.SH OPTIONS    
+.TH "JRUNSCRIPT" "1" "2020" "JDK 14" "JDK Commands"
+.hy
+.SH NAME
+.PP
+jrunscript \- run a command\-line script shell that supports interactive
+and batch modes
+.SH SYNOPSIS
+.PP
+\f[B]Note:\f[R]
+.PP
+This tool is \f[B]experimental\f[R] and unsupported.
+.PP
+\f[CB]jrunscript\f[R] [\f[I]options\f[R]] [\f[I]arguments\f[R]]
 .TP
--classpath \fIpath\fR
-.br
-Indicate where any class files are that the script needs to access\&.
+.B \f[I]options\f[R]
+This represents the \f[CB]jrunscript\f[R] command\-line options that can
+be used.
+See \f[B]Options for the jrunscript Command\f[R].
+.RS
+.RE
 .TP
--cp \fIpath\fR
-.br
-Same as \f3-classpath\fR\f3path\fR\&.
+.B \f[I]arguments\f[R]
+Arguments, when used, follow immediately after options or the command
+name.
+See \f[B]Arguments\f[R].
+.RS
+.RE
+.SH DESCRIPTION
+.PP
+The \f[CB]jrunscript\f[R] command is a language\-independent command\-line
+script shell.
+The \f[CB]jrunscript\f[R] command supports both an interactive
+(read\-eval\-print) mode and a batch (\f[CB]\-f\f[R] option) mode of
+script execution.
+By default, JavaScript is the language used, but the \f[CB]\-l\f[R] option
+can be used to specify a different language.
+By using Java to scripting language communication, the
+\f[CB]jrunscript\f[R] command supports an exploratory programming style.
+.PP
+If JavaScript is used, then before it evaluates a user defined script,
+the \f[CB]jrunscript\f[R] command initializes certain built\-in functions
+and objects, which are documented in the API Specification for
+\f[CB]jrunscript\f[R] JavaScript built\-in functions.
+.SH OPTIONS FOR THE JRUNSCRIPT COMMAND
 .TP
--D\fIname\fR=\fIvalue\fR
-.br
-Sets a Java system property\&.
+.B \f[CB]\-cp\f[R] \f[I]path\f[R] or \f[CB]\-classpath\f[R] \f[I]path\f[R]
+Indicates where any class files are that the script needs to access.
+.RS
+.RE
 .TP
--J\fIflag\fR
-.br
-Passes \f3flag\fR directly to the Java Virtual Machine where the \f3jrunscript\fR command is running\&.
+.B \f[CB]\-D\f[R]\f[I]name\f[R]\f[CB]=\f[R]\f[I]value\f[R]
+Sets a Java system property.
+.RS
+.RE
 .TP
--I \fIlanguage\fR
-.br
-Uses the specified scripting language\&. By default, JavaScript is used\&. To use other scripting languages, you must specify the corresponding script engine\&'s JAR file with the \f3-cp\fR or \f3-classpath\fR option\&.
+.B \f[CB]\-J\f[R]\f[I]flag\f[R]
+Passes \f[I]flag\f[R] directly to the Java Virtual Machine where the
+\f[CB]jrunscript\f[R] command is running.
+.RS
+.RE
 .TP
--e \fIscript\fR
-.br
-Evaluates the specified script\&. This option can be used to run one-line scripts that are specified completely on the command line\&.
+.B \f[CB]\-l\f[R] \f[I]language\f[R]
+Uses the specified scripting language.
+By default, JavaScript is used.
+To use other scripting languages, you must specify the corresponding
+script engine\[aq]s JAR file with the \f[CB]\-cp\f[R] or
+\f[CB]\-classpath\f[R] option.
+.RS
+.RE
 .TP
--encoding \fIencoding\fR
-.br
-Specifies the character encoding used to read script files\&.
+.B \f[CB]\-e\f[R] \f[I]script\f[R]
+Evaluates the specified script.
+This option can be used to run one\-line scripts that are specified
+completely on the command line.
+.RS
+.RE
 .TP
--f \fIscript-file\fR
-.br
-Evaluates the specified script file (batch mode)\&.
+.B \f[CB]\-encoding\f[R] \f[I]encoding\f[R]
+Specifies the character encoding used to read script files.
+.RS
+.RE
 .TP
--f -
-.br
-Reads and evaluates a script from standard input (interactive mode)\&.
+.B \f[CB]\-f\f[R] \f[I]script\-file\f[R]
+Evaluates the specified script file (batch mode).
+.RS
+.RE
 .TP
--help
-.br
-Displays a help message and exits\&.
+.B \f[CB]\-f\ \-\f[R]
+Enters interactive mode to read and evaluate a script from standard
+input.
+.RS
+.RE
 .TP
--?
-.br
-Displays a help message and exits\&.
+.B \f[CB]\-help\f[R] or \f[CB]\-?\f[R]
+Displays a help message and exits.
+.RS
+.RE
 .TP
--q
-.br
-Lists all script engines available and exits\&.
-.SH ARGUMENTS    
-If arguments are present and if no \f3-e\fR or \f3-f\fR option is used, then the first argument is the script file and the rest of the arguments, if any, are passed to the script\&. If arguments and \f3-e\fR or the \f3-f\fR option are used, then all arguments are passed to the script\&. If arguments, \f3-e\fR and \f3-f\fR are missing, then interactive mode is used\&. Script arguments are available to a script in an engine variable named \f3arguments\fR of type \f3String\fR array\&.
-.SH EXAMPLES    
-.SS EXECUTE\ INLINE\ SCRIPTS    
-.sp     
-.nf     
-\f3jrunscript \-e "print(\&'hello world\&')"\fP
-.fi     
-.nf     
-\f3jrunscript \-e "cat(\&'http://www\&.example\&.com\&')"\fP
-.fi     
-.nf     
-\f3\fP
-.fi     
-.sp     
-.SS USE\ SPECIFIED\ LANGUAGE\ AND\ EVALUATE\ THE\ SCRIPT\ FILE    
-.sp     
-.nf     
-\f3jrunscript \-l js \-f test\&.js\fP
-.fi     
-.nf     
-\f3\fP
-.fi     
-.sp     
-.SS INTERACTIVE\ MODE    
-.sp     
-.nf     
-\f3jrunscript\fP
-.fi     
-.nf     
-\f3js> print(\&'Hello World\en\&');\fP
-.fi     
-.nf     
-\f3Hello World\fP
-.fi     
-.nf     
-\f3js> 34 + 55\fP
-.fi     
-.nf     
-\f389\&.0\fP
-.fi     
-.nf     
-\f3js> t = new java\&.lang\&.Thread(function() { print(\&'Hello World\en\&'); })\fP
-.fi     
-.nf     
-\f3Thread[Thread\-0,5,main]\fP
-.fi     
-.nf     
-\f3js> t\&.start()\fP
-.fi     
-.nf     
-\f3js> Hello World\fP
-.fi     
-.nf     
-\f3\fP
-.fi     
-.nf     
-\f3js>\fP
-.fi     
-.nf     
-\f3\fP
-.fi     
-.sp     
-.SS RUN\ SCRIPT\ FILE\ WITH\ SCRIPT\ ARGUMENTS    
-The test\&.js file is the script file\&. The \f3arg1\fR, \f3arg2\fR and \f3arg3\fR arguments are passed to the script\&. The script can access these arguments with an arguments array\&.
-.sp     
-.nf     
-\f3jrunscript test\&.js arg1 arg2 arg3\fP
-.fi     
-.nf     
-\f3\fP
-.fi     
-.sp     
-.SH SEE\ ALSO    
-If JavaScript is used, then before it evaluates a user defined script, the \f3jrunscript\fR command initializes certain built-in functions and objects\&. These JavaScript built-ins are documented in JsDoc-Toolkit at http://code\&.google\&.com/p/jsdoc-toolkit/
-.RE
-.br
-'pl 8.5i
-'bp
+.B \f[CB]\-q\f[R]
+Lists all script engines available and exits.
+.RS
+.RE
+.SH ARGUMENTS
+.PP
+If arguments are present and if no \f[CB]\-e\f[R] or \f[CB]\-f\f[R] option
+is used, then the first argument is the script file and the rest of the
+arguments, if any, are passed as script arguments.
+If arguments and the \f[CB]\-e\f[R] or the \f[CB]\-f\f[R] option are used,
+then all arguments are passed as script arguments.
+If arguments \f[CB]\-e\f[R] and \f[CB]\-f\f[R] are missing, then the
+interactive mode is used.
+.SH EXAMPLE OF EXECUTING INLINE SCRIPTS
+.RS
+.PP
+\f[CB]jrunscript\ \-e\ "print(\[aq]hello\ world\[aq])"\f[R]
+.RE
+.RS
+.PP
+\f[CB]jrunscript\ \-e\ "cat(\[aq]http://www.example.com\[aq])"\f[R]
+.RE
+.SH EXAMPLE OF USING SPECIFIED LANGUAGE AND EVALUATE THE SCRIPT FILE
+.RS
+.PP
+\f[CB]jrunscript\ \-l\ js\ \-f\ test.js\f[R]
+.RE
+.SH EXAMPLE OF INTERACTIVE MODE
+.IP
+.nf
+\f[CB]
+jrunscript
+js>\ print(\[aq]Hello\ World\\n\[aq]);
+Hello\ World
+js>\ 34\ +\ 55
+89.0
+js>\ t\ =\ new\ java.lang.Thread(function()\ {\ print(\[aq]Hello\ World\\n\[aq]);\ })
+Thread[Thread\-0,5,main]
+js>\ t.start()
+js>\ Hello\ World
+
+js>
+\f[R]
+.fi
+.SH RUN SCRIPT FILE WITH SCRIPT ARGUMENTS
+.PP
+In this example, the \f[CB]test.js\f[R] file is the script file.
+The \f[CB]arg1\f[R], \f[CB]arg2\f[R], and \f[CB]arg3\f[R] arguments are passed
+to the script.
+The script can access these arguments with an arguments array.
+.RS
+.PP
+\f[CB]jrunscript\ test.js\ arg1\ arg2\ arg3\f[R]
+.RE
