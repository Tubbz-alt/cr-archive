diff a/make/common/ZipArchive.gmk b/make/common/ZipArchive.gmk
--- a/make/common/ZipArchive.gmk
+++ b/make/common/ZipArchive.gmk
@@ -1,7 +1,7 @@
 #
-# Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+# Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
 # DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 #
 # This code is free software; you can redistribute it and/or modify it
 # under the terms of the GNU General Public License version 2 only, as
 # published by the Free Software Foundation.  Oracle designates this
@@ -46,27 +46,37 @@
 #                      and not directories.
 #   EXCLUDE_PATTERNS_$dir - Exclude patterns just like above but specific to one
 #                           src dir
 #   SUFFIXES
 #   EXTRA_DEPS
+#   FOLLOW_SYMLINKS - Set to explicitly follow symlinks. Affects performance of
+#                     finding files.
 #   ZIP_OPTIONS extra options to pass to zip
 SetupZipArchive = $(NamedParamsMacroTemplate)
 define SetupZipArchiveBody
 
+  # Create a version $1_SRC with a guaranteed trailing slash
+  $1_SRC_SLASH := $$(addsuffix /, $$(patsubst %/, %, $$($1_SRC)))
+
   # To avoid running find over too large sets of files, which causes make to crash
   # on some configurations (cygwin), use INCLUDES and INCLUDE_FILES to build a set
   # of directories to run find in, if available.
   ifneq ($$($1_INCLUDES)$$($1_INCLUDE_FILES),)
-    $1_FIND_LIST := $$(wildcard $$(foreach i,$$($1_SRC), \
-        $$(addprefix $$i/,$$($1_INCLUDES) $$($1_INCLUDE_FILES))))
+    $1_FIND_LIST := $$(wildcard $$(foreach s,$$($1_SRC_SLASH), \
+        $$(addprefix $$s,$$($1_INCLUDES) $$($1_INCLUDE_FILES))))
   else
-    $1_FIND_LIST := $$($1_SRC)
+    $1_FIND_LIST := $$($1_SRC_SLASH)
   endif
 
-  # Find all files in the source tree. Follow symlinks in this find since that is
-  # what zip does.
-  $1_ALL_SRCS := $$(call not-containing,_the.,$$(call CacheFind,$$($1_FIND_LIST), , -L))
+  # Find all files in the source tree.
+  # If asked to, follow symlinks in this find since that is what zip does. To do
+  # this, we need to call ShellFindFiles directly.
+  ifeq ($$($1_FOLLOW_SYMLINKS), true)
+    $1_ALL_SRCS := $$(call not-containing,_the.,$$(call ShellFindFiles,$$($1_FIND_LIST), , -L))
+  else
+    $1_ALL_SRCS := $$(call not-containing,_the.,$$(call FindFiles,$$($1_FIND_LIST)))
+  endif
 
   # Filter on suffixes if set
   ifneq ($$($1_SUFFIXES),)
     $1_ALL_SRCS := $$(filter $$(addprefix %, $$($1_SUFFIXES)), $$($1_ALL_SRCS))
   endif
@@ -87,28 +97,28 @@
   ifneq ($$($1_INCLUDE_FILES),)
     $1_ZIP_INCLUDES += $$(addprefix -i$(SPACE),$$($1_INCLUDE_FILES))
   endif
   ifneq ($$($1_EXCLUDES),)
     $1_ZIP_EXCLUDES := $$(addprefix -x$(SPACE)$(DQUOTE),$$(addsuffix /*$(DQUOTE),$$($1_EXCLUDES)))
-    $1_SRC_EXCLUDES := $$(foreach i,$$($1_SRC),$$(addprefix $$i/,$$(addsuffix /%,$$($1_EXCLUDES))))
+    $1_SRC_EXCLUDES := $$(foreach s,$$($1_SRC_SLASH),$$(addprefix $$s,$$(addsuffix /%,$$($1_EXCLUDES))))
     $1_ALL_SRCS := $$(filter-out $$($1_SRC_EXCLUDES),$$($1_ALL_SRCS))
   endif
   ifneq ($$($1_EXCLUDE_FILES),)
     $1_SRC_EXCLUDE_FILES := $$(addprefix %, $$($1_EXCLUDE_FILES)) $$($1_EXCLUDE_FILES)
     $1_ALL_SRCS := $$(filter-out $$($1_SRC_EXCLUDE_FILES), $$($1_ALL_SRCS))
-    $$(foreach s, $$($1_SRC), \
+    $$(foreach s, $$($1_SRC_SLASH), \
       $$(eval $1_ZIP_EXCLUDES_$$s += \
-          $$(addprefix -x$$(SPACE), $$(patsubst $$s/%,%, $$($1_EXCLUDE_FILES))) \
+          $$(addprefix -x$$(SPACE), $$(patsubst $$s%,%, $$($1_EXCLUDE_FILES))) \
       ) \
     )
   endif
   ifneq ($$($1_EXCLUDE_PATTERNS), )
     $1_ALL_SRCS := $$(filter-out $$($1_EXCLUDE_PATTERNS), $$($1_ALL_SRCS))
     $1_ZIP_EXCLUDES += $$(addprefix -x$(SPACE), $$(subst %,\*,$$($1_EXCLUDE_PATTERNS)))
   endif
   # Rewrite src dir specific exclude patterns to zip excludes
-  $$(foreach s, $$($1_SRC), \
+  $$(foreach s, $$($1_SRC_SLASH), \
     $$(if $$($1_EXCLUDE_PATTERNS_$$s), \
       $$(eval $1_ZIP_EXCLUDES_$$s += \
           $$(addprefix -x$$(SPACE), $$(subst %,\*,$$($1_EXCLUDE_PATTERNS_$$s))) \
       ) \
     ) \
@@ -125,11 +135,30 @@
   # If zip has nothing to do, it returns 12 and would fail the build. Check for 12
   # and only fail if it's not.
   $$($1_ZIP) : $$($1_ALL_SRCS) $$($1_EXTRA_DEPS)
 	$$(call LogWarn, Updating $$($1_NAME))
 	$$(call MakeTargetDir)
-	$$(foreach s,$$($1_SRC), $$(call ExecuteWithLog, \
+        # Find duplicate file names in the SRC and generate excludes for all
+        # instances that should not be included. Run this rather expensive
+        # calculation as part of the recipe to avoid running it when nothing
+        # needs to be rebuilt. The drawback is that we cannot exclude these
+        # files from the make prerequisites list, but the number of files is
+        # usually small so a very rare unnecessary rebuild is worth it.
+        # (The inner most foreach here is used instead of eval to declare a
+        # local variable.)
+	$$(foreach root, $$($1_SRC_SLASH), \
+	  $$(foreach file, $$(filter $$(root)%, $$($1_ALL_SRCS)), \
+	    $$(foreach relfile, $$(patsubst $$(root)%, %, $$(file)), \
+	      $$(if $$($1_relfiles_$$(call DoubleDollar, $$(relfile))), \
+	        $$(eval $1_ZIP_EXCLUDES_$$(root) += -x $$(relfile)) \
+	      , \
+	        $$(eval $1_relfiles_$$(call DoubleDollar, $$(relfile)) := 1) \
+	      ) \
+	    ) \
+	  ) \
+	)
+	$$(foreach s,$$($1_SRC_SLASH), $$(call ExecuteWithLog, \
 	    $$(SUPPORT_OUTPUTDIR)/zip/$$(patsubst $$(OUTPUTDIR)/%,%, $$@), \
 	    (cd $$s && $(ZIPEXE) -qru $$($1_ZIP_OPTIONS) $$@ . \
 	        $$($1_ZIP_INCLUDES) $$($1_ZIP_EXCLUDES) -x \*_the.\* \
 	        $$($1_ZIP_EXCLUDES_$$s) \
 	        || test "$$$$?" = "12" \
