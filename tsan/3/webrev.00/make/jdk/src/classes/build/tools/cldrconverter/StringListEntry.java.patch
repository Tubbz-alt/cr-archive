diff a/make/jdk/src/classes/build/tools/cldrconverter/StringListEntry.java b/make/jdk/src/classes/build/tools/cldrconverter/StringListEntry.java
--- a/make/jdk/src/classes/build/tools/cldrconverter/StringListEntry.java
+++ b/make/jdk/src/classes/build/tools/cldrconverter/StringListEntry.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -36,17 +36,26 @@
     StringListEntry(String qName, Container parent, String key) {
         super(qName, parent, key);
         value = new ArrayList<>();
     }
 
-    void addCharacters(int index, char[] characters, int start, int length) {
-        // fill with empty strings when the patterns start from index > 0
-        if (value.size() < index) {
-            IntStream.range(0, index).forEach(i -> value.add(i, ""));
-            value.add(index, new String(characters, start, length));
+    void addCharacters(int index, String count, char[] characters, int start, int length) {
+        int size = value.size();
+        String elem = count + ":" + new String(characters, start, length);
+
+        // quote embedded spaces, if any
+        elem = elem.replaceAll(" ", "' '");
+
+        if (size < index) {
+            // fill with empty strings when the patterns start from index > size
+            IntStream.range(size, index).forEach(i -> value.add(i, ""));
+            value.add(index, elem);
+        } else if (size == index) {
+            value.add(index, elem);
         } else {
-            value.add(index, new String(characters, start, length));
+            // concatenate the pattern with the delimiter ' '
+            value.set(index, value.get(index) + " " + elem);
         }
     }
 
     @Override
     List<String> getValue() {
