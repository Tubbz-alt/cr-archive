diff a/make/jdk/src/classes/build/tools/cldrconverter/LDMLParseHandler.java b/make/jdk/src/classes/build/tools/cldrconverter/LDMLParseHandler.java
--- a/make/jdk/src/classes/build/tools/cldrconverter/LDMLParseHandler.java
+++ b/make/jdk/src/classes/build/tools/cldrconverter/LDMLParseHandler.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -27,10 +27,11 @@
 
 import java.io.File;
 import java.io.IOException;
 import java.text.DateFormatSymbols;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -51,11 +52,10 @@
     private String zonePrefix;
     private final String id;
     private String currentContext = ""; // "format"/"stand-alone"
     private String currentWidth = ""; // "wide"/"narrow"/"abbreviated"
     private String currentStyle = ""; // short, long for decimalFormat
-    private String compactCount = ""; // one or other for decimalFormat
 
     LDMLParseHandler(String id) {
         this.id = id;
     }
 
@@ -506,11 +506,12 @@
         //
         case "decimalFormatLength":
             String type = attributes.getValue("type");
             if (null == type) {
                 // format data for decimal number format
-                pushStringEntry(qName, attributes, "NumberPatterns/decimal");
+                pushStringEntry(qName, attributes,
+                    currentNumberingSystem + "NumberPatterns/decimal");
                 currentStyle = type;
             } else {
                 switch (type) {
                     case "short":
                     case "long":
@@ -529,62 +530,81 @@
             if(currentStyle == null) {
                 pushContainer(qName, attributes);
             } else {
                 switch (currentStyle) {
                     case "short":
-                        pushStringListEntry(qName, attributes,
-                                currentStyle+".CompactNumberPatterns");
-                        break;
                     case "long":
                         pushStringListEntry(qName, attributes,
                                 currentStyle+".CompactNumberPatterns");
                         break;
                     default:
                         pushIgnoredContainer(qName);
                         break;
                 }
             }
             break;
+        case "currencyFormat":
+        case "percentFormat":
+            pushKeyContainer(qName, attributes, attributes.getValue("type"));
+            break;
+
         case "pattern":
             String containerName = currentContainer.getqName();
-            if (containerName.equals("decimalFormat")) {
-                if (currentStyle == null) {
-                    pushContainer(qName, attributes);
-                } else {
-                    // The compact number patterns parsing assumes that the order
-                    // of patterns are always in the increasing order of their
-                    // type attribute i.e. type = 1000...
-                    // Between the inflectional forms for a type (e.g.
-                    // count = "one" and count = "other" for type = 1000), it is
-                    // assumed that the count = "one" always appears before
-                    // count = "other"
-                    switch (currentStyle) {
-                        case "short":
-                        case "long":
-                            String count = attributes.getValue("count");
-                            // first pattern of count = "one" or count = "other"
-                            if ((count.equals("one") || count.equals("other"))
-                                    && compactCount.equals("")) {
-                                compactCount = count;
-                                pushStringListElement(qName, attributes,
-                                        (int) Math.log10(Double.parseDouble(attributes.getValue("type"))));
-                            } else if ((count.equals("one") || count.equals("other"))
-                                    && compactCount.equals(count)) {
-                                // extract patterns with similar "count"
-                                // attribute value
+            switch (containerName) {
+                case "currencyFormat":
+                case "percentFormat":
+                {
+                    // for FormatData
+                    // copy string for later assembly into NumberPatterns
+                    if (currentContainer instanceof KeyContainer) {
+                        String fStyle = ((KeyContainer)currentContainer).getKey();
+                        if (fStyle.equals("standard")) {
+                            pushStringEntry(qName, attributes,
+                                    currentNumberingSystem + "NumberPatterns/" + containerName.replaceFirst("Format", ""));
+                        } else if (fStyle.equals("accounting") && containerName.equals("currencyFormat")) {
+                            pushStringEntry(qName, attributes,
+                                    currentNumberingSystem + "NumberPatterns/accounting");
+                        } else {
+                            pushIgnoredContainer(qName);
+                        }
+                    } else {
+                        pushIgnoredContainer(qName);
+                    }
+                }
+                break;
+
+                case "decimalFormat":
+                    if (currentStyle == null) {
+                        pushContainer(qName, attributes);
+                    } else {
+                        switch (currentStyle) {
+                            case "short":
+                            case "long":
                                 pushStringListElement(qName, attributes,
-                                        (int) Math.log10(Double.parseDouble(attributes.getValue("type"))));
-                            } else {
+                                    (int) Math.log10(Double.parseDouble(attributes.getValue("type"))),
+                                    attributes.getValue("count"));
+                                break;
+                            default:
                                 pushIgnoredContainer(qName);
-                            }
-                            break;
-                        default:
-                            pushIgnoredContainer(qName);
-                            break;
+                                break;
+                        }
                     }
+                    break;
+                default:
+                    pushContainer(qName, attributes);
+                    break;
+            }
+            break;
+        case "currencyFormats":
+        case "decimalFormats":
+        case "percentFormats":
+            {
+                String script = attributes.getValue("numberSystem");
+                if (script != null) {
+                    addNumberingScript(script);
+                    currentNumberingSystem = script + ".";
                 }
-            } else {
                 pushContainer(qName, attributes);
             }
             break;
         case "currencyFormatLength":
             if (attributes.getValue("type") == null) {
@@ -593,28 +613,10 @@
                 pushContainer(qName, attributes);
             } else {
                 pushIgnoredContainer(qName);
             }
             break;
-        case "currencyFormat":
-            // for FormatData
-            // copy string for later assembly into NumberPatterns
-            if (attributes.getValue("type").equals("standard")) {
-            pushStringEntry(qName, attributes, "NumberPatterns/currency");
-            } else {
-                pushIgnoredContainer(qName);
-            }
-            break;
-        case "percentFormat":
-            // for FormatData
-            // copy string for later assembly into NumberPatterns
-            if (attributes.getValue("type").equals("standard")) {
-            pushStringEntry(qName, attributes, "NumberPatterns/percent");
-            } else {
-                pushIgnoredContainer(qName);
-            }
-            break;
         case "defaultNumberingSystem":
             // default numbering system if multiple numbering systems are used.
             pushStringEntry(qName, attributes, "DefaultNumberingSystem");
             break;
         case "symbols":
@@ -634,35 +636,23 @@
                 if (digits == null) {
                     pushIgnoredContainer(qName);
                     break;
                 }
 
-                @SuppressWarnings("unchecked")
-                List<String> numberingScripts = (List<String>) get("numberingScripts");
-                if (numberingScripts == null) {
-                    numberingScripts = new ArrayList<>();
-                    put("numberingScripts", numberingScripts);
-                }
-                numberingScripts.add(script);
+                addNumberingScript(script);
                 put(currentNumberingSystem + "NumberElements/zero", digits.substring(0, 1));
                 pushContainer(qName, attributes);
             }
             break;
         case "decimal":
-            // for FormatData
-            // copy string for later assembly into NumberElements
-            if (currentContainer.getqName().equals("symbols")) {
-                pushStringEntry(qName, attributes, currentNumberingSystem + "NumberElements/decimal");
-            } else {
-                pushIgnoredContainer(qName);
-            }
-            break;
         case "group":
+        case "currencyDecimal":
+        case "currencyGroup":
             // for FormatData
             // copy string for later assembly into NumberElements
             if (currentContainer.getqName().equals("symbols")) {
-                pushStringEntry(qName, attributes, currentNumberingSystem + "NumberElements/group");
+                pushStringEntry(qName, attributes, currentNumberingSystem + "NumberElements/" + qName);
             } else {
                 pushIgnoredContainer(qName);
             }
             break;
         case "list":
@@ -750,10 +740,12 @@
         // "alias" for root
         case "alias":
             {
                 if (id.equals("root") && !isIgnored(attributes)
                         && ((currentContainer.getqName().equals("decimalFormatLength"))
+                        || (currentContainer.getqName().equals("currencyFormat"))
+                        || (currentContainer.getqName().equals("percentFormat"))
                         || (currentCalendarType != null && !currentCalendarType.lname().startsWith("islamic-")))) { // ignore islamic variants
                     pushAliasEntry(qName, attributes, attributes.getValue("path"));
                 } else {
                     pushIgnoredContainer(qName);
                 }
@@ -905,10 +897,16 @@
         case "eras":
             break;
         case "decimalFormatLength": // used for compact number formatting patterns
             keyName = type + ".CompactNumberPatterns";
             break;
+        case "currencyFormat":
+        case "percentFormat":
+            keyName = currentNumberingSystem +
+                    "NumberPatterns/" +
+                    (type.equals("standard") ? containerqName.replaceFirst("Format", "") : type);
+            break;
         default:
             keyName = "";
             break;
         }
 
@@ -951,10 +949,26 @@
         if (start != -1) {
             String style = path.substring(start + typeKey.length(), path.indexOf("']", start));
             return toJDKKey(qName, "", style);
         }
 
+        // currencyFormat
+        typeKey = "currencyFormat[@type='";
+        start = path.indexOf(typeKey);
+        if (start != -1) {
+            String style = path.substring(start + typeKey.length(), path.indexOf("']", start));
+            return toJDKKey(qName, "", style);
+        }
+
+        // percentFormat
+        typeKey = "percentFormat[@type='";
+        start = path.indexOf(typeKey);
+        if (start != -1) {
+            String style = path.substring(start + typeKey.length(), path.indexOf("']", start));
+            return toJDKKey(qName, "", style);
+        }
+
         return calType + "." + toJDKKey(qName, context, width);
     }
 
     @Override
     public void endElement(String uri, String localName, String qName) throws SAXException {
@@ -965,13 +979,11 @@
             currentCalendarType = null;
             break;
 
         case "defaultNumberingSystem":
             if (currentContainer instanceof StringEntry) {
-                defaultNumberingSystem = ((StringEntry) currentContainer).getValue();
-                assert defaultNumberingSystem != null;
-                put(((StringEntry) currentContainer).getKey(), defaultNumberingSystem);
+                defaultNumberingSystem = (String) putIfEntry();
             } else {
                 defaultNumberingSystem = null;
             }
             break;
 
@@ -1010,27 +1022,40 @@
             currentContext = "";
             putIfEntry();
             break;
         case "decimalFormatLength":
             currentStyle = "";
-            compactCount = "";
+            putIfEntry();
+            break;
+        case "currencyFormats":
+        case "decimalFormats":
+        case "percentFormats":
+        case "symbols":
+            currentNumberingSystem = "";
             putIfEntry();
             break;
         default:
             putIfEntry();
         }
         currentContainer = currentContainer.getParent();
     }
 
-    private void putIfEntry() {
+    private Object putIfEntry() {
         if (currentContainer instanceof AliasEntry) {
             Entry<?> entry = (Entry<?>) currentContainer;
             String containerqName = entry.getParent().getqName();
             if (containerqName.equals("decimalFormatLength")) {
                 String srcKey = toJDKKey(containerqName, "", currentStyle);
                 String targetKey = getTarget(entry.getKey(), "", "", "");
                 CLDRConverter.aliases.put(srcKey, targetKey);
+            } else if (containerqName.equals("currencyFormat") ||
+                        containerqName.equals("percentFormat")) {
+                KeyContainer kc = (KeyContainer)entry.getParent();
+                CLDRConverter.aliases.put(
+                        toJDKKey(containerqName, "", kc.getKey()),
+                        getTarget(entry.getKey(), "", "", "")
+                );
             } else {
                 Set<String> keyNames = populateAliasKeys(containerqName, currentContext, currentWidth);
                 if (!keyNames.isEmpty()) {
                     for (String keyName : keyNames) {
                         String[] tmp = keyName.split(",", 3);
@@ -1057,13 +1082,14 @@
                 // Tweak for MonthNames for the root locale, Needed for
                 // SimpleDateFormat.format()/parse() roundtrip.
                 if (id.equals("root") && key.startsWith("MonthNames")) {
                     value = new DateFormatSymbols(Locale.US).getShortMonths();
                 }
-                put(entry.getKey(), value);
+                return put(entry.getKey(), value);
             }
         }
+        return null;
     }
 
     public String convertOldKeyName(String key) {
         // Explicitly obtained from "alias" attribute in each "key" element.
         switch (key) {
@@ -1079,6 +1105,18 @@
                 return "tz";
             default:
                 return key;
         }
     }
+
+    private void addNumberingScript(String script) {
+        @SuppressWarnings("unchecked")
+        List<String> numberingScripts = (List<String>) get("numberingScripts");
+        if (numberingScripts == null) {
+            numberingScripts = new ArrayList<>();
+            put("numberingScripts", numberingScripts);
+        }
+        if (!numberingScripts.contains(script)) {
+            numberingScripts.add(script);
+        }
+    }
 }
