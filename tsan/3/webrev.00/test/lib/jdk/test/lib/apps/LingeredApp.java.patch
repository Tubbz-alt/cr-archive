diff a/test/lib/jdk/test/lib/apps/LingeredApp.java b/test/lib/jdk/test/lib/apps/LingeredApp.java
--- a/test/lib/jdk/test/lib/apps/LingeredApp.java
+++ b/test/lib/jdk/test/lib/apps/LingeredApp.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -32,15 +32,17 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.nio.file.attribute.FileTime;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Date;
 import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
 import java.util.UUID;
+import jdk.test.lib.Utils;
 import jdk.test.lib.process.OutputBuffer;
 import jdk.test.lib.process.StreamPumper;
 
 /**
  * This is a framework to launch an app that could be synchronized with caller
@@ -279,11 +281,11 @@
 
     /**
      * Analyze an environment and prepare a command line to
      * run the app, app name should be added explicitly
      */
-    public List<String> runAppPrepare(List<String> vmArguments) {
+    public List<String> runAppPrepare(String[] vmArguments) {
         // We should always use testjava or throw an exception,
         // so we can't use JDKToolFinder.getJDKTool("java");
         // that falls back to compile java on error
         String jdkPath = System.getProperty("test.jdk");
         if (jdkPath == null) {
@@ -301,21 +303,16 @@
 
         List<String> cmd = new ArrayList<String>();
         cmd.add(javapath);
 
         if (vmArguments == null) {
-            // Propagate test.vm.options to LingeredApp, filter out possible empty options
-            String testVmOpts[] = System.getProperty("test.vm.opts","").split("\\s+");
-            for (String s : testVmOpts) {
-                if (!s.equals("")) {
-                    cmd.add(s);
-                }
-            }
+            // Propagate getTestJavaOpts() to LingeredApp
+            vmArguments = Utils.getTestJavaOpts();
         } else {
             // Lets user manage LingeredApp options
-            cmd.addAll(vmArguments);
         }
+        Collections.addAll(cmd, vmArguments);
 
         // Make sure we set correct classpath to run the app
         cmd.add("-cp");
         String classpath = System.getProperty("test.class.path");
         cmd.add((classpath == null) ? "." : classpath);
@@ -340,11 +337,11 @@
      * Run the app.
      *
      * @param vmArguments
      * @throws IOException
      */
-    public void runApp(List<String> vmArguments)
+    public void runApp(String[] vmArguments)
             throws IOException {
 
         List<String> cmd = runAppPrepare(vmArguments);
 
         cmd.add(this.getAppName());
@@ -358,17 +355,19 @@
 
         startOutputPumpers();
     }
 
     private void finishApp() {
-        OutputBuffer output = getOutput();
-        String msg =
-            " LingeredApp stdout: [" + output.getStdout() + "];\n" +
-            " LingeredApp stderr: [" + output.getStderr() + "]\n" +
-            " LingeredApp exitValue = " + appProcess.exitValue();
+        if (appProcess != null) {
+            OutputBuffer output = getOutput();
+            String msg =
+                    " LingeredApp stdout: [" + output.getStdout() + "];\n" +
+                    " LingeredApp stderr: [" + output.getStderr() + "]\n" +
+                    " LingeredApp exitValue = " + appProcess.exitValue();
 
-        System.err.println(msg);
+            System.err.println(msg);
+        }
     }
 
     /**
      * Delete lock file that signals app to terminate, then
      * wait until app is actually terminated.
@@ -378,66 +377,59 @@
         deleteLock();
         // The startApp() of the derived app can throw
         // an exception before the LA actually starts
         if (appProcess != null) {
             waitAppTerminate();
+
+            finishApp();
+
             int exitcode = appProcess.exitValue();
             if (exitcode != 0) {
                 throw new IOException("LingeredApp terminated with non-zero exit code " + exitcode);
             }
         }
-        finishApp();
     }
 
     /**
      *  High level interface for test writers
      */
     /**
-     * Factory method that creates LingeredApp object with ready to use application
+     * Factory method that starts pre-created LingeredApp
      * lock name is autogenerated
-     * @param cmd - vm options, could be null to auto add testvm.options
-     * @return LingeredApp object
+     * @param cmd - vm options, could be null to auto add Utils.getTestJavaOpts()
+     * @param theApp - app to start
      * @throws IOException
      */
-    public static LingeredApp startApp(List<String> cmd) throws IOException {
-        LingeredApp a = new LingeredApp();
-        a.createLock();
+    public static void startApp(LingeredApp theApp, String... cmd) throws IOException {
+        theApp.createLock();
         try {
-            a.runApp(cmd);
-            a.waitAppReady(appWaitTime);
+            theApp.runApp(cmd);
+            theApp.waitAppReady(appWaitTime);
         } catch (Exception ex) {
-            a.deleteLock();
-            System.err.println("LingeredApp failed to start: " + ex);
-            a.finishApp();
+            theApp.deleteLock();
             throw ex;
         }
-
-        return a;
     }
 
     /**
-     * Factory method that starts pre-created LingeredApp
+     * Factory method that creates LingeredApp object with ready to use application
      * lock name is autogenerated
-     * @param cmd - vm options, could be null to auto add testvm.options
-     * @param theApp - app to start
+     * @param cmd - vm options, could be null to auto add Utils.getTestJavaOpts()
      * @return LingeredApp object
      * @throws IOException
      */
-
-    public static void startApp(List<String> cmd, LingeredApp theApp) throws IOException {
-        theApp.createLock();
+    public static LingeredApp startApp(String... cmd) throws IOException {
+        LingeredApp a = new LingeredApp();
         try {
-            theApp.runApp(cmd);
-            theApp.waitAppReady(appWaitTime);
+            startApp(a, cmd);
         } catch (Exception ex) {
-            theApp.deleteLock();
+            System.err.println("LingeredApp failed to start: " + ex);
+            a.finishApp();
             throw ex;
         }
-    }
 
-    public static LingeredApp startApp() throws IOException {
-        return startApp(null);
+        return a;
     }
 
     public static void stopApp(LingeredApp app) throws IOException {
         if (app != null) {
             // LingeredApp can throw an exception during the intialization,
@@ -490,22 +482,26 @@
             System.err.println("Lock file name is not specified");
             System.exit(7);
         }
 
         String theLockFileName = args[0];
+        Path path = Paths.get(theLockFileName);
 
         try {
-            Path path = Paths.get(theLockFileName);
-
             while (Files.exists(path)) {
                 // Touch the lock to indicate our readiness
                 setLastModified(theLockFileName, epoch());
                 Thread.sleep(spinDelay);
             }
-        } catch (NoSuchFileException ex) {
+        } catch (IOException ex) {
             // Lock deleted while we are setting last modified time.
-            // Ignore error and lets the app exits
+            // Ignore the error and let the app exit.
+            if (Files.exists(path)) {
+                // If the lock file was not removed, return an error.
+                System.err.println("LingeredApp IOException: lock file still exists");
+                System.exit(4);
+            }
         } catch (Exception ex) {
             System.err.println("LingeredApp ERROR: " + ex);
             // Leave exit_code = 1 to Java launcher
             System.exit(3);
         }
