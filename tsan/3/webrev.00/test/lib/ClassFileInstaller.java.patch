diff a/test/lib/ClassFileInstaller.java b/test/lib/ClassFileInstaller.java
--- a/test/lib/ClassFileInstaller.java
+++ b/test/lib/ClassFileInstaller.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -30,10 +30,11 @@
 import java.io.ByteArrayInputStream;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.nio.file.StandardCopyOption;
+import java.util.ArrayList;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipOutputStream;
 
 /**
  * Dump a class file for a class on the class path in the current directory, or
@@ -82,21 +83,51 @@
             if (args.length < 2) {
                 throw new RuntimeException("Usage: ClassFileInstaller <options> <classes>\n" +
                                            "where possible options include:\n" +
                                            "  -jar <path>             Write to the JAR file <path>");
             }
-            writeJar(args[1], null, args, 2, args.length);
+            String jarFile = args[1];
+            String[] classes = addInnerClasses(args, 2);
+            writeJar_impl(jarFile, null, classes);
         } else {
             if (DEBUG) {
                 System.out.println("ClassFileInstaller: Writing to " + System.getProperty("user.dir"));
             }
-            for (String arg : args) {
-                writeClassToDisk(arg);
+            String[] classes = addInnerClasses(args, 0);
+            for (String cls : classes) {
+                writeClassToDisk(cls);
             }
         }
     }
 
+    // Add commonly used inner classes that are often omitted by mistake. Currently
+    // we support only sun.hotspot.WhiteBox$WhiteBoxPermission. See JDK-8199290
+    private static String[] addInnerClasses(String[] classes, int startIdx) {
+        boolean seenWB = false;
+        boolean seenWBInner = false;
+        final String wb = "sun.hotspot.WhiteBox";
+        final String wbInner = "sun.hotspot.WhiteBox$WhiteBoxPermission";
+
+        ArrayList<String> list = new ArrayList<>();
+
+        for (int i = startIdx; i < classes.length; i++) {
+            String cls = classes[i];
+            list.add(cls);
+            switch (cls) {
+            case wb:      seenWB      = true; break;
+            case wbInner: seenWBInner = true; break;
+            }
+        }
+        if (seenWB && !seenWBInner) {
+            list.add(wbInner);
+        }
+
+        String[] array = new String[list.size()];
+        list.toArray(array);
+        return array;
+    }
+
     public static class Manifest {
         private InputStream in;
 
         private Manifest(InputStream in) {
             this.in = in;
@@ -120,11 +151,11 @@
         public InputStream getInputStream() {
             return in;
         }
     }
 
-    private static void writeJar(String jarFile, Manifest manifest, String classes[], int from, int to) throws Exception {
+    private static void writeJar_impl(String jarFile, Manifest manifest, String classes[]) throws Exception {
         if (DEBUG) {
             System.out.println("ClassFileInstaller: Writing to " + getJarPath(jarFile));
         }
 
         (new File(jarFile)).delete();
@@ -135,12 +166,12 @@
         // constructor and JDK-5046178.
         if (manifest != null) {
             writeToDisk(zos, "META-INF/MANIFEST.MF", manifest.getInputStream());
         }
 
-        for (int i=from; i<to; i++) {
-            writeClassToDisk(zos, classes[i]);
+        for (String cls : classes) {
+            writeClassToDisk(zos, cls);
         }
 
         zos.close();
         fos.close();
     }
@@ -155,16 +186,18 @@
      *
      * @library testlibrary
      * @build ClassFileInstaller
      */
     public static String writeJar(String jarFile, String... classes) throws Exception {
-        writeJar(jarFile, null, classes, 0, classes.length);
+        classes = addInnerClasses(classes, 0);
+        writeJar_impl(jarFile, null, classes);
         return getJarPath(jarFile);
     }
 
     public static String writeJar(String jarFile, Manifest manifest, String... classes) throws Exception {
-        writeJar(jarFile, manifest, classes, 0, classes.length);
+        classes = addInnerClasses(classes, 0);
+        writeJar_impl(jarFile, manifest, classes);
         return getJarPath(jarFile);
     }
 
     /**
      * This returns the absolute path to the file specified in "@ClassFileInstaller -jar myjar.jar",
