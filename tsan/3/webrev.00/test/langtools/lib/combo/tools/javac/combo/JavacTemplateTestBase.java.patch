diff a/test/langtools/lib/combo/tools/javac/combo/JavacTemplateTestBase.java b/test/langtools/lib/combo/tools/javac/combo/JavacTemplateTestBase.java
--- a/test/langtools/lib/combo/tools/javac/combo/JavacTemplateTestBase.java
+++ b/test/langtools/lib/combo/tools/javac/combo/JavacTemplateTestBase.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -75,16 +75,13 @@
     private static final File root = new File("gen");
     private static final File nullDir = new File("empty");
 
     protected final Map<String, Template> templates = new HashMap<>();
     protected final Diagnostics diags = new Diagnostics();
-    protected final List<Pair<String, Template>> sourceFiles = new ArrayList<>();
+    protected final List<Pair<String, String>> sourceFiles = new ArrayList<>();
     protected final List<String> compileOptions = new ArrayList<>();
     protected final List<File> classpaths = new ArrayList<>();
-    protected final Template.Resolver defaultResolver = new MapResolver(templates);
-
-    private Template.Resolver currentResolver = defaultResolver;
 
     /** Add a template with a specified name */
     protected void addTemplate(String name, Template t) {
         templates.put(name, t);
     }
@@ -93,12 +90,12 @@
     protected void addTemplate(String name, String s) {
         templates.put(name, new StringTemplate(s));
     }
 
     /** Add a source file */
-    protected void addSourceFile(String name, Template t) {
-        sourceFiles.add(new Pair<>(name, t));
+    protected void addSourceFile(String name, String template) {
+        sourceFiles.add(new Pair<>(name, template));
     }
 
     /** Add a File to the class path to be used when loading classes; File values
      * will generally be the result of a previous call to {@link #compile()}.
      * This enables testing of separate compilation scenarios if the class path
@@ -147,11 +144,11 @@
             suiteErrors.addAll(diags.errorKeys());
 
             List<Object> list = new ArrayList<>();
             Collections.addAll(list, result.getParameters());
             list.add("Test case: " + getTestCaseDescription());
-            for (Pair<String, Template> e : sourceFiles)
+            for (Pair<String, String> e : sourceFiles)
                 list.add("Source file " + e.fst + ": " + e.snd);
             if (diags.errorsFound())
                 list.add("Compile diagnostics: " + diags.toString());
             result.setParameters(list.toArray(new Object[list.size()]));
         }
@@ -206,11 +203,11 @@
     /** Assert that a previous call to compile() failed with a specific error key */
     protected void assertCompileFailed(String key) {
         if (!diags.errorsFound())
             fail("Expected failed compilation: " + key);
         if (!diags.containsErrorKey(key))
-            fail("Expected compilation error " + key);
+            fail(String.format("Expected compilation error with %s, found %s", key, diags.keys()));
     }
 
     /** Assert that a previous call to compile() failed with a specific error key */
     protected void assertCompileFailedOneOf(String... keys) {
         if (!diags.errorsFound())
@@ -229,41 +226,31 @@
         for (String k : keys)
             if (!diags.containsErrorKey(k))
                 fail("Expected compilation error " + k);
     }
 
-    /** Convert an object, which may be a Template or a String, into a Template */
-    protected Template asTemplate(Object o) {
-        if (o instanceof Template)
-            return (Template) o;
-        else if (o instanceof String)
-            return new StringTemplate((String) o);
-        else
-            return new StringTemplate(o.toString());
-    }
-
     /** Compile all registered source files */
     protected void compile() throws IOException {
         compile(false);
     }
 
     /** Compile all registered source files, optionally generating class files
      * and returning a File describing the directory to which they were written */
     protected File compile(boolean generate) throws IOException {
         List<JavaFileObject> files = new ArrayList<>();
-        for (Pair<String, Template> e : sourceFiles)
-            files.add(new FileAdapter(e.fst, asTemplate(e.snd)));
+        for (Pair<String, String> e : sourceFiles)
+            files.add(new FileAdapter(e.fst, e.snd));
         return compile(classpaths, files, generate);
     }
 
     /** Compile all registered source files, using the provided list of class paths
      * for finding required classfiles, optionally generating class files
      * and returning a File describing the directory to which they were written */
     protected File compile(List<File> classpaths, boolean generate) throws IOException {
         List<JavaFileObject> files = new ArrayList<>();
-        for (Pair<String, Template> e : sourceFiles)
-            files.add(new FileAdapter(e.fst, asTemplate(e.snd)));
+        for (Pair<String, String> e : sourceFiles)
+            files.add(new FileAdapter(e.fst, e.snd));
         return compile(classpaths, files, generate);
     }
 
     private File compile(List<File> classpaths, List<JavaFileObject> files, boolean generate) throws IOException {
         JavaCompiler systemJavaCompiler = ToolProvider.getSystemJavaCompiler();
@@ -304,82 +291,31 @@
 
         public StringTemplate(String template) {
             this.template = template;
         }
 
-        public String expand(String selector) {
-            return Behavior.expandTemplate(template, currentResolver);
+        public String expand(String selectorIgnored) {
+            return Template.expandTemplate(template, templates);
         }
 
         public String toString() {
             return expand("");
         }
-
-        public StringTemplate with(final String key, final String value) {
-            return new StringTemplateWithResolver(template, new KeyResolver(key, value));
-        }
-
-    }
-
-    /** An implementation of Template which is backed by a String and which
-     * encapsulates a Resolver for resolving embedded tags. */
-    protected class StringTemplateWithResolver extends StringTemplate {
-        private final Resolver localResolver;
-
-        public StringTemplateWithResolver(String template, Resolver localResolver) {
-            super(template);
-            this.localResolver = localResolver;
-        }
-
-        @Override
-        public String expand(String selector) {
-            Resolver saved = currentResolver;
-            currentResolver = new ChainedResolver(currentResolver, localResolver);
-            try {
-                return super.expand(selector);
-            }
-            finally {
-                currentResolver = saved;
-            }
-        }
-
-        @Override
-        public StringTemplate with(String key, String value) {
-            return new StringTemplateWithResolver(template, new ChainedResolver(localResolver, new KeyResolver(key, value)));
-        }
-    }
-
-    /** A Resolver which uses a Map to resolve tags */
-    private class KeyResolver implements Template.Resolver {
-        private final String key;
-        private final String value;
-
-        public KeyResolver(String key, String value) {
-            this.key = key;
-            this.value = value;
-        }
-
-        @Override
-        public Template lookup(String k) {
-            return key.equals(k) ? new StringTemplate(value) : null;
-        }
     }
 
     private class FileAdapter extends SimpleJavaFileObject {
-        private final String filename;
-        private final Template template;
+        private final String templateString;
 
-        public FileAdapter(String filename, Template template) {
+        FileAdapter(String filename, String templateString) {
             super(URI.create("myfo:/" + filename), Kind.SOURCE);
-            this.template = template;
-            this.filename = filename;
+            this.templateString = templateString;
         }
 
         public CharSequence getCharContent(boolean ignoreEncodingErrors) {
             return toString();
         }
 
         public String toString() {
-            return Template.Behavior.expandTemplate(template.expand(filename), defaultResolver);
+            return Template.expandTemplate(templateString, templates);
         }
     }
 }
