diff a/test/langtools/tools/jdeps/modules/CheckModuleTest.java b/test/langtools/tools/jdeps/modules/CheckModuleTest.java
--- a/test/langtools/tools/jdeps/modules/CheckModuleTest.java
+++ b/test/langtools/tools/jdeps/modules/CheckModuleTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -84,11 +84,11 @@
         String cmd = String.format("jdeps --check %s --module-path %s%n", name, MODS_DIR);
         try (JdepsUtil.Command jdeps = JdepsUtil.newCommand(cmd)) {
             jdeps.appModulePath(MODS_DIR.toString());
 
             ModuleAnalyzer analyzer = jdeps.getModuleAnalyzer(Set.of(name));
-            assertTrue(analyzer.run());
+            assertTrue(analyzer.run(false));
             jdeps.dumpOutput(System.err);
 
             ModuleDescriptor[] descriptors = analyzer.descriptors(name);
             for (int i = 0; i < 3; i++) {
                 descriptors[i].requires().stream()
@@ -144,11 +144,11 @@
 
         try (JdepsUtil.Command jdeps = JdepsUtil.newCommand(cmd)) {
             jdeps.appModulePath(MODS_DIR.toString());
 
             ModuleAnalyzer analyzer = jdeps.getModuleAnalyzer(Set.of(name));
-            assertTrue(analyzer.run());
+            assertTrue(analyzer.run(false));
             jdeps.dumpOutput(System.err);
 
             // compare the module descriptors and the suggested versions
             ModuleDescriptor[] descriptors = analyzer.descriptors(name);
             for (int i = 0; i < 3; i++) {
