diff a/test/langtools/tools/javac/classreader/8171132/BadConstantValue.java b/test/langtools/tools/javac/classreader/8171132/BadConstantValue.java
--- a/test/langtools/tools/javac/classreader/8171132/BadConstantValue.java
+++ b/test/langtools/tools/javac/classreader/8171132/BadConstantValue.java
@@ -132,10 +132,12 @@
         // B is of type "type" and is initialized to that type's default value.
         File lib = writeFile(classesdir, "Lib.java", String.format(
                 "class Lib { static final int A = %s; static final %s B = %s; }",
                 value, type, (type.equals("boolean") ? "false" : "0")));
         compile("-d", classesdir.getPath(), lib.getPath());
+        // Lib.class may possibly not get a newer timestamp. Make sure .java file won't get used.
+        lib.delete();
         File libClass = new File(classesdir, "Lib.class");
         // Rewrite the class to only have field B of type "type" and with "value" (potentially
         // out of range).
         swapConstantValues(libClass);
     }
@@ -145,10 +147,12 @@
         // create a class file with field that has an invalid CONSTANT_String ConstantValue
         File lib = writeFile(classesdir, "Lib.java", String.format(
                 "class Lib { static final String A = \"hello\"; static final %s CONST = %s; }",
                 type, type.equals("boolean") ? "false" : "0"));
         compile("-d", classesdir.getPath(), lib.getPath());
+        // Lib.class may possibly not get a newer timestamp. Make sure .java file won't get used.
+        lib.delete();
         File libClass = new File(classesdir, "Lib.class");
         swapConstantValues(libClass);
 
         BadClassFile badClassFile = loadBadClass("Lib");
 
