diff a/test/langtools/tools/javac/modules/MOptionTest.java b/test/langtools/tools/javac/modules/MOptionTest.java
--- a/test/langtools/tools/javac/modules/MOptionTest.java
+++ b/test/langtools/tools/javac/modules/MOptionTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /**
  * @test
- * @bug 8146946 8176743
+ * @bug 8146946 8176743 8200286
  * @summary implement javac -m option
  * @library /tools/lib
  * @modules
  *      jdk.compiler/com.sun.tools.javac.api
  *      jdk.compiler/com.sun.tools.javac.main
@@ -37,11 +37,10 @@
 import java.nio.file.Path;
 import java.nio.file.attribute.FileTime;
 
 import toolbox.JavacTask;
 import toolbox.Task;
-import toolbox.ToolBox;
 
 public class MOptionTest extends ModuleTestBase {
     public static void main(String... args) throws Exception {
         new MOptionTest().runTests();
     }
@@ -91,13 +90,14 @@
 
         if (!testTestTimeStamp.equals(Files.getLastModifiedTime(testTestClass))) {
             throw new AssertionError("Classfile update!");
         }
 
-        Thread.sleep(2000); //timestamps
-
-        Files.setLastModifiedTime(testTest, FileTime.fromMillis(System.currentTimeMillis()));
+        // Date back the source file by one second compared to the current time.
+        // Cases have been observed where the resulting class file had an earlier
+        // timestamp than the java source.
+        Files.setLastModifiedTime(testTest, FileTime.fromMillis(System.currentTimeMillis() - 1000));
 
         new JavacTask(tb)
                 .options("-m", "m1x", "--module-source-path", src.toString(), "-d", build.toString())
                 .run(Task.Expect.SUCCESS)
                 .writeAll();
@@ -233,14 +233,15 @@
 
         if (!C2TimeStamp.equals(Files.getLastModifiedTime(classC2))) {
             throw new AssertionError("Classfile update!");
         }
 
-        Thread.sleep(2000); //timestamps
-
-        Files.setLastModifiedTime(C1Source, FileTime.fromMillis(System.currentTimeMillis()));
-        Files.setLastModifiedTime(C2Source, FileTime.fromMillis(System.currentTimeMillis()));
+        // Date back the source file by one second compared to the current time.
+        // Cases have been observed where the resulting class file had an earlier
+        // timestamp than the java source.
+        Files.setLastModifiedTime(C1Source, FileTime.fromMillis(System.currentTimeMillis() - 1000));
+        Files.setLastModifiedTime(C2Source, FileTime.fromMillis(System.currentTimeMillis() - 1000));
 
         new JavacTask(tb)
                 .options("-m", "m1x,m2x", "--module-source-path", src.toString(), "-d", build.toString())
                 .run(Task.Expect.SUCCESS)
                 .writeAll();
