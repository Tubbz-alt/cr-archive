diff a/test/langtools/tools/javac/switchexpr/ExpressionSwitch.java b/test/langtools/tools/javac/switchexpr/ExpressionSwitch.java
--- a/test/langtools/tools/javac/switchexpr/ExpressionSwitch.java
+++ b/test/langtools/tools/javac/switchexpr/ExpressionSwitch.java
@@ -1,12 +1,12 @@
 /*
  * @test /nodynamiccopyright/
- * @bug 8206986
+ * @bug 8206986 8222169 8224031
  * @summary Check expression switch works.
  * @compile/fail/ref=ExpressionSwitch-old.out -source 9 -Xlint:-options -XDrawDiagnostics ExpressionSwitch.java
- * @compile --enable-preview -source ${jdk.version} ExpressionSwitch.java
- * @run main/othervm --enable-preview ExpressionSwitch
+ * @compile ExpressionSwitch.java
+ * @run main ExpressionSwitch
  */
 
 import java.util.Objects;
 import java.util.function.Supplier;
 
@@ -25,29 +25,31 @@
         assertEquals(lambdas2(T.B).get(), "B");
         assertEquals(convert1("A"), 0);
         assertEquals(convert1("B"), 0);
         assertEquals(convert1("C"), 1);
         assertEquals(convert1(""), -1);
+        assertEquals(convert1(null), -2);
         assertEquals(convert2("A"), 0);
         assertEquals(convert2("B"), 0);
         assertEquals(convert2("C"), 1);
         assertEquals(convert2(""), -1);
         localClass(T.A);
+        assertEquals(castSwitchExpressions(T.A), "A");
     }
 
     private String print(T t) {
         return switch (t) {
             case A -> "A";
-            case B -> { break "B"; }
-            default -> { break "other"; }
+            case B -> { yield "B"; }
+            default -> { yield "other"; }
         };
     }
 
     private String exhaustive1(T t) {
         return switch (t) {
             case A -> "A";
-            case B -> { break "B"; }
+            case B -> { yield "B"; }
             case C -> "C";
             case D -> "D";
         };
     }
 
@@ -60,45 +62,47 @@
         };
     }
 
     private String scopesIsolated(T t) {
         return switch (t) {
-            case A -> { String res = "A"; break res;}
-            case B -> { String res = "B"; break res;}
-            default -> { String res = "default"; break res;}
+            case A -> { String res = "A"; yield res;}
+            case B -> { String res = "B"; yield res;}
+            default -> { String res = "default"; yield res;}
         };
     }
 
     private Supplier<String> lambdas1(T t) {
         return switch (t) {
             case A -> () -> "A";
-            case B -> { break () -> "B"; }
+            case B -> { yield () -> "B"; }
             default -> () -> "default";
         };
     }
 
     private Supplier<String> lambdas2(T t) {
         return switch (t) {
-            case A: break () -> "A";
-            case B: { break () -> "B"; }
-            default: break () -> "default";
+            case A: yield () -> "A";
+            case B: { yield () -> "B"; }
+            default: yield () -> "default";
         };
     }
 
     private int convert1(String s) {
-        return switch (s) {
-            case "A", "B" -> 0;
-            case "C" -> { break 1; }
-            default -> -1;
-        };
+        return s == null
+                ? -2
+                : switch (s) {
+                      case "A", "B" -> 0;
+                      case "C" -> { yield 1; }
+                      default -> -1;
+                  };
     }
 
     private int convert2(String s) {
         return switch (s) {
-            case "A", "B": break 0;
-            case "C": break 1;
-            default: break -1;
+            case "A", "B": yield 0;
+            case "C": yield 1;
+            default: yield -1;
         };
     }
 
     private void localClass(T t) {
         String good = "good";
@@ -106,20 +110,27 @@
             public String c() {
                 STOP: switch (t) {
                     default: break STOP;
                 }
                 return switch (t) {
-                    default: break good;
+                    default: yield good;
                 };
             }
         }
         String result = new L().c();
         if (!Objects.equals(result, good)) {
             throw new AssertionError("Unexpected result: " + result);
         }
     }
 
+    private String castSwitchExpressions(T t) {
+        return (String) switch (t) {
+            case A -> "A";
+            default -> 1;
+        };
+    }
+
     private void check(T t, String expected) {
         String result = print(t);
         assertEquals(result, expected);
     }
 
