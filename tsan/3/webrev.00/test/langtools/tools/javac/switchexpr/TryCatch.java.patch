diff a/test/langtools/tools/javac/switchexpr/TryCatch.java b/test/langtools/tools/javac/switchexpr/TryCatch.java
--- a/test/langtools/tools/javac/switchexpr/TryCatch.java
+++ b/test/langtools/tools/javac/switchexpr/TryCatch.java
@@ -23,12 +23,12 @@
 
 /**
  * @test
  * @bug 8214114
  * @summary Verify try-catch inside a switch expression works properly.
- * @compile --enable-preview -source ${jdk.version} TryCatch.java
- * @run main/othervm --enable-preview TryCatch
+ * @compile TryCatch.java
+ * @run main TryCatch
  */
 public class TryCatch {
     public static void main(String[] args) {
         {
             int val = 3;
@@ -36,38 +36,38 @@
                 int res = 1 + new TryCatch().id(switch(p) {
                     case 0 -> switch (p + 1) {
                         case 1:
                             try {
                                 new TryCatch().throwException();
-                                break -1;
+                                yield -1;
                             } catch(Throwable ex) {
-                                break val;
+                                yield val;
                             }
-                        default: break -1;
+                        default: yield -1;
                     };
                     case 1 -> {
                         try {
-                            break new TryCatch().id(switch (p + 1) {
+                            yield new TryCatch().id(switch (p + 1) {
                                 case 2:
                                     try {
                                         new TryCatch().throwException();
-                                        break -1;
+                                        yield -1;
                                     } catch(Throwable ex) {
                                         throw ex;
                                     }
-                                default: break -1;
+                                default: yield -1;
                             });
                         } catch(Throwable ex) {
-                            break val;
+                            yield val;
                         }
                     }
                     default -> {
                         try {
                             new TryCatch().throwException();
-                            break -1;
+                            yield -1;
                         } catch(Throwable ex) {
-                            break val;
+                            yield val;
                         }
                     }
                 } - 1);
                 if (res != 3) {
                     throw new AssertionError("Unexpected result: " + res);
@@ -81,38 +81,38 @@
                 int res = new TryCatch().id(val == 3 && switch(p) {
                     case 0 -> switch (p + 1) {
                         case 1:
                             try {
                                 new TryCatch().throwException();
-                                break false;
+                                yield false;
                             } catch(Throwable ex) {
-                                break true;
+                                yield true;
                             }
-                        default: break false;
+                        default: yield false;
                     };
                     case 1 -> {
                         try {
-                            break new TryCatch().id(switch (p + 1) {
+                            yield new TryCatch().id(switch (p + 1) {
                                 case 2:
                                     try {
                                         new TryCatch().throwException();
-                                        break false;
+                                        yield false;
                                     } catch(Throwable ex) {
                                         throw ex;
                                     }
-                                default: break false;
+                                default: yield false;
                             });
                         } catch(Throwable ex) {
-                            break true;
+                            yield true;
                         }
                     }
                     default -> {
                         try {
                             new TryCatch().throwException();
-                            break false;
+                            yield false;
                         } catch(Throwable ex) {
-                            break true;
+                            yield true;
                         }
                     }
                 } && (x = 1) == 1 && x == 1 ? val : -1);
                 if (res != 3) {
                     throw new AssertionError("Unexpected result: " + res);
@@ -125,38 +125,38 @@
                 int res = 1 + new TryCatch().id(switch(e) {
                     case A -> switch (e.next()) {
                         case B:
                             try {
                                 new TryCatch().throwException();
-                                break -1;
+                                yield -1;
                             } catch(Throwable ex) {
-                                break val;
+                                yield val;
                             }
-                        default: break -1;
+                        default: yield -1;
                     };
                     case B -> {
                         try {
-                            break new TryCatch().id(switch (e.next()) {
+                            yield new TryCatch().id(switch (e.next()) {
                                 case C:
                                     try {
                                         new TryCatch().throwException();
-                                        break -1;
+                                        yield -1;
                                     } catch(Throwable ex) {
                                         throw ex;
                                     }
-                                default: break -1;
+                                default: yield -1;
                             });
                         } catch(Throwable ex) {
-                            break val;
+                            yield val;
                         }
                     }
                     default -> {
                         try {
                             new TryCatch().throwException();
-                            break -1;
+                            yield -1;
                         } catch(Throwable ex) {
-                            break val;
+                            yield val;
                         }
                     }
                 } - 1);
                 if (res != 3) {
                     throw new AssertionError("Unexpected result: " + res);
@@ -170,38 +170,38 @@
                 int res = new TryCatch().id(val == 3 && switch(e) {
                     case A -> switch (e.next()) {
                         case B:
                             try {
                                 new TryCatch().throwException();
-                                break false;
+                                yield false;
                             } catch(Throwable ex) {
-                                break true;
+                                yield true;
                             }
-                        default: break false;
+                        default: yield false;
                     };
                     case B -> {
                         try {
-                            break new TryCatch().id(switch (e.next()) {
+                            yield new TryCatch().id(switch (e.next()) {
                                 case C:
                                     try {
                                         new TryCatch().throwException();
-                                        break false;
+                                        yield false;
                                     } catch(Throwable ex) {
                                         throw ex;
                                     }
-                                default: break false;
+                                default: yield false;
                             });
                         } catch(Throwable ex) {
-                            break true;
+                            yield true;
                         }
                     }
                     default -> {
                         try {
                             new TryCatch().throwException();
-                            break false;
+                            yield false;
                         } catch(Throwable ex) {
-                            break true;
+                            yield true;
                         }
                     }
                 } && (x = 1) == 1 && x == 1 ? val : -1);
                 if (res != 3) {
                     throw new AssertionError("Unexpected result: " + res);
@@ -214,38 +214,38 @@
                 int res = 1 + new TryCatch().id(switch(s) {
                     case "" -> switch (s + "c") {
                         case "c":
                             try {
                                 new TryCatch().throwException();
-                                break -1;
+                                yield -1;
                             } catch(Throwable ex) {
-                                break val;
+                                yield val;
                             }
-                        default: break -1;
+                        default: yield -1;
                     };
                     case "a" -> {
                         try {
-                            break new TryCatch().id(switch (s + "c") {
+                            yield new TryCatch().id(switch (s + "c") {
                                 case "ac":
                                     try {
                                         new TryCatch().throwException();
-                                        break -1;
+                                        yield -1;
                                     } catch(Throwable ex) {
                                         throw ex;
                                     }
-                                default: break -1;
+                                default: yield -1;
                             });
                         } catch(Throwable ex) {
-                            break val;
+                            yield val;
                         }
                     }
                     default -> {
                         try {
                             new TryCatch().throwException();
-                            break -1;
+                            yield -1;
                         } catch(Throwable ex) {
-                            break val;
+                            yield val;
                         }
                     }
                 } - 1);
                 if (res != 3) {
                     throw new AssertionError("Unexpected result: " + res);
@@ -259,38 +259,38 @@
                 int res = new TryCatch().id(val == 3 && switch(s) {
                     case "" -> switch (s + "c") {
                         case "c":
                             try {
                                 new TryCatch().throwException();
-                                break false;
+                                yield false;
                             } catch(Throwable ex) {
-                                break true;
+                                yield true;
                             }
-                        default: break false;
+                        default: yield false;
                     };
                     case "a" -> {
                         try {
-                            break new TryCatch().id(switch (s + "c") {
+                            yield new TryCatch().id(switch (s + "c") {
                                 case "ac":
                                     try {
                                         new TryCatch().throwException();
-                                        break false;
+                                        yield false;
                                     } catch(Throwable ex) {
                                         throw ex;
                                     }
-                                default: break false;
+                                default: yield false;
                             });
                         } catch(Throwable ex) {
-                            break true;
+                            yield true;
                         }
                     }
                     default -> {
                         try {
                             new TryCatch().throwException();
-                            break false;
+                            yield false;
                         } catch(Throwable ex) {
-                            break true;
+                            yield true;
                         }
                     }
                 } && (x = 1) == 1 && x == 1 ? val : -1);
                 if (res != 3) {
                     throw new AssertionError("Unexpected result: " + res);
@@ -328,79 +328,79 @@
         }
     }
 
     static class FieldHolder {
         private final int intTest = switch (0) {
-            case -1: break -1;
+            case -1: yield -1;
             default:
                 try {
-                    break new TryCatch().id(switch (2) {
+                    yield new TryCatch().id(switch (2) {
                         case 2:
                             try {
                                 new TryCatch().throwException();
-                                break -1;
+                                yield -1;
                             } catch(Throwable ex) {
                                 throw ex;
                             }
-                        default: break -1;
+                        default: yield -1;
                     });
                 } catch(Throwable ex) {
-                    break 3;
+                    yield 3;
                 }
         };
         private static final int intStaticTest = switch (0) {
-            case -1: break -1;
+            case -1: yield -1;
             default:
                 try {
-                    break new TryCatch().id(switch (2) {
+                    yield new TryCatch().id(switch (2) {
                         case 2:
                             try {
                                 new TryCatch().throwException();
-                                break -1;
+                                yield -1;
                             } catch(Throwable ex) {
                                 throw ex;
                             }
-                        default: break -1;
+                        default: yield -1;
                     });
                 } catch(Throwable ex) {
-                    break 3;
+                    yield 3;
                 }
         };
         private final boolean booleanTest = switch (0) {
-            case -1: break false;
+            case -1: yield false;
             default:
                 try {
-                    break new TryCatch().id(switch (2) {
+                    yield new TryCatch().id(switch (2) {
                         case 2:
                             try {
                                 new TryCatch().throwException();
-                                break false;
+                                yield false;
                             } catch(Throwable ex) {
                                 throw ex;
                             }
-                        default: break false;
+                        default: yield false;
                     });
                 } catch(Throwable ex) {
-                    break true;
+                    yield true;
                 }
         };
         private static final boolean booleanStaticTest = switch (0) {
-            case -1: break false;
+            case -1: yield false;
             default:
                 try {
-                    break new TryCatch().id(switch (2) {
+                    yield new TryCatch().id(switch (2) {
                         case 2:
                             try {
                                 new TryCatch().throwException();
-                                break false;
+                                yield false;
                             } catch(Throwable ex) {
                                 throw ex;
                             }
-                        default: break false;
+                        default: yield false;
                     });
                 } catch(Throwable ex) {
-                    break true;
+                    yield true;
                 }
         };
     }
 
     private int id(int i) {
