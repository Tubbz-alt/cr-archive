diff a/test/langtools/tools/javac/switchexpr/DefiniteAssignment2.java b/test/langtools/tools/javac/switchexpr/DefiniteAssignment2.java
--- a/test/langtools/tools/javac/switchexpr/DefiniteAssignment2.java
+++ b/test/langtools/tools/javac/switchexpr/DefiniteAssignment2.java
@@ -1,10 +1,10 @@
 /**
  * @test /nodynamiccopyright/
  * @bug 8214031
  * @summary Verify that definite assignment when true works (illegal code)
- * @compile/fail/ref=DefiniteAssignment2.out --enable-preview --source ${jdk.version} -XDrawDiagnostics DefiniteAssignment2.java
+ * @compile/fail/ref=DefiniteAssignment2.out -XDrawDiagnostics DefiniteAssignment2.java
  */
 public class DefiniteAssignment2 {
 
     public static void main(String[] args) {
         int a = 0;
@@ -13,71 +13,71 @@
 
         {
             int x;
 
             t = (b && switch(a) {
-                case 0: break (x = 1) == 1 || true;
-                default: break false;
+                case 0: yield (x = 1) == 1 || true;
+                default: yield false;
             }) || x == 1;
         }
 
         {
             int x;
 
             t = (switch(a) {
-                case 0: break (x = 1) == 1;
-                default: break false;
+                case 0: yield (x = 1) == 1;
+                default: yield false;
             }) || x == 1;
         }
 
         {
             int x;
 
             t = (switch(a) {
-                case 0: x = 1; break true;
-                case 1: break (x = 1) == 1;
-                default: break false;
+                case 0: x = 1; yield true;
+                case 1: yield (x = 1) == 1;
+                default: yield false;
             }) || x == 1;
         }
 
         {
             int x;
 
             t = (switch(a) {
-                case 0: break true;
-                case 1: break (x = 1) == 1;
-                default: break false;
+                case 0: yield true;
+                case 1: yield (x = 1) == 1;
+                default: yield false;
             }) && x == 1;
         }
 
         {
             int x;
 
             t = (switch(a) {
-                case 0: break false;
-                case 1: break isTrue() || (x = 1) == 1;
-                default: break false;
+                case 0: yield false;
+                case 1: yield isTrue() || (x = 1) == 1;
+                default: yield false;
             }) && x == 1;
         }
 
         {
             int x;
 
             t = (switch(a) {
-                case 0: break false;
-                case 1: break isTrue() ? true : (x = 1) == 1;
-                default: break false;
+                case 0: yield false;
+                case 1: yield isTrue() ? true : (x = 1) == 1;
+                default: yield false;
             }) && x == 1;
         }
 
         {
             final int x;
 
             t = (switch(a) {
-                case 0: break false;
-                case 1: break isTrue() ? true : (x = 1) == 1;
-                default: break false;
+                case 0: yield false;
+                case 1: yield isTrue() ? true : (x = 1) == 1;
+                default: yield false;
             }) && (x = 1) == 1;
         }
     }
 
     private static boolean isTrue() {
