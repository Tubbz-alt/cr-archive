diff a/test/langtools/tools/javac/switchexpr/BreakTest.java b/test/langtools/tools/javac/switchexpr/BreakTest.java
--- a/test/langtools/tools/javac/switchexpr/BreakTest.java
+++ b/test/langtools/tools/javac/switchexpr/BreakTest.java
@@ -52,11 +52,11 @@
             "        }" +
             "    }" +
             "    int t2(Integer i) {" +
             "        return switch (i) {" +
             "            case null: break LABEL;" +
-            "            default: break 2;" +
+            "            default: yield 2;" +
             "        }" +
             "    }" +
             "}";
 
     public static void main(String[] args) throws Exception {
@@ -65,11 +65,11 @@
         assert tool != null;
         DiagnosticListener<JavaFileObject> noErrors = d -> {};
 
         StringWriter out = new StringWriter();
         JavacTask ct = (JavacTask) tool.getTask(out, null, noErrors,
-            List.of("-XDdev", "--enable-preview", "-source", sourceVersion), null,
+            List.of("-XDdev"), null,
             Arrays.asList(new MyFileObject(CODE)));
         List<String> labels = new ArrayList<>();
         new TreePathScanner<Void, Void>() {
             @Override
             public Void visitBreak(BreakTree node, Void p) {
@@ -77,11 +77,11 @@
                 labels.add(label != null ? label.toString() : null);
                 return super.visitBreak(node, p);
             }
         }.scan(ct.parse(), null);
 
-        List<String> expected = Arrays.asList("LABEL", null, "LABEL", null);
+        List<String> expected = Arrays.asList("LABEL", null, "LABEL");
 
         if (!expected.equals(labels)) {
             throw new AssertionError("Unexpected labels found: " + labels);
         }
     }
