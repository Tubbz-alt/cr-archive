diff a/test/langtools/tools/javac/processing/model/element/repeatingAnnotations/UnofficialContainerBasicTest.java b/test/langtools/tools/javac/processing/model/element/repeatingAnnotations/UnofficialContainerBasicTest.java
--- a/test/langtools/tools/javac/processing/model/element/repeatingAnnotations/UnofficialContainerBasicTest.java
+++ b/test/langtools/tools/javac/processing/model/element/repeatingAnnotations/UnofficialContainerBasicTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -48,13 +48,13 @@
             "ExpectedBase",
             "ExpectedContainer"
         })
 @ExpectedContainer(
         value = UnofficialContainer.class,
-        getAnnotation = "@UnofficialContainer(value={@Foo(value=1), @Foo(value=2)})",
-        getAnnotationsByType = {"@UnofficialContainer(value={@Foo(value=1), @Foo(value=2)})"})
-@UnofficialContainer(value = {@Foo(value = 1), @Foo(value = 2)})
+        getAnnotation = "@UnofficialContainer({@Foo(1), @Foo(2)})",
+        getAnnotationsByType = {"@UnofficialContainer({@Foo(1), @Foo(2)})"})
+@UnofficialContainer({@Foo(1), @Foo(2)})
 class UnofficialContainerBasicTest {
 
     @ExpectedBase(
             value = Foo.class,
             getAnnotation = "null",
@@ -69,13 +69,13 @@
                 "ExpectedBase",
                 "ExpectedContainer"
             })
     @ExpectedContainer(
             value = UnofficialContainer.class,
-            getAnnotation = "@UnofficialContainer(value={@Foo(value=1), @Foo(value=2)})",
-            getAnnotationsByType = {"@UnofficialContainer(value={@Foo(value=1), @Foo(value=2)})"})
-    @UnofficialContainer(value = {@Foo(value = 1), @Foo(value = 2)})
+            getAnnotation = "@UnofficialContainer({@Foo(1), @Foo(2)})",
+            getAnnotationsByType = {"@UnofficialContainer({@Foo(1), @Foo(2)})"})
+    @UnofficialContainer({@Foo(1), @Foo(2)})
     int testField = 0;
 
     @ExpectedBase(
             value = Foo.class,
             getAnnotation = "null",
@@ -90,10 +90,10 @@
                 "ExpectedBase",
                 "ExpectedContainer"
             })
     @ExpectedContainer(
             value = UnofficialContainer.class,
-            getAnnotation = "@UnofficialContainer(value={@Foo(value=1), @Foo(value=2)})",
-            getAnnotationsByType = {"@UnofficialContainer(value={@Foo(value=1), @Foo(value=2)})"})
-    @UnofficialContainer(value = {@Foo(value = 1), @Foo(value = 2)})
+            getAnnotation = "@UnofficialContainer({@Foo(1), @Foo(2)})",
+            getAnnotationsByType = {"@UnofficialContainer({@Foo(1), @Foo(2)})"})
+    @UnofficialContainer({@Foo(1), @Foo(2)})
     void testMethod() {}
 }
