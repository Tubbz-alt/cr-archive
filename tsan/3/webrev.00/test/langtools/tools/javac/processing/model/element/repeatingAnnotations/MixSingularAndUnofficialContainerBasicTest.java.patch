diff a/test/langtools/tools/javac/processing/model/element/repeatingAnnotations/MixSingularAndUnofficialContainerBasicTest.java b/test/langtools/tools/javac/processing/model/element/repeatingAnnotations/MixSingularAndUnofficialContainerBasicTest.java
--- a/test/langtools/tools/javac/processing/model/element/repeatingAnnotations/MixSingularAndUnofficialContainerBasicTest.java
+++ b/test/langtools/tools/javac/processing/model/element/repeatingAnnotations/MixSingularAndUnofficialContainerBasicTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -34,12 +34,12 @@
  * @compile -processor ElementRepAnnoTester -proc:only MixSingularAndUnofficialContainerBasicTest.java
  */
 
 @ExpectedBase(
         value = Foo.class,
-        getAnnotation = "@Foo(value=0)",
-        getAnnotationsByType = {"@Foo(value=0)"},
+        getAnnotation = "@Foo(0)",
+        getAnnotationsByType = {"@Foo(0)"},
         getAllAnnotationMirrors = {
             "@Foo(0)",
             "@UnofficialContainer({@Foo(1), @Foo(2)})",
             "ExpectedBase",
             "ExpectedContainer"
@@ -51,21 +51,21 @@
             "ExpectedContainer"
         })
 @ExpectedContainer(
         value = UnofficialContainer.class,
         getAnnotation = "@UnofficialContainer("
-        + "value={@Foo(value=1), @Foo(value=2)})",
+        + "{@Foo(1), @Foo(2)})",
         getAnnotationsByType = {"@UnofficialContainer("
-                + "value={@Foo(value=1), @Foo(value=2)})"})
-@Foo(value = 0)
-@UnofficialContainer(value = {@Foo(value = 1), @Foo(value = 2)})
+                + "{@Foo(1), @Foo(2)})"})
+@Foo(0)
+@UnofficialContainer({@Foo(1), @Foo(2)})
 class MixSingularAndUnofficialContainerBasicTest {
 
     @ExpectedBase(
             value = Foo.class,
-            getAnnotation = "@Foo(value=0)",
-            getAnnotationsByType = {"@Foo(value=0)"},
+            getAnnotation = "@Foo(0)",
+            getAnnotationsByType = {"@Foo(0)"},
             getAllAnnotationMirrors = {
                 "@Foo(0)",
                 "@UnofficialContainer({@Foo(1), @Foo(2)})",
                 "ExpectedBase",
                 "ExpectedContainer"
@@ -77,21 +77,21 @@
                 "ExpectedContainer"
             })
     @ExpectedContainer(
             value = UnofficialContainer.class,
             getAnnotation = "@UnofficialContainer("
-            + "value={@Foo(value=1), @Foo(value=2)})",
+            + "{@Foo(1), @Foo(2)})",
             getAnnotationsByType = {"@UnofficialContainer("
-                    + "value={@Foo(value=1), @Foo(value=2)})"})
-    @Foo(value = 0)
-    @UnofficialContainer(value = {@Foo(value = 1), @Foo(value = 2)})
+                    + "{@Foo(1), @Foo(2)})"})
+    @Foo(0)
+    @UnofficialContainer({@Foo(1), @Foo(2)})
     int testField = 0;
 
     @ExpectedBase(
             value = Foo.class,
-            getAnnotation = "@Foo(value=0)",
-            getAnnotationsByType = {"@Foo(value=0)"},
+            getAnnotation = "@Foo(0)",
+            getAnnotationsByType = {"@Foo(0)"},
             getAllAnnotationMirrors = {
                 "@Foo(0)",
                 "@UnofficialContainer({@Foo(1), @Foo(2)})",
                 "ExpectedBase",
                 "ExpectedContainer"
@@ -103,12 +103,12 @@
                 "ExpectedContainer"
             })
     @ExpectedContainer(
             value = UnofficialContainer.class,
             getAnnotation = "@UnofficialContainer("
-            + "value={@Foo(value=1), @Foo(value=2)})",
+            + "{@Foo(1), @Foo(2)})",
             getAnnotationsByType = {"@UnofficialContainer("
-                    + "value={@Foo(value=1), @Foo(value=2)})"})
-    @Foo(value = 0)
-    @UnofficialContainer(value = {@Foo(value = 1), @Foo(value = 2)})
+                    + "{@Foo(1), @Foo(2)})"})
+    @Foo(0)
+    @UnofficialContainer({@Foo(1), @Foo(2)})
     void testMethod() {}
 }
