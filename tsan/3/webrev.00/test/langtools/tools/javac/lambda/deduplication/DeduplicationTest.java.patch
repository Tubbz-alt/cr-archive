diff a/test/langtools/tools/javac/lambda/deduplication/DeduplicationTest.java b/test/langtools/tools/javac/lambda/deduplication/DeduplicationTest.java
--- a/test/langtools/tools/javac/lambda/deduplication/DeduplicationTest.java
+++ b/test/langtools/tools/javac/lambda/deduplication/DeduplicationTest.java
@@ -82,20 +82,22 @@
         JavacFileManager fileManager = new JavacFileManager(new Context(), false, UTF_8);
         JavacTool javacTool = JavacTool.create();
         Listener diagnosticListener = new Listener();
         Path testSrc = Paths.get(System.getProperty("test.src"));
         Path file = testSrc.resolve("Deduplication.java");
+        String sourceVersion = Integer.toString(Runtime.version().feature());
         JavacTask task =
                 javacTool.getTask(
                         null,
                         null,
                         diagnosticListener,
                         Arrays.asList(
                                 "-d",
                                 ".",
                                 "-XDdebug.dumpLambdaToMethodDeduplication",
-                                "-XDdebug.dumpLambdaToMethodStats"),
+                                "-XDdebug.dumpLambdaToMethodStats",
+                                "--enable-preview", "-source", sourceVersion),
                         null,
                         fileManager.getJavaFileObjects(file));
         Map<JCLambda, JCLambda> dedupedLambdas = new LinkedHashMap<>();
         task.addTaskListener(new TreeDiffHashTaskListener(dedupedLambdas));
         Iterable<? extends JavaFileObject> generated = task.generate();
@@ -190,10 +192,13 @@
                 case "compiler.note.verbose.l2m.deduplicate":
                     deduped.put(
                             (JCLambda) d.getDiagnosticPosition().getTree(),
                             (MethodSymbol) d.getArgs()[0]);
                     break;
+                case "compiler.note.preview.filename":
+                case "compiler.note.preview.recompile":
+                    break; //ignore
                 default:
                     unexpected.add(diagnostic);
             }
         }
 
