diff a/test/langtools/tools/javac/lambda/bridge/template_tests/BridgeMethodTestCase.java b/test/langtools/tools/javac/lambda/bridge/template_tests/BridgeMethodTestCase.java
--- a/test/langtools/tools/javac/lambda/bridge/template_tests/BridgeMethodTestCase.java
+++ b/test/langtools/tools/javac/lambda/bridge/template_tests/BridgeMethodTestCase.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -109,15 +109,15 @@
 
     protected void compileSpec(String spec, boolean debug, String... errorKeys) throws IOException {
         ClassModel cm = new Parser(spec).parseClassModel();
         for (int i = 0; i <= cm.maxIndex() ; i++) {
             if (debug) System.out.println(indexClass(i));
-            addSourceFile(String.format("C%d.java", i), new StringTemplate(indexClass(i)));
+            addSourceFile(String.format("C%d.java", i), indexClass(i));
         }
         for (Map.Entry<String, ClassModel> e : classes(cm).entrySet()) {
             if (debug) System.out.println(e.getValue().toSource());
-            addSourceFile(e.getKey() + ".java", new StringTemplate(e.getValue().toSource()));
+            addSourceFile(e.getKey() + ".java", e.getValue().toSource());
         }
         compileDirs.add(compile(true));
         resetSourceFiles();
         if (errorKeys.length == 0)
             assertCompileSucceeded();
@@ -131,15 +131,15 @@
      */
     protected void recompileSpec(String spec, String... names) throws IOException {
         List<String> nameList = Arrays.asList(names);
         ClassModel cm = new Parser(spec).parseClassModel();
         for (int i = 0; i <= cm.maxIndex() ; i++) {
-            addSourceFile(String.format("C%d.java", i), new StringTemplate(indexClass(i)));
+            addSourceFile(String.format("C%d.java", i), indexClass(i));
         }
         for (Map.Entry<String, ClassModel> e : classes(cm).entrySet())
             if (nameList.contains(e.getKey()))
-                addSourceFile(e.getKey() + ".java", new StringTemplate(e.getValue().toSource()));
+                addSourceFile(e.getKey() + ".java", e.getValue().toSource());
         compileDirs.add(compile(Arrays.asList(classPaths()), true));
         resetSourceFiles();
         assertCompileSucceeded();
     }
 
