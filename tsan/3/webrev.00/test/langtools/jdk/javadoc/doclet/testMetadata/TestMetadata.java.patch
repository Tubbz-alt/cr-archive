diff a/test/langtools/jdk/javadoc/doclet/testMetadata/TestMetadata.java b/test/langtools/jdk/javadoc/doclet/testMetadata/TestMetadata.java
--- a/test/langtools/jdk/javadoc/doclet/testMetadata/TestMetadata.java
+++ b/test/langtools/jdk/javadoc/doclet/testMetadata/TestMetadata.java
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /*
  * @test
- * @bug 8218998 8219946
+ * @bug 8218998 8219946 8219060
  * @summary Add metadata to generated API documentation files
  * @library /tools/lib ../../lib
  * @modules jdk.javadoc/jdk.javadoc.internal.tool
  * @modules jdk.compiler/com.sun.tools.javac.api
  *          jdk.compiler/com.sun.tools.javac.main
@@ -55,31 +55,26 @@
     public static void main(String... args) throws Exception {
         TestMetadata tester = new TestMetadata();
         tester.runTests();
     }
 
-    enum Frames { NO_FRAMES, FRAMES };
     enum Index  { SINGLE, SPLIT };
     enum Source { PACKAGES, MODULES };
 
     final ToolBox tb = new ToolBox();
     final Set<String> allBodyClassesFound = new HashSet<>();
     final Set<String> allGeneratorsFound = new HashSet<>();
 
     public void runTests() throws Exception {
         for (Source s : Source.values()) {
             Path src = genSource(s);
-            for (Frames f : Frames.values()) {
                  for (Index i : Index.values()) {
                      List<String> args = new ArrayList<>();
                      args.add("-d");
-                     args.add(String.format("out-%s-%s-%s", s, f, i));
+                     args.add(String.format("out-%s-%s", s, i));
                      args.add("-use");
-                     if (s != Source.MODULES) {
-                         args.add("-linksource"); // broken, with modules: JDK-8219060
-                     }
-                     args.add(f == Frames.NO_FRAMES ? "--no-frames" : "--frames");
+                     args.add("-linksource");
                      if (i == Index.SPLIT) {
                          args.add("-splitIndex");
                      }
                      if (s == Source.PACKAGES) {
                          args.add("-sourcepath");
@@ -114,11 +109,10 @@
                              checkOutput("mA/pA/CA.html", true,
                                      "<meta name=\"description\" content=\"declaration: module: mA, package: pA, class: CA\">");
                              break;
                      }
                  }
-            }
         }
 
         checking ("all generators");
         if (allGeneratorsFound.equals(allGenerators)) {
             passed("all generators found");
@@ -128,11 +122,11 @@
             failed("not found: " + notFound);
         }
 
         checking ("all body classes");
         if (allBodyClassesFound.equals(allBodyClasses)) {
-            passed("all gbody classes found");
+            passed("all body classes found");
         } else {
             Set<String> notFound = new TreeSet<>(allBodyClasses);
             notFound.removeAll(allBodyClassesFound);
             failed("not found: " + notFound);
         }
@@ -141,36 +135,30 @@
     }
 
     final Pattern nl = Pattern.compile("[\\r\\n]+");
     final Pattern bodyPattern = Pattern.compile("<body [^>]*class=\"([^\"]+)\"");
     final Set<String> allBodyClasses = Set.of(
-        "all-classes-frame",
         "all-classes-index",
         "all-packages-index",
         "class-declaration",
         "class-use",
         "constants-summary",
         "deprecated-list",
         "doc-file",
-        "frames",
         "help",
         "index-redirect",
         "module-declaration",
-        "module-frame",
         "module-index",
-        "module-index-frame",
-        "module-package-index-frame",
         "package-declaration",
-        "package-frame",
         "package-index",
-        "package-index-frame",
         "package-tree",
         "package-use",
         "serialized-form",
         "single-index",
         "source",
         "split-index",
+        "system-properties",
         "tree"
     );
 
     void checkBodyClasses() throws IOException {
         Path outputDirPath = outputDir.toPath();
@@ -214,37 +202,31 @@
     }
 
     final Pattern contentPattern = Pattern.compile("content=\"([^\"]+)\">");
     final Pattern generatorPattern = Pattern.compile("content=\"javadoc/([^\"]+)\">");
     final Set<String> allGenerators = Set.of(
-            "AllClassesFrameWriter",
             "AllClassesIndexWriter",
             "AllPackagesIndexWriter",
             "AnnotationTypeWriterImpl",
             "ClassUseWriter",
             "ClassWriterImpl",
             "ConstantsSummaryWriterImpl",
             "DeprecatedListWriter",
             "DocFileWriter",
-            "FrameOutputWriter",
             "HelpWriter",
             "IndexRedirectWriter",
-            "ModuleFrameWriter",
-            "ModuleIndexFrameWriter",
             "ModuleIndexWriter",
-            "ModulePackageIndexFrameWriter",
             "ModuleWriterImpl",
-            "PackageFrameWriter",
-            "PackageIndexFrameWriter",
             "PackageIndexWriter",
             "PackageTreeWriter",
             "PackageUseWriter",
             "PackageWriterImpl",
             "SerializedFormWriterImpl",
             "SingleIndexWriter",
             "SourceToHTMLConverter",
             "SplitIndexWriter",
+            "SystemPropertiesWriter",
             "TreeWriter"
             );
 
     void checkMetadata() throws IOException {
         Path outputDirPath = outputDir.toPath();
@@ -321,20 +303,10 @@
             failed("Unrecognized line:\n" + description);
             return;
         }
 
         switch (generator) {
-            case "AllClassesFrameWriter":
-            case "FrameOutputWriter":
-            case "ModuleFrameWriter":
-            case "ModuleIndexFrameWriter":
-            case "ModulePackageIndexFrameWriter":
-            case "PackageFrameWriter":
-            case "PackageIndexFrameWriter":
-                check(generator, content, content.contains("frame"));
-                break;
-
             case "AllClassesIndexWriter":
             case "AllPackagesIndexWriter":
             case "ModuleIndexWriter":
             case "PackageIndexWriter":
                 check(generator, content, content.contains("index"));
@@ -389,10 +361,14 @@
 
             case "SourceToHTMLConverter":
                 check(generator, content, content.startsWith("source:"));
                 break;
 
+            case "SystemPropertiesWriter":
+                check(generator, content, content.contains("system properties"));
+                break;
+
             default:
                 failed("unexpected generator: " + generator);
                 break;
         }
     }
