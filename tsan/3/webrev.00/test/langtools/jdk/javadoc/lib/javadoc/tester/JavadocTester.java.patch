diff a/test/langtools/jdk/javadoc/lib/javadoc/tester/JavadocTester.java b/test/langtools/jdk/javadoc/lib/javadoc/tester/JavadocTester.java
--- a/test/langtools/jdk/javadoc/lib/javadoc/tester/JavadocTester.java
+++ b/test/langtools/jdk/javadoc/lib/javadoc/tester/JavadocTester.java
@@ -94,11 +94,11 @@
  *          MyTester tester = new MyTester();
  *          tester.runTests();
  *      }
  *
  *      // test methods...
- *      @Test
+ *      {@literal @}Test
  *      void test() {
  *          javadoc(<i>args</i>);
  *          checkExit(Exit.OK);
  *          checkOutput(<i>file</i>, true,
  *              <i>strings-to-find</i>);
@@ -132,20 +132,18 @@
  * annotation. However, you should <b>not</b> assume they will be called
  * in the order declared in your source file.  If the order of a series
  * of javadoc invocations is important, do that within a single method.
  * If the invocations are independent, for better clarity, use separate
  * test methods, each with their own set of checks on the results.
- *
- * @author Doug Kramer
- * @author Jamie Ho
- * @author Jonathan Gibbons (rewrite)
  */
 public abstract class JavadocTester {
 
     public static final String FS = System.getProperty("file.separator");
     public static final String PS = System.getProperty("path.separator");
     public static final String NL = System.getProperty("line.separator");
+    public static final String thisRelease = System.getProperty("java.specification.version");
+
     public static final Path currDir = Paths.get(".").toAbsolutePath().normalize();
 
     public enum Output {
         /** The name of the output stream from javadoc. */
         OUT,
@@ -770,11 +768,11 @@
 
     protected String readFile(String baseDir, String fileName) throws Error {
         return readFile(new File(baseDir), fileName);
     }
 
-    private String readFile(Path file) {
+    protected String readFile(Path file) {
         File baseDir;
         if (file.startsWith(outputDir.toPath())) {
             baseDir = outputDir;
         } else if (file.startsWith(currDir)) {
             baseDir = currDir.toFile();
