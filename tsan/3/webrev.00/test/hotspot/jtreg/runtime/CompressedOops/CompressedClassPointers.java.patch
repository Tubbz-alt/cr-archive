diff a/test/hotspot/jtreg/runtime/CompressedOops/CompressedClassPointers.java b/test/hotspot/jtreg/runtime/CompressedOops/CompressedClassPointers.java
--- a/test/hotspot/jtreg/runtime/CompressedOops/CompressedClassPointers.java
+++ b/test/hotspot/jtreg/runtime/CompressedOops/CompressedClassPointers.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,11 +23,11 @@
 
 /*
  * @test
  * @bug 8024927
  * @summary Testing address of compressed class pointer space as best as possible.
- * @requires vm.bits == 64 & vm.opt.final.UseCompressedOops == true
+ * @requires vm.bits == 64 & vm.opt.final.UseCompressedOops == true & os.family != "windows"
  * @library /test/lib
  * @modules java.base/jdk.internal.misc
  *          java.management
  * @run main CompressedClassPointers
  */
@@ -51,14 +51,14 @@
         OutputAnalyzer output = new OutputAnalyzer(pb.start());
         output.shouldContain("Narrow klass base: 0x0000000000000000");
         output.shouldHaveExitValue(0);
     }
 
-    public static void smallHeapTestWith3G() throws Exception {
+    public static void smallHeapTestWith1G() throws Exception {
         ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
             "-XX:+UnlockDiagnosticVMOptions",
-            "-XX:CompressedClassSpaceSize=3g",
+            "-XX:CompressedClassSpaceSize=1g",
             "-Xmx128m",
             "-Xlog:gc+metaspace=trace",
             "-Xshare:off",
             "-Xlog:cds=trace",
             "-XX:+VerifyBeforeGC", "-version");
@@ -68,10 +68,11 @@
     }
 
     public static void largeHeapTest() throws Exception {
         ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(
             "-XX:+UnlockDiagnosticVMOptions",
+            "-XX:+UnlockExperimentalVMOptions",
             "-Xmx30g",
             "-XX:-UseAOT", // AOT explicitly set klass shift to 3.
             "-Xlog:gc+metaspace=trace",
             "-Xshare:off",
             "-Xlog:cds=trace",
@@ -111,11 +112,11 @@
             "-XX:SharedArchiveFile=./CompressedClassPointers.jsa",
             "-Xmx128m",
             "-XX:SharedBaseAddress=8g",
             "-XX:+PrintCompressedOopsMode",
             "-XX:+VerifyBeforeGC",
-            "-Xshare:dump");
+            "-Xshare:dump", "-Xlog:cds");
         OutputAnalyzer output = new OutputAnalyzer(pb.start());
         if (output.firstMatch("Shared spaces are not supported in this VM") != null) {
             return;
         }
         try {
@@ -146,11 +147,11 @@
              if (name.equals("5.10")) {
                 throw new SkippedException("Solaris 10 can't mmap compressed oops space without a base");
              }
         }
         smallHeapTest();
-        smallHeapTestWith3G();
+        smallHeapTestWith1G();
         largeHeapTest();
         largePagesTest();
         heapBaseMinAddressTest();
         sharingTest();
     }
