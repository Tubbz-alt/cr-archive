diff a/test/hotspot/jtreg/runtime/NMT/SafepointPollingPages.java b/test/hotspot/jtreg/runtime/NMT/SafepointPollingPages.java
--- a/test/hotspot/jtreg/runtime/NMT/SafepointPollingPages.java
+++ b/test/hotspot/jtreg/runtime/NMT/SafepointPollingPages.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -28,12 +28,11 @@
  * @key nmt jcmd
  * @library /test/lib
  * @modules java.base/jdk.internal.misc
  *          java.management
  * @comment On ppc, with UseSIGTRAP on, no polling pages are used, but trap instructions instead.
- * @run main/othervm -XX:-UseSIGTRAP -XX:+IgnoreUnrecognizedVMOptions -Xbootclasspath/a:. -XX:NativeMemoryTracking=summary -XX:+ThreadLocalHandshakes SafepointPollingPages
- * @run main/othervm -XX:-UseSIGTRAP -XX:+IgnoreUnrecognizedVMOptions -Xbootclasspath/a:. -XX:NativeMemoryTracking=summary -XX:-ThreadLocalHandshakes SafepointPollingPages
+ * @run main/othervm -XX:-UseSIGTRAP -XX:+IgnoreUnrecognizedVMOptions -Xbootclasspath/a:. -XX:NativeMemoryTracking=summary SafepointPollingPages
  */
 
 import jdk.test.lib.process.ProcessTools;
 import jdk.test.lib.process.OutputAnalyzer;
 import jdk.test.lib.JDKToolFinder;
@@ -51,6 +50,5 @@
     pb.command(new String[] { JDKToolFinder.getJDKTool("jcmd"), pid, "VM.native_memory", "summary"});
     output = new OutputAnalyzer(pb.start());
     output.shouldContain("Safepoint (reserved=");
   }
 }
-
