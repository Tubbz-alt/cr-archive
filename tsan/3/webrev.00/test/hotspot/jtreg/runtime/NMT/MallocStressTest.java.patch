diff a/test/hotspot/jtreg/runtime/NMT/MallocStressTest.java b/test/hotspot/jtreg/runtime/NMT/MallocStressTest.java
--- a/test/hotspot/jtreg/runtime/NMT/MallocStressTest.java
+++ b/test/hotspot/jtreg/runtime/NMT/MallocStressTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -75,12 +75,12 @@
 
         // Grab my own PID
         String pid = Long.toString(ProcessTools.getProcessId());
         ProcessBuilder pb = new ProcessBuilder();
 
-        AllocThread[]   alloc_threads = new AllocThread[256];
-        ReleaseThread[] release_threads = new ReleaseThread[64];
+        AllocThread[]   alloc_threads = new AllocThread[40];
+        ReleaseThread[] release_threads = new ReleaseThread[10];
 
         int index;
         // Create many allocation threads
         for (index = 0; index < alloc_threads.length; index ++) {
             alloc_threads[index] = new AllocThread();
@@ -89,15 +89,10 @@
         // Fewer release threads
         for (index = 0; index < release_threads.length; index ++) {
             release_threads[index] = new ReleaseThread();
         }
 
-        if (is_64_bit_system()) {
-            sleep_wait(2*60*1000);
-        } else {
-            sleep_wait(60*1000);
-        }
         // pause the stress test
         phase = TestPhase.pause;
         while (pause_count.intValue() <  alloc_threads.length + release_threads.length) {
             sleep_wait(10);
         }
@@ -170,11 +165,12 @@
         }
 
         // AllocThread only runs "Alloc" phase
         public void run() {
             Random random = new Random();
-            while (MallocStressTest.phase == TestPhase.alloc) {
+            // MallocStressTest.phase == TestPhase.alloc
+            for (int loops = 0; loops < 100; loops++) {
                 int r = random.nextInt(Integer.MAX_VALUE);
                 // Only malloc small amount to avoid OOM
                 int size = r % 32;
                 if (is_64_bit_system()) {
                     r = r % 32 * K;
