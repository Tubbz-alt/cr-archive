diff a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/RelinquishCapabilities/relcaps002/relcaps002.cpp b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/RelinquishCapabilities/relcaps002/relcaps002.cpp
--- a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/RelinquishCapabilities/relcaps002/relcaps002.cpp
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/RelinquishCapabilities/relcaps002/relcaps002.cpp
@@ -122,24 +122,24 @@
     /* :16 */
 }
 
 #define CHECK_CAP(initCaps, caps, name)                                         \
     if (caps->name != 0) {                                                      \
-        success = NSK_FALSE;                                                    \
+        success = false;                                                        \
         NSK_COMPLAIN4("GetCapabilities() in %s returned capability after add and relinguish all potential capabilities:\n"  \
                       "#   capability: %s\n"                                    \
                       "#   got value:  %d\n"                                    \
                       "#   expected:   %d\n",                                   \
                         where, #name, (int)caps->name, 0)       ;               \
     }
 
 /**
  * Check value of known capabilities.
- * @returns NSK_FALSE if any error occured.
+ * @returns false if any error occured.
  */
-static int checkCapabilitiesValue(jvmtiCapabilities* caps, jvmtiCapabilities* initCaps, const char where[]) {
-    int success = NSK_TRUE;
+static bool checkCapabilitiesValue(jvmtiCapabilities* caps, jvmtiCapabilities* initCaps, const char where[]) {
+    bool success = true;
 
     CHECK_CAP(initCaps, caps, can_tag_objects);
     CHECK_CAP(initCaps, caps, can_generate_field_modification_events);
     CHECK_CAP(initCaps, caps, can_generate_field_access_events);
     CHECK_CAP(initCaps, caps, can_get_bytecodes);
@@ -182,21 +182,21 @@
     return success;
 }
 
 /**
  * Get and check current capabilities.
- * @returns NSK_FALSE if any error occured.
+ * @returns false if any error occured.
  */
-static int checkCapabilities(jvmtiEnv* jvmti, jvmtiCapabilities* initCaps, const char where[]) {
-    int success = NSK_TRUE;
+static bool checkCapabilities(jvmtiEnv* jvmti, jvmtiCapabilities* initCaps, const char where[]) {
+    bool success = true;
     jvmtiCapabilities caps;
 
     memset(&caps, 0, sizeof(jvmtiCapabilities));
 
     NSK_DISPLAY0("GetCapabilities() for current JVMTI env\n");
     if (!NSK_JVMTI_VERIFY(jvmti->GetCapabilities(&caps))) {
-        return NSK_FALSE;
+        return false;
     }
 
     NSK_DISPLAY0("Got raw capabilities:\n");
     printRawCapabilities(&caps);
 
@@ -210,53 +210,53 @@
     return success;
 }
 
 /**
  * Add given capabilities list.
- * @returns NSK_FALSE if any error occured.
+ * @returns false if any error occured.
  */
-static int addCapabilities(jvmtiEnv* jvmti, jvmtiCapabilities* caps) {
+static bool addCapabilities(jvmtiEnv* jvmti, jvmtiCapabilities* caps) {
     NSK_DISPLAY0("AddCapabilities() for current JVMTI env\n");
     if (!NSK_JVMTI_VERIFY(jvmti->AddCapabilities(caps))) {
-        return NSK_FALSE;
+        return false;
     }
     NSK_DISPLAY0("  ... set\n");
 
-    return NSK_TRUE;
+    return true;
 }
 
 /**
  * Remove given capabilities list.
- * @returns NSK_FALSE if any error occured.
+ * @returns false if any error occured.
  */
-static int removeCapabilities(jvmtiEnv* jvmti, jvmtiCapabilities* caps, const char where[]) {
+static bool removeCapabilities(jvmtiEnv* jvmti, jvmtiCapabilities* caps, const char where[]) {
     NSK_DISPLAY0("RelinquishCapabilities() for current JVMTI env\n");
     if (!NSK_JVMTI_VERIFY(jvmti->RelinquishCapabilities(caps))) {
-        return NSK_FALSE;
+        return false;
     }
     NSK_DISPLAY0("  ... relinguished\n");
 
-    return NSK_TRUE;
+    return true;
 }
 
 /**
  * Get potential capabilities to the given list.
- * @returns NSK_FALSE if any error occured.
+ * @returns false if any error occured.
  */
-static int getPotentialCapabilities(jvmtiEnv* jvmti, jvmtiCapabilities* caps) {
+static bool getPotentialCapabilities(jvmtiEnv* jvmti, jvmtiCapabilities* caps) {
     NSK_DISPLAY0("GetPotentialCapabilities() for current JVMTI env\n");
     if (!NSK_JVMTI_VERIFY(jvmti->GetPotentialCapabilities(caps))) {
-        return NSK_FALSE;
+        return false;
     }
 
     NSK_DISPLAY0("Got raw capabilities:\n");
     printRawCapabilities(caps);
 
     NSK_DISPLAY0("Known capabilities:\n");
     printKnownCapabilities(caps);
 
-    return NSK_TRUE;
+    return true;
 }
 
 /* ============================================================================= */
 
 /** Agent algorithm. */
@@ -293,23 +293,23 @@
 /**
  * Callback for VM_DEATH event.
  */
 JNIEXPORT void JNICALL
 callbackVMDeath(jvmtiEnv* jvmti, JNIEnv* jni) {
-    int success = NSK_TRUE;
+    bool success = true;
 
     NSK_DISPLAY0(">>> Testcase #4: Check capabilities in VM_DEATH callback\n");
     success = checkCapabilities(jvmti, &initCaps, "VM_DEATH callback");
 
     NSK_DISPLAY1("Disable events: %d events\n", EVENTS_COUNT);
     if (!nsk_jvmti_enableEvents(JVMTI_DISABLE, EVENTS_COUNT, events, NULL)) {
-        success = NSK_FALSE;
+        success = false;
     } else {
         NSK_DISPLAY0("  ... disabled\n");
     }
 
-    if (success != NSK_TRUE) {
+    if (success != true) {
         NSK_DISPLAY1("Exit with FAIL exit status: %d\n", STATUS_FAIL);
         NSK_BEFORE_TRACE(exit(STATUS_FAIL));
     }
 }
 
