diff a/test/hotspot/jtreg/vmTestbase/nsk/jdi/EventRequestManager/createStepRequest/crstepreq007.java b/test/hotspot/jtreg/vmTestbase/nsk/jdi/EventRequestManager/createStepRequest/crstepreq007.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/jdi/EventRequestManager/createStepRequest/crstepreq007.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jdi/EventRequestManager/createStepRequest/crstepreq007.java
@@ -215,11 +215,11 @@
                 complain("\texpected value : " + lineForBreak + "; got one : " + lineOfEvent);
                 break;
             }
 
             display("Getting mirror of thread: " + threadName);
-            ThreadReference thread = threadByName(threadName);
+            ThreadReference thread = debuggee.threadByNameOrThrow(threadName);
 
             display("Getting ReferenceType of thread: " + threadName);
             ReferenceType debuggeeThread = debuggee.classByName(debuggeeThreadName);
 
             // set second breakpoint to suspend checked thread at the right location before
@@ -439,23 +439,10 @@
         } catch (Exception e) {
             throw new Failure("getEventSet(): Unexpected exception while waiting for an event: " + e);
         }
     }
 
-
-    private ThreadReference threadByName(String name) throws Failure{
-        List all = vm.allThreads();
-        ListIterator li = all.listIterator();
-
-        while (li.hasNext()) {
-            ThreadReference thread = (ThreadReference) li.next();
-            if (thread.name().equals(name))
-                return thread;
-        }
-        throw new Failure("Thread with searching for name is not found: " + name);
-    }
-
     private ReferenceType waitForDebuggeeClassPrepared () {
         display("Creating request for ClassPrepareEvent for debuggee.");
         ClassPrepareRequest cpRequest = eventRManager.createClassPrepareRequest();
         cpRequest.addClassFilter(debuggeeName);
         cpRequest.addCountFilter(1);
