diff a/test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/jvmti_tools.cpp b/test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/jvmti_tools.cpp
--- a/test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/jvmti_tools.cpp
+++ b/test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/jvmti_tools.cpp
@@ -521,33 +521,33 @@
 }
 
 JNIEXPORT jboolean JNICALL
 Java_nsk_share_jvmti_RedefineAgent_redefineAttempted(JNIEnv *jni,  jobject obj) {
 
-    if (redefineAttempted == NSK_TRUE) {
+    if (redefineAttempted) {
         return JNI_TRUE;
     }else {
         return JNI_FALSE;
     }
 }
 
 
 JNIEXPORT jboolean JNICALL
 Java_nsk_share_jvmti_RedefineAgent_isRedefined(JNIEnv * jni,  jobject obj) {
 
-    if (redefineSucceed == NSK_TRUE) {
+    if (redefineSucceed) {
         return JNI_TRUE;
     }else {
         return JNI_FALSE;
     }
 }
 /**
  * This jni method is a Java wrapper for agent status.
  */
 JNIEXPORT jboolean JNICALL
 Java_nsk_share_jvmti_RedefineAgent_agentStatus(JNIEnv * jni,  jobject obj) {
-    if (agentFailed == NSK_TRUE) {
+    if (agentFailed) {
         return JNI_FALSE;
     } else {
         return JNI_TRUE;
     }
 }
@@ -582,20 +582,31 @@
 }
 
 int isThreadExpected(jvmtiEnv *jvmti, jthread thread) {
     static const char *vm_jfr_buffer_thread_name = "VM JFR Buffer Thread";
     static const char *jfr_request_timer_thread_name = "JFR request timer";
+    static const char *graal_management_bean_registration_thread_name =
+                                            "HotSpotGraalManagement Bean Registration";
+    static const char *graal_compiler_thread_name_prefix = "JVMCI CompilerThread";
+    static const size_t prefixLength = strlen(graal_compiler_thread_name_prefix);
 
     jvmtiThreadInfo threadinfo;
     NSK_JVMTI_VERIFY(jvmti->GetThreadInfo(thread, &threadinfo));
 
     if (strcmp(threadinfo.name, vm_jfr_buffer_thread_name) == 0)
         return 0;
 
     if (strcmp(threadinfo.name, jfr_request_timer_thread_name) == 0)
         return 0;
 
+    if (strcmp(threadinfo.name, graal_management_bean_registration_thread_name) == 0)
+        return 0;
+
+    if ((strlen(threadinfo.name) > prefixLength) &&
+         strncmp(threadinfo.name, graal_compiler_thread_name_prefix, prefixLength) == 0)
+        return 0;
+
     return 1;
 }
 
 #define SLEEP_DELAY 10L
 
