diff a/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/redefineClasses/redefineclasses001.java b/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/redefineClasses/redefineclasses001.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/redefineClasses/redefineclasses001.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jdi/VirtualMachine/redefineClasses/redefineclasses001.java
@@ -162,16 +162,10 @@
     static ReferenceType       debuggeeClass = null;
 
     static int  testExitCode = PASSED;
 
 
-    class JDITestRuntimeException extends RuntimeException {
-        JDITestRuntimeException(String str) {
-            super("JDITestRuntimeException : " + str);
-        }
-    }
-    //------------------------------------------------------ methods
 
     private int runThis (String argv[], PrintStream out) {
 
         argsHandler     = new ArgumentHandler(argv);
         logHandler      = new Log(out, argsHandler);
@@ -316,11 +310,11 @@
 
         String bPointMethod = "methodForCommunication";
         String lineForComm  = "lineForComm";
         BreakpointRequest bpRequest;
 
-        bpRequest = settingBreakpoint(threadByName("main"),
+        bpRequest = settingBreakpoint(debuggee.threadByNameOrThrow("main"),
                                       debuggeeClass,
                                       bPointMethod, lineForComm, "zero");
         bpRequest.enable();
 
     //------------------------------------------------------  testing section
@@ -357,11 +351,11 @@
 
             switch (i) {
               case 0:
                   List          classes = vm.classesByName(bpClassName);
                   bpClass = (ReferenceType) classes.get(0);
-                  bpRequest2 = settingBreakpoint(threadByName("main"),
+                  bpRequest2 = settingBreakpoint(debuggee.threadByNameOrThrow("main"),
                                           bpClass,
                                           bpMethodName, bpLineName, "one");
                   bpRequest2.enable();
 
                   vm.resume();
@@ -382,11 +376,11 @@
                   }
                   break;
 
               case 1:
 
-                  bpRequest3 = settingBreakpoint(threadByName("main"),
+                  bpRequest3 = settingBreakpoint(debuggee.threadByNameOrThrow("main"),
                                           bpClass,
                                           bpMethodName, bpLineName, "one");
 
                   bpRequest3.enable();
 
@@ -414,24 +408,10 @@
         vm.resume();
         log1("    TESTING ENDS");
         return;
     }
 
-    private ThreadReference threadByName(String name)
-                 throws JDITestRuntimeException {
-
-        List         all = vm.allThreads();
-        ListIterator li  = all.listIterator();
-
-        for (; li.hasNext(); ) {
-            ThreadReference thread = (ThreadReference) li.next();
-            if (thread.name().equals(name))
-                return thread;
-        }
-        throw new JDITestRuntimeException("** Thread IS NOT found ** : " + name);
-    }
-
    /*
     * private BreakpointRequest settingBreakpoint(ThreadReference, ReferenceType,
     *                                             String, String, String)
     *
     * It sets up a breakpoint at given line number within a given method in a given class
