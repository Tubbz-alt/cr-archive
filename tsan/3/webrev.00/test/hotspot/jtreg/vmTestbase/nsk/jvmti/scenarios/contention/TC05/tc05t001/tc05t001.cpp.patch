diff a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/scenarios/contention/TC05/tc05t001/tc05t001.cpp b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/scenarios/contention/TC05/tc05t001/tc05t001.cpp
--- a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/scenarios/contention/TC05/tc05t001/tc05t001.cpp
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/scenarios/contention/TC05/tc05t001/tc05t001.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -37,11 +37,15 @@
  * Please, do not increase it anymore if the test still fails with the message:
  *  "(waitedTime - waitTime) >= (EXPECTED_TIMEOUT * 1000000) - EXPECTED_TIMEOUT_ACCURACY_NS"
  */
 static const jlong EXPECTED_TIMEOUT_ACCURACY_NS = 300000;
 
-static const jlong EXPECTED_ACCURACY = 10;
+#if (defined(WIN32) || defined(_WIN32))
+static const jlong EXPECTED_ACCURACY = 16; // 16ms is longest clock update interval
+#else
+static const jlong EXPECTED_ACCURACY = 10; // high frequency clock updates expected
+#endif
 
 /* scaffold objects */
 static jlong timeout = 0;
 
 /* test objects */
@@ -262,11 +266,11 @@
 
     NSK_DISPLAY1("Time frame between the events: %s ns\n",
         jlong_to_string(waitedTime - waitTime, buffer));
     if (!(NSK_VERIFY((waitedTime - waitTime) >= (EXPECTED_TIMEOUT * 1000000) - EXPECTED_TIMEOUT_ACCURACY_NS))) {
 #if (defined(WIN32) || defined(_WIN32))
-        /* Do not fail on Windows as spurious wakeups are expected. The JDK-6313903 was closed as "Won't Fix". */
+        /* Do not fail on Windows as early returns are expected and wait() treats them as spurious wakeups. */
 #else
         nsk_jvmti_setFailStatus();
 #endif
         printf("waitedTime: %" LL "d,  waitTime: %" LL "d, waitedTime - waitTime: %" LL "d\n",
                 waitedTime, waitTime, waitedTime - waitTime);
