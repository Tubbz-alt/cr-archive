diff a/test/hotspot/jtreg/vmTestbase/nsk/jdi/ThreadStartRequest/addThreadFilter/addthreadfilter001.java b/test/hotspot/jtreg/vmTestbase/nsk/jdi/ThreadStartRequest/addThreadFilter/addthreadfilter001.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/jdi/ThreadStartRequest/addThreadFilter/addthreadfilter001.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jdi/ThreadStartRequest/addThreadFilter/addthreadfilter001.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -57,14 +57,14 @@
  * If no the ClassPrepareEvent received, the test is FAILED.            <BR>
  * Upon getting the ClassPrepareEvent,                                  <BR>
  * the debugger sets up the breakpoint with SUSPEND_EVENT_THREAD        <BR>
  * within debuggee's special methodForCommunication().                  <BR>
  * <BR>
- * In second phase to check the assetion,                               <BR>
+ * In second phase to check the assertion,                              <BR>
  * the debugger and the debuggee perform the following.                 <BR>
  * - The debugger creates three ThreadStartRequests with                <BR>
- *   addThreadFilter(debuggee's thread2) invoked only on third Request, <BR>
+ *   addThreadFilter(debuggee's thread2) invoked,                       <BR>
  *   resumes the debuggee and waits for the ThreadStartEvent.           <BR>
  * - Debuggee's main thread creates and starts new thread, thread2, and <BR>
  *   invokes the methodForCommunication                                 <BR>
  *   to inform the debugger with the event.                             <BR>
  * - Upon getting ThreadStartEvent, the debugger checks                 <BR>
@@ -146,16 +146,10 @@
     static ReferenceType       debuggeeClass = null;
 
     static int  testExitCode = PASSED;
 
 
-    class JDITestRuntimeException extends RuntimeException {
-        JDITestRuntimeException(String str) {
-            super("JDITestRuntimeException : " + str);
-        }
-    }
-
     //------------------------------------------------------ methods
 
     private int runThis (String argv[], PrintStream out) {
 
         argsHandler     = new ArgumentHandler(argv);
@@ -295,11 +289,11 @@
 
         String bPointMethod = "methodForCommunication";
         String lineForComm  = "lineForComm";
         BreakpointRequest bpRequest;
 
-        ThreadReference mainThread = threadByName("main");
+        ThreadReference mainThread = debuggee.threadByNameOrThrow("main");
 
         bpRequest = settingBreakpoint(mainThread,
                                       debuggeeClass,
                                       bPointMethod, lineForComm, "zero");
         bpRequest.enable();
@@ -328,18 +322,18 @@
 
             log1("     TESTING BEGINS");
 
             log2("......setting up ThreadStartRequest");
             ThreadStartRequest tsr1 = eventRManager.createThreadStartRequest();
-//            tsr1.addThreadFilter(testThread);
+            tsr1.addThreadFilter(testThread);
             tsr1.addCountFilter(1);
             tsr1.setSuspendPolicy(EventRequest.SUSPEND_ALL);
             tsr1.putProperty("number", "ThreadStartRequest1");
             tsr1.enable();
 
             ThreadStartRequest tsr2 = eventRManager.createThreadStartRequest();
-//            tsr2.addThreadFilter(testThread);
+            tsr2.addThreadFilter(testThread);
             tsr2.addCountFilter(1);
             tsr2.setSuspendPolicy(EventRequest.SUSPEND_ALL);
             tsr2.putProperty("number", "ThreadStartRequest2");
             tsr2.enable();
 
@@ -381,24 +375,10 @@
         }
         log1("    TESTING ENDS");
         return;
     }
 
-    private ThreadReference threadByName(String name)
-                 throws JDITestRuntimeException {
-
-        List         all = vm.allThreads();
-        ListIterator li  = all.listIterator();
-
-        for (; li.hasNext(); ) {
-            ThreadReference thread = (ThreadReference) li.next();
-            if (thread.name().equals(name))
-                return thread;
-        }
-        throw new JDITestRuntimeException("** Thread IS NOT found ** : " + name);
-    }
-
    /*
     * private BreakpointRequest settingBreakpoint(ThreadReference, ReferenceType,
     *                                             String, String, String)
     *
     * It sets up a breakpoint at given line number within a given method in a given class
