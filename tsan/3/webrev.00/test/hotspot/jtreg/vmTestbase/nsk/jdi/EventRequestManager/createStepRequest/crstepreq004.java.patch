diff a/test/hotspot/jtreg/vmTestbase/nsk/jdi/EventRequestManager/createStepRequest/crstepreq004.java b/test/hotspot/jtreg/vmTestbase/nsk/jdi/EventRequestManager/createStepRequest/crstepreq004.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/jdi/EventRequestManager/createStepRequest/crstepreq004.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jdi/EventRequestManager/createStepRequest/crstepreq004.java
@@ -153,11 +153,11 @@
     }
 
     //--------------------------------------------------------- mutable common methods
 
     private void execTest() {
-        ThreadReference mainThread = threadByName("main");
+        ThreadReference mainThread = debuggee.threadByNameOrThrow("main");
 
         BreakpointRequest bpRequest = setBreakpoint( mainThread,
                                                      debuggeeClass,
                                                      "methodForCommunication",
                                                      lineForBreakInThread,
@@ -245,11 +245,11 @@
             complain("Wrong line number of BreakpointEvent for " + threadName);
             complain("\texpected value : " + lineForBreakInThread + "; got one : " + lineOfEvent);
             exitCode = FAILED;
         }
 
-        ThreadReference thread = threadByName(threadName);
+        ThreadReference thread = debuggee.threadByNameOrThrow(threadName);
         StepRequest stepRequest = setStepRequest( thread,
                                                   StepRequest.STEP_LINE,
                                                   stepDepth,
                                                   caseProperty);
         stepRequest.enable();
@@ -416,23 +416,10 @@
         } catch (Exception e) {
             throw new Failure("getEventSet(): Unexpected exception while waiting for an event: " + e);
         }
     }
 
-
-    private ThreadReference threadByName(String name) throws Failure{
-        List all = vm.allThreads();
-        ListIterator li = all.listIterator();
-
-        while (li.hasNext()) {
-            ThreadReference thread = (ThreadReference) li.next();
-            if (thread.name().equals(name))
-                return thread;
-        }
-        throw new Failure("Thread with searching for name is not found: " + name);
-    }
-
     private ReferenceType waitForDebuggeeClassPrepared () {
         display("Creating request for ClassPrepareEvent for debuggee.");
         ClassPrepareRequest cpRequest = eventRManager.createClassPrepareRequest();
         cpRequest.addClassFilter(debuggeeName);
         cpRequest.addCountFilter(1);
