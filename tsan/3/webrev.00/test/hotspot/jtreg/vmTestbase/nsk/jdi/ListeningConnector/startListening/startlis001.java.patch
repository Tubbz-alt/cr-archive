diff a/test/hotspot/jtreg/vmTestbase/nsk/jdi/ListeningConnector/startListening/startlis001.java b/test/hotspot/jtreg/vmTestbase/nsk/jdi/ListeningConnector/startListening/startlis001.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/jdi/ListeningConnector/startListening/startlis001.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jdi/ListeningConnector/startListening/startlis001.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -30,13 +30,16 @@
 import java.io.*;
 
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 
+import java.util.Arrays;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.stream.Collectors;
 
 import nsk.share.*;
 import nsk.share.jpda.*;
 import nsk.share.jdi.*;
 
@@ -83,11 +86,10 @@
     }
 
     private int runIt(String argv[], PrintStream out) {
         String port;
         String addr;
-        InetAddress inetAddr = null;
         ArgumentHandler argHandler = new ArgumentHandler(argv);
 
 // pass if CONNECTOR_NAME is not implemented
 // on this platform
         if (argHandler.shouldPass(CONNECTOR_NAME))
@@ -95,50 +97,56 @@
         this.out = out;
         log = new Log(out, argHandler);
 
         long timeout = argHandler.getWaitTime() * 60 * 1000;
 
-/* Check that listening address returned by ListeningConnector.startListening()
-   matches the address which was set via connector's arguments */
+        /* Check that listening address returned by ListeningConnector.startListening()
+         * matches the address which was set via connector's arguments.
+         * Empty host address causes listening for local connections only (loopback interface).
+         * */
+        String hostname = "localhost";
+        List<String> validAddresses = new LinkedList<>();
+        validAddresses.add(hostname);
         try {
-            inetAddr = InetAddress.getLocalHost();
+            Arrays.stream(InetAddress.getAllByName(hostname))
+                    .forEach(address -> validAddresses.add(address.getHostAddress()));
         } catch (UnknownHostException e) {
             log.complain("FAILURE: caught UnknownHostException " +
-                e.getMessage());
+                    e.getMessage());
             totalRes = false;
         }
-        String hostname = inetAddr.getHostName();
-        String ip = inetAddr.getHostAddress();
+
         port = argHandler.getTransportPortIfNotDynamic();
 
         initConnector(port);
         if ((addr = startListen()) == null) {
             log.complain("Test case #1 FAILED: unable to start listening");
             totalRes = false;
-        }
-        else {
+        } else {
+            String validAddrList = validAddresses.stream()
+                    .map(value -> value + ":" + port)
+                    .collect(Collectors.joining(" or "));
             log.display("Test case #1: start listening the address " + addr);
-            log.display("Expected address: "+ hostname + ":" + port +
-                "\n\tor "+ ip + ":" + port);
-            if ( (!addr.startsWith(hostname) && !addr.startsWith(ip)) ||
-                 (port != null && !addr.endsWith(port)) ) {
+            log.display("Expected addresses: " + validAddrList);
+            final String listenAddr = addr;
+            boolean isValid = validAddresses.stream()
+                    .anyMatch(value -> listenAddr.startsWith(value) && (port == null || listenAddr.endsWith(port)));
+            if (!isValid) {
                 log.complain("Test case #1 FAILED: listening address " + addr +
-                    "\ndoes not match expected address:\n" +
-                    hostname + ":" + port + " or " +
-                    ip + ":" + port);
+                    "\ndoes not match expected address:\n" + validAddrList);
                 totalRes = false;
             }
             if (!stopListen()) {
                 log.complain("TEST: unable to stop listening #1");
                 totalRes = false;
             }
             else
                log.display("Test case #1 PASSED: listening address matches expected address");
         }
 
-/* Check that an address generated by ListeningConnector.startListening()
-   is valid i.e. debugee VM is accessible via this address */
+        /* Check that an address generated by ListeningConnector.startListening()
+           is valid i.e. debugee VM is accessible via this address */
         initConnector(null);
         if ((addr = startListen()) == null) {
             log.complain("Test case #2 FAILED: unable to start listening");
             return FAILED;
         }
