diff a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/scenarios/hotswap/HS202/hs202t002/hs202t002.cpp b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/scenarios/hotswap/HS202/hs202t002/hs202t002.cpp
--- a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/scenarios/hotswap/HS202/hs202t002/hs202t002.cpp
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/scenarios/hotswap/HS202/hs202t002/hs202t002.cpp
@@ -62,11 +62,11 @@
             jclass cls;
             char fileName[512];
             nsk_jvmti_getFileName(redefineNumber, FILE_NAME, fileName,
                                   sizeof(fileName)/sizeof(char));
             jvmti_env->GetMethodDeclaringClass(method, &cls);
-            if (nsk_jvmti_redefineClass(jvmti_env, cls,fileName) == NSK_TRUE) {
+            if (nsk_jvmti_redefineClass(jvmti_env, cls,fileName)) {
                 nsk_printf(" Agent:: redefine class success ..\n");
                 nsk_printf("Agent::SUSPENDING>> \n");
                 err=jvmti_env->SuspendThread(thread);
                 if (err == JVMTI_ERROR_NONE) {
                   // we don't get here until we are resumed
@@ -101,11 +101,11 @@
         return JNI_ERR;
     } else {
         jvmtiCapabilities caps;
         jvmtiEventCallbacks eventCallbacks;
         memset(&caps, 0, sizeof(caps));
-        if (nsk_jvmti_parseOptions(options) == NSK_FALSE) {
+        if (!nsk_jvmti_parseOptions(options)) {
             nsk_printf("# error agent Failed to parse options \n");
             return JNI_ERR;
         }
         caps.can_redefine_classes = 1;
         caps.can_suspend = 1;
@@ -117,11 +117,11 @@
         rc=jvmti->SetEventCallbacks(&eventCallbacks, sizeof(eventCallbacks));
         if (rc != JVMTI_ERROR_NONE) {
             nsk_printf(" Agent:: Error occured while setting event callbacks \n");
             return JNI_ERR;
         }
-        if (NSK_TRUE == nsk_jvmti_enableNotification(jvmti,JVMTI_EVENT_METHOD_EXIT, NULL)) {
+        if (nsk_jvmti_enableNotification(jvmti,JVMTI_EVENT_METHOD_EXIT, NULL)) {
             nsk_printf(" Agent :: NOTIFICATIONS ARE ENABLED \n");
         } else {
             nsk_printf(" Agent :: Error Enabling Notifications..");
         }
     }
@@ -158,11 +158,11 @@
     jvmtiError err = JVMTI_ERROR_NONE;
     jboolean retvalue = JNI_FALSE;
 
     // disable notifications before resuming thread
     // to avoid recursion on PopFrame issued reinvoke
-    if (NSK_TRUE == nsk_jvmti_disableNotification(jvmti,JVMTI_EVENT_METHOD_EXIT, NULL)) {
+    if (nsk_jvmti_disableNotification(jvmti,JVMTI_EVENT_METHOD_EXIT, NULL)) {
         nsk_printf("Agent :: nsk_jvmti_disabled notifications..\n");
     } else {
         nsk_printf("Agent :: Failed to disable notifications..");
         return JNI_FALSE;
     }
