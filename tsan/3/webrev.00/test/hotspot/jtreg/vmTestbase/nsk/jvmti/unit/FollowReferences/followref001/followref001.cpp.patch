diff a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/unit/FollowReferences/followref001/followref001.cpp b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/unit/FollowReferences/followref001/followref001.cpp
--- a/test/hotspot/jtreg/vmTestbase/nsk/jvmti/unit/FollowReferences/followref001/followref001.cpp
+++ b/test/hotspot/jtreg/vmTestbase/nsk/jvmti/unit/FollowReferences/followref001/followref001.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -99,12 +99,11 @@
 
 
 /* ============================================================================= */
 
 static int get_reference_index(jvmtiHeapReferenceKind   reference_kind,
-                               const jvmtiHeapReferenceInfo* reference_info)
-{
+                               const jvmtiHeapReferenceInfo* reference_info) {
     int referrer_index = 0;
 
     switch (reference_kind) {
         case JVMTI_HEAP_REFERENCE_CONSTANT_POOL:
             referrer_index = reference_info->constant_pool.index;
@@ -130,24 +129,23 @@
     return referrer_index;
 } /* get_reference_index */
 
 
 /** Initialize objectDescList. */
-static int initObjectDescList(jvmtiEnv*    jvmti,
-                              int          chainLength,
-                              int*         objectsCount,
-                              ObjectDesc** objectDescList)
-{
+static bool initObjectDescList(jvmtiEnv*    jvmti,
+                               int          chainLength,
+                               int*         objectsCount,
+                               ObjectDesc** objectDescList) {
     /* root object + reachable and unreachable object chains */
     *objectsCount = 1 + 2 * chainLength;
 
     printf("Allocate memory for objects list: %d objects\n", *objectsCount);
     fflush(0);
     if (!NSK_JVMTI_VERIFY(jvmti->Allocate((*objectsCount * sizeof(ObjectDesc)),
                                           (unsigned char**) objectDescList))) {
         nsk_jvmti_setFailStatus();
-        return NSK_FALSE;
+        return false;
     }
     printf("  ... allocated array: 0x%p\n", (void*)objectDescList);
     fflush(0);
 
     {
@@ -164,34 +162,33 @@
 
     /* Object with tag=100 must be referenced 2 times */
     (*objectDescList)[chainLength].exp_found = 1;
 
 
-     return NSK_TRUE;
+     return true;
 } /* initObjectDescList */
 
 
 /** Find and tag classes. */
-static int getAndTagClasses(jvmtiEnv*    jvmti,
-                            JNIEnv*      jni,
-                            jclass*      debugeeClass,
-                            jclass*      rootObjectClass,
-                            jclass*      chainObjectClass)
-{
+static bool getAndTagClasses(jvmtiEnv*    jvmti,
+                             JNIEnv*      jni,
+                             jclass*      debugeeClass,
+                             jclass*      rootObjectClass,
+                             jclass*      chainObjectClass) {
 
     if (!NSK_JNI_VERIFY(jni, (*debugeeClass = jni->FindClass(DEBUGEE_CLASS_NAME)) != NULL)) {
         nsk_jvmti_setFailStatus();
-        return NSK_FALSE;
+        return false;
     }
     printf("\nFound debugee class: 0x%p\n  %s\n",
            (void*) *debugeeClass, DEBUGEE_CLASS_NAME);
     fflush(0);
 
     if (!NSK_JNI_VERIFY(jni, (*rootObjectClass =
             jni->FindClass(ROOT_OBJECT_CLASS_NAME)) != NULL)) {
         nsk_jvmti_setFailStatus();
-        return NSK_FALSE;
+        return false;
     }
 
     if (!NSK_JVMTI_VERIFY(jvmti->SetTag(*rootObjectClass, ROOT_CLASS_TAG))) {
         nsk_jvmti_setFailStatus();
     }
@@ -203,119 +200,117 @@
 
 
     if (!NSK_JNI_VERIFY(jni, (*chainObjectClass =
             jni->FindClass(CHAIN_OBJECT_CLASS_NAME)) != NULL)) {
         nsk_jvmti_setFailStatus();
-        return NSK_FALSE;
+        return false;
     }
 
     if (!NSK_JVMTI_VERIFY(jvmti->SetTag(*chainObjectClass, CHAIN_CLASS_TAG))) {
         nsk_jvmti_setFailStatus();
     }
     printf("\nFound chain object class: 0x%p, tag=%ld\n  %s\n",
            (void*) *chainObjectClass, (long) CHAIN_CLASS_TAG,
            CHAIN_OBJECT_CLASS_NAME);
     fflush(0);
 
-     return NSK_TRUE;
+     return true;
 } /* getAndTagClasses */
 
 
 /** Obtain chain of tested objects and tag them recursively. */
-static int getFieldsAndObjects(jvmtiEnv*  jvmti,
-                             JNIEnv*     jni,
-                             jclass      debugeeClass,
-                             jclass      rootObjectClass,
-                             jclass      chainObjectClass,
-                             jobject*    rootObjectPtr,
-                             jfieldID*   reachableChainField,
-                             jfieldID*   unreachableChainField,
-                             jfieldID*   nextField)
-{
+static bool getFieldsAndObjects(jvmtiEnv*  jvmti,
+                                JNIEnv*    jni,
+                                jclass     debugeeClass,
+                                jclass     rootObjectClass,
+                                jclass     chainObjectClass,
+                                jobject*   rootObjectPtr,
+                                jfieldID*  reachableChainField,
+                                jfieldID*  unreachableChainField,
+                                jfieldID*  nextField) {
     jfieldID rootObjectField = NULL;
 
     if (!NSK_JNI_VERIFY(jni, (rootObjectField =
             jni->GetStaticFieldID(debugeeClass, OBJECT_FIELD_NAME, ROOT_OBJECT_CLASS_SIG)) != NULL)) {
         nsk_jvmti_setFailStatus();
-        return NSK_FALSE;
+        return false;
     }
     printf("\nFound fieldID: 0x%p - \'%s\' static field in debugee class\n",
            (void*) rootObjectField, OBJECT_FIELD_NAME);
     fflush(0);
 
     if (!NSK_JNI_VERIFY(jni, (*reachableChainField =
             jni->GetFieldID(rootObjectClass, REACHABLE_CHAIN_FIELD_NAME, CHAIN_OBJECT_CLASS_SIG)) != NULL)) {
         nsk_jvmti_setFailStatus();
-        return NSK_FALSE;
+        return false;
     }
     printf("\nFound fieldID: 0x%p - \'%s\' field in root object class\n",
            (void*) reachableChainField, REACHABLE_CHAIN_FIELD_NAME);
     fflush(0);
 
     if (!NSK_JNI_VERIFY(jni, (*unreachableChainField =
             jni->GetFieldID(rootObjectClass, UNREACHABLE_CHAIN_FIELD_NAME, CHAIN_OBJECT_CLASS_SIG)) != NULL)) {
         nsk_jvmti_setFailStatus();
-        return NSK_FALSE;
+        return false;
     }
 
     printf("\nFound fieldID: 0x%p - \'%s\' field in root object class\n",
            (void*) unreachableChainField, UNREACHABLE_CHAIN_FIELD_NAME);
     fflush(0);
 
     if (!NSK_JNI_VERIFY(jni, (*nextField =
             jni->GetFieldID(chainObjectClass, NEXT_FIELD_NAME, CHAIN_OBJECT_CLASS_SIG)) != NULL)) {
         nsk_jvmti_setFailStatus();
-        return NSK_FALSE;
+        return false;
     }
     printf("\nFound fieldID: 0x%p - \'%s\' field in chain object class\n",
            (void*) nextField, NEXT_FIELD_NAME);
     fflush(0);
 
     if (!NSK_JNI_VERIFY(jni, (*rootObjectPtr =
             jni->GetStaticObjectField(debugeeClass, rootObjectField)) != NULL)) {
         nsk_jvmti_setFailStatus();
-        return NSK_FALSE;
+        return false;
     }
     printf("\nFound root object: 0x%p\n", (void*) *rootObjectPtr);
     fflush(0);
 
     if (!NSK_JNI_VERIFY(jni, (*rootObjectPtr = jni->NewGlobalRef(*rootObjectPtr)) != NULL)) {
         nsk_jvmti_setFailStatus();
-        return NSK_FALSE;
+        return false;
     }
     printf("Created root object global ref: 0x%p\n", (void*)*rootObjectPtr);
     fflush(0);
 
-     return NSK_TRUE;
+     return true;
 } /* getFieldsAndObjects */
 
 
 /** Obtain chain of tested objects and tag them recursively. */
-static int getAndTagChainObjects(
+static bool getAndTagChainObjects(
     jvmtiEnv*  jvmti,
     JNIEnv*    jni,
     jobject    currObj,
     jfieldID   refField,
     jfieldID   nextField,
     int        count,
     ObjectDesc objectDescList[],
     jlong      tag,
-    int        reachable)
-{
+    bool       reachable) {
     jobject nextObj = NULL;
     jlong objTag = (reachable ? tag : -tag);
 
     if (count <= 0) {
-        return NSK_TRUE;
+        return true;
     }
 
     count--;
     tag++;
 
     if (!NSK_JNI_VERIFY(jni, (nextObj = jni->GetObjectField(currObj, refField)) != NULL)) {
         nsk_jvmti_setFailStatus();
-        return NSK_FALSE;
+        return false;
     }
 
     objectDescList[count].tag = objTag;
     if (reachable) {
         objectDescList[count].exp_found++;
@@ -336,16 +331,16 @@
                                count,
                                objectDescList,
                                tag,
                                reachable)
     ) {
-        return NSK_FALSE;
+        return false;
     }
 
     NSK_TRACE(jni->DeleteLocalRef(nextObj));
 
-    return NSK_TRUE;
+    return true;
 } /* getAndTagChainObjects */
 
 /** Obtain all tested objects from debugee class and tag them recursively. */
 static int getAndTagTestedObjects(
     jvmtiEnv*    jvmti,
@@ -361,35 +356,35 @@
 
     jfieldID reachableChainField   = NULL;
     jfieldID unreachableChainField = NULL;
     jfieldID nextField             = NULL;
 
-    if (initObjectDescList(jvmti,
-                           chainLength,
-                           objectsCount,
-                           objectDescList) == NSK_FALSE) {
-        return NSK_FALSE;
+    if (!initObjectDescList(jvmti,
+                            chainLength,
+                            objectsCount,
+                            objectDescList)) {
+        return false;
     }
 
-    if (getAndTagClasses(jvmti,
-                         jni,
-                         &debugeeClass,
-                         &rootObjectClass,
-                         &chainObjectClass) == NSK_FALSE) {
-        return NSK_FALSE;
+    if (!getAndTagClasses(jvmti,
+                          jni,
+                          &debugeeClass,
+                          &rootObjectClass,
+                          &chainObjectClass)) {
+        return false;
     }
 
-    if (getFieldsAndObjects(jvmti,
-                            jni,
-                            debugeeClass,
-                            rootObjectClass,
-                            chainObjectClass,
-                            rootObjectPtr,
-                            &reachableChainField,
-                            &unreachableChainField,
-                            &nextField) == NSK_FALSE) {
-        return NSK_FALSE;
+    if (!getFieldsAndObjects(jvmti,
+                             jni,
+                             debugeeClass,
+                             rootObjectClass,
+                             chainObjectClass,
+                             rootObjectPtr,
+                             &reachableChainField,
+                             &unreachableChainField,
+                             &nextField)) {
+        return false;
     }
 
     printf("\nObtain and tag chain objects:\n");
     printf("    root tested object:\n");
 
@@ -409,14 +404,14 @@
                                reachableChainField,
                                nextField,
                                chainLength,
                                (*objectDescList) + 1,
                                CHAIN_OBJECT_TAG,
-                               NSK_TRUE)  /* reachable objects */
+                               true)  /* reachable objects */
     ) {
         nsk_jvmti_setFailStatus();
-        return NSK_FALSE;
+        return false;
     }
 
     printf("    unreachable objects chain: %d objects\n", chainLength);
     if (!getAndTagChainObjects(jvmti,
                                jni,
@@ -424,26 +419,26 @@
                                unreachableChainField,
                                nextField,
                                chainLength,
                                (*objectDescList) + 1 + chainLength,
                                CHAIN_OBJECT_TAG,
-                               NSK_FALSE) /* unreachable objects */
+                               false) /* unreachable objects */
     ) {
         nsk_jvmti_setFailStatus();
-        return NSK_FALSE;
+        return false;
     }
 
-    return NSK_TRUE;
+    return true;
 } /* getAndTagTestedObjects */
 
 /** Check if tagged objects were iterated. */
-static int checkTestedObjects(jvmtiEnv*  jvmti,
-                              JNIEnv*    jni,
-                              int        chainLength,
-                              ObjectDesc objectDescList[])
+static bool checkTestedObjects(jvmtiEnv*  jvmti,
+                               JNIEnv*    jni,
+                               int        chainLength,
+                               ObjectDesc objectDescList[])
 {
-    int success = NSK_TRUE;
+    bool success = true;
     int i, idx;
 
     printf("Following tagged objects were iterated:\n");
 
     printf("Root tested object:\n");
@@ -496,20 +491,20 @@
             nsk_jvmti_setFailStatus();
         }
         fflush(0);
     }
 
-    return NSK_TRUE;
+    return true;
 } /* checkTestedObjects */
 
 
 /** Release references to the tested objects and free allocated memory. */
-static int releaseTestedObjects(jvmtiEnv*   jvmti,
-                                JNIEnv*     jni,
-                                int         chainLength,
-                                ObjectDesc* objectDescList,
-                                jobject     rootObject)
+static void releaseTestedObjects(jvmtiEnv*   jvmti,
+                                 JNIEnv*     jni,
+                                 int         chainLength,
+                                 ObjectDesc* objectDescList,
+                                 jobject     rootObject)
 {
     if (rootObject != NULL) {
         printf("Release object reference to root tested object: 0x%p\n", rootObject);
         NSK_TRACE(jni->DeleteGlobalRef(rootObject));
     }
@@ -520,11 +515,10 @@
             nsk_jvmti_setFailStatus();
         }
     }
 
     fflush(0);
-    return NSK_TRUE;
 } /* releaseTestedObjects */
 
 
 /* ============================================================================= */
 
@@ -782,14 +776,11 @@
     }
 
     printf(">>> Clean used data\n");
     fflush(0);
 
-    if (!NSK_VERIFY(releaseTestedObjects(jvmti, jni, chainLength,
-                                         objectDescList, rootObject))) {
-        return;
-    }
+    releaseTestedObjects(jvmti, jni, chainLength, objectDescList, rootObject);
 
     printf(">>> Let debugee to finish\n");
     fflush(0);
     if (!NSK_VERIFY(nsk_jvmti_resumeSync())) {
         return;
