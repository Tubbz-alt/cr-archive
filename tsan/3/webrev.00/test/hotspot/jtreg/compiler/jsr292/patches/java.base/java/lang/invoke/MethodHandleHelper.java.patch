diff a/test/hotspot/jtreg/compiler/jsr292/patches/java.base/java/lang/invoke/MethodHandleHelper.java b/test/hotspot/jtreg/compiler/jsr292/patches/java.base/java/lang/invoke/MethodHandleHelper.java
--- a/test/hotspot/jtreg/compiler/jsr292/patches/java.base/java/lang/invoke/MethodHandleHelper.java
+++ b/test/hotspot/jtreg/compiler/jsr292/patches/java.base/java/lang/invoke/MethodHandleHelper.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -24,15 +24,15 @@
 package java.lang.invoke;
 
 import java.lang.invoke.MethodHandles.Lookup;
 import jdk.internal.vm.annotation.DontInline;
 import jdk.internal.vm.annotation.ForceInline;
+
 /**
  * Helper class to inject into java.lang.invoke that provides access to
  * package-private methods in this package.
  */
-
 public class MethodHandleHelper {
 
     private MethodHandleHelper() { }
 
     public static final Lookup IMPL_LOOKUP = Lookup.IMPL_LOOKUP;
@@ -77,31 +77,6 @@
     }
 
     public static LambdaForm getLambdaForm(MethodHandle mh) {
         return mh.form;
     }
-
-    public static class NonInlinedReinvoker extends DelegatingMethodHandle {
-        private final MethodHandle target;
-
-        private NonInlinedReinvoker(MethodHandle target, LambdaForm lf) {
-            super(target.type(), lf);
-            this.target = target;
-        }
-        @Override
-        public MethodHandle getTarget() {
-            return target;
-        }
-
-        @Override
-        public MethodHandle asTypeUncached(MethodType newType) {
-            return asTypeCache = target.asType(newType);
-        }
-
-        public static MethodHandle make(MethodHandle target) {
-            LambdaForm lform = DelegatingMethodHandle.makeReinvokerForm(
-                    target, -1, DelegatingMethodHandle.class,
-                /*forceInline=*/false, DelegatingMethodHandle.NF_getTarget, null);
-            return new NonInlinedReinvoker(target, lform);
-        }
-    }
 }
