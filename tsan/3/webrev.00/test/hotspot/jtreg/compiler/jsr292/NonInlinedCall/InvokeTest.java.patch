diff a/test/hotspot/jtreg/compiler/jsr292/NonInlinedCall/InvokeTest.java b/test/hotspot/jtreg/compiler/jsr292/NonInlinedCall/InvokeTest.java
--- a/test/hotspot/jtreg/compiler/jsr292/NonInlinedCall/InvokeTest.java
+++ b/test/hotspot/jtreg/compiler/jsr292/NonInlinedCall/InvokeTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -41,11 +41,10 @@
 import jdk.internal.vm.annotation.DontInline;
 import sun.hotspot.WhiteBox;
 
 import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodHandleHelper;
-import java.lang.invoke.MethodHandleHelper.NonInlinedReinvoker;
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.MethodType;
 
 import static jdk.test.lib.Asserts.assertEquals;
 
@@ -56,11 +55,10 @@
     static final MethodHandle staticMH;  // invokestatic    T.f2
     static final MethodHandle intfMH;    // invokeinterface I.f3
     static final MethodHandle defaultMH; // invokevirtual   T.f3
     static final MethodHandle specialMH; // invokespecial   T.f4 T
     static final MethodHandle privateMH; // invokespecial   I.f4 T
-    static final MethodHandle basicMH;
 
     static final MethodHandle intrinsicMH; // invokevirtual Object.hashCode
 
     static final WhiteBox WB = WhiteBox.getWhiteBox();
 
@@ -74,11 +72,10 @@
             staticMH   = LOOKUP.findStatic (T.class, "f2", mtype);
             intfMH     = LOOKUP.findVirtual(I.class, "f3", mtype);
             defaultMH  = LOOKUP.findVirtual(T.class, "f3", mtype);
             specialMH  = LOOKUP.findSpecial(T.class, "f4", mtype, T.class);
             privateMH  = LOOKUP.findSpecial(I.class, "f4", mtype, I.class);
-            basicMH    = NonInlinedReinvoker.make(staticMH);
             intrinsicMH = LOOKUP.findVirtual(Object.class, "hashCode", MethodType.methodType(int.class));
         } catch (Exception e) {
             throw new Error(e);
         }
     }
@@ -192,20 +189,10 @@
         } catch (Throwable e) {
             throw new Error(e);
         }
     }
 
-    @DontInline
-    static void invokeBasic() {
-        try {
-            Class<?> cls = (Class<?>)MethodHandleHelper.invokeBasicL(basicMH);
-            assertEquals(cls, T.class);
-        } catch (Throwable e) {
-            throw new Error(e);
-        }
-    }
-
     static void run(Runnable r) {
         for (int i = 0; i < 20_000; i++) {
             r.run();
         }
 
@@ -288,19 +275,12 @@
         System.out.println("linkToStatic");
         // static call
         run(() -> linkToStatic());
     }
 
-    static void testBasic() {
-        System.out.println("invokeBasic");
-        // static call
-        run(() -> invokeBasic());
-    }
-
     public static void main(String[] args) {
         testVirtual();
         testInterface();
         testSpecial();
         testStatic();
-        testBasic();
     }
 }
