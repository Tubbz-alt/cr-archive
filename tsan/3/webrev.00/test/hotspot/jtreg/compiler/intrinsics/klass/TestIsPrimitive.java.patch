diff a/test/hotspot/jtreg/compiler/intrinsics/klass/TestIsPrimitive.java b/test/hotspot/jtreg/compiler/intrinsics/klass/TestIsPrimitive.java
--- a/test/hotspot/jtreg/compiler/intrinsics/klass/TestIsPrimitive.java
+++ b/test/hotspot/jtreg/compiler/intrinsics/klass/TestIsPrimitive.java
@@ -22,16 +22,17 @@
  */
 
 /*
  * @test
  * @bug 8150669
+ * @bug 8233019
  * @summary C1 intrinsic for Class.isPrimitive
  * @modules java.base/jdk.internal.misc
  *
  * @run main/othervm -ea -Diters=200   -Xint
  *      compiler.intrinsics.klass.TestIsPrimitive
- * @run main/othervm -ea -Diters=30000 -XX:TieredStopAtLevel=1
+ * @run main/othervm -ea -XX:-UseSharedSpaces -Diters=30000 -XX:TieredStopAtLevel=1
  *      compiler.intrinsics.klass.TestIsPrimitive
  * @run main/othervm -ea -Diters=30000 -XX:TieredStopAtLevel=4
  *      compiler.intrinsics.klass.TestIsPrimitive
  */
 
@@ -51,10 +52,11 @@
         testOK(true,  InlineConstants::testFloat);
         testOK(true,  InlineConstants::testLong);
         testOK(true,  InlineConstants::testDouble);
         testOK(false, InlineConstants::testObject);
         testOK(false, InlineConstants::testArray);
+        testOK(false, InlineConstants::testBooleanArray);
 
         testOK(true,  StaticConstants::testBoolean);
         testOK(true,  StaticConstants::testByte);
         testOK(true,  StaticConstants::testShort);
         testOK(true,  StaticConstants::testChar);
@@ -62,10 +64,11 @@
         testOK(true,  StaticConstants::testFloat);
         testOK(true,  StaticConstants::testLong);
         testOK(true,  StaticConstants::testDouble);
         testOK(false, StaticConstants::testObject);
         testOK(false, StaticConstants::testArray);
+        testOK(false, StaticConstants::testBooleanArray);
         testNPE(      StaticConstants::testNull);
 
         testOK(true,  NoConstants::testBoolean);
         testOK(true,  NoConstants::testByte);
         testOK(true,  NoConstants::testShort);
@@ -74,10 +77,11 @@
         testOK(true,  NoConstants::testFloat);
         testOK(true,  NoConstants::testLong);
         testOK(true,  NoConstants::testDouble);
         testOK(false, NoConstants::testObject);
         testOK(false, NoConstants::testArray);
+        testOK(false, NoConstants::testBooleanArray);
         testNPE(      NoConstants::testNull);
     }
 
     public static void testOK(boolean expected, Callable<Object> test) throws Exception {
         for (int c = 0; c < ITERS; c++) {
@@ -110,10 +114,11 @@
     static volatile Class<?> classLong    = long.class;
     static volatile Class<?> classDouble  = double.class;
     static volatile Class<?> classObject  = Object.class;
     static volatile Class<?> classArray   = Object[].class;
     static volatile Class<?> classNull    = null;
+    static volatile Class<?> classBooleanArray = boolean[].class;
 
     static final Class<?> staticClassBoolean = boolean.class;
     static final Class<?> staticClassByte    = byte.class;
     static final Class<?> staticClassShort   = short.class;
     static final Class<?> staticClassChar    = char.class;
@@ -122,10 +127,11 @@
     static final Class<?> staticClassLong    = long.class;
     static final Class<?> staticClassDouble  = double.class;
     static final Class<?> staticClassObject  = Object.class;
     static final Class<?> staticClassArray   = Object[].class;
     static final Class<?> staticClassNull    = null;
+    static final Class<?> staticClassBooleanArray = boolean[].class;
 
     static class InlineConstants {
         static boolean testBoolean() { return boolean.class.isPrimitive();  }
         static boolean testByte()    { return byte.class.isPrimitive();     }
         static boolean testShort()   { return short.class.isPrimitive();    }
@@ -134,10 +140,11 @@
         static boolean testFloat()   { return float.class.isPrimitive();    }
         static boolean testLong()    { return long.class.isPrimitive();     }
         static boolean testDouble()  { return double.class.isPrimitive();   }
         static boolean testObject()  { return Object.class.isPrimitive();   }
         static boolean testArray()   { return Object[].class.isPrimitive(); }
+        static boolean testBooleanArray() { return boolean[].class.isPrimitive(); }
     }
 
     static class StaticConstants {
         static boolean testBoolean() { return staticClassBoolean.isPrimitive(); }
         static boolean testByte()    { return staticClassByte.isPrimitive();    }
@@ -148,10 +155,11 @@
         static boolean testLong()    { return staticClassLong.isPrimitive();    }
         static boolean testDouble()  { return staticClassDouble.isPrimitive();  }
         static boolean testObject()  { return staticClassObject.isPrimitive();  }
         static boolean testArray()   { return staticClassArray.isPrimitive();   }
         static boolean testNull()    { return staticClassNull.isPrimitive();    }
+        static boolean testBooleanArray() { return staticClassBooleanArray.isPrimitive(); }
     }
 
     static class NoConstants {
         static boolean testBoolean() { return classBoolean.isPrimitive(); }
         static boolean testByte()    { return classByte.isPrimitive();    }
@@ -162,9 +170,11 @@
         static boolean testLong()    { return classLong.isPrimitive();    }
         static boolean testDouble()  { return classDouble.isPrimitive();  }
         static boolean testObject()  { return classObject.isPrimitive();  }
         static boolean testArray()   { return classArray.isPrimitive();   }
         static boolean testNull()    { return classNull.isPrimitive();    }
+        static boolean testBooleanArray() { return classBooleanArray.isPrimitive();    }
     }
 
+
 }
 
