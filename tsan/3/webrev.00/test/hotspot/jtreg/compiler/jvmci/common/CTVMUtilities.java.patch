diff a/test/hotspot/jtreg/compiler/jvmci/common/CTVMUtilities.java b/test/hotspot/jtreg/compiler/jvmci/common/CTVMUtilities.java
--- a/test/hotspot/jtreg/compiler/jvmci/common/CTVMUtilities.java
+++ b/test/hotspot/jtreg/compiler/jvmci/common/CTVMUtilities.java
@@ -30,11 +30,13 @@
 import jdk.internal.org.objectweb.asm.MethodVisitor;
 import jdk.internal.org.objectweb.asm.Opcodes;
 import jdk.internal.org.objectweb.asm.tree.ClassNode;
 import jdk.test.lib.Utils;
 import jdk.vm.ci.code.InstalledCode;
+import jdk.vm.ci.meta.ResolvedJavaMethod;
 import jdk.vm.ci.hotspot.CompilerToVMHelper;
+import jdk.vm.ci.hotspot.HotSpotNmethod;
 import jdk.vm.ci.hotspot.HotSpotResolvedJavaMethod;
 
 import java.io.IOException;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Executable;
@@ -62,21 +64,14 @@
     public static HotSpotResolvedJavaMethod getResolvedMethod(
             Executable method) {
         return getResolvedMethod(method.getDeclaringClass(), method);
     }
 
-    public static InstalledCode getInstalledCode(String name, long address,
-            long entryPoint) {
-        return new InstalledCodeStub(name, address, entryPoint);
-    }
-    private static class InstalledCodeStub extends InstalledCode {
-        private InstalledCodeStub(String name, long address, long entryPoint) {
-            super(name);
-            this.address = address;
-            this.entryPoint = entryPoint;
-        }
+    public static InstalledCode getInstalledCode(ResolvedJavaMethod method, String name, long address, long entryPoint) {
+        return CompilerToVMHelper.getInstalledCode(method, name, address, entryPoint);
     }
+
     public static Map<Integer, Integer> getBciToLineNumber(Executable method) {
         Map<Integer, Integer> lineNumbers = new TreeMap<>();
         Class<?> aClass = method.getDeclaringClass();
         ClassReader cr;
         try {
