diff a/test/hotspot/jtreg/serviceability/sa/ClhsdbFlags.java b/test/hotspot/jtreg/serviceability/sa/ClhsdbFlags.java
--- a/test/hotspot/jtreg/serviceability/sa/ClhsdbFlags.java
+++ b/test/hotspot/jtreg/serviceability/sa/ClhsdbFlags.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -47,15 +47,14 @@
         System.out.println("Starting ClhsdbFlags basic test");
 
         LingeredApp theApp = null;
         try {
             ClhsdbLauncher test = new ClhsdbLauncher();
-            List<String> vmArgs = new ArrayList<String>();
-            vmArgs.add("-XX:+UnlockExperimentalVMOptions");
-            vmArgs.add("-XX:+UnlockDiagnosticVMOptions");
-            vmArgs.add("-XX:-MaxFDLimit");
-            vmArgs.addAll(Utils.getVmOptions());
+            String[] vmArgs = Utils.appendTestJavaOpts(
+                "-XX:+UnlockExperimentalVMOptions",
+                "-XX:+UnlockDiagnosticVMOptions",
+                "-XX:-MaxFDLimit");
             theApp = LingeredApp.startApp(vmArgs);
             System.out.println("Started LingeredApp with pid " + theApp.getPid());
 
             List<String> cmds = List.of(
                     "flags", "flags -nd",
@@ -98,22 +97,22 @@
         System.out.println("Starting ClhsdbFlags all types test");
 
         LingeredApp theApp = null;
         try {
             ClhsdbLauncher test = new ClhsdbLauncher();
-            List<String> vmArgs = new ArrayList<String>();
-            vmArgs.add("-XX:+UnlockDiagnosticVMOptions");   // bool
-            vmArgs.add("-XX:ActiveProcessorCount=1");       // int
-            vmArgs.add("-XX:ParallelGCThreads=1");          // uint
-            vmArgs.add("-XX:MaxJavaStackTraceDepth=1024");  // intx
-            vmArgs.add("-XX:LogEventsBufferEntries=10");    // uintx
-            vmArgs.add("-XX:HeapSizePerGCThread=32m");      // size_t
-            vmArgs.add("-XX:NativeMemoryTracking=off");     // ccstr
-            vmArgs.add("-XX:OnError='echo error'");         // ccstrlist
-            vmArgs.add("-XX:CompileThresholdScaling=1.0");  // double
-            vmArgs.add("-XX:ErrorLogTimeout=120");          // uint64_t
-            vmArgs.addAll(Utils.getVmOptions());
+            // *Prepend* options to prevent interference with flags below
+            String[] vmArgs = Utils.prependTestJavaOpts(
+                "-XX:+UnlockDiagnosticVMOptions",  // bool
+                "-XX:ActiveProcessorCount=1",      // int
+                "-XX:ParallelGCThreads=1",         // uint
+                "-XX:MaxJavaStackTraceDepth=1024", // intx
+                "-XX:LogEventsBufferEntries=10",   // uintx
+                "-XX:HeapSizePerGCThread=32m",     // size_t
+                "-XX:NativeMemoryTracking=off",    // ccstr
+                "-XX:OnError='echo error'",        // ccstrlist
+                "-XX:CompileThresholdScaling=1.0", // double
+                "-XX:ErrorLogTimeout=120");        // uint64_t
             theApp = LingeredApp.startApp(vmArgs);
             System.out.println("Started LingeredApp with pid " + theApp.getPid());
 
             List<String> cmds = List.of("flags");
 
