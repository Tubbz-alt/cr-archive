diff a/test/hotspot/jtreg/serviceability/sa/TestInstanceKlassSizeForInterface.java b/test/hotspot/jtreg/serviceability/sa/TestInstanceKlassSizeForInterface.java
--- a/test/hotspot/jtreg/serviceability/sa/TestInstanceKlassSizeForInterface.java
+++ b/test/hotspot/jtreg/serviceability/sa/TestInstanceKlassSizeForInterface.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -19,11 +19,10 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
-import java.util.ArrayList;
 import java.util.List;
 
 import sun.jvm.hotspot.HotSpotAgent;
 import sun.jvm.hotspot.utilities.SystemDictionaryHelper;
 import sun.jvm.hotspot.oops.InstanceKlass;
@@ -45,15 +44,21 @@
  * @modules java.base/jdk.internal.misc
  *          jdk.hotspot.agent/sun.jvm.hotspot
  *          jdk.hotspot.agent/sun.jvm.hotspot.utilities
  *          jdk.hotspot.agent/sun.jvm.hotspot.oops
  *          jdk.hotspot.agent/sun.jvm.hotspot.debugger
- * @run main/othervm TestInstanceKlassSizeForInterface
+ * @build sun.hotspot.WhiteBox
+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox sun.hotspot.WhiteBox$WhiteBoxPermission
+ * @run main/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath/a:. TestInstanceKlassSizeForInterface
  */
 
+import sun.hotspot.WhiteBox;
+
 public class TestInstanceKlassSizeForInterface {
 
+    public static WhiteBox wb = WhiteBox.getWhiteBox();
+
     private static LingeredAppWithInterface theApp = null;
 
     private static void SAInstanceKlassSize(int lingeredAppPid,
                                             String[] instanceKlassNames) {
 
@@ -101,50 +106,39 @@
             "--add-modules=jdk.hotspot.agent",
             "--add-exports=jdk.hotspot.agent/sun.jvm.hotspot=ALL-UNNAMED",
             "--add-exports=jdk.hotspot.agent/sun.jvm.hotspot.utilities=ALL-UNNAMED",
             "--add-exports=jdk.hotspot.agent/sun.jvm.hotspot.oops=ALL-UNNAMED",
             "--add-exports=jdk.hotspot.agent/sun.jvm.hotspot.debugger=ALL-UNNAMED",
+            "-XX:+UnlockDiagnosticVMOptions",
+            "-XX:+WhiteBoxAPI",
+            "-Xbootclasspath/a:.",
             "TestInstanceKlassSizeForInterface",
             Integer.toString(lingeredAppPid)
         };
 
-        // Start a new process to attach to the LingeredApp process
+        // Start a new process to attach to the LingeredApp process to get SA info
         ProcessBuilder processBuilder = ProcessTools
                   .createJavaProcessBuilder(toolArgs);
         OutputAnalyzer SAOutput = ProcessTools.executeProcess(processBuilder);
         SAOutput.shouldHaveExitValue(0);
         System.out.println(SAOutput.getOutput());
 
-        // Run jcmd on the LingeredApp process
-        ProcessBuilder pb = new ProcessBuilder();
-        pb.command(new String[] {
-                          JDKToolFinder.getJDKTool("jcmd"),
-                          Long.toString(lingeredAppPid),
-                          "GC.class_stats",
-                          "VTab,ITab,OopMap,KlassBytes"
-                      }
-                  );
-
-        OutputAnalyzer jcmdOutput = new OutputAnalyzer(pb.start());
-        System.out.println(jcmdOutput.getOutput());
-
         // Match the sizes from both the output streams
         for (String instanceKlassName : instanceKlassNames) {
+            Class<?> iklass = Class.forName(instanceKlassName);
             System.out.println ("Trying to match for " + instanceKlassName);
-            String jcmdInstanceKlassSize = getJcmdInstanceKlassSize(
-                                                      jcmdOutput,
-                                                      instanceKlassName);
-            Asserts.assertNotNull(jcmdInstanceKlassSize,
-                "Could not get the instance klass size from the jcmd output");
+            String size = String.valueOf(wb.getKlassMetadataSize(iklass));
+            boolean match = false;
             for (String s : SAOutput.asLines()) {
                 if (s.contains(instanceKlassName)) {
-                   Asserts.assertTrue(
-                      s.contains(jcmdInstanceKlassSize),
-                      "The size computed by SA for " +
-                      instanceKlassName + " does not match.");
-                }
+                    Asserts.assertTrue(
+                       s.contains(size), "The size computed by SA for" +
+                       instanceKlassName + " does not match.");
+                       match = true;
+                    }
             }
+            Asserts.assertTrue(match, "Found a match for " + instanceKlassName);
         }
     }
 
     public static void main (String... args) throws Exception {
         String[] instanceKlassNames = new String[] {
@@ -153,15 +147,12 @@
                                           "LingeredAppWithInterface$1"
                                       };
 
         if (args == null || args.length == 0) {
             try {
-                List<String> vmArgs = new ArrayList<String>();
-                vmArgs.addAll(Utils.getVmOptions());
-
                 theApp = new LingeredAppWithInterface();
-                LingeredApp.startApp(vmArgs, theApp);
+                LingeredApp.startApp(theApp);
                 createAnotherToAttach(instanceKlassNames,
                                       (int)theApp.getPid());
             } finally {
                 LingeredApp.stopApp(theApp);
             }
