diff a/test/hotspot/jtreg/serviceability/sa/sadebugd/SADebugDTest.java b/test/hotspot/jtreg/serviceability/sa/sadebugd/SADebugDTest.java
--- a/test/hotspot/jtreg/serviceability/sa/sadebugd/SADebugDTest.java
+++ b/test/hotspot/jtreg/serviceability/sa/sadebugd/SADebugDTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,61 +21,54 @@
  * questions.
  */
 
 /**
  * @test
+ * @bug 8163805 8224252
  * @summary Checks that the jshdb debugd utility sucessfully starts
  *          and tries to attach to a running process
  * @requires vm.hasSAandCanAttach
+ * @requires os.family != "windows"
  * @modules java.base/jdk.internal.misc
  * @library /test/lib
  *
  * @run main/othervm SADebugDTest
  */
 
-import java.io.File;
-import java.util.concurrent.CountDownLatch;
-import java.io.InputStreamReader;
-import java.io.BufferedReader;
-import java.io.Reader;
 import java.util.concurrent.TimeUnit;
-import java.util.function.Predicate;
-import static jdk.test.lib.Asserts.assertTrue;
+
+import jdk.test.lib.apps.LingeredApp;
+import jdk.test.lib.JDKToolLauncher;
 import static jdk.test.lib.process.ProcessTools.startProcess;
 
 public class SADebugDTest {
 
-    private static final String GOLDEN = "Attaching to process ID %d and starting RMI services, please wait...";
-
-    private static final String JAVA_HOME = (System.getProperty("test.jdk") != null)
-            ? System.getProperty("test.jdk") : System.getProperty("java.home");
-
-    private static final String JAVA_BIN_DIR
-            = JAVA_HOME + File.separator + "bin" + File.separator;
-
-    private static final String JHSDB = JAVA_BIN_DIR + "jhsdb";
+    private static final String GOLDEN = "Debugger attached";
 
     public static void main(String[] args) throws Exception {
+        LingeredApp app = null;
 
-        long ourPid = ProcessHandle.current().pid();
-
-        // The string we are expecting in the debugd ouput
-        String golden = String.format(GOLDEN, ourPid);
+        try {
+            app = LingeredApp.startApp();
+            System.out.println("Started LingeredApp with pid " + app.getPid());
 
-        // We are going to run 'jhsdb debugd <our pid>'
-        // The startProcess will block untl the 'golden' string appears in either process' stdout or stderr
-        // In case of timeout startProcess kills the debugd process
-        ProcessBuilder pb = new ProcessBuilder();
-        pb.command(JHSDB, "debugd", String.valueOf(ourPid));
-        Process debugd = startProcess("debugd", pb, null, (line) -> line.trim().contains(golden), 0, TimeUnit.SECONDS);
+            JDKToolLauncher jhsdbLauncher = JDKToolLauncher.createUsingTestJDK("jhsdb");
+            jhsdbLauncher.addToolArg("debugd");
+            jhsdbLauncher.addToolArg("--pid");
+            jhsdbLauncher.addToolArg(Long.toString(app.getPid()));
+            ProcessBuilder pb = new ProcessBuilder(jhsdbLauncher.getCommand());
 
-        // If we are here, this means we have received the golden line and the test has passed
-        // The debugd remains running, we have to kill it
-        debugd.destroy();
+            // The startProcess will block untl the 'golden' string appears in either process' stdout or stderr
+            // In case of timeout startProcess kills the debugd process
+            Process debugd = startProcess("debugd", pb, null, l -> l.contains(GOLDEN), 0, TimeUnit.SECONDS);
 
-    }
+            // If we are here, this means we have received the golden line and the test has passed
+            // The debugd remains running, we have to kill it
+            debugd.destroy();
+            debugd.waitFor();
+        } finally {
+            LingeredApp.stopApp(app);
+        }
 
-    private static void log(String string) {
-        System.out.println(string);
     }
 
 }
