diff a/test/hotspot/jtreg/serviceability/dcmd/gc/RunGCTest.java b/test/hotspot/jtreg/serviceability/dcmd/gc/RunGCTest.java
--- a/test/hotspot/jtreg/serviceability/dcmd/gc/RunGCTest.java
+++ b/test/hotspot/jtreg/serviceability/dcmd/gc/RunGCTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -34,17 +34,16 @@
 import jdk.test.lib.dcmd.JMXExecutor;
 
 /*
  * @test
  * @summary Test of diagnostic command GC.run
- * @requires vm.gc != "Z"
  * @library /test/lib
  * @modules java.base/jdk.internal.misc
  *          java.compiler
  *          java.management
  *          jdk.internal.jvmstat/sun.jvmstat.monitor
- * @run testng/othervm -Xlog:gc=debug:RunGC.gclog -XX:-ExplicitGCInvokesConcurrent RunGCTest
+ * @run testng/othervm -Xlog:gc:RunGC.gclog -XX:-ExplicitGCInvokesConcurrent RunGCTest
  */
 public class RunGCTest {
     public void run(CommandExecutor executor) {
         executor.execute("GC.run");
 
@@ -56,11 +55,11 @@
         } catch (IOException e) {
             Assert.fail("Test error: Could not read GC log file: " + gcLogPath, e);
         }
 
         OutputAnalyzer output = new OutputAnalyzer(gcLog, "");
-        output.shouldContain("Pause Full (Diagnostic Command)");
+        output.shouldContain("(Diagnostic Command)");
     }
 
     @Test
     public void jmx() {
         run(new JMXExecutor());
