diff a/test/hotspot/jtreg/gc/arguments/TestTargetSurvivorRatioFlag.java b/test/hotspot/jtreg/gc/arguments/TestTargetSurvivorRatioFlag.java
--- a/test/hotspot/jtreg/gc/arguments/TestTargetSurvivorRatioFlag.java
+++ b/test/hotspot/jtreg/gc/arguments/TestTargetSurvivorRatioFlag.java
@@ -21,12 +21,10 @@
  * questions.
  */
 
 package gc.arguments;
 
-import static java.lang.ref.Reference.reachabilityFence;
-
 /*
  * @test TestTargetSurvivorRatioFlag
  * @key gc
  * @summary Verify that option TargetSurvivorRatio affects survivor space occupancy after minor GC.
  * @requires vm.opt.ExplicitGCInvokesConcurrent != true
@@ -48,13 +46,13 @@
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import jdk.internal.misc.Unsafe;
 import jdk.test.lib.process.OutputAnalyzer;
-import jdk.test.lib.process.ProcessTools;
 import jdk.test.lib.Utils;
 import sun.hotspot.WhiteBox;
+import static gc.testlibrary.Allocation.blackHole;
 
 /* In order to test that TargetSurvivorRatio affects survivor space occupancy
  * we setup fixed MaxTenuringThreshold and then verifying that if size of allocated
  * objects is lower than (survivor_size * TargetSurvivorRatio / 100) then objects
  * will stay in survivor space until MaxTenuringThreshold minor GC cycles.
@@ -117,11 +115,11 @@
     public static void negativeTest(int ratio, LinkedList<String> options) throws Exception {
         LinkedList<String> vmOptions = new LinkedList<>(options);
         vmOptions.add("-XX:TargetSurvivorRatio=" + ratio);
         vmOptions.add("-version");
 
-        ProcessBuilder procBuilder = ProcessTools.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));
+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));
         OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());
 
         analyzer.shouldHaveExitValue(1);
         analyzer.shouldContain("Error: Could not create the Java Virtual Machine.");
     }
@@ -152,11 +150,11 @@
                 "-XX:TargetPLABWastePct=" + 1,
                 TargetSurvivorRatioVerifier.class.getName(),
                 Integer.toString(ratio)
         );
 
-        ProcessBuilder procBuilder = ProcessTools.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));
+        ProcessBuilder procBuilder = GCArguments.createJavaProcessBuilder(vmOptions.toArray(new String[vmOptions.size()]));
         OutputAnalyzer analyzer = new OutputAnalyzer(procBuilder.start());
 
         analyzer.shouldHaveExitValue(0);
 
         String output = analyzer.getOutput();
@@ -297,11 +295,11 @@
             // allocate memory
             allocator.allocateMemoryAndVerify();
 
             // force minor GC
             while (youngGCBean.getCollectionCount() <= initialGcId + MAX_TENURING_THRESHOLD * 2) {
-                reachabilityFence(new byte[ARRAY_LENGTH]);
+                blackHole(new byte[ARRAY_LENGTH]);
             }
 
             allocator.release();
             System.out.println(END_TEST);
         }
