diff a/test/hotspot/gtest/gc/g1/test_g1FreeIdSet.cpp b/test/hotspot/gtest/gc/g1/test_g1FreeIdSet.cpp
--- a/test/hotspot/gtest/gc/g1/test_g1FreeIdSet.cpp
+++ b/test/hotspot/gtest/gc/g1/test_g1FreeIdSet.cpp
@@ -25,11 +25,10 @@
 #include "precompiled.hpp"
 #include "gc/g1/g1FreeIdSet.hpp"
 #include "memory/allocation.hpp"
 #include "runtime/atomic.hpp"
 #include "runtime/interfaceSupport.inline.hpp"
-#include "runtime/orderAccess.hpp"
 #include "runtime/semaphore.inline.hpp"
 #include "runtime/thread.hpp"
 #include "utilities/debug.hpp"
 #include "utilities/globalDefinitions.hpp"
 #include "utilities/ostream.hpp"
@@ -106,18 +105,18 @@
     _allocations(0),
     _thread_number(thread_number)
   {}
 
   virtual void main_run() {
-    while (OrderAccess::load_acquire(_continue_running)) {
+    while (Atomic::load_acquire(_continue_running)) {
       uint id = _set->claim_par_id();
       _set->release_par_id(id);
       ++_allocations;
       ThreadBlockInVM tbiv(this); // Safepoint check.
     }
     tty->print_cr("%u allocations: " SIZE_FORMAT, _thread_number, _allocations);
-    Atomic::add(_allocations, _total_allocations);
+    Atomic::add(_total_allocations, _allocations);
   }
 };
 
 TEST_VM(G1FreeIdSetTest, stress) {
   const uint start = 5;
@@ -143,13 +142,13 @@
 
   JavaThread* this_thread = JavaThread::current();
   tty->print_cr("Stressing G1FreeIdSet for %u ms", milliseconds_to_run);
   {
     ThreadInVMfromNative invm(this_thread);
-    os::sleep(this_thread, milliseconds_to_run, true);
+    this_thread->sleep(milliseconds_to_run);
   }
-  OrderAccess::release_store(&continue_running, false);
+  Atomic::release_store(&continue_running, false);
   for (uint i = 0; i < nthreads; ++i) {
     ThreadInVMfromNative invm(this_thread);
     post.wait_with_safepoint_check(this_thread);
   }
   tty->print_cr("total allocations: " SIZE_FORMAT, total_allocations);
