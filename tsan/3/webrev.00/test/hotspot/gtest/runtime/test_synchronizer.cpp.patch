diff a/test/hotspot/gtest/runtime/test_synchronizer.cpp b/test/hotspot/gtest/runtime/test_synchronizer.cpp
--- a/test/hotspot/gtest/runtime/test_synchronizer.cpp
+++ b/test/hotspot/gtest/runtime/test_synchronizer.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -28,42 +28,42 @@
 #include "unittest.hpp"
 
 class SynchronizerTest : public ::testing::Test {
   public:
     static u_char* get_gvars_addr() { return ObjectSynchronizer::get_gvars_addr(); }
-    static u_char* get_gvars_hcSequence_addr() { return ObjectSynchronizer::get_gvars_hcSequence_addr(); }
+    static u_char* get_gvars_hc_sequence_addr() { return ObjectSynchronizer::get_gvars_hc_sequence_addr(); }
     static size_t get_gvars_size() { return ObjectSynchronizer::get_gvars_size(); }
-    static u_char* get_gvars_stwRandom_addr() { return ObjectSynchronizer::get_gvars_stwRandom_addr(); }
+    static u_char* get_gvars_stw_random_addr() { return ObjectSynchronizer::get_gvars_stw_random_addr(); }
 };
 
 TEST_VM(SynchronizerTest, sanity) {
   uint cache_line_size = VM_Version::L1_data_cache_line_size();
   if (cache_line_size != 0) {
     // We were able to determine the L1 data cache line size so
     // do some cache line specific sanity checks
 
     u_char *addr_begin = SynchronizerTest::get_gvars_addr();
-    u_char *addr_stwRandom = SynchronizerTest::get_gvars_stwRandom_addr();
-    u_char *addr_hcSequence = SynchronizerTest::get_gvars_hcSequence_addr();
+    u_char *addr_stw_random = SynchronizerTest::get_gvars_stw_random_addr();
+    u_char *addr_hc_sequence = SynchronizerTest::get_gvars_hc_sequence_addr();
     size_t gvars_size = SynchronizerTest::get_gvars_size();
 
-    uint offset_stwRandom = (uint) (addr_stwRandom - addr_begin);
-    uint offset_hcSequence = (uint) (addr_hcSequence - addr_begin);
-    uint offset_hcSequence_stwRandom = offset_hcSequence - offset_stwRandom;
-    uint offset_hcSequence_struct_end = (uint) gvars_size - offset_hcSequence;
+    uint offset_stw_random = (uint) (addr_stw_random - addr_begin);
+    uint offset_hc_sequence = (uint) (addr_hc_sequence - addr_begin);
+    uint offset_hc_sequence_stw_random = offset_hc_sequence - offset_stw_random;
+    uint offset_hc_sequence_struct_end = (uint) gvars_size - offset_hc_sequence;
 
-    EXPECT_GE(offset_stwRandom, cache_line_size)
-            << "the SharedGlobals.stwRandom field is closer "
+    EXPECT_GE(offset_stw_random, cache_line_size)
+            << "the SharedGlobals.stw_random field is closer "
             << "to the struct beginning than a cache line which permits "
             << "false sharing.";
 
-    EXPECT_GE(offset_hcSequence_stwRandom, cache_line_size)
-            << "the SharedGlobals.stwRandom and "
-            << "SharedGlobals.hcSequence fields are closer than a cache "
+    EXPECT_GE(offset_hc_sequence_stw_random, cache_line_size)
+            << "the SharedGlobals.stw_random and "
+            << "SharedGlobals.hc_sequence fields are closer than a cache "
             << "line which permits false sharing.";
 
-    EXPECT_GE(offset_hcSequence_struct_end, cache_line_size)
-            << "the SharedGlobals.hcSequence field is closer "
+    EXPECT_GE(offset_hc_sequence_struct_end, cache_line_size)
+            << "the SharedGlobals.hc_sequence field is closer "
             << "to the struct end than a cache line which permits false "
             << "sharing.";
   }
 }
