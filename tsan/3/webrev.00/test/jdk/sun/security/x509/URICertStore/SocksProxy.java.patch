diff a/test/jdk/sun/security/x509/URICertStore/SocksProxy.java b/test/jdk/sun/security/x509/URICertStore/SocksProxy.java
--- a/test/jdk/sun/security/x509/URICertStore/SocksProxy.java
+++ b/test/jdk/sun/security/x509/URICertStore/SocksProxy.java
@@ -20,19 +20,20 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 import java.io.IOException;
+import java.net.InetAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.util.Objects;
 import java.util.function.Consumer;
 
 import javax.net.ServerSocketFactory;
 
 /*
- * A simple socks4 proxy for traveling socket.
+ * A simple socks proxy for traveling socket.
  */
 class SocksProxy implements Runnable, AutoCloseable {
 
     private ServerSocket server;
     private Consumer<Socket> socketConsumer;
@@ -47,14 +48,15 @@
         Objects.requireNonNull(socketConsumer, "socketConsumer cannot be null");
 
         ServerSocket server
                 = ServerSocketFactory.getDefault().createServerSocket(0);
 
-        System.setProperty("socksProxyHost", "127.0.0.1");
+        System.setProperty("socksProxyHost",
+                InetAddress.getLoopbackAddress().getHostAddress());
         System.setProperty("socksProxyPort",
                 String.valueOf(server.getLocalPort()));
-        System.setProperty("socksProxyVersion", "4");
+        System.setProperty("socksProxyVersion", "5");
 
         SocksProxy proxy = new SocksProxy(server, socketConsumer);
         Thread proxyThread = new Thread(proxy, "Proxy");
         proxyThread.setDaemon(true);
         proxyThread.start();
