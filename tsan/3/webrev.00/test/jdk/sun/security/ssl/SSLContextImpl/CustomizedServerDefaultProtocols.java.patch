diff a/test/jdk/sun/security/ssl/SSLContextImpl/CustomizedServerDefaultProtocols.java b/test/jdk/sun/security/ssl/SSLContextImpl/CustomizedServerDefaultProtocols.java
--- a/test/jdk/sun/security/ssl/SSLContextImpl/CustomizedServerDefaultProtocols.java
+++ b/test/jdk/sun/security/ssl/SSLContextImpl/CustomizedServerDefaultProtocols.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -24,10 +24,11 @@
 // SunJSSE does not support dynamic system properties, no way to re-use
 // system properties in samevm/agentvm mode.
 
 /*
  * @test
+ * @bug 8196584 8190492
  * @summary Test jdk.tls.server.protocols with TLS
  * @run main/othervm -Djdk.tls.server.protocols="SSLv3,TLSv1,TLSv1.1"
  *      CustomizedServerDefaultProtocols
  */
 
@@ -46,36 +47,38 @@
 
 public class CustomizedServerDefaultProtocols {
 
     final static String[] supportedProtocols = new String[]{
             "SSLv2Hello", "SSLv3", "TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"};
+    final static String[] serverDefaultProtocols = new String[] {
+            "TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"};
 
     enum ContextVersion {
         TLS_CV_01("SSL",
                 new String[]{"SSLv3", "TLSv1", "TLSv1.1"},
-                new String[]{"SSLv3", "TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"}),
+                new String[]{"TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"}),
         TLS_CV_02("TLS",
                 new String[]{"SSLv3", "TLSv1", "TLSv1.1"},
-                new String[]{"SSLv3", "TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"}),
+                new String[]{"TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"}),
         TLS_CV_03("SSLv3",
-                supportedProtocols,
-                new String[]{"SSLv3", "TLSv1"}),
+                serverDefaultProtocols,
+                new String[]{"TLSv1"}),
         TLS_CV_04("TLSv1",
-                supportedProtocols,
-                new String[]{"SSLv3", "TLSv1"}),
+                serverDefaultProtocols,
+                new String[]{"TLSv1"}),
         TLS_CV_05("TLSv1.1",
-                supportedProtocols,
-                new String[]{"SSLv3", "TLSv1", "TLSv1.1"}),
+                serverDefaultProtocols,
+                new String[]{"TLSv1", "TLSv1.1"}),
         TLS_CV_06("TLSv1.2",
-                supportedProtocols,
-                new String[]{"SSLv3", "TLSv1", "TLSv1.1", "TLSv1.2"}),
+                serverDefaultProtocols,
+                new String[]{"TLSv1", "TLSv1.1", "TLSv1.2"}),
         TLS_CV_07("TLSv1.3",
-                supportedProtocols,
-                new String[]{"SSLv3", "TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"}),
+                serverDefaultProtocols,
+                new String[]{"TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"}),
         TLS_CV_08("Default",
                 new String[]{"SSLv3", "TLSv1", "TLSv1.1"},
-                new String[]{"SSLv3", "TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"});
+                new String[]{"TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3"});
 
         final String contextVersion;
         final String[] serverEnabledProtocols;
         final String[] clientEnabledProtocols;
 
@@ -88,20 +91,22 @@
     }
 
     private static boolean checkProtocols(String[] target, String[] expected) {
         boolean success = true;
         if (target.length == 0) {
-            System.out.println("\tError: No protocols");
+            System.out.println("\t\t\t*** Error: No protocols");
             success = false;
         }
 
         if (!protocolEquals(target, expected)) {
-            System.out.println("\tError: Expected to get protocols " +
+            System.out.println("\t\t\t*** Error: Expected to get protocols " +
                     Arrays.toString(expected));
             success = false;
         }
-        System.out.println("\t  Protocols found " + Arrays.toString(target));
+        System.out.println("\t\t\t  Protocols found " + Arrays.toString(target));
+        System.out.println("\t\t\t--> Protocol check passed!!");
+
         return success;
     }
 
     private static boolean protocolEquals(
             String[] actualProtocols,
@@ -121,14 +126,15 @@
     }
 
     private static boolean checkCipherSuites(String[] target) {
         boolean success = true;
         if (target.length == 0) {
-            System.out.println("\tError: No cipher suites");
+            System.out.println("\t\t\t*** Error: No cipher suites");
             success = false;
         }
 
+        System.out.println("\t\t\t--> Cipher check passed!!");
         return success;
     }
 
     public static void main(String[] args) throws Exception {
         // reset the security property to make sure that the algorithms
@@ -143,11 +149,12 @@
 
     static void Test() throws Exception {
         boolean failed = false;
 
         for (ContextVersion cv : ContextVersion.values()) {
-            System.out.println("Checking SSLContext of " + cv.contextVersion);
+            System.out.println("\n\nChecking SSLContext of " + cv.contextVersion);
+            System.out.println("============================");
             SSLContext context = SSLContext.getInstance(cv.contextVersion);
 
             // Default SSLContext is initialized automatically.
             if (!cv.contextVersion.equals("Default")) {
                 // Use default TK, KM and random.
@@ -157,20 +164,21 @@
             //
             // Check SSLContext
             //
             // Check default SSLParameters of SSLContext
             System.out.println("\tChecking default SSLParameters");
+            System.out.println("\t\tChecking SSLContext.getDefaultSSLParameters().getProtocols");
             SSLParameters parameters = context.getDefaultSSLParameters();
 
             String[] protocols = parameters.getProtocols();
             failed |= !checkProtocols(protocols, cv.clientEnabledProtocols);
 
             String[] ciphers = parameters.getCipherSuites();
             failed |= !checkCipherSuites(ciphers);
 
             // Check supported SSLParameters of SSLContext
-            System.out.println("\tChecking supported SSLParameters");
+            System.out.println("\t\tChecking supported SSLParameters");
             parameters = context.getSupportedSSLParameters();
 
             protocols = parameters.getProtocols();
             failed |= !checkProtocols(protocols, supportedProtocols);
 
@@ -181,109 +189,107 @@
             // Check SSLEngine
             //
             // Check SSLParameters of SSLEngine
             System.out.println();
             System.out.println("\tChecking SSLEngine of this SSLContext");
-            System.out.println("\tChecking SSLEngine.getSSLParameters()");
+            System.out.println("\t\tChecking SSLEngine.getSSLParameters()");
             SSLEngine engine = context.createSSLEngine();
             engine.setUseClientMode(true);
             parameters = engine.getSSLParameters();
 
             protocols = parameters.getProtocols();
             failed |= !checkProtocols(protocols, cv.clientEnabledProtocols);
 
             ciphers = parameters.getCipherSuites();
             failed |= !checkCipherSuites(ciphers);
 
-            System.out.println("\tChecking SSLEngine.getEnabledProtocols()");
+            System.out.println("\t\tChecking SSLEngine.getEnabledProtocols()");
             protocols = engine.getEnabledProtocols();
             failed |= !checkProtocols(protocols, cv.clientEnabledProtocols);
 
-            System.out.println("\tChecking SSLEngine.getEnabledCipherSuites()");
+            System.out.println("\t\tChecking SSLEngine.getEnabledCipherSuites()");
             ciphers = engine.getEnabledCipherSuites();
             failed |= !checkCipherSuites(ciphers);
 
-            System.out.println("\tChecking SSLEngine.getSupportedProtocols()");
+            System.out.println("\t\tChecking SSLEngine.getSupportedProtocols()");
             protocols = engine.getSupportedProtocols();
             failed |= !checkProtocols(protocols, supportedProtocols);
 
             System.out.println(
-                    "\tChecking SSLEngine.getSupportedCipherSuites()");
+                    "\t\tChecking SSLEngine.getSupportedCipherSuites()");
             ciphers = engine.getSupportedCipherSuites();
             failed |= !checkCipherSuites(ciphers);
 
             //
             // Check SSLSocket
             //
             // Check SSLParameters of SSLSocket
             System.out.println();
             System.out.println("\tChecking SSLSocket of this SSLContext");
-            System.out.println("\tChecking SSLSocket.getSSLParameters()");
+            System.out.println("\t\tChecking SSLSocket.getSSLParameters()");
             SocketFactory fac = context.getSocketFactory();
             SSLSocket socket = (SSLSocket) fac.createSocket();
             parameters = socket.getSSLParameters();
 
             protocols = parameters.getProtocols();
             failed |= !checkProtocols(protocols, cv.clientEnabledProtocols);
 
             ciphers = parameters.getCipherSuites();
             failed |= !checkCipherSuites(ciphers);
 
-            System.out.println("\tChecking SSLSocket.getEnabledProtocols()");
+            System.out.println("\t\tChecking SSLSocket.getEnabledProtocols()");
             protocols = socket.getEnabledProtocols();
             failed |= !checkProtocols(protocols, cv.clientEnabledProtocols);
 
-            System.out.println("\tChecking SSLSocket.getEnabledCipherSuites()");
+            System.out.println("\t\tChecking SSLSocket.getEnabledCipherSuites()");
             ciphers = socket.getEnabledCipherSuites();
             failed |= !checkCipherSuites(ciphers);
 
-            System.out.println("\tChecking SSLSocket.getSupportedProtocols()");
+            System.out.println("\t\tChecking SSLSocket.getSupportedProtocols()");
             protocols = socket.getSupportedProtocols();
             failed |= !checkProtocols(protocols, supportedProtocols);
 
             System.out.println(
-                    "\tChecking SSLSocket.getSupportedCipherSuites()");
+                    "\t\tChecking SSLSocket.getSupportedCipherSuites()");
             ciphers = socket.getSupportedCipherSuites();
             failed |= !checkCipherSuites(ciphers);
 
             //
             // Check SSLServerSocket
             //
             // Check SSLParameters of SSLServerSocket
             System.out.println();
             System.out.println("\tChecking SSLServerSocket of this SSLContext");
-            System.out.println("\tChecking SSLServerSocket.getSSLParameters()");
+            System.out.println("\t\tChecking SSLServerSocket.getSSLParameters()");
             SSLServerSocketFactory sf = context.getServerSocketFactory();
             SSLServerSocket ssocket = (SSLServerSocket) sf.createServerSocket();
             parameters = ssocket.getSSLParameters();
 
             protocols = parameters.getProtocols();
             failed |= !checkProtocols(protocols, cv.serverEnabledProtocols);
 
             ciphers = parameters.getCipherSuites();
             failed |= !checkCipherSuites(ciphers);
 
-            System.out.println("\tChecking SSLEngine.getEnabledProtocols()");
+            System.out.println("\t\tChecking SSLEngine.getEnabledProtocols()");
             protocols = ssocket.getEnabledProtocols();
             failed |= !checkProtocols(protocols, cv.serverEnabledProtocols);
 
-            System.out.println("\tChecking SSLEngine.getEnabledCipherSuites()");
+            System.out.println("\t\tChecking SSLEngine.getEnabledCipherSuites()");
             ciphers = ssocket.getEnabledCipherSuites();
             failed |= !checkCipherSuites(ciphers);
 
-            System.out.println("\tChecking SSLEngine.getSupportedProtocols()");
+            System.out.println("\t\tChecking SSLEngine.getSupportedProtocols()");
             protocols = ssocket.getSupportedProtocols();
             failed |= !checkProtocols(protocols, supportedProtocols);
 
             System.out.println(
-                    "\tChecking SSLEngine.getSupportedCipherSuites()");
+                    "\t\tChecking SSLEngine.getSupportedCipherSuites()");
             ciphers = ssocket.getSupportedCipherSuites();
             failed |= !checkCipherSuites(ciphers);
 
             if (failed) {
                 throw new Exception("Run into problems, see log for more details");
-            } else {
-                System.out.println("\t... Success");
             }
         }
     }
 }
