diff a/test/jdk/sun/security/util/FilePermCompat/CompatImpact.java b/test/jdk/sun/security/util/FilePermCompat/CompatImpact.java
--- a/test/jdk/sun/security/util/FilePermCompat/CompatImpact.java
+++ b/test/jdk/sun/security/util/FilePermCompat/CompatImpact.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -88,22 +88,22 @@
                 p = p(args[0], cwd + "/f")
                         .args("f", cwd + "/f")
                         .debug(testcase)
                         .start();
                 if (p.waitFor() != 0) {
-                    Files.copy(Paths.get("stderr." + testcase), System.out);
+                    Files.copy(Paths.get(testcase + ".stderr"), System.out);
                     failed += testcase + " ";
                 }
 
                 // Granting a FilePermission on a relative path
                 testcase = "PonR";
                 p = p(args[0], "f")
                         .args("f", cwd + "/f")
                         .debug(testcase)
                         .start();
                 if (p.waitFor() != 0) {
-                    Files.copy(Paths.get("stderr." + testcase), System.out);
+                    Files.copy(Paths.get(testcase + ".stderr"), System.out);
                     failed += testcase + " ";
                 }
 
                 // Reading file on classpath, not cwd
                 testcase = "cp";
@@ -112,11 +112,11 @@
                 p = p(args[0], "x")
                         .args(cp + "/f", cprel + "/f")
                         .debug(testcase)
                         .start();
                 if (p.waitFor() != 0) {
-                    Files.copy(Paths.get("stderr." + testcase), System.out);
+                    Files.copy(Paths.get(testcase + ".stderr"), System.out);
                     failed += testcase + " ";
                 }
 
                 // Reading file on classpath, cwd
                 testcase = "cpHere";
@@ -124,11 +124,11 @@
                         .args(cwd + "/f", "f", "RES")
                         .cp(".")   // Must! cancel the old CLASSPATH.
                         .debug(testcase)
                         .start();
                 if (p.waitFor() != 0) {
-                    Files.copy(Paths.get("stderr." + testcase), System.out);
+                    Files.copy(Paths.get(testcase + ".stderr"), System.out);
                     failed += testcase + " ";
                 }
 
                 // Reading file on classpath, cwd
                 testcase = "cpSub";
@@ -136,11 +136,11 @@
                         .args(cwd + "/sub/f", "sub/f", "RES")
                         .cp("sub")   // Must! There's CLASSPATH.
                         .debug(testcase)
                         .start();
                 if (p.waitFor() != 0) {
-                    Files.copy(Paths.get("stderr." + testcase), System.out);
+                    Files.copy(Paths.get(testcase + ".stderr"), System.out);
                     failed += testcase + " ";
                 }
 
                 if (!failed.isEmpty()) {
                     throw new Exception(failed + "failed");
@@ -236,10 +236,11 @@
                 break;
             case "mine":
                 // For my policy, f is passed into test and new MP(f)
                 // will be set as new policy
                 p.perm(new SecurityPermission("setPolicy"));
+                p.perm(new SecurityPermission("getPolicy"));
                 p.args(f);
                 break;
             default:
                 throw new Exception("unknown " + type);
         }
@@ -247,11 +248,13 @@
     }
 
     // My own Policy impl, with only one granted permission, also not smart
     // enough to know whether ProtectionDomain grants any permission
     static class MP extends Policy {
+        static final Policy DEFAULT_POLICY = Policy.getPolicy();
         final PermissionCollection pc;
+
         MP(String f) {
             FilePermission p = new FilePermission(f, "read");
             pc = p.newPermissionCollection();
             pc.add(p);
         }
@@ -265,9 +268,9 @@
             return pc;
         }
 
         @Override
         public boolean implies(ProtectionDomain domain, Permission permission) {
-            return pc.implies(permission);
+            return pc.implies(permission) || DEFAULT_POLICY.implies(domain, permission);
         }
     }
 }
