diff a/test/jdk/sun/tools/jhsdb/heapconfig/JMapHeapConfigTest.java b/test/jdk/sun/tools/jhsdb/heapconfig/JMapHeapConfigTest.java
--- a/test/jdk/sun/tools/jhsdb/heapconfig/JMapHeapConfigTest.java
+++ b/test/jdk/sun/tools/jhsdb/heapconfig/JMapHeapConfigTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,10 +22,11 @@
  */
 
 import java.io.IOException;
 import java.math.BigDecimal;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
 import jdk.test.lib.apps.LingeredApp;
@@ -50,19 +51,20 @@
     static final String expectedJMapValues[] = {
         "MinHeapFreeRatio",
         "MaxHeapFreeRatio",
         "MaxHeapSize",
         "NewSize",
-        "MaxNewSize",
         "OldSize",
         "NewRatio",
         "SurvivorRatio",
         "MetaspaceSize",
         "CompressedClassSpaceSize",
         "G1HeapRegionSize"};
 
-    // ignoring MaxMetaspaceSize
+    // Test can't deal with negative jlongs:
+    //  ignoring MaxMetaspaceSize
+    //  ignoring MaxNewSize
 
     static final String desiredMaxHeapSize = "-Xmx128m";
 
     private static Map<String, String> parseJMapOutput(List<String> jmapOutput) {
         Map<String, String> heapConfigMap = new HashMap<String, String>();
@@ -124,30 +126,30 @@
             // so just print the warning and continue
             System.err.println("Warning! Last modified time doesn't work.");
         }
 
         boolean mx_found = false;
-        List<String> jvmOptions = Utils.getVmOptions();
+        String[] jvmOptions = Utils.getTestJavaOpts();
         for (String option : jvmOptions) {
             if (option.startsWith("-Xmx")) {
                System.out.println("INFO: maximum heap size set by JTREG as " + option);
                mx_found = true;
                break;
            }
         }
 
         // Forward vm options to LingeredApp
         ArrayList<String> cmd = new ArrayList();
-        cmd.addAll(Utils.getVmOptions());
+        Collections.addAll(cmd, Utils.getTestJavaOpts());
         if (!mx_found) {
             cmd.add(desiredMaxHeapSize);
             System.out.println("INFO: maximum heap size set explicitly as " + desiredMaxHeapSize);
         }
         cmd.add("-XX:+PrintFlagsFinal");
 
         TmtoolTestScenario tmt = TmtoolTestScenario.create("jmap", "--heap");
-        int exitcode = tmt.launch(cmd);
+        int exitcode = tmt.launch(cmd.toArray(new String[0]));
         if (exitcode != 0) {
             throw new RuntimeException("Test FAILED jmap exits with non zero exit code " + exitcode);
         }
 
         Map<String,String> parsedJmapOutput = parseJMapOutput(tmt.getToolOutput());
