diff a/test/jdk/sun/tools/jstack/BasicJStackTest.java b/test/jdk/sun/tools/jstack/BasicJStackTest.java
--- a/test/jdk/sun/tools/jstack/BasicJStackTest.java
+++ b/test/jdk/sun/tools/jstack/BasicJStackTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -20,10 +20,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 import java.util.Arrays;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 
 import jdk.test.lib.process.OutputAnalyzer;
 import jdk.test.lib.process.ProcessTools;
 import jdk.test.lib.JDKToolLauncher;
 
@@ -38,35 +40,50 @@
     private static ProcessBuilder processBuilder = new ProcessBuilder();
 
     public static void main(String[] args) throws Exception {
         testJstackNoArgs();
         testJstack_l();
+        testJstackUTF8Encoding();
     }
 
     private static void testJstackNoArgs() throws Exception {
-        OutputAnalyzer output = jstack();
+        String marker = "testJstackNoArgs";
+        OutputAnalyzer output = jstack(marker);
         output.shouldHaveExitValue(0);
+        output.shouldContain(marker);
     }
 
     private static void testJstack_l() throws Exception {
-        OutputAnalyzer output = jstack("-l");
+        String marker = "testJstack_l";
+        OutputAnalyzer output = jstack(marker, "-l");
         output.shouldHaveExitValue(0);
+        output.shouldContain(marker);
     }
 
-    private static OutputAnalyzer jstack(String... toolArgs) throws Exception {
+    private static void testJstackUTF8Encoding() throws Exception {
+        String marker = "markerName" + "\u00e4\u0bb5".repeat(60);
+        OutputAnalyzer output = jstack(marker);
+        output.shouldHaveExitValue(0);
+        output.shouldContain(marker);
+    }
+
+    private static OutputAnalyzer jstack(String marker, String... toolArgs) throws Exception {
+        Charset cs = StandardCharsets.UTF_8;
+        Thread.currentThread().setName(marker);
         JDKToolLauncher launcher = JDKToolLauncher.createUsingTestJDK("jstack");
         launcher.addVMArg("-XX:+UsePerfData");
+        launcher.addVMArg("-Dfile.encoding=" + cs);
         if (toolArgs != null) {
             for (String toolArg : toolArgs) {
                 launcher.addToolArg(toolArg);
             }
         }
         launcher.addToolArg(Long.toString(ProcessTools.getProcessId()));
 
         processBuilder.command(launcher.getCommand());
         System.out.println(Arrays.toString(processBuilder.command().toArray()).replace(",", ""));
-        OutputAnalyzer output = ProcessTools.executeProcess(processBuilder);
+        OutputAnalyzer output = ProcessTools.executeProcess(processBuilder, null, cs);
         System.out.println(output.getOutput());
 
         return output;
     }
 
