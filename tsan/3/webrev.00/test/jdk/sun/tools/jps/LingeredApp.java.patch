diff a/test/jdk/sun/tools/jps/LingeredApp.java b/test/jdk/sun/tools/jps/LingeredApp.java
--- a/test/jdk/sun/tools/jps/LingeredApp.java
+++ b/test/jdk/sun/tools/jps/LingeredApp.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -30,14 +30,16 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.nio.file.attribute.BasicFileAttributes;
 import java.nio.file.attribute.FileTime;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Date;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
+import jdk.test.lib.Utils;
 
 /**
  * This is a framework to launch an app that could be synchronized with caller
  * to make further attach actions reliable across supported platforms
 
@@ -255,11 +257,11 @@
 
     /**
      * Analyze an environment and prepare a command line to
      * run the app, app name should be added explicitly
      */
-    public List<String> runAppPrepare(List<String> vmArguments) {
+    public List<String> runAppPrepare(String[] vmArguments) {
         // We should always use testjava or throw an exception,
         // so we can't use JDKToolFinder.getJDKTool("java");
         // that falls back to compile java on error
         String jdkPath = System.getProperty("test.jdk");
         if (jdkPath == null) {
@@ -276,24 +278,17 @@
         String javapath = jdkPath + ((osname.startsWith("window")) ? "/bin/java.exe" : "/bin/java");
 
         List<String> cmd = new ArrayList<String>();
         cmd.add(javapath);
 
-
         if (vmArguments == null) {
-            // Propagate test.vm.options to LingeredApp, filter out possible empty options
-            String testVmOpts[] = System.getProperty("test.vm.opts","").split("\\s+");
-            for (String s : testVmOpts) {
-                if (!s.equals("")) {
-                    cmd.add(s);
-                }
-            }
-        }
-        else{
+            // Propagate getTestJavaOpts() to LingeredApp
+            vmArguments = Utils.getTestJavaOpts();
+        } else {
             // Lets user manage LingeredApp options
-            cmd.addAll(vmArguments);
         }
+        Collections.addAll(cmd, vmArguments);
 
         // Make sure we set correct classpath to run the app
         cmd.add("-cp");
         String classpath = System.getProperty("test.class.path");
         cmd.add((classpath == null) ? "." : classpath);
@@ -324,11 +319,11 @@
      * Run the app.
      *
      * @param vmArguments
      * @throws IOException
      */
-    public void runApp(List<String> vmArguments)
+    public void runApp(String[] vmArguments)
             throws IOException {
 
         List<String> cmd = runAppPrepare(vmArguments);
 
         cmd.add(this.getAppName());
@@ -365,53 +360,39 @@
     }
 
     /**
      *  High level interface for test writers
      */
-    /**
-     * Factory method that creates LingeredApp object with ready to use application
-     * lock name is autogenerated
-     * @param cmd - vm options, could be null to auto add testvm.options
-     * @return LingeredApp object
-     * @throws IOException
-     */
-    public static LingeredApp startApp(List<String> cmd) throws IOException {
-        LingeredApp a = new LingeredApp();
-        a.createLock();
-        try {
-            a.runApp(cmd);
-            a.waitAppReady(appWaitTime);
-        } catch (Exception ex) {
-            a.deleteLock();
-            throw ex;
-        }
-
-        return a;
-    }
-
     /**
      * Factory method that starts pre-created LingeredApp
      * lock name is autogenerated
-     * @param cmd - vm options, could be null to auto add testvm.options
+     * @param cmd - vm options, could be null to auto add Utils.getTestJavaOpts()
      * @param theApp - app to start
-     * @return LingeredApp object
      * @throws IOException
      */
-
-    public static void startApp(List<String> cmd, LingeredApp theApp) throws IOException {
+    public static void startApp(LingeredApp theApp, String... cmd) throws IOException {
         theApp.createLock();
         try {
             theApp.runApp(cmd);
             theApp.waitAppReady(appWaitTime);
         } catch (Exception ex) {
             theApp.deleteLock();
             throw ex;
         }
     }
 
-    public static LingeredApp startApp() throws IOException {
-        return startApp(null);
+    /**
+     * Factory method that creates LingeredApp object with ready to use application
+     * lock name is autogenerated
+     * @param cmd - vm options, could be null to auto add Utils.getTestJavaOpts()
+     * @return LingeredApp object
+     * @throws IOException
+     */
+    public static LingeredApp startApp(String... cmd) throws IOException {
+        LingeredApp a = new LingeredApp();
+        startApp(a, cmd);
+        return a;
     }
 
     public static void stopApp(LingeredApp app) throws IOException {
         if (app != null) {
             // LingeredApp can throw an exception during the intialization,
