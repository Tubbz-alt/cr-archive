diff a/test/jdk/sun/net/www/http/HttpClient/B6726695.java b/test/jdk/sun/net/www/http/HttpClient/B6726695.java
--- a/test/jdk/sun/net/www/http/HttpClient/B6726695.java
+++ b/test/jdk/sun/net/www/http/HttpClient/B6726695.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,16 +22,21 @@
  */
 
 /*
  * @test
  * @bug 6726695 6993490
- * @summary HttpURLConnection shoul support 'Expect: 100-contimue' headers for PUT
+ * @summary HttpURLConnection should support 'Expect: 100-contimue' headers for PUT
+ * @library /test/lib
+ * @run main B6726695
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true B6726695
 */
 
 import java.net.*;
 import java.io.*;
 
+import jdk.test.lib.net.URIBuilder;
+
 public class B6726695 extends Thread {
     private ServerSocket server = null;
     private int port = 0;
     private byte[] data = new byte[512];
     private String boundary = "----------------7774563516523621";
@@ -46,11 +51,12 @@
         test.test();
     }
 
     public B6726695() {
         try {
-            server = new ServerSocket(0);
+            server = new ServerSocket();
+            server.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));
             port = server.getLocalPort();
         } catch (IOException e) {
             e.printStackTrace();
         }
     }
@@ -62,14 +68,19 @@
          * the second one. Thus allowing us to test both scenarios.
          * The 3rd case is the simulation of a server that just plains ignore
          * the Expect: 100-Continue header. So the POST should proceed after
          * a timeout.
          */
-        URL url = new URL("http://localhost:" + port + "/foo");
+        URL url = URIBuilder.newBuilder()
+                  .scheme("http")
+                  .loopback()
+                  .port(port)
+                  .path("/foo")
+                  .toURL();
 
         // 1st Connection. Should be rejected. I.E. get a ProtocolException
-        URLConnection con = url.openConnection();
+        URLConnection con = url.openConnection(Proxy.NO_PROXY);
         HttpURLConnection http = (HttpURLConnection) con;
         http.setRequestMethod("POST");
         http.setRequestProperty("Expect", "100-Continue");
         http.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
         http.setDoOutput(true);
@@ -84,11 +95,11 @@
         if (errorCode != 417) {
             throw new RuntimeException("Didn't get the ProtocolException");
         }
 
         // 2nd connection. Should be accepted by server.
-        http = (HttpURLConnection) url.openConnection();
+        http = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);
         http.setRequestMethod("POST");
         http.setRequestProperty("Expect", "100-Continue");
         http.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
         http.setDoOutput(true);
         http.setFixedLengthStreamingMode(data.length);
@@ -107,11 +118,11 @@
             throw new RuntimeException("Response code is " + errorCode);
         }
         out.close();
 
         // 3rd connection. Simulate a server that doesn't implement 100-continue
-        http = (HttpURLConnection) url.openConnection();
+        http = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);
         http.setRequestMethod("POST");
         http.setRequestProperty("Expect", "100-Continue");
         http.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
         http.setDoOutput(true);
         http.setFixedLengthStreamingMode(data.length);
