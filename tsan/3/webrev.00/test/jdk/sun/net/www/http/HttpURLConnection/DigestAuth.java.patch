diff a/test/jdk/sun/net/www/http/HttpURLConnection/DigestAuth.java b/test/jdk/sun/net/www/http/HttpURLConnection/DigestAuth.java
--- a/test/jdk/sun/net/www/http/HttpURLConnection/DigestAuth.java
+++ b/test/jdk/sun/net/www/http/HttpURLConnection/DigestAuth.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -27,10 +27,11 @@
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.Authenticator;
+import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.PasswordAuthentication;
 import java.net.URL;
 import java.net.URLConnection;
 import java.util.List;
@@ -52,11 +53,10 @@
  * @run main/othervm DigestAuth validate_server
  * @run main/othervm DigestAuth validate_server_no_qop
  */
 public class DigestAuth {
 
-    static final String LOCALHOST = "localhost";
     static final String EXPECT_FAILURE = null;
     static final String EXPECT_DIGEST = "Digest";
     static final String REALM = "testrealm@host.com";
     static final String NEXT_NONCE = "40f2e879449675f288476d772627370a";
 
@@ -117,12 +117,11 @@
 
             // set authenticator
             AuthenticatorImpl auth = new AuthenticatorImpl();
             Authenticator.setDefault(auth);
 
-            String url = String.format("http://%s:%d/test/",
-                    LOCALHOST, server.getPort());
+            String url = String.format("http://%s/test/", server.getAuthority());
 
             boolean success = true;
             switch (testcase) {
                 case "good":
                     // server returns a good WWW-Authenticate header
@@ -320,31 +319,42 @@
 
         private LocalHttpServer(HttpServer server) {
             this.server = server;
         }
 
+        public String getAuthority() {
+            InetAddress address = server.getAddress().getAddress();
+            String hostaddr = address.isAnyLocalAddress()
+                ? "localhost" : address.getHostAddress();
+            if (hostaddr.indexOf(':') > -1) {
+                hostaddr = "[" + hostaddr + "]";
+            }
+            return hostaddr + ":" + getPort();
+        }
+
         void setWWWAuthHeader(String wwwAuthHeader) {
             this.wwwAuthHeader = wwwAuthHeader;
         }
 
         void setAuthInfoHeader(String authInfoHeader) {
             this.authInfoHeader = authInfoHeader;
         }
 
         static LocalHttpServer startServer() throws IOException {
+            InetAddress loopback = InetAddress.getLoopbackAddress();
             HttpServer httpServer = HttpServer.create(
-                    new InetSocketAddress(0), 0);
+                    new InetSocketAddress(loopback, 0), 0);
             LocalHttpServer localHttpServer = new LocalHttpServer(httpServer);
             localHttpServer.start();
 
             return localHttpServer;
         }
 
         void start() {
             server.createContext("/test", this);
             server.start();
-            System.out.println("HttpServer: started on port " + getPort());
+            System.out.println("HttpServer: started on port " + getAuthority());
         }
 
         void stop() {
             server.stop(0);
             System.out.println("HttpServer: stopped");
