diff a/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/ProxyTunnelServer.java b/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/ProxyTunnelServer.java
--- a/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/ProxyTunnelServer.java
+++ b/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/ProxyTunnelServer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -61,15 +61,27 @@
      * denote whether the proxy needs to authorize
      * CONNECT requests.
      */
     static boolean needAuth = false;
 
+    volatile long connectCount;
+
     public ProxyTunnelServer() throws IOException {
         if (ss == null) {
             ss = (ServerSocket) ServerSocketFactory.getDefault()
                     .createServerSocket(0);
             ss.setSoTimeout(TIMEOUT);
+            System.out.println("Proxy server created: " + ss);
+        }
+    }
+
+    public ProxyTunnelServer(InetAddress address) throws IOException {
+        if (ss == null) {
+            ss = (ServerSocket) ServerSocketFactory.getDefault()
+                    .createServerSocket(0, 0, address);
+            ss.setSoTimeout(TIMEOUT);
+            System.out.println("Proxy server created: " + ss);
         }
     }
 
     public void needUserAuth(boolean auth) {
         needAuth = auth;
@@ -84,11 +96,13 @@
         userPlusPass = uname + ":" + passwd;
     }
 
     public void run() {
         try {
+            System.out.println("Proxy server listening at: " + ss);
             clientSocket = ss.accept();
+            System.out.println("Proxy server accepted connection: " + clientSocket);
             processRequests();
         } catch (SocketTimeoutException e) {
             System.out.println(
                     "Proxy can not get response in time: " + e.getMessage());
         } catch (Exception e) {
@@ -99,11 +113,13 @@
             }
             catch (IOException excep) {
                 System.out.println("ProxyServer close error: " + excep);
                 excep.printStackTrace();
             }
-          }
+         } finally {
+            System.out.println("Proxy server: request served");
+         }
     }
 
     /*
      * Processes the CONNECT requests, if needAuth is set to true, then
      * the name and password are extracted from the Proxy-Authorization header
@@ -116,10 +132,11 @@
         InputStream in = clientSocket.getInputStream();
         MessageHeader mheader = new MessageHeader(in);
         String statusLine = mheader.getValue(0);
 
         if (statusLine.startsWith("CONNECT")) {
+            synchronized(this) { connectCount++; }
             // retrieve the host and port info from the status-line
             retrieveConnectInfo(statusLine);
             if (needAuth) {
                 String authInfo;
                 if ((authInfo = mheader.findValue("Proxy-Authorization"))
@@ -152,10 +169,14 @@
                                    + "CONNECT method requests, recieved: "
                                    + statusLine);
         }
     }
 
+    public long getConnectCount() {
+        return connectCount;
+    }
+
     private void respondForConnect(boolean needAuth) throws Exception {
 
         OutputStream out = clientSocket.getOutputStream();
         PrintWriter pout = new PrintWriter(out);
 
@@ -271,17 +292,23 @@
         try {
             starti = connectStr.indexOf(' ');
             endi = connectStr.lastIndexOf(' ');
             connectInfo = connectStr.substring(starti+1, endi).trim();
             // retrieve server name and port
-            endi = connectInfo.indexOf(':');
-            serverName = connectInfo.substring(0, endi);
+            if (connectInfo.charAt(0) == '[') {
+                 endi = connectInfo.indexOf(']');
+                 serverName = connectInfo.substring(1, endi++);
+                 assert connectInfo.charAt(endi) == ':' : "Expected [IPv6]:port";
+            } else {
+                 endi = connectInfo.indexOf(':');
+                 serverName = connectInfo.substring(0, endi);
+            }
             serverPort = Integer.parseInt(connectInfo.substring(endi+1));
         } catch (Exception e) {
             throw new IOException("Proxy recieved a request: "
                                         + connectStr, e);
-          }
+        }
         serverInetAddr = InetAddress.getByName(serverName);
     }
 
     public int getPort() {
         return ss.getLocalPort();
