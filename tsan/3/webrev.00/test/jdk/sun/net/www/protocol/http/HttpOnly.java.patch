diff a/test/jdk/sun/net/www/protocol/http/HttpOnly.java b/test/jdk/sun/net/www/protocol/http/HttpOnly.java
--- a/test/jdk/sun/net/www/protocol/http/HttpOnly.java
+++ b/test/jdk/sun/net/www/protocol/http/HttpOnly.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,20 +22,24 @@
  */
 /**
  * @test
  * @bug 7095980 8007315
  * @modules jdk.httpserver
+ * @library /test/lib
  * @summary Ensure HttpURLConnection (and supporting APIs) don't expose
  *          HttpOnly cookies
+ * @run main HttpOnly
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true HttpOnly
  */
 
 import java.io.IOException;
 import java.net.CookieHandler;
 import java.net.CookieManager;
 import java.net.CookiePolicy;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
+import java.net.Proxy;
 import java.net.URI;
 import java.net.HttpURLConnection;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -44,10 +48,12 @@
 import com.sun.net.httpserver.Headers;
 import com.sun.net.httpserver.HttpExchange;
 import com.sun.net.httpserver.HttpHandler;
 import com.sun.net.httpserver.HttpServer;
 
+import jdk.test.lib.net.URIBuilder;
+
 /*
  * 1) start the HTTP server
  * 2) populate cookie store with HttpOnly cookies
  * 3) make HTTP request that should contain HttpOnly cookies
  * 4) check HttpOnly cookies received by server
@@ -65,12 +71,16 @@
      void test(String[] args) throws Exception {
         HttpServer server = startHttpServer();
         CookieHandler previousHandler = CookieHandler.getDefault();
         try {
             InetSocketAddress address = server.getAddress();
-            URI uri = new URI("http://" + InetAddress.getLocalHost().getHostAddress()
-                              + ":" + address.getPort() + URI_PATH);
+            URI uri = URIBuilder.newBuilder()
+                                .scheme("http")
+                                .host(address.getAddress())
+                                .port(address.getPort())
+                                .path(URI_PATH)
+                                .build();
             populateCookieStore(uri);
             doClient(uri);
         } finally {
             CookieHandler.setDefault(previousHandler);
             server.stop(0);
@@ -90,11 +100,11 @@
         header.put("Set-Cookie", values);
         cm.put(uri, header);
     }
 
     void doClient(URI uri) throws Exception {
-        HttpURLConnection uc = (HttpURLConnection) uri.toURL().openConnection();
+        HttpURLConnection uc = (HttpURLConnection) uri.toURL().openConnection(Proxy.NO_PROXY);
         int resp = uc.getResponseCode();
         check(resp == 200,
               "Unexpected response code. Expected 200, got " + resp);
 
         // TEST 1: check getRequestProperty doesn't return the HttpOnly cookie
@@ -155,11 +165,11 @@
                           + "value = " + value);
             }
         }
 
         // Now add some user set cookies into the mix.
-        uc = (HttpURLConnection) uri.toURL().openConnection();
+        uc = (HttpURLConnection) uri.toURL().openConnection(Proxy.NO_PROXY);
         uc.addRequestProperty("Cookie", "CUSTOMER_ID=CHEGAR;");
         resp = uc.getResponseCode();
         check(resp == 200,
               "Unexpected response code. Expected 200, got " + resp);
 
@@ -212,11 +222,12 @@
         }
     }
 
     // HTTP Server
     HttpServer startHttpServer() throws IOException {
-        HttpServer httpServer = HttpServer.create(new InetSocketAddress(0), 0);
+        InetAddress localhost = InetAddress.getLocalHost();
+        HttpServer httpServer = HttpServer.create(new InetSocketAddress(localhost, 0), 0);
         httpServer.createContext(URI_PATH, new SimpleHandler());
         httpServer.start();
         return httpServer;
     }
 
@@ -270,6 +281,5 @@
     public void instanceMain(String[] args) throws Throwable {
         try {test(args);} catch (Throwable t) {unexpected(t);}
         System.out.printf("%nPassed = %d, failed = %d%n%n", passed, failed);
         if (failed > 0) throw new AssertionError("Some tests failed");}
 }
-
