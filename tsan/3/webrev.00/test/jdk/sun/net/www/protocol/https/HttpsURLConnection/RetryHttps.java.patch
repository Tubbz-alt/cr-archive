diff a/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/RetryHttps.java b/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/RetryHttps.java
--- a/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/RetryHttps.java
+++ b/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/RetryHttps.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,21 +22,24 @@
  */
 
 /* @test
  * @bug 4799427
  * @summary Https can not retry request
+ * @library /test/lib
  * @run main/othervm RetryHttps
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true RetryHttps
  *
  *     SunJSSE does not support dynamic system properties, no way to re-use
  *     system properties in samevm/agentvm mode.
  * @author Yingxian Wang
  */
 
 import java.net.*;
 import java.util.*;
 import java.io.*;
 import javax.net.ssl.*;
+import jdk.test.lib.net.URIBuilder;
 
 public class RetryHttps {
     static Map cookies;
     ServerSocket ss;
 
@@ -78,16 +81,21 @@
      *
      * If the server prematurely exits, serverReady will be set to true
      * to avoid infinite hangs.
      */
     void doServerSide() throws Exception {
+        InetAddress loopback = InetAddress.getLoopbackAddress();
         SSLServerSocketFactory sslssf =
             (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();
         sslServerSocket =
-            (SSLServerSocket) sslssf.createServerSocket(serverPort);
+            (SSLServerSocket) sslssf.createServerSocket(serverPort, 0, loopback);
         serverPort = sslServerSocket.getLocalPort();
 
+        System.out.println("Starting server at: "
+                            +  sslServerSocket.getInetAddress()
+                            + ":" + serverPort);
+
         /*
          * Signal Client, we're ready for his connect.
          */
         serverReady = true;
         SSLSocket sslSocket = null;
@@ -143,24 +151,34 @@
                 Thread.sleep(50);
             }
             try {
                 HttpsURLConnection http = null;
                 /* establish http connection to server */
-                URL url = new URL("https://localhost:" + serverPort+"/file1");
+               URL url = URIBuilder.newBuilder()
+                      .scheme("https")
+                      .loopback()
+                      .port(serverPort)
+                      .path("/file1")
+                      .toURL();
                 System.out.println("url is "+url.toString());
                 HttpsURLConnection.setDefaultHostnameVerifier(
                                                         new NameVerifier());
-                http = (HttpsURLConnection)url.openConnection();
+                http = (HttpsURLConnection)url.openConnection(Proxy.NO_PROXY);
                 int respCode = http.getResponseCode();
                 int cl = http.getContentLength();
                 InputStream is = http.getInputStream ();
                 int count = 0;
                 while (is.read() != -1 && count++ < cl);
                 System.out.println("respCode1 = "+respCode);
                 Thread.sleep(2000);
-                url = new URL("https://localhost:" + serverPort+"/file2");
-                http = (HttpsURLConnection)url.openConnection();
+                url = URIBuilder.newBuilder()
+                      .scheme("https")
+                      .loopback()
+                      .port(serverPort)
+                      .path("/file2")
+                      .toURL();
+                http = (HttpsURLConnection)url.openConnection(Proxy.NO_PROXY);
                 respCode = http.getResponseCode();
                 System.out.println("respCode2 = "+respCode);
             } catch (IOException ioex) {
                 if (sslServerSocket != null)
                     sslServerSocket.close();
