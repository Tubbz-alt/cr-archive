diff a/test/jdk/sun/net/www/protocol/http/ProxyTunnelServer.java b/test/jdk/sun/net/www/protocol/http/ProxyTunnelServer.java
--- a/test/jdk/sun/net/www/protocol/http/ProxyTunnelServer.java
+++ b/test/jdk/sun/net/www/protocol/http/ProxyTunnelServer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -64,10 +64,14 @@
 
     public ProxyTunnelServer() throws IOException {
         ss = new ServerSocket(0);
     }
 
+    public ProxyTunnelServer(InetAddress address) throws IOException {
+        ss = new ServerSocket(0, 0, address);
+    }
+
     static private void close(Closeable c) {
         try {
             if (c != null)
                 c.close();
         } catch (IOException e) {
@@ -122,15 +126,16 @@
      * of the request. They are checked against the one that is registered,
      * if there is a match, connection is set in tunneling mode. If
      * needAuth is set to false, Proxy-Authorization checks are not made
      */
     private void processRequests(boolean makeTunnel) throws Exception {
-
         InputStream in = clientSocket.getInputStream();
         MessageHeader mheader = new MessageHeader(in);
         String statusLine = mheader.getValue(0);
 
+        System.out.printf("Proxy: Processing request from '%s'%n", clientSocket);
+
         if (statusLine.startsWith("CONNECT")) {
             // retrieve the host and port info from the status-line
             // retrieveConnectInfo(statusLine);
             if (needAuth) {
                 String authInfo;
@@ -309,10 +314,14 @@
 
     public int getPort() {
         return ss.getLocalPort();
     }
 
+    public InetAddress getInetAddress() {
+        return ss.getInetAddress();
+    }
+
     /*
      * do "basic" authentication, authInfo is of the form:
      *                                  Basic <encoded username":"password>
      * reference RFC 2617
      */
