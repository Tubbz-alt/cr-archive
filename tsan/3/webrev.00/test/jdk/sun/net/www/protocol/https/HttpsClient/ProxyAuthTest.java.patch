diff a/test/jdk/sun/net/www/protocol/https/HttpsClient/ProxyAuthTest.java b/test/jdk/sun/net/www/protocol/https/HttpsClient/ProxyAuthTest.java
--- a/test/jdk/sun/net/www/protocol/https/HttpsClient/ProxyAuthTest.java
+++ b/test/jdk/sun/net/www/protocol/https/HttpsClient/ProxyAuthTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -57,10 +57,11 @@
 import java.io.BufferedReader;
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.net.Authenticator;
+import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.PasswordAuthentication;
 import java.net.Proxy;
 import java.net.URL;
 import javax.net.ssl.HostnameVerifier;
@@ -78,10 +79,14 @@
  */
 
 public class ProxyAuthTest extends SSLSocketTemplate {
     private static boolean expectSuccess;
 
+    ProxyAuthTest() {
+        serverAddress = InetAddress.getLoopbackAddress();
+    }
+
     /*
      * Run the test case.
      */
     public static void main(String[] args) throws Exception {
         // Get the customized arguments.
@@ -141,22 +146,29 @@
          * we want to avoid URLspoofCheck failures in cases where the cert
          * DN name does not match the hostname in the URL.
          */
         HttpsURLConnection.setDefaultHostnameVerifier(new NameVerifier());
 
-        InetSocketAddress paddr =
-                new InetSocketAddress("localhost", ps.getPort());
+        InetSocketAddress paddr = InetSocketAddress
+            .createUnresolved(ps.getInetAddress().getHostAddress(),
+                              ps.getPort());
         Proxy proxy = new Proxy(Proxy.Type.HTTP, paddr);
 
+        InetAddress serverAddress = this.serverAddress;
+        String host = serverAddress == null
+                ? "localhost"
+                : serverAddress.getHostAddress();
+        if (host.indexOf(':') > -1) host = "[" + host + "]";
         URL url = new URL(
-                "https://" + "localhost:" + serverPort + "/index.html");
+                "https://" + host + ":" + serverPort + "/index.html");
+        System.out.println("URL: " + url);
         BufferedReader in = null;
         HttpsURLConnection uc = (HttpsURLConnection) url.openConnection(proxy);
         try {
             in = new BufferedReader(new InputStreamReader(uc.getInputStream()));
             String inputLine;
-            System.out.print("Client recieved from the server: ");
+            System.out.print("Client received from the server: ");
             while ((inputLine = in.readLine()) != null) {
                 System.out.println(inputLine);
             }
             if (!expectSuccess) {
                 throw new RuntimeException(
@@ -224,11 +236,12 @@
             return true;
         }
     }
 
     private static ProxyTunnelServer setupProxy() throws IOException {
-        ProxyTunnelServer pserver = new ProxyTunnelServer();
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        ProxyTunnelServer pserver = new ProxyTunnelServer(loopback);
 
         /*
          * register a system wide authenticator and setup the proxy for
          * authentication
          */
