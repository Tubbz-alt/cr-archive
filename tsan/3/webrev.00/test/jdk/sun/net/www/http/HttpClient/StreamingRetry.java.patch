diff a/test/jdk/sun/net/www/http/HttpClient/StreamingRetry.java b/test/jdk/sun/net/www/http/HttpClient/StreamingRetry.java
--- a/test/jdk/sun/net/www/http/HttpClient/StreamingRetry.java
+++ b/test/jdk/sun/net/www/http/HttpClient/StreamingRetry.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,20 +23,28 @@
 
 /*
  * @test
  * @bug 6672144 8050983
  * @summary Do not retry failed request with a streaming body.
+ * @library /test/lib
+ * @run main StreamingRetry
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true StreamingRetry
  */
 
 import java.net.HttpURLConnection;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.Proxy;
 import java.net.ServerSocket;
 import java.net.URL;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import static java.lang.System.out;
 
+import jdk.test.lib.net.URIBuilder;
+
 public class StreamingRetry implements Runnable {
     static final int ACCEPT_TIMEOUT = 20 * 1000; // 20 seconds
     volatile ServerSocket ss;
 
     public static void main(String[] args) throws Exception {
@@ -53,20 +61,26 @@
 
         if (failed > 0) throw new RuntimeException("Some tests failed");
     }
 
     void test(String method) throws Exception {
-        ss = new ServerSocket(0);
+        ss = new ServerSocket();
+        ss.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));
         ss.setSoTimeout(ACCEPT_TIMEOUT);
         int port = ss.getLocalPort();
 
         Thread otherThread = new Thread(this);
         otherThread.start();
 
         try {
-            URL url = new URL("http://localhost:" + port + "/");
-            HttpURLConnection uc = (HttpURLConnection) url.openConnection();
+            URL url = URIBuilder.newBuilder()
+                      .scheme("http")
+                      .host(ss.getInetAddress())
+                      .port(port)
+                      .path("/")
+                      .toURL();
+            HttpURLConnection uc = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);
             uc.setDoOutput(true);
             if (method != null)
                 uc.setRequestMethod(method);
             uc.setChunkedStreamingMode(4096);
             OutputStream os = uc.getOutputStream();
