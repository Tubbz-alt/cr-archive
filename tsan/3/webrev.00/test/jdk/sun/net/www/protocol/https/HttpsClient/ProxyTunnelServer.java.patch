diff a/test/jdk/sun/net/www/protocol/https/HttpsClient/ProxyTunnelServer.java b/test/jdk/sun/net/www/protocol/https/HttpsClient/ProxyTunnelServer.java
--- a/test/jdk/sun/net/www/protocol/https/HttpsClient/ProxyTunnelServer.java
+++ b/test/jdk/sun/net/www/protocol/https/HttpsClient/ProxyTunnelServer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -59,13 +59,18 @@
      * CONNECT requests.
      */
     static boolean needAuth = false;
 
     public ProxyTunnelServer() throws IOException {
+        this(null); // use wildcard
+    }
+
+    public ProxyTunnelServer(InetAddress proxyAddress) throws IOException {
         if (ss == null) {
-          ss = (ServerSocket) ServerSocketFactory.getDefault().
-          createServerSocket(0);
+            ss = (ServerSocket) ServerSocketFactory.getDefault().
+                createServerSocket();
+            ss.bind(new InetSocketAddress(proxyAddress, 0));
         }
         setDaemon(true);
     }
 
     public void needUserAuth(boolean auth) {
@@ -272,20 +277,24 @@
             // retrieve server name and port
             endi = connectInfo.indexOf(':');
             serverName = connectInfo.substring(0, endi);
             serverPort = Integer.parseInt(connectInfo.substring(endi+1));
         } catch (Exception e) {
-            throw new IOException("Proxy recieved a request: "
-                                        + connectStr);
-          }
+            throw new IOException("Proxy received a request: "
+                                  + connectStr, e);
+        }
         serverInetAddr = InetAddress.getByName(serverName);
     }
 
     public int getPort() {
         return ss.getLocalPort();
     }
 
+    public InetAddress getInetAddress() {
+        return ss.getInetAddress();
+    }
+
     /*
      * do "basic" authentication, authInfo is of the form:
      *                                  Basic <encoded username":"password>
      * reference RFC 2617
      */
