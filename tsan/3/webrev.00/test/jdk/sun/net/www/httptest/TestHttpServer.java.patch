diff a/test/jdk/sun/net/www/httptest/TestHttpServer.java b/test/jdk/sun/net/www/httptest/TestHttpServer.java
--- a/test/jdk/sun/net/www/httptest/TestHttpServer.java
+++ b/test/jdk/sun/net/www/httptest/TestHttpServer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -66,10 +66,26 @@
 
     public TestHttpServer (HttpCallback cb) throws IOException {
         this (cb, 1, 10, 0);
     }
 
+    /**
+     * Create a <code>TestHttpServer<code> instance with the specified callback object
+     * for handling requests. One thread is created to handle requests,
+     * and up to ten TCP connections will be handled simultaneously.
+     * @param cb the callback object which is invoked to handle each
+     *  incoming request
+     * @param address the address to bind the server to. <code>Null</code>
+     *  means bind to the wildcard address.
+     * @param port the port number to bind the server to. <code>Zero</code>
+     *  means choose any free port.
+     */
+
+    public TestHttpServer (HttpCallback cb, InetAddress address, int port) throws IOException {
+        this (cb, 1, 10, address, 0);
+    }
+
     /**
      * Create a <code>TestHttpServer<code> instance with the specified number of
      * threads and maximum number of connections per thread. This functions
      * the same as the 4 arg constructor, where the port argument is set to zero.
      * @param cb the callback object which is invoked to handle each
@@ -100,13 +116,37 @@
      * @param port the port number to bind the server to. <code>Zero</code>
      *  means choose any free port.
      */
 
     public TestHttpServer (HttpCallback cb, int threads, int cperthread, int port)
+            throws IOException {
+        this(cb, threads, cperthread, null, port);
+    }
+
+    /**
+     * Create a <code>TestHttpServer<code> instance with the specified number
+     * of threads and maximum number of connections per thread and running on
+     * the specified port. The specified number of threads are created to
+     * handle incoming requests, and each thread is allowed
+     * to handle a number of simultaneous TCP connections.
+     * @param cb the callback object which is invoked to handle
+     *  each incoming request
+     * @param threads the number of threads to create to handle
+     *  requests in parallel
+     * @param cperthread the number of simultaneous TCP connections
+     *  to handle per thread
+     * @param address the address to bind the server to. <code>Null</code>
+     *  means bind to the wildcard address.
+     * @param port the port number to bind the server to. <code>Zero</code>
+     *  means choose any free port.
+     */
+
+    public TestHttpServer (HttpCallback cb, int threads, int cperthread,
+                           InetAddress address, int port)
         throws IOException {
         schan = ServerSocketChannel.open ();
-        InetSocketAddress addr = new InetSocketAddress (port);
+        InetSocketAddress addr = new InetSocketAddress (address, port);
         schan.socket().bind (addr);
         this.threads = threads;
         this.cb = cb;
         this.cperthread = cperthread;
         servers = new Server [threads];
@@ -145,10 +185,18 @@
 
     public int getLocalPort () {
         return schan.socket().getLocalPort ();
     }
 
+    public String getAuthority() {
+        InetAddress address = schan.socket().getInetAddress();
+        String hostaddr = address.getHostAddress();
+        if (address.isAnyLocalAddress()) hostaddr = "localhost";
+        if (hostaddr.indexOf(':') > -1) hostaddr = "[" + hostaddr + "]";
+        return hostaddr + ":" + getLocalPort();
+    }
+
     static class Server extends Thread {
 
         ServerSocketChannel schan;
         Selector selector;
         SelectionKey listenerKey;
@@ -171,10 +219,11 @@
                 selector = Selector.open ();
                 schan.configureBlocking (false);
                 listenerKey = schan.register (selector, SelectionKey.OP_ACCEPT);
             } catch (IOException e) {
                 System.err.println ("Server could not start: " + e);
+                throw new RuntimeException("Server could not start: " + e, e);
             }
         }
 
         /* Stop the thread as soon as possible */
         public void terminate () {
@@ -744,6 +793,5 @@
                 }
             }
         }
     }
 }
-
