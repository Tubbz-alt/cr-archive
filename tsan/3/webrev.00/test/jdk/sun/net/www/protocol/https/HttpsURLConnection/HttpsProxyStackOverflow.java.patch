diff a/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/HttpsProxyStackOverflow.java b/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/HttpsProxyStackOverflow.java
--- a/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/HttpsProxyStackOverflow.java
+++ b/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/HttpsProxyStackOverflow.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -32,10 +32,11 @@
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.Authenticator;
 import java.net.Proxy;
+import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.PasswordAuthentication;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.URL;
@@ -49,13 +50,15 @@
     }
 
     static void doClient(BadAuthProxyServer server) throws IOException {
         // url doesn't matter since we will never make the connection
         URL url = new URL("https://anythingwilldo/");
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        String loopbackAddress = loopback.getHostAddress();
         HttpsURLConnection conn = (HttpsURLConnection) url.openConnection(
                       new Proxy(Proxy.Type.HTTP,
-                      new InetSocketAddress("localhost", server.getPort())));
+                      InetSocketAddress.createUnresolved(loopbackAddress, server.getPort())));
         try (InputStream is = conn.getInputStream()) {
         } catch(IOException unused) {
             // no real server, IOException is expected.
             // failure if StackOverflowError
         } finally {
@@ -68,12 +71,15 @@
             @Override
             protected PasswordAuthentication getPasswordAuthentication() {
                 return new PasswordAuthentication("xyz", "xyz".toCharArray());
             }
             });
-
-        BadAuthProxyServer server = new BadAuthProxyServer(new ServerSocket(0));
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        InetSocketAddress address = new InetSocketAddress(loopback, 0);
+        ServerSocket ss = new ServerSocket();
+        ss.bind(address);
+        BadAuthProxyServer server = new BadAuthProxyServer(ss);
         Thread serverThread = new Thread(server);
         serverThread.start();
         return server;
     }
 
@@ -111,6 +117,5 @@
             try { ss.close(); } catch (IOException e) {}
             done = true;
         }
     }
 }
-
