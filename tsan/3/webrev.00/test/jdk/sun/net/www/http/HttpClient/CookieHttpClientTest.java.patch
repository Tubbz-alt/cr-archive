diff a/test/jdk/sun/net/www/http/HttpClient/CookieHttpClientTest.java b/test/jdk/sun/net/www/http/HttpClient/CookieHttpClientTest.java
--- a/test/jdk/sun/net/www/http/HttpClient/CookieHttpClientTest.java
+++ b/test/jdk/sun/net/www/http/HttpClient/CookieHttpClientTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,23 +22,28 @@
  */
 
 /*
  * @test
  * @bug 7129083
+ * @library /test/lib
  * @summary Cookiemanager does not store cookies if url is read
  *          before setting cookiemanager
  */
 
 import java.net.CookieHandler;
 import java.net.CookieManager;
 import java.net.CookiePolicy;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.URL;
 import java.io.InputStream;
 import java.io.IOException;
 
+import jdk.test.lib.net.URIBuilder;
+
 public class CookieHttpClientTest implements Runnable {
     final ServerSocket ss;
     static final int TIMEOUT = 10 * 1000;
 
     static final String replyString = "HTTP/1.1 200 OK\r\n" +
@@ -83,14 +88,19 @@
         }
     }
 
     CookieHttpClientTest() throws Exception {
         /* start the server */
-        ss = new ServerSocket(0);
+        ss = new ServerSocket();
+        ss.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));
         (new Thread(this)).start();
 
-        URL url = new URL("http://localhost:" + ss.getLocalPort() +"/");
+        URL url = URIBuilder.newBuilder()
+                .scheme("http")
+                .loopback()
+                .port(ss.getLocalPort())
+                .path("/").toURL();
 
         // Run without a CookieHandler first
         InputStream in = url.openConnection().getInputStream();
         while (in.read() != -1);  // read response body so connection can be reused
 
