diff a/test/jdk/sun/net/www/protocol/http/RelativeRedirect.java b/test/jdk/sun/net/www/protocol/http/RelativeRedirect.java
--- a/test/jdk/sun/net/www/protocol/http/RelativeRedirect.java
+++ b/test/jdk/sun/net/www/protocol/http/RelativeRedirect.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -26,10 +26,11 @@
  * @bug 4726087
  * @modules java.base/sun.net.www
  * @library ../../httptest/
  * @build HttpCallback TestHttpServer ClosedChannelList HttpTransaction
  * @run main RelativeRedirect
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true RelativeRedirect
  * @summary URLConnection cannot handle redirects
  */
 
 import java.io.*;
 import java.net.*;
@@ -56,11 +57,11 @@
         req.orderlyClose();
     }
 
     void secondReply (HttpTransaction req) throws IOException {
         if (req.getRequestURI().toString().equals("/redirect/file.html") &&
-            req.getRequestHeader("Host").equals("localhost:"+server.getLocalPort())) {
+            req.getRequestHeader("Host").equals(authority(server.getLocalPort()))) {
             req.setResponseEntityBody ("Hello .");
             req.sendResponse (200, "Ok");
         } else {
             req.setResponseEntityBody (req.getRequestURI().toString());
             req.sendResponse (400, "Bad request");
@@ -84,19 +85,29 @@
         } catch (IOException e) {
             e.printStackTrace();
         }
     }
 
+   static String authority(int port) {
+       InetAddress loopback = InetAddress.getLoopbackAddress();
+       String hostaddr = loopback.getHostAddress();
+       if (hostaddr.indexOf(':') > -1) {
+           hostaddr = "[" + hostaddr + "]";
+       }
+       return hostaddr + ":" + port;
+   }
+
     public static void main (String[] args) throws Exception {
+        InetAddress loopback = InetAddress.getLoopbackAddress();
         MyAuthenticator auth = new MyAuthenticator ();
         Authenticator.setDefault (auth);
         try {
-            server = new TestHttpServer (new RelativeRedirect(), 1, 10, 0);
+            server = new TestHttpServer (new RelativeRedirect(), 1, 10, loopback, 0);
             System.out.println ("Server: listening on port: " + server.getLocalPort());
-            URL url = new URL("http://localhost:"+server.getLocalPort());
+            URL url = new URL("http://" + authority(server.getLocalPort()));
             System.out.println ("client opening connection to: " + url);
-            HttpURLConnection urlc = (HttpURLConnection)url.openConnection ();
+            HttpURLConnection urlc = (HttpURLConnection)url.openConnection (Proxy.NO_PROXY);
             InputStream is = urlc.getInputStream ();
             is.close();
         } catch (Exception e) {
             throw new RuntimeException(e);
         } finally {
