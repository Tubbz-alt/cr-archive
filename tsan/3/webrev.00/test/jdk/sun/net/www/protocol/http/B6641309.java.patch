diff a/test/jdk/sun/net/www/protocol/http/B6641309.java b/test/jdk/sun/net/www/protocol/http/B6641309.java
--- a/test/jdk/sun/net/www/protocol/http/B6641309.java
+++ b/test/jdk/sun/net/www/protocol/http/B6641309.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,79 +23,82 @@
 
 /*
  * @test
  * @bug 6641309
  * @modules jdk.httpserver
- * @summary Wrong Cookie separator used in HttpURLConnection
+ * @library /test/lib
+ * @run main/othervm B6641309
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true B6641309
+ * @summary Wrong Cookie separator used in HttpURLConnection B6641309
  */
 
 import java.net.*;
 import java.util.*;
 import java.io.*;
 import com.sun.net.httpserver.*;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ExecutorService;
 
+import jdk.test.lib.net.URIBuilder;
+
 public class B6641309
 {
     com.sun.net.httpserver.HttpServer httpServer;
     ExecutorService executorService;
 
-    public static void main(String[] args)
-    {
+    public static void main(String[] args) throws Exception {
         new B6641309();
     }
 
-    public B6641309()
-    {
-        try {
-            startHttpServer();
-            doClient();
-        } catch (IOException ioe) {
-            System.err.println(ioe);
-        }
+    public B6641309() throws Exception {
+        startHttpServer();
+        doClient();
     }
 
-    void doClient() {
+    void doClient() throws Exception {
         CookieHandler.setDefault(new CookieManager(null, CookiePolicy.ACCEPT_ALL));
-        try {
-            InetSocketAddress address = httpServer.getAddress();
+        ProxySelector.setDefault(ProxySelector.of(null));
 
-            // GET Request
-            URL url = new URL("http://localhost:" + address.getPort() + "/test/");
-            CookieHandler ch = CookieHandler.getDefault();
-            Map<String,List<String>> header = new HashMap<String,List<String>>();
-            List<String> values = new LinkedList<String>();
-            values.add("Test1Cookie=TEST1; path=/test/");
-            values.add("Test2Cookie=TEST2; path=/test/");
-            header.put("Set-Cookie", values);
+        InetSocketAddress address = httpServer.getAddress();
 
-            // preload the CookieHandler with a cookie for our URL
-            // so that it will be sent during the first request
-            ch.put(url.toURI(), header);
-            HttpURLConnection uc = (HttpURLConnection)url.openConnection();
-            int resp = uc.getResponseCode();
-            if (resp != 200)
-                throw new RuntimeException("Failed: Response code from GET is not 200");
+        // GET Request
+        URL url = URIBuilder.newBuilder()
+                .scheme("http")
+                .host(address.getAddress())
+                .port(address.getPort())
+                .path("/test/")
+                .toURL();
 
-            System.out.println("Response code from GET = 200 OK");
+        CookieHandler ch = CookieHandler.getDefault();
+        Map<String,List<String>> header = new HashMap<String,List<String>>();
+        List<String> values = new LinkedList<String>();
+        values.add("Test1Cookie=TEST1; path=/test/");
+        values.add("Test2Cookie=TEST2; path=/test/");
+        header.put("Set-Cookie", values);
 
-        } catch (IOException e) {
-            e.printStackTrace();
-        } catch (URISyntaxException e) {
-            e.printStackTrace();
-        } finally {
-            httpServer.stop(1);
-            executorService.shutdown();
+        // preload the CookieHandler with a cookie for our URL
+        // so that it will be sent during the first request
+        ch.put(url.toURI(), header);
+        HttpURLConnection uc = (HttpURLConnection)url.openConnection();
+        int resp = uc.getResponseCode();
+        if (resp != 200) {
+            throw new RuntimeException("Failed: Response code from GET is not 200: "
+                    + resp);
         }
+        System.out.println("Response code from GET = 200 OK");
+
+        httpServer.stop(1);
+        executorService.shutdown();
     }
 
     /**
      * Http Server
      */
     public void startHttpServer() throws IOException {
-        httpServer = com.sun.net.httpserver.HttpServer.create(new InetSocketAddress(0), 0);
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        InetSocketAddress address = new InetSocketAddress(loopback, 0);
+        httpServer = com.sun.net.httpserver.HttpServer.create(address, 0);
 
         // create HttpServer context
         HttpContext ctx = httpServer.createContext("/test/", new MyHandler());
 
         executorService = Executors.newCachedThreadPool();
