diff a/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/ReadTimeout.java b/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/ReadTimeout.java
--- a/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/ReadTimeout.java
+++ b/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/ReadTimeout.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -30,16 +30,18 @@
  * @test
  * @bug 4811482 4700777 4905410
  * @summary sun.net.client.defaultConnectTimeout should work with
  *     HttpsURLConnection; HTTP client: Connect and read timeouts;
  *     Https needs to support new tiger features that went into http
+ * @library /test/lib
  * @run main/othervm ReadTimeout
  */
 
 import java.io.*;
 import java.net.*;
 import javax.net.ssl.*;
+import jdk.test.lib.net.URIBuilder;
 
 public class ReadTimeout {
 
     /*
      * =============================================================
@@ -91,14 +93,15 @@
      *
      * If the server prematurely exits, serverReady will be set to true
      * to avoid infinite hangs.
      */
     void doServerSide() throws Exception {
+        InetAddress loopback = InetAddress.getLoopbackAddress();
         SSLServerSocketFactory sslssf =
             (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();
         SSLServerSocket sslServerSocket =
-            (SSLServerSocket) sslssf.createServerSocket(serverPort);
+            (SSLServerSocket) sslssf.createServerSocket(serverPort, 0, loopback);
         serverPort = sslServerSocket.getLocalPort();
 
         /*
          * Signal Client, we're ready for his connect.
          */
@@ -161,11 +164,15 @@
             while (!serverReady) {
                 Thread.sleep(50);
             }
             HttpsURLConnection http = null;
             try {
-                URL url = new URL("https://localhost:" + serverPort);
+                URL url = URIBuilder.newBuilder()
+                          .scheme("https")
+                          .loopback()
+                          .port(serverPort)
+                          .toURL();
 
                 // set read timeout through system property
                 System.setProperty("sun.net.client.defaultReadTimeout", "2000");
                 HttpsURLConnection.setDefaultHostnameVerifier(
                                           new NameVerifier());
@@ -182,11 +189,15 @@
                 done();
                 http.disconnect();
             }
 
             try {
-                URL url = new URL("https://localhost:" + serverPort);
+                URL url = URIBuilder.newBuilder()
+                          .scheme("https")
+                          .loopback()
+                          .port(serverPort)
+                          .toURL();
 
                 HttpsURLConnection.setDefaultHostnameVerifier(
                                           new NameVerifier());
                 http = (HttpsURLConnection)url.openConnection();
                 // set read timeout through API
@@ -237,10 +248,14 @@
     volatile int serverPort = 0;
 
     volatile Exception serverException = null;
     volatile Exception clientException = null;
 
+    private boolean sslConnectionFailed() {
+        return clientException instanceof SSLHandshakeException;
+    }
+
     public static void main(String[] args) throws Exception {
         String keyFilename =
             System.getProperty("test.src", "./") + "/" + pathToStores +
                 "/" + keyStoreFile;
         String trustFilename =
@@ -280,11 +295,13 @@
 
         /*
          * Wait for other side to close down.
          */
         if (separateServerThread) {
-            serverThread.join();
+            if (!sslConnectionFailed()) {
+                serverThread.join();
+            }
         } else {
             clientThread.join();
         }
 
         /*
