diff a/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/PostThruProxy.java b/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/PostThruProxy.java
--- a/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/PostThruProxy.java
+++ b/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/PostThruProxy.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -25,28 +25,21 @@
 import java.net.*;
 import java.security.KeyStore;
 import javax.net.*;
 import javax.net.ssl.*;
 
-import jdk.test.lib.process.OutputAnalyzer;
-import jdk.test.lib.process.ProcessTools;
+import jdk.test.lib.net.URIBuilder;
 
 /*
  * @test
  * @bug 4423074
  * @modules java.base/sun.net.www
  * @summary This test case is written to test the https POST through a proxy.
  *          There is no proxy authentication done. It includes a simple server
  *          that serves http POST method requests in secure channel, and a client
  *          that makes https POST request through a proxy.
  * @library /test/lib
- * @build jdk.test.lib.Utils
- *        jdk.test.lib.Asserts
- *        jdk.test.lib.JDKToolFinder
- *        jdk.test.lib.JDKToolLauncher
- *        jdk.test.lib.Platform
- *        jdk.test.lib.process.*
  * @compile OriginServer.java ProxyTunnelServer.java
  * @run main/othervm PostThruProxy
  */
 public class PostThruProxy {
 
@@ -60,10 +53,13 @@
     static String keyStoreFile = "keystore";
     static String trustStoreFile = "truststore";
     static String passwd = "passphrase";
 
     private static int serverPort = 0;
+    private static ProxyTunnelServer pserver;
+    private static TestServer server;
+    static final String RESPONSE_MSG = "Https POST thru proxy is successful";
 
     /*
      * The TestServer implements a OriginServer that
      * processes HTTP requests and responses.
      */
@@ -77,38 +73,40 @@
          * the data sent in the response.
          *
          * @return bytes for the data in the response
          */
         public byte[] getBytes() {
-            return "Https POST thru proxy is successful".
-                        getBytes();
+            return RESPONSE_MSG.getBytes();
         }
     }
 
     /*
      * Main method to create the server and client
      */
     public static void main(String args[]) throws Exception {
+
         String keyFilename = TEST_SRC + "/" + pathToStores + "/" + keyStoreFile;
         String trustFilename = TEST_SRC + "/" + pathToStores + "/"
                 + trustStoreFile;
 
         System.setProperty("javax.net.ssl.keyStore", keyFilename);
         System.setProperty("javax.net.ssl.keyStorePassword", passwd);
         System.setProperty("javax.net.ssl.trustStore", trustFilename);
         System.setProperty("javax.net.ssl.trustStorePassword", passwd);
 
+        InetAddress loopback = InetAddress.getLoopbackAddress();
         boolean useSSL = true;
         /*
          * setup the server
          */
         try {
             ServerSocketFactory ssf = getServerSocketFactory(useSSL);
-            ServerSocket ss = ssf.createServerSocket(serverPort);
+            ServerSocket ss = ssf.createServerSocket(serverPort, 0, loopback);
             ss.setSoTimeout(TIMEOUT);  // 30 seconds
             serverPort = ss.getLocalPort();
-            new TestServer(ss);
+            server = new TestServer(ss);
+            System.out.println("Server started at: " + ss);
         } catch (Exception e) {
             System.out.println("Server side failed:" +
                                 e.getMessage());
             throw e;
         }
@@ -118,10 +116,16 @@
         } catch (Exception e) {
             System.out.println("Client side failed: " +
                                 e.getMessage());
             throw e;
         }
+        long connectCount = pserver.getConnectCount();
+        if (connectCount == 0) {
+            throw new AssertionError("Proxy was not used!");
+        } else {
+            System.out.println("Proxy CONNECT count: " + connectCount);
+        }
     }
 
     private static ServerSocketFactory getServerSocketFactory
                    (boolean useSSL) throws Exception {
         if (useSSL) {
@@ -160,13 +164,19 @@
              * we want to avoid URLspoofCheck failures in cases where the cert
              * DN name does not match the hostname in the URL.
              */
             HttpsURLConnection.setDefaultHostnameVerifier(
                                           new NameVerifier());
-            URL url = new URL("https://" + getHostname() +":" + serverPort);
+            URL url = URIBuilder.newBuilder()
+                      .scheme("https")
+                      .loopback()
+                      .port(serverPort)
+                      .toURL();
 
             Proxy p = new Proxy(Proxy.Type.HTTP, pAddr);
+            System.out.println("Client connecting to: " + url);
+            System.out.println("Through proxy: " + pAddr);
             HttpsURLConnection https = (HttpsURLConnection)url.openConnection(p);
             https.setConnectTimeout(TIMEOUT);
             https.setReadTimeout(TIMEOUT);
             https.setDoOutput(true);
             https.setRequestMethod("POST");
@@ -183,13 +193,19 @@
                // clear the pipe
                BufferedReader in = new BufferedReader(
                                     new InputStreamReader(
                                     https.getInputStream()));
                String inputLine;
-               while ((inputLine = in.readLine()) != null)
+               boolean msgFound = false;
+               while ((inputLine = in.readLine()) != null) {
                     System.out.println("Client received: " + inputLine);
+                    if (inputLine.contains(RESPONSE_MSG)) msgFound = true;
+               }
                in.close();
+               if (!msgFound) {
+                   throw new RuntimeException("POST message not found.");
+               }
             } catch (SSLException e) {
                 if (ps != null)
                     ps.close();
                 throw e;
             } catch (SocketTimeoutException e) {
@@ -206,22 +222,15 @@
             return true;
         }
     }
 
     static SocketAddress setupProxy() throws IOException {
-        ProxyTunnelServer pserver = new ProxyTunnelServer();
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        pserver = new ProxyTunnelServer(loopback);
 
         // disable proxy authentication
         pserver.needUserAuth(false);
         pserver.start();
-        return new InetSocketAddress("localhost", pserver.getPort());
+        return new InetSocketAddress(loopback, pserver.getPort());
     }
 
-    private static String getHostname() {
-        try {
-            OutputAnalyzer oa = ProcessTools.executeCommand("hostname");
-            return oa.getOutput().trim();
-        } catch (Throwable e) {
-            throw new RuntimeException("Get hostname failed.", e);
-        }
-    }
 }
