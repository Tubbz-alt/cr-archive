diff a/test/jdk/sun/net/www/protocol/http/CloseOptionHeader.java b/test/jdk/sun/net/www/protocol/http/CloseOptionHeader.java
--- a/test/jdk/sun/net/www/protocol/http/CloseOptionHeader.java
+++ b/test/jdk/sun/net/www/protocol/http/CloseOptionHeader.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,19 +23,20 @@
 
 /**
  * @test
  * @bug 6189206
  * @modules java.base/sun.net.www
+ * @library /test/lib
  * @run main/othervm -Dhttp.keepAlive=false CloseOptionHeader
  * @summary  HTTP client should set "Connection: close" header in request when keepalive is disabled
  */
 
 import java.net.*;
 import java.util.*;
 import java.io.*;
 import sun.net.www.MessageHeader;
-
+import jdk.test.lib.net.URIBuilder;
 
 public class CloseOptionHeader implements Runnable {
     static ServerSocket ss;
     static boolean hasCloseHeader = false;
 
@@ -77,18 +78,24 @@
 
     public static void main(String args[]) throws Exception {
         Thread tester = new Thread(new CloseOptionHeader());
 
         /* start the server */
-        ss = new ServerSocket(0);
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        ss = new ServerSocket();
+        ss.bind(new InetSocketAddress(loopback, 0));
         tester.start();
 
         /* connect to the server just started
          * server then check the request to see whether
          * there is a close connection option header in it
          */
-        URL url = new URL("http://localhost:" + ss.getLocalPort());
+        URL url = URIBuilder.newBuilder()
+            .scheme("http")
+            .host(ss.getInetAddress())
+            .port(ss.getLocalPort())
+            .toURL();
         HttpURLConnection huc = (HttpURLConnection)url.openConnection();
         huc.connect();
         huc.getResponseCode();
         huc.disconnect();
 
