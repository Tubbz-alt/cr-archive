diff a/test/jdk/sun/net/www/http/HttpClient/B7025238.java b/test/jdk/sun/net/www/http/HttpClient/B7025238.java
--- a/test/jdk/sun/net/www/http/HttpClient/B7025238.java
+++ b/test/jdk/sun/net/www/http/HttpClient/B7025238.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -24,15 +24,17 @@
 import com.sun.net.httpserver.*;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.*;
 import java.util.concurrent.Executors;
+import jdk.test.lib.net.URIBuilder;
 
 /*
  * @test
  * @bug 7025238
  * @modules jdk.httpserver
+ * @library /test/lib
  * @summary HttpURLConnection does not handle URLs with an empty path component
  */
 public class B7025238 {
 
     public static void main(String[] args) throws Exception {
@@ -42,11 +44,17 @@
     public void runTest() throws Exception {
         Server s = null;
         try {
             s = new Server();
             s.startServer();
-            URL url = new URL("http://localhost:" + s.getPort() + "?q=test");
+            URL url = URIBuilder.newBuilder()
+                      .scheme("http")
+                      .loopback()
+                      .port(s.getPort())
+                      .query("q=test")
+                      .toURL();
+            System.out.println("Connecting to: " + url);
             HttpURLConnection urlConnection = (HttpURLConnection)url.openConnection();
             urlConnection.setRequestMethod("GET");
             urlConnection.connect();
             int code = urlConnection.getResponseCode();
 
@@ -60,11 +68,12 @@
 
     class Server {
         HttpServer server;
 
         public void startServer() {
-            InetSocketAddress addr = new InetSocketAddress(0);
+            InetAddress loopback = InetAddress.getLoopbackAddress();
+            InetSocketAddress addr = new InetSocketAddress(loopback, 0);
             try {
                 server = HttpServer.create(addr, 0);
             } catch (IOException ioe) {
                 throw new RuntimeException("Server could not be created");
             }
@@ -99,6 +108,5 @@
                 os.close();
             }
         }
     }
 }
-
