diff a/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/PostThruProxyWithAuth.java b/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/PostThruProxyWithAuth.java
--- a/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/PostThruProxyWithAuth.java
+++ b/test/jdk/sun/net/www/protocol/https/HttpsURLConnection/PostThruProxyWithAuth.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -27,10 +27,11 @@
 import javax.net.*;
 import javax.net.ssl.*;
 
 import jdk.test.lib.process.OutputAnalyzer;
 import jdk.test.lib.process.ProcessTools;
+import jdk.test.lib.net.URIBuilder;
 
 /*
  * @test
  * @bug 4423074
  * @modules java.base/sun.net.www
@@ -45,10 +46,12 @@
  *        jdk.test.lib.JDKToolLauncher
  *        jdk.test.lib.Platform
  *        jdk.test.lib.process.*
  * @compile OriginServer.java ProxyTunnelServer.java
  * @run main/othervm -Djdk.http.auth.tunneling.disabledSchemes= PostThruProxyWithAuth
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true
+                     -Djdk.http.auth.tunneling.disabledSchemes= PostThruProxyWithAuth
  */
 public class PostThruProxyWithAuth {
 
     private static final String TEST_SRC = System.getProperty("test.src", ".");
     private static final int TIMEOUT = 30000;
@@ -60,10 +63,15 @@
     static String keyStoreFile = "keystore";
     static String trustStoreFile = "truststore";
     static String passwd = "passphrase";
 
     volatile private static int serverPort = 0;
+    private static ProxyTunnelServer pserver;
+    private static TestServer server;
+
+    static final String RESPONSE_MSG =
+        "Https POST thru proxy is successful with proxy authentication";
 
     /*
      * The TestServer implements a OriginServer that
      * processes HTTP requests and responses.
      */
@@ -77,13 +85,11 @@
          * the data sent in the response.
          *
          * @return bytes for the data in the response
          */
         public byte[] getBytes() {
-            return
-                "Https POST thru proxy is successful with proxy authentication".
-                getBytes();
+            return RESPONSE_MSG.getBytes();
         }
     }
 
     /*
      * Main method to create the server and client
@@ -101,15 +107,17 @@
         boolean useSSL = true;
         /*
          * setup the server
          */
         try {
+            InetAddress localhost = InetAddress.getLocalHost();
             ServerSocketFactory ssf = getServerSocketFactory(useSSL);
-            ServerSocket ss = ssf.createServerSocket(serverPort);
+            ServerSocket ss = ssf.createServerSocket(serverPort, 0, localhost);
             ss.setSoTimeout(TIMEOUT);  // 30 seconds
             serverPort = ss.getLocalPort();
-            new TestServer(ss);
+            server = new TestServer(ss);
+            System.out.println("Server started at: " + ss);
         } catch (Exception e) {
             System.out.println("Server side failed:" +
                                 e.getMessage());
             throw e;
         }
@@ -118,11 +126,17 @@
             doClientSide();
         } catch (Exception e) {
             System.out.println("Client side failed: " +
                                 e.getMessage());
             throw e;
-          }
+        }
+        long connectCount = pserver.getConnectCount();
+        if (connectCount == 0) {
+            throw new AssertionError("Proxy was not used!");
+        } else {
+            System.out.println("Proxy CONNECT count: " + connectCount);
+        }
     }
 
     private static ServerSocketFactory getServerSocketFactory
                    (boolean useSSL) throws Exception {
         if (useSSL) {
@@ -158,13 +172,20 @@
          * we want to avoid URLspoofCheck failures in cases where the cert
          * DN name does not match the hostname in the URL.
          */
         HttpsURLConnection.setDefaultHostnameVerifier(
                                       new NameVerifier());
-        URL url = new URL("https://" + getHostname() + ":" + serverPort);
+
+        URL url = URIBuilder.newBuilder()
+                      .scheme("https")
+                      .host(getHostname())
+                      .port(serverPort)
+                      .toURL();
 
         Proxy p = new Proxy(Proxy.Type.HTTP, pAddr);
+        System.out.println("Client connecting to: " + url);
+        System.out.println("Through proxy: " + pAddr);
         HttpsURLConnection https = (HttpsURLConnection)url.openConnection(p);
         https.setConnectTimeout(TIMEOUT);
         https.setReadTimeout(TIMEOUT);
         https.setDoOutput(true);
         https.setRequestMethod("POST");
@@ -180,13 +201,19 @@
            // clear the pipe
            BufferedReader in = new BufferedReader(
                                 new InputStreamReader(
                                 https.getInputStream()));
            String inputLine;
-           while ((inputLine = in.readLine()) != null)
-                 System.out.println("Client received: " + inputLine);
+           boolean msgFound = false;
+           while ((inputLine = in.readLine()) != null) {
+                System.out.println("Client received: " + inputLine);
+                if (inputLine.contains(RESPONSE_MSG)) msgFound = true;
+           }
            in.close();
+           if (!msgFound) {
+               throw new RuntimeException("POST message not found.");
+           }
         } catch (SSLException e) {
             if (ps != null)
                 ps.close();
             throw e;
         } catch (SocketTimeoutException e) {
@@ -200,11 +227,13 @@
             return true;
         }
     }
 
     static SocketAddress setupProxy() throws IOException {
-        ProxyTunnelServer pserver = new ProxyTunnelServer();
+
+        InetAddress localhost = InetAddress.getLocalHost();
+        pserver = new ProxyTunnelServer(localhost);
 
         /*
          * register a system wide authenticator and setup the proxy for
          * authentication
          */
@@ -214,11 +243,11 @@
         pserver.needUserAuth(true);
         pserver.setUserAuth("Test", "test123");
 
         pserver.start();
 
-        return new InetSocketAddress("localhost", pserver.getPort());
+        return new InetSocketAddress(localhost, pserver.getPort());
     }
 
     public static class TestAuthenticator extends Authenticator {
         public PasswordAuthentication getPasswordAuthentication() {
             return new PasswordAuthentication("Test",
