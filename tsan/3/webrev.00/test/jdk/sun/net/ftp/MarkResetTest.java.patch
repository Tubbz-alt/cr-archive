diff a/test/jdk/sun/net/ftp/MarkResetTest.java b/test/jdk/sun/net/ftp/MarkResetTest.java
--- a/test/jdk/sun/net/ftp/MarkResetTest.java
+++ b/test/jdk/sun/net/ftp/MarkResetTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,10 +22,11 @@
  */
 
 /*
  * @test
  * @bug 4673103
+ * @library /test/lib
  * @run main/othervm/timeout=140 MarkResetTest
  * @summary URLConnection.getContent() hangs over FTP for DOC, PPT, XLS files
  */
 
 import java.io.BufferedReader;
@@ -34,28 +35,32 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.PrintWriter;
+import java.io.UncheckedIOException;
 import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.Proxy;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.URL;
 import java.net.URLConnection;
 import java.nio.file.Files;
 import java.nio.file.Paths;
 
+import jdk.test.lib.net.URIBuilder;
+
 public class MarkResetTest {
     private static final String FILE_NAME = "EncDec.doc";
 
     /**
      * A class that simulates, on a separate, an FTP server.
      */
     private class FtpServer extends Thread {
-        private ServerSocket    server;
-        private int port;
-        private boolean done = false;
+        private final ServerSocket server;
+        private volatile boolean done = false;
         private boolean pasvEnabled = true;
         private boolean portEnabled = true;
         private boolean extendedEnabled = true;
 
         /**
@@ -171,11 +176,11 @@
             /**
              * Handles the protocol exchange with the client.
              */
 
             public void run() {
-                boolean done = false;
+                done = false;
                 String str;
                 int res;
                 boolean logged = false;
                 boolean waitpass = false;
 
@@ -242,12 +247,14 @@
                             if ("all".equalsIgnoreCase(arg)) {
                                 out.println("200 EPSV ALL command successful.");
                                 continue;
                             }
                             try {
-                                if (pasv == null)
-                                    pasv = new ServerSocket(0);
+                                if (pasv == null) {
+                                    pasv = new ServerSocket();
+                                    pasv.bind(new InetSocketAddress(server.getInetAddress(), 0));
+                                }
                                 int port = pasv.getLocalPort();
                                 out.println("229 Entering Extended" +
                                         " Passive Mode (|||" + port + "|)");
                             } catch (IOException ssex) {
                                 out.println("425 Can't build data connection:" +
@@ -260,12 +267,14 @@
                                 out.println("500 PASV is disabled, " +
                                                 "use PORT instead.");
                                 continue;
                             }
                             try {
-                                if (pasv == null)
-                                    pasv = new ServerSocket(0);
+                                if (pasv == null) {
+                                    pasv = new ServerSocket();
+                                    pasv.bind(new InetSocketAddress("127.0.0.1", 0));
+                                }
                                 int port = pasv.getLocalPort();
 
                                 // Parenthesis are optional, so let's be
                                 // nasty and don't put them
                                 out.println("227 Entering Passive Mode" +
@@ -362,21 +371,32 @@
                 }
             }
         }
 
         public FtpServer(int port) {
-            this.port = port;
+            this(InetAddress.getLoopbackAddress(), port);
+        }
+
+        public FtpServer(InetAddress address, int port) {
+            try {
+                if (address == null) {
+                    server = new ServerSocket(port);
+                } else {
+                    server = new ServerSocket();
+                    server.bind(new InetSocketAddress(address, port));
+                }
+            } catch (IOException e) {
+                throw new UncheckedIOException(e);
+            }
         }
 
         public FtpServer() {
-            this(21);
+            this(null, 21);
         }
 
         public int getPort() {
-            if (server != null)
-                return server.getLocalPort();
-            return 0;
+            return server.getLocalPort();
         }
 
         /**
          * A way to tell the server that it can stop.
          */
@@ -390,11 +410,12 @@
          * connection. When a connection happens, we just have to create
          * a thread that will handle it.
          */
         public void run() {
             try {
-                server = new ServerSocket(port);
+                System.out.println("FTP server waiting for connections at: "
+                        + server.getLocalSocketAddress());
                 Socket client;
                 client = server.accept();
                 (new FtpServerHandler(client)).start();
                 server.close();
             } catch (Exception e) {
@@ -417,14 +438,18 @@
             while (port == 0) {
                 Thread.sleep(500);
                 port = server.getPort();
             }
 
+            URL url = URIBuilder.newBuilder()
+                    .scheme("ftp")
+                    .loopback()
+                    .port(port)
+                    .path("/" + FILE_NAME)
+                    .toURL();
 
-            URL url = new URL("ftp://localhost:" + port + "/" + FILE_NAME);
-
-            URLConnection con = url.openConnection();
+            URLConnection con = url.openConnection(Proxy.NO_PROXY);
             System.out.println("getContent: " + con.getContent());
             System.out.println("getContent-length: " + con.getContentLength());
 
             InputStream is = con.getInputStream();
 
