diff a/test/jdk/sun/net/ftp/FtpGetContent.java b/test/jdk/sun/net/ftp/FtpGetContent.java
--- a/test/jdk/sun/net/ftp/FtpGetContent.java
+++ b/test/jdk/sun/net/ftp/FtpGetContent.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -26,25 +26,28 @@
 
 /*
  * @test
  * @bug 4255280
  * @summary URL.getContent() loses first six bytes for ftp URLs
+ * @run main FtpGetContent
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true FtpGetContent
  */
 
 public class FtpGetContent {
     static int filesize = 2048;
 
     /**
      * A class that simulates, on a separate, an FTP server.
      */
 
     private class FtpServer extends Thread {
-        private ServerSocket    server;
+        private final ServerSocket    server;
         private int port;
         private boolean done = false;
         private boolean portEnabled = true;
         private boolean pasvEnabled = true;
+        private boolean extendedEnabled = true;
         private String username;
         private String password;
         private String cwd;
         private String filename;
         private String type;
@@ -75,13 +78,14 @@
             private final int QUIT = 13;
             private final int STOR = 14;
             private final int NLST = 15;
             private final int RNFR = 16;
             private final int RNTO = 17;
+            private final int EPSV = 18;
             String[] cmds = { "USER", "PASS", "CWD", "CDUP", "PWD", "TYPE",
                               "NOOP", "RETR", "PASV", "PORT", "LIST", "REIN",
-                              "QUIT", "STOR", "NLST", "RNFR", "RNTO" };
+                              "QUIT", "STOR", "NLST", "RNFR", "RNTO", "EPSV"};
             private String arg = null;
             private ServerSocket pasv = null;
             private int data_port = 0;
             private InetAddress data_addr = null;
 
@@ -89,10 +93,11 @@
              * Parses a line to match it with one of the supported FTP commands.
              * Returns the command number.
              */
 
             private int parseCmd(String cmd) {
+                System.out.println("FTP server received command: " + cmd);
                 if (cmd == null || cmd.length() < 3)
                     return ERROR;
                 int blank = cmd.indexOf(' ');
                 if (blank < 0)
                     blank = cmd.length();
@@ -246,18 +251,46 @@
                             out.println("250 CWD command successful.");
                             break;
                         case PWD:
                             out.println("257 \"" + cwd + "\" is current directory");
                             break;
+                        case EPSV:
+                            if (!extendedEnabled || !pasvEnabled) {
+                                out.println("500 EPSV is disabled, " +
+                                                "use PORT instead.");
+                                continue;
+                            }
+                            if (!(server.getInetAddress() instanceof Inet6Address)) {
+                                // pretend EPSV is not implemented
+                                out.println("500 '" + str + "': command not understood.");
+                                break;
+                            }
+                            if ("all".equalsIgnoreCase(arg)) {
+                                out.println("200 EPSV ALL command successful.");
+                                continue;
+                            }
+                            try {
+                                if (pasv == null)
+                                    pasv = new ServerSocket(0, 0, server.getInetAddress());
+                                int port = pasv.getLocalPort();
+                                out.println("229 Entering Extended" +
+                                        " Passive Mode (|||" + port + "|)");
+                            } catch (IOException ssex) {
+                                out.println("425 Can't build data connection:" +
+                                                " Connection refused.");
+                            }
+                            break;
                         case PASV:
                             if (!pasvEnabled) {
                                 out.println("500 PASV is disabled, use PORT instead.");
                                 continue;
                             }
                             try {
-                                if (pasv == null)
-                                    pasv = new ServerSocket(0);
+                                if (pasv == null) {
+                                    pasv = new ServerSocket();
+                                    pasv.bind(new InetSocketAddress("127.0.0.1", 0));
+                                }
                                 int port = pasv.getLocalPort();
                                 out.println("227 Entering Passive Mode (127,0,0,1," +
                                             (port >> 8) + "," + (port & 0xff) +")");
                             } catch (IOException ssex) {
                                 out.println("425 Can't build data connection: Connection refused.");
@@ -365,14 +398,20 @@
                 }
             }
         }
 
         public FtpServer(int port) {
+            this(null, 0);
+        }
+
+        public FtpServer(InetAddress address, int port) {
             this.port = port;
             try {
-              server = new ServerSocket(port);
+                server = new ServerSocket();
+                server.bind(new InetSocketAddress(address, port));
             } catch (IOException e) {
+                throw new RuntimeException(e);
             }
         }
 
         public FtpServer() {
             this(21);
@@ -382,10 +421,20 @@
             if (server != null)
                 return server.getLocalPort();
             return 0;
         }
 
+        public String getAuthority() {
+            InetAddress address = server.getInetAddress();
+            String hostaddr = address.isAnyLocalAddress()
+                ? "localhost" : address.getHostAddress();
+            if (hostaddr.indexOf(':') > -1) {
+                hostaddr = "[" + hostaddr +"]";
+            }
+            return hostaddr + ":" + getPort();
+        }
+
         /**
          * A way to tell the server that it can stop.
          */
         synchronized public void terminate() {
             done = true;
@@ -450,18 +499,20 @@
     }
 
     public FtpGetContent() throws Exception {
         FtpServer server = null;
         try {
-            server = new FtpServer(0);
+            InetAddress loopback = InetAddress.getLoopbackAddress();
+            server = new FtpServer(loopback, 0);
             server.start();
-            int port = server.getPort();
+            String authority = server.getAuthority();
 
             // Now let's check the URL handler
 
-            URL url = new URL("ftp://localhost:" + port + "/pub/BigFile");
-            InputStream stream = (InputStream)url.getContent();
+            URL url = new URL("ftp://" + authority + "/pub/BigFile");
+            InputStream stream = (InputStream)url.openConnection(Proxy.NO_PROXY)
+                                 .getContent();
             byte[] buffer = new byte[1024];
             int totalBytes = 0;
             int bytesRead = stream.read(buffer);
             while (bytesRead != -1) {
                 totalBytes += bytesRead;
