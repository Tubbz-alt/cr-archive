diff a/test/jdk/javax/net/ssl/templates/SSLSocketSSLEngineTemplate.java b/test/jdk/javax/net/ssl/templates/SSLSocketSSLEngineTemplate.java
--- a/test/jdk/javax/net/ssl/templates/SSLSocketSSLEngineTemplate.java
+++ b/test/jdk/javax/net/ssl/templates/SSLSocketSSLEngineTemplate.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -28,11 +28,14 @@
 
 /*
  * @test
  * @bug 7105780
  * @summary Add SSLSocket client/SSLEngine server to templates directory.
- * @run main/othervm SSLSocketSSLEngineTemplate
+ * @run main/othervm SSLSocketSSLEngineTemplate TLSv1
+ * @run main/othervm SSLSocketSSLEngineTemplate TLSv1.1
+ * @run main/othervm SSLSocketSSLEngineTemplate TLSv1.2
+ * @run main/othervm SSLSocketSSLEngineTemplate TLSv1.3
  */
 
 /**
  * A SSLSocket/SSLEngine interop test case.  This is not the way to
  * code SSLEngine-based servers, but works for what we need to do here,
@@ -98,15 +101,16 @@
      * after gaining some familiarity with this application.
      */
     private static final boolean debug = false;
     private final SSLContext sslc;
     private SSLEngine serverEngine;     // server-side SSLEngine
+    private SSLSocket clientSocket;
 
     private final byte[] serverMsg =
         "Hi there Client, I'm a Server.".getBytes();
     private final byte[] clientMsg =
-        "Hello Server, I'm a Client!  Pleased to meet you!".getBytes();
+        "Hello Server, I'm a Client! Pleased to meet you!".getBytes();
 
     private ByteBuffer serverOut;       // write side of serverEngine
     private ByteBuffer serverIn;        // read side of serverEngine
 
     private volatile Exception clientException;
@@ -122,11 +126,10 @@
      * The following is to set up the keystores/trust material.
      */
     private static final String pathToStores = "../etc";
     private static final String keyStoreFile = "keystore";
     private static final String trustStoreFile = "truststore";
-    private static final String passwd = "passphrase";
     private static final String keyFilename =
             System.getProperty("test.src", ".") + "/" + pathToStores
             + "/" + keyStoreFile;
     private static final String trustFilename =
             System.getProperty("test.src", ".") + "/" + pathToStores
@@ -134,39 +137,35 @@
 
     /*
      * Main entry point for this test.
      */
     public static void main(String args[]) throws Exception {
+        String protocol = args[0];
+
         // reset security properties to make sure that the algorithms
         // and keys used in this test are not disabled.
         Security.setProperty("jdk.tls.disabledAlgorithms", "");
         Security.setProperty("jdk.certpath.disabledAlgorithms", "");
 
         if (debug) {
             System.setProperty("javax.net.debug", "all");
         }
 
-        String [] protocols = new String [] {
-            "SSLv3", "TLSv1", "TLSv1.1", "TLSv1.2" };
-
-        for (String protocol : protocols) {
-            log("Testing " + protocol);
-            /*
-             * Run the tests with direct and indirect buffers.
-             */
-            SSLSocketSSLEngineTemplate test =
-                new SSLSocketSSLEngineTemplate(protocol);
-            log("-------------------------------------");
-            log("Testing " + protocol + " for direct buffers ...");
-            test.runTest(true);
-
-            log("---------------------------------------");
-            log("Testing " + protocol + " for indirect buffers ...");
-            test.runTest(false);
-        }
+        /*
+         * Run the tests with direct and indirect buffers.
+         */
+        SSLSocketSSLEngineTemplate test =
+            new SSLSocketSSLEngineTemplate(protocol);
+        log("-------------------------------------");
+        log("Testing " + protocol + " for direct buffers ...");
+        test.runTest(true);
+
+        log("---------------------------------------");
+        log("Testing " + protocol + " for indirect buffers ...");
+        test.runTest(false);
 
-        System.out.println("Test Passed.");
+        log("Test Passed.");
     }
 
     /*
      * Create an initialized SSLContext to use for these tests.
      */
@@ -212,17 +211,19 @@
      *
      * One could easily separate these phases into separate
      * sections of code.
      */
     private void runTest(boolean direct) throws Exception {
+        clientSocket = null;
         boolean serverClose = direct;
 
         // generates the server-side Socket
         try (ServerSocket serverSocket = new ServerSocket()) {
             serverSocket.setReuseAddress(false);
             serverSocket.bind(null);
             int port = serverSocket.getLocalPort();
+            log("Port: " + port);
             Thread thread = createClientThread(port, serverClose);
 
             createSSLEngine();
             createBuffers(direct);
 
@@ -259,15 +260,22 @@
 
                     // Read from the Client side.
                     try {
                         len = is.read(inbound);
                         if (len == -1) {
-                            throw new Exception("Unexpected EOF");
+                            logSocketStatus(clientSocket);
+                            if (clientSocket.isClosed()
+                                    || clientSocket.isOutputShutdown()) {
+                                log("Client socket was closed or shutdown output");
+                                break;
+                            } else {
+                                throw new Exception("Unexpected EOF");
+                            }
                         }
                         cTOs.put(inbound, 0, len);
                     } catch (SocketTimeoutException ste) {
-                        // swallow.  Nothing yet, probably waiting on us.
+                        // swallow. Nothing yet, probably waiting on us.
                     }
 
                     cTOs.flip();
 
                     serverResult = serverEngine.unwrap(cTOs, serverIn);
@@ -366,10 +374,12 @@
             @Override
             public void run() {
                 // client-side socket
                 try (SSLSocket sslSocket = (SSLSocket)sslc.getSocketFactory().
                             createSocket("localhost", port)) {
+                    clientSocket = sslSocket;
+
                     OutputStream os = sslSocket.getOutputStream();
                     InputStream is = sslSocket.getInputStream();
 
                     // write(byte[]) goes in one shot.
                     os.write(clientMsg);
@@ -474,10 +484,19 @@
 
     private static boolean isEngineClosed(SSLEngine engine) {
         return (engine.isOutboundDone() && engine.isInboundDone());
     }
 
+    private static void logSocketStatus(Socket socket) {
+        log("##### " + socket + " #####");
+        log("isBound: " + socket.isBound());
+        log("isConnected: " + socket.isConnected());
+        log("isClosed: " + socket.isClosed());
+        log("isInputShutdown: " + socket.isInputShutdown());
+        log("isOutputShutdown: " + socket.isOutputShutdown());
+    }
+
     /*
      * Logging code
      */
     private static boolean resultOnce = true;
 
@@ -485,11 +504,11 @@
         if (!logging) {
             return;
         }
         if (resultOnce) {
             resultOnce = false;
-            System.out.println("The format of the SSLEngineResult is: \n"
+            log("The format of the SSLEngineResult is: \n"
                     + "\t\"getStatus() / getHandshakeStatus()\" +\n"
                     + "\t\"bytesConsumed() / bytesProduced()\"\n");
         }
         HandshakeStatus hsStatus = result.getHandshakeStatus();
         log(str
@@ -501,9 +520,13 @@
         }
     }
 
     private static void log(String str) {
         if (logging) {
-            System.out.println(str);
+            if (debug) {
+                System.err.println(str);
+            } else {
+                System.out.println(str);
+            }
         }
     }
 }
