diff a/test/jdk/javax/swing/PopupFactory/6276087/NonOpaquePopupMenuTest.java b/test/jdk/javax/swing/PopupFactory/6276087/NonOpaquePopupMenuTest.java
--- a/test/jdk/javax/swing/PopupFactory/6276087/NonOpaquePopupMenuTest.java
+++ b/test/jdk/javax/swing/PopupFactory/6276087/NonOpaquePopupMenuTest.java
@@ -30,14 +30,18 @@
  */
 import java.awt.*;
 import java.awt.event.*;
 
 import javax.swing.*;
+import static javax.swing.UIManager.LookAndFeelInfo;
+import static javax.swing.UIManager.getInstalledLookAndFeels;
+import static javax.swing.UIManager.setLookAndFeel;
 
 public class NonOpaquePopupMenuTest extends JFrame {
 
     private static JMenu fileMenu;
+    private static final String AQUALAF="com.apple.laf.AquaLookAndFeel";
 
     public NonOpaquePopupMenuTest() {
         getContentPane().setBackground(java.awt.Color.RED);
         JMenuBar menuBar = new JMenuBar();
         fileMenu = new JMenu("File");
@@ -51,34 +55,44 @@
         setSize(new Dimension(640, 480));
         setVisible(true);
     }
 
     public static void main(String[] args) throws Throwable {
-        Robot robot = new Robot();
-        robot.setAutoDelay(250);
+        LookAndFeelInfo[] lookAndFeelInfoArray = getInstalledLookAndFeels();
+
+        for (LookAndFeelInfo lookAndFeelInfo : lookAndFeelInfoArray) {
+            System.out.println(lookAndFeelInfo.getClassName());
+            if ( AQUALAF == lookAndFeelInfo.getClassName()) {
+                System.out.println("This test scenario is not applicable for" +
+                        " Aqua LookandFeel and hence skipping the validation");
+                continue;
+            }
+            setLookAndFeel(lookAndFeelInfo.getClassName());
+            Robot robot = new Robot();
+            robot.setAutoDelay(250);
 
-        SwingUtilities.invokeAndWait(new Runnable() {
+            SwingUtilities.invokeAndWait(new Runnable() {
 
-            @Override
-            public void run() {
-                new NonOpaquePopupMenuTest();
-            }
-        });
+                @Override
+                public void run() {
+                    new NonOpaquePopupMenuTest();
+                }
+            });
 
-        robot.waitForIdle();
+            robot.waitForIdle();
 
-        Point p = getMenuClickPoint();
-        robot.mouseMove(p.x, p.y);
-        robot.mousePress(InputEvent.BUTTON1_MASK);
-        robot.mouseRelease(InputEvent.BUTTON1_MASK);
+            Point p = getMenuClickPoint();
+            robot.mouseMove(p.x, p.y);
+            robot.mousePress(InputEvent.BUTTON1_MASK);
+            robot.mouseRelease(InputEvent.BUTTON1_MASK);
 
-        robot.waitForIdle();
+            robot.waitForIdle();
 
-        if (isParentOpaque()) {
-            throw new RuntimeException("Popup menu parent is opaque");
+            if (isParentOpaque()) {
+                throw new RuntimeException("Popup menu parent is opaque");
+            }
         }
-
     }
 
     private static boolean isParentOpaque() throws Exception {
         final boolean result[] = new boolean[1];
 
