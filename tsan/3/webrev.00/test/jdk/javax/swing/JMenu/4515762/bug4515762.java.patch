diff a/test/jdk/javax/swing/JMenu/4515762/bug4515762.java b/test/jdk/javax/swing/JMenu/4515762/bug4515762.java
--- a/test/jdk/javax/swing/JMenu/4515762/bug4515762.java
+++ b/test/jdk/javax/swing/JMenu/4515762/bug4515762.java
@@ -37,10 +37,11 @@
  */
 public class bug4515762 {
 
     private static volatile boolean actionExpected = false;
     private static volatile boolean actionRecieved = false;
+    private static JFrame frame;
 
     /**
      * @param str name of Menu
      */
     private static JMenuBar createMenuBar() {
@@ -105,67 +106,71 @@
             throw new RuntimeException("Action has not been received");
         }
     }
 
     public static void main(String[] args) throws Throwable {
-        Robot robot = new Robot();
-        robot.setAutoDelay(250);
-
-        SwingUtilities.invokeAndWait(new Runnable() {
-
-            @Override
-            public void run() {
-                JFrame frame = new JFrame("Test");
-                frame.setJMenuBar(createMenuBar());
-                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
-                frame.pack();
-                frame.setVisible(true);
-            }
-        });
+        try {
+            Robot robot = new Robot();
+            robot.setAutoDelay(250);
+
+            SwingUtilities.invokeAndWait(new Runnable() {
+
+                @Override
+                public void run() {
+                    frame = new JFrame("Test");
+                    frame.setJMenuBar(createMenuBar());
+                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+                    frame.pack();
+                    frame.setVisible(true);
+                }
+            });
 
-        robot.waitForIdle();
+            robot.waitForIdle();
 
-        Util.hitMnemonics(robot, KeyEvent.VK_D);
-        robot.waitForIdle();
+            Util.hitMnemonics(robot, KeyEvent.VK_D);
+            robot.waitForIdle();
 
-        // Press the S key many times (should not cause an action peformed)
-        int TIMES = 5;
-        for (int i = 0; i < TIMES; i++) {
-            Util.hitKeys(robot, KeyEvent.VK_S);
-        }
-        robot.waitForIdle();
+            // Press the S key many times (should not cause an action peformed)
+            int TIMES = 5;
+            for (int i = 0; i < TIMES; i++) {
+                Util.hitKeys(robot, KeyEvent.VK_S);
+            }
+            robot.waitForIdle();
 
-        // Unique menu items.
-        actionExpected = true;
-        Util.hitMnemonics(robot, KeyEvent.VK_U);
+            // Unique menu items.
+            actionExpected = true;
+            Util.hitMnemonics(robot, KeyEvent.VK_U);
 
-        robot.keyPress(KeyEvent.VK_S);
-        robot.keyRelease(KeyEvent.VK_S);
-        robot.waitForIdle();
+            robot.keyPress(KeyEvent.VK_S);
+            robot.keyRelease(KeyEvent.VK_S);
+            robot.waitForIdle();
 
-        checkAction();
+            checkAction();
 
-        Util.hitMnemonics(robot, KeyEvent.VK_U);
-        robot.keyPress(KeyEvent.VK_M);
-        robot.keyRelease(KeyEvent.VK_M);
-        robot.waitForIdle();
+            Util.hitMnemonics(robot, KeyEvent.VK_U);
+            robot.keyPress(KeyEvent.VK_M);
+            robot.keyRelease(KeyEvent.VK_M);
+            robot.waitForIdle();
 
-        checkAction();
+            checkAction();
 
-        Util.hitMnemonics(robot, KeyEvent.VK_U);
-        Util.hitKeys(robot, KeyEvent.VK_T);
-        robot.waitForIdle();
+            Util.hitMnemonics(robot, KeyEvent.VK_U);
+            Util.hitKeys(robot, KeyEvent.VK_T);
+            robot.waitForIdle();
 
-        checkAction();
-        Util.hitMnemonics(robot, KeyEvent.VK_U);
-        Util.hitKeys(robot, KeyEvent.VK_W);
-        robot.waitForIdle();
+            checkAction();
+            Util.hitMnemonics(robot, KeyEvent.VK_U);
+            Util.hitKeys(robot, KeyEvent.VK_W);
+            robot.waitForIdle();
 
-        checkAction();
+            checkAction();
 
-        Util.hitMnemonics(robot, KeyEvent.VK_U);
-        Util.hitKeys(robot, KeyEvent.VK_U);
-        robot.waitForIdle();
+            Util.hitMnemonics(robot, KeyEvent.VK_U);
+            Util.hitKeys(robot, KeyEvent.VK_U);
+            robot.waitForIdle();
 
-        checkAction();
+            checkAction();
+        } finally {
+            if (frame != null) SwingUtilities.invokeAndWait(() -> frame.dispose());
+        }
     }
 }
