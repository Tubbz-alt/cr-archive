diff a/test/jdk/javax/swing/JPopupMenu/6580930/bug6580930.java b/test/jdk/javax/swing/JPopupMenu/6580930/bug6580930.java
--- a/test/jdk/javax/swing/JPopupMenu/6580930/bug6580930.java
+++ b/test/jdk/javax/swing/JPopupMenu/6580930/bug6580930.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2007, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -40,10 +40,12 @@
     private static ExtendedRobot robot;
     private static JFrame frame;
     private static JPopupMenu popup;
     private static Toolkit toolkit;
     private static volatile boolean skipTest = false;
+    private static Point loc;
+    private static int y;
 
     private static void createGui() {
         frame = new JFrame();
         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         frame.setUndecorated(true);
@@ -59,66 +61,77 @@
         frame.setSize(200, 200);
     }
 
 
     public static void main(String[] args) throws Exception {
-        SwingUtilities.invokeAndWait(new Runnable() {
-            public void run() {
-                JPopupMenu.setDefaultLightWeightPopupEnabled(true);
-                bug6580930.createGui();
-            }
-        });
+        try {
+            SwingUtilities.invokeAndWait(new Runnable() {
+                public void run() {
+                    JPopupMenu.setDefaultLightWeightPopupEnabled(true);
+                    bug6580930.createGui();
+                }
+            });
 
-        toolkit = Toolkit.getDefaultToolkit();
-        robot = new ExtendedRobot();
-        robot.setAutoDelay(10);
-        robot.waitForIdle();
+            toolkit = Toolkit.getDefaultToolkit();
+            robot = new ExtendedRobot();
+            robot.setAutoDelay(10);
+            robot.waitForIdle();
+
+            SwingUtilities.invokeAndWait(new Runnable() {
+                public void run() {
+                    Insets insets = toolkit.getScreenInsets(frame.getGraphicsConfiguration());
+                    if (insets.bottom == 0) {
+                        System.out.println("This test is only for configurations with taskbar on the bottom");
 
-        SwingUtilities.invokeAndWait(new Runnable() {
-            public void run() {
-                Insets insets = toolkit.getScreenInsets(frame.getGraphicsConfiguration());
-                if (insets.bottom == 0) {
-                    System.out.println("This test is only for configurations with taskbar on the bottom");
+                        skipTest = true;
+                    }
 
-                    skipTest = true;
+                    Dimension screenSize = toolkit.getScreenSize();
+                    frame.setLocation(screenSize.width/2, screenSize.height - frame.getHeight() - insets.bottom + 10);
+                    frame.setVisible(true);
                 }
+            });
 
-                Dimension screenSize = toolkit.getScreenSize();
-                frame.setLocation(screenSize.width/2, screenSize.height - frame.getHeight() - insets.bottom + 10);
-                frame.setVisible(true);
-            }
-        });
+            robot.waitForIdle();
 
-        robot.waitForIdle();
+            if(skipTest) {
+                return;
+            }
 
-        if(skipTest) {
-            return;
-        }
-        Point loc = frame.getLocationOnScreen();
+            SwingUtilities.invokeAndWait(() -> loc = frame.getLocationOnScreen());
+            robot.waitForIdle();
 
-        robot.mouseMove(loc.x, loc.y);
-        showPopup();
-        robot.waitForIdle();
-        if (isHeavyWeightMenuVisible()) {
-            throw new RuntimeException("HeavyWeightPopup is unexpectedly visible");
-        }
+            robot.mouseMove(loc.x, loc.y);
+            showPopup();
+            robot.waitForIdle();
+            if (!System.getProperty("os.name").startsWith("Mac")
+                && isHeavyWeightMenuVisible()) {
+                throw new RuntimeException("HeavyWeightPopup is unexpectedly visible");
+            }
 
-        robot.keyPress(KeyEvent.VK_ESCAPE);
-        robot.keyRelease(KeyEvent.VK_ESCAPE);
+            robot.keyPress(KeyEvent.VK_ESCAPE);
+            robot.keyRelease(KeyEvent.VK_ESCAPE);
 
-        int x = loc.x;
-        int y = loc.y + (frame.getHeight() - popup.getPreferredSize().height) + 1;
-        robot.mouseMove(x, y);
+            int x = loc.x;
+            SwingUtilities.invokeAndWait( () -> y = loc.y + (frame.getHeight() -
+                    popup.getPreferredSize().height) + 1);
+            robot.waitForIdle();
+            robot.mouseMove(x, y);
 
-        showPopup();
+            showPopup();
+            SwingUtilities.invokeAndWait(() -> loc = popup.getLocationOnScreen());
+            robot.waitForIdle();
 
-        if (!popup.getLocationOnScreen().equals(new Point(x, y))) {
-            throw new RuntimeException("Popup is unexpectedly shifted");
-        }
+            if (!loc.equals(new Point(x, y))) {
+                throw new RuntimeException("Popup is unexpectedly shifted");
+            }
 
-        if (!isHeavyWeightMenuVisible()) {
-            throw new RuntimeException("HeavyWeightPopup is unexpectedly hidden");
+            if (!isHeavyWeightMenuVisible()) {
+                throw new RuntimeException("HeavyWeightPopup is unexpectedly hidden");
+            }
+        } finally {
+            if (frame != null) SwingUtilities.invokeAndWait(() -> frame.dispose());
         }
     }
 
     private static void showPopup() {
         robot.mousePress(InputEvent.BUTTON1_MASK);
