diff a/test/jdk/com/sun/nio/sctp/SctpChannel/SocketOptionTests.java b/test/jdk/com/sun/nio/sctp/SctpChannel/SocketOptionTests.java
--- a/test/jdk/com/sun/nio/sctp/SctpChannel/SocketOptionTests.java
+++ b/test/jdk/com/sun/nio/sctp/SctpChannel/SocketOptionTests.java
@@ -70,12 +70,11 @@
             out.println("SCTP protocol is not supported");
             out.println("Test cannot be run");
             return;
         }
 
-        try {
-            SctpChannel sc = SctpChannel.open();
+        try (SctpChannel sc = SctpChannel.open()) {
 
             /* check supported options */
             Set<SctpSocketOption<?>> options = sc.supportedOptions();
             List<? extends SctpSocketOption<?>> expected = Arrays.<SctpSocketOption<?>>asList(
                     SCTP_DISABLE_FRAGMENTS, SCTP_EXPLICIT_COMPLETE,
@@ -141,12 +140,10 @@
         }
     }
 
     /* SCTP_PRIMARY_ADDR */
     void sctpPrimaryAddr() throws IOException {
-        SocketAddress addrToSet = null;;
-
         System.out.println("TESTING SCTP_PRIMARY_ADDR");
         SctpChannel sc = SctpChannel.open();
         SctpServerChannel ssc = SctpServerChannel.open().bind(null);
         Set<SocketAddress> addrs = ssc.getAllLocalAddresses();
         if (addrs.isEmpty())
@@ -156,16 +153,15 @@
         InetSocketAddress serverAddr = (InetSocketAddress) addrs.iterator().next();
         debug("connecting to " + serverAddr);
         sc.connect(serverAddr);
         SctpChannel peerChannel = ssc.accept();
         ssc.close();
-        Set<SocketAddress> peerAddrs = peerChannel.getAllLocalAddresses();
-        debug("Peer local Addresses: ");
-        for (Iterator<SocketAddress> it = peerAddrs.iterator(); it.hasNext(); ) {
+        Set<SocketAddress> remoteAddresses = sc.getRemoteAddresses();
+        debug("Remote Addresses: ");
+        for (Iterator<SocketAddress> it = remoteAddresses.iterator(); it.hasNext(); ) {
             InetSocketAddress addr = (InetSocketAddress)it.next();
             debug("\t" + addr);
-            addrToSet = addr;   // any of the peer addresses will do!
         }
 
         /* retrieval of SCTP_PRIMARY_ADDR is not supported on Solaris */
         if ("SunOS".equals(osName)) {
             /* For now do not set this option. There is a bug on Solaris 10 pre Update 5
@@ -174,29 +170,25 @@
             //sc.setOption(SCTP_PRIMARY_ADDR, addrToSet);
             return;
         } else { /* Linux */
             SocketAddress primaryAddr = sc.getOption(SCTP_PRIMARY_ADDR);
             System.out.println("SCTP_PRIMARY_ADDR returned: " + primaryAddr);
-            /* Verify that this is one of the peer addresses */
-            boolean found = false;
-            addrToSet = primaryAddr; // may not have more than one addr
-            for (Iterator<SocketAddress> it = peerAddrs.iterator(); it.hasNext(); ) {
-                InetSocketAddress addr = (InetSocketAddress)it.next();
-                if (addr.equals(primaryAddr)) {
-                    found = true;
-                }
-                addrToSet = addr;
+            /* Verify that this is one of the remote addresses */
+            check(remoteAddresses.contains(primaryAddr), "SCTP_PRIMARY_ADDR returned bogus address!");
+
+            for (Iterator<SocketAddress> it = remoteAddresses.iterator(); it.hasNext(); ) {
+                InetSocketAddress addrToSet = (InetSocketAddress) it.next();
+                System.out.println("SCTP_PRIMARY_ADDR try set to: " + addrToSet);
+                sc.setOption(SCTP_PRIMARY_ADDR, addrToSet);
+                System.out.println("SCTP_PRIMARY_ADDR set to    : " + addrToSet);
+                primaryAddr = sc.getOption(SCTP_PRIMARY_ADDR);
+                System.out.println("SCTP_PRIMARY_ADDR returned  : " + primaryAddr);
+                check(addrToSet.equals(primaryAddr), "SCTP_PRIMARY_ADDR not set correctly");
             }
-            check(found, "SCTP_PRIMARY_ADDR returned bogus address!");
-
-            System.out.println("SCTP_PRIMARY_ADDR try set to: " + addrToSet);
-            sc.setOption(SCTP_PRIMARY_ADDR, addrToSet);
-            System.out.println("SCTP_PRIMARY_ADDR set to: " + addrToSet);
-            primaryAddr = sc.getOption(SCTP_PRIMARY_ADDR);
-            System.out.println("SCTP_PRIMARY_ADDR returned: " + primaryAddr);
-            check(addrToSet.equals(primaryAddr),"SCTP_PRIMARY_ADDR not set correctly");
         }
+        sc.close();
+        peerChannel.close();
     }
             //--------------------- Infrastructure ---------------------------
     boolean debug = true;
     volatile int passed = 0, failed = 0;
     void pass() {passed++;}
