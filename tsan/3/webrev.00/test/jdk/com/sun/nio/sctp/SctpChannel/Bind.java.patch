diff a/test/jdk/com/sun/nio/sctp/SctpChannel/Bind.java b/test/jdk/com/sun/nio/sctp/SctpChannel/Bind.java
--- a/test/jdk/com/sun/nio/sctp/SctpChannel/Bind.java
+++ b/test/jdk/com/sun/nio/sctp/SctpChannel/Bind.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -108,13 +108,14 @@
 
             /* TEST 6: AlreadyConnectedException */
             try {
                 channel.close();  /* open a new unbound channel for test */
                 channel = SctpChannel.open();
-                connectChannel(channel);
-                channel.bind(null);
-                fail("AlreadyConnectedException expected");
+                try (var peer = connectChannel(channel)) {
+                    channel.bind(null);
+                    fail("AlreadyConnectedException expected");
+                }
             } catch (AlreadyConnectedException unused) { pass();
             } catch (IOException ioe) { unexpected(ioe); }
 
             /* TEST 7: ClosedChannelException - If this channel is closed */
             try {
@@ -262,11 +263,13 @@
         } catch (IOException ioe) {
             ioe.printStackTrace();
         } finally {
             try { if (channel != null) channel.close(); }
             catch (IOException ioe) { unexpected(ioe); }
-        }
+            try { if (peerChannel != null) peerChannel.close(); }
+            catch (IOException ioe) { unexpected(ioe); }
+         }
     }
 
     boolean boundAddress(SctpChannel channel, InetAddress addr)
         throws IOException {
         for (SocketAddress boundAddr : channel.getAllLocalAddresses()) {
