diff a/test/jdk/com/sun/jndi/ldap/InvalidLdapFilters.java b/test/jdk/com/sun/jndi/ldap/InvalidLdapFilters.java
--- a/test/jdk/com/sun/jndi/ldap/InvalidLdapFilters.java
+++ b/test/jdk/com/sun/jndi/ldap/InvalidLdapFilters.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,10 +22,11 @@
  */
 
 /**
  * @test
  * @bug 6916202 7041125
+ * @library /test/lib
  * @summary More cases of invalid ldap filters accepted and processed
  *      LDAP API does not catch malformed filters that contain two operands
  *      for the ! operator
  * @run main/othervm InvalidLdapFilters valid (cn=Babs)
  * @run main/othervm InvalidLdapFilters valid (&(cn=Bob))
@@ -85,16 +86,20 @@
  */
 
 import java.io.*;
 import javax.naming.*;
 import javax.naming.directory.*;
-import java.util.Properties;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
 import java.util.Hashtable;
 
 import java.net.Socket;
 import java.net.ServerSocket;
 
+import jdk.test.lib.net.URIBuilder;
+
 public class InvalidLdapFilters {
     // Should we run the client or server in a separate thread?
     //
     // Both sides can throw exceptions, but do you have a preference
     // as to which side should be the main thread.
@@ -109,13 +114,17 @@
     // Define the server side of the test.
     //
     // If the server prematurely exits, serverReady will be set to true
     // to avoid infinite hangs.
     void doServerSide() throws Exception {
-        ServerSocket serverSock = new ServerSocket(serverPort);
+        ServerSocket serverSock = new ServerSocket();
+        SocketAddress sockAddr = new InetSocketAddress(
+                InetAddress.getLoopbackAddress(), serverPort);
+        // Bind server socket
+        serverSock.bind(sockAddr);
 
-        // signal client, it's ready to accecpt connection
+        // signal client, it's ready to accept connection
         serverPort = serverSock.getLocalPort();
         serverReady = true;
 
         // accept a connection
         Socket socket = serverSock.accept();
@@ -158,14 +167,20 @@
         while (!serverReady) {
             Thread.sleep(50);
         }
 
         // set up the environment for creating the initial context
-        Hashtable<Object, Object> env = new Hashtable<Object, Object>();
+        Hashtable<Object, Object> env = new Hashtable<>();
         env.put(Context.INITIAL_CONTEXT_FACTORY,
                                 "com.sun.jndi.ldap.LdapCtxFactory");
-        env.put(Context.PROVIDER_URL, "ldap://localhost:" + serverPort);
+        String providerUrl = URIBuilder.newBuilder()
+                .scheme("ldap")
+                .loopback()
+                .port(serverPort)
+                .build()
+                .toString();
+        env.put(Context.PROVIDER_URL, providerUrl);
         env.put("com.sun.jndi.ldap.read.timeout", "1000");
 
         // env.put(Context.SECURITY_AUTHENTICATION, "simple");
         // env.put(Context.SECURITY_PRINCIPAL,"cn=root");
         // env.put(Context.SECURITY_CREDENTIALS,"root");
