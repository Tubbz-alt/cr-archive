diff a/test/jdk/com/sun/net/httpserver/Test13.java b/test/jdk/com/sun/net/httpserver/Test13.java
--- a/test/jdk/com/sun/net/httpserver/Test13.java
+++ b/test/jdk/com/sun/net/httpserver/Test13.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -25,10 +25,11 @@
  * @test
  * @bug 6270015
  * @library /test/lib
  * @build jdk.test.lib.net.SimpleSSLContext
  * @run main/othervm Test13
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true Test13
  * @summary Light weight HTTP server
  */
 
 import com.sun.net.httpserver.*;
 
@@ -36,10 +37,11 @@
 import java.util.logging.*;
 import java.io.*;
 import java.net.*;
 import javax.net.ssl.*;
 import jdk.test.lib.net.SimpleSSLContext;
+import jdk.test.lib.net.URIBuilder;
 
 /* basic http/s connectivity test
  * Tests:
  *      - same as Test12, but with 64 threads
  */
@@ -59,14 +61,16 @@
         Logger l = Logger.getLogger ("com.sun.net.httpserver");
         Handler ha = new ConsoleHandler();
         ha.setLevel(Level.ALL);
         l.setLevel(Level.ALL);
         l.addHandler(ha);
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+
         try {
             String root = System.getProperty ("test.src")+ "/docs";
             System.out.print ("Test13: ");
-            InetSocketAddress addr = new InetSocketAddress (0);
+            InetSocketAddress addr = new InetSocketAddress(loopback, 0);
             s1 = HttpServer.create (addr, 0);
             s2 = HttpsServer.create (addr, 0);
             HttpHandler h = new FileServerHandler (root);
             HttpContext c1 = s1.createContext ("/test1", h);
             HttpContext c2 = s2.createContext ("/test1", h);
@@ -134,12 +138,17 @@
             this.size = size;
         }
 
         public void run () {
             try {
-                URL url = new URL (protocol+"://localhost:"+port+"/test1/"+f);
-                HttpURLConnection urlc = (HttpURLConnection) url.openConnection();
+                URL url = URIBuilder.newBuilder()
+                          .scheme(protocol)
+                          .loopback()
+                          .port(port)
+                          .path("/test1/"+f)
+                          .toURL();
+                HttpURLConnection urlc = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);
                 if (urlc instanceof HttpsURLConnection) {
                     HttpsURLConnection urlcs = (HttpsURLConnection) urlc;
                     urlcs.setHostnameVerifier (new HostnameVerifier () {
                         public boolean verify (String s, SSLSession s1) {
                             return true;
