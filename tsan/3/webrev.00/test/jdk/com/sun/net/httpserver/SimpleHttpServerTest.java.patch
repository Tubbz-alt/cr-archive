diff a/test/jdk/com/sun/net/httpserver/SimpleHttpServerTest.java b/test/jdk/com/sun/net/httpserver/SimpleHttpServerTest.java
--- a/test/jdk/com/sun/net/httpserver/SimpleHttpServerTest.java
+++ b/test/jdk/com/sun/net/httpserver/SimpleHttpServerTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,12 +22,16 @@
  */
 
 /**
  * @test
  * @bug 8015692
+ * @key intermittent
  * @summary  Test HttpServer instantiation, start, and stop repeated in a loop
- *           Testing for Bind exception on Windows
+ *           Testing for Bind exception on Windows. This test may fail
+ *           intermittently if other tests / process manage to bind to
+ *           the same port that the test is using in the short window
+ *           time where the port might appear available again.
  */
 
 import java.net.InetSocketAddress;
 import java.net.ServerSocket;
 
@@ -39,26 +43,42 @@
     public static void main(String[] args) throws Exception {
 
         System.out.println(System.getProperty("java.version"));
         InetSocketAddress serverAddr = new InetSocketAddress(0);
         HttpServer server = HttpServer.create(serverAddr, 0);
-        final int serverPort = server.getAddress().getPort();
+        int serverPort = server.getAddress().getPort();
         server.start();
         server.stop(0);
         serverAddr = new InetSocketAddress(serverPort);
         int exceptionCount = 0;
+        boolean failedOnce = false;
         System.out.println("Using serverPort == " + serverPort);
-        for (int i = 0; i < 100; i++) {
-            try {
-                server = HttpServer.create(serverAddr, 0);
-                server.start();
-                server.stop(0);
-            } catch (Exception ex) {
-                ex.printStackTrace();
-                exceptionCount++;
+        RETRY: while (exceptionCount == 0) {
+            for (int i = 0; i < 100; i++) {
+                try {
+                    server = HttpServer.create(serverAddr, 0);
+                    server.start();
+                    server.stop(0);
+                } catch (Exception ex) {
+                    if (!failedOnce) {
+                        failedOnce = true;
+                        server = HttpServer.create(new InetSocketAddress(0), 0);
+                        serverPort = server.getAddress().getPort();
+                        server.start();
+                        server.stop(0);
+                        serverAddr = new InetSocketAddress(serverPort);
+                        System.out.println("Retrying with serverPort == " + serverPort);
+                        continue RETRY;
+                    }
+                    System.err.println("Got exception at iteration: " + i );
+                    ex.printStackTrace();
+                    exceptionCount++;
+                }
             }
+            break;
         }
         if (exceptionCount > 0) {
-           throw new RuntimeException("Test Failed");
+           throw new RuntimeException("Test Failed: got "
+                 + exceptionCount + " exceptions.");
         }
     }
 }
