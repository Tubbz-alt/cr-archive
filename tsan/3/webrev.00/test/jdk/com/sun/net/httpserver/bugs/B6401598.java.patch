diff a/test/jdk/com/sun/net/httpserver/bugs/B6401598.java b/test/jdk/com/sun/net/httpserver/bugs/B6401598.java
--- a/test/jdk/com/sun/net/httpserver/bugs/B6401598.java
+++ b/test/jdk/com/sun/net/httpserver/bugs/B6401598.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2006, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,21 +21,28 @@
  * questions.
  */
 
 /**
  * @test
+ * @library /test/lib
  * @bug 6401598
  * @summary  new HttpServer cannot serve binary stream data
+ * @run main B6401598
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true B6401598
  */
 
 import java.io.*;
 import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
+import java.net.Proxy;
 import java.net.URL;
+import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.util.concurrent.*;
 
+import jdk.test.lib.net.URIBuilder;
+
 import com.sun.net.httpserver.HttpExchange;
 import com.sun.net.httpserver.HttpHandler;
 import com.sun.net.httpserver.HttpServer;
 
 public class B6401598 {
@@ -78,21 +85,29 @@
         static ExecutorService exec;
         static HttpServer server;
 
         public static void main(String[] args) {
                 try {
-                        server = HttpServer.create(new InetSocketAddress(0), 400);
+                        InetAddress loopback = InetAddress.getLoopbackAddress();
+                        server = HttpServer.create(new InetSocketAddress(loopback, 0), 400);
                         server.createContext("/server/", new MyHandler());
                         exec = Executors.newFixedThreadPool(3);
                         server.setExecutor(exec);
                         port = server.getAddress().getPort();
                         server.start();
 
                         short counter;
 
                         for (counter = 0; counter < 1000; counter++) {
-                                HttpURLConnection connection = getHttpURLConnection(new URL("http://127.0.0.1:"+port+"/server/"), 10000);
+                                URL url = URIBuilder.newBuilder()
+                                    .scheme("http")
+                                    .loopback()
+                                    .port(port)
+                                    .path("/server/")
+                                    .toURLUnchecked();
+                                System.out.println("URL: " + url);
+                                HttpURLConnection connection = getHttpURLConnection(url, 10000);
 
                                 OutputStream os = connection.getOutputStream();
 
                                 DataOutputStream dos = new DataOutputStream(os);
 
@@ -110,25 +125,24 @@
                                 short ret = dis.readShort();
 
                                 dis.close();
                         }
                         System.out.println ("Stopping");
-                        server.stop (1);
-                        exec.shutdown();
-                } catch (IOException e) {
-                        // TODO Auto-generated catch block
-                        e.printStackTrace();
+                } catch (Exception e) {
+                    throw new AssertionError("Unexpected exception: " + e, e);
+                } finally {
                         server.stop (1);
                         exec.shutdown();
                 }
         }
 
 
 
         static HttpURLConnection getHttpURLConnection(URL url, int timeout) throws IOException {
 
-                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
+                HttpURLConnection httpURLConnection =
+                    (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);
 
                 httpURLConnection.setConnectTimeout(40000);
                 httpURLConnection.setReadTimeout(timeout);
                 httpURLConnection.setDoOutput(true);
                 httpURLConnection.setDoInput(true);
