diff a/test/jdk/com/sun/net/httpserver/Test8a.java b/test/jdk/com/sun/net/httpserver/Test8a.java
--- a/test/jdk/com/sun/net/httpserver/Test8a.java
+++ b/test/jdk/com/sun/net/httpserver/Test8a.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,22 +23,24 @@
 
 /**
  * @test
  * @bug 6270015
  * @library /test/lib
- * @build jdk.test.lib.net.SimpleSSLContext
+ * @build jdk.test.lib.net.SimpleSSLContext jdk.test.lib.net.URIBuilder
  * @run main/othervm Test8a
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true Test8a
  * @summary Light weight HTTP server
  */
 
 import com.sun.net.httpserver.*;
 
 import java.util.concurrent.*;
 import java.io.*;
 import java.net.*;
 import javax.net.ssl.*;
 import jdk.test.lib.net.SimpleSSLContext;
+import jdk.test.lib.net.URIBuilder;
 
 /**
  * Test POST large file via fixed len encoding
  */
 
@@ -52,22 +54,29 @@
         //log.setLevel (Level.INFO);
         HttpsServer server = null;
         ExecutorService executor = null;
         try {
             Handler handler = new Handler();
-            InetSocketAddress addr = new InetSocketAddress (0);
+            InetAddress loopback = InetAddress.getLoopbackAddress();
+            InetSocketAddress addr = new InetSocketAddress(loopback, 0);
             server = HttpsServer.create (addr, 0);
             HttpContext ctx = server.createContext ("/test", handler);
             executor = Executors.newCachedThreadPool();
             SSLContext ssl = new SimpleSSLContext().get();
             server.setHttpsConfigurator(new HttpsConfigurator (ssl));
             server.setExecutor (executor);
             server.start ();
 
-            URL url = new URL ("https://localhost:"+server.getAddress().getPort()+"/test/foo.html");
+            URL url = URIBuilder.newBuilder()
+                .scheme("https")
+                .loopback()
+                .port(server.getAddress().getPort())
+                .path("/test/foo.html")
+                .toURL();
+
             System.out.print ("Test8a: " );
-            HttpsURLConnection urlc = (HttpsURLConnection)url.openConnection ();
+            HttpsURLConnection urlc = (HttpsURLConnection)url.openConnection(Proxy.NO_PROXY);
             urlc.setDoOutput (true);
             urlc.setRequestMethod ("POST");
             urlc.setHostnameVerifier (new DummyVerifier());
             urlc.setSSLSocketFactory (ssl.getSocketFactory());
             OutputStream os = new BufferedOutputStream (urlc.getOutputStream(), 8000);
