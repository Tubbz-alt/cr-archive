diff a/test/jdk/com/sun/net/httpserver/MissingTrailingSpace.java b/test/jdk/com/sun/net/httpserver/MissingTrailingSpace.java
--- a/test/jdk/com/sun/net/httpserver/MissingTrailingSpace.java
+++ b/test/jdk/com/sun/net/httpserver/MissingTrailingSpace.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,13 +23,16 @@
 
 /**
  * @test
  * @bug 8068795
  * @summary HttpServer missing tailing space for some response codes
+ * @run main MissingTrailingSpace
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true MissingTrailingSpace
  * @author lev.priima@oracle.com
  */
 
+import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.io.InputStreamReader;
 import java.io.IOException;
 import java.io.BufferedReader;
 import java.io.OutputStreamWriter;
@@ -45,11 +48,12 @@
 
     private static final int noMsgCode = 207;
     private static final String someContext = "/context";
 
     public static void main(String[] args) throws Exception {
-        HttpServer server = HttpServer.create(new InetSocketAddress(0), 0);
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        HttpServer server = HttpServer.create(new InetSocketAddress(loopback, 0), 0);
         try {
             server.setExecutor(Executors.newFixedThreadPool(1));
             server.createContext(someContext, new HttpHandler() {
                 @Override
                 public void handle(HttpExchange msg) {
@@ -66,36 +70,36 @@
             });
             server.start();
             System.out.println("Server started at port "
                                + server.getAddress().getPort());
 
-            runRawSocketHttpClient("localhost", server.getAddress().getPort());
+            runRawSocketHttpClient(loopback, server.getAddress().getPort());
         } finally {
             ((ExecutorService)server.getExecutor()).shutdown();
             server.stop(0);
         }
         System.out.println("Server finished.");
     }
 
-    static void runRawSocketHttpClient(String hostname, int port)
+    static void runRawSocketHttpClient(InetAddress address, int port)
         throws Exception
     {
         Socket socket = null;
         PrintWriter writer = null;
         BufferedReader reader = null;
         final String CRLF = "\r\n";
         try {
-            socket = new Socket(hostname, port);
+            socket = new Socket(address, port);
             writer = new PrintWriter(new OutputStreamWriter(
                 socket.getOutputStream()));
             System.out.println("Client connected by socket: " + socket);
 
             writer.print("GET " + someContext + "/ HTTP/1.1" + CRLF);
             writer.print("User-Agent: Java/"
                 + System.getProperty("java.version")
                 + CRLF);
-            writer.print("Host: " + hostname + CRLF);
+            writer.print("Host: " + address.getHostName() + CRLF);
             writer.print("Accept: */*" + CRLF);
             writer.print("Connection: keep-alive" + CRLF);
             writer.print(CRLF); // Important, else the server will expect that
             // there's more into the request.
             writer.flush();
@@ -138,6 +142,5 @@
             }
         }
         System.out.println("Client finished." );
     }
 }
-
