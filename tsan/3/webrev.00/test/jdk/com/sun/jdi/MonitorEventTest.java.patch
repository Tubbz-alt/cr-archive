diff a/test/jdk/com/sun/jdi/MonitorEventTest.java b/test/jdk/com/sun/jdi/MonitorEventTest.java
--- a/test/jdk/com/sun/jdi/MonitorEventTest.java
+++ b/test/jdk/com/sun/jdi/MonitorEventTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -29,19 +29,26 @@
  *
  * @run build TestScaffold VMConnection TargetListener TargetAdapter
  * @run compile -g MonitorEventTest.java
  * @run driver MonitorEventTest
  */
-import com.sun.jdi.*;
-import com.sun.jdi.event.*;
-import com.sun.jdi.request.*;
-
-import java.util.*;
+import com.sun.jdi.ReferenceType;
+import com.sun.jdi.ThreadReference;
+import com.sun.jdi.event.BreakpointEvent;
+import com.sun.jdi.event.MonitorContendedEnterEvent;
+import com.sun.jdi.event.MonitorContendedEnteredEvent;
+import com.sun.jdi.event.MonitorWaitEvent;
+import com.sun.jdi.event.MonitorWaitedEvent;
+import com.sun.jdi.request.EventRequest;
+import com.sun.jdi.request.MonitorContendedEnterRequest;
+import com.sun.jdi.request.MonitorContendedEnteredRequest;
+import com.sun.jdi.request.MonitorWaitRequest;
+import com.sun.jdi.request.MonitorWaitedRequest;
 
 /********** target program **********/
 
-class MonitorTestTarg {
+class MonitorEventTestTarg {
     public static Object endingMonitor;
     public static Object startingMonitor;
     public static final long timeout = 30 * 6000; // milliseconds
 
     public static volatile boolean aboutEnterLock;
@@ -89,28 +96,27 @@
     }
 }
 
 class myThread extends Thread {
     public void run() {
-        synchronized(MonitorTestTarg.startingMonitor) {
-            MonitorTestTarg.startingMonitor.notify();
+        synchronized(MonitorEventTestTarg.startingMonitor) {
+            MonitorEventTestTarg.startingMonitor.notify();
         }
 
         // contended enter wait until main thread release monitor
-        MonitorTestTarg.aboutEnterLock = true;
-        synchronized (MonitorTestTarg.endingMonitor) {
+        MonitorEventTestTarg.aboutEnterLock = true;
+        synchronized (MonitorEventTestTarg.endingMonitor) {
         }
     }
 }
 
 
     /********** test program **********/
 
 public class MonitorEventTest extends TestScaffold {
     ReferenceType targetClass;
     ThreadReference mainThread;
-    List monitors;
     MonitorContendedEnterRequest contendedEnterRequest;
     MonitorWaitedRequest monitorWaitedRequest;
     MonitorContendedEnteredRequest contendedEnteredRequest;
     MonitorWaitRequest monitorWaitRequest;
 
@@ -158,15 +164,14 @@
     protected void runTests() throws Exception {
         /*
          * Get to the top of main()
          * to determine targetClass and mainThread
          */
-        BreakpointEvent bpe = startToMain("MonitorTestTarg");
+        BreakpointEvent bpe = startToMain("MonitorEventTestTarg");
         targetClass = bpe.location().declaringType();
         mainThread = bpe.thread();
 
-        int initialSize = mainThread.frames().size();
         if (vm().canRequestMonitorEvents()) {
             contendedEnterRequest = eventRequestManager().createMonitorContendedEnterRequest();
             contendedEnterRequest.setSuspendPolicy(EventRequest.SUSPEND_NONE);
             contendedEnterRequest.enable();
             contendedEnteredRequest = eventRequestManager().createMonitorContendedEnteredRequest();
@@ -181,11 +186,11 @@
         } else {
             System.out.println("request monitor events not supported " );
         }
 
 
-        resumeTo("MonitorTestTarg", "foo", "()V");
+        resumeTo("MonitorEventTestTarg", "foo", "()V");
 
         /*
          * resume until end
          */
         listenUntilVMDisconnect();
