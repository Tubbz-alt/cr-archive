diff a/test/jdk/sanity/client/SwingSet/src/FileChooserDemoTest.java b/test/jdk/sanity/client/SwingSet/src/FileChooserDemoTest.java
--- a/test/jdk/sanity/client/SwingSet/src/FileChooserDemoTest.java
+++ b/test/jdk/sanity/client/SwingSet/src/FileChooserDemoTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -59,10 +59,11 @@
 import org.netbeans.jemmy.operators.JToggleButtonOperator;
 import org.netbeans.jemmy.operators.JFileChooserOperator;
 import org.netbeans.jemmy.operators.JDialogOperator;
 import org.netbeans.jemmy.operators.JComponentOperator.JComponentByTipFinder;
 import org.netbeans.jemmy.util.Platform;
+import org.netbeans.jemmy.util.LookAndFeel;
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Listeners;
 import org.jemmy2ext.JemmyExt.ByToolTipChooser;
 
 /*
@@ -139,13 +140,11 @@
     private void checkSelectImage() throws Exception {
         selectImageButton.push();
         fileChooser = new JFileChooserOperator(JFileChooserOperator.findJFileChooser((Container) frame.getSource()));
         // In Aqua, GTK and Motif L&Fs, JFileChooser does not have
         // "Go Home", "Up One Level", "Get Details", "Get List" buttons.
-        if (!UIManager.getLookAndFeel().getID().equals("Aqua")
-                && !UIManager.getLookAndFeel().getID().equals("Motif")
-                && !UIManager.getLookAndFeel().getID().equals("GTK")) {
+        if (!LookAndFeel.isAqua() && !LookAndFeel.isMotif() && !LookAndFeel.isGTK()) {
             File previousDirectory = fileChooser.getCurrentDirectory();
             fileChooser.goHome();
             // In Windows, pressing goHome navigates to Desktop inside the home directory.
             // This is the expected behavior for windows.
             if (!Platform.isWindows()) {
@@ -155,11 +154,11 @@
             }
             fileChooser.setCurrentDirectory(previousDirectory);
             fileChooser.rescanCurrentDirectory();
             // In Windows and Windows Classic L&F, List and Details views are
             // implemented as a popup menu item
-            if(UIManager.getLookAndFeel().getID().equals("Windows")) {
+            if(LookAndFeel.isWindows() || LookAndFeel.isWindowsClassic()) {
                 JButtonOperator popupButton = new JButtonOperator(fileChooser, new JComponentByTipFinder(
                         UIManager.getString("FileChooser.viewMenuButtonToolTipText", fileChooser.getLocale())));
                 popupButton.push();
                 JPopupMenuOperator popup = new JPopupMenuOperator();
                 popup.pushKey(KeyEvent.VK_ENTER);
@@ -272,12 +271,11 @@
     private void initializeSelectWithPreviewDialog() {
         fileChooser = new JFileChooserOperator();
         fileChooserDialog = new JDialogOperator(OPEN);
         String openButtonText = OPEN;
         // In GTK and Motif L&F, open button text is 'OK'
-        if (UIManager.getLookAndFeel().getID().equals("Motif")
-                || UIManager.getLookAndFeel().getID().equals("GTK")) {
+        if (LookAndFeel.isMotif() || LookAndFeel.isGTK()) {
             openButtonText = OK;
         }
         openButton = new JButtonOperator(fileChooser, openButtonText);
         cancelButton = new JButtonOperator(fileChooser, CANCEL);
     }
