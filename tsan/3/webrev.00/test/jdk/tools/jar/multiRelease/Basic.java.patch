diff a/test/jdk/tools/jar/multiRelease/Basic.java b/test/jdk/tools/jar/multiRelease/Basic.java
--- a/test/jdk/tools/jar/multiRelease/Basic.java
+++ b/test/jdk/tools/jar/multiRelease/Basic.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /*
  * @test
- # @bug 8186087 8196748
+ # @bug 8186087 8196748 8212807
  * @library /test/lib
  * @modules java.base/jdk.internal.misc
  *          jdk.compiler
  *          jdk.jartool
  * @build jdk.test.lib.util.FileUtils
@@ -37,32 +37,35 @@
  *        jdk.test.lib.process.*
  *        MRTestBase
  * @run testng Basic
  */
 
-import static org.testng.Assert.*;
-
 import jdk.test.lib.util.FileUtils;
 import org.testng.annotations.*;
 
 import java.io.File;
-import java.nio.file.*;
-import java.util.*;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.List;
+import java.util.Map;
 import java.util.jar.JarFile;
 import java.util.zip.ZipFile;
 
+import static org.testng.Assert.*;
+
 public class Basic extends MRTestBase {
 
     @Test
     // create a regular, non-multi-release jar
     public void test00() throws Throwable {
         String jarfile = "test.jar";
 
         compile("test01");  //use same data as test01
 
         Path classes = Paths.get("classes");
-        jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".")
+        jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".")
                 .shouldHaveExitValue(SUCCESS);
 
         checkMultiRelease(jarfile, false);
 
         Map<String, String[]> names = Map.of(
@@ -85,11 +88,11 @@
         String jarfile = "test.jar";
 
         compile("test01");
 
         Path classes = Paths.get("classes");
-        jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
+        jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
                 "--release", "9", "-C", classes.resolve("v9").toString(), ".",
                 "--release", "10", "-C", classes.resolve("v10").toString(), ".")
                 .shouldHaveExitValue(SUCCESS);
 
         checkMultiRelease(jarfile, true);
@@ -122,19 +125,19 @@
 
         Path classes = Paths.get("classes");
 
         // valid
         for (String release : List.of("10000", "09", "00010", "10")) {
-            jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
+            jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
                     "--release", release, "-C", classes.resolve("v10").toString(), ".")
                     .shouldHaveExitValue(SUCCESS)
                     .shouldBeEmptyIgnoreVMWarnings();
         }
         // invalid
         for (String release : List.of("9.0", "8", "v9",
                 "9v", "0", "-10")) {
-            jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
+            jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
                     "--release", release, "-C", classes.resolve("v10").toString(), ".")
                     .shouldNotHaveExitValue(SUCCESS)
                     .shouldContain("release " + release + " not valid");
         }
         FileUtils.deleteFileIfExistsWithRetry(Paths.get(jarfile));
@@ -147,16 +150,16 @@
         String jarfile = "test.jar";
 
         compile("test01");  //use same data as test01
 
         Path classes = Paths.get("classes");
-        jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".")
+        jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".")
                 .shouldHaveExitValue(SUCCESS);
 
         checkMultiRelease(jarfile, false);
 
-        jar("uf", jarfile,
+        jarTool("uf", jarfile,
                 "--release", "9", "-C", classes.resolve("v9").toString(), ".")
                 .shouldHaveExitValue(SUCCESS);
 
         checkMultiRelease(jarfile, true);
 
@@ -183,11 +186,11 @@
         String jarfile = "test.jar";
 
         compile("test01");  //use same data as test01
 
         Path classes = Paths.get("classes");
-        jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
+        jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
                 "--release", "9", "-C", classes.resolve("v9").toString(), ".")
                 .shouldHaveExitValue(SUCCESS);
 
         checkMultiRelease(jarfile, true);
 
@@ -204,11 +207,11 @@
 
         compare(jarfile, names);
 
         // write the v9 version/Version.class entry in base and the v10
         // version/Version.class entry in versions/9 section
-        jar("uf", jarfile, "-C", classes.resolve("v9").toString(), "version",
+        jarTool("uf", jarfile, "-C", classes.resolve("v9").toString(), "version",
                 "--release", "9", "-C", classes.resolve("v10").toString(), ".")
                 .shouldHaveExitValue(SUCCESS);
 
         checkMultiRelease(jarfile, true);
 
@@ -244,11 +247,11 @@
 
         // replace the v9 class
         Path source = Paths.get(src, "data", "test04", "v9", "version");
         javac(classes.resolve("v9"), source.resolve("Version.java"));
 
-        jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
+        jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
                 "--release", "9", "-C", classes.resolve("v9").toString(), ".")
                 .shouldNotHaveExitValue(SUCCESS)
                 .shouldContain("different api from earlier");
 
         FileUtils.deleteFileIfExistsWithRetry(Paths.get(jarfile));
@@ -266,11 +269,11 @@
 
         // add the new v9 class
         Path source = Paths.get(src, "data", "test05", "v9", "version");
         javac(classes.resolve("v9"), source.resolve("Extra.java"));
 
-        jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
+        jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
                 "--release", "9", "-C", classes.resolve("v9").toString(), ".")
                 .shouldNotHaveExitValue(SUCCESS)
                 .shouldContain("contains a new public class");
 
         FileUtils.deleteFileIfExistsWithRetry(Paths.get(jarfile));
@@ -288,11 +291,11 @@
 
         // add the new v9 class
         Path source = Paths.get(src, "data", "test06", "v9", "version");
         javac(classes.resolve("v9"), source.resolve("Extra.java"));
 
-        jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
+        jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
                 "--release", "9", "-C", classes.resolve("v9").toString(), ".")
                 .shouldHaveExitValue(SUCCESS);
 
         FileUtils.deleteFileIfExistsWithRetry(Paths.get(jarfile));
         FileUtils.deleteFileTreeWithRetry(Paths.get(usr, "classes"));
@@ -310,11 +313,11 @@
 
         // add the new v9 class
         Path source = Paths.get(src, "data", "test01", "base", "version");
         javac(classes.resolve("v9"), source.resolve("Version.java"));
 
-        jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
+        jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
                 "--release", "9", "-C", classes.resolve("v9").toString(), ".")
                 .shouldHaveExitValue(SUCCESS)
                 .shouldContain("contains a class that")
                 .shouldContain("is identical");
 
@@ -330,15 +333,15 @@
 
         compile("test01");  //use same data as test01
 
         Path classes = Paths.get("classes");
 
-        jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
+        jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
                 "--release", "9", "-C", classes.resolve("v9").toString(), ".")
                 .shouldHaveExitValue(SUCCESS)
                 .shouldBeEmptyIgnoreVMWarnings();
-        jar("uf", jarfile,
+        jarTool("uf", jarfile,
                 "--release", "10", "-C", classes.resolve("v9").toString(), ".")
                 .shouldHaveExitValue(SUCCESS)
                 .shouldContain("contains a class that")
                 .shouldContain("is identical");
 
@@ -357,11 +360,11 @@
 
         Path base = classes.resolve("base").resolve("version");
 
         Files.copy(base.resolve("Main.class"), base.resolve("Foo.class"));
 
-        jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
+        jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
                 "--release", "9", "-C", classes.resolve("v9").toString(), ".")
                 .shouldNotHaveExitValue(SUCCESS)
                 .shouldContain("names do not match");
 
         FileUtils.deleteFileIfExistsWithRetry(Paths.get(jarfile));
@@ -383,11 +386,11 @@
 
         // add a versioned class with a nested class
         source = Paths.get(src, "data", "test10", "v9", "version");
         javac(classes.resolve("v9"), source.resolve("Nested.java"));
 
-        jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
+        jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
                 "--release", "9", "-C", classes.resolve("v9").toString(), ".")
                 .shouldHaveExitValue(SUCCESS);
 
         FileUtils.deleteFileIfExistsWithRetry(Paths.get(jarfile));
         FileUtils.deleteFileTreeWithRetry(Paths.get(usr, "classes"));
@@ -411,11 +414,11 @@
 
         // add a versioned class with a nested class
         source = Paths.get(src, "data", "test10", "v9", "version");
         javac(classes.resolve("v9"), source.resolve("Nested.java"));
 
-        List<String> output = jar("cf", jarfile,
+        List<String> output = jarTool("cf", jarfile,
                 "-C", classes.resolve("base").toString(), ".",
                 "--release", "9", "-C", classes.resolve("v9").toString(), ".")
                 .shouldNotHaveExitValue(SUCCESS)
                 .asLinesWithoutVMWarnings();
 
@@ -464,11 +467,11 @@
         javac(classes.resolve("v9"), source.resolve("Nested.java"));
 
         // remove the top level class, thus isolating the nested class
         Files.delete(classes.resolve("v9").resolve("version").resolve("Nested.class"));
 
-        jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
+        jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
                 "--release", "9", "-C", classes.resolve("v9").toString(), ".")
                 .shouldNotHaveExitValue(SUCCESS)
                 .shouldContain("an isolated nested class");
 
         FileUtils.deleteFileIfExistsWithRetry(Paths.get(jarfile));
@@ -490,11 +493,11 @@
 
         // add a versioned class with a nested and nested-nested class
         source = Paths.get(src, "data", "test13", "v10", "version");
         javac(classes.resolve("v10"), source.resolve("Nested.java"));
 
-        jar("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
+        jarTool("cf", jarfile, "-C", classes.resolve("base").toString(), ".",
                 "--release", "10", "-C", classes.resolve("v10").toString(), ".")
                 .shouldHaveExitValue(SUCCESS);
 
         FileUtils.deleteFileIfExistsWithRetry(Paths.get(jarfile));
         FileUtils.deleteFileTreeWithRetry(Paths.get(usr, "classes"));
@@ -510,11 +513,11 @@
         Path manifest = Paths.get("Manifest.txt");
 
         // create
         Files.write(manifest, "Class-Path: MyUtils.jar\n".getBytes());
 
-        jar("cfm", jarfile, manifest.toString(),
+        jarTool("cfm", jarfile, manifest.toString(),
                 "-C", classes.resolve("base").toString(), ".",
                 "--release", "10", "-C", classes.resolve("v10").toString(), ".")
                 .shouldHaveExitValue(SUCCESS)
                 .shouldBeEmptyIgnoreVMWarnings();
 
