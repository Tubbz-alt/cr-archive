diff a/test/jdk/jdk/nio/zipfs/Demo.java b/test/jdk/jdk/nio/zipfs/Demo.java
--- a/test/jdk/jdk/nio/zipfs/Demo.java
+++ b/test/jdk/jdk/nio/zipfs/Demo.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -25,11 +25,10 @@
 import java.nio.*;
 import java.nio.channels.*;
 import java.nio.file.*;
 import java.nio.file.spi.*;
 import java.nio.file.attribute.*;
-import java.net.*;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.*;
 
 import static java.nio.file.StandardOpenOption.*;
@@ -96,12 +95,10 @@
 
         mkdir,           // <java Demo mkdir zipfile dir>
 
         mkdirs,          // <java Demo mkdirs zipfile dir>
 
-        rmdirs,          // <java Demo rmdirs zipfile dir>
-
         list,            // <java Demo list zipfile [dir]>
                          // recursively list all entries of dir
                          // via DirectoryStream
 
         tlist,           // <java Demo tlist zipfile [dir]>
@@ -142,11 +139,11 @@
             System.err.println("ZIP filesystem provider is not installed");
             System.exit(1);
         }
 
         Action action = Action.valueOf(args[0]);
-        Map<String, Object> env = env = new HashMap<>();
+        Map<String, Object> env = new HashMap<>();
         if (action == Action.create)
             env.put("create", "true");
         try (FileSystem fs = provider.newFileSystem(Paths.get(args[1]), env)) {
             Path path, src, dst;
             switch (action) {
@@ -532,14 +529,14 @@
                 mkdirs(parent);
         }
         Files.createDirectory(path);
     }
 
-    @SuppressWarnings("unused")
     /**
      * Not used in demo, but included for demonstrational purposes.
      */
+    @SuppressWarnings("unused")
     private static void rmdirs(Path path) throws IOException {
         while (path != null && path.getNameCount() != 0) {
             Files.delete(path);
             path = path.getParent();
         }
@@ -559,15 +556,15 @@
                     list(child, verbose);
             }
         }
     }
 
-    @SuppressWarnings("unused")
     /**
      * Checks that the content of two paths are equal.
      * Not used in demo, but included for demonstrational purposes.
      */
+    @SuppressWarnings("unused")
     private static void checkEqual(Path src, Path dst) throws IOException
     {
         //System.out.printf("checking <%s> vs <%s>...%n",
         //                  src.toString(), dst.toString());
 
@@ -636,12 +633,15 @@
         } catch (IOException x) {
             x.printStackTrace();
         }
     }
 
-    private static void fchCopy(Path src, Path dst) throws IOException
-    {
+    /**
+     * Not used in demo, but included for demonstrational purposes.
+     */
+    @SuppressWarnings("unused")
+    private static void fchCopy(Path src, Path dst) throws IOException {
         Set<OpenOption> read = new HashSet<>();
         read.add(READ);
         Set<OpenOption> openwrite = new HashSet<>();
         openwrite.add(CREATE_NEW);
         openwrite.add(WRITE);
@@ -656,12 +656,15 @@
                 bb.clear();
             }
         }
     }
 
-    private static void chCopy(Path src, Path dst) throws IOException
-    {
+    /**
+     * Not used in demo, but included for demonstrational purposes.
+     */
+    @SuppressWarnings("unused")
+    private static void chCopy(Path src, Path dst) throws IOException {
         Set<OpenOption> read = new HashSet<>();
         read.add(READ);
         Set<OpenOption> openwrite = new HashSet<>();
         openwrite.add(CREATE_NEW);
         openwrite.add(WRITE);
@@ -676,12 +679,15 @@
                 bb.clear();
             }
         }
     }
 
-    private static void streamCopy(Path src, Path dst) throws IOException
-    {
+    /**
+     * Not used in demo, but included for demonstrational purposes.
+     */
+    @SuppressWarnings("unused")
+    private static void streamCopy(Path src, Path dst) throws IOException {
         byte[] buf = new byte[8192];
         try (InputStream isSrc = Files.newInputStream(src);
              OutputStream osDst = Files.newOutputStream(dst))
         {
             int n = 0;
