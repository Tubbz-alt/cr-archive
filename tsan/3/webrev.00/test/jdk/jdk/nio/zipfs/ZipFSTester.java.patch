diff a/test/jdk/jdk/nio/zipfs/ZipFSTester.java b/test/jdk/jdk/nio/zipfs/ZipFSTester.java
--- a/test/jdk/jdk/nio/zipfs/ZipFSTester.java
+++ b/test/jdk/jdk/nio/zipfs/ZipFSTester.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -79,11 +79,10 @@
  * @run main ZipFSTester
  * @run main/othervm/java.security.policy=test.policy ZipFSTester
  */
 
 public class ZipFSTester {
-
     public static void main(String[] args) throws Exception {
         // create JAR file for test, actual contents don't matter
         Path jarFile = Utils.createJarFile("tester.jar",
                 "META-INF/MANIFEST.MF",
                 "dir1/foo",
@@ -144,11 +143,11 @@
             z2zcopy(fs0, copy, "/", 0);
 
             // copy the test jar itself in
             Files.copy(Paths.get(fs0.toString()), copy.getPath("/foo.jar"));
             Path zpath = copy.getPath("/foo.jar");
-            try (FileSystem zzfs = FileSystems.newFileSystem(zpath, null)) {
+            try (FileSystem zzfs = FileSystems.newFileSystem(zpath)) {
                 Files.copy(src, zzfs.getPath("/srcInjarjar"));
             }
         }
 
         try (FileSystem fs = newZipFileSystem(tmpfsPath, new HashMap<String, Object>())) {
@@ -227,11 +226,11 @@
             Path parent = dst2.getParent();
             try {
                 Files.newInputStream(parent);
                 throw new RuntimeException("Failed");
             } catch (FileSystemException e) {
-                e.printStackTrace();    // expected fse
+                // expected fse
             }
 
             // rmdirs
             try {
                 rmdirs(parent);
@@ -252,11 +251,11 @@
             Files.delete(dst);
 
             // test foo.jar in jar/zipfs #8034802
             Path jpath = fs.getPath("/foo.jar");
             System.out.println("walking: " + jpath);
-            try (FileSystem zzfs = FileSystems.newFileSystem(jpath, null)) {
+            try (FileSystem zzfs = FileSystems.newFileSystem(jpath)) {
                 walk(zzfs.getPath("/"));
                 // foojar:/srcInjarjar
                 checkEqual(src, zzfs.getPath("/srcInjarjar"));
 
                 dst = getPathWithParents(zzfs, tmpName);
@@ -419,11 +418,19 @@
     static final int METHOD_STORED     = 0;
     static final int METHOD_DEFLATED   = 8;
 
     static Object[][] getEntries() {
         Object[][] entries = new Object[10 + rdm.nextInt(20)][3];
-        for (int i = 0; i < entries.length; i++) {
+        // first entries shall test the corner case of 0 bytes of data
+        entries[0][0] = "entries" + 0;
+        entries[0][1] = METHOD_STORED;
+        entries[0][2] = new byte[0];
+        entries[1][0] = "entries" + 1;
+        entries[1][1] = METHOD_DEFLATED;
+        entries[1][2] = new byte[0];
+        // the rest is random data
+        for (int i = 2; i < entries.length; i++) {
             entries[i][0] = "entries" + i;
             entries[i][1] = rdm.nextInt(10) % 2 == 0 ?
                 METHOD_STORED : METHOD_DEFLATED;
             entries[i][2] = new byte[rdm.nextInt(8192)];
             rdm.nextBytes((byte[])entries[i][2]);
@@ -531,14 +538,11 @@
                 }
             }
             try (var zfs = newZipFileSystem(zpath, Collections.emptyMap())) {
                 for (Object[] e : entries) {
                     Path path = zfs.getPath((String)e[0]);
-                    int method = (int)e[1];
                     byte[] bytes = (byte[])e[2];
-                    // System.out.printf("checking read [%s, %d, %d]%n",
-                    //                   path.toString(), bytes.length, method);
                     checkRead(path, bytes);
                 }
             }
             Files.deleteIfExists(zpath);
 
