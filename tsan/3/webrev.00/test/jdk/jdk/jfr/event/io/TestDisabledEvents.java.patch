diff a/test/jdk/jdk/jfr/event/io/TestDisabledEvents.java b/test/jdk/jdk/jfr/event/io/TestDisabledEvents.java
--- a/test/jdk/jdk/jfr/event/io/TestDisabledEvents.java
+++ b/test/jdk/jdk/jfr/event/io/TestDisabledEvents.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -35,10 +35,11 @@
 import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 
 import jdk.jfr.Recording;
 import jdk.jfr.consumer.RecordedEvent;
+import jdk.test.lib.Utils;
 import jdk.test.lib.jfr.Events;
 
 /**
  * @test
  * @summary Test with FlightRecorder enabled but with the events disabled.
@@ -53,27 +54,27 @@
 
     private static final int writeInt = 'A';
     private static final byte[] writeBuf = { 'B', 'C', 'D' };
 
     public static void main(String[] args) throws Throwable {
-        File tmp = File.createTempFile("TestDisabledEvents", ".tmp", new File("."));
-        tmp.deleteOnExit();
-        Recording recording = new Recording();
-        recording.disable(IOEvent.EVENT_FILE_READ);
-        recording.disable(IOEvent.EVENT_FILE_WRITE);
-        recording.start();
+        File tmp = Utils.createTempFile("TestDisabledEvents", ".tmp").toFile();
+        try (Recording recording = new Recording()) {
+            recording.disable(IOEvent.EVENT_FILE_READ);
+            recording.disable(IOEvent.EVENT_FILE_WRITE);
+            recording.start();
 
-        useRandomAccessFile(tmp);
-        useFileStreams(tmp);
-        useFileChannel(tmp);
+            useRandomAccessFile(tmp);
+            useFileStreams(tmp);
+            useFileChannel(tmp);
 
-        recording.stop();
-        for (RecordedEvent event : Events.fromRecording(recording)) {
-            final String eventName = event.getEventType().getName();
-            System.out.println("Got eventName:" + eventName);
-            assertNotEquals(eventName, IOEvent.EVENT_FILE_READ, "Got disabled read event");
-            assertNotEquals(eventName, IOEvent.EVENT_FILE_WRITE, "Got disabled write event");
+            recording.stop();
+            for (RecordedEvent event : Events.fromRecording(recording)) {
+                final String eventName = event.getEventType().getName();
+                System.out.println("Got eventName:" + eventName);
+                assertNotEquals(eventName, IOEvent.EVENT_FILE_READ, "Got disabled read event");
+                assertNotEquals(eventName, IOEvent.EVENT_FILE_WRITE, "Got disabled write event");
+            }
         }
     }
 
     private static void useRandomAccessFile(File tmp) throws Throwable {
         tmp.delete();
