diff a/test/jdk/jdk/jfr/event/io/TestFileReadOnly.java b/test/jdk/jdk/jfr/event/io/TestFileReadOnly.java
--- a/test/jdk/jdk/jfr/event/io/TestFileReadOnly.java
+++ b/test/jdk/jdk/jfr/event/io/TestFileReadOnly.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -36,10 +36,11 @@
 import java.util.ArrayList;
 import java.util.List;
 
 import jdk.jfr.Recording;
 import jdk.jfr.consumer.RecordedEvent;
+import jdk.test.lib.Utils;
 import jdk.test.lib.jfr.Events;
 
 /**
  * @test
  * @key jfr
@@ -48,54 +49,54 @@
  * @run main/othervm jdk.jfr.event.io.TestFileReadOnly
  */
 public class TestFileReadOnly {
 
     public static void main(String[] args) throws Throwable {
-        File tmp = File.createTempFile("TestFileReadOnly", ".tmp", new File("."));
-        tmp.deleteOnExit();
-        Recording recording = new Recording();
-        List<IOEvent> expectedEvents = new ArrayList<>();
+        File tmp = Utils.createTempFile("TestFileReadOnly", ".tmp").toFile();
+        try (Recording recording = new Recording()) {
+            List<IOEvent> expectedEvents = new ArrayList<>();
 
-        recording.enable(IOEvent.EVENT_FILE_READ).withThreshold(Duration.ofMillis(0));
-        recording.enable(IOEvent.EVENT_FILE_WRITE).withThreshold(Duration.ofMillis(0));
-        recording.start();
+            recording.enable(IOEvent.EVENT_FILE_READ).withThreshold(Duration.ofMillis(0));
+            recording.enable(IOEvent.EVENT_FILE_WRITE).withThreshold(Duration.ofMillis(0));
+            recording.start();
 
-        final byte[] buf = { 1, 2, 3 };
+            final byte[] buf = { 1, 2, 3 };
 
-        // Create the file.
-        try (RandomAccessFile f = new RandomAccessFile(tmp, "rw")) {
-            f.write(buf);
-            expectedEvents.add(IOEvent.createFileWriteEvent(buf.length, tmp));
-        }
-
-        // Reopen the file as ReadOnly and try to write to it.
-        // Should generate an event with bytesWritten = -1.
-        try (RandomAccessFile f = new RandomAccessFile(tmp, "r")) {
-            try {
+            // Create the file.
+            try (RandomAccessFile f = new RandomAccessFile(tmp, "rw")) {
                 f.write(buf);
-                fail("No exception for ReadOnly File");
-            } catch (IOException e) {
-                // Expected exception
-                expectedEvents.add(IOEvent.createFileWriteEvent(-1, tmp));
+                expectedEvents.add(IOEvent.createFileWriteEvent(buf.length, tmp));
             }
-        }
 
-        // Try to write to read-only FileChannel.
-        try (RandomAccessFile f = new RandomAccessFile(tmp, "r"); FileChannel ch = f.getChannel()) {
-            ByteBuffer writeBuf = ByteBuffer.allocateDirect(buf.length);
-            writeBuf.put(buf);
-            writeBuf.flip();
-            ch.position(0);
-            try {
-                ch.write(writeBuf);
-                fail("No exception for ReadOnly FileChannel");
-            } catch (java.nio.channels.NonWritableChannelException e) {
-                // Expected exception
-                expectedEvents.add(IOEvent.createFileWriteEvent(-1, tmp));
+            // Reopen the file as ReadOnly and try to write to it.
+            // Should generate an event with bytesWritten = -1.
+            try (RandomAccessFile f = new RandomAccessFile(tmp, "r")) {
+                try {
+                    f.write(buf);
+                    fail("No exception for ReadOnly File");
+                } catch (IOException e) {
+                    // Expected exception
+                    expectedEvents.add(IOEvent.createFileWriteEvent(-1, tmp));
+                }
             }
-        }
 
-        recording.stop();
-        List<RecordedEvent> events = Events.fromRecording(recording);
-        IOHelper.verifyEqualsInOrder(events, expectedEvents);
+            // Try to write to read-only FileChannel.
+            try (RandomAccessFile f = new RandomAccessFile(tmp, "r"); FileChannel ch = f.getChannel()) {
+                ByteBuffer writeBuf = ByteBuffer.allocateDirect(buf.length);
+                writeBuf.put(buf);
+                writeBuf.flip();
+                ch.position(0);
+                try {
+                    ch.write(writeBuf);
+                    fail("No exception for ReadOnly FileChannel");
+                } catch (java.nio.channels.NonWritableChannelException e) {
+                    // Expected exception
+                    expectedEvents.add(IOEvent.createFileWriteEvent(-1, tmp));
+                }
+            }
+
+            recording.stop();
+            List<RecordedEvent> events = Events.fromRecording(recording);
+            IOHelper.verifyEqualsInOrder(events, expectedEvents);
+        }
     }
 }
