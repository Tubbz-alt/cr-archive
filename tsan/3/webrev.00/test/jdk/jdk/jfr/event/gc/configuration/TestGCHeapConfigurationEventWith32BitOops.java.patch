diff a/test/jdk/jdk/jfr/event/gc/configuration/TestGCHeapConfigurationEventWith32BitOops.java b/test/jdk/jdk/jfr/event/gc/configuration/TestGCHeapConfigurationEventWith32BitOops.java
--- a/test/jdk/jdk/jfr/event/gc/configuration/TestGCHeapConfigurationEventWith32BitOops.java
+++ b/test/jdk/jdk/jfr/event/gc/configuration/TestGCHeapConfigurationEventWith32BitOops.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,10 +28,24 @@
 import jdk.jfr.consumer.RecordedEvent;
 import jdk.test.lib.jfr.EventVerifier;
 import jdk.test.lib.jfr.GCHelper;
 import sun.hotspot.WhiteBox;
 
+/*
+ * @test TestGCHeapConfigurationEventWith32BitOops
+ * @key jfr
+ * @requires vm.hasJFR
+ * @requires vm.gc == "Parallel" | vm.gc == null
+ * @requires os.family == "linux" | os.family == "windows"
+ * @requires sun.arch.data.model == "64"
+ * @library /test/lib /test/jdk
+ * @build sun.hotspot.WhiteBox
+ * @run main ClassFileInstaller sun.hotspot.WhiteBox
+ * @run main/othervm -XX:+UnlockExperimentalVMOptions -XX:-UseFastUnorderedTimeStamps -XX:+UseParallelGC -XX:+UseCompressedOops -Xmx100m -Xms100m -XX:InitialHeapSize=100m -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI jdk.jfr.event.gc.configuration.TestGCHeapConfigurationEventWith32BitOops
+ */
+
+
 /* See the shell script wrapper for the flags used when invoking the JVM */
 public class TestGCHeapConfigurationEventWith32BitOops extends GCHeapConfigurationEventTester {
     public static void main(String[] args) throws Exception {
         GCHeapConfigurationEventTester t = new TestGCHeapConfigurationEventWith32BitOops();
         t.run();
@@ -51,11 +65,11 @@
     @Override
     public void verify() throws Exception {
         WhiteBox wb = WhiteBox.getWhiteBox();
         long heapAlignment = wb.getHeapAlignment();
         long alignedHeapSize = GCHelper.alignUp(megabytes(100), heapAlignment);
-        verifyMinHeapSizeIs(megabytes(100));
+        verifyMinHeapSizeIs(alignedHeapSize);
         verifyInitialHeapSizeIs(alignedHeapSize);
         verifyMaxHeapSizeIs(alignedHeapSize);
         verifyUsesCompressedOopsIs(true);
         verifyObjectAlignmentInBytesIs(8);
         verifyHeapAddressBitsIs(32);
