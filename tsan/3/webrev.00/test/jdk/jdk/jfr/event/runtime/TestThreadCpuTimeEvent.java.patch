diff a/test/jdk/jdk/jfr/event/runtime/TestThreadCpuTimeEvent.java b/test/jdk/jdk/jfr/event/runtime/TestThreadCpuTimeEvent.java
--- a/test/jdk/jdk/jfr/event/runtime/TestThreadCpuTimeEvent.java
+++ b/test/jdk/jdk/jfr/event/runtime/TestThreadCpuTimeEvent.java
@@ -23,11 +23,10 @@
  * questions.
  */
 
 package jdk.jfr.event.runtime;
 
-import com.sun.management.ThreadMXBean;
 import jdk.jfr.Recording;
 import jdk.jfr.consumer.RecordedEvent;
 import jdk.jfr.consumer.RecordedThread;
 import jdk.test.lib.Asserts;
 import jdk.test.lib.jfr.EventNames;
@@ -58,11 +57,10 @@
  */
 public class TestThreadCpuTimeEvent {
 
     public static void main(String[] args) throws Throwable {
         testSimple();
-        testCompareWithMXBean();
         testEventAtThreadExit();
     }
 
     private static final long eventPeriodMillis = 50;
     private static final String cpuConsumerThreadName = "cpuConsumer";
@@ -105,11 +103,11 @@
                     barrier.await();
                 }
             } catch (BrokenBarrierException e) {
                 // Another thread has been interrupted - wait for us to be interrupted as well
                 while (!interrupted()) {
-                    yield();
+                    Thread.yield();
                 }
             } catch (InterruptedException e) {
                 // Normal way of stopping the thread
             }
         }
@@ -133,36 +131,10 @@
 
             Asserts.assertLessThan(systemLoad + userLoad, 1.01f / numCpus); // 100% + rounding errors
         }
     }
 
-    static Duration getAccumulatedTime(List<RecordedEvent> events, String threadName, String fieldName) {
-        List<RecordedEvent> filteredEvents = events.stream()
-                .filter(e -> e.getThread().getJavaName().equals(threadName))
-                .sorted(Comparator.comparing(RecordedEvent::getStartTime))
-                .collect(Collectors.toList());
-
-        int numCpus = Runtime.getRuntime().availableProcessors();
-        Iterator<RecordedEvent> i = filteredEvents.iterator();
-        RecordedEvent cur = i.next();
-        Duration totalTime = Duration.ZERO;
-        while (i.hasNext()) {
-            RecordedEvent prev = cur;
-            cur = i.next();
-
-            Duration sampleTime = Duration.between(prev.getStartTime(), cur.getStartTime());
-            Float load = (Float)cur.getValue(fieldName);
-
-            // Adjust load to be thread-relative (fully loaded thread would give 100%)
-            Float totalLoadForThread = load * numCpus;
-            Duration threadTime = Duration.ofMillis((long) (sampleTime.toMillis() * totalLoadForThread));
-            totalTime = totalTime.plus(threadTime);
-        }
-
-        return totalTime;
-    }
-
     static List<RecordedEvent> generateEvents(int minimumEventCount, CyclicBarrier barrier) throws Throwable {
         int retryCount = 0;
 
         while (true) {
             Recording recording = new Recording();
@@ -207,43 +179,10 @@
 
         thread.interrupt();
         thread.join();
     }
 
-    static void testCompareWithMXBean() throws Throwable {
-        Duration testRunTime = Duration.ofMillis(eventPeriodMillis * cpuConsumerRunFactor);
-        CyclicBarrier barrier = new CyclicBarrier(2);
-        CpuConsumingThread thread = new CpuConsumingThread(testRunTime, barrier);
-        thread.start();
-
-        List<RecordedEvent> beforeEvents = generateEvents(2, barrier);
-        verifyPerThreadInvariant(beforeEvents, cpuConsumerThreadName);
-
-        // Run a second single pass
-        barrier.await();
-        barrier.await();
-
-        ThreadMXBean bean = (ThreadMXBean) ManagementFactory.getThreadMXBean();
-        Duration cpuTime = Duration.ofNanos(bean.getThreadCpuTime(thread.getId()));
-        Duration userTime = Duration.ofNanos(bean.getThreadUserTime(thread.getId()));
-
-        // Check something that should hold even in the presence of unfortunate scheduling
-        Asserts.assertGreaterThanOrEqual(cpuTime.toMillis(), eventPeriodMillis);
-        Asserts.assertGreaterThanOrEqual(userTime.toMillis(), eventPeriodMillis);
-
-        Duration systemTimeBefore = getAccumulatedTime(beforeEvents, cpuConsumerThreadName, "system");
-        Duration userTimeBefore = getAccumulatedTime(beforeEvents, cpuConsumerThreadName, "user");
-        Duration cpuTimeBefore = userTimeBefore.plus(systemTimeBefore);
-
-        Asserts.assertLessThan(cpuTimeBefore, cpuTime);
-        Asserts.assertLessThan(userTimeBefore, userTime);
-        Asserts.assertGreaterThan(cpuTimeBefore, Duration.ZERO);
-
-        thread.interrupt();
-        thread.join();
-    }
-
     static void testEventAtThreadExit() throws Throwable {
         Recording recording = new Recording();
 
         recording.enable(EventNames.ThreadCPULoad).withPeriod(Duration.ofHours(10));
         recording.start();
