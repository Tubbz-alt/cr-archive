diff a/test/jdk/jdk/jfr/api/consumer/TestRecordingFile.java b/test/jdk/jdk/jfr/api/consumer/TestRecordingFile.java
--- a/test/jdk/jdk/jfr/api/consumer/TestRecordingFile.java
+++ b/test/jdk/jdk/jfr/api/consumer/TestRecordingFile.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -53,11 +53,11 @@
  * @test
  * @summary Verifies that all methods in RecordingFIle are working
  * @key jfr
  * @requires vm.hasJFR
  * @library /test/lib
- * @run main/othervm jdk.jfr.api.consumer.TestRecordingFile
+ * @run main/othervm -Xlog:jfr*=info jdk.jfr.api.consumer.TestRecordingFile
  */
 public class TestRecordingFile {
 
     static class TestEvent1 extends Event {
     }
@@ -72,28 +72,27 @@
     private final static int EVENT_COUNT = 3;
     private final static int HEADER_SIZE = 68;
     private final static long METADATA_OFFSET = 24;
 
     public static void main(String[] args) throws Throwable {
-
-        // create some recording data
-        Recording r = new Recording();
-        r.enable(TestEvent1.class).withoutStackTrace();
-        r.enable(TestEvent2.class).withoutStackTrace();
-        r.enable(TestEvent3.class).withoutStackTrace();
-        r.start();
-        TestEvent1 t1 = new TestEvent1();
-        t1.commit();
-        TestEvent2 t2 = new TestEvent2();
-        t2.commit();
-        TestEvent3 t3 = new TestEvent3();
-        t3.commit();
-        r.stop();
         Path valid = Utils.createTempFile("three-event-recording", ".jfr");
-        r.dump(valid);
-        r.close();
 
+        // create some recording data
+        try (Recording r = new Recording()) {
+            r.enable(TestEvent1.class).withoutStackTrace();
+            r.enable(TestEvent2.class).withoutStackTrace();
+            r.enable(TestEvent3.class).withoutStackTrace();
+            r.start();
+            TestEvent1 t1 = new TestEvent1();
+            t1.commit();
+            TestEvent2 t2 = new TestEvent2();
+            t2.commit();
+            TestEvent3 t3 = new TestEvent3();
+            t3.commit();
+            r.stop();
+            r.dump(valid);
+        }
         Path brokenWithZeros = createBrokenWIthZeros(valid);
         Path brokenMetadata = createBrokenMetadata(valid);
         // prepare event sets
         testNewRecordingFile(valid, brokenWithZeros);
         testIterate(valid, brokenWithZeros);
@@ -208,16 +207,16 @@
            assertUniqueEventTypes(types);
            assertHasEventType(types, "Event1");
            assertHasEventType(types, "Event2");
            assertMissingEventType(types, "Event3");
        }
-       try (RecordingFile f = new RecordingFile(twoEventTypes)) {
+       try (RecordingFile f = new RecordingFile(threeEventTypes)) {
            List<EventType> types = f.readEventTypes();
            assertUniqueEventTypes(types);
            assertHasEventType(types, "Event1");
            assertHasEventType(types, "Event2");
-           assertMissingEventType(types, "Event3");
+           assertHasEventType(types, "Event3");
        }
 
     }
 
     private static void assertMissingEventType(List<EventType> types,String name) throws Exception {
