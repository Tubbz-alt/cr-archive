diff a/test/jdk/jdk/jfr/api/consumer/TestReadTwice.java b/test/jdk/jdk/jfr/api/consumer/TestReadTwice.java
--- a/test/jdk/jdk/jfr/api/consumer/TestReadTwice.java
+++ b/test/jdk/jdk/jfr/api/consumer/TestReadTwice.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -24,22 +24,20 @@
  */
 
 package jdk.jfr.api.consumer;
 
 import java.nio.file.Path;
-import java.nio.file.Paths;
 import java.util.LinkedList;
 import java.util.List;
 
 import jdk.jfr.Event;
 import jdk.jfr.Recording;
 import jdk.jfr.consumer.RecordedEvent;
 import jdk.jfr.consumer.RecordingFile;
 import jdk.test.lib.Asserts;
 import jdk.test.lib.Utils;
 
-
 /**
  * @test
  * @summary Reads the recorded file two times and verifies that both reads are the same
  * @key jfr
  * @requires vm.hasJFR
@@ -50,36 +48,36 @@
 
     private static class MyEvent extends Event {
     }
 
     public static void main(String[] args) throws Throwable {
-        Recording r = new Recording();
-        r.enable(MyEvent.class).withoutStackTrace();
-        r.start();
+        try (Recording r = new Recording()) {
+            r.enable(MyEvent.class).withoutStackTrace();
+            r.start();
 
-        // Commit a single event to the recording
-        MyEvent event = new MyEvent();
-        event.commit();
+            // Commit a single event to the recording
+            MyEvent event = new MyEvent();
+            event.commit();
 
-        r.stop();
+            r.stop();
 
-        // Dump the recording to a file
-        Path path = Utils.createTempFile("read-twice", ".jfr");
-        System.out.println("Dumping to " + path);
-        r.dump(path);
-        r.close();
+            // Dump the recording to a file
+            Path path = Utils.createTempFile("read-twice", ".jfr");
+            System.out.println("Dumping to " + path);
+            r.dump(path);
 
-        // Read all events from the file in one go
-        List<RecordedEvent> events = RecordingFile.readAllEvents(path);
+            // Read all events from the file in one go
+            List<RecordedEvent> events = RecordingFile.readAllEvents(path);
 
-        // Read again the same events one by one
-        RecordingFile rfile = new RecordingFile(path);
-        List<RecordedEvent> events2 = new LinkedList<>();
-        while (rfile.hasMoreEvents()) {
-            events2.add(rfile.readEvent());
-        }
+            // Read again the same events one by one
+            try (RecordingFile rfile = new RecordingFile(path)) {
+                List<RecordedEvent> events2 = new LinkedList<>();
+                while (rfile.hasMoreEvents()) {
+                    events2.add(rfile.readEvent());
+                }
 
-        // Compare sizes
-        Asserts.assertEquals(events.size(), events2.size());
-        rfile.close();
+                // Compare sizes
+                Asserts.assertEquals(events.size(), events2.size());
+            }
+        }
     }
 }
