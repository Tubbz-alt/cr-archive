diff a/test/jdk/java/net/URLPermission/URLTest.java b/test/jdk/java/net/URLPermission/URLTest.java
--- a/test/jdk/java/net/URLPermission/URLTest.java
+++ b/test/jdk/java/net/URLPermission/URLTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -27,10 +27,11 @@
  * @bug 8010464
  * @modules jdk.httpserver
  * @library /test/lib
  * @build jdk.test.lib.net.SimpleSSLContext
  * @run main/othervm URLTest
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true URLTest
  * @summary check URLPermission with Http(s)URLConnection
  */
 
 import java.net.*;
 import java.io.*;
@@ -75,18 +76,18 @@
         boolean expectException = false;
         SecurityManager sm = System.getSecurityManager();
         if (sm != null) {
             expectException = true;
             Policy.setPolicy(new CustomPolicy(
-                new URLPermission("http://127.0.0.1:"+httpPort+"/foo.html", "GET:X-Foo,Z-Bar"),
-                new URLPermission("https://127.0.0.1:"+httpsPort+"/foo.html", "POST:X-Fob,T-Bar")));
+                new URLPermission("http://" + httpAuth + "/foo.html", "GET:X-Foo,Z-Bar"),
+                new URLPermission("https://" + httpsAuth + "/foo.html", "POST:X-Fob,T-Bar")));
         }
 
-        String url1 = "http://127.0.0.1:"+httpPort+"/foo.html";
-        String url2 = "https://127.0.0.1:"+httpsPort+"/foo.html";
-        String url3 = "http://127.0.0.1:"+httpPort+"/bar.html";
-        String url4 = "https://127.0.0.1:"+httpsPort+"/bar.html";
+        String url1 = "http://" + httpAuth + "/foo.html";
+        String url2 = "https://" + httpsAuth + "/foo.html";
+        String url3 = "http://" + httpAuth + "/bar.html";
+        String url4 = "https://" + httpsAuth + "/bar.html";
 
         // simple positive test. Should succeed
         test(url1, "GET", "X-Foo");
         test(url1, "GET", "Z-Bar", "X-Foo");
         test(url1, "GET", "X-Foo", "Z-Bar");
@@ -106,18 +107,18 @@
         System.out.println("\n--- Test 2 ---");
 
         SecurityManager sm = System.getSecurityManager();
         if (sm != null) {
             Policy.setPolicy(new CustomPolicy(
-                new URLPermission("http://127.0.0.1:"+httpPort+"/*", "GET:X-Foo"),
-                new URLPermission("https://127.0.0.1:"+httpsPort+"/*", "POST:X-Fob")));
+                new URLPermission("http://" + httpAuth + "/*", "GET:X-Foo"),
+                new URLPermission("https://" + httpsAuth + "/*", "POST:X-Fob")));
         }
 
-        String url1 = "http://127.0.0.1:"+httpPort+"/foo.html";
-        String url2 = "https://127.0.0.1:"+httpsPort+"/foo.html";
-        String url3 = "http://127.0.0.1:"+httpPort+"/bar.html";
-        String url4 = "https://127.0.0.1:"+httpsPort+"/bar.html";
+        String url1 = "http://" + httpAuth + "/foo.html";
+        String url2 = "https://" + httpsAuth + "/foo.html";
+        String url3 = "http://" + httpAuth + "/bar.html";
+        String url4 = "https://" + httpsAuth + "/bar.html";
 
         // simple positive test. Should succeed
         test(url1, "GET", "X-Foo");
         test(url2, "POST", "X-Fob");
         test(url3, "GET", "X-Foo");
@@ -130,25 +131,35 @@
         boolean expectException = false;
         SecurityManager sm = System.getSecurityManager();
         if (sm != null) {
             expectException = true;
             Policy.setPolicy(new CustomPolicy(
-                new URLPermission("http://127.0.0.1:"+httpPort+"/a/b/-", "DELETE,GET:X-Foo,Y-Foo"),
-                new URLPermission("https://127.0.0.1:"+httpsPort+"/a/c/-", "POST:*")));
+                new URLPermission("http://" + httpAuth + "/a/b/-", "DELETE,GET:X-Foo,Y-Foo"),
+                new URLPermission("https://" + httpsAuth + "/a/c/-", "POST:*")));
         }
 
-        String url1 = "http://127.0.0.1:"+httpPort+"/foo.html";
-        String url2 = "https://127.0.0.1:"+httpsPort+"/a/c/d/e/foo.html";
-        String url3 = "http://127.0.0.1:"+httpPort+"/a/b/c";
-        String url4 = "https://127.0.0.1:"+httpsPort+"/a/b/c";
+        String url1 = "http://" + httpAuth + "/foo.html";
+        String url2 = "https://" + httpsAuth + "/a/c/d/e/foo.html";
+        String url3 = "http://" + httpAuth + "/a/b/c";
+        String url4 = "https://" + httpsAuth + "/a/b/c";
 
         test(url1, "GET", "X-Foo", expectException);
         test(url2, "POST", "X-Zxc");
         test(url3, "DELETE", "Y-Foo");
         test(url4, "POST", "Y-Foo", expectException);
     }
 
+    static String authority(InetSocketAddress address) {
+        String hostaddr = address.getAddress().getHostAddress();
+        int port = address.getPort();
+        if (hostaddr.indexOf(':') > -1) {
+            return "[" + hostaddr + "]:" + port;
+        } else {
+            return hostaddr + ":" + port;
+        }
+    }
+
     // Convenience methods to simplify previous explicit test scenarios.
     static void test(String u, String method, String header) throws IOException {
         test(u, method, header, null, false);
     }
 
@@ -173,11 +184,11 @@
     {
         URL url = new URL(u);
         System.out.println("url=" + u + " method=" + method +
                            " header1=" + header1 + " header2=" + header2 +
                            " expectException=" + expectException);
-        HttpURLConnection urlc = (HttpURLConnection)url.openConnection();
+        HttpURLConnection urlc = (HttpURLConnection)url.openConnection(Proxy.NO_PROXY);
         if (urlc instanceof HttpsURLConnection) {
             HttpsURLConnection ssl = (HttpsURLConnection)urlc;
             ssl.setHostnameVerifier((host, sess) -> true);
             ssl.setSSLSocketFactory(ctx.getSocketFactory());
         }
@@ -218,15 +229,18 @@
     static HttpContext c, cs;
     static ExecutorService e, es;
     static SSLContext ctx;
     static int httpPort;
     static int httpsPort;
+    static String httpAuth;
+    static String httpsAuth;
 
     static void createServers() throws Exception {
-        InetSocketAddress any = new InetSocketAddress(0);
-        httpServer = HttpServer.create(any, 0);
-        httpsServer = HttpsServer.create(any, 0);
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        InetSocketAddress address = new InetSocketAddress(loopback, 0);
+        httpServer = HttpServer.create(address, 0);
+        httpsServer = HttpsServer.create(address, 0);
 
         OkHandler h = new OkHandler();
 
         c = httpServer.createContext("/", h);
         cs = httpsServer.createContext("/", h);
@@ -241,10 +255,12 @@
         httpServer.start();
         httpsServer.start();
 
         httpPort = httpServer.getAddress().getPort();
         httpsPort = httpsServer.getAddress().getPort();
+        httpAuth = authority(httpServer.getAddress());
+        httpsAuth = authority(httpsServer.getAddress());
     }
 
     static void shutdown() {
         httpServer.stop(1);
         httpsServer.stop(1);
@@ -258,16 +274,20 @@
             x.close();
         }
     }
 
     static class CustomPolicy extends Policy {
+        static final Policy DEFAULT_POLICY = Policy.getPolicy();
         final PermissionCollection perms = new Permissions();
+
         CustomPolicy(Permission... permissions) {
             java.util.Arrays.stream(permissions).forEach(perms::add);
 
             // needed for the HTTP(S) server
-            perms.add(new SocketPermission("localhost:1024-", "listen,resolve,accept"));
+            InetAddress loopback = InetAddress.getLoopbackAddress();
+            InetSocketAddress serverBound = new InetSocketAddress(loopback,1024);
+            perms.add(new SocketPermission(authority(serverBound) + "-", "listen,resolve,accept"));
             // needed by the test to reset the policy, per testX method
             perms.add(new SecurityPermission("setPolicy"));
             // needed to shutdown the ThreadPoolExecutor ( used by the servers )
             perms.add(new RuntimePermission("modifyThread"));
             // needed by the client code forHttpsURLConnection.setSSLSocketFactory
@@ -281,9 +301,9 @@
         public PermissionCollection getPermissions(CodeSource codesource) {
             return perms;
         }
 
         public boolean implies(ProtectionDomain domain, Permission perm) {
-            return perms.implies(perm);
+            return perms.implies(perm) || DEFAULT_POLICY.implies(domain, perm);
         }
     }
 }
