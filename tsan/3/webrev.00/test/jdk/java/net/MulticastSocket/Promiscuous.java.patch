diff a/test/jdk/java/net/MulticastSocket/Promiscuous.java b/test/jdk/java/net/MulticastSocket/Promiscuous.java
--- a/test/jdk/java/net/MulticastSocket/Promiscuous.java
+++ b/test/jdk/java/net/MulticastSocket/Promiscuous.java
@@ -20,35 +20,46 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  *
 
 /* @test
- * @bug 8014499
+ * @bug 8014499 8219804
+ * @library /test/lib
  * @summary Test for interference when two sockets are bound to the same
  *          port but joined to different multicast groups
  * @run main Promiscuous
  * @run main/othervm -Djava.net.preferIPv4Stack=true Promiscuous
  */
 
 import java.io.IOException;
 import static java.lang.System.out;
 import java.net.*;
+import jdk.test.lib.net.IPSupport;
 
 public class Promiscuous {
 
     static final int TIMEOUT =  5 * 1000; // 5 secs
     static int id = 1000;
 
     static void receive(MulticastSocket mc, boolean datagramExpected, int id)
         throws IOException
     {
         byte[] ba = new byte[100];
-        DatagramPacket p = new DatagramPacket(ba, ba.length);
+        DatagramPacket p;
         try {
-            mc.receive(p);
-            int recvId = Integer.parseInt(
-                    new String(p.getData(), 0, p.getLength(), "UTF-8"));
+            String data = null;
+            while (true) {
+                p = new DatagramPacket(ba, ba.length);
+                mc.receive(p);
+                data = new String(p.getData(), 0, p.getLength(), "UTF-8");
+                if (data.length() > UUID.length() && data.startsWith(UUID)) {
+                    data = data.substring(UUID.length());
+                    break;
+                }
+                logUnexpected(p);
+            }
+            int recvId = Integer.parseInt(data);
             if (datagramExpected) {
                 if (recvId != id)
                     throw new RuntimeException("Unexpected id, got " + recvId
                                                + ", expected: " + id);
                 out.printf("Received message as expected, %s\n", p.getAddress());
@@ -63,10 +74,24 @@
             else
                 out.printf("Message not received, as expected\n");
         }
     }
 
+    static void logUnexpected(DatagramPacket p) {
+        byte[] ba = p.getData();
+        System.out.printf("Unexpected packet: length: %d. First three bytes: %d, %d, %d\n",
+                          p.getLength(), ba[0], ba[1], ba[2]);
+    }
+
+    static final String UUID; // process-id : currentTimeMillis
+
+    static {
+        String s1 = Long.toString(ProcessHandle.current().pid());
+        String s2 = Long.toString(System.currentTimeMillis());
+        UUID = "<" + s1 + s2 + ">";
+    }
+
     static void test(InetAddress group1, InetAddress group2)
         throws IOException
     {
         try (MulticastSocket mc1 = new MulticastSocket();
              MulticastSocket mc2 = new MulticastSocket(mc1.getLocalPort());
@@ -75,11 +100,11 @@
             out.printf("Using port: %d\n", port);
 
             mc1.setSoTimeout(TIMEOUT);
             mc2.setSoTimeout(TIMEOUT);
             int nextId = id;
-            byte[] msg = Integer.toString(nextId).getBytes("UTF-8");
+            byte[] msg = (UUID + Integer.toString(nextId)).getBytes("UTF-8");
             DatagramPacket p = new DatagramPacket(msg, msg.length);
             p.setAddress(group1);
             p.setPort(port);
 
             mc1.joinGroup(group1);
@@ -93,11 +118,11 @@
             // the packet should be received by mc1 only
             receive(mc1, true, nextId);
             receive(mc2, false, 0);
 
             nextId = ++id;
-            msg = Integer.toString(nextId).getBytes("UTF-8");
+            msg = (UUID + Integer.toString(nextId)).getBytes("UTF-8");
             p = new DatagramPacket(msg, msg.length);
             p.setAddress(group2);
             p.setPort(port);
 
             out.printf("Sending datagram to: %s/%d\n", group2, port);
@@ -111,10 +136,11 @@
             mc2.leaveGroup(group2);
         }
     }
 
     public static void main(String args[]) throws IOException {
+        IPSupport.throwSkippedExceptionIfNonOperational();
         String os = System.getProperty("os.name");
 
         // Requires IP_MULTICAST_ALL on Linux (new since 2.6.31) so skip
         // on older kernels. Note that we skip on <= version 3 to keep the
         // parsing simple
@@ -127,11 +153,11 @@
                 return;
             }
         }
 
         // multicast groups used for the test
-        InetAddress ip4Group1 = InetAddress.getByName("224.7.8.9");
-        InetAddress ip4Group2 = InetAddress.getByName("225.4.5.6");
+        InetAddress ip4Group1 = InetAddress.getByName("224.0.0.120");
+        InetAddress ip4Group2 = InetAddress.getByName("224.0.0.121");
 
         test(ip4Group1, ip4Group2);
     }
 }
