diff a/test/jdk/java/net/ResponseCache/ResponseCacheTest.java b/test/jdk/java/net/ResponseCache/ResponseCacheTest.java
--- a/test/jdk/java/net/ResponseCache/ResponseCacheTest.java
+++ b/test/jdk/java/net/ResponseCache/ResponseCacheTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,17 +22,20 @@
  */
 
 /* @test
  * @summary Unit test for java.net.ResponseCache
  * @bug 4837267
+ * @library /test/lib
  * @author Yingxian Wang
  */
 
 import java.net.*;
 import java.util.*;
 import java.io.*;
 import javax.net.ssl.*;
+import jdk.test.lib.net.URIBuilder;
+import static java.net.Proxy.NO_PROXY;
 
 /**
  * Request should get serviced by the cache handler. Response get
  * saved through the cache handler.
  */
@@ -88,18 +91,21 @@
             try { ss.close(); } catch (IOException unused) {}
             try { s.close(); } catch (IOException unused) {}
             try { fis.close(); } catch (IOException unused) {}
         }
     }
-static class NameVerifier implements HostnameVerifier {
+    static class NameVerifier implements HostnameVerifier {
         public boolean verify(String hostname, SSLSession session) {
             return true;
         }
     }
     ResponseCacheTest() throws Exception {
         /* start the server */
-        ss = new ServerSocket(0);
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        ss = new ServerSocket();
+        ss.bind(new InetSocketAddress(loopback, 0));
+
         (new Thread(this)).start();
         /* establish http connection to server */
         url1 = new URL("http://localhost/file1.cache");
         HttpURLConnection http = (HttpURLConnection)url1.openConnection();
         InputStream is = null;
@@ -124,13 +130,17 @@
         out.close();
 
         http.disconnect();
 
         // testing ResponseCacheHandler.put()
-        url2 = new URL("http://localhost:" +
-                       Integer.toString(ss.getLocalPort())+"/file2.1");
-        http = (HttpURLConnection)url2.openConnection();
+        url2 = URIBuilder.newBuilder()
+                   .scheme("http")
+                   .host(ss.getInetAddress())
+                   .port(ss.getLocalPort())
+                   .path("/file2.1")
+                   .toURL();
+        http = (HttpURLConnection)url2.openConnection(NO_PROXY);
         System.out.println("responsecode2 is :"+http.getResponseCode());
         Map<String,List<String>> headers2 = http.getHeaderFields();
 
         try {
             is = http.getInputStream();
