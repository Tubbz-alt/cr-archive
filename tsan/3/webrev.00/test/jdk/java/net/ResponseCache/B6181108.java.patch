diff a/test/jdk/java/net/ResponseCache/B6181108.java b/test/jdk/java/net/ResponseCache/B6181108.java
--- a/test/jdk/java/net/ResponseCache/B6181108.java
+++ b/test/jdk/java/net/ResponseCache/B6181108.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2004, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2004, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,18 +22,20 @@
  */
 
 /**
  * @test
  * @bug 6181108
+ * @library /test/lib
  * @summary double encoded URL passed to ResponseCache
  * @author Edward Wang
  */
 
 import java.net.*;
 import java.util.*;
 import java.io.*;
-
+import jdk.test.lib.net.URIBuilder;
+import static java.net.Proxy.NO_PROXY;
 
 public class B6181108 implements Runnable {
     ServerSocket ss;
     static String urlWithSpace;
 
@@ -42,11 +44,11 @@
      */
     public void run() {
         try {
             Socket s = ss.accept();
 
-            InputStream is = s.getInputStream ();
+            InputStream is = s.getInputStream();
             BufferedReader r = new BufferedReader(new InputStreamReader(is));
             String x;
             while ((x=r.readLine()) != null) {
                 if (x.length() ==0) {
                     break;
@@ -73,36 +75,42 @@
             try { ss.close(); } catch (IOException unused) {}
         }
     }
 
     static class ResponseCache extends java.net.ResponseCache {
-        public CacheResponse get (URI uri, String method, Map<String,List<String>> hdrs) {
-            System.out.println ("get uri = " + uri);
+        public CacheResponse get(URI uri, String method, Map<String,List<String>> hdrs) {
+            System.out.println("get uri = " + uri);
             if (!urlWithSpace.equals(uri.toString())) {
                 throw new RuntimeException("test failed");
             }
             return null;
         }
-        public CacheRequest put (URI uri,  URLConnection urlc) {
-            System.out.println ("put uri = " + uri);
+        public CacheRequest put(URI uri,  URLConnection urlc) {
+            System.out.println("put uri = " + uri);
             return null;
         }
     }
 
     B6181108() throws Exception {
         /* start the server */
-        ss = new ServerSocket(0);
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        ss = new ServerSocket();
+        ss.bind(new InetSocketAddress(loopback, 0));
         (new Thread(this)).start();
 
-        ResponseCache.setDefault (new ResponseCache());
-        urlWithSpace = "http://localhost:" +
-                        Integer.toString(ss.getLocalPort()) +
-                        "/space%20test/page1.html";
-        URL url = new URL (urlWithSpace);
-        URLConnection urlc = url.openConnection();
+        ResponseCache.setDefault(new ResponseCache());
+        String base = URIBuilder.newBuilder()
+                   .scheme("http")
+                   .loopback()
+                   .port(ss.getLocalPort())
+                   .build()
+                   .toString();
+        urlWithSpace = base + "/space%20test/page1.html";
+        URL url = new URL(urlWithSpace);
+        URLConnection urlc = url.openConnection(NO_PROXY);
         int i = ((HttpURLConnection)(urlc)).getResponseCode();
-        System.out.println ("response code = " + i);
+        System.out.println("response code = " + i);
         ResponseCache.setDefault(null);
     }
 
     public static void main(String args[]) throws Exception {
         new B6181108();
