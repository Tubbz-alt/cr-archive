diff a/test/jdk/java/net/ResponseCache/Test.java b/test/jdk/java/net/ResponseCache/Test.java
--- a/test/jdk/java/net/ResponseCache/Test.java
+++ b/test/jdk/java/net/ResponseCache/Test.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -23,18 +23,23 @@
 
 /* @test
  * @summary Fixed a potential NullPointerException when setting a ResponseCache that returns a null CacheRequest
  * @bug 4837267
  * @modules jdk.httpserver
+ * @library /test/lib
+ * @run main Test
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true Test
  * @author Michael McMahon
  */
 
 import com.sun.net.httpserver.*;
 import java.net.*;
 import java.io.*;
 import java.util.*;
 
+import jdk.test.lib.net.URIBuilder;
+
 public class Test
 {
 
     static class MyHandler implements HttpHandler {
         public void handle(HttpExchange t) throws IOException {
@@ -49,29 +54,35 @@
             os.close();
         }
     }
 
     public static void main(String args[])  throws Exception {
-        HttpServer server = HttpServer.create(new InetSocketAddress(0), 0);
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        HttpServer server = HttpServer.create(new InetSocketAddress(loopback, 0), 0);
         server.createContext("/", new MyHandler());
         server.start();
         ResponseCache bak = ResponseCache.getDefault();
 
         try {
-            ResponseCache.setDefault (new ResponseCache() {
-                public CacheResponse get (URI uri, String rqstMethod, Map<String,List<String>> rqstHeaders)
+            ResponseCache.setDefault(new ResponseCache() {
+                public CacheResponse get(URI uri, String rqstMethod, Map<String,List<String>> rqstHeaders)
                     throws IOException {
                     return null;
                 }
                 public CacheRequest put(URI uri, URLConnection conn)  throws IOException
                 {
                     return null;
                 }
             });
 
-            URL url = new URL ("http://localhost:" + server.getAddress().getPort() + "/");
-            URLConnection urlc = url.openConnection ();
+            URL url = URIBuilder.newBuilder()
+                      .scheme("http")
+                      .host(server.getAddress().getAddress())
+                      .port(server.getAddress().getPort())
+                      .path("/")
+                      .toURL();
+            URLConnection urlc = url.openConnection(Proxy.NO_PROXY);
             InputStream is = urlc.getInputStream();
             while (is.read() != -1) ;
             is.close();
         } finally {
             ResponseCache.setDefault(bak);
