diff a/test/jdk/java/net/httpclient/LineStreamsAndSurrogatesTest.java b/test/jdk/java/net/httpclient/LineStreamsAndSurrogatesTest.java
--- a/test/jdk/java/net/httpclient/LineStreamsAndSurrogatesTest.java
+++ b/test/jdk/java/net/httpclient/LineStreamsAndSurrogatesTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -59,11 +59,11 @@
     private static final List<String> lines(String text) {
         return new BufferedReader(new StringReader(text)).lines().collect(Collectors.toList());
     }
 
     @Test
-    void testUncomplete() throws Exception {
+    public void testUncomplete() throws Exception {
         // Uses U+10400 which is encoded as the surrogate pair U+D801 U+DC00
         String text = "Bient\u00f4t\r\n nous plongerons\r\n dans\r les\n\n" +
                 " fr\u00f4\ud801\udc00des\r\n t\u00e9n\u00e8bres\ud801\udc00";
         Charset charset = UTF_8;
 
@@ -119,11 +119,11 @@
             throw new RuntimeException("Unexpected exception", errorRef.get());
         }
     }
 
     @Test
-    void testStream1() throws Exception {
+    public void testStream1() throws Exception {
         // Uses U+10400 which is encoded as the surrogate pair U+D801 U+DC00
         String text = "Bient\u00f4t\r\n nous plongerons\r\n dans\r\r les\n\n" +
                 " fr\u00f4\ud801\udc00des\r\n t\u00e9n\u00e8bres";
         Charset charset = UTF_8;
 
@@ -168,11 +168,11 @@
         }
     }
 
 
     @Test
-    void testStream2() throws Exception {
+    public void testStream2() throws Exception {
         String text = "Bient\u00f4t\r\n nous plongerons\r\n dans\r\r" +
                 " les fr\u00f4\ud801\udc00des\r\n t\u00e9n\u00e8bres\r\r";
         Charset charset = UTF_8;
 
         BodySubscriber<Stream<String>> bodySubscriber = BodySubscribers.ofLines(charset);
@@ -214,11 +214,11 @@
             throw new RuntimeException("Unexpected exception", errorRef.get());
         }
     }
 
     @Test
-    void testStream3_UTF16() throws Exception {
+    public void testStream3_UTF16() throws Exception {
         // Uses U+10400 which is encoded as the surrogate pair U+D801 U+DC00
         String text = "Bient\u00f4t\r\n nous plongerons\r\n dans\r\r" +
                 " les\n\n fr\u00f4\ud801\udc00des\r\n t\u00e9n\u00e8bres";
         Charset charset = UTF_16;
 
@@ -261,11 +261,11 @@
         }
     }
 
 
     @Test
-    void testStream4_UTF16() throws Exception {
+    public void testStream4_UTF16() throws Exception {
         String text = "Bient\u00f4t\r\n nous plongerons\r\n dans\r\r" +
                 " les fr\u00f4\ud801\udc00des\r\n t\u00e9n\u00e8bres\r\r";
         Charset charset = UTF_16;
 
         BodySubscriber<Stream<String>> bodySubscriber = BodySubscribers.ofLines(charset);
