diff a/test/jdk/java/net/httpclient/LineSubscribersAndSurrogatesTest.java b/test/jdk/java/net/httpclient/LineSubscribersAndSurrogatesTest.java
--- a/test/jdk/java/net/httpclient/LineSubscribersAndSurrogatesTest.java
+++ b/test/jdk/java/net/httpclient/LineSubscribersAndSurrogatesTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -79,11 +79,11 @@
             return res;
         }
     }
 
     @Test
-    void testIncomplete() throws Exception {
+    public void testIncomplete() throws Exception {
         // Uses U+10400 which is encoded as the surrogate pair U+D801 U+DC00
         String text = "Bient\u00f4t\r\n nous plongerons\r\n dans\r" +
                 " les\n\n fr\u00f4\ud801\udc00des\r\n t\u00e9n\u00e8bres\ud801\udc00";
         ObjectSubscriber subscriber = new ObjectSubscriber();
         BodySubscriber<String> bodySubscriber = BodySubscribers.fromLineSubscriber(
@@ -121,11 +121,11 @@
         }
     }
 
 
     @Test
-    void testStringWithFinisherLF() throws Exception {
+    public void testStringWithFinisherLF() throws Exception {
         // Uses U+10400 which is encoded as the surrogate pair U+D801 U+DC00
         String text = "Bient\u00f4t\r\n nous plongerons\r\n dans\r" +
                 " les\n\n fr\u00f4\ud801\udc00des\r\n t\u00e9n\u00e8bres\r";
         ObjectSubscriber subscriber = new ObjectSubscriber();
         BodySubscriber<String> bodySubscriber = BodySubscribers.fromLineSubscriber(
@@ -153,11 +153,11 @@
         assertEquals(subscriber.list, lines(text, "\n"));
     }
 
 
     @Test
-    void testStringWithFinisherCR() throws Exception {
+    public void testStringWithFinisherCR() throws Exception {
         String text = "Bient\u00f4t\r\n nous plongerons\r\n dans\r" +
                 " les fr\u00f4\ud801\udc00des\r\n t\u00e9n\u00e8bres\r\r";
         ObjectSubscriber subscriber = new ObjectSubscriber();
         BodySubscriber<String> bodySubscriber = BodySubscribers.fromLineSubscriber(
                 subscriber, Supplier::get, UTF_8, "\r");
@@ -181,11 +181,11 @@
                 ""));
         assertEquals(subscriber.list, lines(text, "\r"));
     }
 
     @Test
-    void testStringWithFinisherCRLF() throws Exception {
+    public void testStringWithFinisherCRLF() throws Exception {
         String text = "Bient\u00f4t\r\n nous plongerons\r\n dans\r" +
                 " les fr\u00f4\ud801\udc00des\r\n t\u00e9n\u00e8bres";
         ObjectSubscriber subscriber = new ObjectSubscriber();
         BodySubscriber<String> bodySubscriber = BodySubscribers.fromLineSubscriber(
                 subscriber, Supplier::get, UTF_8, "\r\n");
@@ -208,11 +208,11 @@
         assertEquals(subscriber.list, lines(text, "\r\n"));
     }
 
 
     @Test
-    void testStringWithFinisherBR() throws Exception {
+    public void testStringWithFinisherBR() throws Exception {
         String text = "Bient\u00f4t\r\n nous plongerons\r\n dans\r" +
                 " les\r\r fr\u00f4\ud801\udc00des\r\n t\u00e9n\u00e8bres";
         ObjectSubscriber subscriber = new ObjectSubscriber();
         BodySubscriber<String> bodySubscriber = BodySubscribers.fromLineSubscriber(
                 subscriber, Supplier::get, UTF_8, null);
@@ -238,11 +238,11 @@
         assertEquals(resp, expected.stream().collect(Collectors.joining("")));
         assertEquals(subscriber.list, lines(text, null));
     }
 
     @Test
-    void testStringWithFinisherBR_UTF_16() throws Exception {
+    public void testStringWithFinisherBR_UTF_16() throws Exception {
         String text = "Bient\u00f4t\r\n nous plongerons\r\n dans\r" +
                 " les\r\r fr\u00f4\ud801\udc00des\r\n t\u00e9n\u00e8bres\r\r";
         ObjectSubscriber subscriber = new ObjectSubscriber();
         BodySubscriber<String> bodySubscriber = BodySubscribers.fromLineSubscriber(
                 subscriber, Supplier::get, UTF_16, null);
