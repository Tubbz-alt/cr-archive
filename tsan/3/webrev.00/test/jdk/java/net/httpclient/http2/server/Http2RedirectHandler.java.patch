diff a/test/jdk/java/net/httpclient/http2/server/Http2RedirectHandler.java b/test/jdk/java/net/httpclient/http2/server/Http2RedirectHandler.java
--- a/test/jdk/java/net/httpclient/http2/server/Http2RedirectHandler.java
+++ b/test/jdk/java/net/httpclient/http2/server/Http2RedirectHandler.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -40,23 +40,27 @@
         examineExchange(t);
         try (InputStream is = t.getRequestBody()) {
             is.readAllBytes();
             String location = supplier.get();
             System.err.printf("RedirectHandler request to %s from %s\n",
-                t.getRequestURI().toString(), t.getRemoteAddress().toString());
+                    t.getRequestURI().toString(), t.getRemoteAddress().toString());
             System.err.println("Redirecting to: " + location);
             HttpHeadersBuilder headersBuilder = t.getResponseHeaders();
             headersBuilder.addHeader("Location", location);
-            t.sendResponseHeaders(301, 1024);
+            t.sendResponseHeaders(redirectCode(), 1024);
             byte[] bb = new byte[1024];
             OutputStream os = t.getResponseBody();
             os.write(bb);
             os.close();
             t.close();
         }
     }
 
+    protected int redirectCode() {
+        return 301;
+    }
+
     // override in sub-class to examine the exchange, but don't
     // alter transaction state by reading the request body etc.
     protected void examineExchange(Http2TestExchange t) {
     }
 }
