diff a/test/jdk/java/net/SocketOption/TcpKeepAliveTest.java b/test/jdk/java/net/SocketOption/TcpKeepAliveTest.java
--- a/test/jdk/java/net/SocketOption/TcpKeepAliveTest.java
+++ b/test/jdk/java/net/SocketOption/TcpKeepAliveTest.java
@@ -29,10 +29,11 @@
  * @run main TcpKeepAliveTest
  */
 import java.io.IOException;
 import java.net.DatagramSocket;
 import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.net.MulticastSocket;
 import java.net.ServerSocket;
 import java.net.Socket;
 import jdk.net.ExtendedSocketOptions;
 
@@ -41,13 +42,13 @@
     private static final int DEFAULT_KEEP_ALIVE_PROBES = 7;
     private static final int DEFAULT_KEEP_ALIVE_TIME = 1973;
     private static final int DEFAULT_KEEP_ALIVE_INTVL = 53;
 
     public static void main(String args[]) throws IOException {
-
-        try (ServerSocket ss = new ServerSocket(0);
-                Socket s = new Socket(InetAddress.getLoopbackAddress(), ss.getLocalPort());
+        var loopback = InetAddress.getLoopbackAddress();
+        try (ServerSocket ss = boundServer(loopback);
+                Socket s = new Socket(loopback, ss.getLocalPort());
                 DatagramSocket ds = new DatagramSocket(0);
                 MulticastSocket mc = new MulticastSocket(0)) {
             if (ss.supportedOptions().contains(ExtendedSocketOptions.TCP_KEEPIDLE)) {
                 ss.setOption(ExtendedSocketOptions.TCP_KEEPIDLE, DEFAULT_KEEP_ALIVE_TIME);
                 if (ss.getOption(ExtendedSocketOptions.TCP_KEEPIDLE) != DEFAULT_KEEP_ALIVE_TIME) {
@@ -108,6 +109,13 @@
                 throw new RuntimeException("Test failed, TCP_KEEPINTERVAL is applicable"
                         + " for TCP Sockets only");
             }
         }
     }
+
+    private static ServerSocket boundServer(InetAddress address) throws IOException {
+        var socketAddress = new InetSocketAddress(address, 0);
+        var server = new ServerSocket();
+        server.bind(socketAddress);
+        return server;
+    }
 }
