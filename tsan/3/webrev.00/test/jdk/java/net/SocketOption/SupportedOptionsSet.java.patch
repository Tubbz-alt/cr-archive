diff a/test/jdk/java/net/SocketOption/SupportedOptionsSet.java b/test/jdk/java/net/SocketOption/SupportedOptionsSet.java
--- a/test/jdk/java/net/SocketOption/SupportedOptionsSet.java
+++ b/test/jdk/java/net/SocketOption/SupportedOptionsSet.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2016, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -20,17 +20,20 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 import java.io.IOException;
-import java.net.*;
+import java.net.ServerSocket;
+import java.net.Socket;
 import java.util.Set;
 import static java.lang.System.out;
+import jdk.test.lib.net.IPSupport;
 
 /*
  * @test
  * @bug 8143923
+ * @library /test/lib
  * @summary java.net socket supportedOptions set depends on call order
  * @run main/othervm SupportedOptionsSet first
  * @run main/othervm SupportedOptionsSet second
  * @run main/othervm -Djava.net.preferIPv4Stack=true SupportedOptionsSet first
  * @run main/othervm -Djava.net.preferIPv4Stack=true SupportedOptionsSet second
@@ -40,51 +43,38 @@
 // calculated, stores them in a private static fields.
 
 public class SupportedOptionsSet {
 
     public static void main(String[] args) throws IOException {
+        IPSupport.throwSkippedExceptionIfNonOperational();
+
         if (args[0].equals("first"))
             first();
         else if (args[0].equals("second"))
             second();
     }
 
     static void first() throws IOException {
         try (Socket s = new Socket();
-             ServerSocket ss = new ServerSocket();
-             DatagramSocket ds = new DatagramSocket();
-             MulticastSocket ms = new MulticastSocket()) {
-
+             ServerSocket ss = new ServerSocket())
+        {
             Set<?> first = s.supportedOptions();
             Set<?> second = ss.supportedOptions();
             assertNotEqual(first, second,
                  "Socket and ServerSocket should have different options.");
-
-            first = ds.supportedOptions();
-            second = ms.supportedOptions();
-            assertNotEqual(first, second,
-                "DatagramSocket and MulticastSocket should have different options.");
         }
     }
 
     /** Tests with the order of access to supportedOptions reversed.  */
     static void second() throws IOException {
         try (ServerSocket ss = new ServerSocket();
-             Socket s = new Socket();
-             DatagramSocket ds = new DatagramSocket();
-             MulticastSocket ms = new MulticastSocket()) {
-
+             Socket s = new Socket())
+        {
             Set<?> first = ss.supportedOptions();
             Set<?> second = s.supportedOptions();
             assertNotEqual(first, second,
                 "ServerSocket and Socket should have different options.");
-
-            first = ms.supportedOptions();
-            second = ds.supportedOptions();
-            assertNotEqual(first, second,
-                "MulticastSocket and DatagramSocket should have different options.");
-
         }
     }
 
     static void assertNotEqual(Set<?> s1, Set<?> s2, String message) {
         if (s1.equals(s2)) {
