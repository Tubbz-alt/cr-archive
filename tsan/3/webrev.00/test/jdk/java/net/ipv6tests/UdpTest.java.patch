diff a/test/jdk/java/net/ipv6tests/UdpTest.java b/test/jdk/java/net/ipv6tests/UdpTest.java
--- a/test/jdk/java/net/ipv6tests/UdpTest.java
+++ b/test/jdk/java/net/ipv6tests/UdpTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,15 +22,18 @@
  */
 
 /*
  * @test
  * @bug 4868820
- * @summary IPv6 support for Windows XP and 2003 server
+ * @key intermittent
+ * @summary IPv6 support for Windows XP and 2003 server.
+ *          This test requires binding to the wildcard address and as such
+ *          may fail intermittently on some platforms.
  * @library /test/lib
  * @build jdk.test.lib.NetworkConfiguration
  *        jdk.test.lib.Platform
- * @run main UdpTest
+ * @run main UdpTest -d
  */
 
 import java.net.DatagramPacket;
 import java.net.DatagramSocket;
 import java.net.Inet4Address;
@@ -68,10 +71,14 @@
         ia4addr = getFirstLocalIPv4Address ();
     }
 
     public static void main (String[] args) throws Exception {
         checkDebug(args);
+        if (ia4addr == null) {
+            System.out.println ("No local IPv4 addresses: exiting now");
+            return;
+        }
         if (ia6addr == null) {
             System.out.println ("No local IPv6 addresses: exiting now");
             return;
         }
         dprintln ("Local Addresses");
@@ -86,10 +93,11 @@
     }
 
     /* basic UDP connectivity test using IPv6 only and IPv4/IPv6 together */
 
     static void test1 () throws Exception {
+        System.out.println("Test1 starting");
         s1 = new DatagramSocket ();
         s2 = new DatagramSocket ();
         simpleDataExchange (s1, ia4addr, s2, ia4addr);
         s1.close (); s2.close ();
 
@@ -124,10 +132,11 @@
     }
 
     /* check timeouts on receive */
 
     static void test2 () throws Exception {
+        System.out.println("Test2 starting");
         s1 = new DatagramSocket ();
         s2 = new DatagramSocket ();
         s1.setSoTimeout (4000);
         long t1 = System.currentTimeMillis();
         try {
@@ -174,10 +183,11 @@
     }
 
     /* check connected sockets */
 
     static void test3 () throws Exception {
+        System.out.println("Test3 starting");
         s1 = new DatagramSocket ();
         s2 = new DatagramSocket ();
         s1.connect (ia6addr, s2.getLocalPort());
         datagramEcho (s1, s2, null);
         s1.close (); s2.close();
@@ -185,10 +195,11 @@
     }
 
     /* check PortUnreachable */
 
     static void test4 () throws Exception {
+        System.out.println("Test4 starting");
         s1 = new DatagramSocket ();
         s1.connect (ia6addr, 5000);
         s1.setSoTimeout (3000);
         try {
             DatagramPacket p = new DatagramPacket ("HelloWorld".getBytes(), "HelloWorld".length());
