diff a/test/jdk/java/net/DatagramPacket/Constructor.java b/test/jdk/java/net/DatagramPacket/Constructor.java
--- a/test/jdk/java/net/DatagramPacket/Constructor.java
+++ b/test/jdk/java/net/DatagramPacket/Constructor.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -20,132 +20,100 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 /* @test
- *
- * @bug 4091803
- *
+ * @bug 4091803 7021373
  * @summary this tests that the constructor of DatagramPacket rejects
- * bogus arguments properly.
- *
- * @author Benjamin Renaud
+ *          bogus arguments properly.
+ * @run testng Constructor
  */
-import java.io.*;
-import java.net.*;
-import java.util.*;
+
+import java.net.DatagramPacket;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+
+import org.testng.annotations.Test;
+
+import static org.testng.Assert.assertFalse;
+import static org.testng.Assert.expectThrows;
 
 public class Constructor {
 
-    public static void main(String[] args) throws Exception {
-        testNullPacket();
-        testNegativeBufferLength();
-        testPacketLengthTooLarge();
-        testNegativePortValue();
-        testPortValueTooLarge();
-        testSimpleConstructor();
-        testFullConstructor();
-        System.err.println("all passed!");
+    private static final byte[] buf = new byte[128];
+
+    private static final InetAddress LOOPBACK = InetAddress.getLoopbackAddress();
+    private static final Class<NullPointerException> NPE = NullPointerException.class;
+    private static final Class<IllegalArgumentException> IAE = IllegalArgumentException.class;
+
+    @Test
+    public void testNullPacket() {
+        expectThrows(NPE,
+                () -> new DatagramPacket(null, 100));
     }
+    @Test
+    public void testNull() throws Exception {
+        expectThrows(NPE, () -> new DatagramPacket(null, 100));
+        expectThrows(NPE, () -> new DatagramPacket(null, 0, 10));
+        expectThrows(NPE, () -> new DatagramPacket(null, 0, 10, LOOPBACK, 80));
+        expectThrows(NPE, () -> new DatagramPacket(null, 10, LOOPBACK, 80));
+        expectThrows(NPE, () -> new DatagramPacket(null, 0, 10, new InetSocketAddress(80)));
+        expectThrows(NPE, () -> new DatagramPacket(null, 10, new InetSocketAddress(80)));
 
-    static void testNullPacket() throws Exception {
-        boolean error = true;
-        try {
-            new DatagramPacket(null, 100);
-        } catch (NullPointerException e) {
-            /* correct exception */
-            error = false;
-        }
-        if (error) {
-            throw new RuntimeException("test 1 failed.");
-        }
+        // no Exception expected for null addresses
+        new DatagramPacket(buf, 10, null, 0);
+        new DatagramPacket(buf, 10, 10, null, 0);
     }
 
-    static void testNegativeBufferLength() throws Exception {
-        boolean error = true;
-        byte[] buf = new byte[128];
-        try {
-            /* length lesser than buffer length */
-            new DatagramPacket(buf, -128);
-        } catch (IllegalArgumentException e) {
-            /* correct exception */
-            error = false;
-        }
-        if (error) {
-            throw new RuntimeException("test 2 failed.");
-        }
+    @Test
+    public void testNegativeBufferLength() {
+        /* length lesser than buffer length */
+        expectThrows(IAE,
+                () -> new DatagramPacket(buf, -128));
     }
 
-    static void testPacketLengthTooLarge() throws Exception {
-        boolean error = true;
-        byte[] buf = new byte[128];
-        try {
-            /* length greater than buffer length */
-            new DatagramPacket(buf, 256);
-        } catch (IllegalArgumentException e) {
-            /* correct exception */
-            error = false;
-        }
-        if (error) {
-            throw new RuntimeException("test 3 failed.");
-        }
+    @Test
+    public void testPacketLengthTooLarge() {
+        /* length greater than buffer length */
+        expectThrows(IAE,
+                () -> new DatagramPacket(buf, 256));
     }
 
-    static void testNegativePortValue() throws Exception {
-        boolean error = true;
-        byte[] buf = new byte[128];
-        InetAddress host = InetAddress.getLocalHost();
-        try {
-            /* negative port */
-            new DatagramPacket(buf, 100, host, -1);
-        } catch (IllegalArgumentException e) {
-            /* correct exception */
-            error = false;
-        }
-        if (error) {
-            throw new RuntimeException("test 5 failed.");
-        }
+    @Test
+    public void testNegativePortValue() throws Exception {
+        /* negative port */
+        InetAddress addr = InetAddress.getLocalHost();
+
+        expectThrows(IAE,
+                () -> new DatagramPacket(buf, 100, addr, -1));
     }
 
-    static void testPortValueTooLarge() throws Exception {
-        boolean error = true;
-        byte[] buf = new byte[256];
-        InetAddress address = InetAddress.getLocalHost();
-        try {
-            /* invalid port value */
-            new DatagramPacket(buf, 256, address, Integer.MAX_VALUE);
-        } catch (IllegalArgumentException e) {
-            /* correct exception */
-            error = false;
-        }
-        if (error) {
-            throw new RuntimeException("test 6 failed.");
-        }
+    @Test
+    public void testPortValueTooLarge() {
+        /* invalid port value */
+        expectThrows(IAE,
+                () -> new DatagramPacket(buf, 128, LOOPBACK, Integer.MAX_VALUE));
     }
 
-    static void testSimpleConstructor() {
-        byte[] buf = new byte[128];
+    @Test
+    public void testSimpleConstructor() {
         int offset = 10;
         int length = 50;
-        DatagramPacket packet = new DatagramPacket(buf, offset, length);
-        if (packet.getData() != buf || packet.getOffset() != offset ||
-               packet.getLength() != length) {
-            throw new RuntimeException("simple constructor failed");
-        }
+        DatagramPacket pkt = new DatagramPacket(buf, offset, length);
+
+        assertFalse((pkt.getData() != buf || pkt.getOffset() != offset ||
+                pkt.getLength() != length), "simple constructor failed");
     }
 
-    static void testFullConstructor() throws Exception {
-        byte[] buf = new byte[128];
+    @Test
+    public void testFullConstructor() {
         int offset = 10;
         int length = 50;
-        InetAddress address = InetAddress.getLocalHost();
         int port = 8080;
-        DatagramPacket packet = new DatagramPacket(buf, offset, length,
-                                                   address, port);
-        if (packet.getData() != buf || packet.getOffset() != offset ||
-            packet.getLength() != length ||
-            packet.getAddress() != address ||
-            packet.getPort() != port) {
-            throw new RuntimeException("full constructor failed");
-        }
+        DatagramPacket packet = new DatagramPacket(buf, offset, length, LOOPBACK, port);
+
+        assertFalse((packet.getData() != buf || packet.getOffset() != offset ||
+                packet.getLength() != length ||
+                packet.getAddress() != LOOPBACK ||
+                packet.getPort() != port), "full constructor failed");
     }
 }
