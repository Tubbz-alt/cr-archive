diff a/test/jdk/java/net/SocketInputStream/SocketClosedException.java b/test/jdk/java/net/SocketInputStream/SocketClosedException.java
--- a/test/jdk/java/net/SocketInputStream/SocketClosedException.java
+++ b/test/jdk/java/net/SocketInputStream/SocketClosedException.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,18 +22,20 @@
  */
 
 /*
  * @test
  * @bug 4681556
+ * @library /test/lib
  * @summary Wrong text if a read is performed on a socket after it
  *      has been closed
  * @run main SocketClosedException
  * @run main/othervm -Djava.net.preferIPv4Stack=true SocketClosedException
  */
 
 import java.io.*;
 import java.net.*;
+import jdk.test.lib.net.IPSupport;
 
 public class SocketClosedException {
     static void doServerSide() throws Exception {
         try {
             Socket socket = serverSocket.accept();
@@ -47,11 +49,12 @@
             serverSocket.close();
         }
     }
 
     static void doClientSide(int port) throws Exception {
-        Socket socket = new Socket("localhost", port);
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        Socket socket = new Socket(loopback, port);
         InputStream is = socket.getInputStream();
 
         is.read();
         socket.close();
         is.read();
@@ -59,11 +62,14 @@
 
     static ServerSocket serverSocket;
     static Exception serverException = null;
 
     public static void main(String[] args) throws Exception {
-        serverSocket = new ServerSocket(0);
+        IPSupport.throwSkippedExceptionIfNonOperational();
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        serverSocket = new ServerSocket();
+        serverSocket.bind(new InetSocketAddress(loopback, 0));
         startServer();
         try {
             doClientSide(serverSocket.getLocalPort());
         } catch (SocketException e) {
             if (!e.getMessage().equalsIgnoreCase("Socket closed")) {
