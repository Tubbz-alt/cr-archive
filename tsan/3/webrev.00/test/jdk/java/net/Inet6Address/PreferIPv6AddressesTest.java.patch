diff a/test/jdk/java/net/Inet6Address/PreferIPv6AddressesTest.java b/test/jdk/java/net/Inet6Address/PreferIPv6AddressesTest.java
--- a/test/jdk/java/net/Inet6Address/PreferIPv6AddressesTest.java
+++ b/test/jdk/java/net/Inet6Address/PreferIPv6AddressesTest.java
@@ -22,10 +22,11 @@
  */
 
 /**
  * @test
  * @bug 8016521
+ * @library /test/lib
  * @summary InetAddress should not always re-order addresses returned from name
  *          service
  * @run main/othervm -Djava.net.preferIPv6Addresses=false PreferIPv6AddressesTest
  * @run main/othervm -Djava.net.preferIPv6Addresses=true PreferIPv6AddressesTest
  * @run main/othervm -Djava.net.preferIPv6Addresses=system PreferIPv6AddressesTest
@@ -36,10 +37,11 @@
 import java.net.*;
 import java.nio.channels.DatagramChannel;
 import java.util.Arrays;
 import java.util.stream.IntStream;
 import static java.lang.System.out;
+import jdk.test.lib.net.IPSupport;
 
 public class PreferIPv6AddressesTest {
 
     // A name, that if resolves, returns both IPv4 and IPv6 addresses.
     static final String HOST_NAME = "www.google.com";
@@ -48,11 +50,10 @@
 
     static final String preferIPV6Address =
             System.getProperty("java.net.preferIPv6Addresses", "false");
 
     public static void main(String args[]) throws IOException {
-
         InetAddress addrs[];
         try {
             addrs = InetAddress.getAllByName(HOST_NAME);
         } catch (UnknownHostException e) {
             out.println("Unknown host " + HOST_NAME + ", cannot run test.");
@@ -64,11 +65,11 @@
                 .findFirst().orElse(-1);
         int firstIPv6Address = IntStream.range(0, addrs.length)
                 .filter(x -> addrs[x] instanceof Inet6Address)
                 .findFirst().orElse(-1);
 
-        out.println("IPv6 supported: " + IPv6Supported());
+        out.println("IPv6 supported: " + IPSupport.hasIPv6());
         out.println("Addresses: " + Arrays.asList(addrs));
 
         if (preferIPV6Address.equalsIgnoreCase("true") && firstIPv6Address != -1) {
             int off = firstIPv4Address != -1 ? firstIPv4Address : addrs.length;
             assertAllv6Addresses(addrs, 0, off);
@@ -79,14 +80,14 @@
             int off = firstIPv6Address != -1 ? firstIPv6Address : addrs.length;
             assertAllv4Addresses(addrs, 0, off);
             assertAllv6Addresses(addrs, off, addrs.length);
             assertLoopbackAddress(Inet4Address.class);
             assertAnyLocalAddress(Inet4Address.class);
-        } else if (preferIPV6Address.equalsIgnoreCase("system") && IPv6Supported()) {
+        } else if (preferIPV6Address.equalsIgnoreCase("system") && IPSupport.hasIPv6()) {
             assertLoopbackAddress(Inet6Address.class);
             assertAnyLocalAddress(Inet6Address.class);
-        } else if (preferIPV6Address.equalsIgnoreCase("system") && !IPv6Supported()) {
+        } else if (preferIPV6Address.equalsIgnoreCase("system") && !IPSupport.hasIPv6()) {
             assertLoopbackAddress(Inet4Address.class);
             assertAnyLocalAddress(Inet4Address.class);
         }
     }
 
@@ -118,15 +119,6 @@
         InetAddress anyAddr = (new InetSocketAddress(0)).getAddress();
         if (!anyAddr.getClass().isAssignableFrom(expectedType))
             throw new RuntimeException("Expected " + expectedType
                     + ", got " + anyAddr.getClass());
     }
-
-    static boolean IPv6Supported() throws IOException {
-        try {
-            DatagramChannel.open(StandardProtocolFamily.INET6);
-            return true;
-        } catch (UnsupportedOperationException x) {
-            return false;
-        }
-    }
 }
