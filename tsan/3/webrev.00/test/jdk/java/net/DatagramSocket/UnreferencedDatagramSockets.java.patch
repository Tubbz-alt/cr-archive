diff a/test/jdk/java/net/DatagramSocket/UnreferencedDatagramSockets.java b/test/jdk/java/net/DatagramSocket/UnreferencedDatagramSockets.java
--- a/test/jdk/java/net/DatagramSocket/UnreferencedDatagramSockets.java
+++ b/test/jdk/java/net/DatagramSocket/UnreferencedDatagramSockets.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,10 +21,11 @@
  * questions.
  */
 
 /**
  * @test
+ * @library /test/lib
  * @modules java.management java.base/java.io:+open java.base/java.net:+open
  * @run main/othervm UnreferencedDatagramSockets
  * @run main/othervm -Djava.net.preferIPv4Stack=true UnreferencedDatagramSockets
  * @summary Check that unreferenced datagram sockets are closed
  */
@@ -46,13 +47,16 @@
 import java.nio.file.Paths;
 import java.util.ArrayDeque;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.CountDownLatch;
 
 import com.sun.management.UnixOperatingSystemMXBean;
 
+import jdk.test.lib.net.IPSupport;
+
 public class UnreferencedDatagramSockets {
 
     /**
      * The set of sockets we have to check up on.
      */
@@ -65,21 +69,22 @@
 
     // Server to echo a datagram packet
     static class Server implements Runnable {
 
         DatagramSocket ss;
+        CountDownLatch latch = new CountDownLatch(1);
 
         Server() throws IOException {
-            ss = new DatagramSocket(0);
+            ss = new DatagramSocket(0, getHost());
             System.out.printf("  DatagramServer addr: %s: %d%n",
                     this.getHost(), this.getPort());
             pendingSockets.add(new NamedWeak(ss, pendingQueue, "serverDatagramSocket"));
             extractRefs(ss, "serverDatagramSocket");
         }
 
         InetAddress getHost() throws UnknownHostException {
-            InetAddress localhost = InetAddress.getByName("localhost"); //.getLocalHost();
+            InetAddress localhost = lookupLocalHost();
             return localhost;
         }
 
         int getPort() {
             return ss.getLocalPort();
@@ -91,23 +96,28 @@
                 byte[] buffer = new byte[50];
                 DatagramPacket p = new DatagramPacket(buffer, buffer.length);
                 ss.receive(p);
                 buffer[0] += 1;
                 ss.send(p);         // send back +1
-
+                latch.await();      // wait for the client to receive the packet
                 // do NOT close but 'forget' the datagram socket reference
                 ss = null;
             } catch (Exception ioe) {
                 ioe.printStackTrace();
             }
         }
     }
 
+    static InetAddress lookupLocalHost() throws UnknownHostException {
+        return InetAddress.getByName("localhost"); //.getLocalHost();
+    }
+
     public static void main(String args[]) throws Exception {
+        IPSupport.throwSkippedExceptionIfNonOperational();
 
         // Create and close a DatagramSocket to warm up the FD count for side effects.
-        try (DatagramSocket s = new DatagramSocket(0)) {
+        try (DatagramSocket s = new DatagramSocket(0, lookupLocalHost())) {
             // no-op; close immediately
             s.getLocalPort();   // no-op
         }
 
         long fdCount0 = getFdCount();
@@ -116,11 +126,11 @@
         // start a server
         Server svr = new Server();
         Thread thr = new Thread(svr);
         thr.start();
 
-        DatagramSocket client = new DatagramSocket(0);
+        DatagramSocket client = new DatagramSocket(0, lookupLocalHost());
         client.connect(svr.getHost(), svr.getPort());
         pendingSockets.add(new NamedWeak(client, pendingQueue, "clientDatagramSocket"));
         extractRefs(client, "clientDatagramSocket");
 
         byte[] msg = new byte[1];
@@ -128,10 +138,12 @@
         DatagramPacket p = new DatagramPacket(msg, msg.length, svr.getHost(), svr.getPort());
         client.send(p);
 
         p = new DatagramPacket(msg, msg.length);
         client.receive(p);
+        svr.latch.countDown(); // unblock the server
+
 
         System.out.printf("echo received from: %s%n", p.getSocketAddress());
         if (msg[0] != 2) {
             throw new AssertionError("incorrect data received: expected: 2, actual: " + msg[0]);
         }
