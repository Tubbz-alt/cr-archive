diff a/test/jdk/java/net/DatagramSocket/ReuseAddressTest.java b/test/jdk/java/net/DatagramSocket/ReuseAddressTest.java
--- a/test/jdk/java/net/DatagramSocket/ReuseAddressTest.java
+++ b/test/jdk/java/net/DatagramSocket/ReuseAddressTest.java
@@ -1,6 +1,6 @@
-/* Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
+/* Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -28,10 +28,13 @@
 import java.net.SocketException;
 
 /*
  * @test
  * @bug 8153674
+ * @key intermittent
+ * @summary This test might fail intermittently as it needs a UDP socket that
+ *          binds to the wildcard address.
  * @summary Expected SocketException not thrown when calling bind() with
  *   setReuseAddress(false)
  * @run main/othervm ReuseAddressTest
  */
 
@@ -114,11 +117,11 @@
         System.out.println(" >> " + testCaseID + ": " + "public void setReuseAddress(boolean on) throws SocketException");
 
         MulticastSocket ms1 = null;
         MulticastSocket ms2 = null;
         try {
-            InetSocketAddress addr = createSocketAddress(5050);
+            InetSocketAddress addr = createSocketAddress(0);
 
             ms1 = new MulticastSocket(null);
             ms1.setReuseAddress(true);
             if (!ms1.getReuseAddress()) {
                 System.out.println("Cannot check: "
@@ -130,10 +133,11 @@
             } catch (SocketException e) {
                 throw new RuntimeException("cannot bind first socket to " + addr
                         + " unexpected " + e);
             }
 
+            addr = createSocketAddress(ms1.getLocalPort());
             ms2 = new MulticastSocket(null);
             ms2.setReuseAddress(true);
             if (!ms2.getReuseAddress()) {
                 System.out.println("Cannot check: "
                         + " safety for SO_REUSEADDR option is not guaranteed");
@@ -184,20 +188,21 @@
         System.out.println(" >> " + testCaseID + ": " + "public void setReuseAddress(boolean on) throws SocketException");
 
         MulticastSocket ms1 = null;
         MulticastSocket ms2 = null;
         try {
-            InetSocketAddress addr = createSocketAddress(6060);
+            InetSocketAddress addr = createSocketAddress(0);
 
             ms1 = new MulticastSocket(null);
             try {
                 ms1.bind(addr);
             } catch (SocketException e) {
                 throw new RuntimeException("cannot bind first socket to " + addr
                         + " unexpected " + e);
             }
 
+            addr = createSocketAddress(ms1.getLocalPort());
             ms2 = new MulticastSocket(null);
             ms2.setReuseAddress(false);  // method under test
 
             try {
                 ms2.bind(addr);
@@ -241,28 +246,28 @@
 
         DatagramSocket ds1 = null;
         DatagramSocket ds2 = null;
         try {
 
-            InetSocketAddress isa = createSocketAddress(7070);
-            InetAddress addr = isa.getAddress();
+            InetSocketAddress isa1 = createSocketAddress(0);
+            InetAddress addr = isa1.getAddress();
             InetAddress wildcard = InetAddress.getByName("0.0.0.0");
             if (addr.equals(wildcard) || addr.isLoopbackAddress()) {
                 System.out.println("Cannot check: addresses are equal");
             }
 
-            InetSocketAddress isa1 = new InetSocketAddress(addr, isa.getPort());
-            InetSocketAddress isa2 = new InetSocketAddress(wildcard, isa.getPort());
 
             ds1 = new DatagramSocket(null);
             ds1.setReuseAddress(true);    // method under test
             if (!ds1.getReuseAddress()) {
                 System.out.println("Cannot check: "
                         + " safety for SO_REUSEADDR option is not guaranteed");
             }
             ds1.bind(isa1);
 
+            InetSocketAddress isa2 = new InetSocketAddress(wildcard, ds1.getLocalPort());
+
             ds2 = new DatagramSocket(null);
             ds2.setReuseAddress(true);    // method under test
             if (!ds2.getReuseAddress()) {
                 System.out.println("Cannot check: "
                         + " safety for SO_REUSEADDR option is not guaranteed");
@@ -273,12 +278,12 @@
             } catch (SocketException e) {
                 throw new RuntimeException("cannot bind second socket to " + isa2
                         + " unexpected " + e);
             }
 
-            if (ds1.getLocalPort() != isa.getPort() || !ds1.isBound()
-                    || ds2.getLocalPort() != isa.getPort() || !ds2.isBound()) {
+            if (ds1.getLocalPort() != ds2.getLocalPort() || !ds1.isBound()
+                    || !ds2.isBound()) {
                 System.out.println("bind() fails with: " + addr);
                 System.out.println("  ds1 [" + getInfo(ds1) + "]");
                 System.out.println("  ds2 [" + getInfo(ds2) + "]");
                 System.out.println("  getReuseAddress(): " + ds2.getReuseAddress());
                 throw new RuntimeException("bind() fails with: " + addr);
