diff a/test/jdk/java/net/URLClassLoader/HttpTest.java b/test/jdk/java/net/URLClassLoader/HttpTest.java
--- a/test/jdk/java/net/URLClassLoader/HttpTest.java
+++ b/test/jdk/java/net/URLClassLoader/HttpTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,17 +22,20 @@
  */
 
 /**
  * @test
  * @bug 4636331
+ * @library /test/lib
  * @summary Check that URLClassLoader doesn't create excessive http
  *          connections
  */
 import java.net.*;
 import java.io.*;
 import java.util.*;
 
+import jdk.test.lib.net.URIBuilder;
+
 public class HttpTest {
 
     /*
      * Simple http server to service http requests. Auto shutdown
      * if "idle" (no requests) for 10 seconds. Forks worker thread
@@ -117,11 +120,12 @@
                 }
             }
         }
 
         HttpServer() throws Exception {
-            ss = new ServerSocket(0);
+            ss = new ServerSocket();
+            ss.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));
         }
 
         public void run() {
             try {
                 // shutdown if no request in 10 seconds.
@@ -198,13 +202,16 @@
 
         // create http server
         HttpServer svr = HttpServer.create();
 
         // create class loader
-        URL urls[] =
-            { new URL("http://localhost:" + svr.port() + "/dir1/"),
-              new URL("http://localhost:" + svr.port() + "/dir2/") };
+        URL urls[] = {
+                URIBuilder.newBuilder().scheme("http").loopback().port(svr.port())
+                        .path("/dir1/").toURL(),
+                URIBuilder.newBuilder().scheme("http").loopback().port(svr.port())
+                        .path("/dir2/").toURL(),
+        };
         URLClassLoader cl = new URLClassLoader(urls);
 
         // Test 1 - check that getResource does single HEAD request
         svr.counters().reset();
         URL url = cl.getResource("foo.gif");
