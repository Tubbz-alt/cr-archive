diff a/test/jdk/java/net/ProxySelector/LoopbackAddresses.java b/test/jdk/java/net/ProxySelector/LoopbackAddresses.java
--- a/test/jdk/java/net/ProxySelector/LoopbackAddresses.java
+++ b/test/jdk/java/net/ProxySelector/LoopbackAddresses.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,20 +21,24 @@
  * questions.
  */
 
 /* @test
  * @bug 4924226
- * @summary PIT: Can no launch jnlp application via 127.0.0.1 address on the web server
+ * @key intermittent
+ * @summary PIT: Can no launch jnlp application via 127.0.0.1 address on the web server.
+ *          This test might fail intermittently as it needs a server that
+ *          binds to the wildcard address.
  * @modules java.base/sun.net.www
- * @library ../../../sun/net/www/httptest/
+ * @library ../../../sun/net/www/httptest/ /test/lib
  * @build ClosedChannelList TestHttpServer HttpTransaction HttpCallback
  * @compile LoopbackAddresses.java
  * @run main/othervm LoopbackAddresses
  */
 
 import java.net.*;
 import java.io.*;
+import jdk.test.lib.net.URIBuilder;
 
 /**
  * Our default proxy selector should bypass localhost and loopback
  * addresses when selecting proxies. This is the existing behaviour.
  */
@@ -51,16 +55,22 @@
         }
     }
 
     public static void main(String[] args) {
         try {
+            InetAddress loopback = InetAddress.getLoopbackAddress();
+
+            // This server needs to bind to the wildcard address as we want it
+            // to answer both for the loopback and "localhost".
+            // Though "localhost" usually point to the loopback there is no
+            // hard guarantee.
             server = new TestHttpServer (new LoopbackAddresses(), 1, 10, 0);
             ProxyServer pserver = new ProxyServer(InetAddress.getByName("localhost"), server.getLocalPort());
             // start proxy server
             new Thread(pserver).start();
 
-            System.setProperty("http.proxyHost", "localhost");
+            System.setProperty("http.proxyHost", loopback.getHostAddress());
             System.setProperty("http.proxyPort", pserver.getPort()+"");
 
             URL url = new URL("http://localhost:"+server.getLocalPort());
 
             try {
@@ -70,11 +80,15 @@
             } catch (IOException ioex) {
                 throw new RuntimeException("direct connection should succeed :"+ioex.getMessage());
             }
 
             try {
-                url = new URL("http://127.0.0.1:"+server.getLocalPort());
+                url = URIBuilder.newBuilder()
+                      .scheme("http")
+                      .host(loopback.getHostAddress())
+                      .port(server.getLocalPort())
+                      .toURL();
                 HttpURLConnection urlc = (HttpURLConnection)url.openConnection ();
                 int respCode = urlc.getResponseCode();
                 urlc.disconnect();
             } catch (IOException ioex) {
                 throw new RuntimeException("direct connection should succeed :"+ioex.getMessage());
@@ -102,11 +116,12 @@
         private int     serverPort;
 
         public ProxyServer(InetAddress server, int port) throws IOException {
             serverInetAddr = server;
             serverPort = port;
-            ss = new ServerSocket(0);
+            ss = new ServerSocket();
+            ss.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));
         }
 
         public void run() {
             try {
                 clientSocket = ss.accept();
