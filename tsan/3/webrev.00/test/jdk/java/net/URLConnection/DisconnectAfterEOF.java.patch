diff a/test/jdk/java/net/URLConnection/DisconnectAfterEOF.java b/test/jdk/java/net/URLConnection/DisconnectAfterEOF.java
--- a/test/jdk/java/net/URLConnection/DisconnectAfterEOF.java
+++ b/test/jdk/java/net/URLConnection/DisconnectAfterEOF.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,17 +22,20 @@
  */
 
 /**
  * @test
  * @bug 4774503
+ * @library /test/lib
  * @summary Calling HttpURLConnection's disconnect method after the
  *          response has been received causes havoc with persistent
  *          connections.
  */
 import java.net.*;
 import java.io.*;
 import java.util.*;
+import jdk.test.lib.net.URIBuilder;
+import static java.net.Proxy.NO_PROXY;
 
 public class DisconnectAfterEOF {
 
     /*
      * Worker thread to service single connection - can service
@@ -211,11 +214,11 @@
             } catch (IOException ioe) { }
         }
     }
 
     static URLConnection doRequest(String uri) throws IOException {
-        URLConnection uc = (new URL(uri)).openConnection();
+        URLConnection uc = (new URL(uri)).openConnection(NO_PROXY);
         uc.setDoOutput(true);
         OutputStream out = uc.getOutputStream();
         out.write(new byte[16000]);
 
         // force the request to be sent
@@ -237,17 +240,22 @@
         return uc;
     }
 
     public static void main(String args[]) throws Exception {
         // start server
-        ServerSocket ss = new ServerSocket(0);
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        ServerSocket ss = new ServerSocket();
+        ss.bind(new InetSocketAddress(loopback, 0));
         Server svr = new Server(ss);
         svr.start();
 
-        String uri = "http://localhost:" +
-                     Integer.toString(ss.getLocalPort()) +
-                     "/foo.html";
+        String uri = URIBuilder.newBuilder()
+                     .scheme("http")
+                     .loopback()
+                     .port(ss.getLocalPort())
+                     .path("/foo.html")
+                     .build().toString();
 
         /*
          * The following is the test scenario we create here :-
          *
          * 1. We do a http request/response and read the response
