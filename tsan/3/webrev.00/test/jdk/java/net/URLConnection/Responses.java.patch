diff a/test/jdk/java/net/URLConnection/Responses.java b/test/jdk/java/net/URLConnection/Responses.java
--- a/test/jdk/java/net/URLConnection/Responses.java
+++ b/test/jdk/java/net/URLConnection/Responses.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -27,10 +27,11 @@
  * @summary Check that HttpURLConnection.getResponseCode returns -1 for
  *          malformed status-lines in the http response.
  */
 import java.net.*;
 import java.io.*;
+import static java.net.Proxy.NO_PROXY;
 
 public class Responses {
 
     /*
      * Test cases :-
@@ -54,43 +55,58 @@
      * GET /<n> HTTP/1.x results in http response with the status line
      * set to geTests()[<n>][0]  -- eg: GET /2 results in a response of
      * "HTTP/1.1 404 "
      */
     static class HttpServer implements Runnable {
-        ServerSocket ss;
+        final ServerSocket ss;
+        volatile boolean shutdown;
 
         public HttpServer() {
             try {
-                ss = new ServerSocket(0);
+                InetAddress loopback = InetAddress.getLoopbackAddress();
+                ss = new ServerSocket();
+                ss.bind(new InetSocketAddress(loopback, 0));
             } catch (IOException ioe) {
                 throw new Error("Unable to create ServerSocket: " + ioe);
             }
         }
 
         public int port() {
             return ss.getLocalPort();
         }
 
+        public String authority() {
+            InetAddress address = ss.getInetAddress();
+            String hostaddr = address.isAnyLocalAddress()
+                ? "localhost" : address.getHostAddress();
+            if (hostaddr.indexOf(':') > -1) {
+                hostaddr = "[" + hostaddr + "]";
+            }
+            return hostaddr + ":" + port();
+        }
+
         public void shutdown() throws IOException {
+            shutdown = true;
             ss.close();
         }
 
         public void run() {
             Object[][] tests = getTests();
 
             try {
-                for (;;) {
+                while(!shutdown) {
                     Socket s = ss.accept();
 
                     BufferedReader in = new BufferedReader(
                                               new InputStreamReader(
                                                 s.getInputStream()));
                     String req = in.readLine();
                     int pos1 = req.indexOf(' ');
                     int pos2 = req.indexOf(' ', pos1+1);
 
                     int i = Integer.parseInt(req.substring(pos1+2, pos2));
+                    System.out.println("Server replying to >" + tests[i][0] + "<");
 
                     PrintStream out = new PrintStream(
                                         new BufferedOutputStream(
                                           s.getOutputStream() ));
 
@@ -103,10 +119,13 @@
 
                     s.shutdownOutput();
                     s.close();
                 }
             } catch (Exception e) {
+                if (!shutdown) {
+                    e.printStackTrace();
+                }
             }
         }
     }
 
 
@@ -114,11 +133,12 @@
 
         /* start the http server */
         HttpServer svr = new HttpServer();
         (new Thread(svr)).start();
 
-        int port = svr.port();
+        String authority = svr.authority();
+        System.out.println("Server listening on: " + authority);
 
         /*
          * Iterate through each test case and check that getResponseCode
          * returns the expected result.
          */
@@ -127,12 +147,12 @@
         for (int i=0; i<tests.length; i++) {
 
             System.out.println("******************");
             System.out.println("Test with response: >" + tests[i][0] + "<");
 
-            URL url = new URL("http://localhost:" + port + "/" + i);
-            HttpURLConnection http = (HttpURLConnection)url.openConnection();
+            URL url = new URL("http://" + authority + "/" + i);
+            HttpURLConnection http = (HttpURLConnection)url.openConnection(NO_PROXY);
 
             try {
 
                 // test getResponseCode
                 //
@@ -155,10 +175,11 @@
                 if (!actualPhrase.equals(expectedPhrase)) {
                     System.out.println("getResponseMessage returned: " +
                         actualPhrase + ", expected: " + expectedPhrase);
                 }
             } catch (IOException e) {
+                System.err.println("Test failed for >" + tests[i][0] + "<: " + e);
                 e.printStackTrace();
                 failures++;
             }
         }
 
