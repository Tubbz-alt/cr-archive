diff a/test/jdk/java/net/URLConnection/ZeroContentLength.java b/test/jdk/java/net/URLConnection/ZeroContentLength.java
--- a/test/jdk/java/net/URLConnection/ZeroContentLength.java
+++ b/test/jdk/java/net/URLConnection/ZeroContentLength.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2010, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -28,13 +28,18 @@
  * @summary Check that a 304 "Not-Modified" response from a server
  *          doesn't cause http client to close a keep-alive
  *          connection.
  *          Check that a content-length of 0 results in an
  *          empty input stream.
+ * @library /test/lib
+ * @run main ZeroContentLength
+ * @run main/othervm -Djava.net.preferIPv6Addresses=true ZeroContentLength
  */
+
 import java.net.*;
 import java.io.*;
+import jdk.test.lib.net.URIBuilder;
 
 public class ZeroContentLength {
 
     /*
      * Is debugging enabled - start with -d to enable.
@@ -229,11 +234,11 @@
      * content-length header matches the total received on
      * the input stream.
      */
     int doRequest(String uri) throws Exception {
         URL url = new URL(uri);
-        HttpURLConnection http = (HttpURLConnection)url.openConnection();
+        HttpURLConnection http = (HttpURLConnection)url.openConnection(Proxy.NO_PROXY);
 
         int cl = http.getContentLength();
 
         InputStream in = http.getInputStream();
         byte b[] = new byte[100];
@@ -262,17 +267,21 @@
      * stream.
      */
     ZeroContentLength() throws Exception {
 
         /* start the server */
-        ServerSocket ss = new ServerSocket(0);
+        ServerSocket ss = new ServerSocket();
+        ss.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));
         Server svr = new Server(ss);
         svr.start();
 
-        String uri = "http://localhost:" +
-                     Integer.toString(ss.getLocalPort()) +
-                     "/foo.html";
+        String uri = URIBuilder.newBuilder()
+                     .scheme("http")
+                     .host(ss.getInetAddress())
+                     .port(ss.getLocalPort())
+                     .path("/foo.html")
+                     .build().toString();
 
         int expectedTotal = 0;
         int actualTotal = 0;
 
         System.out.println("**********************************");
