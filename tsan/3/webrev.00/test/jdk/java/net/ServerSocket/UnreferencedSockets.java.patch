diff a/test/jdk/java/net/ServerSocket/UnreferencedSockets.java b/test/jdk/java/net/ServerSocket/UnreferencedSockets.java
--- a/test/jdk/java/net/ServerSocket/UnreferencedSockets.java
+++ b/test/jdk/java/net/ServerSocket/UnreferencedSockets.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,13 +21,15 @@
  * questions.
  */
 
 /**
  * @test
+ * @library /test/lib
  * @modules java.management java.base/java.io:+open java.base/java.net:+open
  * @run main/othervm UnreferencedSockets
  * @run main/othervm -Djava.net.preferIPv4Stack=true UnreferencedSockets
+ * @run main/othervm -Djdk.net.usePlainSocketImpl UnreferencedSockets
  * @summary Check that unreferenced sockets are closed
  */
 
 import java.io.FileDescriptor;
 import java.io.InputStream;
@@ -36,10 +38,11 @@
 import java.lang.management.OperatingSystemMXBean;
 import java.lang.ref.ReferenceQueue;
 import java.lang.ref.WeakReference;
 import java.lang.reflect.Field;
 import java.io.IOException;
+import java.net.InetAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.SocketImpl;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -49,10 +52,12 @@
 import java.util.Optional;
 import java.util.concurrent.TimeUnit;
 
 import com.sun.management.UnixOperatingSystemMXBean;
 
+import jdk.test.lib.net.IPSupport;
+
 public class UnreferencedSockets {
 
     /**
      * The set of sockets we have to check up on.
      */
@@ -66,21 +71,20 @@
     // Server to echo a stream
     static class Server implements Runnable {
 
         ServerSocket ss;
 
-        Server() throws IOException {
-            ss = new ServerSocket(0);
+        Server(InetAddress address) throws IOException {
+            ss = new ServerSocket(0, 0, address);
             pendingSockets.add(new NamedWeak(ss, pendingQueue, "serverSocket"));
             extractRefs(ss, "serverSocket");
         }
 
         public int localPort() {
             return ss.getLocalPort();
         }
 
-
         public void run() {
             try {
                 Socket s = ss.accept();
                 pendingSockets.add(new NamedWeak(s, pendingQueue, "acceptedSocket"));
                 extractRefs(s, "acceptedSocket");
@@ -105,26 +109,27 @@
             }
         }
     }
 
     public static void main(String args[]) throws Exception {
-
+        IPSupport.throwSkippedExceptionIfNonOperational();
+        InetAddress lba = InetAddress.getLoopbackAddress();
         // Create and close a ServerSocket to warm up the FD count for side effects.
-        try (ServerSocket s = new ServerSocket(0)) {
+        try (ServerSocket s = new ServerSocket(0, 0, lba)) {
             // no-op; close immediately
             s.getLocalPort();   // no-op
         }
 
         long fdCount0 = getFdCount();
         listProcFD();
 
         // start a server
-        Server svr = new Server();
+        Server svr = new Server(lba);
         Thread thr = new Thread(svr);
         thr.start();
 
-        Socket s = new Socket("localhost", svr.localPort());
+        Socket s = new Socket(lba, svr.localPort());
         pendingSockets.add(new NamedWeak(s, pendingQueue, "clientSocket"));
         extractRefs(s, "clientSocket");
 
         OutputStream out = s.getOutputStream();
         out.write('x');
