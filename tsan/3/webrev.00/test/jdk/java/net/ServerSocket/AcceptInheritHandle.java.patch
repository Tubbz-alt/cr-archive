diff a/test/jdk/java/net/ServerSocket/AcceptInheritHandle.java b/test/jdk/java/net/ServerSocket/AcceptInheritHandle.java
--- a/test/jdk/java/net/ServerSocket/AcceptInheritHandle.java
+++ b/test/jdk/java/net/ServerSocket/AcceptInheritHandle.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,29 +22,32 @@
  */
 
 /*
  * @test
  * @bug 8067105
+ * @library /test/lib
  * @summary Socket returned by ServerSocket.accept() is inherited by child process on Windows
  * @author Chris Hegarty
  */
 
 import java.io.*;
 import java.net.*;
 import java.nio.channels.ServerSocketChannel;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Supplier;
+import jdk.test.lib.net.IPSupport;
 
 public class AcceptInheritHandle {
 
     enum ServerSocketProducer {
         JAVA_NET(() -> {
             try {
-                return new ServerSocket(); }
-            catch(IOException x) {
+                return new ServerSocket();
+            } catch(IOException x) {
                 throw new UncheckedIOException(x);
             }
         }),
         NIO_CHANNELS(() -> {
             try {
@@ -78,23 +81,25 @@
         testNioServerSocketChannel();
     }
 
     static void testJavaNetServerSocket() throws Exception {
         test(ServerSocketProducer.JAVA_NET);
-        test(ServerSocketProducer.JAVA_NET, "-Djava.net.preferIPv4Stack=true");
+        if (IPSupport.hasIPv4()) {
+            test(ServerSocketProducer.JAVA_NET, "-Djava.net.preferIPv4Stack=true");
+        }
     }
     static void testNioServerSocketChannel() throws Exception {
         test(ServerSocketProducer.NIO_CHANNELS);
     }
 
-    static void test(ServerSocketProducer ssp, String... sysProps) throws Exception {
+    static void test(ServerSocketProducer ssp, String... jvmArgs) throws Exception {
         System.out.println("\nStarting test for " + ssp.name());
 
         List<String> commands = new ArrayList<>();
         commands.add(JAVA);
-        for (String prop : sysProps)
-            commands.add(prop);
+        for (String arg : jvmArgs)
+            commands.add(arg);
         commands.add("-cp");
         commands.add(CLASSPATH);
         commands.add("AcceptInheritHandle");
         commands.add(ssp.name());
 
@@ -105,11 +110,18 @@
         DataInputStream dis = new DataInputStream(serverProcess.getInputStream());
 
         int port = dis.readInt();
         System.out.println("Server process listening on " + port + ", connecting...");
 
-        Socket socket = new Socket("localhost", port);
+        String address;
+        if (Arrays.stream(jvmArgs).anyMatch("-Djava.net.preferIPv4Stack=true"::equals)) {
+            address = "127.0.0.1";
+        } else {
+            InetAddress loopback = InetAddress.getLoopbackAddress();
+            address = loopback.getHostAddress();
+        }
+        Socket socket = new Socket(address, port);
         String s = dis.readUTF();
         System.out.println("Server process said " + s);
 
         serverProcess.destroy();
         serverProcess.waitFor(30, TimeUnit.SECONDS);
@@ -126,11 +138,12 @@
         }
     }
 
     static void server(ServerSocketProducer producer) throws Exception {
         try (ServerSocket ss = producer.supplier().get()) {
-            ss.bind(new InetSocketAddress(0));
+            InetAddress loopback = InetAddress.getLoopbackAddress();
+            ss.bind(new InetSocketAddress(loopback, 0));
             int port = ss.getLocalPort();
             DataOutputStream dos = new DataOutputStream(System.out);
             dos.writeInt(port);
             dos.flush();
 
