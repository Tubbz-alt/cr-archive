diff a/test/jdk/java/net/Socket/asyncClose/DatagramSocket_receive.java b/test/jdk/java/net/Socket/asyncClose/DatagramSocket_receive.java
--- a/test/jdk/java/net/Socket/asyncClose/DatagramSocket_receive.java
+++ b/test/jdk/java/net/Socket/asyncClose/DatagramSocket_receive.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -25,15 +25,17 @@
  * Tests that a thread blocked in DatagramSocket.receive
  * throws a SocketException if the socket is asynchronously closed.
  */
 import java.net.*;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 public class DatagramSocket_receive extends AsyncCloseTest implements Runnable {
     private final DatagramSocket s;
     private final int timeout;
     private final CountDownLatch latch;
+    private final AtomicBoolean readyToClose = new AtomicBoolean(false);
 
     public DatagramSocket_receive() throws SocketException {
         this(0);
     }
 
@@ -57,12 +59,17 @@
             DatagramPacket p  = new DatagramPacket(b, b.length);
             if (timeout > 0) {
                 s.setSoTimeout(timeout);
             }
             latch.countDown();
-            s.receive(p);
-            failed("DatagramSocket.receive(DatagramPacket) returned unexpectly!!" + " - " + p.getAddress());
+            do {
+                // if readyToClose is still false it means some other
+                // process on the system attempted to send datagram packet:
+                // just ignore it, and go back to accept again.
+                s.receive(p);
+            } while (!readyToClose.get());
+            failed("DatagramSocket.receive(DatagramPacket) returned unexpectedly!!" + " - " + p.getAddress());
         } catch (SocketException se) {
             if (latch.getCount() != 1) {
                 closed();
             }
         } catch (Exception e) {
@@ -78,10 +85,11 @@
         try {
             Thread thr = new Thread(this);
             thr.start();
             latch.await();
             Thread.sleep(5000); //sleep, so receive(DatagramPacket) can block
+            readyToClose.set(true);
             s.close();
             thr.join();
 
             if (isClosed()) {
                 return passed();
