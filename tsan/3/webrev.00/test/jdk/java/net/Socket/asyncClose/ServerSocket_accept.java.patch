diff a/test/jdk/java/net/Socket/asyncClose/ServerSocket_accept.java b/test/jdk/java/net/Socket/asyncClose/ServerSocket_accept.java
--- a/test/jdk/java/net/Socket/asyncClose/ServerSocket_accept.java
+++ b/test/jdk/java/net/Socket/asyncClose/ServerSocket_accept.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -24,17 +24,22 @@
 /*
  * Tests that a thread blocked in ServerSocket.accept
  * throws a SocketException if the socket is asynchronously closed.
  */
 import java.io.IOException;
-import java.net.*;
+import java.net.InetAddress;
+import java.net.ServerSocket;
+import java.net.Socket;
+import java.net.SocketException;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 public class ServerSocket_accept extends AsyncCloseTest implements Runnable {
     private final ServerSocket ss;
     private final int timeout;
     private final CountDownLatch latch;
+    private final AtomicBoolean readyToClose = new AtomicBoolean(false);
 
     public ServerSocket_accept() throws IOException {
        this(0);
     }
 
@@ -53,12 +58,18 @@
     }
 
     public void run() {
         try {
             latch.countDown();
-            Socket s = ss.accept();
-            failed("ServerSocket.accept() returned unexpectly!!" + " - " + s);
+            Socket s;
+            // if readyToClose is still false it means some other
+            // process on the system attempted to connect: just
+            // ignore it, and go back to accept again.
+            do {
+                s = ss.accept();
+            } while (!readyToClose.get());
+            failed("ServerSocket.accept() returned unexpectedly!!" + " - " + s);
         } catch (SocketException se) {
             closed();
         } catch (Exception e) {
             failed(e.getMessage());
         }
@@ -68,10 +79,11 @@
         try {
             Thread thr = new Thread(this);
             thr.start();
             latch.await();
             Thread.sleep(5000); //sleep, so ServerSocket.accept() can block
+            readyToClose.set(true);
             ss.close();
             thr.join();
 
             if (isClosed()) {
                 return passed();
