diff a/test/jdk/java/net/Socket/asyncClose/AsyncClose.java b/test/jdk/java/net/Socket/asyncClose/AsyncClose.java
--- a/test/jdk/java/net/Socket/asyncClose/AsyncClose.java
+++ b/test/jdk/java/net/Socket/asyncClose/AsyncClose.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,24 +22,28 @@
  */
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
+import jdk.test.lib.net.IPSupport;
 import static java.util.concurrent.CompletableFuture.*;
 
 /*
  * @test
  * @bug 4344135
+ * @library /test/lib
  * @summary Check that {Socket,ServerSocket,DatagramSocket}.close will
  *          cause any thread blocked on the socket to throw a SocketException.
  * @run main AsyncClose
  * @run main/othervm -Djava.net.preferIPv4Stack=true AsyncClose
+ * @run main/othervm -Djdk.net.usePlainSocketImpl AsyncClose
  */
 
 public class AsyncClose {
 
     public static void main(String args[]) throws Exception {
+        IPSupport.throwSkippedExceptionIfNonOperational();
 
         AsyncCloseTest tests[] = {
             new Socket_getInputStream_read(),
             new Socket_getInputStream_read(20000),
             new Socket_getOutputStream_write(),
