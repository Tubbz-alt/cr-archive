diff a/test/jdk/java/net/Socket/ProxyCons.java b/test/jdk/java/net/Socket/ProxyCons.java
--- a/test/jdk/java/net/Socket/ProxyCons.java
+++ b/test/jdk/java/net/Socket/ProxyCons.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,16 +22,19 @@
  */
 
 /*
  * @test
  * @bug 4097826
+ * @library /test/lib
  * @summary SOCKS support inadequate
  * @run main/timeout=40/othervm -DsocksProxyHost=nonexistant ProxyCons
  * @run main/timeout=40/othervm -DsocksProxyHost=nonexistant -Djava.net.preferIPv4Stack=true ProxyCons
  */
 
 import java.net.*;
+import jdk.test.lib.net.IPSupport;
+
 public class ProxyCons {
     class Server extends Thread {
         ServerSocket server;
         Server (ServerSocket server) {
             super ();
@@ -59,25 +62,29 @@
 
     public ProxyCons() {
     }
 
     void test() throws Exception {
-        ServerSocket ss = new ServerSocket(0);
+        InetAddress localHost = InetAddress.getLocalHost();
+        ServerSocket ss = new ServerSocket();
+        ss.bind(new InetSocketAddress(localHost, 0));
         try {
             Server s = new Server(ss);
             s.start();
             Socket sock = new Socket(Proxy.NO_PROXY);
-            sock.connect(new InetSocketAddress("localhost", ss.getLocalPort()));
+            sock.connect(new InetSocketAddress(localHost, ss.getLocalPort()));
             s.done();
             sock.close();
         } catch (java.io.IOException e) {
             throw new RuntimeException(e);
         } finally {
             ss.close();
         }
     }
 
     public static void main(String[] args) throws Exception {
+        IPSupport.throwSkippedExceptionIfNonOperational();
+
         ProxyCons c = new ProxyCons();
         c.test();
     }
 }
