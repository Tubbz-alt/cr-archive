diff a/test/jdk/java/net/Socket/asyncClose/BrokenPipe.java b/test/jdk/java/net/Socket/asyncClose/BrokenPipe.java
--- a/test/jdk/java/net/Socket/asyncClose/BrokenPipe.java
+++ b/test/jdk/java/net/Socket/asyncClose/BrokenPipe.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,17 +22,19 @@
  */
 
 /*
  * @test
  * @bug 4511404
+ * @library /test/lib
  * @summary Check that a broken pipe error doesn't throw an exception
  *          indicating the socket is closed.
  * @run main BrokenPipe
  * @run main/othervm -Djava.net.preferIPv4Stack=true BrokenPipe
  */
 import java.io.*;
 import java.net.*;
+import jdk.test.lib.net.IPSupport;
 
 public class BrokenPipe {
 
     private static class Closer implements Runnable {
         private final Socket s;
@@ -51,11 +53,13 @@
             }
         }
     }
 
     public static void main(String[] args) throws Exception {
-        ServerSocket ss = new ServerSocket(0);
+        IPSupport.throwSkippedExceptionIfNonOperational();
+
+        ServerSocket ss = new ServerSocket(0, 0, InetAddress.getLocalHost());
         Socket client = new Socket(InetAddress.getLocalHost(),
                                    ss.getLocalPort());
         Socket server = ss.accept();
         ss.close();
         new Thread(new Closer(server)).start();
