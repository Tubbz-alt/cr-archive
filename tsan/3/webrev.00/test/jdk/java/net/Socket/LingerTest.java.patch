diff a/test/jdk/java/net/Socket/LingerTest.java b/test/jdk/java/net/Socket/LingerTest.java
--- a/test/jdk/java/net/Socket/LingerTest.java
+++ b/test/jdk/java/net/Socket/LingerTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,17 +22,19 @@
  */
 
 /**
  * @test
  * @bug 4796166
+ * @library /test/lib
  * @summary Linger interval delays usage of released file descriptor
  * @run main LingerTest
  * @run main/othervm -Djava.net.preferIPv4Stack=true LingerTest
  */
 
 import java.net.*;
 import java.io.*;
+import jdk.test.lib.net.IPSupport;
 
 public class LingerTest {
 
     static class Sender implements Runnable {
         Socket s;
@@ -69,25 +71,27 @@
             System.out.println ("Closer ends");
         }
     }
 
     static class Other implements Runnable {
-        int port;
-        long delay;
+        final InetAddress address;
+        final int port;
+        final long delay;
         boolean connected = false;
 
-        public Other(int port, long delay) {
+        public Other(InetAddress address, int port, long delay) {
+            this.address = address;
             this.port = port;
             this.delay = delay;
         }
 
         public void run() {
             System.out.println ("Other starts: sleep " + delay);
             try {
                 Thread.sleep(delay);
                 System.out.println ("Other opening socket");
-                Socket s = new Socket("localhost", port);
+                Socket s = new Socket(address, port);
                 synchronized (this) {
                     connected = true;
                 }
                 s.close();
             }
@@ -101,13 +105,16 @@
             return connected;
         }
     }
 
     public static void main(String args[]) throws Exception {
-        ServerSocket ss = new ServerSocket(0);
+        IPSupport.throwSkippedExceptionIfNonOperational();
 
-        Socket s1 = new Socket("localhost", ss.getLocalPort());
+        InetAddress loopback = InetAddress.getLoopbackAddress();
+        ServerSocket ss = new ServerSocket(0, 50, loopback);
+
+        Socket s1 = new Socket(loopback, ss.getLocalPort());
         Socket s2 = ss.accept();
 
         // setup conditions for untransmitted data and lengthy
         // linger interval
         s1.setSendBufferSize(128*1024);
@@ -117,11 +124,11 @@
         // start sender
         Thread senderThread = new Thread(new Sender(s1));
         senderThread.start();
 
         // other thread that will connect after 5 seconds.
-        Other other = new Other(ss.getLocalPort(), 5000);
+        Other other = new Other(loopback, ss.getLocalPort(), 5000);
         Thread otherThread = new Thread(other);
         otherThread.start();
 
         // give sender time to queue the data
         System.out.println ("Main sleep 1000");
