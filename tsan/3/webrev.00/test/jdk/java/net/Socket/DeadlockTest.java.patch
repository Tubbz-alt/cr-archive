diff a/test/jdk/java/net/Socket/DeadlockTest.java b/test/jdk/java/net/Socket/DeadlockTest.java
--- a/test/jdk/java/net/Socket/DeadlockTest.java
+++ b/test/jdk/java/net/Socket/DeadlockTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,22 +22,26 @@
  */
 
 /*
  * @test
  * @bug 4176738
+ * @library /test/lib
  * @summary Make sure a deadlock situation
  *     would not occur
  * @run main DeadlockTest
  * @run main/othervm -Djava.net.preferIPv4Stack=true DeadlockTest
  */
 
 import java.net.*;
 import java.io.*;
+import jdk.test.lib.net.IPSupport;
 
 public class DeadlockTest {
     public static void main(String [] argv) throws Exception {
-        ServerSocket ss = new ServerSocket(0);
+        IPSupport.throwSkippedExceptionIfNonOperational();
+
+        ServerSocket ss = new ServerSocket(0, 0, InetAddress.getLoopbackAddress());
         Socket clientSocket = new Socket();
 
         try {
             // Start the server thread
             Thread s1 = new Thread(new ServerThread(ss));
@@ -148,11 +152,11 @@
 
     public ClientThread(Socket sock, int serverPort) throws Exception {
         try {
             System.out.println("About to connect the client socket");
             this.sock = sock;
-            this.sock.connect(new InetSocketAddress("localhost", serverPort));
+            this.sock.connect(new InetSocketAddress(InetAddress.getLoopbackAddress(), serverPort));
             System.out.println("connected");
 
             out = new ObjectOutputStream(sock.getOutputStream());
             out.flush();
         } catch (Throwable e) {
