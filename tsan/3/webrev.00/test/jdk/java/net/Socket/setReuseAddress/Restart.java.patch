diff a/test/jdk/java/net/Socket/setReuseAddress/Restart.java b/test/jdk/java/net/Socket/setReuseAddress/Restart.java
--- a/test/jdk/java/net/Socket/setReuseAddress/Restart.java
+++ b/test/jdk/java/net/Socket/setReuseAddress/Restart.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,10 +22,11 @@
  */
 
 /*
  * @test
  * @bug 4476378
+ * @library /test/lib
  * @summary Check that SO_REUSEADDR allows a server to restart
  *          after a crash.
  * @run main Restart
  * @run main/othervm -Dsun.net.useExclusiveBind Restart
  * @run main/othervm -Dsun.net.useExclusiveBind=true Restart
@@ -34,10 +35,11 @@
  *                   -Djava.net.preferIPv4Stack=true Restart
  * @run main/othervm -Dsun.net.useExclusiveBind=true
  *                   -Djava.net.preferIPv4Stack=true Restart
  */
 import java.net.*;
+import jdk.test.lib.net.IPSupport;
 
 public class Restart {
 
     /*
      * Test that a server can bind to the same port after
@@ -45,24 +47,27 @@
      * TIME_WAIT state we should be able to re-bind if
      * SO_REUSEADDR is enabled.
      */
 
     public static void main(String args[]) throws Exception {
-        ServerSocket ss = new ServerSocket(0);
+        IPSupport.throwSkippedExceptionIfNonOperational();
+
+        InetAddress localHost = InetAddress.getLocalHost();
+        ServerSocket ss = new ServerSocket(0, 0, localHost);
         Socket s1 = null, s2 = null;
         try {
             int port = ss.getLocalPort();
 
-            s1 = new Socket(InetAddress.getLocalHost(), port);
+            s1 = new Socket(localHost, port);
             s2 = ss.accept();
 
             // close server socket and the accepted connection
             ss.close();
             s2.close();
 
             ss = new ServerSocket();
-            ss.bind( new InetSocketAddress(port) );
+            ss.bind( new InetSocketAddress(localHost, port) );
             ss.close();
 
             // close the client socket
             s1.close();
         } catch (BindException be) {
