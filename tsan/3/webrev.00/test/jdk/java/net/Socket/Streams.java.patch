diff a/test/jdk/java/net/Socket/Streams.java b/test/jdk/java/net/Socket/Streams.java
--- a/test/jdk/java/net/Socket/Streams.java
+++ b/test/jdk/java/net/Socket/Streams.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -27,10 +27,12 @@
  * @summary Spurious NPE from Socket.getIn/OutputStream
  */
 
 import java.io.IOException;
 import java.lang.reflect.Constructor;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.util.concurrent.Phaser;
 
 // Racey test, will not always fail, but if it does then there is a problem.
@@ -40,11 +42,13 @@
     static volatile boolean failed;
     static final Phaser startingGate = new Phaser(NUM_THREADS + 1);
 
     public static void main(String[] args) throws Exception {
 
-        try (ServerSocket ss = new ServerSocket(0)) {
+        try (ServerSocket ss = new ServerSocket()) {
+            InetAddress loopback = InetAddress.getLoopbackAddress();
+            ss.bind(new InetSocketAddress(loopback, 0));
             runTest(OutputStreamGetter.class, ss);
             runTest(InputStreamGetter.class, ss);
         }
 
         if (failed)
@@ -53,13 +57,16 @@
 
     static void runTest(Class<? extends StreamGetter> klass, ServerSocket ss)
         throws Exception
     {
         final int port = ss.getLocalPort();
+        final InetAddress address = ss.getInetAddress();
         Socket[] sockets = new Socket[NUM_THREADS];
         for (int i=0; i<NUM_THREADS; i++) {
-            sockets[i] = new Socket("localhost", port);
+            sockets[i] = address.isAnyLocalAddress()
+                         ? new Socket("localhost", port)
+                         : new Socket(address, port);
             try (Socket socket = ss.accept()) {}
         }
 
         Constructor<? extends StreamGetter> ctr = klass.getConstructor(Socket.class);
 
