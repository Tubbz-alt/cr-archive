diff a/test/jdk/java/net/Socket/asyncClose/Race.java b/test/jdk/java/net/Socket/asyncClose/Race.java
--- a/test/jdk/java/net/Socket/asyncClose/Race.java
+++ b/test/jdk/java/net/Socket/asyncClose/Race.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -26,10 +26,12 @@
  * @bug 8006395 8012244
  * @summary Tests racing code that reads and closes a Socket
  */
 
 import java.io.InputStream;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.ConnectException;
 import java.net.SocketException;
 import java.util.concurrent.Phaser;
@@ -38,16 +40,18 @@
 
 public class Race {
     final static int THREADS = 100;
 
     public static void main(String[] args) throws Exception {
-        try (ServerSocket ss = new ServerSocket(0)) {
+        try (ServerSocket ss = new ServerSocket()) {
+            InetAddress loopback = InetAddress.getLoopbackAddress();
+            ss.bind(new InetSocketAddress(loopback, 0));
             final int port = ss.getLocalPort();
             final Phaser phaser = new Phaser(THREADS + 1);
             for (int i=0; i<100; i++) {
                 try {
-                    final Socket s = new Socket("localhost", port);
+                    final Socket s = new Socket(loopback, port);
                     s.setSoLinger(false, 0);
                     try (Socket sa = ss.accept()) {
                         sa.setSoLinger(false, 0);
                         final InputStream is = s.getInputStream();
                         Thread[] threads = new Thread[THREADS];
