diff a/test/jdk/java/text/Bidi/Bug7051769.java b/test/jdk/java/text/Bidi/Bug7051769.java
--- a/test/jdk/java/text/Bidi/Bug7051769.java
+++ b/test/jdk/java/text/Bidi/Bug7051769.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /*
  * @test
- * @bug 7051769 8038092
+ * @bug 7051769 8038092 8174270
  * @summary verify that Bidi.toString() returns the corect result.
  *     The second run is intended to test lazy SharedSectets init for 8038092
  * @modules java.desktop
  * @run main Bug7051769
  * @run main/othervm -DpreloadBidi=true Bug7051769
@@ -38,11 +38,11 @@
 
     static {
         if (System.getProperty("preloadBidi", "").equals("true")) {
             // Make sure the SharedSecret is lazily initialized correctly
             try {
-                Class.forName("sun.text.bidi.BidiBase");
+                Class.forName("jdk.internal.icu.text.BidiBase");
                 System.out.println("BidiBase class has been pre-loaded.");
             } catch (ClassNotFoundException e) {
                 System.out.println("BidiBase class could not be pre-loaded.");
             }
         }
@@ -66,11 +66,11 @@
                    NumericShaper.getContextualShaper(NumericShaper.ARABIC));
         attrNS.put(TextAttribute.RUN_DIRECTION,
                    TextAttribute.RUN_DIRECTION_RTL);
 
         String text = "\u0623\u0643\u062a\u0648\u0628\u0631 10";
-        String expected = "sun.text.bidi.BidiBase[dir: 2 baselevel: 1 length: 9 runs: [1 1 1 1 1 1 1 2 2] text: [0x623 0x643 0x62a 0x648 0x628 0x631 0x20 0x661 0x660]]";
+        String expected = "jdk.internal.icu.text.BidiBase[dir: 2 baselevel: 1 length: 9 runs: [1 1 1 1 1 1 1 2 2] text: [0x623 0x643 0x62a 0x648 0x628 0x631 0x20 0x661 0x660]]";
 
         AttributedString as = new AttributedString(text, attrNS);
         AttributedCharacterIterator itr = as.getIterator();
         itr.last();
         itr.next();
