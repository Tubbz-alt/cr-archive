diff a/test/jdk/java/lang/module/customfs/ModulesInCustomFileSystem.java b/test/jdk/java/lang/module/customfs/ModulesInCustomFileSystem.java
--- a/test/jdk/java/lang/module/customfs/ModulesInCustomFileSystem.java
+++ b/test/jdk/java/lang/module/customfs/ModulesInCustomFileSystem.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -52,46 +52,45 @@
 @Test
 public class ModulesInCustomFileSystem {
     private static final Path HERE = Paths.get("");
 
     /**
-     * Test exploded modules in a JAR file system.
+     * Test exploded modules in a Zip file system.
      */
-    public void testExplodedModulesInJarFileSystem() throws Exception {
+    public void testExplodedModulesInZipFileSystem() throws Exception {
         Path m1 = findModuleDirectory("m1");
         Path m2 = findModuleDirectory("m2");
         Path mlib = m1.getParent();
         assertEquals(mlib, m2.getParent());
 
         // create JAR file containing m1/** and m2/**
         Path jar = Files.createTempDirectory(HERE, "mlib").resolve("modules.jar");
         JarUtils.createJarFile(jar, mlib);
-        testJarFileSystem(jar);
+        testZipFileSystem(jar);
     }
 
     /**
-     * Test modular JARs in a JAR file system
+     * Test modular JARs in a Zip file system.
      */
-    public void testModularJARsInJarFileSystem() throws Exception {
+    public void testModularJARsInZipFileSystem() throws Exception {
         Path m1 = findModuleDirectory("m1");
         Path m2 = findModuleDirectory("m2");
         Path contents = Files.createTempDirectory(HERE, "contents");
         JarUtils.createJarFile(contents.resolve("m1.jar"), m1);
         JarUtils.createJarFile(contents.resolve("m2.jar"), m2);
 
         // create JAR file containing m1.jar and m2.jar
         Path jar = Files.createTempDirectory(HERE, "mlib").resolve("modules.jar");
         JarUtils.createJarFile(jar, contents);
-        testJarFileSystem(jar);
+        testZipFileSystem(jar);
     }
 
     /**
      * Opens a JAR file as a file system
      */
-    private void testJarFileSystem(Path jar) throws Exception {
-        ClassLoader scl = ClassLoader.getSystemClassLoader();
-        try (FileSystem fs = FileSystems.newFileSystem(jar, scl)) {
+    private void testZipFileSystem(Path zip) throws Exception {
+        try (FileSystem fs = FileSystems.newFileSystem(zip)) {
             // ModuleFinder to find modules in top-level directory
             Path top = fs.getPath("/");
             ModuleFinder finder = ModuleFinder.of(top);
 
             // list the modules
