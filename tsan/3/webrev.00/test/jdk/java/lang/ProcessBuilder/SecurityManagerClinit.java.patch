diff a/test/jdk/java/lang/ProcessBuilder/SecurityManagerClinit.java b/test/jdk/java/lang/ProcessBuilder/SecurityManagerClinit.java
--- a/test/jdk/java/lang/ProcessBuilder/SecurityManagerClinit.java
+++ b/test/jdk/java/lang/ProcessBuilder/SecurityManagerClinit.java
@@ -1,7 +1,8 @@
 /*
  * Copyright 2010 Google Inc.  All Rights Reserved.
+ * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -33,31 +34,33 @@
 
 import java.io.*;
 import java.security.*;
 
 public class SecurityManagerClinit {
-    private static class Policy extends java.security.Policy {
+    private static class SimplePolicy extends Policy {
+        static final Policy DEFAULT_POLICY = Policy.getPolicy();
+
         private Permissions perms;
 
-        public Policy(Permission... permissions) {
+        public SimplePolicy(Permission... permissions) {
             perms = new Permissions();
             for (Permission permission : permissions)
                 perms.add(permission);
         }
 
         public boolean implies(ProtectionDomain pd, Permission p) {
-            return perms.implies(p);
+            return perms.implies(p) || DEFAULT_POLICY.implies(pd, p);
         }
     }
 
     public static void main(String[] args) throws Throwable {
         String javaExe =
             System.getProperty("java.home") +
             File.separator + "bin" + File.separator + "java";
 
-        final Policy policy =
-            new Policy
+        final SimplePolicy policy =
+            new SimplePolicy
             (new FilePermission("<<ALL FILES>>", "execute"),
              new RuntimePermission("setSecurityManager"));
         Policy.setPolicy(policy);
 
         System.setSecurityManager(new SecurityManager());
