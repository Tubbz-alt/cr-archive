diff a/test/jdk/java/lang/ProcessBuilder/Basic.java b/test/jdk/java/lang/ProcessBuilder/Basic.java
--- a/test/jdk/java/lang/ProcessBuilder/Basic.java
+++ b/test/jdk/java/lang/ProcessBuilder/Basic.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -25,11 +25,11 @@
  * @test
  * @bug 4199068 4738465 4937983 4930681 4926230 4931433 4932663 4986689
  *      5026830 5023243 5070673 4052517 4811767 6192449 6397034 6413313
  *      6464154 6523983 6206031 4960438 6631352 6631966 6850957 6850958
  *      4947220 7018606 7034570 4244896 5049299 8003488 8054494 8058464
- *      8067796
+ *      8067796 8224905
  * @key intermittent
  * @summary Basic tests for Process and Environment Variable code
  * @modules java.base/java.lang:open
  * @run main/othervm/timeout=300 Basic
  * @run main/othervm/timeout=300 -Djdk.lang.Process.launchMechanism=fork Basic
@@ -2109,10 +2109,23 @@
                             switch (action & 0x2) {
                                 case 0: r = s.read(); break;
                                 case 2: r = s.read(bytes); break;
                                 default: throw new Error();
                             }
+                            if (r >= 0) {
+                                // The child sent unexpected output; print it to diagnose
+                                System.out.println("Unexpected child output:");
+                                if ((action & 0x2) == 0) {
+                                    System.out.write(r);    // Single character
+
+                                } else {
+                                    System.out.write(bytes, 0, r);
+                                }
+                                for (int c = s.read(); c >= 0; c = s.read())
+                                    System.out.write(c);
+                                System.out.println("\nEND Child output.");
+                            }
                             equal(-1, r);
                         } catch (IOException ioe) {
                             if (!ioe.getMessage().equals("Stream closed")) {
                                 // BufferedInputStream may throw IOE("Stream closed").
                                 unexpected(ioe);
@@ -2185,12 +2198,14 @@
                         try { stdout.read(); }
                         catch (IOException e) {
                             // Check that reader failed because stream was
                             // asynchronously closed.
                             // e.printStackTrace();
+                            String msg = e.getMessage();
                             if (EnglishUnix.is() &&
-                                ! (e.getMessage().matches(".*Bad file.*")))
+                                ! (msg.matches(".*Bad file.*") ||
+                                        msg.matches(".*Stream closed.*")))
                                 unexpected(e);
                         }
                         catch (Throwable t) { unexpected(t); }}};
                 reader.setDaemon(true);
                 reader.start();
@@ -2598,10 +2613,12 @@
 
     //----------------------------------------------------------------
     // A Policy class designed to make permissions fiddling very easy.
     //----------------------------------------------------------------
     private static class Policy extends java.security.Policy {
+        static final java.security.Policy DEFAULT_POLICY = java.security.Policy.getPolicy();
+
         private Permissions perms;
 
         public void setPermissions(Permission...permissions) {
             perms = new Permissions();
             for (Permission permission : permissions)
@@ -2617,11 +2634,11 @@
         public PermissionCollection getPermissions(ProtectionDomain pd) {
             return perms;
         }
 
         public boolean implies(ProtectionDomain pd, Permission p) {
-            return perms.implies(p);
+            return perms.implies(p) || DEFAULT_POLICY.implies(pd, p);
         }
 
         public void refresh() {}
     }
 
