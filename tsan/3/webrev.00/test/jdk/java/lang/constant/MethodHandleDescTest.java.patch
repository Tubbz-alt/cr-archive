diff a/test/jdk/java/lang/constant/MethodHandleDescTest.java b/test/jdk/java/lang/constant/MethodHandleDescTest.java
--- a/test/jdk/java/lang/constant/MethodHandleDescTest.java
+++ b/test/jdk/java/lang/constant/MethodHandleDescTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -150,10 +150,28 @@
             MethodHandleDesc.of(Kind.CONSTRUCTOR, ClassDesc.of("java.util.ArrayList"), "<init>", "()I");
             fail("should have failed: non void return type for constructor");
         } catch (IllegalArgumentException ex) {
             // good
         }
+
+        // null list of parameters
+        try {
+            MethodHandleDesc.ofConstructor(ClassDesc.of("java.util.ArrayList", null));
+            fail("should have failed: null list of parameters");
+        } catch (NullPointerException ex) {
+            // good
+        }
+
+        // null elements in list of parameters
+        try {
+            ClassDesc[] paramList = new ClassDesc[1];
+            paramList[0] = null;
+            MethodHandleDesc.ofConstructor(ClassDesc.of("java.util.ArrayList"), paramList);
+            fail("should have failed: null content in list of parameters");
+        } catch (NullPointerException ex) {
+            // good
+        }
     }
 
     public void testAsType() throws Throwable {
         MethodHandleDesc mhr = MethodHandleDesc.ofMethod(Kind.STATIC, ClassDesc.of("java.lang.Integer"), "valueOf",
                                                          MethodTypeDesc.of(CD_Integer, CD_int));
@@ -182,10 +200,17 @@
 
         // Short circuit optimization
         MethodHandleDesc same = mhr.asType(mhr.invocationType());
         assertSame(mhr, same);
 
+        try {
+            mhr.asType(null);
+            fail("Expected NPE");
+        } catch (NullPointerException ex) {
+            // good
+        }
+
         // @@@ Test varargs adaptation
         // @@@ Test bad adaptations and assert runtime error on resolution
         // @@@ Test intrinsification of adapted MH
     }
 
