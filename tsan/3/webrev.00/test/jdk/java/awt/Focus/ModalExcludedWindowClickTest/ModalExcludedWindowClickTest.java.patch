diff a/test/jdk/java/awt/Focus/ModalExcludedWindowClickTest/ModalExcludedWindowClickTest.java b/test/jdk/java/awt/Focus/ModalExcludedWindowClickTest/ModalExcludedWindowClickTest.java
--- a/test/jdk/java/awt/Focus/ModalExcludedWindowClickTest/ModalExcludedWindowClickTest.java
+++ b/test/jdk/java/awt/Focus/ModalExcludedWindowClickTest/ModalExcludedWindowClickTest.java
@@ -20,23 +20,23 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 /*
-  test
-  @bug       6271849
-  @summary   Tests that component in modal excluded Window which parent is blocked responses to mouse clicks.
-  @author    anton.tarasov@sun.com: area=awt.focus
-  @run       applet ModalExcludedWindowClickTest.html
+  @test
+  @key headful
+  @bug        6271849
+  @summary    Tests that component in modal excluded Window which parent is blocked responses to mouse clicks.
+  @modules java.desktop/sun.awt
+  @run        main ModalExcludedWindowClickTest
 */
 
-import java.applet.Applet;
 import java.awt.*;
 import java.awt.event.*;
 import java.lang.reflect.*;
 
-public class ModalExcludedWindowClickTest extends Applet {
+public class ModalExcludedWindowClickTest {
     Robot robot;
     Frame frame = new Frame("Frame");
     Window w = new Window(frame);
     Dialog d = new Dialog ((Dialog)null, "NullParentDialog", true);
     Button button = new Button("Button");
@@ -52,14 +52,10 @@
         try {
             robot = new Robot();
         } catch (AWTException e) {
             throw new RuntimeException("Error: unable to create robot", e);
         }
-        // Create instructions for the user here, as well as set up
-        // the environment -- set the layout manager, add buttons,
-        // etc.
-        this.setLayout (new BorderLayout ());
     }
 
     public void start() {
 
         if ("sun.awt.motif.MToolkit".equals(Toolkit.getDefaultToolkit().getClass().getName())) {
@@ -115,20 +111,23 @@
         if (c instanceof Frame) {
             robot.mouseMove(p.x + (int)(d.getWidth()/2), p.y + ((Frame)c).getInsets().top/2);
         } else {
             robot.mouseMove(p.x + (int)(d.getWidth()/2), p.y + (int)(d.getHeight()/2));
         }
+        waitForIdle();
         robot.mousePress(InputEvent.BUTTON1_MASK);
+        robot.delay(50);
         robot.mouseRelease(InputEvent.BUTTON1_MASK);
         waitForIdle();
     }
     void waitTillShown(Component c) {
         while (true) {
             try {
                 Thread.sleep(100);
-                c.getLocationOnScreen();
-                break;
+                Point p = c.getLocationOnScreen();
+                if (p != null)
+                    break;
             } catch (InterruptedException e) {
                 throw new RuntimeException(e);
             } catch (IllegalComponentStateException e) {}
         }
     }
