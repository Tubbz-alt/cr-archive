diff a/test/jdk/java/util/Formatter/Basic-X.java.template b/test/jdk/java/util/Formatter/Basic-X.java.template
--- a/test/jdk/java/util/Formatter/Basic-X.java.template
+++ b/test/jdk/java/util/Formatter/Basic-X.java.template
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -592,11 +592,11 @@
         // %d - int and long
         //---------------------------------------------------------------------
         $type$ oneToSeven = ($type$) 1234567;
         test("%d", "1234567", oneToSeven);
         test("%,d", "1,234,567", oneToSeven);
-        test(Locale.FRANCE, "%,d", "1\u00a0234\u00a0567", oneToSeven);
+        test(Locale.FRANCE, "%,d", "1\u202f234\u202f567", oneToSeven);
         test("%,d", "-1,234,567", negate(oneToSeven));
         test("%(d", "1234567", oneToSeven);
         test("%(d", "(1234567)", negate(oneToSeven));
         test("% d", " 1234567", oneToSeven);
         test("% d", "-1234567", negate(oneToSeven));
@@ -787,11 +787,11 @@
         // %d - BigInteger
         //---------------------------------------------------------------------
         test("%d", "null", (Object)null);
         test("%d", "1234567", new BigInteger("1234567", 10));
         test("%,d", "1,234,567", new BigInteger("1234567", 10));
-        test(Locale.FRANCE, "%,d", "1\u00a0234\u00a0567", new BigInteger("1234567", 10));
+        test(Locale.FRANCE, "%,d", "1\u202f234\u202f567", new BigInteger("1234567", 10));
         test("%,d", "-1,234,567", new BigInteger("-1234567", 10));
         test("%(d", "1234567", new BigInteger("1234567", 10));
         test("%(d", "(1234567)", new BigInteger("-1234567", 10));
         test("% d", " 1234567", new BigInteger("1234567", 10));
         test("% d", "-1234567", new BigInteger("-1234567", 10));
@@ -1164,11 +1164,11 @@
         // Float can not accurately store 1e6 * PI.
         test("%.3f", "3141.593", mult(pi, 1000.0));
         test("%.3f", "-3141.593", mult(pi, -1000.0));
 
         test("%,.2f", "3,141.59", mult(pi, 1000.0));
-        test(Locale.FRANCE, "%,.2f", "3\u00a0141,59", mult(pi, 1000.0));
+        test(Locale.FRANCE, "%,.2f", "3\u202f141,59", mult(pi, 1000.0));
         test("%,.2f", "-3,141.59", mult(pi, -1000.0));
         test("%(.2f", "3141.59", mult(pi, 1000.0));
         test("%(.2f", "(3141.59)", mult(pi, -1000.0));
         test("%(,.2f", "3,141.59", mult(pi, 1000.0));
         test("%(,.2f", "(3,141.59)", mult(pi, -1000.0));
@@ -1179,11 +1179,11 @@
         // %f - float, double, Double, BigDecimal
         //---------------------------------------------------------------------
         test("%.3f", "3141592.654", mult(pi, 1000000.0));
         test("%.3f", "-3141592.654", mult(pi, -1000000.0));
         test("%,.4f", "3,141,592.6536", mult(pi, 1000000.0));
-        test(Locale.FRANCE, "%,.4f", "3\u00a0141\u00a0592,6536", mult(pi, 1000000.0));
+        test(Locale.FRANCE, "%,.4f", "3\u202f141\u202f592,6536", mult(pi, 1000000.0));
         test("%,.4f", "-3,141,592.6536", mult(pi, -1000000.0));
         test("%(.4f", "3141592.6536", mult(pi, 1000000.0));
         test("%(.4f", "(3141592.6536)", mult(pi, -1000000.0));
         test("%(,.4f", "3,141,592.6536", mult(pi, 1000000.0));
         test("%(,.4f", "(3,141,592.6536)", mult(pi, -1000000.0));
