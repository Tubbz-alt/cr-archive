diff a/test/jdk/java/util/concurrent/locks/ReentrantReadWriteLock/MapLoops.java b/test/jdk/java/util/concurrent/locks/ReentrantReadWriteLock/MapLoops.java
--- a/test/jdk/java/util/concurrent/locks/ReentrantReadWriteLock/MapLoops.java
+++ b/test/jdk/java/util/concurrent/locks/ReentrantReadWriteLock/MapLoops.java
@@ -89,12 +89,12 @@
 
         if (args.length > 4)
             premove = Integer.parseInt(args[4]);
 
         // normalize probabilities wrt random number generator
-        removesPerMaxRandom = (int)(((double)premove/100.0 * 0x7FFFFFFFL));
-        insertsPerMaxRandom = (int)(((double)pinsert/100.0 * 0x7FFFFFFFL));
+        removesPerMaxRandom = (int)((double)premove/100.0 * 0x7FFFFFFFL);
+        insertsPerMaxRandom = (int)((double)pinsert/100.0 * 0x7FFFFFFFL);
 
         System.out.println("Using " + mapClass.getName());
 
         SplittableRandom rnd = new SplittableRandom();
         Integer[] key = new Integer[NKEYS];
@@ -123,11 +123,11 @@
             barrier.await();
             barrier.await();
             long time = timer.getTime();
             long tpo = time / (i * (long)nops);
             System.out.print(LoopHelpers.rightJustify(tpo) + " ns per op");
-            double secs = (double)(time) / 1000000000.0;
+            double secs = (double)time / 1000000000.0;
             System.out.println("\t " + secs + "s run time");
             map.clear();
         }
         pool.shutdown();
         if (! pool.awaitTermination(LONG_DELAY_MS, MILLISECONDS))
