diff a/test/jdk/java/util/concurrent/tck/Atomic8Test.java b/test/jdk/java/util/concurrent/tck/Atomic8Test.java
--- a/test/jdk/java/util/concurrent/tck/Atomic8Test.java
+++ b/test/jdk/java/util/concurrent/tck/Atomic8Test.java
@@ -516,78 +516,74 @@
     /**
      * All Atomic getAndUpdate methods throw NullPointerException on
      * null function argument
      */
     public void testGetAndUpdateNPE() {
-        Runnable[] throwingActions = {
+        assertThrows(
+            NullPointerException.class,
             () -> new AtomicLong().getAndUpdate(null),
             () -> new AtomicInteger().getAndUpdate(null),
             () -> new AtomicReference().getAndUpdate(null),
             () -> new AtomicLongArray(1).getAndUpdate(0, null),
             () -> new AtomicIntegerArray(1).getAndUpdate(0, null),
             () -> new AtomicReferenceArray(1).getAndUpdate(0, null),
             () -> aLongFieldUpdater().getAndUpdate(this, null),
             () -> anIntFieldUpdater().getAndUpdate(this, null),
-            () -> anIntegerFieldUpdater().getAndUpdate(this, null),
-        };
-        assertThrows(NullPointerException.class, throwingActions);
+            () -> anIntegerFieldUpdater().getAndUpdate(this, null));
     }
 
     /**
      * All Atomic updateAndGet methods throw NullPointerException on null function argument
      */
     public void testUpdateAndGetNPE() {
-        Runnable[] throwingActions = {
+        assertThrows(
+            NullPointerException.class,
             () -> new AtomicLong().updateAndGet(null),
             () -> new AtomicInteger().updateAndGet(null),
             () -> new AtomicReference().updateAndGet(null),
             () -> new AtomicLongArray(1).updateAndGet(0, null),
             () -> new AtomicIntegerArray(1).updateAndGet(0, null),
             () -> new AtomicReferenceArray(1).updateAndGet(0, null),
             () -> aLongFieldUpdater().updateAndGet(this, null),
             () -> anIntFieldUpdater().updateAndGet(this, null),
-            () -> anIntegerFieldUpdater().updateAndGet(this, null),
-        };
-        assertThrows(NullPointerException.class, throwingActions);
+            () -> anIntegerFieldUpdater().updateAndGet(this, null));
     }
 
     /**
      * All Atomic getAndAccumulate methods throw NullPointerException
      * on null function argument
      */
     public void testGetAndAccumulateNPE() {
-        Runnable[] throwingActions = {
+        assertThrows(
+            NullPointerException.class,
             () -> new AtomicLong().getAndAccumulate(1L, null),
             () -> new AtomicInteger().getAndAccumulate(1, null),
             () -> new AtomicReference().getAndAccumulate(one, null),
             () -> new AtomicLongArray(1).getAndAccumulate(0, 1L, null),
             () -> new AtomicIntegerArray(1).getAndAccumulate(0, 1, null),
             () -> new AtomicReferenceArray(1).getAndAccumulate(0, one, null),
             () -> aLongFieldUpdater().getAndAccumulate(this, 1L, null),
             () -> anIntFieldUpdater().getAndAccumulate(this, 1, null),
-            () -> anIntegerFieldUpdater().getAndAccumulate(this, one, null),
-        };
-        assertThrows(NullPointerException.class, throwingActions);
+            () -> anIntegerFieldUpdater().getAndAccumulate(this, one, null));
     }
 
     /**
      * All Atomic accumulateAndGet methods throw NullPointerException
      * on null function argument
      */
     public void testAccumulateAndGetNPE() {
-        Runnable[] throwingActions = {
+        assertThrows(
+            NullPointerException.class,
             () -> new AtomicLong().accumulateAndGet(1L, null),
             () -> new AtomicInteger().accumulateAndGet(1, null),
             () -> new AtomicReference().accumulateAndGet(one, null),
             () -> new AtomicLongArray(1).accumulateAndGet(0, 1L, null),
             () -> new AtomicIntegerArray(1).accumulateAndGet(0, 1, null),
             () -> new AtomicReferenceArray(1).accumulateAndGet(0, one, null),
             () -> aLongFieldUpdater().accumulateAndGet(this, 1L, null),
             () -> anIntFieldUpdater().accumulateAndGet(this, 1, null),
-            () -> anIntegerFieldUpdater().accumulateAndGet(this, one, null),
-        };
-        assertThrows(NullPointerException.class, throwingActions);
+            () -> anIntegerFieldUpdater().accumulateAndGet(this, one, null));
     }
 
     /**
      * Object arguments for parameters of type T that are not
      * instances of the class passed to the newUpdater call will
@@ -596,13 +592,13 @@
     public void testFieldUpdaters_ClassCastException() {
         // Use raw types to allow passing wrong object type, provoking CCE
         final AtomicLongFieldUpdater longUpdater = aLongFieldUpdater();
         final AtomicIntegerFieldUpdater intUpdater = anIntFieldUpdater();
         final AtomicReferenceFieldUpdater refUpdater = anIntegerFieldUpdater();
-        final Object obj = new Object();
         for (Object x : new Object[]{ new Object(), null }) {
-            Runnable[] throwingActions = {
+            assertThrows(
+                ClassCastException.class,
                 () -> longUpdater.get(x),
                 () -> intUpdater.get(x),
                 () -> refUpdater.get(x),
 
                 () -> longUpdater.set(x, 17L),
@@ -616,12 +612,10 @@
                 () -> intUpdater.getAndUpdate(x, y -> y),
                 () -> refUpdater.getAndUpdate(x, y -> y),
 
                 () -> longUpdater.compareAndSet(x, 17L, 42L),
                 () -> intUpdater.compareAndSet(x, 17, 42),
-                () -> refUpdater.compareAndSet(x, (Integer) 17, (Integer) 42),
-            };
-            assertThrows(ClassCastException.class, throwingActions);
+                () -> refUpdater.compareAndSet(x, (Integer) 17, (Integer) 42));
         }
     }
 
 }
