diff a/test/jdk/java/util/concurrent/BlockingQueue/DrainToFails.java b/test/jdk/java/util/concurrent/BlockingQueue/DrainToFails.java
--- a/test/jdk/java/util/concurrent/BlockingQueue/DrainToFails.java
+++ b/test/jdk/java/util/concurrent/BlockingQueue/DrainToFails.java
@@ -33,10 +33,11 @@
  */
 
 /*
  * @test
  * @summary Test drainTo failing due to c.add throwing
+ * @library /test/lib
  */
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.DelayQueue;
@@ -48,13 +49,15 @@
 import java.util.concurrent.FutureTask;
 import java.util.concurrent.PriorityBlockingQueue;
 import java.util.concurrent.RunnableScheduledFuture;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
+import jdk.test.lib.Utils;
 
 @SuppressWarnings({"unchecked", "rawtypes"})
 public class DrainToFails {
+    static final long LONG_DELAY_MS = Utils.adjustTimeout(10_000);
     final int CAPACITY = 10;
     final int SMALL = 2;
 
     void test(String[] args) throws Throwable {
         testDelayQueue(new DelayQueue());
@@ -167,11 +170,11 @@
         try {
             q.drainTo(q2);
             fail("should throw");
         } catch (IllegalStateException success) {
             for (Thread putter : putters) {
-                putter.join(2000L);
+                putter.join(LONG_DELAY_MS);
                 check(! putter.isAlive());
             }
             assertContentsInOrder(q2, 2, 3);
             for (int i = 2 * SMALL; i < CAPACITY; i++)
                 equal(i, q.poll());
@@ -181,15 +184,14 @@
             check(q.contains(44));
             check(q.contains(45));
         }
     }
 
-    Runnable putter(final BlockingQueue q, final int elt) {
-        return new Runnable() {
-            public void run() {
-                try { q.put(elt); }
-                catch (Throwable t) { unexpected(t); }}};
+    Runnable putter(BlockingQueue q, int elt) {
+        return () -> {
+            try { q.put(elt); }
+            catch (Throwable t) { unexpected(t); }};
     }
 
     void assertContentsInOrder(Iterable it, Object... contents) {
         int i = 0;
         for (Object e : it)
