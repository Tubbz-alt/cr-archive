diff a/test/jdk/java/util/concurrent/tck/ThreadLocalRandom8Test.java b/test/jdk/java/util/concurrent/tck/ThreadLocalRandom8Test.java
--- a/test/jdk/java/util/concurrent/tck/ThreadLocalRandom8Test.java
+++ b/test/jdk/java/util/concurrent/tck/ThreadLocalRandom8Test.java
@@ -61,36 +61,34 @@
      * Invoking sized ints, long, doubles, with negative sizes throws
      * IllegalArgumentException
      */
     public void testBadStreamSize() {
         ThreadLocalRandom r = ThreadLocalRandom.current();
-        Runnable[] throwingActions = {
+        assertThrows(
+            IllegalArgumentException.class,
             () -> r.ints(-1L),
             () -> r.ints(-1L, 2, 3),
             () -> r.longs(-1L),
             () -> r.longs(-1L, -1L, 1L),
             () -> r.doubles(-1L),
-            () -> r.doubles(-1L, .5, .6),
-        };
-        assertThrows(IllegalArgumentException.class, throwingActions);
+            () -> r.doubles(-1L, .5, .6));
     }
 
     /**
      * Invoking bounded ints, long, doubles, with illegal bounds throws
      * IllegalArgumentException
      */
     public void testBadStreamBounds() {
         ThreadLocalRandom r = ThreadLocalRandom.current();
-        Runnable[] throwingActions = {
+        assertThrows(
+            IllegalArgumentException.class,
             () -> r.ints(2, 1),
             () -> r.ints(10, 42, 42),
             () -> r.longs(-1L, -1L),
             () -> r.longs(10, 1L, -2L),
             () -> r.doubles(0.0, 0.0),
-            () -> r.doubles(10, .5, .4),
-        };
-        assertThrows(IllegalArgumentException.class, throwingActions);
+            () -> r.doubles(10, .5, .4));
     }
 
     /**
      * A parallel sized stream of ints generates the given number of values
      */
