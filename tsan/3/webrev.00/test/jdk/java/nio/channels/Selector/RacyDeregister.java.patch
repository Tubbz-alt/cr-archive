diff a/test/jdk/java/nio/channels/Selector/RacyDeregister.java b/test/jdk/java/nio/channels/Selector/RacyDeregister.java
--- a/test/jdk/java/nio/channels/Selector/RacyDeregister.java
+++ b/test/jdk/java/nio/channels/Selector/RacyDeregister.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -39,15 +39,10 @@
  * @author Frank Ding
  * @run main/timeout=1200 RacyDeregister
  */
 public class RacyDeregister {
 
-    // FIXME: NUM_OUTER_LOOP_ITERATIONS should be reverted to the hard-coded
-    // value 15 when JDK-8161083 is resolved as either a bug or a non-issue.
-    static final int NUM_OUTER_LOOP_ITERATIONS =
-        System.getProperty("os.name").startsWith("Windows") ? 150 : 15;
-
     // 90% of 1200 second timeout as milliseconds
     static final int TIMEOUT_THRESHOLD_MILLIS = 1200*900;
 
     // Time at start of main().
     static long t0;
@@ -88,11 +83,11 @@
         // thread that will be changing key[0].interestOps to OP_READ | OP_WRITE
         new Thread() {
 
             public void run() {
                 try {
-                    for (int k = 0; k < NUM_OUTER_LOOP_ITERATIONS; k++) {
+                    for (int k = 0; k < 15; k++) {
                         System.out.format("outer loop %3d at %7d ms%n", k,
                             System.currentTimeMillis() - t0);
                         System.out.flush();
                         for (int i = 0; i < 10000; i++) {
                             synchronized (notifyLock) {
