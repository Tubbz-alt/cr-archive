diff a/test/jdk/java/nio/channels/spi/SelectorProvider/inheritedChannel/StateTest.java b/test/jdk/java/nio/channels/spi/SelectorProvider/inheritedChannel/StateTest.java
--- a/test/jdk/java/nio/channels/spi/SelectorProvider/inheritedChannel/StateTest.java
+++ b/test/jdk/java/nio/channels/spi/SelectorProvider/inheritedChannel/StateTest.java
@@ -33,10 +33,11 @@
  * socket state and replies back to this class via an out-of-band
  * channel.
  */
 import java.io.IOException;
 import java.net.InetSocketAddress;
+import java.net.InetAddress;
 import java.nio.ByteBuffer;
 import java.nio.channels.DatagramChannel;
 import java.nio.channels.SelectionKey;
 import java.nio.channels.Selector;
 import java.nio.channels.ServerSocketChannel;
@@ -64,10 +65,11 @@
         SocketChannel sc;
 
         /*
          * Wait for service to connect
          */
+        System.err.println("Waiting for the service to connect");
         ssc.configureBlocking(false);
         sk = ssc.register(sel, SelectionKey.OP_ACCEPT);
         long to = Utils.adjustTimeout(15*1000);
         sc = null;
         for (;;) {
@@ -87,10 +89,11 @@
         ssc.configureBlocking(false);
 
         /*
          * Wait for service to report test result
          */
+        System.err.println("Waiting for the service to report test result");
         sc.configureBlocking(false);
         sk = sc.register(sel, SelectionKey.OP_READ);
         to = Utils.adjustTimeout(5000);
         ByteBuffer bb = ByteBuffer.allocateDirect(20);
         for (;;) {
@@ -109,17 +112,19 @@
             to -= System.currentTimeMillis() - st;
             if (to <= 0) {
                 throw new IOException("Timed out waiting for service to report test result");
             }
         }
+        System.err.println("Cleaning up");
         sk.cancel();
         sc.close();
         sel.close();
 
         /*
          * Examine the test result
          */
+        System.err.println("Examine test result");
         bb.flip();
         byte b = bb.get();
 
         if (expectFail && b == 'P') {
             System.err.println("Test passed - test is expected to fail!!!");
@@ -150,11 +155,12 @@
         /*
          * Create the listener which will be used to read the test result
          * from the service.
          */
         ServerSocketChannel ssc = ServerSocketChannel.open();
-        ssc.socket().bind(new InetSocketAddress(0));
+        ssc.socket().bind(new InetSocketAddress(InetAddress.getLocalHost(), 0));
+        System.err.println("Listener bound to: " + ssc.socket().getLocalSocketAddress());
 
         /*
          * The port is passed to the service as an argument.
          */
         int port = ssc.socket().getLocalPort();
@@ -162,30 +168,35 @@
         arg[0] = String.valueOf(port);
 
         /*
          * Launch service with a SocketChannel (tcp nowait)
          */
+        System.err.println("launchWithSocketChannel");
         SocketChannel sc = Launcher.launchWithSocketChannel(TEST_SERVICE, options, arg);
+        System.err.println("Waiting for test results");
         waitForTestResult(ssc, expectFail);
         sc.close();
 
         /*
          * Launch service with a ServerSocketChannel (tcp wait)
          * launchWithServerSocketChannel establishes a connection to the service
          * and the returned SocketChannel is connected to the service.
          */
+        System.err.println("launchWithServerSocketChannel");
         sc = Launcher.launchWithServerSocketChannel(TEST_SERVICE, options, arg);
         waitForTestResult(ssc, expectFail);
         sc.close();
 
         /*
          * Launch service with a DatagramChannel (udp wait)
          */
+        System.err.println("launchWithDatagramChannel");
         DatagramChannel dc = Launcher.launchWithDatagramChannel(TEST_SERVICE, options, arg);
         waitForTestResult(ssc, expectFail);
         dc.close();
 
+        System.err.println("done");
         if (failures > 0) {
             throw new RuntimeException("Test failed - see log for details");
         } else {
             System.out.println("All tests passed.");
         }
