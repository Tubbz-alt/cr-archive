diff a/test/jdk/java/nio/channels/AsynchronousSocketChannel/Basic.java b/test/jdk/java/nio/channels/AsynchronousSocketChannel/Basic.java
--- a/test/jdk/java/nio/channels/AsynchronousSocketChannel/Basic.java
+++ b/test/jdk/java/nio/channels/AsynchronousSocketChannel/Basic.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2008, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -334,12 +334,13 @@
                 throw new RuntimeException("ReadPendingException expected");
             } catch (ReadPendingException x) {
             }
 
             // close channel (should cause initial read to complete)
+            SocketChannel peer = server.accept();
             ch.close();
-            server.accept().close();
+            peer.close();
 
             // check that AsynchronousCloseException is thrown
             try {
                 result.get();
                 throw new RuntimeException("Should not read");
@@ -350,11 +351,11 @@
 
             System.out.println("-- asynchronous close when writing --");
 
             ch = AsynchronousSocketChannel.open();
             ch.connect(server.address()).get();
-            SocketChannel peer = server.accept();
+            peer = server.accept();
             peer.setOption(SO_RCVBUF, 1);
 
             final AtomicReference<Throwable> writeException =
                 new AtomicReference<Throwable>();
 
