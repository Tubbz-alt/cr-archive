diff a/test/jdk/java/nio/channels/spi/SelectorProvider/inheritedChannel/Launcher.java b/test/jdk/java/nio/channels/spi/SelectorProvider/inheritedChannel/Launcher.java
--- a/test/jdk/java/nio/channels/spi/SelectorProvider/inheritedChannel/Launcher.java
+++ b/test/jdk/java/nio/channels/spi/SelectorProvider/inheritedChannel/Launcher.java
@@ -1,7 +1,8 @@
+
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -73,18 +74,27 @@
         launch(className, null, null, socks[0].fd());
         socks[0].close();
         return socks[1];
     }
 
+    /**
+     * Launch specified class with an AF_UNIX socket created externally, and one String arg to child VM
+     */
+    public static void launchWithUnixDomainSocket(String className, UnixDomainSocket socket, String arg) throws IOException {
+        String[] args = new String[1];
+        args[0] = arg;
+        launch(className, null, args, socket.fd());
+    }
+
     /*
      * Launch 'java' with specified class with the specified arguments (may be null).
      * The launched process will inherit a connected TCP socket. The remote endpoint
      * will be the SocketChannel returned by this method.
      */
     public static SocketChannel launchWithSocketChannel(String className, String options[], String args[]) throws IOException {
         ServerSocketChannel ssc = ServerSocketChannel.open();
-        ssc.socket().bind(new InetSocketAddress(0));
+        ssc.socket().bind(new InetSocketAddress(InetAddress.getLocalHost(), 0));
         InetSocketAddress isa = new InetSocketAddress(InetAddress.getLocalHost(),
                                                       ssc.socket().getLocalPort());
         SocketChannel sc1 = SocketChannel.open(isa);
         SocketChannel sc2 = ssc.accept();
         launch(className, options, args, Util.getFD(sc2));
@@ -109,11 +119,11 @@
      */
     public static SocketChannel launchWithServerSocketChannel(String className, String options[], String args[])
         throws IOException
     {
         ServerSocketChannel ssc = ServerSocketChannel.open();
-        ssc.socket().bind(new InetSocketAddress(0));
+        ssc.socket().bind(new InetSocketAddress(InetAddress.getLocalHost(), 0));
         int port = ssc.socket().getLocalPort();
         launch(className, options, args, Util.getFD(ssc));
         ssc.close();
         InetSocketAddress isa = new InetSocketAddress(InetAddress.getLocalHost(), port);
         return SocketChannel.open(isa);
@@ -136,22 +146,22 @@
      * sent to the service.
      */
     public static DatagramChannel launchWithDatagramChannel(String className, String options[], String args[])
         throws IOException
     {
+        InetAddress address = InetAddress.getLocalHost();
+        if (address.isLoopbackAddress()) {
+            address = InetAddress.getLoopbackAddress();
+        }
         DatagramChannel dc = DatagramChannel.open();
-        dc.socket().bind(new InetSocketAddress(0));
+        dc.socket().bind(new InetSocketAddress(address, 0));
 
         int port = dc.socket().getLocalPort();
         launch(className, options, args, Util.getFD(dc));
         dc.close();
 
         dc = DatagramChannel.open();
-        InetAddress address = InetAddress.getLocalHost();
-        if (address.isLoopbackAddress()) {
-            address = InetAddress.getLoopbackAddress();
-        }
         InetSocketAddress isa = new InetSocketAddress(address, port);
 
         dc.connect(isa);
         return dc;
     }
