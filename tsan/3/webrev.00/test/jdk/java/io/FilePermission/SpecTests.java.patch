diff a/test/jdk/java/io/FilePermission/SpecTests.java b/test/jdk/java/io/FilePermission/SpecTests.java
--- a/test/jdk/java/io/FilePermission/SpecTests.java
+++ b/test/jdk/java/io/FilePermission/SpecTests.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -20,29 +20,29 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 /**
- *
  * @test
- * @bug 4955804
- * @summary Tests for FilePermission constructor spec for null
- *      and empty String parameters
+ * @bug 4955804 8230407
+ * @summary Tests for FilePermission constructor spec for null,
+ *      empty and misformated String parameters
  */
 
 import java.io.*;
 
 public class SpecTests {
 
     public static void main(String args[]) throws Exception {
         String ILE = "java.lang.IllegalArgumentException";
         String NPE = "java.lang.NullPointerException";
 
-        String names[] =   {"", null, "foo", "foo", "foo", "foo"};
+        String names[] =   {"", null, "foo", "foo", "foo", "foo", "foo"};
         String actions[] = {"read", "read", "", null, "junk",
-                         "read,write,execute,delete,rename"};
-        String exps[] = { null, NPE, ILE, ILE, ILE, ILE };
+                            "read,write,execute,delete,rename",
+                            ",read"};
+        String exps[] = { null, NPE, ILE, ILE, ILE, ILE, ILE };
 
         FilePermission permit;
         for (int i = 0; i < names.length; i++) {
             try {
                 permit = new FilePermission(names[i], actions[i]);
@@ -52,17 +52,21 @@
                 } else if (!((e.getClass().getName()).equals(exps[i]))) {
                     throw new Exception("Expecting: " + exps[i] +
                                         " for name:" + names[i] +
                                         " actions:" + actions[i]);
                 } else {
-                   System.out.println(names[i] + ", [" + actions[i] + "] " +
-                         "resulted in " + exps[i] + " as Expected");
+                    System.out.println(names[i] + ", [" + actions[i] + "] " +
+                            "resulted in " + exps[i] + " as Expected");
+                    continue;
                 }
-           }
-           if (exps[i] == null) {
+            }
+            if (exps[i] == null) {
                 System.out.println(names[i] + ", [" + actions[i] + "] " +
-                         "resulted in No Exception as Expected");
+                        "resulted in No Exception as Expected");
+            } else {
+                throw new Exception("Expecting: " + exps[i] +
+                                    " for name:" + names[i] +
+                                    " actions:" + actions[i]);
             }
         }
-
     }
 }
