diff a/test/jdk/java/io/Serializable/superclassDataLoss/SuperclassDataLossTest.java b/test/jdk/java/io/Serializable/superclassDataLoss/SuperclassDataLossTest.java
--- a/test/jdk/java/io/Serializable/superclassDataLoss/SuperclassDataLossTest.java
+++ b/test/jdk/java/io/Serializable/superclassDataLoss/SuperclassDataLossTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -60,11 +60,11 @@
         this.ldr1 = ldr1;
         this.ldr2 = ldr2;
         this.ldr12A = ldr12A;
     }
 
-    protected Class resolveClass(ObjectStreamClass desc)
+    protected Class<?> resolveClass(ObjectStreamClass desc)
         throws IOException, ClassNotFoundException
     {
         // resolve A's classdesc to class != B's superclass
         String name = desc.getName();
         if (ldr12A) {
@@ -89,11 +89,12 @@
     public static void main(String[] args) throws Exception {
         try (URLClassLoader ldr1 = new URLClassLoader(new URL[] { new URL("file:cb1.jar") });
              URLClassLoader ldr2 = new URLClassLoader(new URL[] { new URL("file:cb2.jar") })) {
             setup();
 
-            Runnable a = (Runnable) Class.forName("B", true, ldr1).newInstance();
+            Runnable a = (Runnable) Class.forName("B", true, ldr1)
+                    .getConstructor().newInstance();
             a.run();
 
             ByteArrayOutputStream bout = new ByteArrayOutputStream();
             ObjectOutputStream oout = new ObjectOutputStream(bout);
             oout.writeObject(a);
