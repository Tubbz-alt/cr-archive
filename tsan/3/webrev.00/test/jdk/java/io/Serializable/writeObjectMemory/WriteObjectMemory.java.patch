diff a/test/jdk/java/io/Serializable/writeObjectMemory/WriteObjectMemory.java b/test/jdk/java/io/Serializable/writeObjectMemory/WriteObjectMemory.java
--- a/test/jdk/java/io/Serializable/writeObjectMemory/WriteObjectMemory.java
+++ b/test/jdk/java/io/Serializable/writeObjectMemory/WriteObjectMemory.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2004, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -31,11 +31,13 @@
 import java.io.*;
 import java.util.HashSet;
 import java.util.Iterator;
 
 class A implements Serializable {
-    static HashSet writeObjectExtent = new HashSet();
+    private static final long serialVersionUID = 1L;
+
+    static HashSet<A>writeObjectExtent = new HashSet<>();
 
     private void writeObject(ObjectOutputStream out) throws IOException {
         if (writeObjectExtent.contains(this)) {
             throw new InvalidObjectException("writeObject: object " +
                                              this.toString() + " has already "
@@ -51,11 +53,11 @@
     }
 }
 
 public class WriteObjectMemory {
     public static void main(String args[])
-        throws IOException, ClassNotFoundException
+        throws IOException
     {
         ObjectOutputStream out =
             new ObjectOutputStream(new ByteArrayOutputStream(3000));
         for (int i = 0; i < 1000; i++) {
             out.writeObject(new A());
@@ -63,11 +65,11 @@
 
         // Make sure that serialization subsystem does not
         // allow writeObject to be called on any objects that
         // have already been serialized. These objects should be
         // written out by reference.
-        Iterator iter = A.writeObjectExtent.iterator();
+        Iterator<A> iter = A.writeObjectExtent.iterator();
         while (iter.hasNext()) {
             out.writeObject(iter.next());
         }
 
         out.close();
