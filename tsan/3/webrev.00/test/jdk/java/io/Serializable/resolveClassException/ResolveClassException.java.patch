diff a/test/jdk/java/io/Serializable/resolveClassException/ResolveClassException.java b/test/jdk/java/io/Serializable/resolveClassException/ResolveClassException.java
--- a/test/jdk/java/io/Serializable/resolveClassException/ResolveClassException.java
+++ b/test/jdk/java/io/Serializable/resolveClassException/ResolveClassException.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -35,12 +35,12 @@
 
     BrokenObjectInputStream(InputStream in) throws IOException {
         super(in);
     }
 
-    protected Class resolveClass(ObjectStreamClass desc)
-        throws IOException, ClassNotFoundException
+    protected Class<?> resolveClass(ObjectStreamClass desc)
+        throws ClassNotFoundException
     {
         throw new ClassNotFoundException(message);
     }
 }
 
@@ -51,11 +51,11 @@
         ByteArrayInputStream bin;
         BrokenObjectInputStream oin;
         Object obj;
 
         // write and read an object
-        obj = new Integer(5);
+        obj = 5;
         bout = new ByteArrayOutputStream();
         oout = new ObjectOutputStream(bout);
         oout.writeObject(obj);
         bin = new ByteArrayInputStream(bout.toByteArray());
         oin = new BrokenObjectInputStream(bin);
@@ -65,11 +65,11 @@
             if (! BrokenObjectInputStream.message.equals(e.getMessage()))
                 throw new Error("Original exception not preserved");
         }
 
         // write and read an array of objects
-        obj = new Integer[] { new Integer(5) };
+        obj = new Integer[] { 5 };
         bout = new ByteArrayOutputStream();
         oout = new ObjectOutputStream(bout);
         oout.writeObject(obj);
         bin = new ByteArrayInputStream(bout.toByteArray());
         oin = new BrokenObjectInputStream(bin);
