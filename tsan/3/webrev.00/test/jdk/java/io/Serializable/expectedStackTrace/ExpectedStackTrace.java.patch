diff a/test/jdk/java/io/Serializable/expectedStackTrace/ExpectedStackTrace.java b/test/jdk/java/io/Serializable/expectedStackTrace/ExpectedStackTrace.java
--- a/test/jdk/java/io/Serializable/expectedStackTrace/ExpectedStackTrace.java
+++ b/test/jdk/java/io/Serializable/expectedStackTrace/ExpectedStackTrace.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2011, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -40,13 +40,15 @@
         this.m_str = m_str;
         this.m_int = m_int;
     }
 }
 
+@SuppressWarnings("serial") /* Incorrect declarations are being tested */
 class SerializableObject extends NotSerializableObject
     implements Serializable
 {
+    private static final long serialVersionUID = 1L;
 
     public SerializableObject(String m_str, Integer m_int) {
         super(m_str, m_int);
     }
 
@@ -65,11 +67,11 @@
 
     private static Object getObject() throws Exception {
         ObjectStreamClass osc =
             ObjectStreamClass.lookup(SerializableObject.class);
         SerializableObject initObj =
-            (SerializableObject) osc.forClass().newInstance();
+            (SerializableObject) osc.forClass().getConstructor().newInstance();
         return initObj;
     }
 
     private static void checkSerializable(Object initObj) throws Exception {
         try {
