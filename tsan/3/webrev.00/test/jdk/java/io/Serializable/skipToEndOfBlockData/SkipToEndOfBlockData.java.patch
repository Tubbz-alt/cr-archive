diff a/test/jdk/java/io/Serializable/skipToEndOfBlockData/SkipToEndOfBlockData.java b/test/jdk/java/io/Serializable/skipToEndOfBlockData/SkipToEndOfBlockData.java
--- a/test/jdk/java/io/Serializable/skipToEndOfBlockData/SkipToEndOfBlockData.java
+++ b/test/jdk/java/io/Serializable/skipToEndOfBlockData/SkipToEndOfBlockData.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -30,10 +30,12 @@
  */
 
 import java.io.*;
 
 class MismatchedRead implements Serializable {
+    private static final long serialVersionUID = 1L;
+
     int i;
     float f;
 
     MismatchedRead(int i, float f) {
         this.i = i;
@@ -57,13 +59,19 @@
         if (! (obj instanceof MismatchedRead))
             return false;
         MismatchedRead other = (MismatchedRead) obj;
         return (i == other.i && f == other.f);
     }
+
+    public int hashCode() {
+        return i;
+    }
 }
 
 class MismatchedReadExternal implements Externalizable {
+    private static final long serialVersionUID = 1L;
+
     int i;
     float f;
 
     public MismatchedReadExternal() {
         this(0, (float) 0.0);
@@ -89,13 +97,19 @@
         if (! (obj instanceof MismatchedReadExternal))
             return false;
         MismatchedReadExternal other = (MismatchedReadExternal) obj;
         return (i == other.i && f == other.f);
     }
+
+    public int hashCode() {
+        return i;
+    }
 }
 
 class InnocentBystander implements Serializable {
+    private static final long serialVersionUID = 1L;
+
     String s;
 
     InnocentBystander(String s) {
         this.s = s;
     }
@@ -106,10 +120,14 @@
         InnocentBystander other = (InnocentBystander) obj;
         if (s != null)
             return s.equals(other.s);
         return (s == other.s);
     }
+
+    public int hashCode() {
+        return s.hashCode();
+    }
 }
 
 public class SkipToEndOfBlockData {
     public static void main(String[] args) throws Exception {
         ObjectOutputStream oout;
