diff a/test/jdk/java/io/Serializable/classDescHooks/Loopback.java b/test/jdk/java/io/Serializable/classDescHooks/Loopback.java
--- a/test/jdk/java/io/Serializable/classDescHooks/Loopback.java
+++ b/test/jdk/java/io/Serializable/classDescHooks/Loopback.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -31,13 +31,13 @@
 
 import java.io.*;
 import java.util.*;
 
 class LoopbackOutputStream extends ObjectOutputStream {
-    LinkedList descs;
+    LinkedList<ObjectStreamClass> descs;
 
-    LoopbackOutputStream(OutputStream out, LinkedList descs)
+    LoopbackOutputStream(OutputStream out, LinkedList<ObjectStreamClass> descs)
         throws IOException
     {
         super(out);
         this.descs = descs;
     }
@@ -48,34 +48,35 @@
         descs.add(desc);
     }
 }
 
 class LoopbackInputStream extends ObjectInputStream {
-    LinkedList descs;
+    LinkedList<ObjectStreamClass> descs;
 
-    LoopbackInputStream(InputStream in, LinkedList descs) throws IOException {
+    LoopbackInputStream(InputStream in, LinkedList<ObjectStreamClass> descs) throws IOException {
         super(in);
         this.descs = descs;
     }
 
     protected ObjectStreamClass readClassDescriptor()
-        throws IOException, ClassNotFoundException
     {
-        return (ObjectStreamClass) descs.removeFirst();
+        return descs.removeFirst();
     }
 }
 
 public class Loopback implements Serializable {
+    private static final long serialVersionUID = 1L;
+
     String str;
 
     Loopback(String str) {
         this.str = str;
     }
 
     public static void main(String[] args) throws Exception {
         Loopback lb = new Loopback("foo");
-        LinkedList descs = new LinkedList();
+        LinkedList<ObjectStreamClass> descs = new LinkedList<>();
         ByteArrayOutputStream bout = new ByteArrayOutputStream();
         LoopbackOutputStream lout = new LoopbackOutputStream(bout, descs);
         lout.writeObject(lb);
         lout.close();
 
