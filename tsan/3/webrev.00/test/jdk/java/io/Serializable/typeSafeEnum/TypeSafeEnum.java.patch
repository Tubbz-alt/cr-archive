diff a/test/jdk/java/io/Serializable/typeSafeEnum/TypeSafeEnum.java b/test/jdk/java/io/Serializable/typeSafeEnum/TypeSafeEnum.java
--- a/test/jdk/java/io/Serializable/typeSafeEnum/TypeSafeEnum.java
+++ b/test/jdk/java/io/Serializable/typeSafeEnum/TypeSafeEnum.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -28,10 +28,12 @@
  *          of TypeSafeEnum are singletons.
  */
 import java.io.*;
 
 public class TypeSafeEnum implements Serializable, ObjectInputValidation {
+    private static final long serialVersionUID = 1L;
+
     private static int numWriteObject = 0;
     private static int numReadObject = 0;
 
 
     private String value;
@@ -45,20 +47,20 @@
     static int numReadResolve = 0;
     static int numWriteReplace = 0;
     static boolean verbose = false;
 
 
-    private Object writeReplace() throws IOException {
+    private Object writeReplace() {
         numWriteReplace++;
         if (verbose) {
             System.out.println("TypeSafeEnum.writeReplace() " +
                                this.toString());
         }
         return this;
     }
 
-    private Object readResolve() throws IOException {
+    private Object readResolve() {
         numReadResolve++;
         if (verbose) {
             System.out.println("readResolve called on " + this.toString());
         }
         if (value.equals(FIRST.value)) {
