diff a/test/jdk/java/io/Serializable/subclass/XObjectInputStream.java b/test/jdk/java/io/Serializable/subclass/XObjectInputStream.java
--- a/test/jdk/java/io/Serializable/subclass/XObjectInputStream.java
+++ b/test/jdk/java/io/Serializable/subclass/XObjectInputStream.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -45,11 +45,11 @@
     protected final Object readObjectOverride()
         throws OptionalDataException, ClassNotFoundException, IOException {
 
         Object readResult = null;
         Object prevObject = currentObject;
-        Class  prevDesc   = currentClassDescriptor;
+        Class<?>  prevDesc   = currentClassDescriptor;
 
         boolean NotImplemented = true;
         if (NotImplemented)
             throw new IOException("readObjectOverride not implemented");
 
@@ -241,11 +241,11 @@
              throws IOException, ClassNotFoundException {
          }
      }
 
     private Object currentObject;
-    private Class currentClassDescriptor;
+    private Class<?> currentClassDescriptor;
 
 
 
     /****************************************************************/
 
@@ -254,19 +254,19 @@
      *
      * Look for the readObject method
      * Set the accessible flag on it here. ObjectOutputStream
      * will call it as necessary.
      */
-    public static Method getReadObjectMethod(final Class cl) {
+    public static Method getReadObjectMethod(final Class<?> cl) {
 
-        Method readObjectMethod = (Method)
+        Method readObjectMethod =
             java.security.AccessController.doPrivileged
-            (new java.security.PrivilegedAction() {
-                public Object run() {
+            (new java.security.PrivilegedAction<Method>() {
+                public Method run() {
                     Method m = null;
                     try {
-                        Class[] args = {ObjectInputStream.class};
+                        Class<?>[] args = {ObjectInputStream.class};
                         m = cl.getDeclaredMethod("readObject", args);
                         int mods = m.getModifiers();
                         // Method must be private and non-static
                         if (!Modifier.isPrivate(mods) ||
                             Modifier.isStatic(mods)) {
@@ -290,12 +290,12 @@
                                         final Object[] argList)
         throws IOException
     {
         try {
             java.security.AccessController.doPrivileged
-                (new java.security.PrivilegedExceptionAction() {
-                    public Object run() throws InvocationTargetException,
+                (new java.security.PrivilegedExceptionAction<Void>() {
+                    public Void run() throws InvocationTargetException,
                                         java.lang.IllegalAccessException {
                         m.invoke(obj, argList);
                         return null;
                     }
                 });
