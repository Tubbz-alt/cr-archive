diff a/test/jdk/java/io/Serializable/subclass/SubclassTest.java b/test/jdk/java/io/Serializable/subclass/SubclassTest.java
--- a/test/jdk/java/io/Serializable/subclass/SubclassTest.java
+++ b/test/jdk/java/io/Serializable/subclass/SubclassTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -55,10 +55,12 @@
 
 /**
  * Test if customized readObject and writeObject are called.
  */
 class B implements Serializable {
+    private static final long serialVersionUID = 1L;
+
     public int publicIntField;
     public static int numWriteObjectCalled = 0;
     B(int v) {
         publicIntField = v;
     }
@@ -78,13 +80,15 @@
 /**
  * Test PutFields interface.
  */
 
 class C implements Serializable {
+    private static final long serialVersionUID = 1L;
+
     public int xx1;
     public int xx2;
-    static final ObjectStreamField[] serialPersistentFields = {
+    private static final ObjectStreamField[] serialPersistentFields = {
         new ObjectStreamField("x1", Integer.TYPE),
         new ObjectStreamField("x2", Integer.TYPE),
         new ObjectStreamField("x3", Integer.TYPE),
         new ObjectStreamField("x4", Integer.TYPE)
     };
@@ -104,10 +108,12 @@
 
 };
 
 
 class A implements Serializable {
+    private static final long serialVersionUID = 1L;
+
     public int  publicIntField;
     public long publicLongField;
     public B    publicBField;
     public B[]  publicBArray = { new B(4), new B(6)};
     public C    publicCField;
