diff a/test/jdk/java/io/Serializable/getSuidClinitError/GetSuidClinitError.java b/test/jdk/java/io/Serializable/getSuidClinitError/GetSuidClinitError.java
--- a/test/jdk/java/io/Serializable/getSuidClinitError/GetSuidClinitError.java
+++ b/test/jdk/java/io/Serializable/getSuidClinitError/GetSuidClinitError.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -28,10 +28,11 @@
  *          static initializer method.
  */
 
 import java.io.*;
 
+@SuppressWarnings("serial") /* Incorrect declarations are being tested. */
 class A implements Serializable {
     static {
         // compiler prohibits direct throw
         throwMe(new RuntimeException("blargh"));
     }
@@ -39,34 +40,40 @@
     static void throwMe(RuntimeException ex) throws RuntimeException {
         throw ex;
     }
 }
 
+@SuppressWarnings("serial") /* Incorrect declarations are being tested. */
 class B implements Serializable {
 }
 
+@SuppressWarnings("serial") /* Incorrect declarations are being tested. */
 class C implements Serializable {
     static { System.out.println("C.<clinit>"); }
 }
 
+@SuppressWarnings("serial") /* Incorrect declarations are being tested. */
 class B1 extends B {
 }
 
+@SuppressWarnings("serial") /* Incorrect declarations are being tested. */
 class B2 extends B {
     static { System.out.println("B2.<clinit>"); }
 }
 
+@SuppressWarnings("serial") /* Incorrect declarations are being tested. */
 class C1 extends C {
 }
 
+@SuppressWarnings("serial") /* Incorrect declarations are being tested. */
 class C2 extends C {
     static { System.out.println("C2.<clinit>"); }
 }
 
 public class GetSuidClinitError {
     public static void main(String[] args) throws Exception {
-        Class cl = Class.forName(
+        Class<?> cl = Class.forName(
             "A", false, GetSuidClinitError.class.getClassLoader());
         for (int i = 0; i < 2; i++) {
             try {
                 ObjectStreamClass.lookup(cl).getSerialVersionUID();
                 throw new Error();
@@ -81,11 +88,11 @@
                 System.out.println("warning: caught " + er +
                     " instead of ExceptionInInitializerError");
             }
         }
 
-        Class[] cls = new Class[] {
+        Class<?>[] cls = {
             B.class, B1.class, B2.class,
             C.class, C1.class, C2.class
         };
         long[] suids = new long[] {     // 1.3.1 default serialVersionUIDs
             369445310364440919L, 7585771686008346939L, -8952923334200087495L,
