diff a/test/jdk/java/io/Serializable/packageAccess/PackageAccessTest.java b/test/jdk/java/io/Serializable/packageAccess/PackageAccessTest.java
--- a/test/jdk/java/io/Serializable/packageAccess/PackageAccessTest.java
+++ b/test/jdk/java/io/Serializable/packageAccess/PackageAccessTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -48,23 +48,23 @@
 
 import jdk.test.lib.util.JarUtils;
 
 public class PackageAccessTest {
 
-    static Class bcl;
-    static Class dcl;
+    static Class<?> bcl;
+    static Class<?> dcl;
 
     public static void main(String[] args) throws Exception {
         setup();
 
         try (URLClassLoader ldr =
             new URLClassLoader(new URL[]{ new URL("file:foo.jar") },
                     PackageAccessTest.class.getClassLoader())) {
             bcl = Class.forName("B", true, ldr);
             dcl = Class.forName("D", true, ldr);
 
-            Object b = bcl.newInstance();
+            Object b = bcl.getConstructor().newInstance();
             try {
                 swizzle(b);
                 throw new Error("expected InvalidClassException for class B");
             } catch (InvalidClassException e) {
                 System.out.println("caught " + e);
@@ -72,11 +72,11 @@
             }
             if (A.packagePrivateConstructorInvoked) {
                 throw new Error("package private constructor of A invoked");
             }
 
-            Object d = dcl.newInstance();
+            Object d = dcl.getConstructor().newInstance();
             swizzle(d);
         }
     }
 
     static void swizzle(Object obj) throws Exception {
@@ -101,11 +101,11 @@
 class TestObjectInputStream extends ObjectInputStream {
     TestObjectInputStream(InputStream in) throws IOException {
         super(in);
     }
 
-    protected Class resolveClass(ObjectStreamClass desc)
+    protected Class<?> resolveClass(ObjectStreamClass desc)
         throws IOException, ClassNotFoundException
     {
         String n = desc.getName();
         if (n.equals("B")) {
             return PackageAccessTest.bcl;
