diff a/test/jdk/java/io/Serializable/enum/ignoreSerializationFields/Test.java b/test/jdk/java/io/Serializable/enum/ignoreSerializationFields/Test.java
--- a/test/jdk/java/io/Serializable/enum/ignoreSerializationFields/Test.java
+++ b/test/jdk/java/io/Serializable/enum/ignoreSerializationFields/Test.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -32,27 +32,31 @@
 
 enum Foo {
 
     foo,
     bar {
+        @SuppressWarnings("serial") /* Incorrect declarations are being tested */
         private static final long serialVersionUID = 2L;
         // bar is implemented as an inner class instance, so the following
         // declaration would cause a compile-time error
         // private static final ObjectStreamField[] serialPersistentFields = {
         //    new ObjectStreamField("gub", Float.TYPE)
         // };
     };
 
+    @SuppressWarnings("serial") /* Incorrect declarations are being tested */
     private static final long serialVersionUID = 1L;
+
+    @SuppressWarnings("serial") /* Incorrect declarations are being tested */
     private static final ObjectStreamField[] serialPersistentFields = {
         new ObjectStreamField("blargh", Integer.TYPE)
     };
 }
 
 public class Test {
     public static void main(String[] args) throws Exception {
-        Class[] classes =
+        Class<?>[] classes =
             { Foo.class, Foo.foo.getClass(), Foo.bar.getClass() };
         for (int i = 0; i < classes.length; i++) {
             ObjectStreamClass desc = ObjectStreamClass.lookup(classes[i]);
             if (desc.getSerialVersionUID() != 0L) {
                 throw new Error(
