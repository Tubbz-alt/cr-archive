diff a/test/jdk/java/io/Serializable/sanityCheck/SanityCheck.java b/test/jdk/java/io/Serializable/sanityCheck/SanityCheck.java
--- a/test/jdk/java/io/Serializable/sanityCheck/SanityCheck.java
+++ b/test/jdk/java/io/Serializable/sanityCheck/SanityCheck.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2001, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2001, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -29,10 +29,11 @@
 
 import java.io.*;
 import java.util.*;
 
 class Item implements Serializable {
+    private static final long serialVersionUID = 1L;
 
     static final int ARRAYLEN = 1000;
     static final int STRLEN = 1000;
     static Random rand = new Random(System.currentTimeMillis());
 
@@ -53,10 +54,11 @@
     float[] fary;
     long[] jary;
     double[] dary;
 
     String str;
+    @SuppressWarnings("serial")  /* Incorrect declarations are being tested */
     Object[] oary;
 
     Item() {
         z = rand.nextBoolean();
         b = (byte) rand.nextInt();
@@ -84,11 +86,11 @@
             sary[i] = (short) rand.nextInt();
             iary[i] = rand.nextInt();
             fary[i] = rand.nextFloat();
             jary[i] = rand.nextLong();
             dary[i] = rand.nextDouble();
-            oary[i] = new Integer(rand.nextInt());
+            oary[i] = rand.nextInt();
         }
 
         char[] strChars = new char[STRLEN];
         for (int i = 0; i < STRLEN; i++) {
             strChars[i] = (char) rand.nextInt();
@@ -124,10 +126,15 @@
             return false;
         }
 
         return true;
     }
+
+    @Override
+    public int hashCode() {
+        return Objects.hash(i, j);
+    }
 }
 
 public class SanityCheck {
     public static void main(String[] args) throws Exception {
         for (int i = 0; i < 20; i++) {
