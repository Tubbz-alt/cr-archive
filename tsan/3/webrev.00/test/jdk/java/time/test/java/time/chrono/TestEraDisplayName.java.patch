diff a/test/jdk/java/time/test/java/time/chrono/TestEraDisplayName.java b/test/jdk/java/time/test/java/time/chrono/TestEraDisplayName.java
--- a/test/jdk/java/time/test/java/time/chrono/TestEraDisplayName.java
+++ b/test/jdk/java/time/test/java/time/chrono/TestEraDisplayName.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,28 +26,35 @@
 package test.java.time.chrono;
 
 import java.time.*;
 import java.time.chrono.*;
 import java.time.format.*;
+import java.util.Arrays;
 import java.util.Locale;
+import java.util.stream.Stream;
 
 import org.testng.annotations.DataProvider;
 import org.testng.annotations.Test;
 import static org.testng.Assert.assertEquals;
 
 /**
  * Tests Era.getDisplayName() correctly returns the name based on each
  * chrono implementation.
  * Note: The exact result may depend on locale data provider's implementation.
  *
- * @bug 8171049
+ * @bug 8171049 8224105
  */
 @Test
 public class TestEraDisplayName {
     private static final Locale THAI = Locale.forLanguageTag("th-TH");
     private static final Locale EGYPT = Locale.forLanguageTag("ar-EG");
 
+    private static final LocalDate REIWA_1ST = LocalDate.of(2019, 5, 1);
+    private static final DateTimeFormatter JAPANESE_FORMATTER =
+         DateTimeFormatter.ofPattern("yyyy MM dd GGGG G GGGGG")
+            .withChronology(JapaneseChronology.INSTANCE);
+
     @DataProvider(name="eraDisplayName")
     Object[][] eraDisplayName() {
         return new Object[][] {
             // Era, text style, displyay locale, expected name
             // IsoEra
@@ -64,45 +71,49 @@
             { IsoEra.BCE,   TextStyle.NARROW,   Locale.JAPAN,   "BC" },
             { IsoEra.CE,    TextStyle.NARROW,   Locale.JAPAN,   "AD" },
 
             // JapaneseEra
             { JapaneseEra.MEIJI,    TextStyle.FULL,     Locale.US,      "Meiji" },
-            { JapaneseEra.TAISHO,   TextStyle.FULL,     Locale.US,      "Taisho" },
-            { JapaneseEra.SHOWA,    TextStyle.FULL,     Locale.US,      "Showa" },
+            { JapaneseEra.TAISHO,   TextStyle.FULL,     Locale.US,      "Taish\u014d" },
+            { JapaneseEra.SHOWA,    TextStyle.FULL,     Locale.US,      "Sh\u014dwa" },
             { JapaneseEra.HEISEI,   TextStyle.FULL,     Locale.US,      "Heisei" },
+            { JapaneseEra.REIWA,    TextStyle.FULL,     Locale.US,      "Reiwa" },
             { JapaneseEra.MEIJI,    TextStyle.FULL,     Locale.JAPAN,   "\u660e\u6cbb" },
             { JapaneseEra.TAISHO,   TextStyle.FULL,     Locale.JAPAN,   "\u5927\u6b63" },
             { JapaneseEra.SHOWA,    TextStyle.FULL,     Locale.JAPAN,   "\u662d\u548c" },
             { JapaneseEra.HEISEI,   TextStyle.FULL,     Locale.JAPAN,   "\u5e73\u6210" },
+            { JapaneseEra.REIWA,    TextStyle.FULL,     Locale.JAPAN,   "\u4ee4\u548c" },
             { JapaneseEra.MEIJI,    TextStyle.SHORT,    Locale.US,      "Meiji" },
-            { JapaneseEra.TAISHO,   TextStyle.SHORT,    Locale.US,      "Taisho" },
-            { JapaneseEra.SHOWA,    TextStyle.SHORT,    Locale.US,      "Showa" },
+            { JapaneseEra.TAISHO,   TextStyle.SHORT,    Locale.US,      "Taish\u014d" },
+            { JapaneseEra.SHOWA,    TextStyle.SHORT,    Locale.US,      "Sh\u014dwa" },
             { JapaneseEra.HEISEI,   TextStyle.SHORT,    Locale.US,      "Heisei" },
+            { JapaneseEra.REIWA,    TextStyle.SHORT,    Locale.US,      "Reiwa" },
             { JapaneseEra.MEIJI,    TextStyle.SHORT,    Locale.JAPAN,   "\u660e\u6cbb" },
             { JapaneseEra.TAISHO,   TextStyle.SHORT,    Locale.JAPAN,   "\u5927\u6b63" },
             { JapaneseEra.SHOWA,    TextStyle.SHORT,    Locale.JAPAN,   "\u662d\u548c" },
             { JapaneseEra.HEISEI,   TextStyle.SHORT,    Locale.JAPAN,   "\u5e73\u6210" },
+            { JapaneseEra.REIWA,    TextStyle.SHORT,    Locale.JAPAN,   "\u4ee4\u548c" },
             { JapaneseEra.MEIJI,    TextStyle.NARROW,   Locale.US,      "M" },
             { JapaneseEra.TAISHO,   TextStyle.NARROW,   Locale.US,      "T" },
             { JapaneseEra.SHOWA,    TextStyle.NARROW,   Locale.US,      "S" },
             { JapaneseEra.HEISEI,   TextStyle.NARROW,   Locale.US,      "H" },
+            { JapaneseEra.REIWA,    TextStyle.NARROW,   Locale.US,      "R" },
             { JapaneseEra.MEIJI,    TextStyle.NARROW,   Locale.JAPAN,   "M" },
             { JapaneseEra.TAISHO,   TextStyle.NARROW,   Locale.JAPAN,   "T" },
             { JapaneseEra.SHOWA,    TextStyle.NARROW,   Locale.JAPAN,   "S" },
             { JapaneseEra.HEISEI,   TextStyle.NARROW,   Locale.JAPAN,   "H" },
+            { JapaneseEra.REIWA,    TextStyle.NARROW,   Locale.JAPAN,   "R" },
 
             // ThaiBuddhistEra
             { ThaiBuddhistEra.BEFORE_BE,    TextStyle.FULL, Locale.US,      "BC" },
             { ThaiBuddhistEra.BE,           TextStyle.FULL, Locale.US,      "BE" },
             { ThaiBuddhistEra.BEFORE_BE,    TextStyle.FULL, THAI,           "BC" },
             { ThaiBuddhistEra.BE,           TextStyle.FULL, THAI,
                 "\u0e1e\u0e38\u0e17\u0e18\u0e28\u0e31\u0e01\u0e23\u0e32\u0e0a" },
             { ThaiBuddhistEra.BEFORE_BE,    TextStyle.SHORT, Locale.US,     "BC" },
             { ThaiBuddhistEra.BE,           TextStyle.SHORT, Locale.US,     "BE" },
-            { ThaiBuddhistEra.BEFORE_BE,    TextStyle.SHORT, THAI,
-                "\u0e1b\u0e35\u0e01\u0e48\u0e2d\u0e19\u0e04\u0e23\u0e34\u0e2a" +
-                "\u0e15\u0e4c\u0e01\u0e32\u0e25\u0e17\u0e35\u0e48" },
+            { ThaiBuddhistEra.BEFORE_BE,    TextStyle.SHORT, THAI,          "BC" },
             { ThaiBuddhistEra.BE,           TextStyle.SHORT, THAI,  "\u0e1e.\u0e28." },
             { ThaiBuddhistEra.BEFORE_BE,    TextStyle.NARROW, Locale.US,    "BC" },
             { ThaiBuddhistEra.BE,           TextStyle.NARROW, Locale.US,    "BE" },
             { ThaiBuddhistEra.BEFORE_BE,    TextStyle.NARROW, THAI,         "BC" },
             { ThaiBuddhistEra.BE,           TextStyle.NARROW, THAI,         "\u0e1e.\u0e28." },
@@ -129,10 +140,24 @@
             { HijrahEra.AH, TextStyle.NARROW,   Locale.US,  "AH" },
             { HijrahEra.AH, TextStyle.NARROW,   EGYPT,      "\u0647\u0640" },
         };
     }
 
+    @DataProvider
+    Object[][] allLocales() {
+        return Arrays.stream(Locale.getAvailableLocales())
+            .map(Stream::of)
+            .map(Stream::toArray)
+            .toArray(Object[][]::new);
+    }
+
     @Test(dataProvider="eraDisplayName")
     public void test_eraDisplayName(Era era, TextStyle style, Locale locale, String expected) {
         assertEquals(era.getDisplayName(style, locale), expected);
     }
+
+    @Test(dataProvider="allLocales")
+    public void test_reiwaNames(Locale locale) throws DateTimeParseException {
+        DateTimeFormatter f = JAPANESE_FORMATTER.withLocale(locale);
+        assertEquals(LocalDate.parse(REIWA_1ST.format(f), f), REIWA_1ST);
+    }
 }
