diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
@@ -185,11 +185,11 @@
         is_iconified(false),
         is_maximized(false),
         is_mouse_entered(false),
         can_be_deleted(false),
         events_processing_cnt(0),
-        pointer_device(NULL) {
+        grab_pointer(NULL) {
 
     jwindow = mainEnv->NewGlobalRef(_jwindow);
 
     gtk_widget = gtk_window_new(type == POPUP ? GTK_WINDOW_POPUP : GTK_WINDOW_TOPLEVEL);
 
@@ -511,11 +511,11 @@
     // Upper layers expects from us Windows behavior:
     // all mouse events should be delivered to window where drag begins
     // and no exit/enter event should be reported during this drag.
     // We can grab mouse pointer for these needs.
     if (press) {
-        grab_mouse_drag_focus(gdk_window, NULL, true);
+        grab_mouse_drag_focus(gdk_window, (GdkEvent *) event, NULL, true);
     } else {
         if ((event->state & MOUSE_BUTTONS_MASK)
             && !(state & MOUSE_BUTTONS_MASK)) { // all buttons released
             ungrab_mouse_drag_focus();
         } else if (event->button == 8 || event->button == 9) {
@@ -901,17 +901,18 @@
         CHECK_JNI_EXCEPTION(mainEnv);
     }
 }
 
 void WindowContext::set_cursor(GdkCursor *cursor) {
-    if (!is_in_drag()) {
-        if (WindowContext::sm_mouse_drag_window) {
-            grab_mouse_drag_focus(WindowContext::sm_mouse_drag_window->get_gdk_window(), cursor, false);
-        } else if (WindowContext::sm_grab_window) {
-            grab_mouse_drag_focus(WindowContext::sm_grab_window->get_gdk_window(), cursor, true);
-        }
-    }
+//  FIXME: seems invalid on Gtk+3
+//    if (!is_in_drag()) {
+//        if (WindowContext::sm_mouse_drag_window) {
+//            grab_mouse_drag_focus(WindowContext::sm_mouse_drag_window->get_gdk_window(), NULL, cursor, false);
+//        } else if (WindowContext::sm_grab_window) {
+//            grab_mouse_drag_focus(WindowContext::sm_grab_window->get_gdk_window(), NULL, cursor, true);
+//        }
+//    }
 
     gdk_window_set_cursor(gdk_window, cursor);
 }
 
 void WindowContext::set_level(int level) {
@@ -1119,11 +1120,11 @@
     return can_be_deleted;
 }
 
 bool WindowContext::grab_focus() {
     if (WindowContext::sm_mouse_drag_window
-            || grab_mouse_drag_focus(gdk_window, NULL, true)) {
+            || grab_mouse_drag_focus(gdk_window, NULL, NULL, true)) {
         WindowContext::sm_grab_window = this;
         return true;
     } else {
         return false;
     }
@@ -1379,40 +1380,35 @@
         return (topO && topO->effective_on_top()) || on_top;
     }
     return on_top;
 }
 
-GdkDevice * WindowContext::get_pointer_device() {
-    GdkDevice * device;
-#ifdef GLASS_GTK3
-#if GTK_CHECK_VERSION(3, 20, 0)
-    device = gdk_seat_get_pointer(gdk_display_get_default_seat(gtk_widget_get_display(gtk_widget)));
-#else
-    device = gdk_device_manager_get_client_pointer(gdk_display_get_device_manager(gtk_widget_get_display(gtk_widget)));
-#endif
-#else
-    // gtk2
-    device = gdk_display_get_core_pointer(gtk_widget_get_display(gtk_widget));
-#endif
-
-    return device;
-}
-
-bool WindowContext::grab_mouse_drag_focus(GdkWindow * gdk_w, GdkCursor * cursor, bool owner_events) {
+bool WindowContext::grab_mouse_drag_focus(GdkWindow * gdk_w, GdkEvent * event, GdkCursor * cursor, bool owner_events) {
     if (is_grab_disabled()) {
         return true;
     }
 
     ungrab_mouse_drag_focus();
 
-    pointer_device = get_pointer_device();
 #ifdef GLASS_GTK3
 #if GTK_CHECK_VERSION(3, 20, 0)
-    GdkGrabStatus status = gdk_seat_grab(gdk_device_get_seat(pointer_device), gdk_w,
-                                          GDK_SEAT_CAPABILITY_ALL_POINTING, owner_events, cursor, NULL, NULL, NULL);
+    if (event != NULL) {
+        grab_pointer = gdk_event_get_seat(event);
+    } else {
+        grab_pointer = gdk_display_get_default_seat(gtk_widget_get_display(gtk_widget));
+    }
+
+    GdkGrabStatus status = gdk_seat_grab((GdkSeat *) grab_pointer, gdk_w,
+                                          GDK_SEAT_CAPABILITY_POINTER, owner_events, cursor, NULL, NULL, NULL);
 #else
-    GdkGrabStatus status = gdk_device_grab(pointer_device, gdk_w, GDK_OWNERSHIP_WINDOW, owner_events,
+    if (event != NULL) {
+        grab_pointer = gdk_event_get_device (event);
+    } else {
+        grab_pointer = gdk_device_manager_get_client_pointer(gdk_display_get_device_manager(gtk_widget_get_display(gtk_widget)));
+    }
+
+    GdkGrabStatus status = gdk_device_grab((GdkDevice *) grab_pointer, gdk_w, GDK_OWNERSHIP_WINDOW, owner_events,
                                                 (GdkEventMask)
                                                       (GDK_POINTER_MOTION_MASK
                                                           | GDK_POINTER_MOTION_HINT_MASK
                                                           | GDK_BUTTON_MOTION_MASK
                                                           | GDK_BUTTON1_MOTION_MASK
@@ -1437,24 +1433,24 @@
 
     return (status == GDK_GRAB_SUCCESS) ? true : false;
 }
 
 void WindowContext::ungrab_mouse_drag_focus() {
-    if (!pointer_device) {
+    if (!grab_pointer) {
         return;
     }
 
 #ifdef GLASS_GTK3
 #if GTK_CHECK_VERSION(3, 20, 0)
-    gdk_seat_ungrab(gdk_device_get_seat(pointer_device));
+    gdk_seat_ungrab((GdkSeat *) grab_pointer);
 #else
-    gdk_device_ungrab(pointer_device, GDK_CURRENT_TIME);
+    gdk_device_ungrab((GdkDevice *) grab_pointer, GDK_CURRENT_TIME);
 #endif
 #else
     gdk_pointer_ungrab(GDK_CURRENT_TIME);
 #endif
-    pointer_device = NULL;
+    grab_pointer = NULL;
     WindowContext::sm_mouse_drag_window = NULL;
 
     if (WindowContext::sm_grab_window) {
         WindowContext::sm_grab_window->grab_focus();
     }
