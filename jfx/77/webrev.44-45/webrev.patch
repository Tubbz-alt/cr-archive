diff a/buildSrc/linux.gradle b/buildSrc/linux.gradle
--- a/buildSrc/linux.gradle
+++ b/buildSrc/linux.gradle
@@ -79,10 +79,11 @@
     toolchainDir = ""
 }
 
 def gtk2CCFlags = [ "-Wno-deprecated-declarations" ];
 def gtk3CCFlags = [ "-Wno-deprecated-declarations" ];
+def gtkn3CCFlags = [ ];
 def gtk2LinkFlags = [ ];
 def gtk3LinkFlags = [ ];
 
 // Create $buildDir/linux_tools.properties file and load props from it
 setupTools("linux_gtk2",
@@ -133,10 +134,11 @@
     { properties ->
         def cflagsGTK3 = properties.getProperty("cflagsGTK3")
         def libsGTK3 = properties.getProperty("libsGTK3")
         if (cflagsGTK3 && libsGTK3) {
             gtk3CCFlags.addAll(cflagsGTK3.split(" "))
+            gtkn3CCFlags.addAll(cflagsGTK3.split(" "))
             gtk3LinkFlags.addAll(libsGTK3.split(" "))
         } else {
             throw new IllegalStateException("GTK3 development packages not found. If GTK3 packages are installed, please remove the build directory and try again.")
         }
     }
@@ -264,12 +266,12 @@
 
 LINUX.glass.glassgtkn3 = [:]
 LINUX.glass.glassgtkn3.nativeSource =  ft_gtkn.getFiles()
 LINUX.glass.glassgtkn3.compiler = compiler
 LINUX.glass.glassgtkn3.ccFlags = IS_STATIC_BUILD ?
-        ["-fno-threadsafe-statics", ccFlags, gtk3CCFlags].flatten() :
-        [ccFlags, gtk3CCFlags, "-Werror"].flatten()
+        ["-fno-threadsafe-statics", ccFlags, gtkn3CCFlags].flatten() :
+        [ccFlags, gtkn3CCFlags, "-Werror"].flatten()
 LINUX.glass.glassgtkn3.linker = linker
 LINUX.glass.glassgtkn3.linkFlags = IS_STATIC_BUILD ? linkFlags : [linkFlags, gtk3LinkFlags].flatten()
 LINUX.glass.glassgtkn3.lib = "glassgtkn3"
 
 LINUX.decora = [:]
diff a/modules/javafx.graphics/src/main/native-glass/gtk_new/GlassApplication.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_new/GlassApplication.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_new/GlassApplication.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_new/GlassApplication.cpp
@@ -105,13 +105,16 @@
 
     OverrideUIScale = uiScale;
     gtk_verbose = verbose;
 
     env->ExceptionClear();
-    init_threads();
 
+#if !GTK_CHECK_VERSION(3, 6, 0)
+    init_threads();
     gdk_threads_enter();
+#endif
+
     gtk_init(NULL, NULL);
 
     return JNI_TRUE;
 }
 
@@ -198,11 +201,15 @@
     // restore the X handler.
 
     // Disable X error handling
 #ifndef VERBOSE
     if (!noErrorTrap) {
+#if GTK_CHECK_VERSION(3, 0, 0)
+        gdk_x11_display_error_trap_push(gdk_display_get_default());
+#else
         gdk_error_trap_push();
+#endif
     }
 #endif
 
     gtk_main();
 
@@ -218,11 +225,13 @@
     //     if (!noErrorTrap) {
     //         gdk_error_trap_pop();
     //     }
     // #endif
 
+#if !GTK_CHECK_VERSION(3, 6, 0)
     gdk_threads_leave();
+#endif
 
 }
 
 /*
  * Class:     com_sun_glass_ui_gtk_GtkApplication
@@ -382,12 +391,11 @@
 JNIEXPORT jboolean JNICALL Java_com_sun_glass_ui_gtk_GtkApplication__1supportsTransparentWindows
   (JNIEnv * env, jobject obj) {
     (void)env;
     (void)obj;
 
-    return gdk_display_supports_composite(gdk_display_get_default())
-            && gdk_screen_is_composited(gdk_screen_get_default());
+    return gdk_screen_is_composited(gdk_screen_get_default());
 }
 
 } // extern "C"
 
 bool is_window_enabled_for_event(GdkWindow * window, WindowContext *ctx, gint event_type) {
diff a/modules/javafx.graphics/src/main/native-glass/gtk_new/GlassCommonDialogs.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_new/GlassCommonDialogs.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_new/GlassCommonDialogs.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_new/GlassCommonDialogs.cpp
@@ -112,13 +112,13 @@
         return create_empty_result();
     }
 
     GtkWidget* chooser = gtk_file_chooser_dialog_new(chooser_title, gdk_window_handle_to_gtk(parent),
             static_cast<GtkFileChooserAction>(chooser_type),
-            GTK_STOCK_CANCEL,
+            "_Cancel",
             GTK_RESPONSE_CANCEL,
-            (chooser_type == GTK_FILE_CHOOSER_ACTION_OPEN ? GTK_STOCK_OPEN : GTK_STOCK_SAVE),
+            (chooser_type == GTK_FILE_CHOOSER_ACTION_OPEN ? "_Open" : "_Save"),
             GTK_RESPONSE_ACCEPT,
             NULL);
 
     if (chooser_type == GTK_FILE_CHOOSER_ACTION_SAVE) {
         gtk_file_chooser_set_current_name(GTK_FILE_CHOOSER(chooser), chooser_filename);
@@ -199,13 +199,13 @@
 
     GtkWidget* chooser = gtk_file_chooser_dialog_new(
             chooser_title,
             gdk_window_handle_to_gtk(parent),
             GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER,
-            GTK_STOCK_CANCEL,
+            "_Cancel",
             GTK_RESPONSE_CANCEL,
-            GTK_STOCK_OPEN,
+            "_Open",
             GTK_RESPONSE_ACCEPT,
             NULL);
 
     if (chooser_folder != NULL) {
         gtk_file_chooser_set_current_folder(GTK_FILE_CHOOSER(chooser),
diff a/modules/javafx.graphics/src/main/native-glass/gtk_new/GlassRobot.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_new/GlassRobot.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_new/GlassRobot.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_new/GlassRobot.cpp
@@ -74,11 +74,11 @@
     GdkKeymapKey *keys;
     gint n_keys;
     if (gdk_keyval == -1) {
         return;
     }
-    gdk_keymap_get_entries_for_keyval(gdk_keymap_get_default(),
+    gdk_keymap_get_entries_for_keyval(gdk_keymap_get_for_display(gdk_x11_lookup_xdisplay(xdisplay)),
             gdk_keyval, &keys, &n_keys);
     if (n_keys < 1) {
         return;
     }
 
diff a/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_dnd.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_dnd.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_dnd.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_dnd.cpp
@@ -926,10 +926,11 @@
         }
     }
 }
 
 void DragView::View::expose() {
+#ifdef GLASS_GTK2
     cairo_t *context = gdk_cairo_create(gtk_widget_get_window(widget));
 
     cairo_surface_t *cairo_surface;
 
     guchar *pixels = is_raw_image
@@ -950,6 +951,7 @@
     if (is_raw_image) {
         g_free(pixels);
     }
     cairo_destroy(context);
     cairo_surface_destroy(cairo_surface);
+#endif
 }
diff a/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_general.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_general.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_general.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_general.cpp
@@ -531,13 +531,18 @@
 }
 
 void
 glass_gdk_master_pointer_get_position(gint *x, gint *y) {
 #ifdef GLASS_GTK3
-        gdk_device_get_position(gdk_device_manager_get_client_pointer(
-                                    gdk_display_get_device_manager(
-                                        gdk_display_get_default())), NULL, x, y);
+#if GTK_CHECK_VERSION(3, 20, 0)
+        gdk_device_get_position(gdk_seat_get_pointer(gdk_display_get_default_seat(gdk_display_get_default())),
+                                NULL, x, y);
+#else
+        gdk_device_get_position(
+            gdk_device_manager_get_client_pointer(
+                gdk_display_get_device_manager(gdk_display_get_default())), NULL , x, y);
+#endif
 #else
         gdk_display_get_pointer(gdk_display_get_default(), NULL, x, y, NULL);
 #endif
 }
 
@@ -564,28 +569,27 @@
 }
 
 static gboolean
 configure_transparent_window(GtkWidget *window) {
     GdkScreen *default_screen = gdk_screen_get_default();
-    GdkDisplay *default_display = gdk_display_get_default();
 
 #ifdef GLASS_GTK3
-        GdkVisual *visual = gdk_screen_get_rgba_visual(default_screen);
-        if (visual
-                && gdk_display_supports_composite(default_display)
-                && gdk_screen_is_composited(default_screen)) {
-            glass_widget_set_visual(window, visual);
-            return TRUE;
-        }
+    GdkVisual *visual = gdk_screen_get_rgba_visual(default_screen);
+    // visual will be NULL if rgba not supported
+    if (visual) {
+        glass_widget_set_visual(window, visual);
+        return TRUE;
+    }
 #else
-        GdkColormap *colormap = gdk_screen_get_rgba_colormap(default_screen);
-        if (colormap
-                && gdk_display_supports_composite(default_display)
-                && gdk_screen_is_composited(default_screen)) {
-            gtk_widget_set_colormap(window, colormap);
-            return TRUE;
-        }
+    GdkDisplay *default_display = gdk_display_get_default();
+    GdkColormap *colormap = gdk_screen_get_rgba_colormap(default_screen);
+    if (colormap
+            && gdk_display_supports_composite(default_display)
+            && gdk_screen_is_composited(default_screen)) {
+        gtk_widget_set_colormap(window, colormap);
+        return TRUE;
+    }
 #endif
 
     return FALSE;
 }
 
@@ -596,13 +600,17 @@
 }
 
 void
 glass_gdk_display_get_pointer(GdkDisplay* display, gint* x, gint *y) {
 #ifdef GLASS_GTK3
+#if GTK_CHECK_VERSION(3, 20, 0)
+        gdk_device_get_position(gdk_seat_get_pointer(gdk_display_get_default_seat(display)), NULL, x, y);
+#else
         gdk_device_get_position(
             gdk_device_manager_get_client_pointer(
                 gdk_display_get_device_manager(display)), NULL , x, y);
+#endif
 #else
         gdk_display_get_pointer(display, NULL, x, y, NULL);
 #endif
 }
 
diff a/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_key.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_key.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_key.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_key.cpp
@@ -242,11 +242,11 @@
     init_keymap();
 
     guint keyValue;
     guint state = e->state & GDK_MOD2_MASK; //NumLock test
 
-    gdk_keymap_translate_keyboard_state(gdk_keymap_get_default(),
+    gdk_keymap_translate_keyboard_state(gdk_keymap_get_for_display(gdk_display_get_default()),
             e->hardware_keycode, static_cast<GdkModifierType>(state), e->group,
             &keyValue, NULL, NULL, NULL);
 
     jint key = GPOINTER_TO_INT(g_hash_table_lookup(keymap,
             GINT_TO_POINTER(keyValue)));
@@ -257,11 +257,11 @@
         // from a default layout(we assume that it is a US-like one).
         GdkKeymapKey kk;
         kk.keycode = e->hardware_keycode;
         kk.group = kk.level = 0;
 
-        keyValue = gdk_keymap_lookup_key(gdk_keymap_get_default(), &kk);
+        keyValue = gdk_keymap_lookup_key(gdk_keymap_get_for_display(gdk_display_get_default()), &kk);
 
         key = GPOINTER_TO_INT(g_hash_table_lookup(keymap,
                 GINT_TO_POINTER(keyValue)));
     }
 
diff a/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_screen.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_screen.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_screen.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_screen.cpp
@@ -64,12 +64,23 @@
     return ret;
 
 }
 
 static GdkRectangle get_screen_workarea(GdkScreen *screen) {
-    Display* display = gdk_x11_display_get_xdisplay(gdk_display_get_default());
-    GdkRectangle ret = { 0, 0, gdk_screen_get_width(screen), gdk_screen_get_height(screen)};
+    GdkDisplay * gdk_display = gdk_screen_get_display(screen);
+    Display* display = gdk_x11_display_get_xdisplay(gdk_display);
+
+#if GTK_CHECK_VERSION(3, 22, 0)
+    GdkMonitor * monitor = gdk_display_get_primary_monitor(gdk_display);
+    int w = gdk_monitor_get_width_mm(monitor);
+    int h = gdk_monitor_get_height_mm(monitor);
+#else
+    int w = gdk_screen_get_width(screen);
+    int h = gdk_screen_get_height(screen);
+#endif
+
+    GdkRectangle ret = { 0, 0, w, h };
 
     Atom workareaAtom = XInternAtom(display, "_NET_WORKAREA", True);
 
     Atom type;
     int format;
@@ -127,11 +138,17 @@
 {
     GdkRectangle workArea = get_screen_workarea(screen);
     LOG4("Work Area: x:%d, y:%d, w:%d, h:%d\n", workArea.x, workArea.y, workArea.width, workArea.height);
 
     GdkRectangle monitor_geometry;
+#if GTK_CHECK_VERSION(3, 22, 0)
+    GdkMonitor * monitor = gdk_display_get_monitor(gdk_screen_get_display(screen), monitor_idx);
+    gdk_monitor_get_geometry(monitor, &monitor_geometry);
+#else
     gdk_screen_get_monitor_geometry(screen, monitor_idx, &monitor_geometry);
+#endif
+
     LOG1("convert monitor[%d] -> glass Screen\n", monitor_idx)
     LOG4("[x: %d y: %d w: %d h: %d]\n",
          monitor_geometry.x, monitor_geometry.y,
          monitor_geometry.width, monitor_geometry.height)
 
@@ -149,17 +166,32 @@
     jint wx = working_monitor_geometry.x / uiScale;
     jint wy = working_monitor_geometry.y / uiScale;
     jint ww = working_monitor_geometry.width / uiScale;
     jint wh = working_monitor_geometry.height / uiScale;
 
+#if GTK_CHECK_VERSION(3, 22, 0)
+    gint mmW = gdk_monitor_get_width_mm(monitor);
+    gint mmH = gdk_monitor_get_height_mm(monitor);
+#else
     gint mmW = gdk_screen_get_monitor_width_mm(screen, monitor_idx);
     gint mmH = gdk_screen_get_monitor_height_mm(screen, monitor_idx);
+#endif
+
     if (mmW <= 0 || mmH <= 0) {
+#if GTK_CHECK_VERSION(3, 22, 0)
+        GdkDisplay * display = gdk_screen_get_display(screen);
+        if (gdk_display_get_n_monitors(display) == 1) {
+            GdkMonitor * monitor = gdk_display_get_primary_monitor(display);
+            mmW = gdk_monitor_get_width_mm(monitor);
+            mmH = gdk_monitor_get_height_mm(monitor);
+        }
+#else
         if (gdk_screen_get_n_monitors(screen) == 1) {
             mmW = gdk_screen_get_width_mm(screen);
             mmH = gdk_screen_get_height_mm(screen);
         }
+#endif
     }
     jint dpiX, dpiY;
     if (mmW <= 0 || mmH <= 0) {
         dpiX = dpiY = 96;
     } else {
@@ -197,11 +229,16 @@
     }
 }
 
 jobjectArray rebuild_screens(JNIEnv* env) {
     GdkScreen *default_gdk_screen = gdk_screen_get_default();
+
+#if GTK_CHECK_VERSION(3, 22, 0)
+    gint n_monitors = gdk_display_get_n_monitors(gdk_screen_get_display(default_gdk_screen));
+#else
     gint n_monitors = gdk_screen_get_n_monitors(default_gdk_screen);
+#endif
 
     jobjectArray jscreens = env->NewObjectArray(n_monitors, jScreenCls, NULL);
     JNI_EXCEPTION_TO_CPP(env)
     LOG1("Available monitors: %d\n", n_monitors)
 
@@ -215,11 +252,22 @@
 }
 
 
 glong getScreenPtrForLocation(gint x, gint y) {
     //Note: we are relying on the fact that javafx_screen_id == gdk_monitor_id
+#if GTK_CHECK_VERSION(3, 22, 0)
+    GdkDisplay * display = gdk_display_get_default();
+    GdkMonitor * monitor = gdk_display_get_monitor_at_point(display, x, y);
+    int n_monitors = gdk_display_get_n_monitors (display);
+    for (int i = 0; i < n_monitors; i++) {
+        if (gdk_display_get_monitor(display, i) == monitor)
+            return i;
+    }
+    return -1;
+#else
     return gdk_screen_get_monitor_at_point(gdk_screen_get_default(), x, y);
+#endif
 }
 
 void screen_settings_changed(GdkScreen* screen, gpointer user_data) {
     (void)screen;
     (void)user_data;
diff a/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_new/glass_window.cpp
@@ -191,14 +191,15 @@
 
     jwindow = mainEnv->NewGlobalRef(_jwindow);
 
     gtk_widget = gtk_window_new(type == POPUP ? GTK_WINDOW_POPUP : GTK_WINDOW_TOPLEVEL);
 
-    if (gchar * app_name = get_application_name()) {
-        gtk_window_set_wmclass(GTK_WINDOW(gtk_widget), app_name, app_name);
-        g_free(app_name);
-    }
+// Not useful, see: https://developer.gnome.org/gtk3/stable/GtkWindow.html#gtk-window-set-wmclass
+//    if (gchar * app_name = get_application_name()) {
+//        gtk_window_set_wmclass(GTK_WINDOW(gtk_widget), app_name, app_name);
+//        g_free(app_name);
+//    }
 
     if (owner) {
         owner->add_child(this);
         if (on_top_inherited()) {
             gtk_window_set_keep_above(GTK_WINDOW(gtk_widget), TRUE);
@@ -1059,11 +1060,15 @@
 void WindowContext::set_title(const char *title) {
     gtk_window_set_title(GTK_WINDOW(gtk_widget), title);
 }
 
 void WindowContext::set_alpha(double alpha) {
-    gtk_window_set_opacity(GTK_WINDOW(gtk_widget), (gdouble) alpha);
+#if GTK_CHECK_VERSION(3, 8, 0)
+    gtk_widget_set_opacity(gtk_widget, (gdouble)alpha);
+#else
+    gtk_window_set_opacity(GTK_WINDOW(gtk_widget), (gdouble)alpha);
+#endif
 }
 
 void WindowContext::set_enabled(bool enabled) {
     if (enabled != geometry.enabled) {
         gtk_widget_set_sensitive(gtk_widget, enabled);
