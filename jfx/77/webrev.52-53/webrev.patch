diff a/buildSrc/linux.gradle b/buildSrc/linux.gradle
--- a/buildSrc/linux.gradle
+++ b/buildSrc/linux.gradle
@@ -82,11 +82,12 @@
     toolchainDir = ""
 }
 
 def gtk2CCFlags = [ "-Wno-deprecated-declarations" ];
 def gtk3CCFlags = [ "-Wno-deprecated-declarations" ];
-def gtk3expCCFlags = [ ];
+def gtk3expCCFlags = ["-DGDK_VERSION_MIN_REQUIRED=GDK_VERSION_3_8",
+                      "-DGDK_VERSION_MAX_ALLOWED=GDK_VERSION_3_18"];
 def gtk2LinkFlags = [ ];
 def gtk3LinkFlags = [ ];
 
 // Create $buildDir/linux_tools.properties file and load props from it
 setupTools("linux_gtk2",
diff a/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_general.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_general.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_general.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_general.cpp
@@ -531,18 +531,13 @@
 }
 
 void
 glass_gdk_master_pointer_get_position(gint *x, gint *y) {
 #ifdef GLASS_GTK3
-#if GTK_CHECK_VERSION(3, 20, 0)
-        gdk_device_get_position(gdk_seat_get_pointer(gdk_display_get_default_seat(gdk_display_get_default())),
-                                NULL, x, y);
-#else
         gdk_device_get_position(
             gdk_device_manager_get_client_pointer(
                 gdk_display_get_device_manager(gdk_display_get_default())), NULL , x, y);
-#endif
 #else
         gdk_display_get_pointer(gdk_display_get_default(), NULL, x, y, NULL);
 #endif
 }
 
@@ -600,17 +595,13 @@
 }
 
 void
 glass_gdk_display_get_pointer(GdkDisplay* display, gint* x, gint *y) {
 #ifdef GLASS_GTK3
-#if GTK_CHECK_VERSION(3, 20, 0)
-        gdk_device_get_position(gdk_seat_get_pointer(gdk_display_get_default_seat(display)), NULL, x, y);
-#else
         gdk_device_get_position(
             gdk_device_manager_get_client_pointer(
                 gdk_display_get_device_manager(display)), NULL , x, y);
-#endif
 #else
         gdk_display_get_pointer(display, NULL, x, y, NULL);
 #endif
 }
 
diff a/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_screen.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_screen.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_screen.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_screen.cpp
@@ -67,18 +67,12 @@
 
 static GdkRectangle get_screen_workarea(GdkScreen *screen) {
     GdkDisplay * gdk_display = gdk_screen_get_display(screen);
     Display* display = gdk_x11_display_get_xdisplay(gdk_display);
 
-#if GTK_CHECK_VERSION(3, 22, 0)
-    GdkMonitor * monitor = gdk_display_get_primary_monitor(gdk_display);
-    int w = gdk_monitor_get_width_mm(monitor);
-    int h = gdk_monitor_get_height_mm(monitor);
-#else
     int w = gdk_screen_get_width(screen);
     int h = gdk_screen_get_height(screen);
-#endif
 
     GdkRectangle ret = { 0, 0, w, h };
 
     Atom workareaAtom = XInternAtom(display, "_NET_WORKAREA", True);
 
@@ -138,16 +132,11 @@
 {
     GdkRectangle workArea = get_screen_workarea(screen);
     LOG4("Work Area: x:%d, y:%d, w:%d, h:%d\n", workArea.x, workArea.y, workArea.width, workArea.height);
 
     GdkRectangle monitor_geometry;
-#if GTK_CHECK_VERSION(3, 22, 0)
-    GdkMonitor * monitor = gdk_display_get_monitor(gdk_screen_get_display(screen), monitor_idx);
-    gdk_monitor_get_geometry(monitor, &monitor_geometry);
-#else
     gdk_screen_get_monitor_geometry(screen, monitor_idx, &monitor_geometry);
-#endif
 
     LOG1("convert monitor[%d] -> glass Screen\n", monitor_idx)
     LOG4("[x: %d y: %d w: %d h: %d]\n",
          monitor_geometry.x, monitor_geometry.y,
          monitor_geometry.width, monitor_geometry.height)
@@ -166,32 +155,18 @@
     jint wx = working_monitor_geometry.x / uiScale;
     jint wy = working_monitor_geometry.y / uiScale;
     jint ww = working_monitor_geometry.width / uiScale;
     jint wh = working_monitor_geometry.height / uiScale;
 
-#if GTK_CHECK_VERSION(3, 22, 0)
-    gint mmW = gdk_monitor_get_width_mm(monitor);
-    gint mmH = gdk_monitor_get_height_mm(monitor);
-#else
     gint mmW = gdk_screen_get_monitor_width_mm(screen, monitor_idx);
     gint mmH = gdk_screen_get_monitor_height_mm(screen, monitor_idx);
-#endif
 
     if (mmW <= 0 || mmH <= 0) {
-#if GTK_CHECK_VERSION(3, 22, 0)
-        GdkDisplay * display = gdk_screen_get_display(screen);
-        if (gdk_display_get_n_monitors(display) == 1) {
-            GdkMonitor * monitor = gdk_display_get_primary_monitor(display);
-            mmW = gdk_monitor_get_width_mm(monitor);
-            mmH = gdk_monitor_get_height_mm(monitor);
-        }
-#else
         if (gdk_screen_get_n_monitors(screen) == 1) {
             mmW = gdk_screen_get_width_mm(screen);
             mmH = gdk_screen_get_height_mm(screen);
         }
-#endif
     }
     jint dpiX, dpiY;
     if (mmW <= 0 || mmH <= 0) {
         dpiX = dpiY = 96;
     } else {
@@ -230,15 +205,11 @@
 }
 
 jobjectArray rebuild_screens(JNIEnv* env) {
     GdkScreen *default_gdk_screen = gdk_screen_get_default();
 
-#if GTK_CHECK_VERSION(3, 22, 0)
-    gint n_monitors = gdk_display_get_n_monitors(gdk_screen_get_display(default_gdk_screen));
-#else
     gint n_monitors = gdk_screen_get_n_monitors(default_gdk_screen);
-#endif
 
     jobjectArray jscreens = env->NewObjectArray(n_monitors, jScreenCls, NULL);
     JNI_EXCEPTION_TO_CPP(env)
     LOG1("Available monitors: %d\n", n_monitors)
 
@@ -252,22 +223,11 @@
 }
 
 
 glong getScreenPtrForLocation(gint x, gint y) {
     //Note: we are relying on the fact that javafx_screen_id == gdk_monitor_id
-#if GTK_CHECK_VERSION(3, 22, 0)
-    GdkDisplay * display = gdk_display_get_default();
-    GdkMonitor * monitor = gdk_display_get_monitor_at_point(display, x, y);
-    int n_monitors = gdk_display_get_n_monitors(display);
-    for (int i = 0; i < n_monitors; i++) {
-        if (gdk_display_get_monitor(display, i) == monitor)
-            return i;
-    }
-    return -1;
-#else
     return gdk_screen_get_monitor_at_point(gdk_screen_get_default(), x, y);
-#endif
 }
 
 void screen_settings_changed(GdkScreen* screen, gpointer user_data) {
     (void)screen;
     (void)user_data;
diff a/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_window.cpp
@@ -239,19 +239,14 @@
 
     connect_signals(gtk_widget, this);
 }
 
 void WindowContext::paint(void *data, jint width, jint height) {
-#if GTK_CHECK_VERSION(3, 0, 0)
+#ifdef GLASS_GTK3
     cairo_region_t *region = gdk_window_get_clip_region(gdk_window);
-#if GTK_CHECK_VERSION(3, 22, 0)
-    GdkDrawingContext *dcontext = gdk_window_begin_draw_frame(gdk_window, region);
-    cairo_t *context = gdk_drawing_context_get_cairo_context(dcontext);
-#else
     gdk_window_begin_paint_region(gdk_window, region);
     cairo_t* context = gdk_cairo_create(gdk_window);
-#endif
 #else
     cairo_t *context = gdk_cairo_create(gdk_window);
 #endif
 
     if (bg_color.is_set) {
@@ -271,19 +266,14 @@
 
     applyShapeMask(data, width, height);
     cairo_set_operator(context, CAIRO_OPERATOR_SOURCE);
     cairo_paint(context);
 
-#if GTK_CHECK_VERSION(3, 0, 0)
-#if GTK_CHECK_VERSION(3, 22, 0)
-    gdk_window_end_draw_frame(gdk_window, dcontext);
-    cairo_region_destroy(region);
-#else
+#ifdef GLASS_GTK3
     gdk_window_end_paint(gdk_window);
     cairo_region_destroy(region);
     cairo_destroy(context);
-#endif
 #else
     cairo_destroy(context);
 #endif
 
     cairo_surface_destroy(cairo_surface);
@@ -1224,22 +1214,20 @@
 
 ///////////////////////// PRIVATE
 
 // this is to work-around past gtk+ bug
 void WindowContext::ensure_window_size() {
-#if !GTK_CHECK_VERSION(3, 22, 30)
     gint w, h;
 #ifdef GLASS_GTK3
     gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h);
 #else
     gdk_window_get_geometry(gdk_window, NULL, NULL, &w, &h, NULL);
 #endif
     if ((geometry.last_cw > 0 && geometry.last_ch > 0)
         && (geometry.last_cw != w || geometry.last_ch != h)) {
         gdk_window_resize(gdk_window, geometry.last_cw, geometry.last_ch);
     }
-#endif
 }
 
 // This function calculate the deltas between window and window + decoration (titlebar, borders).
 // It's used when the window manager does not support the _NET_FRAME_EXTENTS extension or when
 // it's not received on time.
@@ -1422,20 +1410,10 @@
     }
 
     ungrab_mouse_drag_focus();
 
 #ifdef GLASS_GTK3
-#if GTK_CHECK_VERSION(3, 20, 0)
-    if (event != NULL) {
-        grab_pointer = gdk_event_get_seat(event);
-    } else {
-        grab_pointer = gdk_display_get_default_seat(gtk_widget_get_display(gtk_widget));
-    }
-
-    GdkGrabStatus status = gdk_seat_grab((GdkSeat *) grab_pointer, gdk_w,
-                                          GDK_SEAT_CAPABILITY_POINTER, owner_events, cursor, NULL, NULL, NULL);
-#else
     if (event != NULL) {
         grab_pointer = gdk_event_get_device (event);
     } else {
         grab_pointer = gdk_device_manager_get_client_pointer(gdk_display_get_device_manager(gtk_widget_get_display(gtk_widget)));
     }
@@ -1448,11 +1426,10 @@
                                                           | GDK_BUTTON1_MOTION_MASK
                                                           | GDK_BUTTON2_MOTION_MASK
                                                           | GDK_BUTTON3_MOTION_MASK
                                                           | GDK_BUTTON_PRESS_MASK
                                                           | GDK_BUTTON_RELEASE_MASK), cursor, GDK_CURRENT_TIME);
-#endif
 #else
     GdkGrabStatus status = gdk_pointer_grab(gdk_w, owner_events,
                                                 (GdkEventMask)
                                                       (GDK_POINTER_MOTION_MASK
                                                           | GDK_POINTER_MOTION_HINT_MASK
@@ -1472,15 +1449,11 @@
     if (!grab_pointer) {
         return;
     }
 
 #ifdef GLASS_GTK3
-#if GTK_CHECK_VERSION(3, 20, 0)
-    gdk_seat_ungrab((GdkSeat *) grab_pointer);
-#else
     gdk_device_ungrab((GdkDevice *) grab_pointer, GDK_CURRENT_TIME);
-#endif
 #else
     gdk_pointer_ungrab(GDK_CURRENT_TIME);
 #endif
     grab_pointer = NULL;
     WindowContext::sm_mouse_drag_window = NULL;
