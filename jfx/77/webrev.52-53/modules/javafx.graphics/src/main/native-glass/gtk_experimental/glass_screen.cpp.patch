diff a/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_screen.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_screen.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_screen.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_screen.cpp
@@ -67,18 +67,12 @@
 
 static GdkRectangle get_screen_workarea(GdkScreen *screen) {
     GdkDisplay * gdk_display = gdk_screen_get_display(screen);
     Display* display = gdk_x11_display_get_xdisplay(gdk_display);
 
-#if GTK_CHECK_VERSION(3, 22, 0)
-    GdkMonitor * monitor = gdk_display_get_primary_monitor(gdk_display);
-    int w = gdk_monitor_get_width_mm(monitor);
-    int h = gdk_monitor_get_height_mm(monitor);
-#else
     int w = gdk_screen_get_width(screen);
     int h = gdk_screen_get_height(screen);
-#endif
 
     GdkRectangle ret = { 0, 0, w, h };
 
     Atom workareaAtom = XInternAtom(display, "_NET_WORKAREA", True);
 
@@ -138,16 +132,11 @@
 {
     GdkRectangle workArea = get_screen_workarea(screen);
     LOG4("Work Area: x:%d, y:%d, w:%d, h:%d\n", workArea.x, workArea.y, workArea.width, workArea.height);
 
     GdkRectangle monitor_geometry;
-#if GTK_CHECK_VERSION(3, 22, 0)
-    GdkMonitor * monitor = gdk_display_get_monitor(gdk_screen_get_display(screen), monitor_idx);
-    gdk_monitor_get_geometry(monitor, &monitor_geometry);
-#else
     gdk_screen_get_monitor_geometry(screen, monitor_idx, &monitor_geometry);
-#endif
 
     LOG1("convert monitor[%d] -> glass Screen\n", monitor_idx)
     LOG4("[x: %d y: %d w: %d h: %d]\n",
          monitor_geometry.x, monitor_geometry.y,
          monitor_geometry.width, monitor_geometry.height)
@@ -166,32 +155,18 @@
     jint wx = working_monitor_geometry.x / uiScale;
     jint wy = working_monitor_geometry.y / uiScale;
     jint ww = working_monitor_geometry.width / uiScale;
     jint wh = working_monitor_geometry.height / uiScale;
 
-#if GTK_CHECK_VERSION(3, 22, 0)
-    gint mmW = gdk_monitor_get_width_mm(monitor);
-    gint mmH = gdk_monitor_get_height_mm(monitor);
-#else
     gint mmW = gdk_screen_get_monitor_width_mm(screen, monitor_idx);
     gint mmH = gdk_screen_get_monitor_height_mm(screen, monitor_idx);
-#endif
 
     if (mmW <= 0 || mmH <= 0) {
-#if GTK_CHECK_VERSION(3, 22, 0)
-        GdkDisplay * display = gdk_screen_get_display(screen);
-        if (gdk_display_get_n_monitors(display) == 1) {
-            GdkMonitor * monitor = gdk_display_get_primary_monitor(display);
-            mmW = gdk_monitor_get_width_mm(monitor);
-            mmH = gdk_monitor_get_height_mm(monitor);
-        }
-#else
         if (gdk_screen_get_n_monitors(screen) == 1) {
             mmW = gdk_screen_get_width_mm(screen);
             mmH = gdk_screen_get_height_mm(screen);
         }
-#endif
     }
     jint dpiX, dpiY;
     if (mmW <= 0 || mmH <= 0) {
         dpiX = dpiY = 96;
     } else {
@@ -230,15 +205,11 @@
 }
 
 jobjectArray rebuild_screens(JNIEnv* env) {
     GdkScreen *default_gdk_screen = gdk_screen_get_default();
 
-#if GTK_CHECK_VERSION(3, 22, 0)
-    gint n_monitors = gdk_display_get_n_monitors(gdk_screen_get_display(default_gdk_screen));
-#else
     gint n_monitors = gdk_screen_get_n_monitors(default_gdk_screen);
-#endif
 
     jobjectArray jscreens = env->NewObjectArray(n_monitors, jScreenCls, NULL);
     JNI_EXCEPTION_TO_CPP(env)
     LOG1("Available monitors: %d\n", n_monitors)
 
@@ -252,22 +223,11 @@
 }
 
 
 glong getScreenPtrForLocation(gint x, gint y) {
     //Note: we are relying on the fact that javafx_screen_id == gdk_monitor_id
-#if GTK_CHECK_VERSION(3, 22, 0)
-    GdkDisplay * display = gdk_display_get_default();
-    GdkMonitor * monitor = gdk_display_get_monitor_at_point(display, x, y);
-    int n_monitors = gdk_display_get_n_monitors(display);
-    for (int i = 0; i < n_monitors; i++) {
-        if (gdk_display_get_monitor(display, i) == monitor)
-            return i;
-    }
-    return -1;
-#else
     return gdk_screen_get_monitor_at_point(gdk_screen_get_default(), x, y);
-#endif
 }
 
 void screen_settings_changed(GdkScreen* screen, gpointer user_data) {
     (void)screen;
     (void)user_data;
