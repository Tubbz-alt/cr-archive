diff a/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_window.cpp
@@ -80,11 +80,10 @@
     ((WindowContext *) user_data)->process_mouse_button(&event->button);
     return TRUE;
 }
 
 static gboolean ctx_device_motion_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
-    gdk_event_request_motions(&event->motion);
     ((WindowContext *) user_data)->process_mouse_motion(&event->motion);
     return TRUE;
 }
 
 static gboolean ctx_device_scroll_callback(GtkWidget *widget, GdkEvent *event, gpointer user_data) {
@@ -215,11 +214,20 @@
     if (xvisualID != 0) {
         GdkVisual *visual = gdk_x11_screen_lookup_visual(gdk_screen_get_default(), xvisualID);
         glass_gtk_window_configure_from_visual(gtk_widget, visual);
     }
 
-    gtk_widget_set_events(gtk_widget, GDK_ALL_EVENTS_MASK);
+    gtk_widget_set_events(gtk_widget, (GDK_EXPOSURE_MASK | GDK_POINTER_MOTION_MASK | GDK_BUTTON_MOTION_MASK
+                                        | GDK_BUTTON1_MOTION_MASK | GDK_BUTTON2_MOTION_MASK
+                                        | GDK_BUTTON3_MOTION_MASK | GDK_BUTTON_PRESS_MASK
+                                        | GDK_BUTTON_RELEASE_MASK | GDK_KEY_PRESS_MASK
+                                        | GDK_KEY_RELEASE_MASK | GDK_ENTER_NOTIFY_MASK
+                                        | GDK_LEAVE_NOTIFY_MASK | GDK_FOCUS_CHANGE_MASK
+                                        | GDK_STRUCTURE_MASK | GDK_PROPERTY_CHANGE_MASK
+                                        | GDK_VISIBILITY_NOTIFY_MASK | GDK_PROXIMITY_IN_MASK
+                                        | GDK_PROXIMITY_OUT_MASK | GDK_SUBSTRUCTURE_MASK
+                                        | GDK_SCROLL_MASK));
     gtk_widget_set_app_paintable(gtk_widget, TRUE);
 
     glass_gtk_configure_transparency_and_realize(gtk_widget, frame_type == TRANSPARENT);
     gtk_window_set_title(GTK_WINDOW(gtk_widget), "");
 
@@ -471,11 +479,10 @@
     }
 }
 
 void WindowContext::process_mouse_button(GdkEventButton *event) {
     bool press = event->type == GDK_BUTTON_PRESS;
-    bool release = event->type == GDK_BUTTON_RELEASE;
 
     guint state = event->state;
     guint mask = 0;
 
     // We need to add/remove current mouse button from the modifier flags
@@ -503,10 +510,21 @@
         state |= mask;
     } else {
         state &= ~mask;
     }
 
+    if (press) {
+        GdkDevice* device = event->device;
+
+        if (glass_gdk_device_is_grabbed(device)
+                && (glass_gdk_device_get_window_at_position(device, NULL, NULL)
+                == NULL)) {
+            ungrab_focus();
+            return;
+        }
+    }
+
     // Upper layers expects from us Windows behavior:
     // all mouse events should be delivered to window where drag begins
     // and no exit/enter event should be reported during this drag.
     // We can grab mouse pointer for these needs.
     if (press) {
@@ -578,10 +596,12 @@
                                 glass_modifier,
                                 JNI_FALSE,
                                 JNI_FALSE);
         CHECK_JNI_EXCEPTION(mainEnv)
     }
+
+    gdk_event_request_motions(event);
 }
 
 void WindowContext::process_mouse_scroll(GdkEventScroll *event) {
     jdouble dx = 0, dy = 0;
 
@@ -900,11 +920,10 @@
     }
 }
 
 void WindowContext::set_cursor(GdkCursor *cursor) {
 // This seems to have no no effect on either Gtk+2 or Gtk+3
-// Also note that re-enabling this will break grab on Gtk 3.20+
 //    if (!is_in_drag()) {
 //        if (WindowContext::sm_mouse_drag_window) {
 //            grab_mouse_drag_focus(WindowContext::sm_mouse_drag_window->get_gdk_window(), NULL, cursor, false);
 //        } else if (WindowContext::sm_grab_window) {
 //            grab_mouse_drag_focus(WindowContext::sm_grab_window->get_gdk_window(), NULL, cursor, true);
@@ -1038,11 +1057,11 @@
 void WindowContext::set_title(const char *title) {
     gtk_window_set_title(GTK_WINDOW(gtk_widget), title);
 }
 
 void WindowContext::set_alpha(double alpha) {
-#if GTK_CHECK_VERSION(3, 8, 0)
+#ifdef GLASS_GTK3
     gtk_widget_set_opacity(gtk_widget, (gdouble)alpha);
 #else
     gtk_window_set_opacity(GTK_WINDOW(gtk_widget), (gdouble)alpha);
 #endif
 }
