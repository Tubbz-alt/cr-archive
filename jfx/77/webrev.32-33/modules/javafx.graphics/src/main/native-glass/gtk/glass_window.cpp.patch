diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
@@ -234,13 +234,10 @@
 
     if (frame_type != TITLED) {
         gtk_window_set_decorated(GTK_WINDOW(gtk_widget), FALSE);
     }
 
-    geometry.frame_extents_supported = gdk_x11_screen_supports_net_wm_hint(gdk_screen_get_default(),
-                                                                           atom_net_wm_frame_extents);
-
     connect_signals(gtk_widget, this);
 }
 
 void WindowContext::paint(void *data, jint width, jint height) {
 #if GTK_CHECK_VERSION(3, 0, 0)
@@ -381,11 +378,11 @@
                     geometry.view_y = top;
 
                     // set bounds again to set to correct window size that must
                     // be the total width and height accounting extents
                     // this is ignored if size is "content size" instead of "window size"
-                    if (geometry.window_size_set) {
+                    if (geometry.needs_ajustment) {
                         set_bounds(0, 0, false, false, geometry.current_w, geometry.current_h, -1, -1);
                     }
 
                     // force position notify so java will know about view_y and view_x
                     size_position_notify(false, true);
@@ -394,12 +391,10 @@
         }
     }
 }
 
 void WindowContext::process_configure() {
-    calculate_adjustments();
-
     gint x, y, w, h, gtk_w, gtk_h;
 
     gtk_window_get_position(GTK_WINDOW(gtk_widget), &x, &y);
     gtk_window_get_size(GTK_WINDOW(gtk_widget), &gtk_w, &gtk_h);
 
@@ -975,21 +970,21 @@
         gtk_window_unmaximize(GTK_WINDOW(gtk_widget));
     }
 }
 
 void WindowContext::set_bounds(int x, int y, bool xSet, bool ySet, int w, int h, int cw, int ch) {
-    calculate_adjustments();
-
     // newW / newH always content sizes compatible with GTK+
     // if window has no decoration, adjustments will be ZERO
     int newW = w > 0 ? w - geometry.adjust_w : cw;
     int newH = h > 0 ? h - geometry.adjust_h : ch;
 
     gboolean size_changed = FALSE;
     gboolean pos_changed = FALSE;
 
-    geometry.window_size_set = (w > 0 || h > 0);
+    // this will tell if adjustments are needed - that's because GTK does not have full window size
+    // values, just content values. Frame extents (window decorations) are handled by the window manager.
+    geometry.needs_ajustment = (w > 0 || h > 0) || geometry.needs_ajustment;
 
     if (newW > 0 && newH > 0) {
         size_changed = TRUE;
 
         geometry.current_cw = newW;
@@ -1205,14 +1200,15 @@
 }
 
 ///////////////////////// PRIVATE
 
 // This function calculate the deltas between window and window + decoration (titleblar, borders).
-// It's used when the window manager does not support the _NET_FRAME_EXTENTS extension.
+// It's used when the window manager does not support the _NET_FRAME_EXTENTS extension or when
+// it's not received on time.
 void WindowContext::calculate_adjustments() {
     // if WM supports _NET_FRAME_EXTENTS, wait for it
-    if (frame_type != TITLED || geometry.frame_extents_supported) {
+    if (frame_type != TITLED || geometry.frame_extents_received) {
         return;
     }
 
     gint x, y, rx, ry;
     gdk_window_get_origin(gdk_window, &x, &y);
@@ -1226,11 +1222,11 @@
 
         // those will be correct
         geometry.view_x = (x - rx);
         geometry.view_y = (y - ry);
 
-        if (geometry.window_size_set) {
+        if (geometry.needs_ajustment) {
             set_bounds(0, 0, false, false, geometry.current_w, geometry.current_h, -1, -1);
         }
 
         // force position notify so java will know about view_y and view_x
         size_position_notify(false, true);
@@ -1243,32 +1239,36 @@
     }
 
     GdkGeometry gdk_geometry;
     gdk_geometry.win_gravity = GDK_GRAVITY_NORTH_WEST;
 
+    // if window size was never set, adjustments are not needed
+    int adjust_w = (geometry.needs_ajustment) ? geometry.adjust_w : 0;
+    int adjust_h = (geometry.needs_ajustment) ? geometry.adjust_h : 0;
+
     if ((!geometry.resizable || !geometry.enabled) && !(is_maximized || is_fullscreen)) {
         // not resizeable
-        int w = (geometry.current_w - geometry.adjust_w) > 0
-                ? geometry.current_w - geometry.adjust_w
+        int w = (geometry.current_w - adjust_w) > 0
+                ? geometry.current_w - adjust_w
                 : geometry.current_cw;
 
-        int h = (geometry.current_h - geometry.adjust_h) > 0
-                ? geometry.current_h - geometry.adjust_h
+        int h = (geometry.current_h - adjust_h) > 0
+                ? geometry.current_h - adjust_h
                 : geometry.current_ch;
 
         gdk_geometry.min_width = gdk_geometry.max_width = w;
         gdk_geometry.min_height = gdk_geometry.max_height = h;
     } else {
-        gdk_geometry.min_width = (geometry.minw - geometry.adjust_w) > 0
-                                 ? geometry.minw - geometry.adjust_w : 1;
-        gdk_geometry.min_height = (geometry.minh - geometry.adjust_h) > 0
-                                  ? geometry.minh - geometry.adjust_h : 1;
-
-        gdk_geometry.max_width = (geometry.maxw - geometry.adjust_w > 0)
-                                 ? geometry.maxw - geometry.adjust_w : G_MAXINT;
-        gdk_geometry.max_height = (geometry.maxh - geometry.adjust_h > 0)
-                                  ? geometry.maxh - geometry.adjust_h : G_MAXINT;
+        gdk_geometry.min_width = (geometry.minw - adjust_w) > 0
+                                 ? geometry.minw - adjust_w : 1;
+        gdk_geometry.min_height = (geometry.minh - adjust_h) > 0
+                                  ? geometry.minh - adjust_h : 1;
+
+        gdk_geometry.max_width = (geometry.maxw - adjust_w > 0)
+                                 ? geometry.maxw - adjust_w : G_MAXINT;
+        gdk_geometry.max_height = (geometry.maxh - adjust_h > 0)
+                                  ? geometry.maxh - adjust_h : G_MAXINT;
     }
 
     gtk_window_set_geometry_hints(GTK_WINDOW(gtk_widget), NULL, &gdk_geometry,
                                   (GdkWindowHints)(GDK_HINT_MIN_SIZE | GDK_HINT_MAX_SIZE | GDK_HINT_WIN_GRAVITY));
 }
