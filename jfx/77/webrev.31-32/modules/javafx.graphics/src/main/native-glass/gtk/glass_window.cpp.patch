diff a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk/glass_window.cpp
@@ -234,10 +234,13 @@
 
     if (frame_type != TITLED) {
         gtk_window_set_decorated(GTK_WINDOW(gtk_widget), FALSE);
     }
 
+    geometry.frame_extents_supported = gdk_x11_screen_supports_net_wm_hint(gdk_screen_get_default(),
+                                                                           atom_net_wm_frame_extents);
+
     connect_signals(gtk_widget, this);
 }
 
 void WindowContext::paint(void *data, jint width, jint height) {
 #if GTK_CHECK_VERSION(3, 0, 0)
@@ -322,10 +325,11 @@
     return jview;
 }
 
 void WindowContext::process_map() {
     map_received = true;
+    calculate_adjustments();
     apply_geometry();
 }
 
 void WindowContext::process_focus(GdkEventFocus *event) {
     if (!event->in && WindowContext::sm_mouse_drag_window == this) {
@@ -374,12 +378,10 @@
                     geometry.adjust_w = left + right;
                     geometry.adjust_h = top + bottom;
                     geometry.view_x = left;
                     geometry.view_y = top;
 
-                    save_cached_extents();
-
                     // set bounds again to set to correct window size that must
                     // be the total width and height accounting extents
                     // this is ignored if size is "content size" instead of "window size"
                     if (geometry.window_size_set) {
                         set_bounds(0, 0, false, false, geometry.current_w, geometry.current_h, -1, -1);
@@ -1203,22 +1205,19 @@
 }
 
 ///////////////////////// PRIVATE
 
 // This function calculate the deltas between window and window + decoration (titleblar, borders).
-// It's used when frame extents are not yet received or when the window manager does not support
-// the _NET_FRAME_EXTENTS extension. Gdk functions are based on frame extents but will try harder
-// if it's not available.
+// It's used when the window manager does not support the _NET_FRAME_EXTENTS extension.
 void WindowContext::calculate_adjustments() {
-    if (frame_type != TITLED || geometry.frame_extents_received) {
+    // if WM supports _NET_FRAME_EXTENTS, wait for it
+    if (frame_type != TITLED || geometry.frame_extents_supported) {
         return;
     }
 
-    gint x, y;
+    gint x, y, rx, ry;
     gdk_window_get_origin(gdk_window, &x, &y);
-
-    gint rx, ry;
     gdk_window_get_root_origin(gdk_window, &rx, &ry);
 
     if (rx != x || ry != y) {
         // the left extends are correct - the right one is guessed to be the same
         geometry.adjust_w = (x - rx) * 2;
@@ -1227,37 +1226,16 @@
 
         // those will be correct
         geometry.view_x = (x - rx);
         geometry.view_y = (y - ry);
 
-        save_cached_extents();
-    } else {
-        CachedExtents c = (window_type == NORMAL) ? normal_extents : utility_extents;
-        geometry.adjust_w = c.adjust_w;
-        geometry.adjust_h = c.adjust_h;
-        geometry.view_x = c.view_x;
-        geometry.view_y = c.view_y;
-    }
-
-    apply_geometry();
-}
-
-void WindowContext::save_cached_extents() {
-    if (frame_type != TITLED) {
-        return;
-    }
+        if (geometry.window_size_set) {
+            set_bounds(0, 0, false, false, geometry.current_w, geometry.current_h, -1, -1);
+        }
 
-    if (window_type == NORMAL) {
-        normal_extents.adjust_w = geometry.adjust_w;
-        normal_extents.adjust_h = geometry.adjust_h;
-        normal_extents.view_x = geometry.view_x;
-        normal_extents.view_y = geometry.view_y;
-    } else {
-        utility_extents.adjust_w = geometry.adjust_w;
-        utility_extents.adjust_h = geometry.adjust_h;
-        utility_extents.view_x = geometry.view_x;
-        utility_extents.view_y = geometry.view_y;
+        // force position notify so java will know about view_y and view_x
+        size_position_notify(false, true);
     }
 }
 
 void WindowContext::apply_geometry() {
     if (!map_received) {
