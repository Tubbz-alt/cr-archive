diff a/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_window.cpp b/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_window.cpp
--- a/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_window.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/gtk_experimental/glass_window.cpp
@@ -469,10 +469,15 @@
         CHECK_JNI_EXCEPTION(mainEnv)
     }
 }
 
 void WindowContext::process_mouse_button(GdkEventButton *event) {
+    // there are other events like GDK_2BUTTON_PRESS
+    if (event->type != GDK_BUTTON_PRESS && event->type != GDK_BUTTON_RELEASE) {
+        return;
+    }
+
     bool press = event->type == GDK_BUTTON_PRESS;
 
     guint state = event->state;
     guint mask = 0;
 
@@ -510,17 +515,15 @@
                 && (glass_gdk_device_get_window_at_position(device, NULL, NULL)
                 == NULL)) {
             ungrab_focus();
             return;
         }
-    }
 
-    // Upper layers expects from us Windows behavior:
-    // all mouse events should be delivered to window where drag begins
-    // and no exit/enter event should be reported during this drag.
-    // We can grab mouse pointer for these needs.
-    if (press) {
+        // Upper layers expects from us Windows behavior:
+        // all mouse events should be delivered to window where drag begins
+        // and no exit/enter event should be reported during this drag.
+        // We can grab mouse pointer for these needs.
         grab_mouse_drag_focus(gdk_window, (GdkEvent *) event, NULL, true);
     } else {
         if ((event->state & MOUSE_BUTTONS_MASK)
             && !(state & MOUSE_BUTTONS_MASK)) { // all buttons released
             ungrab_mouse_drag_focus();
@@ -531,24 +534,25 @@
             // buttons have been released in the usual way (as above).
             ungrab_mouse_drag_focus();
         }
     }
 
+    bool is_popup_trigger = (event->button == 3);
     jint button = gtk_button_number_to_mouse_button(event->button);
 
     if (jview && button != com_sun_glass_events_MouseEvent_BUTTON_NONE) {
         mainEnv->CallVoidMethod(jview, jViewNotifyMouse,
                                 press ? com_sun_glass_events_MouseEvent_DOWN : com_sun_glass_events_MouseEvent_UP,
                                 button,
                                 (jint) event->x, (jint) event->y,
                                 (jint) event->x_root, (jint) event->y_root,
                                 gdk_modifier_mask_to_glass(state),
-                                (event->button == 3 && press) ? JNI_TRUE : JNI_FALSE,
+                                (is_popup_trigger) ? JNI_TRUE : JNI_FALSE,
                                 JNI_FALSE);
         CHECK_JNI_EXCEPTION(mainEnv)
 
-        if (jview && event->button == 3 && press) {
+        if (jview && is_popup_trigger) {
             mainEnv->CallVoidMethod(jview, jViewNotifyMenu,
                                     (jint) event->x, (jint) event->y,
                                     (jint) event->x_root, (jint) event->y_root,
                                     JNI_FALSE);
             CHECK_JNI_EXCEPTION(mainEnv)
