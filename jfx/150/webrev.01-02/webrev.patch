diff a/buildSrc/linux.gradle b/buildSrc/linux.gradle
--- a/buildSrc/linux.gradle
+++ b/buildSrc/linux.gradle
@@ -43,26 +43,27 @@
 def commonFlags = [
         "-fno-strict-aliasing", "-fPIC", "-fno-omit-frame-pointer", // optimization flags
         "-fstack-protector",
         "-Wextra", "-Wall", "-Wformat-security", "-Wno-unused", "-Wno-parentheses", "-Werror=trampolines"] // warning flags
 
-def noImplicitDeclFlag = "-Werror=implicit-function-declaration"
-
 if (!IS_64) {
     commonFlags += "-m32"
 }
 
 if (IS_STATIC_BUILD) {
     commonFlags += "-DSTATIC_BUILD"
 }
 
 // Specify the compilation parameters and link parameters
-def ccFlags = [
+def cppFlags = [
         commonFlags, "-I$JDK_HOME/include", "-I$JDK_HOME/include/linux", "-c",
         "-ffunction-sections", "-fdata-sections",
         IS_DEBUG_NATIVE ? ["-ggdb", "-DVERBOSE"] : ["-O2", "-DNDEBUG"]].flatten()
-def ccFlagsGTK3 = ccFlags
+
+def cFlags = [cppFlags, "-Werror=implicit-function-declaration"].flatten()
+
+def ccFlagsGTK3 = cppFlags
 //ccFlags.addAll(["-Wnon-virtual-dtor", "-Woverloaded-virtual", "-std=c++0x"])
 def dynamicLinkFlags = ["-static-libgcc", "-static-libstdc++", "-shared", commonFlags,
                  "-z", "relro",
                  "-Wl,--gc-sections"].flatten()
 
@@ -142,11 +143,11 @@
             throw new IllegalStateException("GTK3 development packages not found. If GTK3 packages are installed, please remove the build directory and try again.")
         }
     }
 )
 
-def pangoCCFlags = ["-D_ENABLE_PANGO", noImplicitDeclFlag];
+def pangoCCFlags = ["-D_ENABLE_PANGO"];
 def pangoLinkFlags = [];
 setupTools("linux_pango_tools",
     { propFile ->
         ByteArrayOutputStream results = new ByteArrayOutputStream();
         exec {
@@ -173,11 +174,11 @@
         }
     }
 )
 
 def freetypeCCFlags = [ext.IS_COMPILE_PANGO ? "-D_ENABLE_PANGO" :
-                       ext.IS_COMPILE_HARFBUZZ ? "-D_ENABLE_HARFBUZZ" : "", noImplicitDeclFlag]
+                       ext.IS_COMPILE_HARFBUZZ ? "-D_ENABLE_HARFBUZZ" : ""]
 def freetypeLinkFlags = []
 setupTools("linux_freetype_tools",
     { propFile ->
         ByteArrayOutputStream results = new ByteArrayOutputStream();
         exec {
@@ -222,64 +223,64 @@
 }
 
 LINUX.glass.glass = [:]
 LINUX.glass.glass.nativeSource = ft_gtk_launcher.getFiles()
 LINUX.glass.glass.compiler = compiler
-LINUX.glass.glass.ccFlags = [ccFlags, "-Werror"].flatten()
+LINUX.glass.glass.ccFlags = [cppFlags, "-Werror"].flatten()
 LINUX.glass.glass.linker = linker
 LINUX.glass.glass.linkFlags = IS_STATIC_BUILD? linkFlags : [linkFlags, "-lX11", "-ldl"].flatten()
 LINUX.glass.glass.lib = "glass"
 
 LINUX.glass.glassgtk2 = [:]
 LINUX.glass.glassgtk2.nativeSource =  ft_gtk.getFiles()
 LINUX.glass.glassgtk2.compiler = compiler
 LINUX.glass.glassgtk2.ccFlags = IS_STATIC_BUILD ?
-        ["-fno-threadsafe-statics", ccFlags, gtk2CCFlags].flatten() :
-        [ccFlags, gtk2CCFlags, "-Werror"].flatten()
+        ["-fno-threadsafe-statics", cppFlags, gtk2CCFlags].flatten() :
+        [cppFlags, gtk2CCFlags, "-Werror"].flatten()
 LINUX.glass.glassgtk2.linker = linker
 LINUX.glass.glassgtk2.linkFlags = IS_STATIC_BUILD ? linkFlags : [linkFlags, gtk2LinkFlags].flatten()
 LINUX.glass.glassgtk2.lib = "glassgtk2"
 
 LINUX.glass.glassgtk3 = [:]
 LINUX.glass.glassgtk3.nativeSource =  ft_gtk.getFiles()
 LINUX.glass.glassgtk3.compiler = compiler
 LINUX.glass.glassgtk3.ccFlags = IS_STATIC_BUILD ?
-        ["-fno-threadsafe-statics", ccFlags, gtk3CCFlags].flatten() :
-        [ccFlags, gtk3CCFlags, "-Werror"].flatten()
+        ["-fno-threadsafe-statics", cppFlags, gtk3CCFlags].flatten() :
+        [cppFlags, gtk3CCFlags, "-Werror"].flatten()
 LINUX.glass.glassgtk3.linker = linker
 LINUX.glass.glassgtk3.linkFlags = IS_STATIC_BUILD ? linkFlags : [linkFlags, gtk3LinkFlags].flatten()
 LINUX.glass.glassgtk3.lib = "glassgtk3"
 
 LINUX.decora = [:]
 LINUX.decora.compiler = compiler
-LINUX.decora.ccFlags = [ccFlags, "-ffast-math"].flatten()
+LINUX.decora.ccFlags = [cppFlags, "-ffast-math"].flatten()
 LINUX.decora.linker = linker
 LINUX.decora.linkFlags = [linkFlags].flatten()
 LINUX.decora.lib = "decora_sse"
 
 LINUX.prism = [:]
 LINUX.prism.nativeSource = file("${project(":graphics").projectDir}/src/main/native-prism")
 LINUX.prism.compiler = compiler
-LINUX.prism.ccFlags = [ccFlags, "-DINLINE=inline", noImplicitDeclFlag].flatten()
+LINUX.prism.ccFlags = [cFlags, "-DINLINE=inline"].flatten()
 LINUX.prism.linker = linker
 LINUX.prism.linkFlags = [linkFlags].flatten()
 LINUX.prism.lib = "prism_common"
 
 LINUX.prismSW = [:]
 LINUX.prismSW.nativeSource = file("${project(":graphics").projectDir}/src/main/native-prism-sw")
 LINUX.prismSW.compiler = compiler
-LINUX.prismSW.ccFlags = [ccFlags, "-DINLINE=inline", noImplicitDeclFlag].flatten()
+LINUX.prismSW.ccFlags = [cFlags, "-DINLINE=inline"].flatten()
 LINUX.prismSW.linker = linker
 LINUX.prismSW.linkFlags = [linkFlags].flatten()
 LINUX.prismSW.lib = "prism_sw"
 
 LINUX.iio = [:]
 LINUX.iio.nativeSource = [
     file("${project("graphics").projectDir}/src/main/native-iio"),
     file("${project("graphics").projectDir}/src/main/native-iio/libjpeg")]
 LINUX.iio.compiler = compiler
-LINUX.iio.ccFlags = [ccFlags, noImplicitDeclFlag].flatten()
+LINUX.iio.ccFlags = [cFlags].flatten()
 LINUX.iio.linker = linker
 LINUX.iio.linkFlags = [linkFlags].flatten()
 LINUX.iio.lib = "javafx_iio"
 
 LINUX.prismES2 = [:]
@@ -287,36 +288,36 @@
     file("${project("graphics").projectDir}/src/main/native-prism-es2"),
     file("${project("graphics").projectDir}/src/main/native-prism-es2/GL"),
     file("${project("graphics").projectDir}/src/main/native-prism-es2/x11")
 ]
 LINUX.prismES2.compiler = compiler
-LINUX.prismES2.ccFlags = ["-DLINUX", ccFlags, noImplicitDeclFlag].flatten()
+LINUX.prismES2.ccFlags = ["-DLINUX", cFlags].flatten()
 LINUX.prismES2.linker = linker
 LINUX.prismES2.linkFlags =IS_STATIC_BUILD ? linkFlags : [linkFlags, "-lX11", "-lXxf86vm", "-lGL"].flatten()
 LINUX.prismES2.lib = "prism_es2"
 
 def closedDir = file("$projectDir/../rt-closed")
 LINUX.font = [:]
 LINUX.font.compiler = compiler
 LINUX.font.nativeSource = [file("${project("graphics").projectDir}/src/main/native-font")]
-LINUX.font.ccFlags = ["-DJFXFONT_PLUS", ccFlags, noImplicitDeclFlag].flatten()
+LINUX.font.ccFlags = ["-DJFXFONT_PLUS", cppFlags].flatten()
 LINUX.font.linker = linker
 LINUX.font.linkFlags = [linkFlags].flatten()
 LINUX.font.lib = "javafx_font"
 
 LINUX.fontFreetype = [:]
 LINUX.fontFreetype.nativeSource = ["src/main/native-font/freetype.c"]
 LINUX.fontFreetype.compiler = compiler
-LINUX.fontFreetype.ccFlags = ["-DJFXFONT_PLUS", ccFlags, freetypeCCFlags].flatten()
+LINUX.fontFreetype.ccFlags = ["-DJFXFONT_PLUS", cFlags, freetypeCCFlags].flatten()
 LINUX.fontFreetype.linker = linker
 LINUX.fontFreetype.linkFlags = IS_STATIC_BUILD ? linkFlags : [linkFlags, freetypeLinkFlags].flatten()
 LINUX.fontFreetype.lib = "javafx_font_freetype"
 
 LINUX.fontPango = [:]
 LINUX.fontPango.nativeSource = ["src/main/native-font/pango.c"]
 LINUX.fontPango.compiler = compiler
-LINUX.fontPango.ccFlags = ["-DJFXFONT_PLUS", ccFlags, pangoCCFlags].flatten()
+LINUX.fontPango.ccFlags = ["-DJFXFONT_PLUS", cFlags, pangoCCFlags].flatten()
 LINUX.fontPango.linker = linker
 LINUX.fontPango.linkFlags =IS_STATIC_BUILD ? linkFlags : [linkFlags, pangoLinkFlags].flatten()
 LINUX.fontPango.lib = "javafx_font_pango"
 
 LINUX.media = [:]
