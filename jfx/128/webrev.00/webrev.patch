diff a/modules/javafx.web/src/ios/java/com/sun/java/scene/web/WebViewHelper.java b/modules/javafx.web/src/ios/java/com/sun/java/scene/web/WebViewHelper.java
--- /dev/null
+++ b/modules/javafx.web/src/ios/java/com/sun/java/scene/web/WebViewHelper.java
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package com.sun.java.scene.web;
+
+import com.sun.javafx.geom.BaseBounds;
+import com.sun.javafx.geom.PickRay;
+import com.sun.javafx.geom.transform.BaseTransform;
+import com.sun.javafx.scene.ParentHelper;
+import com.sun.javafx.scene.input.PickResultChooser;
+import com.sun.javafx.sg.prism.NGNode;
+import com.sun.javafx.util.Utils;
+import javafx.scene.web.WebView;
+import javafx.scene.Node;
+
+/**
+ * Used to access internal methods of WebView.
+ */
+public class WebViewHelper extends ParentHelper {
+
+    private static final WebViewHelper theInstance;
+    private static WebViewAccessor webViewAccessor;
+
+    static {
+        theInstance = new WebViewHelper();
+        Utils.forceInit(WebView.class);
+    }
+
+    private static WebViewHelper getInstance() {
+        return theInstance;
+    }
+
+    public static void initHelper(WebView webView) {
+        setHelper(webView, getInstance());
+    }
+
+    @Override
+    protected NGNode createPeerImpl(Node node) {
+        return webViewAccessor.doCreatePeer(node);
+    }
+
+    @Override
+    protected void updatePeerImpl(Node node) {
+        super.updatePeerImpl(node);
+        webViewAccessor.doUpdatePeer(node);
+    }
+
+    protected void transformsChangedImpl(Node node) {
+        super.transformsChangedImpl(node);
+        webViewAccessor.doTransformsChanged(node);
+    }
+
+    @Override
+    protected BaseBounds computeGeomBoundsImpl(Node node, BaseBounds bounds,
+            BaseTransform tx) {
+        return webViewAccessor.doComputeGeomBounds(node, bounds, tx);
+    }
+
+    @Override
+    protected boolean computeContainsImpl(Node node, double localX, double localY) {
+        return webViewAccessor.doComputeContains(node, localX, localY);
+    }
+
+    @Override
+    protected void pickNodeLocalImpl(Node node, PickRay localPickRay,
+            PickResultChooser result) {
+        webViewAccessor.doPickNodeLocal(node, localPickRay, result);
+    }
+
+    public static void setWebViewAccessor(final WebViewAccessor newAccessor) {
+        if (webViewAccessor != null) {
+            throw new IllegalStateException();
+        }
+
+        webViewAccessor = newAccessor;
+    }
+
+    public interface WebViewAccessor {
+        NGNode doCreatePeer(Node node);
+        void doUpdatePeer(Node node);
+        void doTransformsChanged(Node node);
+        BaseBounds doComputeGeomBounds(Node node, BaseBounds bounds, BaseTransform tx);
+        boolean doComputeContains(Node node, double localX, double localY);
+        void doPickNodeLocal(Node node, PickRay localPickRay, PickResultChooser result);
+    }
+
+}
diff a/modules/javafx.web/src/ios/java/com/sun/javafx/scene/web/behavior/HTMLEditorBehavior.java b/modules/javafx.web/src/ios/java/com/sun/javafx/scene/web/behavior/HTMLEditorBehavior.java
--- a/modules/javafx.web/src/ios/java/com/sun/javafx/scene/web/behavior/HTMLEditorBehavior.java
+++ b/modules/javafx.web/src/ios/java/com/sun/javafx/scene/web/behavior/HTMLEditorBehavior.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,11 +28,15 @@
 import com.sun.javafx.scene.ParentHelper;
 import javafx.scene.web.HTMLEditor;
 import java.util.ArrayList;
 import java.util.List;
 import com.sun.javafx.scene.control.behavior.BehaviorBase;
-import com.sun.javafx.scene.control.behavior.KeyBinding;
+import com.sun.javafx.scene.control.inputmap.InputMap;
+import com.sun.javafx.scene.control.inputmap.KeyBinding;
+import com.sun.javafx.scene.control.behavior.FocusTraversalInputMap;
+
+import static com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;
 import javafx.scene.web.HTMLEditorSkin;
 import static javafx.scene.input.KeyCode.B;
 import static javafx.scene.input.KeyCode.I;
 import static javafx.scene.input.KeyCode.U;
 import static javafx.scene.input.KeyCode.F12;
diff a/modules/javafx.web/src/ios/java/com/sun/javafx/scene/web/skin/HTMLEditorSkin.java b/modules/javafx.web/src/ios/java/com/sun/javafx/scene/web/skin/HTMLEditorSkin.java
--- a/modules/javafx.web/src/ios/java/com/sun/javafx/scene/web/skin/HTMLEditorSkin.java
+++ b/modules/javafx.web/src/ios/java/com/sun/javafx/scene/web/skin/HTMLEditorSkin.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -21,11 +21,11 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
-package com.sun.javafx.scene.web.skin;
+package javafx.scene.web;
 
 import java.util.ResourceBundle;
 import com.sun.javafx.scene.ParentHelper;
 import com.sun.javafx.application.PlatformImpl;
 import com.sun.javafx.scene.traversal.Algorithm;
@@ -75,43 +75,40 @@
 import javafx.scene.control.skin.ColorPickerSkin;
 import com.sun.javafx.scene.control.skin.FXVK;
 import com.sun.javafx.scene.web.behavior.HTMLEditorBehavior;
 import com.sun.javafx.scene.traversal.TraversalEngine;
 import com.sun.javafx.scene.traversal.TraverseListener;
-//import com.sun.webkit.WebPage;
-//import com.sun.webkit.event.WCFocusEvent;
-//import com.sun.javafx.webkit.Accessor;
 
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
 import javafx.scene.Scene;
 import javafx.scene.control.*;
 import javafx.scene.layout.*;
-import com.sun.javafx.scene.control.skin.BehaviorSkinBase;
 import javafx.collections.ListChangeListener;
 
 import static javafx.geometry.NodeOrientation.*;
 
+import static javafx.scene.web.HTMLEditorSkin.Command.*;
+
+
 /**
  * HTML editor skin.
  */
-public class HTMLEditorSkin extends BehaviorSkinBase<HTMLEditor, HTMLEditorBehavior> implements TraverseListener {
+public class HTMLEditorSkin extends SkinBase<HTMLEditor> implements TraverseListener {
     private GridPane gridPane;
 
     private ToolBar toolbar1;
     private ToolBar toolbar2;
 
     private Button cutButton;
     private Button copyButton;
     private Button pasteButton;
 
-//    private Button undoButton;
-//    private Button redoButton;
 
     private Button insertHorizontalRuleButton;
 
     private ToggleGroup alignmentToggleGroup;
     private ToggleButton alignLeftButton;
@@ -142,11 +139,10 @@
 
     private ColorPicker fgColorButton;
     private ColorPicker bgColorButton;
 
     private WebView webView;
-//    private WebPage webPage;
 
     private static final String CUT_COMMAND = "cut";
     private static final String COPY_COMMAND = "copy";
     private static final String PASTE_COMMAND = "paste";
 
@@ -256,11 +252,11 @@
 //                }
 //            }
         }
     };
     public HTMLEditorSkin(HTMLEditor htmlEditor) {
-        super(htmlEditor, new HTMLEditorBehavior(htmlEditor));
+        super(htmlEditor);
 
         getChildren().clear();
 
         gridPane = new GridPane();
         gridPane.getStyleClass().add("grid");
@@ -762,18 +758,18 @@
         fgColorButton = new ColorPicker();
         fgColorButton.getStyleClass().add("html-editor-foreground");
         fgColorButton.setFocusTraversable(false);
         toolbar1.getItems().add(fgColorButton);
 
-        fgColorButton.applyCss();
-        ColorPickerSkin fgColorPickerSkin = (ColorPickerSkin) fgColorButton.getSkin();
-        String fgIcon = AccessController.doPrivileged(new PrivilegedAction<String>() {
-            @Override public String run() {
-                return HTMLEditorSkin.class.getResource(resources.getString("foregroundColorIcon")).toString();
-            }
-        });
-        ((StyleableProperty)fgColorPickerSkin.imageUrlProperty()).applyStyle(null,fgIcon);
+        // fgColorButton.applyCss();
+        // ColorPickerSkin fgColorPickerSkin = (ColorPickerSkin) fgColorButton.getSkin();
+        // String fgIcon = AccessController.doPrivileged(new PrivilegedAction<String>() {
+            // @Override public String run() {
+                // return HTMLEditorSkin.class.getResource(resources.getString("foregroundColorIcon")).toString();
+            // }
+        // });
+        // ((StyleableProperty)fgColorPickerSkin.imageUrlProperty()).applyStyle(null,fgIcon);
 
         fgColorButton.setValue(DEFAULT_FG_COLOR);
         fgColorButton.setTooltip(new Tooltip(resources.getString("foregroundColor")));
         fgColorButton.setOnAction(new EventHandler<ActionEvent>() {
             @Override public void handle(ActionEvent ev) {
@@ -788,18 +784,18 @@
         bgColorButton = new ColorPicker();
         bgColorButton.getStyleClass().add("html-editor-background");
         bgColorButton.setFocusTraversable(false);
         toolbar1.getItems().add(bgColorButton);
 
-        bgColorButton.applyCss();
-        ColorPickerSkin  bgColorPickerSkin = (ColorPickerSkin) bgColorButton.getSkin();
-        String bgIcon = AccessController.doPrivileged(new PrivilegedAction<String>() {
-            @Override public String run() {
-                return HTMLEditorSkin.class.getResource(resources.getString("backgroundColorIcon")).toString();
-            }
-        });
-        ((StyleableProperty)bgColorPickerSkin.imageUrlProperty()).applyStyle(null,bgIcon);
+        // bgColorButton.applyCss();
+        // ColorPickerSkin  bgColorPickerSkin = (ColorPickerSkin) bgColorButton.getSkin();
+        // String bgIcon = AccessController.doPrivileged(new PrivilegedAction<String>() {
+            // @Override public String run() {
+                // return HTMLEditorSkin.class.getResource(resources.getString("backgroundColorIcon")).toString();
+            // }
+        // });
+        // ((StyleableProperty)bgColorPickerSkin.imageUrlProperty()).applyStyle(null,bgIcon);
 
         bgColorButton.setValue(DEFAULT_BG_COLOR);
         bgColorButton.setTooltip(new Tooltip(resources.getString("backgroundColor")));
 
         bgColorButton.setOnAction(new EventHandler<ActionEvent>() {
@@ -1218,6 +1214,63 @@
 
     private static final int FONT_FAMILY_MENUBUTTON_WIDTH = 150;
     private static final int FONT_FAMILY_MENU_WIDTH = 100;
     private static final int FONT_SIZE_MENUBUTTON_WIDTH = 80;
 
+    public void performCommand(final Command command) {
+        switch (command) {
+            case BOLD: boldButton.fire(); break;
+            case ITALIC: italicButton.setSelected(!italicButton.isSelected()); break;
+            case UNDERLINE: underlineButton.setSelected(!underlineButton.isSelected()); break;
+        }
+    }
+
+    public enum Command {
+        CUT("cut"),
+        COPY("copy"),
+        PASTE("paste"),
+
+        UNDO("undo"),
+        REDO("redo"),
+
+        INSERT_HORIZONTAL_RULE("inserthorizontalrule"),
+
+        ALIGN_LEFT("justifyleft"),
+        ALIGN_CENTER("justifycenter"),
+        ALIGN_RIGHT("justifyright"),
+        ALIGN_JUSTIFY("justifyfull"),
+
+        BULLETS("insertUnorderedList"),
+        NUMBERS("insertOrderedList"),
+
+        INDENT("indent"),
+        OUTDENT("outdent"),
+
+        FORMAT("formatblock"),
+        FONT_FAMILY("fontname"),
+        FONT_SIZE("fontsize"),
+
+        BOLD("bold"),
+        ITALIC("italic"),
+        UNDERLINE("underline"),
+        STRIKETHROUGH("strikethrough"),
+
+        FOREGROUND_COLOR("forecolor"),
+        BACKGROUND_COLOR("backcolor"),
+        STYLEWITHCSS("styleWithCSS"),
+
+        INSERT_NEW_LINE("insertnewline"),
+        INSERT_TAB("inserttab");
+
+        private final String command;
+
+        Command(String command) {
+            this.command = command;
+        }
+
+        public String getCommand() {
+            return command;
+        }
+    }
+
+
 }
diff a/modules/javafx.web/src/ios/java/javafx/scene/web/HTMLEditor.java b/modules/javafx.web/src/ios/java/javafx/scene/web/HTMLEditor.java
--- a/modules/javafx.web/src/ios/java/javafx/scene/web/HTMLEditor.java
+++ b/modules/javafx.web/src/ios/java/javafx/scene/web/HTMLEditor.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -24,10 +24,12 @@
  */
 
 package javafx.scene.web;
 
 
+import com.sun.javafx.scene.control.ControlHelper;
+
 import javafx.css.StyleableProperty;
 
 import javafx.scene.control.Control;
 
 import javafx.scene.control.Skin;
@@ -43,11 +45,11 @@
 
     /**
      * Creates a new instance of the HTMLEditor control.
      */
     public HTMLEditor() {
-        ((StyleableProperty)super.skinClassNameProperty()).applyStyle(
+        ((StyleableProperty) ControlHelper.skinClassNameProperty(this)).applyStyle(
             null,
             "com.sun.javafx.scene.web.skin.HTMLEditorSkin"
         );
         getStyleClass().add("html-editor");
     }
diff a/modules/javafx.web/src/ios/java/javafx/scene/web/WebView.java b/modules/javafx.web/src/ios/java/javafx/scene/web/WebView.java
--- a/modules/javafx.web/src/ios/java/javafx/scene/web/WebView.java
+++ b/modules/javafx.web/src/ios/java/javafx/scene/web/WebView.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -39,12 +39,13 @@
 import com.sun.javafx.geom.transform.Affine3D;
 import com.sun.javafx.geom.transform.BaseTransform;
 import com.sun.javafx.scene.DirtyBits;
 import com.sun.javafx.scene.NodeHelper;
 import com.sun.javafx.scene.input.PickResultChooser;
-import com.sun.java.scene.web.WebViewHelper;
 import com.sun.javafx.scene.SceneHelper;
+import com.sun.java.scene.web.WebViewHelper;
+
 import com.sun.javafx.sg.prism.NGNode;
 import com.sun.javafx.tk.TKPulseListener;
 import com.sun.javafx.tk.Toolkit;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -333,11 +334,11 @@
 
             }
 
         });
 
-        impl_treeVisibleProperty().addListener(new ChangeListener<Boolean>() {
+        NodeHelper.treeVisibleProperty(this).addListener(new ChangeListener<Boolean>() {
 
             @Override
             public void changed(ObservableValue<? extends Boolean> observable, Boolean oldValue, Boolean newValue) {
                 _setVisible(handle, newValue);
             }
@@ -1018,11 +1019,11 @@
         // the list of render queues from growing infinitely.
         // Also, if and when the WebView becomes invisible, the currently
         // pending render queues, if any, become obsolete and should be
         // discarded.
 
-        boolean reallyVisible = impl_isTreeVisible()
+        boolean reallyVisible = NodeHelper.isTreeVisible(this)
                 && getScene() != null
                 && getScene().getWindow() != null
                 && getScene().getWindow().isShowing();
 
         if (reallyVisible) {
diff a/modules/javafx.web/src/ios/java/module-info.java b/modules/javafx.web/src/ios/java/module-info.java
--- /dev/null
+++ b/modules/javafx.web/src/ios/java/module-info.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/**
+ * Defines APIs for the WebView functionality contained within the the
+ * JavaFX UI toolkit.
+ *
+ * @moduleGraph
+ * @since 9
+ */
+module javafx.web {
+    requires java.desktop;
+    requires java.net.http;
+    requires javafx.media;
+    requires jdk.jsobject;
+    requires jdk.xml.dom;
+
+    requires transitive java.xml;
+    requires transitive javafx.base;
+    requires transitive javafx.controls;
+    requires transitive javafx.graphics;
+
+    exports javafx.scene.web;
+
+}
