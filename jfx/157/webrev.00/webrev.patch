diff a/modules/javafx.controls/src/android/java/com/sun/javafx/scene/control/skin/TextAreaSkinAndroid.java b/modules/javafx.controls/src/android/java/com/sun/javafx/scene/control/skin/TextAreaSkinAndroid.java
--- a/modules/javafx.controls/src/android/java/com/sun/javafx/scene/control/skin/TextAreaSkinAndroid.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Copyright (c) 2013, 2015, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-package com.sun.javafx.scene.control.skin;
-
-import javafx.beans.value.ChangeListener;
-import javafx.beans.value.ObservableValue;
-import javafx.scene.control.TextArea;
-import javafx.scene.control.skin.TextAreaSkin;
-
-public class TextAreaSkinAndroid extends TextAreaSkin {
-
-    public TextAreaSkinAndroid(final TextArea textArea) {
-        super(textArea);
-
-        textArea.focusedProperty().addListener(new ChangeListener<Boolean>() {
-            public void changed(ObservableValue<? extends Boolean> observable,
-                    Boolean wasFocused, Boolean isFocused) {
-                if (textArea.isEditable()) {
-                    if (isFocused) {
-                        com.sun.glass.ui.android.SoftwareKeyboard.show();
-                    } else {
-                        com.sun.glass.ui.android.SoftwareKeyboard.hide();
-                    }
-                }
-            }
-        });
-    }
-}
diff a/modules/javafx.controls/src/android/java/com/sun/javafx/scene/control/skin/TextFieldSkinAndroid.java b/modules/javafx.controls/src/android/java/com/sun/javafx/scene/control/skin/TextFieldSkinAndroid.java
--- a/modules/javafx.controls/src/android/java/com/sun/javafx/scene/control/skin/TextFieldSkinAndroid.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright (c) 2013, 2015, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-package com.sun.javafx.scene.control.skin;
-
-import javafx.beans.value.ChangeListener;
-import javafx.beans.value.ObservableValue;
-import javafx.scene.control.TextField;
-
-import com.sun.javafx.scene.control.behavior.TextFieldBehavior;
-import javafx.scene.control.skin.TextFieldSkin;
-
-public class TextFieldSkinAndroid extends TextFieldSkin {
-
-    public TextFieldSkinAndroid(final TextField textField) {
-        super(textField);
-
-        textField.focusedProperty().addListener(new ChangeListener<Boolean>() {
-            public void changed(ObservableValue<? extends Boolean> observable,
-                    Boolean wasFocused, Boolean isFocused) {
-                if (textField.isEditable()) {
-                    if (isFocused) {
-                        com.sun.glass.ui.android.SoftwareKeyboard.show();
-                    } else {
-                        com.sun.glass.ui.android.SoftwareKeyboard.hide();
-                    }
-                }
-            }
-        });
-    }
-
-    public TextFieldSkinAndroid(final TextField textField, final TextFieldBehavior behavior) {
-        super(textField, behavior);
-    }
-}
diff a/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextAreaSkinAndroid.java b/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextAreaSkinAndroid.java
--- /dev/null
+++ b/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextAreaSkinAndroid.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package javafx.scene.control.skin;
+
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
+import javafx.scene.control.TextArea;
+import javafx.scene.control.skin.TextAreaSkin;
+
+public class TextAreaSkinAndroid extends TextAreaSkin {
+
+    public TextAreaSkinAndroid(final TextArea textArea) {
+        super(textArea);
+
+        textArea.focusedProperty().addListener(new ChangeListener<Boolean>() {
+            public void changed(ObservableValue<? extends Boolean> observable,
+                    Boolean wasFocused, Boolean isFocused) {
+                if (textArea.isEditable()) {
+                    if (isFocused) {
+                        showSoftwareKeyboard();
+                    } else {
+                        hideSoftwareKeyboard();
+                    }
+                }
+            }
+        });
+    }
+
+    native void showSoftwareKeyboard();
+    native void hideSoftwareKeyboard();
+
+}
diff a/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextFieldSkinAndroid.java b/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextFieldSkinAndroid.java
--- /dev/null
+++ b/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextFieldSkinAndroid.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package javafx.scene.control.skin;
+
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.ObservableValue;
+import javafx.scene.control.TextField;
+
+import com.sun.javafx.scene.control.behavior.TextFieldBehavior;
+import javafx.scene.control.skin.TextFieldSkin;
+
+public class TextFieldSkinAndroid extends TextFieldSkin {
+
+    public TextFieldSkinAndroid(final TextField textField) {
+        super(textField);
+
+        textField.focusedProperty().addListener(new ChangeListener<Boolean>() {
+            public void changed(ObservableValue<? extends Boolean> observable,
+                    Boolean wasFocused, Boolean isFocused) {
+                if (textField.isEditable()) {
+                    if (isFocused) {
+                        showSoftwareKeyboard();
+                    } else {
+                        hideSoftwareKeyboard();
+                    }
+                }
+            }
+        });
+    }
+
+    native void showSoftwareKeyboard();
+    native void hideSoftwareKeyboard();
+
+}
diff a/modules/javafx.controls/src/android/resources/com/sun/javafx/scene/control/skin/caspian/android.css b/modules/javafx.controls/src/android/resources/com/sun/javafx/scene/control/skin/caspian/android.css
--- a/modules/javafx.controls/src/android/resources/com/sun/javafx/scene/control/skin/caspian/android.css
+++ b/modules/javafx.controls/src/android/resources/com/sun/javafx/scene/control/skin/caspian/android.css
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -35,19 +35,19 @@
  * TextField                                                                   *
  *                                                                             *
  ******************************************************************************/
 
 .text-field {
-    -fx-skin: "com.sun.javafx.scene.control.skin.TextFieldSkinAndroid";
+    -fx-skin: "javafx.scene.control.skin.TextFieldSkinAndroid";
 }
 
 
 /*******************************************************************************
  *                                                                             *
  * TextArea                                                                    *
  *                                                                             *
  ******************************************************************************/
 
 .text-area {
-    -fx-skin: "com.sun.javafx.scene.control.skin.TextAreaSkinAndroid";
+    -fx-skin: "javafx.scene.control.skin.TextAreaSkinAndroid";
 }
 
diff a/modules/javafx.controls/src/android/resources/com/sun/javafx/scene/control/skin/modena/android.css b/modules/javafx.controls/src/android/resources/com/sun/javafx/scene/control/skin/modena/android.css
--- a/modules/javafx.controls/src/android/resources/com/sun/javafx/scene/control/skin/modena/android.css
+++ b/modules/javafx.controls/src/android/resources/com/sun/javafx/scene/control/skin/modena/android.css
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2013 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -35,19 +35,19 @@
  * TextField                                                                   *
  *                                                                             *
  ******************************************************************************/
 
 .text-field {
-    -fx-skin: "com.sun.javafx.scene.control.skin.TextFieldSkinAndroid";
+    -fx-skin: "javafx.scene.control.skin.TextFieldSkinAndroid";
 }
 
 
 /*******************************************************************************
  *                                                                             *
  * TextArea                                                                    *
  *                                                                             *
  ******************************************************************************/
 
 .text-area {
-    -fx-skin: "com.sun.javafx.scene.control.skin.TextAreaSkinAndroid";
+    -fx-skin: "javafx.scene.control.skin.TextAreaSkinAndroid";
 }
 
diff a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/AndroidInputDeviceRegistry.java b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/AndroidInputDeviceRegistry.java
--- a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/AndroidInputDeviceRegistry.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/AndroidInputDeviceRegistry.java
@@ -75,10 +75,14 @@
         }
         processor.pushEvent(touchState);
     }
 
 
+    public static void dispatchKeyEventFromNative(int type, int key, char[] chars, int modifiers) {
+        instance.processor.dispatchKeyEvent(type, key, chars, modifiers);
+    }
+
     public static void gotKeyEventFromNative(int action, int linuxKey) {
         instance.gotKeyEvent (action, linuxKey);
     }
 
     private void gotKeyEvent(int action, int lk) {
diff a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/AndroidInputProcessor.java b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/AndroidInputProcessor.java
--- a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/AndroidInputProcessor.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/AndroidInputProcessor.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -22,10 +22,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package com.sun.glass.ui.monocle;
 
+import javafx.application.Platform;
+
 class AndroidInputProcessor {
 
     private final AndroidInputDevice device;
     final TouchPipeline touchPipeline;
     private final KeyInput keyInput = new KeyInput();
@@ -52,6 +54,20 @@
 
     synchronized void pushKeyEvent(KeyState keyState) {
         keyInput.setState(keyState);
     }
 
+    synchronized void dispatchKeyEvent(int type, int key, char[] chars, int modifiers) {
+        Platform.runLater( () -> {
+            MonocleWindow window = (MonocleWindow) MonocleWindowManager.getInstance().getFocusedWindow();
+            if (window == null) {
+                return;
+            }
+            MonocleView view = (MonocleView) window.getView();
+            if (view == null) {
+                return;
+            }
+            RunnableProcessor.runLater( () ->  view.notifyKey(type, key, chars, modifiers));
+        });
+    }
+
 }
diff a/modules/javafx.graphics/src/main/native-glass/monocle/android/nativeBridge.c b/modules/javafx.graphics/src/main/native-glass/monocle/android/nativeBridge.c
--- a/modules/javafx.graphics/src/main/native-glass/monocle/android/nativeBridge.c
+++ b/modules/javafx.graphics/src/main/native-glass/monocle/android/nativeBridge.c
@@ -33,11 +33,11 @@
 
 static jclass jAndroidInputDeviceRegistryClass;
 static jclass jMonocleWindowManagerClass;
 
 static jmethodID monocle_gotTouchEventFromNative;
-static jmethodID monocle_gotKeyEventFromNative;
+static jmethodID monocle_dispatchKeyEventFromNative;
 static jmethodID monocle_repaintAll;
 static jmethodID monocle_registerDevice;
 
 ANativeWindow* androidWindow = NULL;
 jfloat androidDensity = 0.f;
@@ -55,13 +55,13 @@
                                             env, jMonocleWindowManagerClass, "repaintFromNative",
                                             "()V");
     monocle_gotTouchEventFromNative = (*env)->GetStaticMethodID(
                                             env, jAndroidInputDeviceRegistryClass, "gotTouchEventFromNative",
                                             "(I[I[I[I[II)V");
-    monocle_gotKeyEventFromNative = (*env)->GetStaticMethodID(
-                                            env, jAndroidInputDeviceRegistryClass, "gotKeyEventFromNative",
-                                            "(II)V");
+    monocle_dispatchKeyEventFromNative = (*env)->GetStaticMethodID(
+                                            env, jAndroidInputDeviceRegistryClass, "dispatchKeyEventFromNative",
+                                            "(II[CI)V");
     monocle_registerDevice = (*env)->GetStaticMethodID(env, jAndroidInputDeviceRegistryClass, "registerDevice","()V");
     GLASS_LOG_FINE("Initializing native Android Bridge done");
 }
 
 void initializeFromNative () {
@@ -114,11 +114,27 @@
     jintArray jys = (*javaEnv)->NewIntArray(javaEnv, count);
     (*javaEnv)->SetIntArrayRegion(javaEnv, jys, 0, count, ys);
 
     (*javaEnv)->CallStaticVoidMethod(javaEnv, jAndroidInputDeviceRegistryClass, monocle_gotTouchEventFromNative,
             jcount, jactions, jids, jxs, jys, primary);
+}
 
+void androidJfx_gotKeyEvent (int action, int keyCode, jchar* chars, int count, int mods) {
+    initializeFromNative();
+    if (javaEnv == NULL) {
+        GLASS_LOG_FINE("javaEnv still null, not ready to process touch events");
+        return;
+    }
+    if (deviceRegistered == 0) {
+        deviceRegistered = 1;
+        GLASS_LOG_FINE("This is the first time we have a touch even, register device now");
+        (*javaEnv)->CallStaticVoidMethod(javaEnv, jAndroidInputDeviceRegistryClass, monocle_registerDevice);
+    }
+    jcharArray jchars = (*javaEnv)->NewCharArray(javaEnv, count);
+    (*javaEnv)->SetCharArrayRegion(javaEnv, jchars, 0, count, chars);
+    (*javaEnv)->CallStaticVoidMethod(javaEnv, jAndroidInputDeviceRegistryClass, monocle_dispatchKeyEventFromNative,
+                                     action, keyCode, jchars, mods);
 }
 
 void androidJfx_requestGlassToRedraw() {
     GLASS_LOG_FINEST("Native code is notified that surface needs to be redrawn (repaintall)");
     if (jVM == NULL) {
