diff a/tests/system/src/test/java/test/javafx/scene/Snapshot2Test.java b/tests/system/src/test/java/test/javafx/scene/Snapshot2Test.java
--- a/tests/system/src/test/java/test/javafx/scene/Snapshot2Test.java
+++ b/tests/system/src/test/java/test/javafx/scene/Snapshot2Test.java
@@ -252,16 +252,18 @@
         Util.runAndWait(() -> {
             WritableImage image = new WritableImage(width, height);
             // Initialize image with noise
             var pixWriter = image.getPixelWriter();
             assertNotNull(pixWriter);
-            IntStream.range(0, width).parallel()
-                    .forEach(x -> IntStream.range(0, height).parallel()
-                            .forEach(y -> pixWriter.setColor(x, y, Color.rgb(
-                                    ThreadLocalRandom.current().nextInt(0, 256),
-                                    ThreadLocalRandom.current().nextInt(0, 256),
-                                    ThreadLocalRandom.current().nextInt(0, 256)))));
+            for (int x = 0; x < width; x++) {
+                for (int y = 0; y < height; y++) {
+                    pixWriter.setColor(x, y, Color.rgb(
+                            ThreadLocalRandom.current().nextInt(0, 256),
+                            ThreadLocalRandom.current().nextInt(0, 256),
+                            ThreadLocalRandom.current().nextInt(0, 256)));
+                }
+            }
             tmpNode = new ImageView(image);
             Group root = new Group();
             tmpScene = new Scene(root, width, height);
             root.getChildren().add(tmpNode);
             if (live) {
@@ -400,13 +402,18 @@
         if (height != (int)imageB.getHeight()) {
             return false;
         }
         var pixRdrA = imageA.getPixelReader();
         var pixRdrB = imageB.getPixelReader();
-        return IntStream.range(0, width).parallel()
-                .allMatch(x -> IntStream.range(0, height).parallel()
-                        .allMatch(y -> pixRdrA.getArgb(x, y) == pixRdrB.getArgb(x, y)));
+        for (int x = 0; x < width; x++) {
+            for (int y = 0; y < height; y++) {
+                if (pixRdrA.getArgb(x, y) != pixRdrB.getArgb(x, y)) {
+                    return false;
+                }
+            }
+        }
+        return true;
     }
 
     @Test
     public void testSnapshot2x1TilesSameSizeImm() {
         doTestTiledSnapshotImm(4100, 10);
