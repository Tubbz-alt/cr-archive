diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/QuantumToolkit.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/QuantumToolkit.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/QuantumToolkit.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/QuantumToolkit.java
@@ -1552,23 +1552,24 @@
                     return;
                 }
 
                 boolean errored = false;
                 // A temp QuantumImage used only as a RTT cache for rendering tiles.
-                var tileRttCache = new QuantumImage((com.sun.prism.Image) null);
+                QuantumImage tileRttCache = null;
                 try {
                     QuantumImage pImage = (params.platformImage instanceof QuantumImage) ?
                             (QuantumImage) params.platformImage : new QuantumImage((com.sun.prism.Image) null);
 
                     int maxTextureSize = rf.getMaximumTextureSize();
                     if (h > maxTextureSize || w > maxTextureSize) {
-                        // The requested size for the screenshot is too big to fit a single texture,
+                        tileRttCache = new QuantumImage((com.sun.prism.Image) null);
+                        // The requested size for the snapshot is too big to fit a single texture,
                         // so we need to take several snapshot tiles and merge them into pImage
                         if (pImage.image == null) {
                             pImage.setImage(com.sun.prism.Image.fromIntArgbPreData(IntBuffer.allocate(w * h), w, h));
                         }
-                        // Find out if it is possible to divide up the image in tiles of the same size
+                        // Determine the initial dimensions of the tiles
                         int tileWidth = computeTileSize(w, maxTextureSize);
                         int tileHeight = computeTileSize(h, maxTextureSize);
                         IntBuffer buffer = IntBuffer.allocate(tileWidth * tileHeight);
 
                         // M represents the middle set of tiles each with a size of tileW x tileH.
@@ -1630,20 +1631,22 @@
                         if (mTileWidth > 0 && mTileHeight > 0 && rOffset > 0 && bOffset > 0) {
                             renderTile(x, bOffset, y, rOffset, bTileWidth, rTileHeight, buffer, rf, tileRttCache, pImage);
                         }
                     }
                     else {
-                        // The requested size for the screenshot fits max texture size,
+                        // The requested size for the snapshot fits max texture size,
                         // so we can directly render it in the target image.
                         renderWholeImage(x, y, w, h, rf, pImage);
                     }
                     params.platformImage = pImage;
                 } catch (Throwable t) {
                     errored = true;
                     t.printStackTrace(System.err);
                 } finally {
-                    tileRttCache.dispose();
+                    if (tileRttCache != null) {
+                        tileRttCache.dispose();
+                    }
                     Disposer.cleanUp();
                     rf.getTextureResourcePool().freeDisposalRequestedAndCheckResources(errored);
                 }
             }
         });
diff a/tests/system/src/test/java/test/javafx/scene/Snapshot2Test.java b/tests/system/src/test/java/test/javafx/scene/Snapshot2Test.java
--- a/tests/system/src/test/java/test/javafx/scene/Snapshot2Test.java
+++ b/tests/system/src/test/java/test/javafx/scene/Snapshot2Test.java
@@ -25,12 +25,10 @@
 
 package test.javafx.scene;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.concurrent.ThreadLocalRandom;
-import java.util.stream.IntStream;
 
 import javafx.animation.Interpolator;
 import javafx.geometry.Rectangle2D;
 import javafx.scene.Group;
 import javafx.scene.Node;
