diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/QuantumToolkit.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/QuantumToolkit.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/QuantumToolkit.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/QuantumToolkit.java
@@ -1476,10 +1476,66 @@
                     ngNode.render(g);
                 }
 
             }
 
+            private void renderTile(int x, int xOffset, int y, int yOffset, int w, int h,
+                                    IntBuffer buffer, ResourceFactory rf, QuantumImage tileImg, QuantumImage targetImg) {
+                RTTexture rt = tileImg.getRT(w, h, rf);
+                if (rt == null) {
+                    return;
+                }
+                Graphics g = rt.createGraphics();
+                draw(g, x + xOffset, y + yOffset, w, h);
+                int[] pixels = rt.getPixels();
+                if (pixels != null) {
+                    buffer.put(pixels);
+                } else {
+                    rt.readPixels(buffer, rt.getContentX(), rt.getContentY(), w, h);
+                }
+                //Copy tile's pixels into the target image
+                targetImg.image.setPixels(xOffset, yOffset, w, h,
+                        javafx.scene.image.PixelFormat.getIntArgbPreInstance(), buffer, w);
+                rt.unlock();
+            }
+
+            private void renderWholeImage(int x, int y, int w, int h, ResourceFactory rf, QuantumImage pImage) {
+                RTTexture rt = pImage.getRT(w, h, rf);
+                if (rt == null) {
+                    return;
+                }
+                Graphics g = rt.createGraphics();
+                draw(g, x, y, w, h);
+                int[] pixels = rt.getPixels();
+                if (pixels != null) {
+                    pImage.setImage(com.sun.prism.Image.fromIntArgbPreData(pixels, w, h));
+                } else {
+                    IntBuffer ib = IntBuffer.allocate(w * h);
+                    if (rt.readPixels(ib, rt.getContentX(), rt.getContentY(), w, h)) {
+                        pImage.setImage(com.sun.prism.Image.fromIntArgbPreData(ib, w, h));
+                    } else {
+                        pImage.dispose();
+                        pImage = null;
+                    }
+                }
+                rt.unlock();
+            }
+
+
+            private int computeTileSize(int size, int maxSize) {
+                // If 'size' divided by either 2 or 3 produce an exact result
+                // and is lesser that the specified maxSize, then use this value
+                // as the tile size, as this makes the tiling process more efficient.
+                for (int n = 1; n <= 3; n++) {
+                    int optimumSize = size / n;
+                    if (optimumSize <= maxSize && optimumSize * n == size) {
+                        return optimumSize;
+                    }
+                }
+                return maxSize;
+            }
+
             @Override
             public void run() {
 
                 ResourceFactory rf = GraphicsPipeline.getDefaultResourceFactory();
 
@@ -1495,48 +1551,95 @@
                 if (w <= 0 || h <= 0) {
                     return;
                 }
 
                 boolean errored = false;
+                // A temp QuantumImage used only as a RTT cache for rendering tiles.
+                var tileRttCache = new QuantumImage((com.sun.prism.Image) null);
                 try {
                     QuantumImage pImage = (params.platformImage instanceof QuantumImage) ?
-                            (QuantumImage)params.platformImage : new QuantumImage((com.sun.prism.Image)null);
-
-                    com.sun.prism.RTTexture rt = pImage.getRT(w, h, rf);
-
-                    if (rt == null) {
-                        return;
-                    }
-
-                    Graphics g = rt.createGraphics();
-
-                    draw(g, x, y, w, h);
-
-                    int[] pixels = pImage.rt.getPixels();
-
-                    if (pixels != null) {
-                        pImage.setImage(com.sun.prism.Image.fromIntArgbPreData(pixels, w, h));
-                    } else {
-                        IntBuffer ib = IntBuffer.allocate(w*h);
-                        if (pImage.rt.readPixels(ib, pImage.rt.getContentX(),
-                                pImage.rt.getContentY(), w, h))
-                        {
-                            pImage.setImage(com.sun.prism.Image.fromIntArgbPreData(ib, w, h));
-                        } else {
-                            pImage.dispose();
-                            pImage = null;
+                            (QuantumImage) params.platformImage : new QuantumImage((com.sun.prism.Image) null);
+
+                    int maxTextureSize = rf.getMaximumTextureSize();
+                    if (h > maxTextureSize || w > maxTextureSize) {
+                        // The requested size for the screenshot is too big to fit a single texture,
+                        // so we need to take several snapshot tiles and merge them into pImage
+                        if (pImage.image == null) {
+                            pImage.setImage(com.sun.prism.Image.fromIntArgbPreData(IntBuffer.allocate(w * h), w, h));
+                        }
+                        // Find out if it is possible to divide up the image in tiles of the same size
+                        int tileWidth = computeTileSize(w, maxTextureSize);
+                        int tileHeight = computeTileSize(h, maxTextureSize);
+                        IntBuffer buffer = IntBuffer.allocate(tileWidth * tileHeight);
+
+                        // M represents the middle set of tiles each with a size of tileW x tileH.
+                        // R is the right hand column of tiles,
+                        // B is the bottom row,
+                        // C is the corner:
+                        // +-----------+-----------+  .  +-------+
+                        // |           |           |  .  |       |
+                        // |     M     |     M     |  .  |   R   |
+                        // |           |           |  .  |       |
+                        // +-----------+-----------+  .  +-------+
+                        // |           |           |  .  |       |
+                        // |     M     |     M     |  .  |   R   |
+                        // |           |           |  .  |       |
+                        // +-----------+-----------+  .  +-------+
+                        //       .           .        .      .
+                        // +-----------+-----------+  .  +-------+
+                        // |     B     |     B     |  .  |   C   |
+                        // +-----------+-----------+  .  +-------+
+
+                        // Walk through all same-size "M" tiles
+                        int xOffset = 0;
+                        int yOffset = 0;
+                        var mTileWidth = tileWidth;
+                        var mTileHeight = tileHeight;
+                        while (mTileWidth == tileWidth && xOffset < w) {
+                            yOffset = 0;
+                            mTileHeight = tileHeight;
+                            while (mTileHeight == tileHeight && yOffset < h) {
+                                renderTile(x, xOffset, y, yOffset, mTileWidth, mTileHeight,
+                                        buffer, rf, tileRttCache, pImage);
+                                yOffset += tileHeight;
+                                mTileHeight = Math.min(tileHeight, h - yOffset);
+                            }
+                            xOffset += tileWidth;
+                            mTileWidth = Math.min(tileWidth, w - xOffset);
+                        }
+                        // Walk through remaining same-width "B" tiles, if any
+                        int bOffset = 0;
+                        int bTileHeight = tileHeight;
+                        while (bTileHeight == tileHeight && bOffset < h) {
+                            renderTile(x, xOffset, y, bOffset, mTileWidth, bTileHeight, buffer, rf, tileRttCache, pImage);
+                            bOffset += tileHeight;
+                            bTileHeight = Math.min(tileHeight, h - bOffset);
+                        }
+                        // Walk through remaining same-height "R" tiles, if any
+                        int rOffset = 0;
+                        int rTileWidth = tileWidth;
+                        while (rTileWidth == tileWidth && rOffset < w) {
+                            renderTile(x, rOffset, y, yOffset, rTileWidth, mTileHeight, buffer, rf, tileRttCache, pImage);
+                            rOffset += tileWidth;
+                            rTileWidth = Math.min(tileWidth, w - rOffset);
+                        }
+                        // Render corner "C" tile if needed
+                        if (bOffset > 0 && rOffset > 0) {
+                            renderTile(x, rOffset, y, bOffset, rTileWidth, bTileHeight, buffer, rf, tileRttCache, pImage);
                         }
                     }
-
-                    rt.unlock();
-
+                    else {
+                        // The requested size for the screenshot fits max texture size,
+                        // so we can directly render it in the target image.
+                        renderWholeImage(x, y, w, h, rf, pImage);
+                    }
                     params.platformImage = pImage;
-
                 } catch (Throwable t) {
                     errored = true;
                     t.printStackTrace(System.err);
                 } finally {
+                    tileRttCache.dispose();
                     Disposer.cleanUp();
                     rf.getTextureResourcePool().freeDisposalRequestedAndCheckResources(errored);
                 }
             }
         });
diff a/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java b/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
@@ -1283,10 +1283,13 @@
     static WritableImage doSnapshot(Scene scene,
             double x, double y, double w, double h,
             Node root, BaseTransform transform, boolean depthBuffer,
             Paint fill, Camera camera, WritableImage wimg) {
 
+        Toolkit tk = Toolkit.getToolkit();
+        Toolkit.ImageRenderingContext context = new Toolkit.ImageRenderingContext();
+
         int xMin = (int)Math.floor(x);
         int yMin = (int)Math.floor(y);
         int width;
         int height;
         if (wimg == null) {
@@ -1298,72 +1301,27 @@
         } else {
             width = (int)wimg.getWidth();
             height = (int)wimg.getHeight();
         }
 
-        // Attempt to capture snapshot
-        try {
-            wimg = doSnapshotTile(scene, xMin, yMin, width, height, root, transform, depthBuffer, fill, camera, wimg);
-        } catch (Exception e) {
-            // A first attempt to capture a snapshot failed, most likely because it is larger than
-            // maxTextureSize: retry by taking several snapshot tiles and merge them into single image
-            // (Addresses JDK-8088198)
-            int maxTextureSize = PrismSettings.maxTextureSize;
-            int numVerticalTiles = (int) Math.ceil(height / (double) maxTextureSize);
-            int numHorizontalTiles = (int) Math.ceil(width / (double) maxTextureSize);
-            for (int i = 0; i < numHorizontalTiles; i++) {
-                int xOffset = i * maxTextureSize;
-                int tileWidth = Math.min(maxTextureSize, width - xOffset);
-                for (int j = 0; j < numVerticalTiles; j++) {
-                    int yOffset = j * maxTextureSize;
-                    int tileHeight = Math.min(maxTextureSize, height - yOffset);
-                    WritableImage tile = doSnapshotTile(scene, xMin + xOffset, yMin + yOffset, tileWidth,
-                            tileHeight, root, transform, depthBuffer, fill, camera, null);
-                    wimg.getPixelWriter().setPixels(xOffset, yOffset, tileWidth, tileHeight, tile.getPixelReader(), 0, 0);
-                }
-            }
-        }
-
-        // if this scene belongs to some stage
-        // we need to mark the entire scene as dirty
-        // because dirty logic is buggy
-        if (scene != null && scene.peer != null) {
-            scene.setNeedsRepaint();
-        }
-
-        return wimg;
-    }
-
-    /**
-     * Capture a single snapshot tile
-     */
-    private static WritableImage doSnapshotTile(Scene scene,
-                    int x, int y, int w, int h,
-                    Node root, BaseTransform transform, boolean depthBuffer,
-                    Paint fill, Camera camera, WritableImage tileImg) {
-        Toolkit tk = Toolkit.getToolkit();
-        Toolkit.ImageRenderingContext context = new Toolkit.ImageRenderingContext();
-        if (tileImg == null) {
-            tileImg = new WritableImage(w, h);
-        }
         setAllowPGAccess(true);
-        context.x = x;
-        context.y = y;
-        context.width = w;
-        context.height = h;
+        context.x = xMin;
+        context.y = yMin;
+        context.width = width;
+        context.height = height;
         context.transform = transform;
         context.depthBuffer = depthBuffer;
         context.root = root.getPeer();
         context.platformPaint = fill == null ? null : tk.getPaint(fill);
         double cameraViewWidth = 1.0;
         double cameraViewHeight = 1.0;
         if (camera != null) {
             // temporarily adjust camera viewport to the snapshot size
             cameraViewWidth = camera.getViewWidth();
             cameraViewHeight = camera.getViewHeight();
-            camera.setViewWidth(w);
-            camera.setViewHeight(h);
+            camera.setViewWidth(width);
+            camera.setViewHeight(height);
             NodeHelper.updatePeer(camera);
             context.camera = camera.getPeer();
         } else {
             context.camera = null;
         }
@@ -1376,23 +1334,31 @@
                 context.lights[i] = scene.lights.get(i).getPeer();
             }
         }
 
         Toolkit.WritableImageAccessor accessor = Toolkit.getWritableImageAccessor();
-        context.platformImage = accessor.getTkImageLoader(tileImg);
+        context.platformImage = accessor.getTkImageLoader(wimg);
         setAllowPGAccess(false);
         Object tkImage = tk.renderToImage(context);
-        accessor.loadTkImage(tileImg, tkImage);
+        accessor.loadTkImage(wimg, tkImage);
 
         if (camera != null) {
             setAllowPGAccess(true);
             camera.setViewWidth(cameraViewWidth);
             camera.setViewHeight(cameraViewHeight);
             NodeHelper.updatePeer(camera);
             setAllowPGAccess(false);
         }
-        return tileImg;
+
+        // if this scene belongs to some stage
+        // we need to mark the entire scene as dirty
+        // because dirty logic is buggy
+        if (scene != null && scene.peer != null) {
+            scene.setNeedsRepaint();
+        }
+
+        return wimg;
     }
 
     /**
      * Implementation method for snapshot
      */
