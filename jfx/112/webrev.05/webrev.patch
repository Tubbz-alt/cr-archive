diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/QuantumToolkit.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/QuantumToolkit.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/QuantumToolkit.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/QuantumToolkit.java
@@ -23,118 +23,67 @@
  * questions.
  */
 
 package com.sun.javafx.tk.quantum;
 
-import javafx.application.ConditionalFeature;
-import javafx.geometry.Dimension2D;
-import javafx.scene.image.Image;
-import javafx.scene.image.PixelBuffer;
-import javafx.scene.input.Dragboard;
-import javafx.scene.input.InputMethodRequests;
-import javafx.scene.input.KeyCode;
-import javafx.scene.input.KeyEvent;
-import javafx.scene.input.TransferMode;
-import javafx.scene.paint.Color;
-import javafx.scene.paint.CycleMethod;
-import javafx.scene.paint.ImagePattern;
-import javafx.scene.paint.LinearGradient;
-import javafx.scene.paint.RadialGradient;
-import javafx.scene.paint.Stop;
-import javafx.scene.shape.ClosePath;
-import javafx.scene.shape.CubicCurveTo;
-import javafx.scene.shape.FillRule;
-import javafx.scene.shape.LineTo;
-import javafx.scene.shape.MoveTo;
-import javafx.scene.shape.PathElement;
-import javafx.scene.shape.QuadCurveTo;
-import javafx.scene.shape.SVGPath;
-import javafx.scene.shape.StrokeLineCap;
-import javafx.scene.shape.StrokeLineJoin;
-import javafx.scene.shape.StrokeType;
-import javafx.stage.FileChooser;
-import javafx.stage.Modality;
-import javafx.stage.StageStyle;
-import javafx.stage.Window;
-import java.io.File;
-import java.io.InputStream;
-import java.nio.Buffer;
-import java.nio.ByteBuffer;
-import java.nio.IntBuffer;
-import java.security.AccessControlContext;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.Future;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.function.Supplier;
-import com.sun.glass.ui.Application;
 import com.sun.glass.ui.Clipboard;
-import com.sun.glass.ui.ClipboardAssistance;
-import com.sun.glass.ui.CommonDialogs;
-import com.sun.glass.ui.CommonDialogs.FileChooserResult;
-import com.sun.glass.ui.EventLoop;
-import com.sun.glass.ui.GlassRobot;
-import com.sun.glass.ui.Screen;
+import com.sun.glass.ui.*;
 import com.sun.glass.ui.Timer;
-import com.sun.glass.ui.View;
+import com.sun.glass.ui.CommonDialogs.FileChooserResult;
 import com.sun.javafx.PlatformUtil;
 import com.sun.javafx.application.PlatformImpl;
 import com.sun.javafx.embed.HostInterface;
 import com.sun.javafx.geom.Path2D;
 import com.sun.javafx.geom.PathIterator;
 import com.sun.javafx.geom.Shape;
 import com.sun.javafx.geom.transform.BaseTransform;
+import com.sun.javafx.logging.PulseLogger;
 import com.sun.javafx.perf.PerformanceTracker;
 import com.sun.javafx.runtime.async.AbstractRemoteResource;
 import com.sun.javafx.runtime.async.AsyncOperationListener;
+import com.sun.javafx.scene.input.DragboardHelper;
 import com.sun.javafx.scene.text.TextLayoutFactory;
 import com.sun.javafx.sg.prism.NGNode;
-import com.sun.javafx.tk.AppletWindow;
-import com.sun.javafx.tk.CompletionListener;
-import com.sun.javafx.tk.FileChooserType;
-import com.sun.javafx.tk.FontLoader;
-import com.sun.javafx.tk.ImageLoader;
-import com.sun.javafx.tk.PlatformImage;
-import com.sun.javafx.tk.RenderJob;
-import com.sun.javafx.tk.ScreenConfigurationAccessor;
-import com.sun.javafx.tk.TKClipboard;
-import com.sun.javafx.tk.TKDragGestureListener;
-import com.sun.javafx.tk.TKDragSourceListener;
-import com.sun.javafx.tk.TKDropTargetListener;
-import com.sun.javafx.tk.TKScene;
-import com.sun.javafx.tk.TKScreenConfigurationListener;
-import com.sun.javafx.tk.TKStage;
-import com.sun.javafx.tk.TKSystemMenu;
-import com.sun.javafx.tk.Toolkit;
-import com.sun.prism.BasicStroke;
-import com.sun.prism.Graphics;
-import com.sun.prism.GraphicsPipeline;
-import com.sun.prism.PixelFormat;
-import com.sun.prism.RTTexture;
-import com.sun.prism.ResourceFactory;
-import com.sun.prism.ResourceFactoryListener;
+import com.sun.javafx.tk.*;
+import com.sun.prism.*;
 import com.sun.prism.Texture.WrapMode;
 import com.sun.prism.impl.Disposer;
 import com.sun.prism.impl.PrismSettings;
 import com.sun.scenario.DelayedRunnable;
 import com.sun.scenario.animation.AbstractMasterTimer;
 import com.sun.scenario.effect.FilterContext;
 import com.sun.scenario.effect.Filterable;
 import com.sun.scenario.effect.impl.prism.PrFilterContext;
 import com.sun.scenario.effect.impl.prism.PrImage;
-import com.sun.javafx.logging.PulseLogger;
+import javafx.application.ConditionalFeature;
+import javafx.geometry.Dimension2D;
+import javafx.scene.image.Image;
+import javafx.scene.image.PixelBuffer;
+import javafx.scene.input.*;
+import javafx.scene.paint.*;
+import javafx.scene.shape.*;
+import javafx.stage.FileChooser;
+import javafx.stage.Modality;
+import javafx.stage.StageStyle;
+import javafx.stage.Window;
+
+import java.io.File;
+import java.io.InputStream;
+import java.nio.Buffer;
+import java.nio.ByteBuffer;
+import java.nio.IntBuffer;
+import java.security.AccessControlContext;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
+import java.util.*;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.function.Supplier;
+
 import static com.sun.javafx.logging.PulseLogger.PULSE_LOGGING_ENABLED;
-import com.sun.javafx.scene.input.DragboardHelper;
 
 public final class QuantumToolkit extends Toolkit {
 
     public static final boolean verbose =
             AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.getBoolean("quantum.verbose"));
@@ -1476,10 +1425,78 @@
                     ngNode.render(g);
                 }
 
             }
 
+            private void renderTile(int x, int xOffset, int y, int yOffset, int w, int h,
+                                    IntBuffer buffer, ResourceFactory rf, QuantumImage tileImg, QuantumImage targetImg) {
+                RTTexture rt = tileImg.getRT(w, h, rf);
+                if (rt == null) {
+                    return;
+                }
+                Graphics g = rt.createGraphics();
+                draw(g, x + xOffset, y + yOffset, w, h);
+                int[] pixels = rt.getPixels();
+                if (pixels != null) {
+                    buffer.put(pixels);
+                } else {
+                    rt.readPixels(buffer, rt.getContentX(), rt.getContentY(), w, h);
+                }
+                //Copy tile's pixels into the target image
+                targetImg.image.setPixels(xOffset, yOffset, w, h,
+                        javafx.scene.image.PixelFormat.getIntArgbPreInstance(), buffer, w);
+                rt.unlock();
+            }
+
+            private void renderWholeImage(int x, int y, int w, int h, ResourceFactory rf, QuantumImage pImage) {
+                RTTexture rt = pImage.getRT(w, h, rf);
+                if (rt == null) {
+                    return;
+                }
+                Graphics g = rt.createGraphics();
+                draw(g, x, y, w, h);
+                int[] pixels = rt.getPixels();
+                if (pixels != null) {
+                    pImage.setImage(com.sun.prism.Image.fromIntArgbPreData(pixels, w, h));
+                } else {
+                    IntBuffer ib = IntBuffer.allocate(w * h);
+                    if (rt.readPixels(ib, rt.getContentX(), rt.getContentY(), w, h)) {
+                        pImage.setImage(com.sun.prism.Image.fromIntArgbPreData(ib, w, h));
+                    } else {
+                        pImage.dispose();
+                        pImage = null;
+                    }
+                }
+                rt.unlock();
+            }
+
+            private int computeOptimumTileSize(int size, int maxSize) {
+                return computeOptimumTileSize(size, maxSize, null);
+            }
+
+            private int computeOptimumTileSize(int size, int maxSize, boolean[] isDivExact) {
+                // This method attempts to find the smallest exact divider for the provided `size`
+                // while the result of the division is less than `maxSize`.
+                // It tests all potential dividers from 2 to 6 and returns the result of the division
+                // if all conditions can be satisfied or, failing that, `maxSize`.
+                // If non-null, the value for `isDivExact` is set so as to reflect whether or not
+                // an exact divider could be found.
+                for (int n = 2; n <= 6; n++) {
+                    int optimumSize = size / n;
+                    if (optimumSize <= maxSize && optimumSize * n == size) {
+                        if (isDivExact != null && isDivExact.length > 0) {
+                            isDivExact[0] = true;
+                        }
+                        return optimumSize;
+                    }
+                }
+                if (isDivExact != null && isDivExact.length > 0) {
+                    isDivExact[0]= false;
+                }
+                return maxSize;
+            }
+
             @Override
             public void run() {
 
                 ResourceFactory rf = GraphicsPipeline.getDefaultResourceFactory();
 
@@ -1495,48 +1512,77 @@
                 if (w <= 0 || h <= 0) {
                     return;
                 }
 
                 boolean errored = false;
+                // A temp QuantumImage used only as a RTT cache for rendering tiles.
+                var tileRttCache = new QuantumImage((com.sun.prism.Image) null);
                 try {
                     QuantumImage pImage = (params.platformImage instanceof QuantumImage) ?
-                            (QuantumImage)params.platformImage : new QuantumImage((com.sun.prism.Image)null);
-
-                    com.sun.prism.RTTexture rt = pImage.getRT(w, h, rf);
-
-                    if (rt == null) {
-                        return;
-                    }
-
-                    Graphics g = rt.createGraphics();
-
-                    draw(g, x, y, w, h);
-
-                    int[] pixels = pImage.rt.getPixels();
-
-                    if (pixels != null) {
-                        pImage.setImage(com.sun.prism.Image.fromIntArgbPreData(pixels, w, h));
-                    } else {
-                        IntBuffer ib = IntBuffer.allocate(w*h);
-                        if (pImage.rt.readPixels(ib, pImage.rt.getContentX(),
-                                pImage.rt.getContentY(), w, h))
-                        {
-                            pImage.setImage(com.sun.prism.Image.fromIntArgbPreData(ib, w, h));
+                            (QuantumImage) params.platformImage : new QuantumImage((com.sun.prism.Image) null);
+
+                    int maxTextureSize = rf.getMaximumTextureSize();
+                    if (h > maxTextureSize || w > maxTextureSize) {
+                        // The requested size for the screenshot is too big to fit a single texture,
+                        // so we need to take several snapshot tiles and merge them into pImage
+                        if (pImage.image == null) {
+                            pImage.setImage(com.sun.prism.Image.fromIntArgbPreData(IntBuffer.allocate(w * h), w, h));
+                        }
+                        // Find out if it is possible to divide up the image in tiles of the same size
+                        int tileWidth = computeOptimumTileSize(w, maxTextureSize);
+                        var exactHeightDivFound = new boolean[]{false};
+                        int tileHeight = computeOptimumTileSize(h, maxTextureSize, exactHeightDivFound);
+                        IntBuffer buffer = IntBuffer.allocate(tileWidth * tileHeight);
+                        // In order to minimize the number of time we have to resize the underlying
+                        // surface for capturing a tile, choose a dimension that has an exact divider
+                        // (if any) to be processed in the inner most loop.
+                        // E.g. looping on width then height in the example bellow requires four
+                        // surface resizing, whereas the opposite requires only two:
+                        //
+                        //       for (w;;)                    for (h;;)
+                        //           for(h;;)                     for(w;;)
+                        //       -----------------           -----------------
+                        //       |       |       |           |       |       |
+                        //       |   1   |   3   |           |   1   |   2   |
+                        //    h  |       |       |        h  |       |       |
+                        //       -----------------           -----------------
+                        //       |   2   |   4   |           |   3   |   4   |
+                        //       -----------------           -----------------
+                        //               w                           w
+
+
+
+                        if (exactHeightDivFound[0]) {
+                            for (int xOffset = 0; xOffset < w; xOffset += tileWidth) {
+                                tileWidth = Math.min(tileWidth, w - xOffset);
+                                for (int yOffset = 0; yOffset < h; yOffset += tileHeight) {
+                                    tileHeight = Math.min(tileHeight, h - yOffset);
+                                    renderTile(x, xOffset, y, yOffset, tileWidth, tileHeight,
+                                            buffer, rf, tileRttCache, pImage);
+                                }
+                            }
                         } else {
-                            pImage.dispose();
-                            pImage = null;
+                            for (int yOffset = 0; yOffset < h; yOffset += tileHeight) {
+                                tileHeight = Math.min(tileHeight, h - yOffset);
+                                for (int xOffset = 0; xOffset < w; xOffset += tileWidth) {
+                                    tileWidth = Math.min(tileWidth, w - xOffset);
+                                    renderTile(x, xOffset, y, yOffset, tileWidth, tileHeight,
+                                            buffer, rf, tileRttCache, pImage);
+                                }
+                            }
                         }
+                    } else {
+                        // The requested size for the screenshot fits max texture size,
+                        // so we can directly render it in the target image.
+                        renderWholeImage(x, y, w, h, rf, pImage);
                     }
-
-                    rt.unlock();
-
                     params.platformImage = pImage;
-
                 } catch (Throwable t) {
                     errored = true;
                     t.printStackTrace(System.err);
                 } finally {
+                    tileRttCache.dispose();
                     Disposer.cleanUp();
                     rf.getTextureResourcePool().freeDisposalRequestedAndCheckResources(errored);
                 }
             }
         });
diff a/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java b/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
@@ -1283,10 +1283,13 @@
     static WritableImage doSnapshot(Scene scene,
             double x, double y, double w, double h,
             Node root, BaseTransform transform, boolean depthBuffer,
             Paint fill, Camera camera, WritableImage wimg) {
 
+        Toolkit tk = Toolkit.getToolkit();
+        Toolkit.ImageRenderingContext context = new Toolkit.ImageRenderingContext();
+
         int xMin = (int)Math.floor(x);
         int yMin = (int)Math.floor(y);
         int width;
         int height;
         if (wimg == null) {
@@ -1298,72 +1301,27 @@
         } else {
             width = (int)wimg.getWidth();
             height = (int)wimg.getHeight();
         }
 
-        // Attempt to capture snapshot
-        try {
-            wimg = doSnapshotTile(scene, xMin, yMin, width, height, root, transform, depthBuffer, fill, camera, wimg);
-        } catch (Exception e) {
-            // A first attempt to capture a snapshot failed, most likely because it is larger than
-            // maxTextureSize: retry by taking several snapshot tiles and merge them into single image
-            // (Addresses JDK-8088198)
-            int maxTextureSize = PrismSettings.maxTextureSize;
-            int numVerticalTiles = (int) Math.ceil(height / (double) maxTextureSize);
-            int numHorizontalTiles = (int) Math.ceil(width / (double) maxTextureSize);
-            for (int i = 0; i < numHorizontalTiles; i++) {
-                int xOffset = i * maxTextureSize;
-                int tileWidth = Math.min(maxTextureSize, width - xOffset);
-                for (int j = 0; j < numVerticalTiles; j++) {
-                    int yOffset = j * maxTextureSize;
-                    int tileHeight = Math.min(maxTextureSize, height - yOffset);
-                    WritableImage tile = doSnapshotTile(scene, xMin + xOffset, yMin + yOffset, tileWidth,
-                            tileHeight, root, transform, depthBuffer, fill, camera, null);
-                    wimg.getPixelWriter().setPixels(xOffset, yOffset, tileWidth, tileHeight, tile.getPixelReader(), 0, 0);
-                }
-            }
-        }
-
-        // if this scene belongs to some stage
-        // we need to mark the entire scene as dirty
-        // because dirty logic is buggy
-        if (scene != null && scene.peer != null) {
-            scene.setNeedsRepaint();
-        }
-
-        return wimg;
-    }
-
-    /**
-     * Capture a single snapshot tile
-     */
-    private static WritableImage doSnapshotTile(Scene scene,
-                    int x, int y, int w, int h,
-                    Node root, BaseTransform transform, boolean depthBuffer,
-                    Paint fill, Camera camera, WritableImage tileImg) {
-        Toolkit tk = Toolkit.getToolkit();
-        Toolkit.ImageRenderingContext context = new Toolkit.ImageRenderingContext();
-        if (tileImg == null) {
-            tileImg = new WritableImage(w, h);
-        }
         setAllowPGAccess(true);
-        context.x = x;
-        context.y = y;
-        context.width = w;
-        context.height = h;
+        context.x = xMin;
+        context.y = yMin;
+        context.width = width;
+        context.height = height;
         context.transform = transform;
         context.depthBuffer = depthBuffer;
         context.root = root.getPeer();
         context.platformPaint = fill == null ? null : tk.getPaint(fill);
         double cameraViewWidth = 1.0;
         double cameraViewHeight = 1.0;
         if (camera != null) {
             // temporarily adjust camera viewport to the snapshot size
             cameraViewWidth = camera.getViewWidth();
             cameraViewHeight = camera.getViewHeight();
-            camera.setViewWidth(w);
-            camera.setViewHeight(h);
+            camera.setViewWidth(width);
+            camera.setViewHeight(height);
             NodeHelper.updatePeer(camera);
             context.camera = camera.getPeer();
         } else {
             context.camera = null;
         }
@@ -1376,23 +1334,31 @@
                 context.lights[i] = scene.lights.get(i).getPeer();
             }
         }
 
         Toolkit.WritableImageAccessor accessor = Toolkit.getWritableImageAccessor();
-        context.platformImage = accessor.getTkImageLoader(tileImg);
+        context.platformImage = accessor.getTkImageLoader(wimg);
         setAllowPGAccess(false);
         Object tkImage = tk.renderToImage(context);
-        accessor.loadTkImage(tileImg, tkImage);
+        accessor.loadTkImage(wimg, tkImage);
 
         if (camera != null) {
             setAllowPGAccess(true);
             camera.setViewWidth(cameraViewWidth);
             camera.setViewHeight(cameraViewHeight);
             NodeHelper.updatePeer(camera);
             setAllowPGAccess(false);
         }
-        return tileImg;
+
+        // if this scene belongs to some stage
+        // we need to mark the entire scene as dirty
+        // because dirty logic is buggy
+        if (scene != null && scene.peer != null) {
+            scene.setNeedsRepaint();
+        }
+
+        return wimg;
     }
 
     /**
      * Implementation method for snapshot
      */
