diff a/modules/javafx.controls/src/main/java/javafx/scene/control/TabPane.java b/modules/javafx.controls/src/main/java/javafx/scene/control/TabPane.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/TabPane.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/TabPane.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -39,10 +39,11 @@
 import javafx.beans.property.SimpleBooleanProperty;
 import javafx.beans.property.SimpleObjectProperty;
 import javafx.beans.value.WritableValue;
 import javafx.collections.ListChangeListener;
 import javafx.collections.ObservableList;
+import javafx.collections.WeakListChangeListener;
 import javafx.geometry.Side;
 import javafx.scene.AccessibleAttribute;
 import javafx.scene.AccessibleRole;
 import javafx.css.StyleableDoubleProperty;
 import javafx.css.CssMetaData;
@@ -670,18 +671,20 @@
      **************************************************************************/
 
     static class TabPaneSelectionModel extends SingleSelectionModel<Tab> {
         private final TabPane tabPane;
 
+        private ListChangeListener<Tab> itemsContentObserver;
+
         public TabPaneSelectionModel(final TabPane t) {
             if (t == null) {
                 throw new NullPointerException("TabPane can not be null");
             }
             this.tabPane = t;
 
             // watching for changes to the items list content
-            final ListChangeListener<Tab> itemsContentObserver = c -> {
+            itemsContentObserver = c -> {
                 while (c.next()) {
                     for (Tab tab : c.getRemoved()) {
                         if (tab != null && !tabPane.getTabs().contains(tab)) {
                             if (tab.isSelected()) {
                                 tab.setSelected(false);
@@ -708,11 +711,11 @@
                 } else if (tabPane.getTabs().isEmpty()) {
                     clearSelection();
                 }
             };
             if (this.tabPane.getTabs() != null) {
-                this.tabPane.getTabs().addListener(itemsContentObserver);
+                this.tabPane.getTabs().addListener(new WeakListChangeListener<>(itemsContentObserver));
             }
         }
 
         // API Implementation
         @Override public void select(int index) {
