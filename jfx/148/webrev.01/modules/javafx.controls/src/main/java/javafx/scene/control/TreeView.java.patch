diff a/modules/javafx.controls/src/main/java/javafx/scene/control/TreeView.java b/modules/javafx.controls/src/main/java/javafx/scene/control/TreeView.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/TreeView.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/TreeView.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2008, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -30,10 +30,12 @@
 import com.sun.javafx.scene.control.behavior.TreeCellBehavior;
 import javafx.scene.control.skin.TreeViewSkin;
 
 import javafx.application.Platform;
 import javafx.beans.DefaultProperty;
+import javafx.beans.InvalidationListener;
+import javafx.beans.WeakInvalidationListener;
 import javafx.beans.property.BooleanProperty;
 import javafx.beans.property.DoubleProperty;
 import javafx.beans.property.ObjectProperty;
 import javafx.beans.property.ObjectPropertyBase;
 import javafx.beans.property.ReadOnlyIntegerProperty;
@@ -1293,13 +1295,14 @@
                 throw new IllegalArgumentException("TreeView can not be null");
             }
 
             this.treeView = treeView;
             this.treeView.rootProperty().addListener(weakRootPropertyListener);
-            this.treeView.showRootProperty().addListener(o -> {
+            showRootListener = o -> {
                 shiftSelection(0, treeView.isShowRoot() ? 1 : -1, null);
-            });
+            };
+            this.treeView.showRootProperty().addListener(new WeakInvalidationListener(showRootListener));
 
             updateTreeEventListener(null, treeView.getRoot());
 
             updateDefaultSelection();
         }
@@ -1308,10 +1311,11 @@
             if (oldRoot != null && weakTreeItemListener != null) {
                 oldRoot.removeEventHandler(TreeItem.<T>expandedItemCountChangeEvent(), weakTreeItemListener);
             }
 
             if (newRoot != null) {
+                //PENDING why create a new weak eventHandler?
                 weakTreeItemListener = new WeakEventHandler<>(treeItemListener);
                 newRoot.addEventHandler(TreeItem.<T>expandedItemCountChangeEvent(), weakTreeItemListener);
             }
         }
 
@@ -1454,10 +1458,11 @@
         private WeakChangeListener<TreeItem<T>> weakRootPropertyListener =
                 new WeakChangeListener<>(rootPropertyListener);
 
         private WeakEventHandler<TreeModificationEvent<T>> weakTreeItemListener;
 
+        private InvalidationListener showRootListener;
 
 
         /***********************************************************************
          *                                                                     *
          * Public selection API                                                *
@@ -1593,16 +1598,17 @@
 
             if (treeView.getExpandedItemCount() > 0) {
                 focus(0);
             }
 
-            treeView.showRootProperty().addListener(o -> {
+            showRootListener = obs -> {
                 if (isFocused(0)) {
                     focus(-1);
                     focus(0);
                 }
-            });
+            };
+            treeView.showRootProperty().addListener(new WeakInvalidationListener(showRootListener));
 
             focusedIndexProperty().addListener(o -> {
                 treeView.notifyAccessibleAttributeChanged(AccessibleAttribute.FOCUS_ITEM);
             });
         }
@@ -1612,10 +1618,12 @@
         };
 
         private final WeakChangeListener<TreeItem<T>> weakRootPropertyListener =
                 new WeakChangeListener<>(rootPropertyListener);
 
+        private final InvalidationListener showRootListener;
+
         private void updateTreeEventListener(TreeItem<T> oldRoot, TreeItem<T> newRoot) {
             if (oldRoot != null && weakTreeItemListener != null) {
                 oldRoot.removeEventHandler(TreeItem.<T>expandedItemCountChangeEvent(), weakTreeItemListener);
             }
 
