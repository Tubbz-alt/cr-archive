diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ChoiceBoxTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ChoiceBoxTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ChoiceBoxTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ChoiceBoxTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -57,10 +57,12 @@
 import javafx.scene.layout.StackPane;
 import javafx.stage.Stage;
 import javafx.event.Event;
 import javafx.event.EventHandler;
 
+import java.lang.ref.WeakReference;
+
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 
 public class ChoiceBoxTest {
@@ -569,6 +571,38 @@
         assertTrue("OnShowing event not received", onShowingPass);
         assertTrue("onShown event not received", onShownPass);
         assertTrue("onHiding event not received", onHidingPass);
         assertTrue("onHidden event not received", onHiddenPass);
     }
+
+    /**
+     * Memory leak on replacing selectionModel.
+     * https://bugs.openjdk.java.net/browse/JDK-8241455
+     */
+    @Test
+    public void testReplaceSelectionModelMemory() {
+        weakSmRef = new WeakReference<>(box.getSelectionModel());
+        SingleSelectionModel<String> replacingSm = ChoiceBoxShim.get_ChoiceBoxSelectionModel(box);
+        box.setSelectionModel(replacingSm);
+        attemptGC(10);
+        assertNull("selectionModel must be gc'ed", weakSmRef.get());
+    }
+
+    private WeakReference<SingleSelectionModel<?>> weakSmRef;
+    private void attemptGC(int n) {
+        // Attempt gc n times
+        for (int i = 0; i < n; i++) {
+            System.gc();
+            System.runFinalization();
+
+            if (weakSmRef.get() == null) {
+                break;
+            }
+            try {
+                Thread.sleep(500);
+            } catch (InterruptedException e) {
+               System.err.println("InterruptedException occurred during Thread.sleep()");
+            }
+        }
+    }
+
 }
