diff a/modules/javafx.controls/src/main/java/javafx/scene/control/ChoiceBox.java b/modules/javafx.controls/src/main/java/javafx/scene/control/ChoiceBox.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/ChoiceBox.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/ChoiceBox.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -27,13 +27,15 @@
 
 import javafx.beans.property.ObjectProperty;
 import javafx.beans.property.ObjectPropertyBase;
 import javafx.beans.property.SimpleObjectProperty;
 import javafx.beans.value.ChangeListener;
+import javafx.beans.value.WeakChangeListener;
 import javafx.collections.FXCollections;
 import javafx.collections.ListChangeListener;
 import javafx.collections.ObservableList;
+import javafx.collections.WeakListChangeListener;
 import javafx.beans.property.ReadOnlyBooleanProperty;
 import javafx.beans.property.ReadOnlyBooleanWrapper;
 import javafx.event.ActionEvent;
 import javafx.event.Event;
 import javafx.event.EventHandler;
@@ -501,10 +503,13 @@
             PseudoClass.getPseudoClass("showing");
 
     // package for testing
     static class ChoiceBoxSelectionModel<T> extends SingleSelectionModel<T> {
         private final ChoiceBox<T> choiceBox;
+        private ChangeListener<ObservableList<T>> itemsObserver;
+        private ListChangeListener<T> itemsContentObserver;
+        private WeakListChangeListener<T> weakItemsContentObserver;
 
         public ChoiceBoxSelectionModel(final ChoiceBox<T> cb) {
             if (cb == null) {
                 throw new NullPointerException("ChoiceBox can not be null");
             }
@@ -518,41 +523,44 @@
              * so far as to actually watch for all changes to the items list,
              * rechecking each time.
              */
 
             // watching for changes to the items list content
-            final ListChangeListener<T> itemsContentObserver = c -> {
+            itemsContentObserver = c -> {
                 if (choiceBox.getItems() == null || choiceBox.getItems().isEmpty()) {
                     setSelectedIndex(-1);
                 } else if (getSelectedIndex() == -1 && getSelectedItem() != null) {
                     int newIndex = choiceBox.getItems().indexOf(getSelectedItem());
                     if (newIndex != -1) {
                         setSelectedIndex(newIndex);
                     }
                 }
             };
+            weakItemsContentObserver = new WeakListChangeListener<>(itemsContentObserver);
             if (this.choiceBox.getItems() != null) {
-                this.choiceBox.getItems().addListener(itemsContentObserver);
+                this.choiceBox.getItems().addListener(weakItemsContentObserver);
             }
 
             // watching for changes to the items list
-            ChangeListener<ObservableList<T>> itemsObserver = (valueModel, oldList, newList) -> {
+            itemsObserver = (valueModel, oldList, newList) -> {
                 if (oldList != null) {
-                    oldList.removeListener(itemsContentObserver);
+                    oldList.removeListener(weakItemsContentObserver);
                 }
                 if (newList != null) {
-                    newList.addListener(itemsContentObserver);
+                    newList.addListener(weakItemsContentObserver);
                 }
                 setSelectedIndex(-1);
                 if (getSelectedItem() != null) {
                     int newIndex = choiceBox.getItems().indexOf(getSelectedItem());
                     if (newIndex != -1) {
                         setSelectedIndex(newIndex);
                     }
                 }
             };
-            this.choiceBox.itemsProperty().addListener(itemsObserver);
+            // TBD: use pattern as f.i. in listView selectionModel (invalidationListener to really
+            // get all changes - including list of same content - of the list-valued property)
+            this.choiceBox.itemsProperty().addListener(new WeakChangeListener<>(itemsObserver));
         }
 
         // API Implementation
         @Override protected T getModelItem(int index) {
             final ObservableList<T> items = choiceBox.getItems();
