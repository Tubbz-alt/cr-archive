diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ButtonBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ButtonBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ButtonBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ButtonBehavior.java
@@ -24,10 +24,12 @@
  */
 package com.sun.javafx.scene.control.behavior;
 
 import com.sun.javafx.PlatformUtil;
 import com.sun.javafx.scene.control.inputmap.KeyBinding;
+
+import javafx.beans.InvalidationListener;
 import javafx.beans.Observable;
 import javafx.scene.control.ButtonBase;
 import com.sun.javafx.scene.control.inputmap.InputMap;
 import javafx.scene.input.KeyEvent;
 import javafx.scene.input.MouseButton;
@@ -54,10 +56,11 @@
      * we are also armed, and will ignore mouse events related to arming.
      * Note this is made package private solely for the sake of testing.
      */
     private boolean keyDown;
 
+    private InvalidationListener focusListener = this::focusChanged;
 
 
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
@@ -87,11 +90,11 @@
             new KeyMapping(new KeyBinding(ENTER, KeyEvent.KEY_PRESSED), this::keyPressed, event -> PlatformUtil.isMac()),
             new KeyMapping(new KeyBinding(ENTER, KeyEvent.KEY_RELEASED), this::keyReleased, event -> PlatformUtil.isMac())
         );
 
         // Button also cares about focus
-        control.focusedProperty().addListener(this::focusChanged);
+        control.focusedProperty().addListener(focusListener);
     }
 
 
 
     /***************************************************************************
@@ -103,14 +106,13 @@
     @Override public InputMap<C> getInputMap() {
         return buttonInputMap;
     }
 
     @Override public void dispose() {
+        // TODO specify contract of dispose and post-condition for getNode()
+        getNode().focusedProperty().removeListener(focusListener);
         super.dispose();
-
-        // TODO
-        getNode().focusedProperty().removeListener(this::focusChanged);
     }
 
 
 
     /***************************************************************************
diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ComboBoxBaseBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ComboBoxBaseBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ComboBoxBaseBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ComboBoxBaseBehavior.java
@@ -24,10 +24,12 @@
  */
 
 package com.sun.javafx.scene.control.behavior;
 
 import com.sun.javafx.scene.control.inputmap.InputMap;
+
+import javafx.beans.InvalidationListener;
 import javafx.beans.Observable;
 import javafx.event.EventHandler;
 import javafx.event.EventTarget;
 import javafx.scene.Node;
 import javafx.scene.control.ComboBox;
@@ -45,10 +47,11 @@
 import static com.sun.javafx.scene.control.inputmap.InputMap.MouseMapping;
 
 public class ComboBoxBaseBehavior<T> extends BehaviorBase<ComboBoxBase<T>> {
 
     private final InputMap<ComboBoxBase<T>> inputMap;
+    private InvalidationListener focusListener = this::focusChanged;
 
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
      *                                                                         *
@@ -100,21 +103,21 @@
         // we don't want to consume events on enter press - let them carry on through
         enterPressed.setAutoConsume(false);
         enterReleased.setAutoConsume(false);
 
         // ComboBoxBase also cares about focus
-        comboBox.focusedProperty().addListener(this::focusChanged);
+        comboBox.focusedProperty().addListener(focusListener);
 
         // Only add this if we're on an embedded platform that supports 5-button navigation
         if (Utils.isTwoLevelFocus()) {
             tlFocus = new TwoLevelFocusComboBehavior(comboBox); // needs to be last.
         }
     }
 
     @Override public void dispose() {
         if (tlFocus != null) tlFocus.dispose();
-        getNode().focusedProperty().removeListener(this::focusChanged);
+        getNode().focusedProperty().removeListener(focusListener);
         super.dispose();
     }
 
     @Override public InputMap<ComboBoxBase<T>> getInputMap() {
         return inputMap;
diff a/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/behavior/BehaviorMemoryLeakTest.java b/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/behavior/BehaviorMemoryLeakTest.java
--- a/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/behavior/BehaviorMemoryLeakTest.java
+++ b/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/behavior/BehaviorMemoryLeakTest.java
@@ -39,26 +39,16 @@
 import com.sun.javafx.scene.control.behavior.BehaviorBase;
 
 import static org.junit.Assert.*;
 import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;
 
-import javafx.scene.control.Button;
-import javafx.scene.control.CheckBox;
-import javafx.scene.control.ColorPicker;
-import javafx.scene.control.ComboBox;
 import javafx.scene.control.Control;
-import javafx.scene.control.DatePicker;
-import javafx.scene.control.Hyperlink;
 import javafx.scene.control.ListView;
-import javafx.scene.control.MenuButton;
 import javafx.scene.control.PasswordField;
-import javafx.scene.control.RadioButton;
-import javafx.scene.control.SplitMenuButton;
 import javafx.scene.control.TableView;
 import javafx.scene.control.TextArea;
 import javafx.scene.control.TextField;
-import javafx.scene.control.ToggleButton;
 import javafx.scene.control.TreeTableView;
 import javafx.scene.control.TreeView;
 import test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory;
 
 /**
@@ -84,43 +74,23 @@
     }
 
     //---------------- parameterized
 
     // Note: name property not supported before junit 4.11
-    @Parameterized.Parameters //(name = "{index}: {0} ")
+    @Parameterized.Parameters // (name = "{index}: {0} ")
     public static Collection<Object[]> data() {
         List<Class<Control>> controlClasses = getControlClassesWithBehavior();
         // FIXME as part of JDK-8241364
         // The behaviors of these controls are leaking
         // step 1: file issues (where not yet done), add informal ignore to entry
         // step 2: fix and remove from list
         List<Class<? extends Control>> leakingClasses = List.of(
-                // @Ignore("8245282")
-                Button.class,
-                // @Ignore("8245282")
-                CheckBox.class,
-                // @Ignore("8245282")
-                ColorPicker.class,
-                // @Ignore("8245282")
-                ComboBox.class,
-                // @Ignore("8245282")
-                DatePicker.class,
-                // @Ignore("8245282")
-                Hyperlink.class,
                 ListView.class,
-                // @Ignore("8245282")
-                MenuButton.class,
                 PasswordField.class,
-                // @Ignore("8245282")
-                RadioButton.class,
-                // @Ignore("8245282")
-                SplitMenuButton.class,
                 TableView.class,
                 TextArea.class,
                 TextField.class,
-                // @Ignore("8245282")
-                ToggleButton.class,
                 TreeTableView.class,
                 TreeView.class
          );
         // remove the known issues to make the test pass
         controlClasses.removeAll(leakingClasses);
