diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ButtonBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ButtonBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ButtonBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ButtonBehavior.java
@@ -24,10 +24,12 @@
  */
 package com.sun.javafx.scene.control.behavior;
 
 import com.sun.javafx.PlatformUtil;
 import com.sun.javafx.scene.control.inputmap.KeyBinding;
+
+import javafx.beans.InvalidationListener;
 import javafx.beans.Observable;
 import javafx.scene.control.ButtonBase;
 import com.sun.javafx.scene.control.inputmap.InputMap;
 import javafx.scene.input.KeyEvent;
 import javafx.scene.input.MouseButton;
@@ -54,10 +56,11 @@
      * we are also armed, and will ignore mouse events related to arming.
      * Note this is made package private solely for the sake of testing.
      */
     private boolean keyDown;
 
+    private InvalidationListener focusListener = this::focusChanged;
 
 
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
@@ -87,11 +90,11 @@
             new KeyMapping(new KeyBinding(ENTER, KeyEvent.KEY_PRESSED), this::keyPressed, event -> PlatformUtil.isMac()),
             new KeyMapping(new KeyBinding(ENTER, KeyEvent.KEY_RELEASED), this::keyReleased, event -> PlatformUtil.isMac())
         );
 
         // Button also cares about focus
-        control.focusedProperty().addListener(this::focusChanged);
+        control.focusedProperty().addListener(focusListener);
     }
 
 
 
     /***************************************************************************
@@ -103,14 +106,13 @@
     @Override public InputMap<C> getInputMap() {
         return buttonInputMap;
     }
 
     @Override public void dispose() {
+        // TODO specify contract of dispose and post-condition for getNode()
+        getNode().focusedProperty().removeListener(focusListener);
         super.dispose();
-
-        // TODO
-        getNode().focusedProperty().removeListener(this::focusChanged);
     }
 
 
 
     /***************************************************************************
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
@@ -41,10 +41,12 @@
 import javafx.scene.input.KeyCodeCombination;
 import javafx.scene.input.Mnemonic;
 import javafx.collections.ObservableList;
 import javafx.scene.input.KeyCombination;
 
+import com.sun.javafx.scene.control.behavior.BehaviorBase;
+import com.sun.javafx.scene.control.behavior.ButtonBehavior;
 import com.sun.javafx.scene.control.behavior.TextBinding.MnemonicKeyCombination;
 import javafx.scene.Node;
 import javafx.scene.control.skin.ButtonSkin;
 import javafx.scene.shape.Rectangle;
 
@@ -292,11 +294,21 @@
 
         attemptGC(defSkinRef);
         assertNull("ButtonSkin must be GCed", defSkinRef.get());
     }
 
-    private void attemptGC(WeakReference<ButtonSkin> weakRef) {
+    @Test
+    public void testButtonBehaviorMemoryLeak() {
+        Button control = new Button();
+        WeakReference<BehaviorBase<?>> weakRef = new WeakReference<>(new ButtonBehavior<>(control));
+        assertNotNull(weakRef.get());
+        weakRef.get().dispose();
+        attemptGC(weakRef);
+        assertNull("behavior must be gc'ed", weakRef.get());
+    }
+
+    private void attemptGC(WeakReference<?> weakRef) {
         for (int i = 0; i < 10; i++) {
             System.gc();
             System.runFinalization();
 
             if (weakRef.get() == null) {
