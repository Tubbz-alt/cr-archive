diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/ReadOnlyUnbackedObservableList.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/ReadOnlyUnbackedObservableList.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/ReadOnlyUnbackedObservableList.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/ReadOnlyUnbackedObservableList.java
@@ -111,11 +111,11 @@
     }
 
     @Override public int indexOf(Object o) {
         if (o == null) return -1;
 
-        for (int i = 0; i < size(); i++) {
+        for (int i = 0, max = size(); i < max; i++) {
             Object obj = get(i);
             if (o.equals(obj)) return i;
         }
 
         return -1;
@@ -184,11 +184,11 @@
     }
 
     @Override
     public Object[] toArray() {
         Object[] arr = new Object[size()];
-        for (int i = 0; i < size(); i++) {
+        for (int i = 0, max = size(); i < max; i++) {
             arr[i] = get(i);
         }
         return arr;
     }
 
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/MultipleSelectionModelBase.java b/modules/javafx.controls/src/main/java/javafx/scene/control/MultipleSelectionModelBase.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/MultipleSelectionModelBase.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/MultipleSelectionModelBase.java
@@ -624,10 +624,11 @@
      **********************************************************************/
 
     class SelectedIndicesList extends ReadOnlyUnbackedObservableList<Integer> {
         private final BitSet bitset;
 
+        private int size = -1;
         private int lastGetIndex = -1;
         private int lastGetValue = -1;
 
         // Fix for RT-20945 (and numerous other issues!)
         private int atomicityCount = 0;
@@ -692,10 +693,11 @@
             if (!isValidIndex(index) || isSelected(index)) {
                 return;
             }
 
             _beginChange();
+            size = -1;
             bitset.set(index);
             int indicesIndex = indexOf(index);
             _nextAdd(indicesIndex, indicesIndex + 1);
             _endChange();
         }
@@ -712,10 +714,11 @@
             }
         }
 
         public void set(int index, int end, boolean isSet) {
             _beginChange();
+            size = -1;
             if (isSet) {
                 bitset.set(index, end, isSet);
                 int indicesIndex = indexOf(index);
                 int span = end - index;
                 _nextAdd(indicesIndex, indicesIndex + span);
@@ -789,19 +792,21 @@
         }
 
         public void clear() {
             _beginChange();
             List<Integer> removed = bitset.stream().boxed().collect(Collectors.toList());
+            size = 0;
             bitset.clear();
             _nextRemove(0, removed);
             _endChange();
         }
 
         public void clear(int index) {
             if (!bitset.get(index)) return;
 
             _beginChange();
+            size = -1;
             bitset.clear(index);
             _nextRemove(index, index);
             _endChange();
         }
 
@@ -853,21 +858,65 @@
             return !isSelected(index);
         }
 
         /** Returns number of true bits in BitSet */
         @Override public int size() {
-            return bitset.cardinality();
+            if(size>=0){
+                return size;
+            }
+            size = bitset.cardinality();
+            return size;
         }
 
         /** Returns the number of bits reserved in the BitSet */
         public int bitsetSize() {
             return bitset.size();
         }
 
         @Override public int indexOf(Object obj) {
-            reset();
-            return super.indexOf(obj);
+            if (!(obj instanceof Number)) {
+                return -1;
+            }
+            Number n = (Number) obj;
+            int index = n.intValue();
+            if(!bitset.get(index)) {
+                return -1;
+            }
+            // is left most bit
+            if(index==0) {
+                return 0;
+            }
+
+            // is right most bit
+            if( index == bitset.length()-1 ){
+                return size()-1;
+            }
+
+            // count right bit
+            if( index > bitset.length()/2 ) {
+                int count = 1;
+                for (;;) {
+                    index = bitset.nextSetBit(index + 1);
+                    if (index < 0) {
+                        break;
+                    }
+                    count++;
+                }
+                return size() - count;
+            }
+
+            // count left bit
+            // return (int)bitset.stream().takeWhile(i->i<index).count();
+            int count = 0;
+            for(;;){
+                index = bitset.previousSetBit(index-1);
+                if(index<0){
+                    break;
+                }
+                count++;
+            }
+            return count;
         }
 
         @Override public boolean contains(Object o) {
             if (o instanceof Number) {
                 Number n = (Number) o;
