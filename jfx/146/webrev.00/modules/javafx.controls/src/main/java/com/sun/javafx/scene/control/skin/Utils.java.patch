diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/skin/Utils.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/skin/Utils.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/skin/Utils.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/skin/Utils.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -146,11 +146,11 @@
         }
         return layout.getBounds().getHeight();
     }
 
     public static Point2D computeMnemonicPosition(Font font, String text, int mnemonicIndex, double wrappingWidth,
-                                                  double lineSpacing) {
+                                                  double lineSpacing, boolean isRTL) {
         // Input validation
         if ((font == null) || (text == null) ||
             (mnemonicIndex < 0) || (mnemonicIndex > text.length())) {
             return null;
         }
@@ -163,12 +163,13 @@
         // The text could be spread over multiple lines
         // We need to find out on which line the mnemonic character lies
         int start = 0;
         int i = 0;
         int totalLines = layout.getLines().length;
+        int lineLength = 0;
         while (i < totalLines) {
-            int lineLength = layout.getLines()[i].getLength();
+            lineLength = layout.getLines()[i].getLength();
 
             if ((mnemonicIndex >= start) &&
                 (mnemonicIndex < (start + lineLength))) {
                 // mnemonic lies on line 'i'
                 break;
@@ -180,10 +181,14 @@
 
         // Find x and y offsets of mnemonic character position
         // in line numbered 'i'
         double lineHeight = layout.getBounds().getHeight() / totalLines;
         double x = Utils.computeTextWidth(font, text.substring(start, mnemonicIndex), 0);
+        if (isRTL) {
+            double lineWidth = Utils.computeTextWidth(font, text.substring(start, (start + lineLength - 1)), 0);
+            x = lineWidth - x;
+        }
 
         double y = (lineHeight * (i+1));
         // Adjust y offset for linespacing except for the last line.
         if ((i+1) != totalLines) {
             y -= (lineSpacing / 2);
