diff a/modules/javafx.controls/src/main/java/javafx/scene/control/ChoiceBox.java b/modules/javafx.controls/src/main/java/javafx/scene/control/ChoiceBox.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/ChoiceBox.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/ChoiceBox.java
@@ -180,12 +180,11 @@
             }
             SelectionModel<T> sm = get();
             oldSM = sm;
             if (sm != null) {
                 sm.selectedItemProperty().addListener(selectedItemListener);
-                // FIXME JDK-8242001 - must sync to model state always
-                if (sm.getSelectedItem() != null && ! valueProperty().isBound()) {
+                if (!valueProperty().isBound()) {
                     ChoiceBox.this.setValue(sm.getSelectedItem());
                 }
             }
         }
     };
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ChoiceBoxSelectionTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ChoiceBoxSelectionTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ChoiceBoxSelectionTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ChoiceBoxSelectionTest.java
@@ -31,14 +31,17 @@
 import org.junit.Before;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
 
+import javafx.beans.property.SimpleStringProperty;
+import javafx.beans.property.StringProperty;
 import javafx.collections.FXCollections;
 import javafx.scene.Node;
 import javafx.scene.Scene;
 import javafx.scene.control.ChoiceBox;
+import javafx.scene.control.ChoiceBoxShim;
 import javafx.scene.control.ContextMenu;
 import javafx.scene.control.Control;
 import javafx.scene.control.MenuItem;
 import javafx.scene.control.RadioMenuItem;
 import javafx.scene.control.Separator;
@@ -312,10 +315,45 @@
         box.setValue(uncontained);
         box.getSelectionModel().clearSelection();
         assertEquals(uncontained, box.getValue());
     }
 
+    //------------- tests for JDK-8242001
+
+    /**
+     * Testing JDK-8242001: box value not updated on replacing selection model.
+     *
+     * Happens if replacing.selectedItem == null
+     *
+     */
+    @Test
+    public void testSyncedContainedValueReplaceSMEmpty() {
+        box.setValue(box.getItems().get(1));
+        SingleSelectionModel<String> replaceSM = ChoiceBoxShim.get_ChoiceBoxSelectionModel(box);
+        assertNull(replaceSM.getSelectedItem());
+        box.setSelectionModel(replaceSM);
+        assertEquals(replaceSM.getSelectedItem(), box.getValue());
+    }
+
+    @Test
+    public void testSyncedUncontainedValueReplaceSMEmpty() {
+        box.setValue(uncontained);
+        SingleSelectionModel<String> replaceSM = ChoiceBoxShim.get_ChoiceBoxSelectionModel(box);
+        assertNull(replaceSM.getSelectedItem());
+        box.setSelectionModel(replaceSM);
+        assertEquals(replaceSM.getSelectedItem(), box.getValue());
+    }
+
+    @Test
+    public void testSyncedBoundValueReplaceSMEmpty() {
+        StringProperty valueSource = new SimpleStringProperty("stickyValue");
+        box.valueProperty().bind(valueSource);
+        SingleSelectionModel<String> replaceSM = ChoiceBoxShim.get_ChoiceBoxSelectionModel(box);
+        assertNull(replaceSM.getSelectedItem());
+        box.setSelectionModel(replaceSM);
+        assertEquals(valueSource.get(), box.getValue());
+    }
 
     //----------- setup and sanity test for initial state
 
     @Test
     public void testSetupState() {
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ChoiceBoxTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ChoiceBoxTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ChoiceBoxTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ChoiceBoxTest.java
@@ -340,20 +340,24 @@
         assertEquals(0, box.getSelectionModel().getSelectedIndex());
         assertEquals("Orange", box.getSelectionModel().getSelectedItem());
         assertEquals("Orange", box.getValue());
     }
 
-    @Test public void ensureValueIsUpdatedByCorrectSelectionModelWhenSelectionModelIsChanged() {
+    @Test
+    public void ensureValueIsUpdatedByCorrectSelectionModelWhenSelectionModelIsChanged() {
         box.getItems().addAll("Apple", "Orange", "Banana");
         SelectionModel sm1 = box.getSelectionModel();
         sm1.select(1);
         assertEquals("Orange", box.getValue());
         SingleSelectionModel sm2 = ChoiceBoxShim.<String>get_ChoiceBoxSelectionModel(box);
         box.setSelectionModel(sm2);
 
         sm1.select(2);  // value should not change as we are using old SM
-        assertEquals("Orange", box.getValue());
+        // was: incorrect test assumption
+        // - setting the new model (with null selected item) changed the value to null
+        // assertEquals("Orange", box.getValue());
+        assertEquals(sm2.getSelectedItem(), box.getValue());
 
         sm2.select(0);  // value should change, as we are using new SM
         assertEquals("Apple", box.getValue());
     }
 
