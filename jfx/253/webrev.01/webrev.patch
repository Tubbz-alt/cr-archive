diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
@@ -652,27 +652,22 @@
         Set<PseudoClass> pseudoClassStates = comboBox.getPseudoClassStates();
         assertFalse(comboBox.isEditable());
         assertTrue(pseudoClassStates.size() >= 0);
 
         comboBox.setEditable(true);
-        pseudoClassStates = comboBox.getPseudoClassStates();
         assertTrue(pseudoClassStates.contains(PseudoClass.getPseudoClass("editable")));
 
         comboBox.setEditable(false);
-        pseudoClassStates = comboBox.getPseudoClassStates();
-        assertTrue(pseudoClassStates.contains(PseudoClass.getPseudoClass("editable")) == false);
+        assertFalse(pseudoClassStates.contains(PseudoClass.getPseudoClass("editable")));
 
         comboBox.show();
-        pseudoClassStates = comboBox.getPseudoClassStates();
         assertTrue(pseudoClassStates.contains(PseudoClass.getPseudoClass("showing")));
 
         comboBox.hide();
-        pseudoClassStates = comboBox.getPseudoClassStates();
-        assertTrue(pseudoClassStates.contains(PseudoClass.getPseudoClass("showing")) == false);
+        assertFalse(pseudoClassStates.contains(PseudoClass.getPseudoClass("showing")));
 
         comboBox.arm();
-        pseudoClassStates = comboBox.getPseudoClassStates();
         assertTrue(pseudoClassStates.contains(PseudoClass.getPseudoClass("armed")));
 
     }
 
     /*********************************************************************
diff a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
@@ -9365,18 +9365,19 @@
         }
    }
 
     // package so that StyleHelper can get at it
     final ObservableSet<PseudoClass> pseudoClassStates = new PseudoClassState();
+    private final ObservableSet<PseudoClass> unmodifiablePseudoClassStates =
+            FXCollections.unmodifiableObservableSet(pseudoClassStates);
     /**
      * @return The active pseudo-class states of this Node, wrapped in an unmodifiable ObservableSet
      * @since JavaFX 8.0
      */
+    @Override
     public final ObservableSet<PseudoClass> getPseudoClassStates() {
-
-        return FXCollections.unmodifiableObservableSet(pseudoClassStates);
-
+        return unmodifiablePseudoClassStates;
     }
 
     // Walks up the tree telling each parent that the pseudo class state of
     // this node has changed.
     final void notifyParentsOfInvalidatedCSS() {
diff a/modules/javafx.graphics/src/shims/java/javafx/scene/NodeShim.java b/modules/javafx.graphics/src/shims/java/javafx/scene/NodeShim.java
--- a/modules/javafx.graphics/src/shims/java/javafx/scene/NodeShim.java
+++ b/modules/javafx.graphics/src/shims/java/javafx/scene/NodeShim.java
@@ -26,10 +26,12 @@
 package javafx.scene;
 
 import com.sun.javafx.scene.DirtyBits;
 import com.sun.javafx.sg.prism.NGNode;
 
+import javafx.collections.ObservableSet;
+import javafx.css.PseudoClass;
 import javafx.scene.transform.Transform;
 
 public class NodeShim {
 
     public static boolean boundsChanged(Node n) {
@@ -73,6 +75,10 @@
     }
 
     public static <P extends NGNode> P getPeer(Node n) {
         return n.getPeer();
     }
+
+    public static ObservableSet<PseudoClass> pseudoClassStates(Node n) {
+        return n.pseudoClassStates;
+    }
 }
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/NodeTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/NodeTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/NodeTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/NodeTest.java
@@ -42,11 +42,14 @@
 import com.sun.javafx.sg.prism.NGRectangle;
 import test.com.sun.javafx.test.objects.TestScene;
 import test.com.sun.javafx.test.objects.TestStage;
 import com.sun.javafx.tk.Toolkit;
 import com.sun.javafx.util.Utils;
+import javafx.beans.InvalidationListener;
 import javafx.beans.property.*;
+import javafx.collections.SetChangeListener;
+import javafx.css.PseudoClass;
 import javafx.geometry.BoundingBox;
 import javafx.geometry.Bounds;
 import javafx.geometry.NodeOrientation;
 import javafx.geometry.Point2D;
 import javafx.geometry.Point3D;
@@ -57,12 +60,15 @@
 import javafx.scene.transform.Transform;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
+import java.lang.ref.WeakReference;
 import java.lang.reflect.Method;
 import java.util.Comparator;
+import java.util.Set;
+
 import javafx.scene.Group;
 import javafx.scene.GroupShim;
 import javafx.scene.Node;
 import javafx.scene.NodeShim;
 import javafx.scene.ParallelCamera;
@@ -159,10 +165,62 @@
      *                                                                         *
      *                              Basic Node Tests                           *
      *                                                                         *
      **************************************************************************/
 
+    @Test
+    public void testGetPseudoClassStatesShouldReturnSameSet() {
+        Rectangle node = new Rectangle();
+        Set<PseudoClass> set1 = node.getPseudoClassStates();
+        Set<PseudoClass> set2 = node.getPseudoClassStates();
+        assertSame("getPseudoClassStates() should always return the same instance",
+                set1, set2);
+    }
+
+    @Test(expected=UnsupportedOperationException.class)
+    public void testPseudoClassStatesIsUnmodifiable() {
+        Node node = new Rectangle();
+        node.getPseudoClassStates().add(PseudoClass.getPseudoClass("dummy"));
+    }
+
+    @Test
+    public void testUnmodifiablePseudoClassStatesEqualsBackingStates() {
+        Rectangle node = new Rectangle();
+        PseudoClass pseudo = PseudoClass.getPseudoClass("Pseudo");
+        node.pseudoClassStateChanged(pseudo, true);
+        assertEquals(1, node.getPseudoClassStates().size());
+        assertEquals(NodeShim.pseudoClassStates(node).size(), node.getPseudoClassStates().size());
+        assertTrue(NodeShim.pseudoClassStates(node).contains(pseudo));
+        assertTrue(node.getPseudoClassStates().contains(pseudo));
+    }
+
+    private boolean isInvalidationListenerInvoked;
+    private boolean isChangeListenerInvoked;
+    @Test
+    public void testPseudoClassStatesListenersAreInvoked() {
+        Rectangle node = new Rectangle();
+        node.getPseudoClassStates().addListener((InvalidationListener) inv -> {
+            isInvalidationListenerInvoked = true;
+        });
+        node.getPseudoClassStates().addListener((SetChangeListener<PseudoClass>) c -> {
+            isChangeListenerInvoked = true;
+        });
+
+        PseudoClass pseudo = PseudoClass.getPseudoClass("Pseudo");
+        node.pseudoClassStateChanged(pseudo, true);
+        assertTrue(isInvalidationListenerInvoked);
+        assertTrue(isChangeListenerInvoked);
+    }
+
+    @Test
+    public void testPseudoClassStatesNotGCed() {
+        Node node = new Rectangle();
+        WeakReference<Set<?>> weakRef = new WeakReference<>(node.getPseudoClassStates());
+        TestUtils.attemptGC(weakRef);
+        assertNotNull("pseudoClassStates must not be gc'ed", weakRef.get());
+    }
+
 // TODO disable this because it depends on TestNode
 //    @Test public void testPeerNotifiedOfVisibilityChanges() {
 //        Rectangle rect = new Rectangle();
 //        Node peer = rect.impl_getPGNode();
 //        assertEquals(peer.visible, rect.visible);
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/shape/TestUtils.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/shape/TestUtils.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/shape/TestUtils.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/shape/TestUtils.java
@@ -28,10 +28,11 @@
 import com.sun.javafx.scene.NodeHelper;
 import com.sun.javafx.sg.prism.NGNode;
 import com.sun.prism.paint.Color;
 import javafx.scene.Node;
 
+import java.lang.ref.WeakReference;
 import java.lang.reflect.Method;
 
 import static org.junit.Assert.*;
 
 public abstract class TestUtils {
@@ -124,6 +125,22 @@
     }
 
     public static Object getObjectValue(Node node, String pgPropertyName) throws Exception {
         return getObjectValue(node, pgPropertyName, false);
     }
+
+    public static void attemptGC(WeakReference<?> weakRef) {
+        for (int i = 0; i < 10; i++) {
+            System.gc();
+            System.runFinalization();
+
+            if (weakRef.get() == null) {
+                break;
+            }
+            try {
+                Thread.sleep(50);
+            } catch (InterruptedException e) {
+                fail("InterruptedException occurred during Thread.sleep()");
+            }
+        }
+    }
 }
