diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
@@ -652,27 +652,22 @@
         Set<PseudoClass> pseudoClassStates = comboBox.getPseudoClassStates();
         assertFalse(comboBox.isEditable());
         assertTrue(pseudoClassStates.size() >= 0);
 
         comboBox.setEditable(true);
-        pseudoClassStates = comboBox.getPseudoClassStates();
         assertTrue(pseudoClassStates.contains(PseudoClass.getPseudoClass("editable")));
 
         comboBox.setEditable(false);
-        pseudoClassStates = comboBox.getPseudoClassStates();
-        assertTrue(pseudoClassStates.contains(PseudoClass.getPseudoClass("editable")) == false);
+        assertFalse(pseudoClassStates.contains(PseudoClass.getPseudoClass("editable")));
 
         comboBox.show();
-        pseudoClassStates = comboBox.getPseudoClassStates();
         assertTrue(pseudoClassStates.contains(PseudoClass.getPseudoClass("showing")));
 
         comboBox.hide();
-        pseudoClassStates = comboBox.getPseudoClassStates();
-        assertTrue(pseudoClassStates.contains(PseudoClass.getPseudoClass("showing")) == false);
+        assertFalse(pseudoClassStates.contains(PseudoClass.getPseudoClass("showing")));
 
         comboBox.arm();
-        pseudoClassStates = comboBox.getPseudoClassStates();
         assertTrue(pseudoClassStates.contains(PseudoClass.getPseudoClass("armed")));
 
     }
 
     /*********************************************************************
diff a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Node.java
@@ -9365,18 +9365,18 @@
         }
    }
 
     // package so that StyleHelper can get at it
     final ObservableSet<PseudoClass> pseudoClassStates = new PseudoClassState();
+    final ObservableSet<PseudoClass> unmodifiablePseudoClassStates =
+            FXCollections.unmodifiableObservableSet(pseudoClassStates);
     /**
      * @return The active pseudo-class states of this Node, wrapped in an unmodifiable ObservableSet
      * @since JavaFX 8.0
      */
     public final ObservableSet<PseudoClass> getPseudoClassStates() {
-
-        return FXCollections.unmodifiableObservableSet(pseudoClassStates);
-
+        return unmodifiablePseudoClassStates;
     }
 
     // Walks up the tree telling each parent that the pseudo class state of
     // this node has changed.
     final void notifyParentsOfInvalidatedCSS() {
diff a/modules/javafx.graphics/src/test/java/test/javafx/scene/NodeTest.java b/modules/javafx.graphics/src/test/java/test/javafx/scene/NodeTest.java
--- a/modules/javafx.graphics/src/test/java/test/javafx/scene/NodeTest.java
+++ b/modules/javafx.graphics/src/test/java/test/javafx/scene/NodeTest.java
@@ -159,10 +159,17 @@
      *                                                                         *
      *                              Basic Node Tests                           *
      *                                                                         *
      **************************************************************************/
 
+    @Test
+    public void testGetPseudoClassStatesShouldReturnSameSet() {
+        Rectangle node = new Rectangle();
+        assertSame("getPseudoClassStates() should always return the same instance",
+                node.getPseudoClassStates(), node.getPseudoClassStates());
+    }
+
 // TODO disable this because it depends on TestNode
 //    @Test public void testPeerNotifiedOfVisibilityChanges() {
 //        Rectangle rect = new Rectangle();
 //        Node peer = rect.impl_getPGNode();
 //        assertEquals(peer.visible, rect.visible);
