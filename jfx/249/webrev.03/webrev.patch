diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/OSPango.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/OSPango.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/OSPango.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/OSPango.java
@@ -81,10 +81,11 @@
     static final native void pango_item_free(long item);
 
     /* Miscellaneous (glib, fontconfig) */
     static final native long g_utf8_offset_to_pointer(long str, long offset);
     static final native long g_utf8_pointer_to_offset(long str, long pos);
+    static final native long g_utf8_strlen(long str, long max);
     static final native long g_utf16_to_utf8(char[] str);
     static final native void g_free(long ptr);
     static final native int g_list_length(long list);
     static final native long g_list_nth_data(long list, int n);
     static final native void g_list_free(long list);
diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/PangoGlyphLayout.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/PangoGlyphLayout.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/PangoGlyphLayout.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/PangoGlyphLayout.java
@@ -32,10 +32,14 @@
 import com.sun.javafx.font.PGFont;
 import com.sun.javafx.font.PrismFontFactory;
 import com.sun.javafx.text.GlyphLayout;
 import com.sun.javafx.text.TextRun;
 
+import java.util.Arrays;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
 class PangoGlyphLayout extends GlyphLayout {
     private static final long fontmap;
 
     static {
         fontmap = OSPango.pango_ft2_font_map_new();
@@ -78,13 +82,12 @@
         if (desc != 0) OSPango.pango_font_description_free(desc);
         if (context != 0) OSPango.g_object_unref(context);
         return true;
     }
 
-    private long str = 0L;
+    private Map<TextRun, Long> runUtf8 = new LinkedHashMap<>();
     public void layout(TextRun run, PGFont font, FontStrike strike, char[] text) {
-
         /* Create the pango font and attribute list */
         FontResource fr = font.getFontResource();
         boolean composite = fr instanceof CompositeFontResource;
         if (composite) {
             fr = ((CompositeFontResource)fr).getSlotResource(0);
@@ -124,21 +127,24 @@
         if (!composite) {
             attr = OSPango.pango_attr_fallback_new(false);
             OSPango.pango_attr_list_insert(attrList, attr);
         }
 
-        if (str == 0L) {
-            str = OSPango.g_utf16_to_utf8(text);
+        Long str = runUtf8.get(run);
+        if (str == null) {
+            char[] rtext = Arrays.copyOfRange(text, run.getStart(), run.getEnd());
+            str = OSPango.g_utf16_to_utf8(rtext);
             if (check(str, "Failed allocating UTF-8 buffer.", context, desc, attrList)) {
                 return;
             }
+            runUtf8.put(run, str);
         }
 
         /* Itemize */
-        long start = OSPango.g_utf8_offset_to_pointer(str, run.getStart());
-        long end = OSPango.g_utf8_offset_to_pointer(str, run.getEnd());
-        long runs = OSPango.pango_itemize(context, str, (int)(start - str), (int)(end - start), attrList, 0);
+        long utflen = OSPango.g_utf8_strlen(str,-1);
+        long end = OSPango.g_utf8_offset_to_pointer(str, utflen);
+        long runs = OSPango.pango_itemize(context, str, 0, (int)(end - str), attrList, 0);
 
         if (runs != 0) {
             /* Shape all PangoItem into PangoGlyphString */
             int runsCount = OSPango.g_list_length(runs);
             PangoGlyphString[] pangoGlyphs = new PangoGlyphString[runsCount];
@@ -197,11 +203,11 @@
     }
 
     @Override
     public void dispose() {
         super.dispose();
-        if (str != 0L) {
+        for (Long str: runUtf8.values()) {
             OSPango.g_free(str);
-            str = 0L;
         }
+        runUtf8.clear();
     }
 }
diff a/modules/javafx.graphics/src/main/native-font/pango.c b/modules/javafx.graphics/src/main/native-font/pango.c
--- a/modules/javafx.graphics/src/main/native-font/pango.c
+++ b/modules/javafx.graphics/src/main/native-font/pango.c
@@ -396,10 +396,17 @@
 {
     if (!str) return 0;
     return (jlong)g_utf8_pointer_to_offset((const gchar *)str, (const gchar *)pos);
 }
 
+JNIEXPORT jlong JNICALL OS_NATIVE(g_1utf8_1strlen)
+    (JNIEnv *env, jclass that, jlong str, jlong pos)
+{
+    if (!str) return 0;
+    return (jlong)g_utf8_strlen((const gchar *)str, (const gchar *)pos);
+}
+
 JNIEXPORT jlong JNICALL OS_NATIVE(g_1utf16_1to_1utf8)
     (JNIEnv *env, jclass that, jcharArray str)
 {
     if (!str) return 0;
     jsize length = (*env)->GetArrayLength(env, str);
diff a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/text/TextLayoutTest.java b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/text/TextLayoutTest.java
--- a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/text/TextLayoutTest.java
+++ b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/text/TextLayoutTest.java
@@ -24,19 +24,22 @@
  */
 
 package test.com.sun.javafx.text;
 
 import javafx.scene.text.Font;
+import com.sun.javafx.text.TextRun;
 
 import com.sun.javafx.font.PGFont;
 import com.sun.javafx.geom.RectBounds;
 import com.sun.javafx.scene.text.GlyphList;
 import com.sun.javafx.scene.text.TextSpan;
 import com.sun.javafx.scene.text.TextLine;
 import com.sun.javafx.scene.text.FontHelper;
 import com.sun.javafx.font.CharToGlyphMapper;
 import com.sun.javafx.text.PrismTextLayout;
+import com.sun.javafx.text.GlyphLayout;
+import com.sun.javafx.text.TextRun;
 
 import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
@@ -93,10 +96,25 @@
         for (int i = 0; i < runs.length; i++) {
             assertEquals("run " +i, complex[i], runs[i].isComplex());
         }
     }
 
+    @Ignore() // ignored since StubFontLoader used in tests return fonts with null resources
+    @Test public void utf16chars() {
+        GlyphLayout layout = GlyphLayout.getInstance();
+        assertNotNull(layout);
+        char[] text = new char[5];
+        text[0] = 0xD83D;
+        text[1] = 0xDC68;
+        text[2] = 0xD83C;
+        text[3] = 0xDFFE;
+        text[4] = 0x17FF;
+        TextRun run = new TextRun(0, 5, (byte)0, true, 0, null, 0, false);
+        PGFont font = (PGFont) FontHelper.getNativeFont(Font.getDefault());
+        layout.layout(run, font, null, text);
+    }
+
     @SuppressWarnings("deprecation")
     @Ignore("JDK-8087615")
     @Test public void buildRuns() {
 
         PrismTextLayout layout = new PrismTextLayout();
diff a/tests/system/src/test/java/test/com/sun/javafx/font/freetype/PangoTest.java b/tests/system/src/test/java/test/com/sun/javafx/font/freetype/PangoTest.java
--- /dev/null
+++ b/tests/system/src/test/java/test/com/sun/javafx/font/freetype/PangoTest.java
@@ -0,0 +1,147 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.com.sun.javafx.font.freetype;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import javafx.application.Application;
+import javafx.application.Platform;
+import javafx.scene.Scene;
+import javafx.scene.layout.Pane;
+import javafx.scene.layout.VBox;
+import javafx.scene.text.Text;
+import javafx.stage.Stage;
+
+import org.junit.Test;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+
+import junit.framework.AssertionFailedError;
+import static test.util.Util.TIMEOUT;
+
+import static org.junit.Assert.*;
+
+/**
+ * Test program for UTF16 to UTF8 conversion and Pango
+ */
+public class PangoTest {
+
+    static CountDownLatch launchLatch = new CountDownLatch(1);
+
+    static MyApp myApp;
+    static Pane pane;
+
+    public static class MyApp extends Application {
+
+        Stage stage = null;
+
+        public MyApp() {
+            super();
+        }
+
+        @Override
+        public void init() {
+            myApp = this;
+        }
+
+        @Override
+        public void start(Stage primaryStage) throws Exception {
+            this.stage = primaryStage;
+            pane = new VBox(10);
+            Scene scene = new Scene(pane, 400, 200);
+            stage.setScene(scene);
+            stage.show();
+            launchLatch.countDown();
+        }
+    }
+
+    @BeforeClass
+    public static void setupOnce() {
+        // Start the Application
+        new Thread(() -> Application.launch(MyApp.class, (String[]) null)).start();
+
+        try {
+            if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {
+                throw new AssertionFailedError("Timeout waiting for Application to launch");
+            }
+        } catch (InterruptedException ex) {
+            AssertionFailedError err = new AssertionFailedError("Unexpected exception");
+            err.initCause(ex);
+            throw err;
+        }
+
+        assertEquals(0, launchLatch.getCount());
+    }
+
+
+
+    @AfterClass
+    public static void teardownOnce() {
+        Platform.exit();
+    }
+
+    private void addTextToPane(Text text) {
+        final CountDownLatch rDone = new CountDownLatch(1);
+        Platform.runLater(() -> {
+            text.layoutYProperty().addListener(inv -> {
+                rDone.countDown();
+            });
+            pane.getChildren().add(text);
+        });
+
+        try {
+            if (!rDone.await(TIMEOUT, TimeUnit.MILLISECONDS)) {
+                throw new AssertionFailedError("Timeout waiting for runLater");
+            }
+        } catch (InterruptedException ex) {
+            throw new AssertionFailedError("Unexpected exception waiting for runLater");
+        }
+    }
+
+    @Test
+    public void testZeroChar() {
+        String FULL_UNICODE_SET;
+        StringBuilder builder = new StringBuilder();
+        for (int character = 0; character < 10000; character++) {
+             char[] chars = Character.toChars(character);
+             builder.append(chars);
+        }
+        FULL_UNICODE_SET = builder.toString();
+        Text text = new Text(FULL_UNICODE_SET);
+        addTextToPane(text);
+    }
+
+    @Test
+    public void testSurrogatePair() {
+        StringBuilder builder = new StringBuilder();
+        builder.append(Character.toChars(55358));
+        builder.append(Character.toChars(56605));
+        builder.append(Character.toChars(8205));
+
+        Text text = new Text(builder.toString());
+        addTextToPane(text);
+    }
+}
