diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/PangoGlyphLayout.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/PangoGlyphLayout.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/PangoGlyphLayout.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/PangoGlyphLayout.java
@@ -33,11 +33,11 @@
 import com.sun.javafx.font.PrismFontFactory;
 import com.sun.javafx.text.GlyphLayout;
 import com.sun.javafx.text.TextRun;
 
 import java.util.Arrays;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 class PangoGlyphLayout extends GlyphLayout {
     private static final long fontmap;
 
@@ -82,11 +82,11 @@
         if (desc != 0) OSPango.pango_font_description_free(desc);
         if (context != 0) OSPango.g_object_unref(context);
         return true;
     }
 
-    private Map<TextRun, Long> runUtf8 = new HashMap<>();
+    private Map<TextRun, Long> runUtf8 = new LinkedHashMap<>();
     public void layout(TextRun run, PGFont font, FontStrike strike, char[] text) {
         /* Create the pango font and attribute list */
         FontResource fr = font.getFontResource();
         boolean composite = fr instanceof CompositeFontResource;
         if (composite) {
@@ -131,14 +131,14 @@
 
         Long str = runUtf8.get(run);
         if (str == null) {
             char[] rtext = Arrays.copyOfRange(text, run.getStart(), run.getEnd());
             str = OSPango.g_utf16_to_utf8(rtext);
-            runUtf8.put(run, str);
             if (check(str, "Failed allocating UTF-8 buffer.", context, desc, attrList)) {
                 return;
             }
+            runUtf8.put(run, str);
         }
 
         /* Itemize */
         long utflen = OSPango.g_utf8_strlen(str,-1);
         long end = OSPango.g_utf8_offset_to_pointer(str, utflen);
