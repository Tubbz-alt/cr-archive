diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/OSPango.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/OSPango.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/OSPango.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/OSPango.java
@@ -81,10 +81,11 @@
     static final native void pango_item_free(long item);
 
     /* Miscellaneous (glib, fontconfig) */
     static final native long g_utf8_offset_to_pointer(long str, long offset);
     static final native long g_utf8_pointer_to_offset(long str, long pos);
+    static final native long g_utf8_strlen(long str, long max);
     static final native long g_utf16_to_utf8(char[] str);
     static final native void g_free(long ptr);
     static final native int g_list_length(long list);
     static final native long g_list_nth_data(long list, int n);
     static final native void g_list_free(long list);
diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/PangoGlyphLayout.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/PangoGlyphLayout.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/PangoGlyphLayout.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/font/freetype/PangoGlyphLayout.java
@@ -32,10 +32,14 @@
 import com.sun.javafx.font.PGFont;
 import com.sun.javafx.font.PrismFontFactory;
 import com.sun.javafx.text.GlyphLayout;
 import com.sun.javafx.text.TextRun;
 
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+
 class PangoGlyphLayout extends GlyphLayout {
     private static final long fontmap;
 
     static {
         fontmap = OSPango.pango_ft2_font_map_new();
@@ -78,13 +82,15 @@
         if (desc != 0) OSPango.pango_font_description_free(desc);
         if (context != 0) OSPango.g_object_unref(context);
         return true;
     }
 
-    private long str = 0L;
+    private Map<TextRun, Long> runUtf8 = new HashMap<>();
     public void layout(TextRun run, PGFont font, FontStrike strike, char[] text) {
-
+        for (char c: text) {
+            if (c == 0) c = '\f';
+        }
         /* Create the pango font and attribute list */
         FontResource fr = font.getFontResource();
         boolean composite = fr instanceof CompositeFontResource;
         if (composite) {
             fr = ((CompositeFontResource)fr).getSlotResource(0);
@@ -124,20 +130,24 @@
         if (!composite) {
             attr = OSPango.pango_attr_fallback_new(false);
             OSPango.pango_attr_list_insert(attrList, attr);
         }
 
-        if (str == 0L) {
-            str = OSPango.g_utf16_to_utf8(text);
+        Long str = runUtf8.get(run);
+        if (str == null) {
+            char[] rtext = Arrays.copyOfRange(text, run.getStart(), run.getEnd());
+            str = OSPango.g_utf16_to_utf8(rtext);
+            runUtf8.put(run, str);
             if (check(str, "Failed allocating UTF-8 buffer.", context, desc, attrList)) {
                 return;
             }
         }
 
         /* Itemize */
         long start = OSPango.g_utf8_offset_to_pointer(str, run.getStart());
-        long end = OSPango.g_utf8_offset_to_pointer(str, run.getEnd());
+        long utflen = OSPango.g_utf8_strlen(str,-1);
+        long end = OSPango.g_utf8_offset_to_pointer(str, utflen);
         long runs = OSPango.pango_itemize(context, str, (int)(start - str), (int)(end - start), attrList, 0);
 
         if (runs != 0) {
             /* Shape all PangoItem into PangoGlyphString */
             int runsCount = OSPango.g_list_length(runs);
@@ -197,11 +207,11 @@
     }
 
     @Override
     public void dispose() {
         super.dispose();
-        if (str != 0L) {
+        for (Long str: runUtf8.values()) {
             OSPango.g_free(str);
-            str = 0L;
         }
+        runUtf8.clear();
     }
 }
diff a/modules/javafx.graphics/src/main/native-font/pango.c b/modules/javafx.graphics/src/main/native-font/pango.c
--- a/modules/javafx.graphics/src/main/native-font/pango.c
+++ b/modules/javafx.graphics/src/main/native-font/pango.c
@@ -396,10 +396,17 @@
 {
     if (!str) return 0;
     return (jlong)g_utf8_pointer_to_offset((const gchar *)str, (const gchar *)pos);
 }
 
+JNIEXPORT jlong JNICALL OS_NATIVE(g_1utf8_1strlen)
+    (JNIEnv *env, jclass that, jlong str, jlong pos)
+{
+    if (!str) return 0;
+    return (jlong)g_utf8_strlen((const gchar *)str, (const gchar *)pos);
+}
+
 JNIEXPORT jlong JNICALL OS_NATIVE(g_1utf16_1to_1utf8)
     (JNIEnv *env, jclass that, jcharArray str)
 {
     if (!str) return 0;
     jsize length = (*env)->GetArrayLength(env, str);
diff a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/text/TextLayoutTest.java b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/text/TextLayoutTest.java
--- a/modules/javafx.graphics/src/test/java/test/com/sun/javafx/text/TextLayoutTest.java
+++ b/modules/javafx.graphics/src/test/java/test/com/sun/javafx/text/TextLayoutTest.java
@@ -24,19 +24,22 @@
  */
 
 package test.com.sun.javafx.text;
 
 import javafx.scene.text.Font;
+import com.sun.javafx.text.TextRun;
 
 import com.sun.javafx.font.PGFont;
 import com.sun.javafx.geom.RectBounds;
 import com.sun.javafx.scene.text.GlyphList;
 import com.sun.javafx.scene.text.TextSpan;
 import com.sun.javafx.scene.text.TextLine;
 import com.sun.javafx.scene.text.FontHelper;
 import com.sun.javafx.font.CharToGlyphMapper;
 import com.sun.javafx.text.PrismTextLayout;
+import com.sun.javafx.text.GlyphLayout;
+import com.sun.javafx.text.TextRun;
 
 import org.junit.Ignore;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
@@ -93,10 +96,25 @@
         for (int i = 0; i < runs.length; i++) {
             assertEquals("run " +i, complex[i], runs[i].isComplex());
         }
     }
 
+    @Ignore() // ignored since StubFontLoader used in tests return fonts with null resources
+    @Test public void utf16chars() {
+        GlyphLayout layout = GlyphLayout.getInstance();
+        assertNotNull(layout);
+        char[] text = new char[5];
+        text[0] = 0xD83D;
+        text[1] = 0xDC68;
+        text[2] = 0xD83C;
+        text[3] = 0xDFFE;
+        text[4] = 0x17FF;
+        TextRun run = new TextRun(0, 5, (byte)0, true, 0, null, 0, false);
+        PGFont font = (PGFont) FontHelper.getNativeFont(Font.getDefault());
+        layout.layout(run, font, null, text);
+    }
+
     @SuppressWarnings("deprecation")
     @Ignore("JDK-8087615")
     @Test public void buildRuns() {
 
         PrismTextLayout layout = new PrismTextLayout();
