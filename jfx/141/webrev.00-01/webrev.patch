diff a/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java
@@ -134,15 +134,24 @@
      *             if {@code property} is {@code null}
      * @since JavaFX 8.0
      */
     public static BooleanProperty booleanProperty(final Property<Boolean> property) {
         Objects.requireNonNull(property, "Property cannot be null");
-        return property instanceof BooleanProperty ? (BooleanProperty) property :
-                new SimpleBooleanProperty(null, property.getName()) { // Virtual property, no bean
+        return property instanceof BooleanProperty ? (BooleanProperty)property : new BooleanPropertyBase() {
             {
                 BidirectionalBinding.bind(this, property);
             }
+
+            @Override
+            public Object getBean() {
+                return null; // Virtual property, no bean
+            }
+
+            @Override
+            public String getName() {
+                return property.getName();
+            }
         };
     }
 
     /**
      * Creates an {@link javafx.beans.property.ObjectProperty} that holds the value
@@ -153,12 +162,22 @@
      * @return the new {@code ObjectProperty}
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Boolean> asObject() {
-        return new SimpleObjectProperty<>(null, BooleanProperty.this.getName()) { // Virtual property, does not exist on a bean
+        return new ObjectPropertyBase<> () {
             {
                 BidirectionalBinding.bind(this, BooleanProperty.this);
             }
+
+            @Override
+            public Object getBean() {
+                return null; // Virtual property, does not exist on a bean
+            }
+
+            @Override
+            public String getName() {
+                return BooleanProperty.this.getName();
+            }
         };
     }
 }
diff a/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
@@ -144,14 +144,24 @@
      * @see #asObject()
      * @since JavaFX 8.0
      */
     public static DoubleProperty doubleProperty(final Property<Double> property) {
         Objects.requireNonNull(property, "Property cannot be null");
-        return new SimpleDoubleProperty(null, property.getName()) {  // Virtual property, no bean
+        return new DoublePropertyBase() {
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
+
+            @Override
+            public Object getBean() {
+                return null; // Virtual property, no bean
+            }
+
+            @Override
+            public String getName() {
+                return property.getName();
+            }
         };
     }
 
     /**
      * Creates an {@link javafx.beans.property.ObjectProperty}
@@ -172,12 +182,22 @@
      * @return the new {@code ObjectProperty}
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Double> asObject() {
-        return new SimpleObjectProperty<>(null, DoubleProperty.this.getName()) {// Virtual property, does not exist on a bean
+        return new ObjectPropertyBase<> () {
             {
                 BidirectionalBinding.bindNumber(this, DoubleProperty.this);
             }
+
+            @Override
+            public Object getBean() {
+                return null; // Virtual property, does not exist on a bean
+            }
+
+            @Override
+            public String getName() {
+                return DoubleProperty.this.getName();
+            }
         };
     }
 }
diff a/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
@@ -144,14 +144,24 @@
      * @see #asObject()
      * @since JavaFX 8.0
      */
     public static FloatProperty floatProperty(final Property<Float> property) {
         Objects.requireNonNull(property, "Property cannot be null");
-        return new SimpleFloatProperty(null, property.getName()) {  // Virtual property, no bean
+        return new FloatPropertyBase() {
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
+
+            @Override
+            public Object getBean() {
+                return null; // Virtual property, no bean
+            }
+
+            @Override
+            public String getName() {
+                return property.getName();
+            }
         };
     }
 
     /**
      * Creates an {@link javafx.beans.property.ObjectProperty} that
@@ -172,12 +182,22 @@
      * @return the new {@code ObjectProperty}
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Float> asObject() {
-        return new SimpleObjectProperty<>(null, FloatProperty.this.getName()) { // Virtual property, does not exist on a bean
+        return new ObjectPropertyBase<> () {
             {
                 BidirectionalBinding.bindNumber(this, FloatProperty.this);
             }
+
+            @Override
+            public Object getBean() {
+                return null; // Virtual property, does not exist on a bean
+            }
+
+            @Override
+            public String getName() {
+                return FloatProperty.this.getName();
+            }
         };
     }
 }
diff a/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java
@@ -144,14 +144,24 @@
      * @see #asObject()
      * @since JavaFX 8.0
      */
     public static IntegerProperty integerProperty(final Property<Integer> property) {
         Objects.requireNonNull(property, "Property cannot be null");
-        return new SimpleIntegerProperty(null, property.getName()) { // Virtual property, no bean
+        return new IntegerPropertyBase() {
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
+
+            @Override
+            public Object getBean() {
+                return null; // Virtual property, no bean
+            }
+
+            @Override
+            public String getName() {
+                return property.getName();
+            }
         };
     }
 
      /**
      * Creates an {@link javafx.beans.property.ObjectProperty}
@@ -172,12 +182,22 @@
      * @return the new {@code ObjectProperty}
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Integer> asObject() {
-        return new SimpleObjectProperty<>(null, IntegerProperty.this.getName()) { // Virtual property, does not exist on a bean
+        return new ObjectPropertyBase<> () {
             {
                 BidirectionalBinding.bindNumber(this, IntegerProperty.this);
             }
+
+            @Override
+            public Object getBean() {
+                return null; // Virtual property, does not exist on a bean
+            }
+
+            @Override
+            public String getName() {
+                return IntegerProperty.this.getName();
+            }
         };
     }
 }
diff a/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java
@@ -142,14 +142,24 @@
      * @see #asObject()
      * @since JavaFX 8.0
      */
     public static LongProperty longProperty(final Property<Long> property) {
         Objects.requireNonNull(property, "Property cannot be null");
-        return new SimpleLongProperty(null, property.getName()) { // Virtual property, no bean
+        return new LongPropertyBase() {
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
+
+            @Override
+            public Object getBean() {
+                return null; // Virtual property, no bean
+            }
+
+            @Override
+            public String getName() {
+                return property.getName();
+            }
         };
     }
 
      /**
      * Creates an {@link javafx.beans.property.ObjectProperty}
@@ -170,12 +180,22 @@
      * @return the new {@code ObjectProperty}
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Long> asObject() {
-        return new SimpleObjectProperty<>(null, LongProperty.this.getName()) { // Virtual property, does not exist on a bean
+        return new ObjectPropertyBase<> () {
             {
                 BidirectionalBinding.bindNumber(this, LongProperty.this);
             }
+
+            @Override
+            public Object getBean() {
+                return null; // Virtual property, does not exist on a bean
+            }
+
+            @Override
+            public String getName() {
+                return LongProperty.this.getName();
+            }
         };
     }
 }
