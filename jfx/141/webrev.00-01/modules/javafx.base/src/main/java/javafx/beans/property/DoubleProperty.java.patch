diff a/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
@@ -144,14 +144,24 @@
      * @see #asObject()
      * @since JavaFX 8.0
      */
     public static DoubleProperty doubleProperty(final Property<Double> property) {
         Objects.requireNonNull(property, "Property cannot be null");
-        return new SimpleDoubleProperty(null, property.getName()) {  // Virtual property, no bean
+        return new DoublePropertyBase() {
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
+
+            @Override
+            public Object getBean() {
+                return null; // Virtual property, no bean
+            }
+
+            @Override
+            public String getName() {
+                return property.getName();
+            }
         };
     }
 
     /**
      * Creates an {@link javafx.beans.property.ObjectProperty}
@@ -172,12 +182,22 @@
      * @return the new {@code ObjectProperty}
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Double> asObject() {
-        return new SimpleObjectProperty<>(null, DoubleProperty.this.getName()) {// Virtual property, does not exist on a bean
+        return new ObjectPropertyBase<> () {
             {
                 BidirectionalBinding.bindNumber(this, DoubleProperty.this);
             }
+
+            @Override
+            public Object getBean() {
+                return null; // Virtual property, does not exist on a bean
+            }
+
+            @Override
+            public String getName() {
+                return DoubleProperty.this.getName();
+            }
         };
     }
 }
