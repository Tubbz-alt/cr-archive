diff a/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
@@ -23,10 +23,12 @@
  * questions.
  */
 
 package javafx.beans.property;
 
+import java.util.Objects;
+
 import com.sun.javafx.binding.BidirectionalBinding;
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WritableFloatValue;
 import com.sun.javafx.binding.Logging;
@@ -140,28 +142,16 @@
      * @throws NullPointerException
      *             if {@code property} is {@code null}
      * @see #asObject()
      * @since JavaFX 8.0
      */
-     public static FloatProperty floatProperty(final Property<Float> property) {
-        if (property == null) {
-            throw new NullPointerException("Property cannot be null");
-        }
-        return new FloatPropertyBase() {
+    public static FloatProperty floatProperty(final Property<Float> property) {
+        Objects.requireNonNull(property, "Property cannot be null");
+        return new SimpleFloatProperty(null, property.getName()) {  // Virtual property, no bean
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
-
-            @Override
-            public Object getBean() {
-                return null; // Virtual property, no bean
-            }
-
-            @Override
-            public String getName() {
-                return property.getName();
-            }
         };
     }
 
     /**
      * Creates an {@link javafx.beans.property.ObjectProperty} that
@@ -182,23 +172,12 @@
      * @return the new {@code ObjectProperty}
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Float> asObject() {
-        return new ObjectPropertyBase<Float> () {
+        return new SimpleObjectProperty<>(null, FloatProperty.this.getName()) { // Virtual property, does not exist on a bean
             {
                 BidirectionalBinding.bindNumber(this, FloatProperty.this);
             }
-
-            @Override
-            public Object getBean() {
-                return null; // Virtual property, does not exist on a bean
-            }
-
-            @Override
-            public String getName() {
-                return FloatProperty.this.getName();
-            }
         };
     }
-
-}
+}
