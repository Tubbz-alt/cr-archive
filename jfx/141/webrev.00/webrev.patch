diff a/modules/javafx.base/src/main/java/com/sun/javafx/binding/BidirectionalBinding.java b/modules/javafx.base/src/main/java/com/sun/javafx/binding/BidirectionalBinding.java
--- a/modules/javafx.base/src/main/java/com/sun/javafx/binding/BidirectionalBinding.java
+++ b/modules/javafx.base/src/main/java/com/sun/javafx/binding/BidirectionalBinding.java
@@ -23,27 +23,26 @@
  * questions.
  */
 
 package com.sun.javafx.binding;
 
-import javafx.beans.Observable;
 import javafx.beans.WeakListener;
 import javafx.beans.property.*;
 import javafx.beans.value.ChangeListener;
 import javafx.beans.value.ObservableValue;
 import javafx.util.StringConverter;
 
 import java.lang.ref.WeakReference;
 import java.text.Format;
 import java.text.ParseException;
+import java.util.Objects;
 
 public abstract class BidirectionalBinding<T> implements ChangeListener<T>, WeakListener {
 
     private static void checkParameters(Object property1, Object property2) {
-        if ((property1 == null) || (property2 == null)) {
-            throw new NullPointerException("Both properties must be specified.");
-        }
+        Objects.requireNonNull(property1, "Both properties must be specified.");
+        Objects.requireNonNull(property2, "Both properties must be specified.");
         if (property1 == property2) {
             throw new IllegalArgumentException("Cannot bind property to itself");
         }
     }
 
@@ -67,26 +66,22 @@
         return binding;
     }
 
     public static Object bind(Property<String> stringProperty, Property<?> otherProperty, Format format) {
         checkParameters(stringProperty, otherProperty);
-        if (format == null) {
-            throw new NullPointerException("Format cannot be null");
-        }
-        final StringConversionBidirectionalBinding<?> binding = new StringFormatBidirectionalBinding(stringProperty, otherProperty, format);
+        Objects.requireNonNull(format, "Format cannot be null");
+        final var binding = new StringFormatBidirectionalBinding(stringProperty, otherProperty, format);
         stringProperty.setValue(format.format(otherProperty.getValue()));
         stringProperty.addListener(binding);
         otherProperty.addListener(binding);
         return binding;
     }
 
     public static <T> Object bind(Property<String> stringProperty, Property<T> otherProperty, StringConverter<T> converter) {
         checkParameters(stringProperty, otherProperty);
-        if (converter == null) {
-            throw new NullPointerException("Converter cannot be null");
-        }
-        final StringConversionBidirectionalBinding<T> binding = new StringConverterBidirectionalBinding<T>(stringProperty, otherProperty, converter);
+        Objects.requireNonNull(converter, "Converter cannot be null");
+        final var binding = new StringConverterBidirectionalBinding<>(stringProperty, otherProperty, converter);
         stringProperty.setValue(converter.toString(otherProperty.getValue()));
         stringProperty.addListener(binding);
         otherProperty.addListener(binding);
         return binding;
     }
diff a/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/BooleanProperty.java
@@ -23,10 +23,12 @@
  * questions.
  */
 
 package javafx.beans.property;
 
+import java.util.Objects;
+
 import com.sun.javafx.binding.BidirectionalBinding;
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WritableBooleanValue;
 import com.sun.javafx.binding.Logging;
@@ -131,27 +133,16 @@
      * @throws NullPointerException
      *             if {@code property} is {@code null}
      * @since JavaFX 8.0
      */
     public static BooleanProperty booleanProperty(final Property<Boolean> property) {
-        if (property == null) {
-            throw new NullPointerException("Property cannot be null");
-        }
-        return property instanceof BooleanProperty ? (BooleanProperty)property : new BooleanPropertyBase() {
+        Objects.requireNonNull(property, "Property cannot be null");
+        return property instanceof BooleanProperty ? (BooleanProperty) property :
+                new SimpleBooleanProperty(null, property.getName()) { // Virtual property, no bean
             {
                 BidirectionalBinding.bind(this, property);
             }
-
-            @Override
-            public Object getBean() {
-                return null; // Virtual property, no bean
-            }
-
-            @Override
-            public String getName() {
-                return property.getName();
-            }
         };
     }
 
     /**
      * Creates an {@link javafx.beans.property.ObjectProperty} that holds the value
@@ -162,22 +153,12 @@
      * @return the new {@code ObjectProperty}
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Boolean> asObject() {
-        return new ObjectPropertyBase<Boolean> () {
+        return new SimpleObjectProperty<>(null, BooleanProperty.this.getName()) { // Virtual property, does not exist on a bean
             {
                 BidirectionalBinding.bind(this, BooleanProperty.this);
             }
-
-            @Override
-            public Object getBean() {
-                return null; // Virtual property, does not exist on a bean
-            }
-
-            @Override
-            public String getName() {
-                return BooleanProperty.this.getName();
-            }
         };
     }
-}
+}
diff a/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/DoubleProperty.java
@@ -23,21 +23,18 @@
  * questions.
  */
 
 package javafx.beans.property;
 
+import java.util.Objects;
+
 import com.sun.javafx.binding.BidirectionalBinding;
-import com.sun.javafx.binding.ExpressionHelper;
+import com.sun.javafx.binding.Logging;
+
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WritableDoubleValue;
-import com.sun.javafx.binding.Logging;
-import javafx.beans.InvalidationListener;
-import javafx.beans.Observable;
-import javafx.beans.WeakInvalidationListener;
-import javafx.beans.value.ChangeListener;
-import javafx.beans.value.ObservableDoubleValue;
 
 /**
  * This class defines a {@link Property} wrapping a {@code double} value.
  * <p>
  * The value of a {@code DoubleProperty} can be get and set with {@link #get()},
@@ -146,27 +143,15 @@
      *             if {@code property} is {@code null}
      * @see #asObject()
      * @since JavaFX 8.0
      */
     public static DoubleProperty doubleProperty(final Property<Double> property) {
-        if (property == null) {
-            throw new NullPointerException("Property cannot be null");
-        }
-        return new DoublePropertyBase() {
+        Objects.requireNonNull(property, "Property cannot be null");
+        return new SimpleDoubleProperty(null, property.getName()) {  // Virtual property, no bean
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
-
-            @Override
-            public Object getBean() {
-                return null; // Virtual property, no bean
-            }
-
-            @Override
-            public String getName() {
-                return property.getName();
-            }
         };
     }
 
     /**
      * Creates an {@link javafx.beans.property.ObjectProperty}
@@ -187,24 +172,12 @@
      * @return the new {@code ObjectProperty}
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Double> asObject() {
-        return new ObjectPropertyBase<Double> () {
+        return new SimpleObjectProperty<>(null, DoubleProperty.this.getName()) {// Virtual property, does not exist on a bean
             {
                 BidirectionalBinding.bindNumber(this, DoubleProperty.this);
             }
-
-            @Override
-            public Object getBean() {
-                return null; // Virtual property, does not exist on a bean
-            }
-
-            @Override
-            public String getName() {
-                return DoubleProperty.this.getName();
-            }
         };
     }
-
-
-}
+}
diff a/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/FloatProperty.java
@@ -23,10 +23,12 @@
  * questions.
  */
 
 package javafx.beans.property;
 
+import java.util.Objects;
+
 import com.sun.javafx.binding.BidirectionalBinding;
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WritableFloatValue;
 import com.sun.javafx.binding.Logging;
@@ -140,28 +142,16 @@
      * @throws NullPointerException
      *             if {@code property} is {@code null}
      * @see #asObject()
      * @since JavaFX 8.0
      */
-     public static FloatProperty floatProperty(final Property<Float> property) {
-        if (property == null) {
-            throw new NullPointerException("Property cannot be null");
-        }
-        return new FloatPropertyBase() {
+    public static FloatProperty floatProperty(final Property<Float> property) {
+        Objects.requireNonNull(property, "Property cannot be null");
+        return new SimpleFloatProperty(null, property.getName()) {  // Virtual property, no bean
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
-
-            @Override
-            public Object getBean() {
-                return null; // Virtual property, no bean
-            }
-
-            @Override
-            public String getName() {
-                return property.getName();
-            }
         };
     }
 
     /**
      * Creates an {@link javafx.beans.property.ObjectProperty} that
@@ -182,23 +172,12 @@
      * @return the new {@code ObjectProperty}
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Float> asObject() {
-        return new ObjectPropertyBase<Float> () {
+        return new SimpleObjectProperty<>(null, FloatProperty.this.getName()) { // Virtual property, does not exist on a bean
             {
                 BidirectionalBinding.bindNumber(this, FloatProperty.this);
             }
-
-            @Override
-            public Object getBean() {
-                return null; // Virtual property, does not exist on a bean
-            }
-
-            @Override
-            public String getName() {
-                return FloatProperty.this.getName();
-            }
         };
     }
-
-}
+}
diff a/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/IntegerProperty.java
@@ -23,10 +23,12 @@
  * questions.
  */
 
 package javafx.beans.property;
 
+import java.util.Objects;
+
 import com.sun.javafx.binding.BidirectionalBinding;
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WritableIntegerValue;
 import com.sun.javafx.binding.Logging;
@@ -140,28 +142,16 @@
      * @throws NullPointerException
      *             if {@code property} is {@code null}
      * @see #asObject()
      * @since JavaFX 8.0
      */
-     public static IntegerProperty integerProperty(final Property<Integer> property) {
-        if (property == null) {
-            throw new NullPointerException("Property cannot be null");
-        }
-        return new IntegerPropertyBase() {
+    public static IntegerProperty integerProperty(final Property<Integer> property) {
+        Objects.requireNonNull(property, "Property cannot be null");
+        return new SimpleIntegerProperty(null, property.getName()) { // Virtual property, no bean
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
-
-            @Override
-            public Object getBean() {
-                return null; // Virtual property, no bean
-            }
-
-            @Override
-            public String getName() {
-                return property.getName();
-            }
         };
     }
 
      /**
      * Creates an {@link javafx.beans.property.ObjectProperty}
@@ -182,22 +172,12 @@
      * @return the new {@code ObjectProperty}
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Integer> asObject() {
-        return new ObjectPropertyBase<Integer> () {
+        return new SimpleObjectProperty<>(null, IntegerProperty.this.getName()) { // Virtual property, does not exist on a bean
             {
                 BidirectionalBinding.bindNumber(this, IntegerProperty.this);
             }
-
-            @Override
-            public Object getBean() {
-                return null; // Virtual property, does not exist on a bean
-            }
-
-            @Override
-            public String getName() {
-                return IntegerProperty.this.getName();
-            }
         };
     }
-}
+}
diff a/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java b/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java
--- a/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/property/LongProperty.java
@@ -23,10 +23,12 @@
  * questions.
  */
 
 package javafx.beans.property;
 
+import java.util.Objects;
+
 import com.sun.javafx.binding.BidirectionalBinding;
 import javafx.beans.binding.Bindings;
 import javafx.beans.value.ObservableValue;
 import javafx.beans.value.WritableLongValue;
 import com.sun.javafx.binding.Logging;
@@ -138,28 +140,16 @@
      * @throws NullPointerException
      *             if {@code property} is {@code null}
      * @see #asObject()
      * @since JavaFX 8.0
      */
-     public static LongProperty longProperty(final Property<Long> property) {
-        if (property == null) {
-            throw new NullPointerException("Property cannot be null");
-        }
-        return new LongPropertyBase() {
+    public static LongProperty longProperty(final Property<Long> property) {
+        Objects.requireNonNull(property, "Property cannot be null");
+        return new SimpleLongProperty(null, property.getName()) { // Virtual property, no bean
             {
                 BidirectionalBinding.bindNumber(this, property);
             }
-
-            @Override
-            public Object getBean() {
-                return null; // Virtual property, no bean
-            }
-
-            @Override
-            public String getName() {
-                return property.getName();
-            }
         };
     }
 
      /**
      * Creates an {@link javafx.beans.property.ObjectProperty}
@@ -180,22 +170,12 @@
      * @return the new {@code ObjectProperty}
      * @since JavaFX 8.0
      */
     @Override
     public ObjectProperty<Long> asObject() {
-        return new ObjectPropertyBase<Long> () {
+        return new SimpleObjectProperty<>(null, LongProperty.this.getName()) { // Virtual property, does not exist on a bean
             {
                 BidirectionalBinding.bindNumber(this, LongProperty.this);
             }
-
-            @Override
-            public Object getBean() {
-                return null; // Virtual property, does not exist on a bean
-            }
-
-            @Override
-            public String getName() {
-                return LongProperty.this.getName();
-            }
         };
     }
-}
+}
