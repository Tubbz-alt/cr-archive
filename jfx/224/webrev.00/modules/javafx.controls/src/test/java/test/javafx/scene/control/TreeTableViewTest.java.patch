diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TreeTableViewTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TreeTableViewTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TreeTableViewTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TreeTableViewTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -80,10 +80,11 @@
 import javafx.scene.shape.Circle;
 import javafx.scene.shape.Rectangle;
 import javafx.stage.Stage;
 import javafx.util.Callback;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 
 import com.sun.javafx.scene.control.TableColumnComparatorBase.TreeTableColumnComparator;
@@ -141,10 +142,12 @@
             private TreeItem<String> mikeGraham;
             private TreeItem<String> judyMayer;
             private TreeItem<String> gregorySmith;
 
     @Before public void setup() {
+        setUncaughtExceptionHandler();
+
         treeTableView = new TreeTableView<String>();
         sm = treeTableView.getSelectionModel();
         fm = treeTableView.getFocusModel();
 
         // build sample data #2, even though it may not be used...
@@ -179,10 +182,14 @@
             judyMayer,
             gregorySmith
         );
     }
 
+    @After public void cleanup() {
+        removeUncaughtExceptionHandler();
+    }
+
     private void installChildren() {
         root = new TreeItem<String>("Root");
         child1 = new TreeItem<String>("Child 1");
         child2 = new TreeItem<String>("Child 2");
         child3 = new TreeItem<String>("Child 3");
@@ -206,10 +213,25 @@
         sb.append("] \nFocus: " + fm.getFocusedIndex());
 //        sb.append(" \nAnchor: " + getAnchor());
         return sb.toString();
     }
 
+    private void setUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+    }
+
+    private void removeUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
+    }
+
+
     @Test public void ensureCorrectInitialState() {
         installChildren();
         assertEquals(0, treeTableView.getRow(root));
         assertEquals(1, treeTableView.getRow(child1));
         assertEquals(2, treeTableView.getRow(child2));
@@ -4890,11 +4912,10 @@
 
     private void test_rt_39482_selectRow(String expectedString,
                                          TreeTableView.TreeTableViewSelectionModel<String> sm,
                                          int rowToSelect,
                                          TreeTableColumn<String,String> columnToSelect) {
-        System.out.println("\nSelect row " + rowToSelect);
         sm.selectAll();
         assertEquals(4, sm.getSelectedCells().size());
         assertEquals(4, sm.getSelectedIndices().size());
         assertEquals(4, sm.getSelectedItems().size());
         assertEquals(4, rt_39482_list.size());
@@ -5757,11 +5778,10 @@
 
             // secondly, we expect the added size to be three, as that is the
             // number of items selected
             c.reset();
             c.next();
-            System.out.println("Added items: " + c.getAddedSubList());
             assertEquals(indices.length, c.getAddedSize());
             assertArrayEquals(indices, c.getAddedSubList().stream().mapToInt(i -> i).toArray());
         };
         sm.getSelectedIndices().addListener(l);
         sm.selectIndices(indices[0], indices);
@@ -6074,11 +6094,10 @@
         assertEquals(3, sm.getSelectedItems().size());
         assertEquals(1, indicesEventCount.get());
         assertEquals(1, itemsEventCount.get());
 
         step.set(1);
-        System.out.println("about to collapse now");
         childNode1.setExpanded(false); // collapse Child Node 1 and expect both children to be deselected
         assertTrue(sm.isSelected(1));
         assertFalse(sm.isSelected(2));
         assertFalse(sm.isSelected(3));
         assertEquals(1, sm.getSelectedIndices().size());
@@ -6112,12 +6131,10 @@
         MultipleSelectionModel<TreeItem<String>> sm = view.getSelectionModel();
         sm.setSelectionMode(SelectionMode.MULTIPLE);
 
         view.expandedItemCountProperty().addListener((observable, oldCount, newCount) -> {
             if (childNode1.isExpanded()) return;
-            System.out.println(sm.getSelectedIndices());
-            System.out.println(sm.getSelectedItems());
             assertTrue(sm.isSelected(1));
             assertFalse(sm.isSelected(2));
             assertFalse(sm.isSelected(3));
             assertEquals(1, sm.getSelectedIndices().size());
             assertEquals(1, sm.getSelectedItems().size());
