diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ButtonTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ButtonTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ButtonTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ButtonTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -51,11 +51,10 @@
 import javafx.scene.control.ContextMenu;
 import javafx.scene.control.MenuItem;
 import javafx.scene.control.Skin;
 import org.junit.Before;
 import org.junit.After;
-import org.junit.Ignore;
 import org.junit.Test;
 import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassDoesNotExist;
 import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertPseudoClassExists;
 import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;
 import static org.junit.Assert.assertEquals;
@@ -202,14 +201,25 @@
         btn.defaultButtonProperty().bind(other);
         other.setValue(false);
         assertPseudoClassDoesNotExist(btn, "default");
     }
 
-    @Ignore("impl_cssSet API removed")
     @Test public void cannotSpecifyDefaultButtonViaCSS() {
-//        btn.impl_cssSet("-fx-default-button", true);
+        // By default, 'btn' is not a default button
+        // Making it a default button via CSS should not succeed
+        btn.setStyle("-fx-default-button: true;");
+        btn.applyCss();
         assertFalse(btn.isDefaultButton());
+
+        // Set button to be a default button
+        btn.setDefaultButton(true);
+        assertTrue(btn.isDefaultButton());
+
+        // Making it a non-default button via CSS should not succeed
+        btn.setStyle("-fx-default-button: false;");
+        btn.applyCss();
+        assertTrue(btn.isDefaultButton());
     }
 
     @Test public void defaultButtonPropertyHasBeanReference() {
         assertSame(btn, btn.defaultButtonProperty().getBean());
     }
@@ -344,14 +354,25 @@
             " Scene.getAccelerators().", 0, scene.getAccelerators().size());
 
         tk.firePulse();
     }
 
-    @Ignore("impl_cssSet API removed")
     @Test public void cannotSpecifyCancelButtonViaCSS() {
-//        btn.impl_cssSet("-fx-cancel-button", true);
+        // By default, 'btn' is not a cancel button
+        // Making it a cancel button via CSS should not succeed
+        btn.setStyle("-fx-cancel-button: true;");
+        btn.applyCss();
         assertFalse(btn.isCancelButton());
+
+        // Make button a cancel-button
+        btn.setCancelButton(true);
+        assertTrue(btn.isCancelButton());
+
+        // Making it a non-cancel button via CSS should not succeed
+        btn.setStyle("-fx-cancel-button: false;");
+        btn.applyCss();
+        assertTrue(btn.isCancelButton());
     }
 
     @Test public void cancelButtonPropertyHasBeanReference() {
         assertSame(btn, btn.cancelButtonProperty().getBean());
     }
@@ -408,11 +429,10 @@
     @Test public void contextMenuShouldShowOnInSomeCircumstances() {
         ContextMenu popupMenu = new ContextMenu();
         MenuItem item1 = new MenuItem("_About");
         popupMenu.getItems().add(item1);
         popupMenu.setOnShown(w -> {
-            System.out.println("popup shown");
             count++;
         });
 
         btn.setContextMenu(popupMenu);
         btn.setDefaultButton(true);
