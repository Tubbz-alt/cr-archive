diff a/modules/javafx.base/src/main/java/javafx/beans/binding/BooleanBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/BooleanBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/BooleanBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/BooleanBinding.java
@@ -58,11 +58,11 @@
  */
 public abstract class BooleanBinding extends BooleanExpression implements
         Binding<Boolean> {
 
     /**
-     * Sole constructor
+     * Creates a default {@code BooleanBinding}.
      */
     public BooleanBinding() {
     }
 
     private boolean value;
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/BooleanExpression.java b/modules/javafx.base/src/main/java/javafx/beans/binding/BooleanExpression.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/BooleanExpression.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/BooleanExpression.java
@@ -43,11 +43,11 @@
  * @since JavaFX 2.0
  */
 public abstract class BooleanExpression implements ObservableBooleanValue {
 
     /**
-     * Sole constructor
+     * Creates a default {@code BooleanExpression}.
      */
     public BooleanExpression() {
     }
 
     @Override
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/DoubleBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/DoubleBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/DoubleBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/DoubleBinding.java
@@ -114,10 +114,16 @@
     private double value;
     private boolean valid;
     private BindingHelperObserver observer;
     private ExpressionHelper<Number> helper = null;
 
+    /**
+     * Creates a default {@code DoubleBinding}.
+     */
+    public DoubleBinding() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/DoubleExpression.java b/modules/javafx.base/src/main/java/javafx/beans/binding/DoubleExpression.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/DoubleExpression.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/DoubleExpression.java
@@ -42,10 +42,16 @@
  * @since JavaFX 2.0
  */
 public abstract class DoubleExpression extends NumberExpressionBase implements
         ObservableDoubleValue {
 
+    /**
+     * Creates a default {@code DoubleExpression}.
+     */
+    public DoubleExpression() {
+    }
+
     @Override
     public int intValue() {
         return (int) get();
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/FloatBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/FloatBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/FloatBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/FloatBinding.java
@@ -64,10 +64,16 @@
     private float value;
     private boolean valid;
     private BindingHelperObserver observer;
     private ExpressionHelper<Number> helper = null;
 
+    /**
+     * Creates a default {@code FloatBinding}.
+     */
+    public FloatBinding() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/FloatExpression.java b/modules/javafx.base/src/main/java/javafx/beans/binding/FloatExpression.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/FloatExpression.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/FloatExpression.java
@@ -41,10 +41,16 @@
  * @since JavaFX 2.0
  */
 public abstract class FloatExpression extends NumberExpressionBase implements
         ObservableFloatValue {
 
+    /**
+     * Creates a default {@code FloatExpression}.
+     */
+    public FloatExpression() {
+    }
+
     @Override
     public int intValue() {
         return (int) get();
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/IntegerBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/IntegerBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/IntegerBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/IntegerBinding.java
@@ -64,10 +64,16 @@
     private int value;
     private boolean valid = false;
     private BindingHelperObserver observer;
     private ExpressionHelper<Number> helper = null;
 
+    /**
+     * Creates a default {@code IntegerBinding}.
+     */
+    public IntegerBinding() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/IntegerExpression.java b/modules/javafx.base/src/main/java/javafx/beans/binding/IntegerExpression.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/IntegerExpression.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/IntegerExpression.java
@@ -41,10 +41,16 @@
  * @since JavaFX 2.0
  */
 public abstract class IntegerExpression extends NumberExpressionBase implements
         ObservableIntegerValue {
 
+    /**
+     * Creates a default {@code IntegerExpression}.
+     */
+    public IntegerExpression() {
+    }
+
     @Override
     public int intValue() {
         return get();
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/ListBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/ListBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/ListBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/ListBinding.java
@@ -62,10 +62,16 @@
  *            the type of the {@code List} element
  * @since JavaFX 2.1
  */
 public abstract class ListBinding<E> extends ListExpression<E> implements Binding<ObservableList<E>> {
 
+    /**
+     * Creates a default {@code ListBinding}.
+     */
+    public ListBinding() {
+    }
+
     private final ListChangeListener<E> listChangeListener = new ListChangeListener<E>() {
         @Override
         public void onChanged(Change<? extends E> change) {
             invalidateProperties();
             onInvalidating();
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/ListExpression.java b/modules/javafx.base/src/main/java/javafx/beans/binding/ListExpression.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/ListExpression.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/ListExpression.java
@@ -55,10 +55,16 @@
  */
 public abstract class ListExpression<E> implements ObservableListValue<E> {
 
     private static final ObservableList EMPTY_LIST = FXCollections.emptyObservableList();
 
+    /**
+     * Creates a default {@code ListExpression}.
+     */
+    public ListExpression() {
+    }
+
     @Override
     public ObservableList<E> getValue() {
         return get();
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/LongBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/LongBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/LongBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/LongBinding.java
@@ -64,10 +64,16 @@
     private long value;
     private boolean valid = false;
     private BindingHelperObserver observer;
     private ExpressionHelper<Number> helper = null;
 
+    /**
+     * Creates a default {@code LongBinding}.
+     */
+    public LongBinding() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/LongExpression.java b/modules/javafx.base/src/main/java/javafx/beans/binding/LongExpression.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/LongExpression.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/LongExpression.java
@@ -40,10 +40,16 @@
  * @since JavaFX 2.0
  */
 public abstract class LongExpression extends NumberExpressionBase implements
         ObservableLongValue {
 
+    /**
+     * Creates a default {@code LongExpression}.
+     */
+    public LongExpression() {
+    }
+
     @Override
     public int intValue() {
         return (int) get();
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/MapBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/MapBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/MapBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/MapBinding.java
@@ -82,10 +82,16 @@
     private MapExpressionHelper<K, V> helper = null;
 
     private SizeProperty size0;
     private EmptyProperty empty0;
 
+    /**
+     * Creates a default {@code MapBinding}.
+     */
+    public MapBinding() {
+    }
+
     @Override
     public ReadOnlyIntegerProperty sizeProperty() {
         if (size0 == null) {
             size0 = new SizeProperty();
         }
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/MapExpression.java b/modules/javafx.base/src/main/java/javafx/beans/binding/MapExpression.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/MapExpression.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/MapExpression.java
@@ -89,10 +89,16 @@
     @Override
     public ObservableMap<K, V> getValue() {
         return get();
     }
 
+    /**
+     * Creates a default {@code MapExpression}.
+     */
+    public MapExpression() {
+    }
+
     /**
      * Returns a {@code MapExpression} that wraps a
      * {@link javafx.beans.value.ObservableMapValue}. If the
      * {@code ObservableMapValue} is already a {@code MapExpression}, it
      * will be returned. Otherwise a new
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/NumberExpressionBase.java b/modules/javafx.base/src/main/java/javafx/beans/binding/NumberExpressionBase.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/NumberExpressionBase.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/NumberExpressionBase.java
@@ -47,10 +47,16 @@
  * @see DoubleExpression
  * @since JavaFX 2.0
  */
 public abstract class NumberExpressionBase implements NumberExpression {
 
+    /**
+     * Creates a default {@code NumberExpressionBase}.
+     */
+    public NumberExpressionBase() {
+    }
+
     /**
      * Returns an {@code NumberExpressionBase} that wraps a
      * {@link javafx.beans.value.ObservableNumberValue}. If the
      * {@code ObservableNumberValue} is already an instance of
      * {@code NumberExpressionBase}, it will be returned. Otherwise a new
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/ObjectBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/ObjectBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/ObjectBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/ObjectBinding.java
@@ -64,10 +64,16 @@
     private T value;
     private boolean valid = false;
     private BindingHelperObserver observer;
     private ExpressionHelper<T> helper = null;
 
+    /**
+     * Creates a default {@code ObjectBinding}.
+     */
+    public ObjectBinding() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/ObjectExpression.java b/modules/javafx.base/src/main/java/javafx/beans/binding/ObjectExpression.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/ObjectExpression.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/ObjectExpression.java
@@ -47,10 +47,16 @@
     @Override
     public T getValue() {
         return get();
     }
 
+    /**
+     * Creates a default {@code ObjectExpression}.
+     */
+    public ObjectExpression() {
+    }
+
     /**
      * Returns an {@code ObjectExpression} that wraps an
      * {@link javafx.beans.value.ObservableObjectValue}. If the
      * {@code ObservableObjectValue} is already an {@code ObjectExpression}, it
      * will be returned. Otherwise a new
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/SetBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/SetBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/SetBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/SetBinding.java
@@ -63,10 +63,16 @@
  *            the type of the {@code Set} elements
  * @since JavaFX 2.1
  */
 public abstract class SetBinding<E> extends SetExpression<E> implements Binding<ObservableSet<E>> {
 
+    /**
+     * Creates a default {@code SetBinding}.
+     */
+    public SetBinding() {
+    }
+
     private final SetChangeListener<E> setChangeListener = new SetChangeListener<E>() {
         @Override
         public void onChanged(Change<? extends E> change) {
             invalidateProperties();
             onInvalidating();
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/SetExpression.java b/modules/javafx.base/src/main/java/javafx/beans/binding/SetExpression.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/SetExpression.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/SetExpression.java
@@ -55,10 +55,16 @@
  * @param <E> the type of the {@code Set} elements
  * @since JavaFX 2.1
  */
 public abstract class SetExpression<E> implements ObservableSetValue<E> {
 
+    /**
+     * Creates a default {@code SetExpression}.
+     */
+    public SetExpression() {
+    }
+
     private static final ObservableSet EMPTY_SET = new EmptyObservableSet();
 
     private static class EmptyObservableSet<E> extends AbstractSet<E> implements ObservableSet<E> {
 
         private static final Iterator iterator = new Iterator() {
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/StringBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/StringBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/StringBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/StringBinding.java
@@ -63,10 +63,16 @@
     private String value;
     private boolean valid = false;
     private BindingHelperObserver observer;
     private ExpressionHelper<String> helper = null;
 
+    /**
+     * Creates a default {@code StringBinding}.
+     */
+    public StringBinding() {
+    }
+
     @Override
     public void addListener(InvalidationListener listener) {
         helper = ExpressionHelper.addListener(helper, this, listener);
     }
 
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/StringExpression.java b/modules/javafx.base/src/main/java/javafx/beans/binding/StringExpression.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/StringExpression.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/StringExpression.java
@@ -44,10 +44,16 @@
  * {@code null} equal to an empty {@code String}.
  * @since JavaFX 2.0
  */
 public abstract class StringExpression implements ObservableStringValue {
 
+    /**
+     * Creates a default {@code StringExpression}.
+     */
+    public StringExpression() {
+    }
+
     @Override
     public String getValue() {
         return get();
     }
 
