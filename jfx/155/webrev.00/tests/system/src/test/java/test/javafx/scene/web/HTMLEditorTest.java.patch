diff a/tests/system/src/test/java/test/javafx/scene/web/HTMLEditorTest.java b/tests/system/src/test/java/test/javafx/scene/web/HTMLEditorTest.java
--- a/tests/system/src/test/java/test/javafx/scene/web/HTMLEditorTest.java
+++ b/tests/system/src/test/java/test/javafx/scene/web/HTMLEditorTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,10 +23,11 @@
  * questions.
  */
 
 package test.javafx.scene.web;
 
+import com.sun.javafx.PlatformUtil;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import javafx.application.Application;
 import javafx.application.Platform;
@@ -43,10 +44,12 @@
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;
+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;
 import test.util.Util;
 
 import static javafx.concurrent.Worker.State.SUCCEEDED;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -58,10 +61,11 @@
     // Maintain one application instance
     static HTMLEditorTestApp htmlEditorTestApp;
 
     private HTMLEditor htmlEditor;
     private WebView webView;
+    private Scene scene;
 
     public static class HTMLEditorTestApp extends Application {
         Stage primaryStage = null;
 
         public HTMLEditorTestApp() {
@@ -103,11 +107,11 @@
 
     @Before
     public void setupTestObjects() {
         Platform.runLater(() -> {
             htmlEditor = new HTMLEditor();
-            Scene scene = new Scene(htmlEditor);
+            scene = new Scene(htmlEditor);
             htmlEditorTestApp.primaryStage.setScene(scene);
             htmlEditorTestApp.primaryStage.show();
 
             webView = (WebView) htmlEditor.lookup(".web-view");
             assertNotNull(webView);
@@ -352,6 +356,110 @@
         assertTrue("Timeout when waiting for focus change ", Util.await(editorStateLatch));
         assertNotNull("result must have a valid reference ", result.get());
         assertTrue("font-family must be 'WebKit Layout Test 2' ", result.get().
             contains("font-family: &quot;WebKit Layout Tests 2&quot;"));
     }
+
+    /**
+     * @test
+     * @bug 8230809
+     * Summary HTMLEditor formatting lost when selecting all (CTRL-A)
+     */
+    @Test
+    public void checkFontSizeOnSelectAll_ctrl_A() throws Exception {
+        final CountDownLatch editorStateLatch = new CountDownLatch(1);
+
+        final String editorCommand1 =
+            "document.execCommand('fontSize', false, '7');" +
+            "document.execCommand('insertText', false, 'First_word ');";
+        final String editorCommand2 =
+            "document.execCommand('fontSize', false, '1');" +
+            "document.execCommand('insertText', false, 'Second_word');";
+
+        Util.runAndWait(() -> {
+            webView.getEngine().getLoadWorker().stateProperty().
+                addListener((observable, oldValue, newValue) -> {
+                if (newValue == SUCCEEDED) {
+                    htmlEditor.requestFocus();
+                }
+            });
+
+            htmlEditor.setHtmlText(htmlEditor.getHtmlText());
+
+            webView.focusedProperty().addListener((observable, oldValue, newValue) -> {
+                if (newValue) {
+                    webView.getEngine().executeScript("document.body.focus();");
+                    webView.getEngine().executeScript(editorCommand1);
+                    webView.getEngine().executeScript(editorCommand2);
+
+                    editorStateLatch.countDown();
+                }
+            });
+        });
+
+        assertTrue("Timeout while waiting for test html text setup", Util.await(editorStateLatch));
+
+        String expectedHtmlText = htmlEditor.getHtmlText();
+
+        // Select entire text using Ctrl+A (on mac Cmd + A)
+        Util.runAndWait(() -> {
+            KeyEventFirer keyboard = new KeyEventFirer(htmlEditor, scene);
+
+            keyboard.doKeyPress(KeyCode.A,
+                                PlatformUtil.isMac()? KeyModifier.META : KeyModifier.CTRL);
+        });
+
+        String actualHtmlText = htmlEditor.getHtmlText();
+
+        assertEquals("Expected and Actual HTML text does not match. ", expectedHtmlText, actualHtmlText);
+    }
+
+
+    @Test
+    public void checkFontSizeOnSelectAll_Shift_LeftArrowKey() throws Exception {
+        final CountDownLatch editorStateLatch = new CountDownLatch(1);
+
+        final String editorCommand1 =
+            "document.execCommand('fontSize', false, '7');" +
+            "document.execCommand('insertText', false, 'Hello');";
+        final String editorCommand2 =
+            "document.execCommand('fontSize', false, '1');" +
+            "document.execCommand('insertText', false, 'World');";
+
+        Util.runAndWait(() -> {
+            webView.getEngine().getLoadWorker().stateProperty().
+                addListener((observable, oldValue, newValue) -> {
+                if (newValue == SUCCEEDED) {
+                    htmlEditor.requestFocus();
+                }
+            });
+
+            htmlEditor.setHtmlText(htmlEditor.getHtmlText());
+
+            webView.focusedProperty().addListener((observable, oldValue, newValue) -> {
+                if (newValue) {
+                    webView.getEngine().executeScript("document.body.focus();");
+                    webView.getEngine().executeScript(editorCommand1);
+                    webView.getEngine().executeScript(editorCommand2);
+
+                    editorStateLatch.countDown();
+                }
+            });
+        });
+
+        assertTrue("Timeout while waiting for test html text setup", Util.await(editorStateLatch));
+
+        String expectedHtmlText = htmlEditor.getHtmlText();
+
+        // Select entire text using SHIFT + series of Left arrows
+        Util.runAndWait(() -> {
+            KeyEventFirer keyboard = new KeyEventFirer(htmlEditor, scene);
+            for (int i = 0; i < 10; i++) {
+                keyboard.doLeftArrowPress(KeyModifier.SHIFT);
+            }
+        });
+
+        String actualHtmlText = htmlEditor.getHtmlText();
+
+        assertEquals("Expected and Actual HTML text does not match. ", expectedHtmlText, actualHtmlText);
+    }
 }
