diff a/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java b/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java
--- a/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java
+++ b/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java
@@ -61,10 +61,12 @@
 import javafx.util.Builder;
 import javafx.util.BuilderFactory;
 import javafx.util.Callback;
 
 import javax.script.Bindings;
+import javax.script.Compilable;
+import javax.script.CompiledScript;
 import javax.script.ScriptContext;
 import javax.script.ScriptEngine;
 import javax.script.ScriptEngineManager;
 import javax.script.ScriptException;
 import javax.script.SimpleBindings;
@@ -1561,11 +1563,16 @@
                     engineBindings.put(engine.FILENAME, location.getPath());
 
                     InputStreamReader scriptReader = null;
                     try {
                         scriptReader = new InputStreamReader(location.openStream(), charset);
-                        engine.eval(scriptReader);
+                        if (engine instanceof Compilable) {
+                            ((Compilable) engine).compile(scriptReader).eval();
+                        }
+                        else {
+                           engine.eval(scriptReader);
+                        }
                     } catch(ScriptException exception) {
                         exception.printStackTrace();
                     } finally {
                         if (scriptReader != null) {
                             scriptReader.close();
@@ -1585,11 +1592,17 @@
                 // Evaluate the script
                 try {
                     Bindings engineBindings = scriptEngine.getBindings(ScriptContext.ENGINE_SCOPE);
                     engineBindings.put(scriptEngine.FILENAME, location.getPath() + "-script_starting_at_line_"
                                        + (getLineNumber() - (int) ((String) value).codePoints().filter(c -> c == '\n').count()));
-                    scriptEngine.eval((String)value);
+
+                    if (scriptEngine instanceof Compilable) {
+                       ((Compilable) scriptEngine).compile((String)value).eval();
+                    }
+                    else {
+                       scriptEngine.eval((String)value);
+                    }
                 } catch (ScriptException exception) {
                     System.err.println(exception.getMessage());
                 }
             }
         }
@@ -1679,15 +1692,27 @@
     // Event handler implemented in script code
     private static class ScriptEventHandler implements EventHandler<Event> {
         public final String script;
         public final ScriptEngine scriptEngine;
         public final String filename;
+        public CompiledScript compiledScript;
+        public boolean isCompiled=false;
 
         public ScriptEventHandler(String script, ScriptEngine scriptEngine, String filename) {
             this.script = script;
             this.scriptEngine = scriptEngine;
             this.filename = filename;
+            if (scriptEngine instanceof Compilable) {
+               try {
+                  // supply the filename to the scriptEngine engine scope Bindings in case it is needed for compilation
+                  scriptEngine.getBindings(ScriptContext.ENGINE_SCOPE).put(scriptEngine.FILENAME, filename);
+                  this.compiledScript = ((Compilable) scriptEngine).compile(script);
+                  this.isCompiled = true;
+               } catch (ScriptException exception){
+                   throw new RuntimeException(exception);
+               }
+            }
         }
 
         @Override
         public void handle(Event event) {
             // Don't pollute the page namespace with values defined in the script
@@ -1697,11 +1722,16 @@
             localBindings.put(EVENT_KEY, event);
             localBindings.put(scriptEngine.ARGV, new Object[]{event});
             localBindings.put(scriptEngine.FILENAME, filename);
             // Execute the script
             try {
-                scriptEngine.eval(script, localBindings);
+                if (isCompiled) {
+                   compiledScript.eval(localBindings);
+                }
+                else {
+                   scriptEngine.eval(script, localBindings);
+                }
             } catch (ScriptException exception){
                 throw new RuntimeException(exception);
             }
         }
     }
