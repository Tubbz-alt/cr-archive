diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/tree.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/tree.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/tree.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/tree.c
@@ -57,11 +57,11 @@
  *      Forward declarations                    *
  *                                  *
  ************************************************************************/
 
 static xmlNsPtr
-xmlNewReconciliedNs(xmlDocPtr doc, xmlNodePtr tree, xmlNsPtr ns);
+xmlNewReconciledNs(xmlDocPtr doc, xmlNodePtr tree, xmlNsPtr ns);
 
 static xmlChar* xmlGetPropNodeValueInternal(const xmlAttr *prop);
 
 /************************************************************************
  *                                  *
@@ -179,11 +179,11 @@
 /**
  * xmlGetParameterEntityFromDtd:
  * @dtd:  A pointer to the DTD to search
  * @name:  The entity name
  *
- * Do an entity lookup in the DTD pararmeter entity hash table and
+ * Do an entity lookup in the DTD parameter entity hash table and
  * return the corresponding entity, if found.
  *
  * Returns A pointer to the entity structure or NULL if not found.
  */
 static xmlEntityPtr
@@ -2948,11 +2948,11 @@
  * @prop:  the new attribute
  *
  * Add a new attribute after @prev using @cur as base attribute.
  * When inserting before @cur, @prev is passed as @cur->prev.
  * When inserting after @cur, @prev is passed as @cur.
- * If an existing attribute is found it is detroyed prior to adding @prop.
+ * If an existing attribute is found it is destroyed prior to adding @prop.
  *
  * Returns the attribute being inserted or NULL in case of error.
  */
 static xmlNodePtr
 xmlAddPropSibling(xmlNodePtr prev, xmlNodePtr cur, xmlNodePtr prop) {
@@ -3662,11 +3662,13 @@
  * the children are freed too.
  */
 void
 xmlFreeNodeList(xmlNodePtr cur) {
     xmlNodePtr next;
+    xmlNodePtr parent;
     xmlDictPtr dict = NULL;
+    size_t depth = 0;
 
     if (cur == NULL) return;
     if (cur->type == XML_NAMESPACE_DECL) {
     xmlFreeNsList((xmlNsPtr) cur);
     return;
@@ -3678,20 +3680,25 @@
     (cur->type == XML_HTML_DOCUMENT_NODE)) {
     xmlFreeDoc((xmlDocPtr) cur);
     return;
     }
     if (cur->doc != NULL) dict = cur->doc->dict;
-    while (cur != NULL) {
+    while (1) {
+        while ((cur->children != NULL) &&
+               (cur->type != XML_DTD_NODE) &&
+               (cur->type != XML_ENTITY_REF_NODE)) {
+            cur = cur->children;
+            depth += 1;
+        }
+
         next = cur->next;
+        parent = cur->parent;
     if (cur->type != XML_DTD_NODE) {
 
         if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))
         xmlDeregisterNodeDefaultValue(cur);
 
-        if ((cur->children != NULL) &&
-        (cur->type != XML_ENTITY_REF_NODE))
-        xmlFreeNodeList(cur->children);
         if (((cur->type == XML_ELEMENT_NODE) ||
          (cur->type == XML_XINCLUDE_START) ||
          (cur->type == XML_XINCLUDE_END)) &&
         (cur->properties != NULL))
         xmlFreePropList(cur->properties);
@@ -3718,11 +3725,20 @@
         (cur->type != XML_TEXT_NODE) &&
         (cur->type != XML_COMMENT_NODE))
         DICT_FREE(cur->name)
         xmlFree(cur);
     }
+
+        if (next != NULL) {
     cur = next;
+        } else {
+            if ((depth == 0) || (parent == NULL))
+                break;
+            depth -= 1;
+            cur = parent;
+            cur->children = NULL;
+        }
     }
 }
 
 /**
  * xmlFreeNode:
@@ -4048,22 +4064,22 @@
           ret->ns = xmlNewNs(root, ns->href, ns->prefix);
         }
       } else {
         /*
          * we have to find something appropriate here since
-         * we cant be sure, that the namespce we found is identified
+         * we cant be sure, that the namespace we found is identified
          * by the prefix
          */
         if (xmlStrEqual(ns->href, cur->ns->href)) {
           /* this is the nice case */
           ret->ns = ns;
         } else {
           /*
-           * we are in trouble: we need a new reconcilied namespace.
+           * we are in trouble: we need a new reconciled namespace.
            * This is expensive
            */
-          ret->ns = xmlNewReconciliedNs(target->doc, target, cur->ns);
+          ret->ns = xmlNewReconciledNs(target->doc, target, cur->ns);
         }
       }
 
     } else
         ret->ns = NULL;
@@ -4152,12 +4168,12 @@
  * They are split into external and internal parts for one
  * tricky reason: namespaces. Doing a direct copy of a node
  * say RPM:Copyright without changing the namespace pointer to
  * something else can produce stale links. One way to do it is
  * to keep a reference counter but this doesn't work as soon
- * as one move the element or the subtree out of the scope of
- * the existing namespace. The actual solution seems to add
+ * as one moves the element or the subtree out of the scope of
+ * the existing namespace. The actual solution seems to be to add
  * a copy of the namespace at the top of the copied tree if
  * not available in the subtree.
  * Hence two functions, the public front-end call the inner ones
  * The argument "recursive" normally indicates a recursive copy
  * of the node with values 0 (no) and 1 (yes).  For XInclude,
@@ -4278,11 +4294,11 @@
             xmlNodePtr root = ret;
 
         while (root->parent != NULL) root = root->parent;
         ret->ns = xmlNewNs(root, ns->href, ns->prefix);
         } else {
-            ret->ns = xmlNewReconciliedNs(doc, ret, node->ns);
+            ret->ns = xmlNewReconciledNs(doc, ret, node->ns);
         }
     } else {
         /*
          * reference the existing namespace definition in our own tree.
          */
@@ -4717,11 +4733,11 @@
             }
             next = cur->parent;
 
             /*
              * Thumbler index computation
-         * TODO: the ocurence test seems bogus for namespaced names
+         * TODO: the occurrence test seems bogus for namespaced names
              */
             tmp = cur->prev;
             while (tmp != NULL) {
                 if ((tmp->type == XML_ELEMENT_NODE) &&
             (generic ||
@@ -6212,11 +6228,11 @@
     }
     return (NULL);
 }
 
 /**
- * xmlNewReconciliedNs:
+ * xmlNewReconciledNs:
  * @doc:  the document
  * @tree:  a node expected to hold the new namespace
  * @ns:  the original namespace
  *
  * This function tries to locate a namespace definition in a tree
@@ -6225,26 +6241,26 @@
  * null (default namespace) or reused within the subtree defined by
  * @tree or on one of its ancestors then a new prefix is generated.
  * Returns the (new) namespace definition or NULL in case of error
  */
 static xmlNsPtr
-xmlNewReconciliedNs(xmlDocPtr doc, xmlNodePtr tree, xmlNsPtr ns) {
+xmlNewReconciledNs(xmlDocPtr doc, xmlNodePtr tree, xmlNsPtr ns) {
     xmlNsPtr def;
     xmlChar prefix[50];
     int counter = 1;
 
     if ((tree == NULL) || (tree->type != XML_ELEMENT_NODE)) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
-        "xmlNewReconciliedNs : tree == NULL\n");
+        "xmlNewReconciledNs : tree == NULL\n");
 #endif
     return(NULL);
     }
     if ((ns == NULL) || (ns->type != XML_NAMESPACE_DECL)) {
 #ifdef DEBUG_TREE
         xmlGenericError(xmlGenericErrorContext,
-        "xmlNewReconciliedNs : ns == NULL\n");
+        "xmlNewReconciledNs : ns == NULL\n");
 #endif
     return(NULL);
     }
     /*
      * Search an existing namespace definition inherited.
@@ -6342,11 +6358,11 @@
         }
         if (i == nbCache) {
             /*
          * OK we need to recreate a new namespace definition
          */
-        n = xmlNewReconciliedNs(doc, tree, node->ns);
+        n = xmlNewReconciledNs(doc, tree, node->ns);
         if (n != NULL) { /* :-( what if else ??? */
             /*
              * check if we need to grow the cache buffers.
              */
             if (sizeCache <= nbCache) {
@@ -6371,11 +6387,11 @@
             node->ns = n;
                 }
         }
     }
     /*
-     * now check for namespace hold by attributes on the node.
+     * now check for namespace held by attributes on the node.
      */
     if (node->type == XML_ELEMENT_NODE) {
         attr = node->properties;
         while (attr != NULL) {
         if (attr->ns != NULL) {
@@ -6406,11 +6422,11 @@
             }
             if (i == nbCache) {
             /*
              * OK we need to recreate a new namespace definition
              */
-            n = xmlNewReconciliedNs(doc, tree, attr->ns);
+            n = xmlNewReconciledNs(doc, tree, attr->ns);
             if (n != NULL) { /* :-( what if else ??? */
                 /*
                  * check if we need to grow the cache buffers.
                  */
                 if (sizeCache <= nbCache) {
@@ -7959,11 +7975,11 @@
 * @prefix: the prefix
 *
 * Creates or reuses an xmlNs struct on doc->oldNs with
 * the given prefix and namespace name.
 *
-* Returns the aquired ns struct or NULL in case of an API
+* Returns the acquired ns struct or NULL in case of an API
 *         or internal error.
 */
 static xmlNsPtr
 xmlDOMWrapStoreNs(xmlDocPtr doc,
            const xmlChar *nsName,
@@ -8573,11 +8589,11 @@
     pref = BAD_CAST buf;
     }
 }
 
 /*
-* xmlDOMWrapNSNormAquireNormalizedNs:
+* xmlDOMWrapNSNormAcquireNormalizedNs:
 * @doc: the doc
 * @elem: the element-node to declare namespaces on
 * @ns: the ns-struct to use for the search
 * @retNs: the found/created ns-struct
 * @nsMap: the ns-map
@@ -8592,11 +8608,11 @@
 * change the prefix or the new ns-decl.
 *
 * Returns 0 if succeeded, -1 otherwise and on API/internal errors.
 */
 static int
-xmlDOMWrapNSNormAquireNormalizedNs(xmlDocPtr doc,
+xmlDOMWrapNSNormAcquireNormalizedNs(xmlDocPtr doc,
                    xmlNodePtr elem,
                    xmlNsPtr ns,
                    xmlNsPtr *retNs,
                    xmlNsMapPtr *nsMap,
 
@@ -8891,13 +8907,13 @@
                 goto ns_end;
             }
             }
         }
         /*
-        * Aquire a normalized ns-decl and add it to the map.
+        * Acquire a normalized ns-decl and add it to the map.
         */
-        if (xmlDOMWrapNSNormAquireNormalizedNs(doc, curElem,
+        if (xmlDOMWrapNSNormAcquireNormalizedNs(doc, curElem,
             cur->ns, &ns,
             &nsMap, depth,
             ancestorsOnly,
             (cur->type == XML_ATTRIBUTE_NODE) ? 1 : 0) == -1)
             goto internal_error;
@@ -9031,11 +9047,11 @@
     */
     if (ctxt)
     nsMap = (xmlNsMapPtr) ctxt->namespaceMap;
     /*
     * Disable search for ns-decls in the parent-axis of the
-    * desination element, if:
+    * destination element, if:
     * 1) there's no destination parent
     * 2) custom ns-reference handling is used
     */
     if ((destParent == NULL) ||
     (ctxt && ctxt->getNsForNodeFunc))
@@ -9176,13 +9192,13 @@
                 cur->ns, ns, XML_TREE_NSMAP_CUSTOM) == NULL)
             goto internal_error;
             cur->ns = ns;
         } else {
             /*
-            * Aquire a normalized ns-decl and add it to the map.
+            * Acquire a normalized ns-decl and add it to the map.
             */
-            if (xmlDOMWrapNSNormAquireNormalizedNs(destDoc,
+            if (xmlDOMWrapNSNormAcquireNormalizedNs(destDoc,
             /* ns-decls on curElem or on destDoc->oldNs */
             destParent ? curElem : NULL,
             cur->ns, &ns,
             &nsMap, depth,
             ancestorsOnly,
@@ -9232,11 +9248,11 @@
         */
         XML_TREE_ADOPT_STR_2(cur->content)
         goto leave_node;
         case XML_ENTITY_REF_NODE:
         /*
-        * Remove reference to the entitity-node.
+        * Remove reference to the entity-node.
         */
         cur->content = NULL;
         cur->children = NULL;
         cur->last = NULL;
         if ((destDoc->intSubset) || (destDoc->extSubset)) {
@@ -9466,11 +9482,11 @@
             xmlTreeErrMemory("xmlDOMWrapCloneNode(): allocating a node");
             goto internal_error;
         }
         memset(clone, 0, sizeof(xmlNode));
         /*
-        * Set hierachical links.
+        * Set hierarchical links.
         */
         if (resultClone != NULL) {
             clone->parent = parentClone;
             if (prevClone) {
             prevClone->next = clone;
@@ -9490,11 +9506,11 @@
             xmlTreeErrMemory("xmlDOMWrapCloneNode(): allocating an attr-node");
             goto internal_error;
         }
         memset(clone, 0, sizeof(xmlAttr));
         /*
-        * Set hierachical links.
+        * Set hierarchical links.
         * TODO: Change this to add to the end of attributes.
         */
         if (resultClone != NULL) {
             clone->parent = parentClone;
             if (prevClone) {
@@ -9718,13 +9734,13 @@
         cur->ns, ns, XML_TREE_NSMAP_CUSTOM) == NULL)
         goto internal_error;
         clone->ns = ns;
     } else {
         /*
-        * Aquire a normalized ns-decl and add it to the map.
+        * Acquire a normalized ns-decl and add it to the map.
         */
-        if (xmlDOMWrapNSNormAquireNormalizedNs(destDoc,
+        if (xmlDOMWrapNSNormAcquireNormalizedNs(destDoc,
         /* ns-decls on curElem or on destDoc->oldNs */
         destParent ? curElem : NULL,
         cur->ns, &ns,
         &nsMap, depth,
         /* if we need to search only in the ancestor-axis */
@@ -9957,11 +9973,11 @@
         case XML_CDATA_SECTION_NODE:
         XML_TREE_ADOPT_STR_2(cur->content)
         break;
         case XML_ENTITY_REF_NODE:
         /*
-        * Remove reference to the entitity-node.
+        * Remove reference to the entity-node.
         */
         cur->content = NULL;
         cur->children = NULL;
         cur->last = NULL;
         if ((destDoc->intSubset) || (destDoc->extSubset)) {
@@ -10095,11 +10111,11 @@
         case XML_CDATA_SECTION_NODE:
         XML_TREE_ADOPT_STR_2(node->content)
             break;
         case XML_ENTITY_REF_NODE:
         /*
-        * Remove reference to the entitity-node.
+        * Remove reference to the entity-node.
         */
         node->content = NULL;
         node->children = NULL;
         node->last = NULL;
         if ((destDoc->intSubset) || (destDoc->extSubset)) {
