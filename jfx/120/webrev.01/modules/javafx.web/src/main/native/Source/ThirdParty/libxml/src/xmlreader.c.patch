diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/xmlreader.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/xmlreader.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/xmlreader.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/xmlreader.c
@@ -236,10 +236,12 @@
     if (id->doc != NULL)
         dict = id->doc->dict;
 
     if (id->value != NULL)
     DICT_FREE(id->value)
+    if (id->name != NULL)
+    DICT_FREE(id->name)
     xmlFree(id);
 }
 
 /**
  * xmlTextReaderRemoveID:
@@ -269,10 +271,11 @@
     xmlFree(ID);
     if (id == NULL || id->attr != attr) {
     return(-1);
     }
     id->name = attr->name;
+    attr->name = NULL;
     id->attr = NULL;
     return(0);
 }
 
 /**
@@ -343,11 +346,13 @@
  * the children are freed too.
  */
 static void
 xmlTextReaderFreeNodeList(xmlTextReaderPtr reader, xmlNodePtr cur) {
     xmlNodePtr next;
+    xmlNodePtr parent;
     xmlDictPtr dict;
+    size_t depth = 0;
 
     if ((reader != NULL) && (reader->ctxt != NULL))
     dict = reader->ctxt->dict;
     else
         dict = NULL;
@@ -359,22 +364,25 @@
     if ((cur->type == XML_DOCUMENT_NODE) ||
     (cur->type == XML_HTML_DOCUMENT_NODE)) {
     xmlFreeDoc((xmlDocPtr) cur);
     return;
     }
-    while (cur != NULL) {
+    while (1) {
+        while ((cur->type != XML_DTD_NODE) &&
+               (cur->type != XML_ENTITY_REF_NODE) &&
+               (cur->children != NULL) &&
+               (cur->children->parent == cur)) {
+            cur = cur->children;
+            depth += 1;
+        }
+
         next = cur->next;
+        parent = cur->parent;
+
     /* unroll to speed up freeing the document */
     if (cur->type != XML_DTD_NODE) {
 
-        if ((cur->children != NULL) &&
-        (cur->type != XML_ENTITY_REF_NODE)) {
-        if (cur->children->parent == cur)
-            xmlTextReaderFreeNodeList(reader, cur->children);
-        cur->children = NULL;
-        }
-
         if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))
         xmlDeregisterNodeDefaultValue(cur);
 
         if (((cur->type == XML_ELEMENT_NODE) ||
          (cur->type == XML_XINCLUDE_START) ||
@@ -409,11 +417,20 @@
         reader->ctxt->freeElemsNr++;
         } else {
         xmlFree(cur);
         }
     }
+
+        if (next != NULL) {
     cur = next;
+        } else {
+            if ((depth == 0) || (parent == NULL))
+                break;
+            depth -= 1;
+            cur = parent;
+            cur->children = NULL;
+        }
     }
 }
 
 /**
  * xmlTextReaderFreeNode:
@@ -981,11 +998,10 @@
         /*
          * this element requires a full tree
          */
         node = xmlTextReaderExpand(reader);
         if (node == NULL) {
-printf("Expand failed !\n");
             ret = -1;
         } else {
         ret = xmlRelaxNGValidateFullElement(reader->rngValidCtxt,
                             reader->ctxt->myDoc,
                             node);
@@ -1093,11 +1109,11 @@
     xmlParserCtxtPtr ctxt = reader->ctxt;
 
     do {
     if (node->type == XML_ENTITY_REF_NODE) {
         /*
-         * Case where the underlying tree is not availble, lookup the entity
+         * Case where the underlying tree is not available, lookup the entity
          * and walk it.
          */
         if ((node->children == NULL) && (ctxt->sax != NULL) &&
         (ctxt->sax->getEntity != NULL)) {
         node->children = (xmlNodePtr)
@@ -1110,15 +1126,15 @@
         xmlTextReaderEntPush(reader, node);
         node = node->children->children;
         continue;
         } else {
         /*
-         * The error has probably be raised already.
+         * The error has probably been raised already.
          */
         if (node == oldnode)
             break;
-        node = node->next;
+                goto skip_children;
         }
 #ifdef LIBXML_REGEXP_ENABLED
     } else if (node->type == XML_ELEMENT_NODE) {
         reader->node = node;
         xmlTextReaderValidatePush(reader);
@@ -1136,10 +1152,11 @@
         node = node->children;
         continue;
     } else if (node->type == XML_ELEMENT_NODE) {
         xmlTextReaderValidatePop(reader);
     }
+skip_children:
     if (node->next != NULL) {
         node = node->next;
         continue;
     }
     do {
@@ -1355,11 +1372,11 @@
         return(-1);
     }
 
     /*
      * If we are not backtracking on ancestors or examined nodes,
-     * that the parser didn't finished or that we arent at the end
+     * that the parser didn't finished or that we aren't at the end
      * of stream, continue processing.
      */
     while ((reader->node != NULL) && (reader->node->next == NULL) &&
        (reader->ctxt->nodeNr == olddepth) &&
            ((oldstate == XML_TEXTREADER_BACKTRACK) ||
@@ -1546,11 +1563,11 @@
      */
     if ((reader->node != NULL) &&
     (reader->node->type == XML_ENTITY_REF_NODE) &&
     (reader->ctxt != NULL) && (reader->ctxt->replaceEntities == 1)) {
     /*
-     * Case where the underlying tree is not availble, lookup the entity
+     * Case where the underlying tree is not available, lookup the entity
      * and walk it.
      */
     if ((reader->node->children == NULL) && (reader->ctxt->sax != NULL) &&
         (reader->ctxt->sax->getEntity != NULL)) {
         reader->node->children = (xmlNodePtr)
@@ -1711,10 +1728,12 @@
     if (xmlTextReaderExpand(reader) == NULL) {
         return NULL;
     }
     doc = reader->node->doc;
     buff = xmlBufferCreate();
+    if (buff == NULL)
+        return NULL;
     for (cur_node = reader->node->children; cur_node != NULL;
          cur_node = cur_node->next) {
         /* XXX: Why is the node copied? */
         node = xmlDocCopyNode(cur_node, doc, 1);
         buff2 = xmlBufferCreate();
@@ -1753,15 +1772,15 @@
     xmlChar *resbuf;
     xmlNodePtr node;
     xmlBufferPtr buff;
     xmlDocPtr doc;
 
-    node = reader->node;
-    doc = node->doc;
     if (xmlTextReaderExpand(reader) == NULL) {
         return NULL;
     }
+    node = reader->node;
+    doc = node->doc;
     /* XXX: Why is the node copied? */
     if (node->type == XML_DTD_NODE) {
         node = (xmlNodePtr) xmlCopyDtd((xmlDtdPtr) node);
     } else {
         node = xmlDocCopyNode(node, doc, 1);
@@ -2260,21 +2279,25 @@
     xmlFreeNode(reader->faketext);
     }
     if (reader->ctxt != NULL) {
         if (reader->dict == reader->ctxt->dict)
         reader->dict = NULL;
-    if (reader->ctxt->myDoc != NULL) {
-        if (reader->preserve == 0)
-        xmlTextReaderFreeDoc(reader, reader->ctxt->myDoc);
-        reader->ctxt->myDoc = NULL;
-    }
     if ((reader->ctxt->vctxt.vstateTab != NULL) &&
         (reader->ctxt->vctxt.vstateMax > 0)){
+#ifdef LIBXML_REGEXP_ENABLED
+            while (reader->ctxt->vctxt.vstateNr > 0)
+                xmlValidatePopElement(&reader->ctxt->vctxt, NULL, NULL, NULL);
+#endif
         xmlFree(reader->ctxt->vctxt.vstateTab);
         reader->ctxt->vctxt.vstateTab = NULL;
         reader->ctxt->vctxt.vstateMax = 0;
     }
+    if (reader->ctxt->myDoc != NULL) {
+        if (reader->preserve == 0)
+        xmlTextReaderFreeDoc(reader, reader->ctxt->myDoc);
+        reader->ctxt->myDoc = NULL;
+    }
     if (reader->allocs & XML_TEXTREADER_CTXT)
         xmlFreeParserCtxt(reader->ctxt);
     }
     if (reader->sax != NULL)
     xmlFree(reader->sax);
@@ -2498,11 +2521,11 @@
  *
  * Method to get the remainder of the buffered XML. this method stops the
  * parser, set its state to End Of File and return the input stream with
  * what is left that the parser did not use.
  *
- * The implementation is not good, the parser certainly procgressed past
+ * The implementation is not good, the parser certainly progressed past
  * what's left in reader->input, and there is an allocation problem. Best
  * would be to rewrite it differently.
  *
  * Returns the xmlParserInputBufferPtr attached to the XML or NULL
  *    in case of error.
@@ -2880,12 +2903,12 @@
  * xmlTextReaderReadAttributeValue:
  * @reader:  the xmlTextReaderPtr used
  *
  * Parses an attribute value into one or more Text and EntityReference nodes.
  *
- * Returns 1 in case of success, 0 if the reader was not positionned on an
- *         ttribute node or all the attribute values have been read, or -1
+ * Returns 1 in case of success, 0 if the reader was not positioned on an
+ *         attribute node or all the attribute values have been read, or -1
  *         in case of error.
  */
 int
 xmlTextReaderReadAttributeValue(xmlTextReaderPtr reader) {
     if (reader == NULL)
@@ -3918,11 +3941,11 @@
 
 /**
  * xmlTextReaderCurrentNode:
  * @reader:  the xmlTextReaderPtr used
  *
- * Hacking interface allowing to get the xmlNodePtr correponding to the
+ * Hacking interface allowing to get the xmlNodePtr corresponding to the
  * current node being accessed by the xmlTextReader. This is dangerous
  * because the underlying node may be destroyed on the next Reads.
  *
  * Returns the xmlNodePtr or NULL in case of error.
  */
@@ -4030,11 +4053,11 @@
 
 /**
  * xmlTextReaderCurrentDoc:
  * @reader:  the xmlTextReaderPtr used
  *
- * Hacking interface allowing to get the xmlDocPtr correponding to the
+ * Hacking interface allowing to get the xmlDocPtr corresponding to the
  * current document being accessed by the xmlTextReader.
  * NOTE: as a result of this call, the reader will not destroy the
  *       associated XML document and calling xmlFreeDoc() on the result
  *       is needed once the reader parsing has finished.
  *
@@ -4133,15 +4156,15 @@
  * @reader:  the xmlTextReaderPtr used
  * @schema:  a precompiled RelaxNG schema
  *
  * Use RelaxNG to validate the document as it is processed.
  * Activation is only possible before the first Read().
- * if @schema is NULL, then RelaxNG validation is desactivated.
+ * if @schema is NULL, then RelaxNG validation is deactivated.
  @ The @schema should not be freed until the reader is deallocated
  * or its use has been deactivated.
  *
- * Returns 0 in case the RelaxNG validation could be (des)activated and
+ * Returns 0 in case the RelaxNG validation could be (de)activated and
  *         -1 in case of error.
  */
 int
 xmlTextReaderRelaxNGSetSchema(xmlTextReaderPtr reader, xmlRelaxNGPtr schema) {
     if (reader == NULL)
@@ -4197,11 +4220,11 @@
  * @file: returned file information
  * @line: returned line information
  *
  * Internal locator function for the readers
  *
- * Returns 0 in case the Schema validation could be (des)activated and
+ * Returns 0 in case the Schema validation could be (de)activated and
  *         -1 in case of error.
  */
 static int
 xmlTextReaderLocator(void *ctx, const char **file, unsigned long *line) {
     xmlTextReaderPtr reader;
@@ -4250,15 +4273,15 @@
  * @reader:  the xmlTextReaderPtr used
  * @schema:  a precompiled Schema schema
  *
  * Use XSD Schema to validate the document as it is processed.
  * Activation is only possible before the first Read().
- * if @schema is NULL, then Schema validation is desactivated.
- @ The @schema should not be freed until the reader is deallocated
+ * if @schema is NULL, then Schema validation is deactivated.
+ * The @schema should not be freed until the reader is deallocated
  * or its use has been deactivated.
  *
- * Returns 0 in case the Schema validation could be (des)activated and
+ * Returns 0 in case the Schema validation could be (de)activated and
  *         -1 in case of error.
  */
 int
 xmlTextReaderSetSchema(xmlTextReaderPtr reader, xmlSchemaPtr schema) {
     if (reader == NULL)
