diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/encoding.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/encoding.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/encoding.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/encoding.c
@@ -1793,11 +1793,11 @@
  *        the result of transformation can't fit into the encoding we want), or
  *     -3 if there the last byte can't form a single output char.
  *
  * The value of @inlen after return is the number of octets consumed
  *     as the return value is positive, else unpredictable.
- * The value of @outlen after return is the number of ocetes consumed.
+ * The value of @outlen after return is the number of octets consumed.
  */
 static int
 xmlIconvWrapper(iconv_t cd, unsigned char *out, int *outlen,
                 const unsigned char *in, int *inlen) {
     size_t icv_inlen, icv_outlen;
@@ -1861,11 +1861,11 @@
  *        the result of transformation can't fit into the encoding we want), or
  *     -3 if there the last byte can't form a single output char.
  *
  * The value of @inlen after return is the number of octets consumed
  *     as the return value is positive, else unpredictable.
- * The value of @outlen after return is the number of ocetes consumed.
+ * The value of @outlen after return is the number of octets consumed.
  */
 static int
 xmlUconvWrapper(uconv_t *cd, int toUnicode, unsigned char *out, int *outlen,
                 const unsigned char *in, int *inlen, int flush) {
     const char *ucv_in = (const char *) in;
@@ -1970,11 +1970,11 @@
     return(ret);
 }
 
 /**
  * xmlCharEncFirstLineInt:
- * @handler:    char enconding transformation data structure
+ * @handler:    char encoding transformation data structure
  * @out:  an xmlBuffer for the output.
  * @in:  an xmlBuffer for the input
  * @len:  number of bytes to convert for the first line, or -1
  *
  * Front-end for the encoding handler input function, but handle only
@@ -2057,11 +2057,11 @@
     return(ret);
 }
 
 /**
  * xmlCharEncFirstLine:
- * @handler:    char enconding transformation data structure
+ * @handler:    char encoding transformation data structure
  * @out:  an xmlBuffer for the output.
  * @in:  an xmlBuffer for the input
  *
  * Front-end for the encoding handler input function, but handle only
  * the very first line, i.e. limit itself to 45 chars.
@@ -2544,11 +2544,11 @@
 }
 #endif
 
 /**
  * xmlCharEncOutFunc:
- * @handler:    char enconding transformation data structure
+ * @handler:    char encoding transformation data structure
  * @out:  an xmlBuffer for the output.
  * @in:  an xmlBuffer for the input
  *
  * Generic front-end for the encoding handler output function
  * a first call with @in == NULL has to be made firs to initiate the
@@ -2708,11 +2708,11 @@
     return(ret);
 }
 
 /**
  * xmlCharEncCloseFunc:
- * @handler:    char enconding transformation data structure
+ * @handler:    char encoding transformation data structure
  *
  * Generic front-end for encoding handler close function
  *
  * Returns 0 if success, or -1 in case of error
  */
@@ -2809,11 +2809,11 @@
     if ((in->buf != NULL) && (in->buf->encoder != NULL)) {
         unsigned int unused = 0;
     xmlCharEncodingHandler * handler = in->buf->encoder;
         /*
      * Encoding conversion, compute the number of unused original
-     * bytes from the input not consumed and substract that from
+     * bytes from the input not consumed and subtract that from
      * the raw consumed value, this is not a cheap operation
      */
         if (in->end - in->cur > 0) {
         unsigned char convbuf[32000];
         const unsigned char *cur = (const unsigned char *)in->cur;
@@ -2858,11 +2858,11 @@
  * block of chars out.
  *
  * Returns 0 if success, -2 if the transcoding fails, or -1 otherwise
  * The value of @inlen after return is the number of octets consumed
  *     as the return value is positive, else unpredictable.
- * The value of @outlen after return is the number of ocetes consumed.
+ * The value of @outlen after return is the number of octets consumed.
  */
 static int
 UTF8ToISO8859x(unsigned char* out, int *outlen,
               const unsigned char* in, int *inlen,
               unsigned char const *xlattable) {
@@ -2974,11 +2974,11 @@
  *
  * Take a block of ISO 8859-* chars in and try to convert it to an UTF-8
  * block of chars out.
  * Returns 0 if success, or -1 otherwise
  * The value of @inlen after return is the number of octets consumed
- * The value of @outlen after return is the number of ocetes produced.
+ * The value of @outlen after return is the number of octets produced.
  */
 static int
 ISO8859xToUTF8(unsigned char* out, int *outlen,
               const unsigned char* in, int *inlen,
               unsigned short const *unicodetable) {
