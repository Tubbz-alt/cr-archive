diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/dict.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/dict.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/dict.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/dict.c
@@ -36,11 +36,12 @@
  * Note2: the fast function used for a small dict won't protect very
  *  well but since the attack is based on growing a very big hash
  *  list we will use the BigKey algo as soon as the hash size grows
  *  over MIN_DICT_SIZE so this actually works
  */
-#if defined(HAVE_RAND) && defined(HAVE_SRAND) && defined(HAVE_TIME)
+#if defined(HAVE_RAND) && defined(HAVE_SRAND) && defined(HAVE_TIME) && \
+    !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
 #define DICT_RANDOMIZATION
 #endif
 
 #include <string.h>
 #ifdef HAVE_STDINT_H
@@ -369,10 +370,13 @@
  *
  * Hash function by "One-at-a-Time Hash" see
  * http://burtleburtle.net/bob/hash/doobs.html
  */
 
+#ifdef __clang__
+ATTRIBUTE_NO_SANITIZE("unsigned-integer-overflow")
+#endif
 static uint32_t
 xmlDictComputeBigKey(const xmlChar* data, int namelen, int seed) {
     uint32_t hash;
     int i;
 
@@ -401,10 +405,13 @@
  * Hash function by "One-at-a-Time Hash" see
  * http://burtleburtle.net/bob/hash/doobs.html
  *
  * Neither of the two strings must be NULL.
  */
+#ifdef __clang__
+ATTRIBUTE_NO_SANITIZE("unsigned-integer-overflow")
+#endif
 static unsigned long
 xmlDictComputeBigQKey(const xmlChar *prefix, int plen,
                       const xmlChar *name, int len, int seed)
 {
     uint32_t hash;
@@ -725,11 +732,11 @@
         entry->next = dict->dict[key].next;
         entry->valid = 1;
         dict->dict[key].next = entry;
         } else {
             /*
-         * we don't have much ways to alert from herei
+         * we don't have much ways to alert from here
          * result is losing an entry and unicity guarantee
          */
             ret = -1;
         }
     }
@@ -1200,11 +1207,11 @@
 /**
  * xmlDictOwns:
  * @dict: the dictionary
  * @str: the string
  *
- * check if a string is owned by the disctionary
+ * check if a string is owned by the dictionary
  *
  * Returns 1 if true, 0 if false and -1 in case of error
  * -1 in case of error
  */
 int
