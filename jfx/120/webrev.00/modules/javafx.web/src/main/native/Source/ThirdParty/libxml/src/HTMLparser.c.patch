diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/HTMLparser.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/HTMLparser.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/HTMLparser.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/HTMLparser.c
@@ -315,11 +315,11 @@
 
 #define CURRENT ((int) (*ctxt->input->cur))
 
 #define SKIP_BLANKS htmlSkipBlankChars(ctxt)
 
-/* Inported from XML */
+/* Imported from XML */
 
 /* #define CUR (ctxt->token ? ctxt->token : (int) (*ctxt->input->cur)) */
 #define CUR ((int) (*ctxt->input->cur))
 #define NEXT xmlNextChar(ctxt)
 
@@ -535,11 +535,11 @@
     return(xmlCurrentChar(ctxt, len));
 
 encoding_error:
     /*
      * If we detect an UTF8 error that probably mean that the
-     * input encoding didn't get properly advertized in the
+     * input encoding didn't get properly advertised in the
      * declaration header. Report the error and switch the encoding
      * to ISO-Latin-1 (if you don't like this policy, just declare the
      * encoding !)
      */
     {
@@ -600,12 +600,12 @@
  *  The list of HTML elements and their properties      *
  *                                  *
  ************************************************************************/
 
 /*
- *  Start Tag: 1 means the start tag can be ommited
- *  End Tag:   1 means the end tag can be ommited
+ *  Start Tag: 1 means the start tag can be omitted
+ *  End Tag:   1 means the end tag can be omitted
  *             2 means it's forbidden (empty elements)
  *             3 means the tag is stylistic and should be closed easily
  *  Depr:      this element is deprecated
  *  DTD:       1 means that this element is valid only in the Loose DTD
  *             2 means that this element is valid only in the Frameset DTD
@@ -1340,11 +1340,11 @@
     for (i = (ctxt->nameNr - 1); i >= 0; i--) {
 
         if (xmlStrEqual(newtag, ctxt->nameTab[i]))
             break;
         /*
-         * A missplaced endtag can only close elements with lower
+         * A misplaced endtag can only close elements with lower
          * or equal priority, so if we find an element with higher
          * priority before we find an element with
          * matching name, we just ignore this endtag
          */
         if (htmlGetEndPriority(ctxt->nameTab[i]) > priority)
@@ -2174,10 +2174,11 @@
  *                                  *
  *      Commodity functions to handle streams           *
  *                                  *
  ************************************************************************/
 
+#ifdef LIBXML_PUSH_ENABLED
 /**
  * htmlNewInputStream:
  * @ctxt:  an HTML parser context
  *
  * Create a new input stream structure
@@ -2205,22 +2206,23 @@
     input->version = NULL;
     input->consumed = 0;
     input->length = 0;
     return(input);
 }
+#endif
 
 
 /************************************************************************
  *                                  *
  *      Commodity functions, cleanup needed ?           *
  *                                  *
  ************************************************************************/
 /*
  * all tags allowing pc data from the html 4.01 loose dtd
- * NOTE: it might be more apropriate to integrate this information
+ * NOTE: it might be more appropriate to integrate this information
  * into the html40ElementTable array but I don't want to risk any
- * binary incomptibility
+ * binary incompatibility
  */
 static const char *allowPCData[] = {
     "a", "abbr", "acronym", "address", "applet", "b", "bdo", "big",
     "blockquote", "body", "button", "caption", "center", "cite", "code",
     "dd", "del", "dfn", "div", "dt", "em", "font", "form", "h1", "h2",
@@ -2957,10 +2959,11 @@
                 }
             }
     }
     COPY_BUF(l,buf,nbchar,cur);
     if (nbchar >= HTML_PARSER_BIG_BUFFER_SIZE) {
+            buf[nbchar] = 0;
         if (ctxt->sax->cdataBlock!= NULL) {
         /*
          * Insert as CDATA, which is the same as HTML_PRESERVE_NODE
          */
         ctxt->sax->cdataBlock(ctxt->userData, buf, nbchar);
@@ -2981,10 +2984,11 @@
             NEXT;
         }
     }
 
     if ((nbchar != 0) && (ctxt->sax != NULL) && (!ctxt->disableSAX)) {
+        buf[nbchar] = 0;
     if (ctxt->sax->cdataBlock!= NULL) {
         /*
          * Insert as CDATA, which is the same as HTML_PRESERVE_NODE
          */
         ctxt->sax->cdataBlock(ctxt->userData, buf, nbchar);
@@ -3026,10 +3030,12 @@
                     "Invalid char in CDATA 0x%X\n", cur);
     } else {
         COPY_BUF(l,buf,nbchar,cur);
     }
     if (nbchar >= HTML_PARSER_BIG_BUFFER_SIZE) {
+            buf[nbchar] = 0;
+
         /*
          * Ok the segment is to be consumed as chars.
          */
         if ((ctxt->sax != NULL) && (!ctxt->disableSAX)) {
         if (areBlanks(ctxt, buf, nbchar)) {
@@ -5760,17 +5766,17 @@
             "HPP: entering CONTENT\n");
 #endif
                 break;
         }
             case XML_PARSER_CONTENT: {
+        xmlChar chr[2] = { 0, 0 };
         long cons;
+
                 /*
          * Handle preparsed entities and charRef
          */
         if (ctxt->token != 0) {
-            xmlChar chr[2] = { 0 , 0 } ;
-
             chr[0] = (xmlChar) ctxt->token;
             htmlCheckParagraph(ctxt);
             if ((ctxt->sax != NULL) && (ctxt->sax->characters != NULL))
             ctxt->sax->characters(ctxt->userData, chr, 1);
             ctxt->token = 0;
@@ -5778,25 +5784,26 @@
         }
         if ((avail == 1) && (terminate)) {
             cur = in->cur[0];
             if ((cur != '<') && (cur != '&')) {
             if (ctxt->sax != NULL) {
+                            chr[0] = cur;
                 if (IS_BLANK_CH(cur)) {
                 if (ctxt->keepBlanks) {
                     if (ctxt->sax->characters != NULL)
                     ctxt->sax->characters(
-                        ctxt->userData, &in->cur[0], 1);
+                        ctxt->userData, chr, 1);
                 } else {
                     if (ctxt->sax->ignorableWhitespace != NULL)
                     ctxt->sax->ignorableWhitespace(
-                        ctxt->userData, &in->cur[0], 1);
+                        ctxt->userData, chr, 1);
                 }
                 } else {
                 htmlCheckParagraph(ctxt);
                 if (ctxt->sax->characters != NULL)
                     ctxt->sax->characters(
-                        ctxt->userData, &in->cur[0], 1);
+                        ctxt->userData, chr, 1);
                 }
             }
             ctxt->token = 0;
             ctxt->checkIndex = 0;
             in->cur++;
