diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/uri.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/uri.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/uri.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/uri.c
@@ -20,11 +20,11 @@
 
 /**
  * MAX_URI_LENGTH:
  *
  * The definition of the URI regexp in the above RFC has no size limit
- * In practice they are usually relativey short except for the
+ * In practice they are usually relatively short except for the
  * data URI scheme as defined in RFC 2397. Even for data URI the usual
  * maximum size before hitting random practical limits is around 64 KB
  * and 4KB is usually a maximum admitted limit for proper operations.
  * The value below is more a security limit than anything else and
  * really should never be hit by 'normal' operations
@@ -323,20 +323,22 @@
  */
 static int
 xmlParse3986Port(xmlURIPtr uri, const char **str)
 {
     const char *cur = *str;
-    unsigned port = 0; /* unsigned for defined overflow behavior */
+    int port = 0;
 
     if (ISA_DIGIT(cur)) {
     while (ISA_DIGIT(cur)) {
         port = port * 10 + (*cur - '0');
+            if (port > 99999999)
+                port = 99999999;
 
         cur++;
     }
     if (uri != NULL)
-        uri->port = port & INT_MAX; /* port value modulo INT_MAX+1 */
+        uri->port = port;
     *str = cur;
     return(0);
     }
     return(1);
 }
@@ -434,11 +436,11 @@
     const char *cur = *str;
     const char *host;
 
     host = cur;
     /*
-     * IPv6 and future adressing scheme are enclosed between brackets
+     * IPv6 and future addressing scheme are enclosed between brackets
      */
     if (*cur == '[') {
         cur++;
     while ((*cur != ']') && (*cur != 0))
         cur++;
@@ -1454,11 +1456,11 @@
     while (cur[0] != '/') {
             if (cur[0] == '\0')
               goto done_cd;
         (out++)[0] = (cur++)[0];
     }
-    /* nomalize // */
+    /* normalize // */
     while ((cur[0] == '/') && (cur[1] == '/'))
         cur++;
 
         (out++)[0] = (cur++)[0];
     }
@@ -2148,11 +2150,11 @@
  *     docs/img/pic1.gif                img/pic1.gif
  *     img/pic1.gif                     ../img/pic1.gif
  *     http://site1.com/docs/pic1.gif   http://site1.com/docs/pic1.gif
  *
  *
- * Note: if the URI reference is really wierd or complicated, it may be
+ * Note: if the URI reference is really weird or complicated, it may be
  *       worthwhile to first convert it into a "nice" one by calling
  *       xmlBuildURI (using 'base') before calling this routine,
  *       since this routine (for reasonable efficiency) assumes URI has
  *       already been through some validation.
  *
@@ -2459,11 +2461,11 @@
         /* make the scheme 'file' */
     uri->scheme = (char *) xmlStrdup(BAD_CAST "file");
     /* allocate space for leading '/' + path + string terminator */
     uri->path = xmlMallocAtomic(len + 2);
     if (uri->path == NULL) {
-        xmlFreeURI(uri);    /* Guard agains 'out of memory' */
+        xmlFreeURI(uri);    /* Guard against 'out of memory' */
         return(NULL);
     }
     /* Put in leading '/' plus path */
     uri->path[0] = '/';
     p = uri->path + 1;
@@ -2474,11 +2476,11 @@
         xmlFreeURI(uri);
         return(NULL);
     }
     p = uri->path;
     }
-    /* Now change all occurences of '\' to '/' */
+    /* Now change all occurrences of '\' to '/' */
     while (*p != '\0') {
     if (*p == '\\')
         *p = '/';
     p++;
     }
@@ -2524,11 +2526,11 @@
     cal = xmlCanonicPath(path);
     if (cal == NULL)
         return(NULL);
 #if defined(_WIN32) && !defined(__CYGWIN__)
     /* xmlCanonicPath can return an URI on Windows (is that the intended behaviour?)
-       If 'cal' is a valid URI allready then we are done here, as continuing would make
+       If 'cal' is a valid URI already then we are done here, as continuing would make
        it invalid. */
     if ((uri = xmlParseURI((const char *) cal)) != NULL) {
     xmlFreeURI(uri);
     return cal;
     }
