diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/hash.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/hash.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/hash.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/hash.c
@@ -31,11 +31,12 @@
 /*
  * Following http://www.ocert.org/advisories/ocert-2011-003.html
  * it seems that having hash randomization might be a good idea
  * when using XML with untrusted data
  */
-#if defined(HAVE_RAND) && defined(HAVE_SRAND) && defined(HAVE_TIME)
+#if defined(HAVE_RAND) && defined(HAVE_SRAND) && defined(HAVE_TIME) && \
+    !defined(FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION)
 #define HASH_RANDOMIZATION
 #endif
 
 #include <libxml/parser.h>
 #include <libxml/hash.h>
@@ -76,10 +77,13 @@
 
 /*
  * xmlHashComputeKey:
  * Calculate the hash key
  */
+#ifdef __clang__
+ATTRIBUTE_NO_SANITIZE("unsigned-integer-overflow")
+#endif
 static unsigned long
 xmlHashComputeKey(xmlHashTablePtr table, const xmlChar *name,
               const xmlChar *name2, const xmlChar *name3) {
     unsigned long value = 0L;
     char ch;
@@ -106,10 +110,13 @@
     }
     }
     return (value % table->size);
 }
 
+#ifdef __clang__
+ATTRIBUTE_NO_SANITIZE("unsigned-integer-overflow")
+#endif
 static unsigned long
 xmlHashComputeQKey(xmlHashTablePtr table,
            const xmlChar *prefix, const xmlChar *name,
            const xmlChar *prefix2, const xmlChar *name2,
            const xmlChar *prefix3, const xmlChar *name3) {
