diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/timsort.h b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/timsort.h
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/timsort.h
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/timsort.h
@@ -57,11 +57,11 @@
 #endif
 
 #define SORT_SWAP(x,y) {SORT_TYPE __SORT_SWAP_t = (x); (x) = (y); (y) = __SORT_SWAP_t;}
 
 
-/* Common, type-agnosting functions and constants that we don't want to declare twice. */
+/* Common, type-agnostic functions and constants that we don't want to declare twice. */
 #ifndef SORT_COMMON_H
 #define SORT_COMMON_H
 
 #ifndef MAX
 #define MAX(x,y) (((x) > (y) ? (x) : (y)))
@@ -72,11 +72,11 @@
 #endif
 
 static int compute_minrun(const uint64_t);
 
 #ifndef CLZ
-#ifdef __GNUC__
+#if defined(__GNUC__) && ((__GNUC__ == 3 && __GNUC_MINOR__ >= 4) || (__GNUC__ > 3))
 #define CLZ __builtin_clzll
 #else
 
 static int clzll(uint64_t);
 
@@ -402,11 +402,12 @@
     memcpy(storage, &dst[curr + A], B * sizeof(SORT_TYPE));
     i = B;
     j = curr + A;
     k = curr + A + B;
 
-    while (k-- > curr) {
+    while (k > curr) {
+      k--;
       if ((i > 0) && (j > curr)) {
         if (SORT_CMP(dst[j - 1], storage[i - 1]) > 0) {
           dst[k] = dst[--j];
         } else {
           dst[k] = storage[--i];
