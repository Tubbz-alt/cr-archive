diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/pattern.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/pattern.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/pattern.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/pattern.c
@@ -1,7 +1,7 @@
 /*
- * pattern.c: Implemetation of selectors for nodes
+ * pattern.c: Implementation of selectors for nodes
  *
  * Reference:
  *   http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/
  *   to some extent
  *   http://www.w3.org/TR/1999/REC-xml-19991116
@@ -53,11 +53,11 @@
 #define XML_STREAM_STEP_IN_SET  32
 
 /*
 * NOTE: Those private flags (XML_STREAM_xxx) are used
 *   in _xmlStreamCtxt->flag. They extend the public
-*   xmlPatternFlags, so be carefull not to interfere with the
+*   xmlPatternFlags, so be careful not to interfere with the
 *   reserved values for xmlPatternFlags.
 */
 #define XML_STREAM_FINAL_IS_ANY_NODE 1<<14
 #define XML_STREAM_FROM_ROOT 1<<15
 #define XML_STREAM_DESC 1<<16
@@ -227,17 +227,20 @@
  *
  * Free up the memory allocated by @comp
  */
 void
 xmlFreePattern(xmlPatternPtr comp) {
+    xmlFreePatternList(comp);
+}
+
+static void
+xmlFreePatternInternal(xmlPatternPtr comp) {
     xmlStepOpPtr op;
     int i;
 
     if (comp == NULL)
     return;
-    if (comp->next != NULL)
-        xmlFreePattern(comp->next);
     if (comp->stream != NULL)
         xmlFreeStreamComp(comp->stream);
     if (comp->pattern != NULL)
     xmlFree((xmlChar *)comp->pattern);
     if (comp->steps != NULL) {
@@ -271,11 +274,11 @@
 
     while (comp != NULL) {
     cur = comp;
     comp = comp->next;
     cur->next = NULL;
-    xmlFreePattern(cur);
+    xmlFreePatternInternal(cur);
     }
 }
 
 /**
  * xmlNewPatParserContext:
@@ -740,11 +743,11 @@
 #if 0
 /**
  * xmlPatScanLiteral:
  * @ctxt:  the XPath Parser context
  *
- * Parse an XPath Litteral:
+ * Parse an XPath Literal:
  *
  * [29] Literal ::= '"' [^"]* '"'
  *                | "'" [^']* "'"
  *
  * Returns the Literal parsed or NULL
@@ -1971,11 +1974,11 @@
         /* loop-stopper */
         i = m;
         } else {
         /*
         * If there are "//", then we need to process every "//"
-        * occuring in the states, plus any other state for this
+        * occurring in the states, plus any other state for this
         * level.
         */
         stepNr = stream->states[2 * i];
 
         /* TODO: should not happen anymore: dead states */
