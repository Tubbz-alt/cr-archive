diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/SAX2.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/SAX2.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/SAX2.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/SAX2.c
@@ -38,11 +38,11 @@
 
 /**
  * TODO:
  *
  * macro to flag unimplemented blocks
- * XML_CATALOG_PREFER user env to select between system/public prefered
+ * XML_CATALOG_PREFER user env to select between system/public preferred
  * option. C.f. Richard Tobin <richard@cogsci.ed.ac.uk>
  *> Just FYI, I am using an environment variable XML_CATALOG_PREFER with
  *> values "system" and "public".  I have made the default be "system" to
  *> match yours.
  */
@@ -1510,12 +1510,12 @@
      * Actually insert defaulted values when needed
      */
     attr = elemDecl->attributes;
     while (attr != NULL) {
         /*
-         * Make sure that attributes redefinition occuring in the
-         * internal subset are not overriden by definitions in the
+         * Make sure that attributes redefinition occurring in the
+         * internal subset are not overridden by definitions in the
          * external subset.
          */
         if (attr->defaultValue != NULL) {
         /*
          * the element should be instantiated in the tree if:
@@ -1666,10 +1666,12 @@
     xmlGenericError(xmlGenericErrorContext, "pushing(%s)\n", name);
 #endif
     if (nodePush(ctxt, ret) < 0) {
         xmlUnlinkNode(ret);
         xmlFreeNode(ret);
+        if (prefix != NULL)
+            xmlFree(prefix);
         return;
     }
 
     /*
      * Link the child element
@@ -1732,12 +1734,12 @@
              "Namespace prefix %s is not defined\n",
              prefix, NULL);
     }
 
     /*
-     * set the namespace node, making sure that if the default namspace
-     * is unbound on a parent we simply kee it NULL
+     * set the namespace node, making sure that if the default namespace
+     * is unbound on a parent we simply keep it NULL
      */
     if ((ns != NULL) && (ns->href != NULL) &&
     ((ns->href[0] != 0) || (ns->prefix != NULL)))
     xmlSetNs(ret, ns);
 
@@ -2008,11 +2010,11 @@
     if (ctxt->dictNames)
         ret->name = localname;
     else
         ret->name = xmlStrdup(localname);
 
-        /* link at the end to preserv order, TODO speed up with a last */
+        /* link at the end to preserve order, TODO speed up with a last */
     if (ctxt->node->properties == NULL) {
         ctxt->node->properties = ret;
     } else {
         xmlAttrPtr prev = ctxt->node->properties;
 
@@ -2100,11 +2102,11 @@
                     ctxt->myDoc, ctxt->node, ret, dup);
         }
         } else {
             /*
          * dup now contains a string of the flattened attribute
-         * content with entities substitued. Check if we need to
+         * content with entities substituted. Check if we need to
          * apply an extra layer of normalization.
          * It need to be done twice ... it's an extra burden related
          * to the ability to keep references in attributes
          */
         if (ctxt->attsSpecial != NULL) {
@@ -2133,11 +2135,11 @@
         ctxt->valid &= xmlValidateOneAttribute(&ctxt->vctxt,
                     ctxt->myDoc, ctxt->node, ret, dup);
         }
     } else {
         /*
-         * if entities already have been substitued, then
+         * if entities already have been substituted, then
          * the attribute as passed is already normalized
          */
         dup = xmlStrndup(value, valueend - value);
 
         ctxt->valid &= xmlValidateOneAttribute(&ctxt->vctxt,
@@ -2396,11 +2398,11 @@
      * process all the other attributes
      */
     if (nb_attributes > 0) {
         for (j = 0,i = 0;i < nb_attributes;i++,j+=5) {
         /*
-         * Handle the rare case of an undefined atribute prefix
+         * Handle the rare case of an undefined attribute prefix
          */
         if ((attributes[j+1] != NULL) && (attributes[j+2] == NULL)) {
         if (ctxt->dictNames) {
             const xmlChar *fullname;
 
@@ -2582,11 +2584,11 @@
     if ((coalesceText) && (ctxt->nodemem != 0)) {
         /*
          * The whole point of maintaining nodelen and nodemem,
          * xmlTextConcat is too costly, i.e. compute length,
          * reallocate a new buffer, move data, append ch. Here
-         * We try to minimaze realloc() uses and avoid copying
+         * We try to minimize realloc() uses and avoid copying
          * and recomputing length over and over.
          */
         if (lastChild->content == (xmlChar *)&(lastChild->properties)) {
         lastChild->content = xmlStrdup(lastChild->content);
         lastChild->properties = NULL;
