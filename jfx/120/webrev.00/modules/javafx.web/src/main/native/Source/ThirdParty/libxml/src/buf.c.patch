diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/buf.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/buf.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/buf.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/buf.c
@@ -1,9 +1,9 @@
 /*
  * buf.c: memory buffers for libxml2
  *
- * new buffer structures and entry points to simplify the maintainance
+ * new buffer structures and entry points to simplify the maintenance
  * of libxml2 and ensure we keep good control over memory allocations
  * and stay 64 bits clean.
  * The new entry point use the xmlBufPtr opaque structure and
  * xmlBuf...() counterparts to the old xmlBuf...() functions
  *
@@ -394,11 +394,11 @@
     buf->use -= len;
     if ((buf->alloc == XML_BUFFER_ALLOC_IMMUTABLE) ||
         ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL))) {
     /*
      * we just move the content pointer, but also make sure
-     * the perceived buffer size has shrinked accordingly
+     * the perceived buffer size has shrunk accordingly
      */
         buf->content += len;
     buf->size -= len;
 
         /*
@@ -956,11 +956,11 @@
     if ((buf->alloc == XML_BUFFER_ALLOC_IO) && (buf->contentIO != NULL)) {
         size_t start_buf = buf->content - buf->contentIO;
 
     if (start_buf > (unsigned int) len) {
         /*
-         * We can add it in the space previously shrinked
+         * We can add it in the space previously shrunk
          */
         buf->content -= len;
             memmove(&buf->content[0], str, len);
         buf->use += len;
         buf->size += len;
@@ -1202,14 +1202,14 @@
  */
 xmlBufferPtr
 xmlBufBackToBuffer(xmlBufPtr buf) {
     xmlBufferPtr ret;
 
-    if ((buf == NULL) || (buf->error))
+    if (buf == NULL)
         return(NULL);
     CHECK_COMPAT(buf)
-    if (buf->buffer == NULL) {
+    if ((buf->error) || (buf->buffer == NULL)) {
         xmlBufFree(buf);
         return(NULL);
     }
 
     ret = buf->buffer;
@@ -1305,11 +1305,11 @@
     if ((input == NULL) || (buf == NULL) || (buf->error))
         return(-1);
     CHECK_COMPAT(buf)
     base = input->base - buf->content;
     /*
-     * We could do some pointer arythmetic checks but that's probably
+     * We could do some pointer arithmetic checks but that's probably
      * sufficient.
      */
     if (base > buf->size) {
         xmlBufOverflowError(buf, "Input reference outside of the buffer");
         base = 0;
