diff a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/valid.c b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/valid.c
--- a/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/valid.c
+++ b/modules/javafx.web/src/main/native/Source/ThirdParty/libxml/src/valid.c
@@ -1097,18 +1097,26 @@
  *
  * Free an element content structure. The whole subtree is removed.
  */
 void
 xmlFreeDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {
-    xmlElementContentPtr next;
     xmlDictPtr dict = NULL;
+    size_t depth = 0;
 
+    if (cur == NULL)
+        return;
     if (doc != NULL)
         dict = doc->dict;
 
-    while (cur != NULL) {
-        next = cur->c2;
+    while (1) {
+        xmlElementContentPtr parent;
+
+        while ((cur->c1 != NULL) || (cur->c2 != NULL)) {
+            cur = (cur->c1 != NULL) ? cur->c1 : cur->c2;
+            depth += 1;
+        }
+
     switch (cur->type) {
         case XML_ELEMENT_CONTENT_PCDATA:
         case XML_ELEMENT_CONTENT_ELEMENT:
         case XML_ELEMENT_CONTENT_SEQ:
         case XML_ELEMENT_CONTENT_OR:
@@ -1117,22 +1125,36 @@
         xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,
             "Internal: ELEMENT content corrupted invalid type\n",
             NULL);
         return;
     }
-    if (cur->c1 != NULL) xmlFreeDocElementContent(doc, cur->c1);
     if (dict) {
         if ((cur->name != NULL) && (!xmlDictOwns(dict, cur->name)))
             xmlFree((xmlChar *) cur->name);
         if ((cur->prefix != NULL) && (!xmlDictOwns(dict, cur->prefix)))
             xmlFree((xmlChar *) cur->prefix);
     } else {
         if (cur->name != NULL) xmlFree((xmlChar *) cur->name);
         if (cur->prefix != NULL) xmlFree((xmlChar *) cur->prefix);
     }
+        parent = cur->parent;
+        if ((depth == 0) || (parent == NULL)) {
+            xmlFree(cur);
+            break;
+        }
+        if (cur == parent->c1)
+            parent->c1 = NULL;
+        else
+            parent->c2 = NULL;
     xmlFree(cur);
-    cur = next;
+
+        if (parent->c2 != NULL) {
+        cur = parent->c2;
+        } else {
+            depth -= 1;
+            cur = parent;
+        }
     }
 }
 
 /**
  * xmlFreeElementContent:
@@ -1145,86 +1167,107 @@
 xmlFreeElementContent(xmlElementContentPtr cur) {
     xmlFreeDocElementContent(NULL, cur);
 }
 
 #ifdef LIBXML_OUTPUT_ENABLED
+/**
+ * xmlDumpElementOccur:
+ * @buf:  An XML buffer
+ * @cur:  An element table
+ *
+ * Dump the occurence operator of an element.
+ */
+static void
+xmlDumpElementOccur(xmlBufferPtr buf, xmlElementContentPtr cur) {
+    switch (cur->ocur) {
+        case XML_ELEMENT_CONTENT_ONCE:
+            break;
+        case XML_ELEMENT_CONTENT_OPT:
+            xmlBufferWriteChar(buf, "?");
+            break;
+        case XML_ELEMENT_CONTENT_MULT:
+            xmlBufferWriteChar(buf, "*");
+            break;
+        case XML_ELEMENT_CONTENT_PLUS:
+            xmlBufferWriteChar(buf, "+");
+            break;
+    }
+}
+
 /**
  * xmlDumpElementContent:
  * @buf:  An XML buffer
  * @content:  An element table
- * @glob: 1 if one must print the englobing parenthesis, 0 otherwise
  *
  * This will dump the content of the element table as an XML DTD definition
  */
 static void
-xmlDumpElementContent(xmlBufferPtr buf, xmlElementContentPtr content, int glob) {
+xmlDumpElementContent(xmlBufferPtr buf, xmlElementContentPtr content) {
+    xmlElementContentPtr cur;
+
     if (content == NULL) return;
 
-    if (glob) xmlBufferWriteChar(buf, "(");
-    switch (content->type) {
+    xmlBufferWriteChar(buf, "(");
+    cur = content;
+
+    do {
+        if (cur == NULL) return;
+
+        switch (cur->type) {
         case XML_ELEMENT_CONTENT_PCDATA:
             xmlBufferWriteChar(buf, "#PCDATA");
         break;
     case XML_ELEMENT_CONTENT_ELEMENT:
-        if (content->prefix != NULL) {
-        xmlBufferWriteCHAR(buf, content->prefix);
+                if (cur->prefix != NULL) {
+                    xmlBufferWriteCHAR(buf, cur->prefix);
         xmlBufferWriteChar(buf, ":");
         }
-        xmlBufferWriteCHAR(buf, content->name);
+                xmlBufferWriteCHAR(buf, cur->name);
         break;
     case XML_ELEMENT_CONTENT_SEQ:
-        if ((content->c1 != NULL) &&
-            ((content->c1->type == XML_ELEMENT_CONTENT_OR) ||
-             (content->c1->type == XML_ELEMENT_CONTENT_SEQ)))
-        xmlDumpElementContent(buf, content->c1, 1);
-        else
-        xmlDumpElementContent(buf, content->c1, 0);
-            xmlBufferWriteChar(buf, " , ");
-        if ((content->c2 != NULL) &&
-            ((content->c2->type == XML_ELEMENT_CONTENT_OR) ||
-             ((content->c2->type == XML_ELEMENT_CONTENT_SEQ) &&
-          (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE))))
-        xmlDumpElementContent(buf, content->c2, 1);
-        else
-        xmlDumpElementContent(buf, content->c2, 0);
-        break;
     case XML_ELEMENT_CONTENT_OR:
-        if ((content->c1 != NULL) &&
-            ((content->c1->type == XML_ELEMENT_CONTENT_OR) ||
-             (content->c1->type == XML_ELEMENT_CONTENT_SEQ)))
-        xmlDumpElementContent(buf, content->c1, 1);
-        else
-        xmlDumpElementContent(buf, content->c1, 0);
-            xmlBufferWriteChar(buf, " | ");
-        if ((content->c2 != NULL) &&
-            ((content->c2->type == XML_ELEMENT_CONTENT_SEQ) ||
-             ((content->c2->type == XML_ELEMENT_CONTENT_OR) &&
-          (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE))))
-        xmlDumpElementContent(buf, content->c2, 1);
-        else
-        xmlDumpElementContent(buf, content->c2, 0);
-        break;
+                if ((cur != content) &&
+                    (cur->parent != NULL) &&
+                    ((cur->type != cur->parent->type) ||
+                     (cur->ocur != XML_ELEMENT_CONTENT_ONCE)))
+                    xmlBufferWriteChar(buf, "(");
+                cur = cur->c1;
+                continue;
     default:
         xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,
-            "Internal: ELEMENT content corrupted invalid type\n",
+                        "Internal: ELEMENT cur corrupted invalid type\n",
             NULL);
     }
-    if (glob)
+
+        while (cur != content) {
+            xmlElementContentPtr parent = cur->parent;
+
+            if (parent == NULL) return;
+
+            if (((cur->type == XML_ELEMENT_CONTENT_OR) ||
+                 (cur->type == XML_ELEMENT_CONTENT_SEQ)) &&
+                ((cur->type != parent->type) ||
+                 (cur->ocur != XML_ELEMENT_CONTENT_ONCE)))
         xmlBufferWriteChar(buf, ")");
-    switch (content->ocur) {
-        case XML_ELEMENT_CONTENT_ONCE:
-        break;
-        case XML_ELEMENT_CONTENT_OPT:
-        xmlBufferWriteChar(buf, "?");
-        break;
-        case XML_ELEMENT_CONTENT_MULT:
-        xmlBufferWriteChar(buf, "*");
-        break;
-        case XML_ELEMENT_CONTENT_PLUS:
-        xmlBufferWriteChar(buf, "+");
+            xmlDumpElementOccur(buf, cur);
+
+            if (cur == parent->c1) {
+                if (parent->type == XML_ELEMENT_CONTENT_SEQ)
+                    xmlBufferWriteChar(buf, " , ");
+                else if (parent->type == XML_ELEMENT_CONTENT_OR)
+                    xmlBufferWriteChar(buf, " | ");
+
+                cur = parent->c2;
         break;
     }
+
+            cur = parent;
+        }
+    } while (cur != content);
+
+    xmlBufferWriteChar(buf, ")");
+    xmlDumpElementOccur(buf, content);
 }
 
 /**
  * xmlSprintfElementContent:
  * @buf:  an output buffer
@@ -1701,22 +1744,22 @@
         xmlBufferWriteCHAR(buf, elem->prefix);
         xmlBufferWriteChar(buf, ":");
         }
         xmlBufferWriteCHAR(buf, elem->name);
         xmlBufferWriteChar(buf, " ");
-        xmlDumpElementContent(buf, elem->content, 1);
+        xmlDumpElementContent(buf, elem->content);
         xmlBufferWriteChar(buf, ">\n");
         break;
     case XML_ELEMENT_TYPE_ELEMENT:
         xmlBufferWriteChar(buf, "<!ELEMENT ");
         if (elem->prefix != NULL) {
         xmlBufferWriteCHAR(buf, elem->prefix);
         xmlBufferWriteChar(buf, ":");
         }
         xmlBufferWriteCHAR(buf, elem->name);
         xmlBufferWriteChar(buf, " ");
-        xmlDumpElementContent(buf, elem->content, 1);
+        xmlDumpElementContent(buf, elem->content);
         xmlBufferWriteChar(buf, ">\n");
         break;
     default:
         xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,
             "Internal: ELEMENT struct corrupted invalid type\n",
@@ -2638,11 +2681,11 @@
      */
     ret->value = xmlStrdup(value);
     ret->doc = doc;
     if ((ctxt != NULL) && (ctxt->vstateNr != 0)) {
     /*
-     * Operating in streaming mode, attr is gonna disapear
+     * Operating in streaming mode, attr is gonna disappear
      */
     if (doc->dict != NULL)
         ret->name = xmlDictLookup(doc->dict, attr->name, -1);
     else
         ret->name = xmlStrdup(attr->name);
@@ -2966,11 +3009,11 @@
      * fill the structure.
      */
     ret->value = xmlStrdup(value);
     if ((ctxt != NULL) && (ctxt->vstateNr != 0)) {
     /*
-     * Operating in streaming mode, attr is gonna disapear
+     * Operating in streaming mode, attr is gonna disappear
      */
     ret->name = xmlStrdup(attr->name);
     ret->attr = NULL;
     } else {
     ret->name = NULL;
