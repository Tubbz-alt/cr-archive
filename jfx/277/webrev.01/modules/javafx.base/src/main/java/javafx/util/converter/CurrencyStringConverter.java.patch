diff a/modules/javafx.base/src/main/java/javafx/util/converter/CurrencyStringConverter.java b/modules/javafx.base/src/main/java/javafx/util/converter/CurrencyStringConverter.java
--- a/modules/javafx.base/src/main/java/javafx/util/converter/CurrencyStringConverter.java
+++ b/modules/javafx.base/src/main/java/javafx/util/converter/CurrencyStringConverter.java
@@ -30,44 +30,58 @@
 import java.text.NumberFormat;
 import java.util.Locale;
 import javafx.util.StringConverter;
 
 /**
- * <p>{@link StringConverter} implementation for {@link Number} values
- * that represent currency.</p>
+ * A {@link StringConverter} implementation for {@link Number} values that represent currency. Instances of this class are immutable.
  *
  * @see PercentageStringConverter
  * @see NumberStringConverter
  * @see StringConverter
  * @since JavaFX 2.1
  */
 public class CurrencyStringConverter extends NumberStringConverter {
 
-    // ------------------------------------------------------------ Constructors
+    /**
+     * Constructs a {@code CurrencyStringConverter} with the default locale and format.
+     */
     public CurrencyStringConverter() {
         this(Locale.getDefault());
     }
 
+    /**
+     * Constructs a {@code CurrencyStringConverter} with the given locale and the default format.
+     */
     public CurrencyStringConverter(Locale locale) {
         this(locale, null);
     }
 
+    /**
+     * Constructs a {@code CurrencyStringConverter} with the default locale and the given decimal format pattern.
+     *
+     * @see java.text.DecimalFormat
+     */
     public CurrencyStringConverter(String pattern) {
         this(Locale.getDefault(), pattern);
     }
 
+    /**
+     * Constructs a {@code CurrencyStringConverter} with the given locale and decimal format pattern.
+     *
+     * @see java.text.DecimalFormat
+     */
     public CurrencyStringConverter(Locale locale, String pattern) {
         super(locale, pattern, null);
     }
 
+    /**
+     * Constructs a {@code CurrencyStringConverter} with the default locale and the given number format.
+     */
     public CurrencyStringConverter(NumberFormat numberFormat) {
         super(null, null, numberFormat);
     }
 
-
-    // ---------------------------------------------------------------0- Methods
-
     /** {@inheritDoc} */
     @Override protected NumberFormat getNumberFormat() {
         Locale _locale = locale == null ? Locale.getDefault() : locale;
 
         if (numberFormat != null) {
