diff a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/PrismSettings.java b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/PrismSettings.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/PrismSettings.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/PrismSettings.java
@@ -85,12 +85,10 @@
     public static final boolean forceUploadingPainter;
     public static final boolean forceAlphaTestShader;
     public static final boolean forceNonAntialiasedShape;
 
     public static enum RasterizerType {
-        JavaPisces("Java-based Pisces Rasterizer"),
-        NativePisces("Native-based Pisces Rasterizer"),
         FloatMarlin("Float Precision Marlin Rasterizer"),
         DoubleMarlin("Double Precision Marlin Rasterizer");
 
         private String publicName;
         private RasterizerType(String publicname) {
@@ -229,21 +227,10 @@
         RasterizerType rSpec = null;
         String rOrder = systemProperties.getProperty("prism.rasterizerorder");
         if (rOrder != null) {
             for (String s : split(rOrder.toLowerCase(), ",")) {
                 switch (s) {
-                    case "pisces":
-                        rSpec = PlatformUtil.isEmbedded() || !PlatformUtil.isLinux()
-                                ? RasterizerType.NativePisces
-                                : RasterizerType.JavaPisces;
-                        break;
-                    case "nativepisces":
-                        rSpec = RasterizerType.NativePisces;
-                        break;
-                    case "javapisces":
-                        rSpec = RasterizerType.JavaPisces;
-                        break;
                     case "marlin":
                     case "doublemarlin":
                         rSpec = RasterizerType.DoubleMarlin;
                         break;
                     case "floatmarlin":
@@ -254,29 +241,15 @@
                 }
                 break;
             }
         }
         if (rSpec == null) {
-            boolean useMarlinRasterizer, useMarlinRasterizerDP;
-            useMarlinRasterizer   = getBoolean(systemProperties, "prism.marlinrasterizer", true);
+            boolean useMarlinRasterizerDP;
             useMarlinRasterizerDP = getBoolean(systemProperties, "prism.marlin.double", true);
-            if (useMarlinRasterizer) {
-                rSpec = useMarlinRasterizerDP
-                        ? RasterizerType.DoubleMarlin
-                        : RasterizerType.FloatMarlin;
-            } else {
-                boolean doNativePisces;
-                String npprop = systemProperties.getProperty("prism.nativepisces");
-                if (npprop == null) {
-                    doNativePisces = PlatformUtil.isEmbedded() || !PlatformUtil.isLinux();
-                } else {
-                    doNativePisces = Boolean.parseBoolean(npprop);
-                }
-                rSpec = doNativePisces
-                        ? RasterizerType.NativePisces
-                        : RasterizerType.JavaPisces;
-            }
+            rSpec = useMarlinRasterizerDP
+                    ? RasterizerType.DoubleMarlin
+                    : RasterizerType.FloatMarlin;
         }
         rasterizerSpec = rSpec;
 
         String primtex = systemProperties.getProperty("prism.primtextures");
         if (primtex == null) {
