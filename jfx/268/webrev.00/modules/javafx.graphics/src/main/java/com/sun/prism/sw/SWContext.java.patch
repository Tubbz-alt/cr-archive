diff a/modules/javafx.graphics/src/main/java/com/sun/prism/sw/SWContext.java b/modules/javafx.graphics/src/main/java/com/sun/prism/sw/SWContext.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/sw/SWContext.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/sw/SWContext.java
@@ -37,21 +37,19 @@
 import com.sun.marlin.MarlinAlphaConsumer;
 import com.sun.marlin.MarlinConst;
 import com.sun.marlin.MarlinRenderer;
 import com.sun.marlin.MarlinRenderingEngine;
 import com.sun.marlin.RendererContext;
-import com.sun.openpisces.Renderer;
 import com.sun.pisces.PiscesRenderer;
 import com.sun.prism.BasicStroke;
 import com.sun.prism.PixelFormat;
 import com.sun.prism.ResourceFactory;
 import com.sun.prism.Texture;
 import com.sun.prism.impl.PrismSettings;
 import com.sun.prism.impl.shape.DMarlinPrismUtils;
 import com.sun.prism.impl.shape.MarlinPrismUtils;
 import com.sun.prism.impl.shape.MaskData;
-import com.sun.prism.impl.shape.OpenPiscesPrismUtils;
 import com.sun.prism.impl.shape.ShapeUtil;
 
 import java.lang.ref.SoftReference;
 
 final class SWContext {
@@ -64,94 +62,10 @@
     interface ShapeRenderer {
         void renderShape(PiscesRenderer pr, Shape shape, BasicStroke stroke, BaseTransform tr, Rectangle clip, boolean antialiasedShape);
         void dispose();
     }
 
-    class NativeShapeRenderer implements ShapeRenderer {
-        private SoftReference<SWMaskTexture> maskTextureRef;
-
-        public void renderShape(PiscesRenderer pr, Shape shape, BasicStroke stroke, BaseTransform tr, Rectangle clip, boolean antialiasedShape) {
-            try {
-                final MaskData mask = ShapeUtil.rasterizeShape(shape, stroke, clip.toRectBounds(), tr, true, antialiasedShape);
-                final SWMaskTexture tex = this.validateMaskTexture(mask.getWidth(), mask.getHeight());
-                mask.uploadToTexture(tex, 0, 0, false);
-                pr.fillAlphaMask(tex.getDataNoClone(), mask.getOriginX(), mask.getOriginY(),
-                                 mask.getWidth(), mask.getHeight(), 0, tex.getPhysicalWidth());
-            } catch (Throwable ex) {
-                if (PrismSettings.verbose) {
-                    ex.printStackTrace();
-                }
-                Logging.getJavaFXLogger().warning("Cannot rasterize Shape: "
-                        + ex.toString());
-            }
-        }
-
-        private SWMaskTexture initMaskTexture(int width, int height) {
-            final SWMaskTexture tex = (SWMaskTexture)factory.createMaskTexture(width, height, Texture.WrapMode.CLAMP_NOT_NEEDED);
-            maskTextureRef = new SoftReference<SWMaskTexture>(tex);
-            return tex;
-        }
-
-        private void disposeMaskTexture() {
-            if (maskTextureRef != null){
-                maskTextureRef.clear();
-                maskTextureRef = null;
-            }
-        }
-
-        private SWMaskTexture validateMaskTexture(int width, int height) {
-            SWMaskTexture tex;
-            if (maskTextureRef == null) {
-                tex = this.initMaskTexture(width, height);
-            } else {
-                tex = maskTextureRef.get();
-                if (tex == null ||
-                    tex.getPhysicalWidth() < width ||
-                    tex.getPhysicalHeight() < height)
-                {
-                    this.disposeMaskTexture();
-                    tex = this.initMaskTexture(width, height);
-                }
-            }
-            return tex;
-        }
-
-        public void dispose() {
-            this.disposeMaskTexture();
-        }
-    }
-
-    static final class JavaShapeRenderer implements ShapeRenderer {
-        private final DirectRTPiscesAlphaConsumer alphaConsumer = new DirectRTPiscesAlphaConsumer();
-
-        public void renderShape(PiscesRenderer pr, Shape shape, BasicStroke stroke, BaseTransform tr, Rectangle clip, boolean antialiasedShape) {
-            if (stroke != null && stroke.getType() != BasicStroke.TYPE_CENTERED) {
-                // RT-27427
-                // TODO: Optimize the combinatorial strokes for simple
-                // shapes and/or teach the rasterizer to be able to
-                // do a "differential fill" between two shapes.
-                // Note that most simple shapes will use a more optimized path
-                // than this method for the INNER/OUTER strokes anyway.
-                shape = stroke.createStrokedShape(shape);
-                stroke = null;
-            }
-            try {
-                final Renderer r = OpenPiscesPrismUtils.setupRenderer(shape, stroke, tr, clip, antialiasedShape);
-                alphaConsumer.initConsumer(r, pr);
-                r.produceAlphas(alphaConsumer);
-            } catch (Throwable ex) {
-                if (PrismSettings.verbose) {
-                    ex.printStackTrace();
-                }
-                Logging.getJavaFXLogger().warning("Cannot rasterize Shape: "
-                        + ex.toString());
-            }
-        }
-
-        public void dispose() { }
-    }
-
     static final class MarlinShapeRenderer implements ShapeRenderer {
         private final DirectRTMarlinAlphaConsumer alphaConsumer = new DirectRTMarlinAlphaConsumer();
 
         @Override
         public void renderShape(PiscesRenderer pr, Shape shape, BasicStroke stroke, BaseTransform tr, Rectangle clip, boolean antialiasedShape) {
@@ -339,16 +253,10 @@
     }
 
     SWContext(ResourceFactory factory) {
         this.factory = factory;
         switch (PrismSettings.rasterizerSpec) {
-            case JavaPisces:
-                this.shapeRenderer = new JavaShapeRenderer();
-                break;
-            case NativePisces:
-                this.shapeRenderer = new NativeShapeRenderer();
-                break;
             case FloatMarlin:
                 this.shapeRenderer = new MarlinShapeRenderer();
                 break;
             default:
             case DoubleMarlin:
