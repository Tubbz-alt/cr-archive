diff a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/ClipEnvelope.java b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/ClipEnvelope.java
--- a/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/ClipEnvelope.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/scenario/animation/shared/ClipEnvelope.java
@@ -41,32 +41,42 @@
  * Both classes have an abstract public definition and can only be created using
  * the factory method create(). The intent is to provide a general
  * implementation plus eventually some fast-track implementations for common use
  * cases.
  */
-
 public abstract class ClipEnvelope {
 
     protected static final long INDEFINITE = Long.MAX_VALUE;
     protected static final double EPSILON = 1e-12;
 
     protected Animation animation;
+
+    /**
+     * The rate of the animation that is used to calculate the current rate of an animation.
+     * It is the same as animation.rate, only ignores animation.rate = 0, so can never be 0.
+     */
     protected double rate = 1;
+
+    /**
+     * The number of ticks in a single cycle. Calculated from the cycle duration. Always >=0.
+     */
     protected long cycleTicks = 0;
 
-    // internal state-variables used by all implementations
     protected long deltaTicks = 0;
+
+    /**
+     * The current position of the play head. 0 <= ticks <= totalTicks
+     */
     protected long ticks = 0;
     protected double currentRate = rate;
     protected boolean inTimePulse = false;
     protected boolean aborted = false;
 
     protected ClipEnvelope(Animation animation) {
         this.animation = animation;
         if (animation != null) {
-            final Duration cycleDuration = animation.getCycleDuration();
-            cycleTicks = TickCalculation.fromDuration(cycleDuration);
+            cycleTicks = TickCalculation.fromDuration(animation.getCycleDuration());
             rate = animation.getRate();
         }
     }
 
     public static ClipEnvelope create(Animation animation) {
@@ -77,14 +87,33 @@
         } else {
             return new FiniteClipEnvelope(animation);
         }
     }
 
-    public abstract ClipEnvelope setCycleDuration(Duration cycleDuration);
-    public abstract void setRate(double rate);
     public abstract void setAutoReverse(boolean autoReverse);
+    public abstract ClipEnvelope setCycleDuration(Duration cycleDuration);
     public abstract ClipEnvelope setCycleCount(int cycleCount);
+    public abstract void setRate(double rate);
+
+    protected abstract double calculateCurrentRate();
+
+    protected void setInternalCurrentRate(double currentRate) {
+        this.currentRate = currentRate;
+    }
+
+    protected void setCurrentRate(double currentRate) {
+        this.currentRate = currentRate;
+        AnimationAccessor.getDefault().setCurrentRate(animation, currentRate);
+    }
+
+    public double getCurrentRate() {
+        return currentRate;
+    }
+
+    protected long ticksRateChange(double newRate) {
+        return Math.round((ticks - deltaTicks) * newRate / rate);
+     }
 
     protected void updateCycleTicks(Duration cycleDuration) {
         cycleTicks = TickCalculation.fromDuration(cycleDuration);
     }
 
@@ -99,31 +128,12 @@
 
     public abstract void timePulse(long currentTick);
 
     public abstract void jumpTo(long ticks);
 
-    public void abortCurrentPulse() {
+    public final void abortCurrentPulse() {
         if (inTimePulse) {
             aborted = true;
             inTimePulse = false;
         }
     }
-
-    protected abstract double calculateCurrentRate();
-
-    protected void setInternalCurrentRate(double currentRate) {
-        this.currentRate = currentRate;
-    }
-
-    protected void setCurrentRate(double currentRate) {
-        this.currentRate = currentRate;
-        AnimationAccessor.getDefault().setCurrentRate(animation, currentRate);
-    }
-
-    protected static long checkBounds(long value, long max) {
-        return Math.max(0L, Math.min(value, max));
-    }
-
-    public double getCurrentRate() {
-        return currentRate;
-    }
 }
