diff a/modules/javafx.graphics/src/main/java/javafx/animation/Animation.java b/modules/javafx.graphics/src/main/java/javafx/animation/Animation.java
--- a/modules/javafx.graphics/src/main/java/javafx/animation/Animation.java
+++ b/modules/javafx.graphics/src/main/java/javafx/animation/Animation.java
@@ -23,39 +23,37 @@
  * questions.
  */
 
 package javafx.animation;
 
-import java.util.HashMap;
+import java.util.Objects;
 
 import com.sun.javafx.tk.Toolkit;
 import com.sun.javafx.util.Utils;
 
 import javafx.beans.property.BooleanProperty;
+import javafx.beans.property.BooleanPropertyBase;
 import javafx.beans.property.DoubleProperty;
 import javafx.beans.property.DoublePropertyBase;
 import javafx.beans.property.IntegerProperty;
 import javafx.beans.property.IntegerPropertyBase;
 import javafx.beans.property.ObjectProperty;
 import javafx.beans.property.ObjectPropertyBase;
 import javafx.beans.property.ReadOnlyDoubleProperty;
 import javafx.beans.property.ReadOnlyDoublePropertyBase;
 import javafx.beans.property.ReadOnlyObjectProperty;
 import javafx.beans.property.ReadOnlyObjectPropertyBase;
-import javafx.beans.property.SimpleBooleanProperty;
-import javafx.beans.property.SimpleObjectProperty;
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableMap;
 import javafx.event.ActionEvent;
 import javafx.event.EventHandler;
 import javafx.util.Duration;
 import com.sun.javafx.animation.TickCalculation;
 import com.sun.scenario.animation.AbstractMasterTimer;
 import com.sun.scenario.animation.shared.ClipEnvelope;
 import com.sun.scenario.animation.shared.PulseReceiver;
 
-import static com.sun.javafx.animation.TickCalculation.*;
 import java.security.AccessControlContext;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 
 /**
@@ -96,12 +94,12 @@
     static {
         AnimationAccessorImpl.DEFAULT = new AnimationAccessorImpl();
     }
 
     /**
-     * Used to specify an animation that repeats indefinitely, until the
-     * {@code stop()} method is called.
+     * Used as a  value for {@link #cycleCountProperty() cycleCount} to specify an animation that repeats indefinitely,
+     * until the {@code stop()} method is called.
      */
     public static final int INDEFINITE = -1;
 
     /**
      * The possible states for {@link Animation#statusProperty() status}.
@@ -122,10 +120,28 @@
         STOPPED
     }
 
     private static final double EPSILON = 1e-12;
 
+    /**
+     * Checks if the rate is effectively 0.
+     * @param rate
+     * @return true i.f.f. abs(rate) < EPSILON
+     */
+    static final boolean isNearZero(double rate) {
+        return Math.abs(rate) < EPSILON;
+    }
+
+    /**
+     * Checks if 2 rates are effectively equal.
+     * @param rateMagnitude
+     * @return true i.f.f. Math.abs(rate1 - rate2) < EPSILON
+     */
+    private static boolean areNearEqual(double rate1, double rate2) {
+        return isNearZero(rate2 - rate1);
+    }
+
     /*
         These four fields and associated methods were moved here from AnimationPulseReceiver
         when that class was removed. They could probably be integrated much cleaner into Animation,
         but to make sure the change was made without introducing regressions, this code was
         moved pretty much verbatim.
@@ -133,11 +149,11 @@
     private long startTime;
     private long pauseTime;
     private boolean paused = false;
     private final AbstractMasterTimer timer;
 
-    // Access control context, captured whenever we add this pulse reciever to
+    // Access control context, captured whenever we add this pulse receiver to
     // the master timer (which is called when an animation is played or resumed)
     private AccessControlContext accessCtrlCtx = null;
 
     private long now() {
         return TickCalculation.fromNano(timer.nanos());
@@ -253,11 +269,16 @@
      *
      * @defaultValue null
      */
     Animation parent = null;
 
-    /* Package-private for testing purposes */
+    /**
+     * The type of ClipEnvelope for the animation is determined by its cycleCount and cycleDuration
+     * and is updated when these values change.
+     * <p>
+     * Package-private for testing purposes
+    */
     ClipEnvelope clipEnvelope;
 
     private boolean lastPlayedFinished = true;
 
     private boolean lastPlayedForward = true;
@@ -283,11 +304,11 @@
      */
     private DoubleProperty rate;
     private static final double DEFAULT_RATE = 1.0;
 
     public final void setRate(double value) {
-        if ((rate != null) || (Math.abs(value - DEFAULT_RATE) > EPSILON)) {
+        if (rate != null || !areNearEqual(value, DEFAULT_RATE)) {
             rateProperty().set(value);
         }
     }
 
     public final double getRate() {
@@ -305,33 +326,31 @@
                         if (isBound()) {
                             unbind();
                         }
                         set(oldRate);
                         throw new IllegalArgumentException("Cannot set rate of embedded animation while running.");
+                    }
+                    if (isNearZero(newRate)) {
+                        if (isRunning()) {
+                            lastPlayedForward = areNearEqual(getCurrentRate(), oldRate);
+                        }
+                        doSetCurrentRate(0.0);
+                        pauseReceiver();
                     } else {
-                        if (Math.abs(newRate) < EPSILON) {
-                            if (getStatus() == Status.RUNNING) {
-                                lastPlayedForward = (Math.abs(getCurrentRate()
-                                        - oldRate) < EPSILON);
-                            }
-                            doSetCurrentRate(0.0);
-                            pauseReceiver();
-                        } else {
-                            if (getStatus() == Status.RUNNING) {
-                                final double currentRate = getCurrentRate();
-                                if (Math.abs(currentRate) < EPSILON) {
-                                    doSetCurrentRate(lastPlayedForward ? newRate : -newRate);
-                                    resumeReceiver();
-                                } else {
-                                    final boolean playingForward = Math.abs(currentRate - oldRate) < EPSILON;
-                                    doSetCurrentRate(playingForward ? newRate : -newRate);
-                                }
+                        if (isRunning()) {
+                            final double currentRate = getCurrentRate();
+                            if (isNearZero(currentRate)) {
+                                doSetCurrentRate(lastPlayedForward ? newRate : -newRate);
+                                resumeReceiver();
+                            } else {
+                                final boolean playingForward = areNearEqual(currentRate, oldRate);
+                                doSetCurrentRate(playingForward ? newRate : -newRate);
                             }
-                            oldRate = newRate;
                         }
-                        clipEnvelope.setRate(newRate);
+                        oldRate = newRate;
                     }
+                    clipEnvelope.setRate(newRate);
                 }
 
                 @Override
                 public Object getBean() {
                     return Animation.this;
@@ -348,11 +367,11 @@
 
     private boolean isRunningEmbedded() {
         if (parent == null) {
             return false;
         }
-        return parent.getStatus() != Status.STOPPED || parent.isRunningEmbedded();
+        return !parent.isStopped() || parent.isRunningEmbedded();
     }
 
     private double oldRate = 1.0;
     /**
      * Read-only variable to indicate current direction/speed at which the
@@ -366,27 +385,45 @@
      * @defaultValue 0.0
      */
     private ReadOnlyDoubleProperty currentRate;
     private static final double DEFAULT_CURRENT_RATE = 0.0;
 
+    /**
+     * The current rate changes in 3 cases:
+     * <ol>
+     * <li> When the rate is changed.
+     * <li> When the status is changed (paused/stopped/resumed/started).
+     * <li> When switching between a forwards and backwards cycle.
+     * </ol>
+     *
+     * 1 happens when the user changes the rate of the animation or its root parent.
+     * 2 happens when the user changes the status or when the animation is finished.
+     * 3 happens when the clip envelope flips the rate when the cycle is alternated, through the accessor
+     */
     private void doSetCurrentRate(double value) {
-        if ((currentRate != null) || (Math.abs(value - DEFAULT_CURRENT_RATE) > EPSILON)) {
-            ((CurrentRateProperty)currentRateProperty()).set(value);
+        if (currentRate != null || !areNearEqual(value, DEFAULT_CURRENT_RATE)) {
+            ((CurrentRateProperty) currentRateProperty()).set(value);
         }
     }
 
     public final double getCurrentRate() {
-        return (currentRate == null)? DEFAULT_CURRENT_RATE : currentRate.get();
+        return (currentRate == null) ? DEFAULT_CURRENT_RATE : currentRate.get();
     }
 
     public final ReadOnlyDoubleProperty currentRateProperty() {
         if (currentRate == null) {
             currentRate = new CurrentRateProperty();
         }
         return currentRate;
     }
 
+    void setCurrentRate(double currentRate) {
+//      if (getStatus() == Status.RUNNING) {
+          doSetCurrentRate(currentRate);
+//      }
+  }
+
     /**
      * Read-only variable to indicate the duration of one cycle of this
      * {@code Animation}: the time it takes to play from time 0 to the
      * end of the Animation (at the default {@code rate} of
      * 1.0).
@@ -395,26 +432,26 @@
      */
     private ReadOnlyObjectProperty<Duration> cycleDuration;
     private static final Duration DEFAULT_CYCLE_DURATION = Duration.ZERO;
 
     protected final void setCycleDuration(Duration value) {
-        if ((cycleDuration != null) || (!DEFAULT_CYCLE_DURATION.equals(value))) {
+        if (cycleDuration != null || !DEFAULT_CYCLE_DURATION.equals(value)) {
             if (value.lessThan(Duration.ZERO)) {
                 throw new IllegalArgumentException("Cycle duration cannot be negative");
             }
-            ((AnimationReadOnlyProperty<Duration>)cycleDurationProperty()).set(value);
+            ((AnimationReadOnlyProperty<Duration>) cycleDurationProperty()).set(value);
             updateTotalDuration();
         }
     }
 
     public final Duration getCycleDuration() {
-        return (cycleDuration == null)? DEFAULT_CYCLE_DURATION : cycleDuration.get();
+        return (cycleDuration == null) ? DEFAULT_CYCLE_DURATION : cycleDuration.get();
     }
 
     public final ReadOnlyObjectProperty<Duration> cycleDurationProperty() {
         if (cycleDuration == null) {
-            cycleDuration = new AnimationReadOnlyProperty<Duration>("cycleDuration", DEFAULT_CYCLE_DURATION);
+            cycleDuration = new AnimationReadOnlyProperty<>("cycleDuration", DEFAULT_CYCLE_DURATION);
         }
         return cycleDuration;
     }
 
     /**
@@ -430,36 +467,37 @@
      */
     private ReadOnlyObjectProperty<Duration> totalDuration;
     private static final Duration DEFAULT_TOTAL_DURATION = Duration.ZERO;
 
     public final Duration getTotalDuration() {
-        return (totalDuration == null)? DEFAULT_TOTAL_DURATION : totalDuration.get();
+        return (totalDuration == null) ? DEFAULT_TOTAL_DURATION : totalDuration.get();
     }
 
     public final ReadOnlyObjectProperty<Duration> totalDurationProperty() {
         if (totalDuration == null) {
-            totalDuration = new AnimationReadOnlyProperty<Duration>("totalDuration", DEFAULT_TOTAL_DURATION);
+            totalDuration = new AnimationReadOnlyProperty<>("totalDuration", DEFAULT_TOTAL_DURATION);
         }
         return totalDuration;
     }
 
     private void updateTotalDuration() {
         // Implementing the bind eagerly, because cycleCount and
         // cycleDuration should not change that often
         final int cycleCount = getCycleCount();
         final Duration cycleDuration = getCycleDuration();
-        final Duration newTotalDuration = Duration.ZERO.equals(cycleDuration) ? Duration.ZERO
-                : (cycleCount == Animation.INDEFINITE) ? Duration.INDEFINITE
-                        : (cycleCount <= 1) ? cycleDuration : cycleDuration
-                                .multiply(cycleCount);
-        if ((totalDuration != null) || (!DEFAULT_TOTAL_DURATION.equals(newTotalDuration))) {
-            ((AnimationReadOnlyProperty<Duration>)totalDurationProperty()).set(newTotalDuration);
+        final Duration newTotalDuration;
+        if (Duration.ZERO.equals(cycleDuration)) newTotalDuration = Duration.ZERO;
+        else if (cycleCount == INDEFINITE) newTotalDuration = Duration.INDEFINITE;
+        else if (cycleCount <= 1) newTotalDuration = cycleDuration;
+        else newTotalDuration = cycleDuration.multiply(cycleCount);
+        if (totalDuration != null || !DEFAULT_TOTAL_DURATION.equals(newTotalDuration)) {
+            ((AnimationReadOnlyProperty<Duration>) totalDurationProperty()).set(newTotalDuration);
         }
-        if (getStatus() == Status.STOPPED) {
+        if (isStopped()) {
             syncClipEnvelope();
             if (newTotalDuration.lessThan(getCurrentTime())) {
-                clipEnvelope.jumpTo(fromDuration(newTotalDuration));
+                clipEnvelope.jumpTo(TickCalculation.fromDuration(newTotalDuration));
             }
         }
     }
 
     /**
@@ -513,45 +551,44 @@
      */
     private ObjectProperty<Duration> delay;
     private static final Duration DEFAULT_DELAY = Duration.ZERO;
 
     public final void setDelay(Duration value) {
-        if ((delay != null) || (!DEFAULT_DELAY.equals(value))) {
+        if (delay != null || !DEFAULT_DELAY.equals(value)) {
             delayProperty().set(value);
         }
     }
 
     public final Duration getDelay() {
-        return (delay == null)? DEFAULT_DELAY : delay.get();
+        return (delay == null) ? DEFAULT_DELAY : delay.get();
     }
 
     public final ObjectProperty<Duration> delayProperty() {
         if (delay == null) {
-            delay = new ObjectPropertyBase<Duration>(DEFAULT_DELAY) {
+            delay = new ObjectPropertyBase<>(DEFAULT_DELAY) {
+
+                @Override
+                protected void invalidated() {
+                    final Duration newDuration = get();
+                    if (newDuration.lessThan(Duration.ZERO)) {
+                        if (isBound()) {
+                            unbind();
+                        }
+                        set(Duration.ZERO);
+                        throw new IllegalArgumentException("Cannot set delay to negative value. Setting to Duration.ZERO");
+                    }
+                }
 
                 @Override
                 public Object getBean() {
                     return Animation.this;
                 }
 
                 @Override
                 public String getName() {
                     return "delay";
                 }
-
-                @Override
-                protected void invalidated() {
-                        final Duration newDuration = get();
-                        if (newDuration.lessThan(Duration.ZERO)) {
-                            if (isBound()) {
-                                unbind();
-                            }
-                            set(Duration.ZERO);
-                            throw new IllegalArgumentException("Cannot set delay to negative value. Setting to Duration.ZERO");
-                        }
-                }
-
             };
         }
         return delay;
     }
 
@@ -569,17 +606,17 @@
      */
     private IntegerProperty cycleCount;
     private static final int DEFAULT_CYCLE_COUNT = 1;
 
     public final void setCycleCount(int value) {
-        if ((cycleCount != null) || (value != DEFAULT_CYCLE_COUNT)) {
+        if (cycleCount != null || value != DEFAULT_CYCLE_COUNT) {
             cycleCountProperty().set(value);
         }
     }
 
     public final int getCycleCount() {
-        return (cycleCount == null)? DEFAULT_CYCLE_COUNT : cycleCount.get();
+        return (cycleCount == null) ? DEFAULT_CYCLE_COUNT : cycleCount.get();
     }
 
     public final IntegerProperty cycleCountProperty() {
         if (cycleCount == null) {
             cycleCount = new IntegerPropertyBase(DEFAULT_CYCLE_COUNT) {
@@ -620,22 +657,33 @@
      */
     private BooleanProperty autoReverse;
     private static final boolean DEFAULT_AUTO_REVERSE = false;
 
     public final void setAutoReverse(boolean value) {
-        if ((autoReverse != null) || (value != DEFAULT_AUTO_REVERSE)) {
+        if (autoReverse != null || value != DEFAULT_AUTO_REVERSE) {
             autoReverseProperty().set(value);
         }
     }
 
     public final boolean isAutoReverse() {
-        return (autoReverse == null)? DEFAULT_AUTO_REVERSE : autoReverse.get();
+        return (autoReverse == null) ? DEFAULT_AUTO_REVERSE : autoReverse.get();
     }
 
     public final BooleanProperty autoReverseProperty() {
         if (autoReverse == null) {
-            autoReverse = new SimpleBooleanProperty(this, "autoReverse", DEFAULT_AUTO_REVERSE);
+            autoReverse = new BooleanPropertyBase(DEFAULT_AUTO_REVERSE) {
+
+                @Override
+                public Object getBean() {
+                    return Animation.this;
+                }
+
+                @Override
+                public String getName() {
+                    return "autoReverse";
+                }
+            };
         }
         return autoReverse;
     }
 
     /**
@@ -646,41 +694,36 @@
      */
     private ReadOnlyObjectProperty<Status> status;
     private static final Status DEFAULT_STATUS = Status.STOPPED;
 
     protected final void setStatus(Status value) {
-        if ((status != null) || (!DEFAULT_STATUS.equals(value))) {
-            ((AnimationReadOnlyProperty<Status>)statusProperty()).set(value);
+        if (status != null || !DEFAULT_STATUS.equals(value)) {
+            ((AnimationReadOnlyProperty<Status>) statusProperty()).set(value);
         }
     }
 
     public final Status getStatus() {
-        return (status == null)? DEFAULT_STATUS : status.get();
+        return (status == null) ? DEFAULT_STATUS : status.get();
     }
 
     public final ReadOnlyObjectProperty<Status> statusProperty() {
         if (status == null) {
-            status = new AnimationReadOnlyProperty<Status>("status", Status.STOPPED);
+            status = new AnimationReadOnlyProperty<>("status", Status.STOPPED);
         }
         return status;
     }
 
-    private final double targetFramerate;
-    private final int resolution;
-    private long lastPulse;
+    boolean isStopped() {
+        return getStatus() == Status.STOPPED;
+    }
 
-    /**
-     * The target framerate is the maximum framerate at which this {@code Animation}
-     * will run, in frames per second. This can be used, for example, to keep
-     * particularly complex {@code Animations} from over-consuming system resources.
-     * By default, an {@code Animation}'s framerate is not explicitly limited, meaning
-     * the {@code Animation} will run at an optimal framerate for the underlying platform.
-     *
-     * @return the target framerate
-     */
-    public final double getTargetFramerate() {
-        return targetFramerate;
+    boolean isPaused() {
+        return getStatus() == Status.PAUSED;
+    }
+
+    boolean isRunning() {
+        return getStatus() == Status.RUNNING;
     }
 
     /**
      * The action to be executed at the conclusion of this {@code Animation}.
      *
@@ -688,28 +731,38 @@
      */
     private ObjectProperty<EventHandler<ActionEvent>> onFinished;
     private static final EventHandler<ActionEvent> DEFAULT_ON_FINISHED = null;
 
     public final void setOnFinished(EventHandler<ActionEvent> value) {
-        if ((onFinished != null) || (value != null /* DEFAULT_ON_FINISHED */)) {
+        if (onFinished != null || value != DEFAULT_ON_FINISHED) {
             onFinishedProperty().set(value);
         }
     }
 
     public final EventHandler<ActionEvent> getOnFinished() {
-        return (onFinished == null)? DEFAULT_ON_FINISHED : onFinished.get();
+        return (onFinished == null) ? DEFAULT_ON_FINISHED : onFinished.get();
     }
 
     public final ObjectProperty<EventHandler<ActionEvent>> onFinishedProperty() {
         if (onFinished == null) {
-            onFinished = new SimpleObjectProperty<EventHandler<ActionEvent>>(this, "onFinished", DEFAULT_ON_FINISHED);
+            onFinished = new ObjectPropertyBase<>(DEFAULT_ON_FINISHED) {
+
+                @Override
+                public Object getBean() {
+                    return Animation.this;
+                }
+
+                @Override
+                public String getName() {
+                    return "onFinished";
+                }
+            };
         }
         return onFinished;
     }
 
-    private final ObservableMap<String, Duration> cuePoints = FXCollections
-            .observableMap(new HashMap<String, Duration>(0));
+    private ObservableMap<String, Duration> cuePoints;
 
     /**
      * The cue points can be
      * used to mark important positions of the {@code Animation}. Once a cue
      * point was defined, it can be used as an argument of
@@ -725,10 +778,13 @@
      * {@link KeyFrame#getName() name} property of a {@link KeyFrame}.
      *
      * @return {@link javafx.collections.ObservableMap} of cue points
      */
     public final ObservableMap<String, Duration> getCuePoints() {
+        if (cuePoints == null) {
+            cuePoints = FXCollections.observableHashMap();
+        }
         return cuePoints;
     }
 
     /**
      * Jumps to a given position in this {@code Animation}.
@@ -746,13 +802,11 @@
      * @throws IllegalStateException
      *             if embedded in another animation,
      *                such as {@link SequentialTransition} or {@link ParallelTransition}
      */
     public void jumpTo(Duration time) {
-        if (time == null) {
-            throw new NullPointerException("Time needs to be specified.");
-        }
+        Objects.requireNonNull(time, "Time needs to be specified");
         if (time.isUnknown()) {
             throw new IllegalArgumentException("The time is invalid");
         }
         if (parent != null) {
             throw new IllegalStateException("Cannot jump when embedded in another animation");
@@ -762,11 +816,11 @@
 
         double millis = time.isIndefinite() ? getCycleDuration().toMillis() :
             Utils.clamp(0, time.toMillis(), getTotalDuration().toMillis());
         long ticks = TickCalculation.fromMillis(millis);
 
-        if (getStatus() == Status.STOPPED) {
+        if (isStopped()) {
             syncClipEnvelope();
         }
         clipEnvelope.jumpTo(ticks);
     }
 
@@ -794,13 +848,11 @@
      *             if embedded in another animation,
      *                such as {@link SequentialTransition} or {@link ParallelTransition}
      * @see #getCuePoints()
      */
     public void jumpTo(String cuePoint) {
-        if (cuePoint == null) {
-            throw new NullPointerException("CuePoint needs to be specified");
-        }
+        Objects.requireNonNull(cuePoint, "CuePoint needs to be specified");
         if ("start".equalsIgnoreCase(cuePoint)) {
             jumpTo(Duration.ZERO);
         } else if ("end".equalsIgnoreCase(cuePoint)) {
             jumpTo(getTotalDuration());
         } else {
@@ -867,10 +919,38 @@
     public void playFrom(Duration time) {
         jumpTo(time);
         play();
     }
 
+    /**
+     * Plays an {@code Animation} from initial position in forward direction.
+     * <p>
+     * It is equivalent to
+     * <p>
+     * <code>
+     *      animation.stop();<br>
+     *      animation.setRate = setRate(Math.abs(animation.getRate())); <br>
+     *      animation.jumpTo(Duration.ZERO);<br>
+     *      animation.play();<br>
+     *  </code>
+     *
+     * <p>
+     * Note: <ul>
+     * <li>{@code playFromStart()} is an asynchronous call, {@code Animation} may
+     * not start immediately. </ul>
+     *
+     * @throws IllegalStateException
+     *             if embedded in another animation,
+     *                such as {@link SequentialTransition} or {@link ParallelTransition}
+     */
+    public void playFromStart() {
+        stop();
+        setRate(Math.abs(getRate()));
+        jumpTo(Duration.ZERO);
+        play();
+    }
+
     /**
      * Plays {@code Animation} from current position in the direction indicated
      * by {@code rate}. If the {@code Animation} is running, it has no effect.
      * <p>
      * When {@code rate} {@literal >} 0 (forward play), if an {@code Animation} is already
@@ -905,61 +985,44 @@
         switch (getStatus()) {
             case STOPPED:
                 if (startable(true)) {
                     final double rate = getRate();
                     if (lastPlayedFinished) {
-                        jumpTo((rate < 0)? getTotalDuration() : Duration.ZERO);
+                        jumpTo(rate < 0 ? getTotalDuration() : Duration.ZERO);
                     }
                     doStart(true);
                     startReceiver(TickCalculation.fromDuration(getDelay()));
-                    if (Math.abs(rate) < EPSILON) {
+                    if (isNearZero(rate)) {
                         pauseReceiver();
                     } else {
 
                     }
                 } else {
-                    final EventHandler<ActionEvent> handler = getOnFinished();
-                    if (handler != null) {
-                        handler.handle(new ActionEvent(this, null));
-                    }
+                    runHandler(getOnFinished());
                 }
                 break;
             case PAUSED:
                 doResume();
-                if (Math.abs(getRate()) >= EPSILON) {
+                if (!isNearZero(getRate())) {
                     resumeReceiver();
                 }
                 break;
+            case RUNNING: // no-op
         }
     }
 
-    /**
-     * Plays an {@code Animation} from initial position in forward direction.
-     * <p>
-     * It is equivalent to
-     * <p>
-     * <code>
-     *      animation.stop();<br>
-     *      animation.setRate = setRate(Math.abs(animation.getRate())); <br>
-     *      animation.jumpTo(Duration.ZERO);<br>
-     *      animation.play();<br>
-     *  </code>
-     *
-     * <p>
-     * Note: <ul>
-     * <li>{@code playFromStart()} is an asynchronous call, {@code Animation} may
-     * not start immediately. </ul>
-     *
-     * @throws IllegalStateException
-     *             if embedded in another animation,
-     *                such as {@link SequentialTransition} or {@link ParallelTransition}
-     */
-    public void playFromStart() {
-        stop();
-        setRate(Math.abs(getRate()));
-        jumpTo(Duration.ZERO);
-        play();
+    void doStart(boolean forceSync) {
+        sync(forceSync);
+        setStatus(Status.RUNNING);
+        clipEnvelope.start();
+        doSetCurrentRate(clipEnvelope.getCurrentRate());
+        lastPulse = 0;
+    }
+
+    void doResume() {
+        setStatus(Status.RUNNING);
+        doSetCurrentRate(lastPlayedForward ? getRate() : -getRate());
     }
 
     /**
      * Stops the animation and resets the play head to its initial position. If
      * the animation is already stopped, this method has no effect.
@@ -973,18 +1036,26 @@
      */
     public void stop() {
         if (parent != null) {
             throw new IllegalStateException("Cannot stop when embedded in another animation");
         }
-        if (getStatus() != Status.STOPPED) {
+        if (!isStopped()) {
             clipEnvelope.abortCurrentPulse();
             doStop();
             jumpTo(Duration.ZERO);
             lastPlayedFinished = true;
         }
     }
 
+    void doStop() {
+        if (!paused) {
+            timer.removePulseReceiver(pulseReceiver);
+        }
+        setStatus(Status.STOPPED);
+        doSetCurrentRate(0.0);
+    }
+
     /**
      * Pauses the animation. If the animation is not currently running, this
      * method has no effect.
      * <p>
      * Note: <ul>
@@ -996,17 +1067,59 @@
      */
     public void pause() {
         if (parent != null) {
             throw new IllegalStateException("Cannot pause when embedded in another animation");
         }
-        if (getStatus() == Status.RUNNING) {
+        if (isRunning()) {
             clipEnvelope.abortCurrentPulse();
             pauseReceiver();
             doPause();
         }
     }
 
+    void doPause() {
+        final double currentRate = getCurrentRate();
+        if (!isNearZero(currentRate)) {
+            lastPlayedForward = areNearEqual(getCurrentRate(), getRate());
+        }
+        doSetCurrentRate(0.0);
+        setStatus(Status.PAUSED);
+    }
+
+    final void finished() {
+        lastPlayedFinished = true;
+        doStop();
+        runHandler(getOnFinished());
+    }
+
+    void runHandler(EventHandler<ActionEvent> handler) {
+        if (handler != null) {
+            try {
+                handler.handle(new ActionEvent(this, null));
+            } catch (Exception ex) {
+                Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), ex);
+            }
+        }
+    }
+
+    private final double targetFramerate;
+    private final int resolution;
+    private long lastPulse;
+
+    /**
+     * The target framerate is the maximum framerate at which this {@code Animation}
+     * will run, in frames per second. This can be used, for example, to keep
+     * particularly complex {@code Animations} from over-consuming system resources.
+     * By default, an {@code Animation}'s framerate is not explicitly limited, meaning
+     * the {@code Animation} will run at an optimal framerate for the underlying platform.
+     *
+     * @return the target framerate
+     */
+    public final double getTargetFramerate() {
+        return targetFramerate;
+    }
+
     /**
      * The constructor of {@code Animation}.
      *
      * This constructor allows to define a target framerate.
      *
@@ -1046,12 +1159,11 @@
         this.clipEnvelope = clipEnvelope;
         this.timer = timer;
     }
 
     boolean startable(boolean forceSync) {
-        return (fromDuration(getCycleDuration()) > 0L)
-                || (!forceSync && clipEnvelope.wasSynched());
+        return (TickCalculation.fromDuration(getCycleDuration()) > 0L) || (!forceSync && clipEnvelope.wasSynched());
     }
 
     void sync(boolean forceSync) {
         if (forceSync || !clipEnvelope.wasSynched()) {
             syncClipEnvelope();
@@ -1065,40 +1177,10 @@
         clipEnvelope = clipEnvelope.setCycleCount(internalCycleCount);
         clipEnvelope.setCycleDuration(getCycleDuration());
         clipEnvelope.setAutoReverse(isAutoReverse());
     }
 
-    void doStart(boolean forceSync) {
-        sync(forceSync);
-        setStatus(Status.RUNNING);
-        clipEnvelope.start();
-        doSetCurrentRate(clipEnvelope.getCurrentRate());
-        lastPulse = 0;
-    }
-
-    void doPause() {
-        final double currentRate = getCurrentRate();
-        if (Math.abs(currentRate) >= EPSILON) {
-            lastPlayedForward = Math.abs(getCurrentRate() - getRate()) < EPSILON;
-        }
-        doSetCurrentRate(0.0);
-        setStatus(Status.PAUSED);
-    }
-
-    void doResume() {
-        setStatus(Status.RUNNING);
-        doSetCurrentRate(lastPlayedForward ? getRate() : -getRate());
-    }
-
-    void doStop() {
-        if (!paused) {
-            timer.removePulseReceiver(pulseReceiver);
-        }
-        setStatus(Status.STOPPED);
-        doSetCurrentRate(0.0);
-    }
-
     void doTimePulse(long elapsedTime) {
         if (resolution == 1) { // fullspeed
             clipEnvelope.timePulse(elapsedTime);
         } else if (elapsedTime - lastPulse >= resolution) {
             lastPulse = (elapsedTime / resolution) * resolution;
@@ -1114,25 +1196,6 @@
         currentTicks = ticks;
         if (currentTime != null) {
             currentTime.fireValueChangedEvent();
         }
     }
-
-    void setCurrentRate(double currentRate) {
-//        if (getStatus() == Status.RUNNING) {
-            doSetCurrentRate(currentRate);
-//        }
-    }
-
-    final void finished() {
-        lastPlayedFinished = true;
-        doStop();
-        final EventHandler<ActionEvent> handler = getOnFinished();
-        if (handler != null) {
-            try {
-                handler.handle(new ActionEvent(this, null));
-            } catch (Exception ex) {
-                Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), ex);
-            }
-        }
-    }
 }
