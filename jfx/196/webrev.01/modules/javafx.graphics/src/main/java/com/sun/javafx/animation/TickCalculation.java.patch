diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/animation/TickCalculation.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/animation/TickCalculation.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/animation/TickCalculation.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/animation/TickCalculation.java
@@ -27,12 +27,12 @@
 
 import javafx.util.Duration;
 
 public class TickCalculation {
     public static final int TICKS_PER_SECOND = 6000;
-    private static final double TICKS_PER_MILI = TICKS_PER_SECOND / 1000.0;
-    private static final double TICKS_PER_NANO =  TICKS_PER_MILI * 1e-6;
+    private static final double TICKS_PER_MILLI = TICKS_PER_SECOND / 1000.0;
+    private static final double TICKS_PER_NANO =  TICKS_PER_MILLI * 1e-6;
 
     private TickCalculation() {}
 
     public static long add(long op1, long op2) {
         assert (op1 >= 0);
@@ -69,11 +69,11 @@
         }
 
     }
 
     public static long fromMillis(double millis) {
-        return Math.round(TICKS_PER_MILI * millis);
+        return Math.round(TICKS_PER_MILLI * millis);
     }
 
     public static long fromNano(long nano) {
         return Math.round(TICKS_PER_NANO * nano);
     }
@@ -81,18 +81,18 @@
     public static long fromDuration(Duration duration) {
         return fromMillis(duration.toMillis());
     }
 
     public static long fromDuration(Duration duration, double rate) {
-        return Math.round(TICKS_PER_MILI * duration.toMillis() / Math.abs(rate));
+        return Math.round(TICKS_PER_MILLI * duration.toMillis() / Math.abs(rate));
     }
 
     public static Duration toDuration(long ticks) {
         return Duration.millis(toMillis(ticks));
     }
 
     public static double toMillis(long ticks) {
-        return ticks / TICKS_PER_MILI;
+        return ticks / TICKS_PER_MILLI;
     }
 
 
 }
