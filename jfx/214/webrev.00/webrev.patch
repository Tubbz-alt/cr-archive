diff a/build.gradle b/build.gradle
--- a/build.gradle
+++ b/build.gradle
@@ -1422,11 +1422,11 @@
                 lib = file("$libRootDir/${t.name}/${variant == '' ? library(properties.lib) : library(variantProperties.lib)}")
                 linker = variantProperties.linker
                 cleanTask.delete "$libRootDir/${t.name}"
             }
             nativeTask.dependsOn(linkTask)
-            if (IS_WINDOWS && t.name == "win") {
+            if (IS_WINDOWS && t.name == "win" && (!IS_STATIC_BUILD || name == "glass")) {
                 def rcTask = project.task("rc$capitalName$capitalVariant", type: CompileResourceTask, group: "Build") {
                     description = "Compiles native sources for $name"
                     matches = ".*\\.rc"
                     compiler = variantProperties.rcCompiler
                     source(variantProperties.rcSource)
diff a/buildSrc/win.gradle b/buildSrc/win.gradle
--- a/buildSrc/win.gradle
+++ b/buildSrc/win.gradle
@@ -32,11 +32,11 @@
 WIN.compileSWT = true;
 
 WIN.includeNull3d = true
 
 // Lambda for naming the generated libs
-WIN.library = { name -> return "${name}.dll" as String }
+WIN.library = { name -> return (IS_STATIC_BUILD ? "${name}.lib" : "${name}.dll") as String }
 
 WIN.libDest = "bin"
 WIN.modLibDest = "lib"
 
 def CPU_BITS = IS_64 ? "x64" : "x86"
@@ -114,12 +114,16 @@
 def ccFlags = ["/nologo", "/W3", "/EHsc", "/c",
         "/D_STATIC_CPPLIB", "/D_DISABLE_DEPRECATE_STATIC_CPPLIB", "/DINLINE=__inline",
         "/DUNICODE", "/D_UNICODE", "/DWIN32", "/DIAL", "/D_LITTLE_ENDIAN", "/DWIN32_LEAN_AND_MEAN",
         "/I$JDK_HOME/include", "/I$JDK_HOME/include/win32",
         ccDebugFlags].flatten();
+if (IS_STATIC_BUILD) ccFlags.add("/DSTATIC_BUILD")
 
-def linkFlags = ["/nologo", "/dll", "/manifest", "/opt:REF", "/incremental:no", "/dynamicbase", "/nxcompat"];
+def linkFlags = ["/nologo"]
+if (!IS_STATIC_BUILD) {
+    linkFlags += ["/dll", "/manifest", "/opt:REF", "/incremental:no", "/dynamicbase", "/nxcompat"]
+}
 if (!IS_64) linkFlags.add("/safeseh");
 if (IS_DEBUG_NATIVE) linkFlags.add("/debug");
 
 // Remove C++ static linking if not on VS2010
 if (WINDOWS_VS_VER != "100") {
@@ -148,11 +152,11 @@
     msvcBinDir = (IS_64
                       ? "$WINDOWS_VS_VSINSTALLDIR/VC/BIN/amd64"
                       : "$WINDOWS_VS_VSINSTALLDIR/VC/BIN")
 }
 def compiler = IS_COMPILE_PARFAIT ? "cl.exe" : cygpath("$msvcBinDir/cl.exe")
-def linker = IS_COMPILE_PARFAIT ? "link.exe" : cygpath("$msvcBinDir/link.exe")
+def linker = IS_STATIC_BUILD ? (IS_COMPILE_PARFAIT ? "lib.exe" : cygpath("$msvcBinDir/lib.exe")) : (IS_COMPILE_PARFAIT ? "link.exe" : cygpath("$msvcBinDir/link.exe"))
 def winSdkBinDir = "$WINDOWS_SDK_DIR/Bin"
 if (WINDOWS_VS_VER != "100") {
     winSdkBinDir += "/$CPU_BITS"
 }
 
@@ -288,11 +292,11 @@
     "/d", "\"JFX_NAME=${PRODUCT_NAME} ${PLATFORM_NAME} ${rcVerMajor}\"",
     "/d", "\"JFX_VER=${rcVer}\"",
     "/d", "\"JFX_BUILD_ID=${rcVerBuild}\"",
     "/d", "\"JFX_COPYRIGHT=Copyright \u00A9 ${rcVerCopyrYear}\"",
     "/d", "\"JFX_FVER=${rcVerFile}\"",
-    "/d", "\"JFX_FTYPE=0x2L\"",
+    "/d", "\"JFX_FTYPE=${IS_STATIC_BUILD ? "0x7L" : "0x2L" }\"",
     "/nologo"
 ];
 
 def defaultRcSource = file("${project("graphics").projectDir}/src/main/resources/version.rc");
 
@@ -311,14 +315,14 @@
     "/d", "JFX_INTERNAL_NAME=glass",
     rcFlags].flatten();
 WIN.glass.ccFlags = [ccFlags, "/WX"].flatten()
 if (WINDOWS_VS_VER != "100") WIN.glass.ccFlags -= ["/WX"]
 WIN.glass.linker = linker
-WIN.glass.linkFlags = [linkFlags, "delayimp.lib", "gdi32.lib", "urlmon.lib", "Comdlg32.lib",
+WIN.glass.linkFlags = (IS_STATIC_BUILD ? [linkFlags] : [linkFlags, "delayimp.lib", "gdi32.lib", "urlmon.lib", "Comdlg32.lib",
         "winmm.lib", "imm32.lib", "shell32.lib", "Uiautomationcore.lib", "dwmapi.lib",
         "/DELAYLOAD:user32.dll", "/DELAYLOAD:urlmon.dll", "/DELAYLOAD:winmm.dll", "/DELAYLOAD:shell32.dll",
-        "/DELAYLOAD:Uiautomationcore.dll", "/DELAYLOAD:dwmapi.dll"].flatten()
+        "/DELAYLOAD:Uiautomationcore.dll", "/DELAYLOAD:dwmapi.dll"]).flatten()
 WIN.glass.lib = "glass"
 
 WIN.decora = [:]
 WIN.decora.compiler = compiler
 WIN.decora.ccFlags = [IS_64 ? [] : ["/arch:SSE"], "/fp:fast", ccFlags].flatten()
@@ -359,11 +363,11 @@
     file("${project("graphics").projectDir}/src/main/native-prism-d3d"),
     file("${project("graphics").projectDir}/src/main/native-prism-d3d/hlsl")]
 WIN.prismD3D.compiler = compiler
 WIN.prismD3D.ccFlags = [ccFlags, "/Ibuild/headers/PrismD3D"].flatten()
 WIN.prismD3D.linker = linker
-WIN.prismD3D.linkFlags = [linkFlags, "user32.lib"].flatten()
+WIN.prismD3D.linkFlags = (IS_STATIC_BUILD ? [linkFlags] : [linkFlags, "user32.lib"]).flatten()
 WIN.prismD3D.lib = "prism_d3d"
 WIN.prismD3D.rcCompiler = rcCompiler;
 WIN.prismD3D.rcSource = defaultRcSource
 WIN.prismD3D.rcFlags = ["/d", "JFX_FNAME=prism_d3d.dll", "/d", "JFX_INTERNAL_NAME=prismD3D", rcFlags].flatten();
 
@@ -389,11 +393,11 @@
     file("${project("graphics").projectDir}/src/main/native-prism-es2/windows")
 ]
 WIN.prismES2.compiler = compiler
 WIN.prismES2.ccFlags = ["/Ob1", "/GF", "/Gy", "/GS", "/DWIN32", ccFlags].flatten()
 WIN.prismES2.linker = linker
-WIN.prismES2.linkFlags = [linkFlags, "/SUBSYSTEM:WINDOWS", "opengl32.lib", "gdi32.lib", "user32.lib", "kernel32.lib"].flatten()
+WIN.prismES2.linkFlags = (IS_STATIC_BUILD ? [linkFlags] : [linkFlags, "/SUBSYSTEM:WINDOWS", "opengl32.lib", "gdi32.lib", "user32.lib", "kernel32.lib"]).flatten()
 WIN.prismES2.lib = "prism_es2"
 WIN.prismES2.rcCompiler = rcCompiler;
 WIN.prismES2.rcSource = defaultRcSource
 WIN.prismES2.rcFlags = ["/d", "JFX_FNAME=prism_es2.dll", "/d", "JFX_INTERNAL_NAME=prismES2", rcFlags].flatten();
 
@@ -405,11 +409,11 @@
 WIN.font.nativeSource = [file("${project("graphics").projectDir}/src/main/native-font")]
 WIN.font.compiler = compiler
 WIN.font.ccFlags = ["/DJFXFONT_PLUS", "/D_WIN32_WINNT=0x0601", ccFlags].flatten()
 WIN.font.ccFlags -= ["/DUNICODE", "/D_UNICODE"]
 WIN.font.linker = linker
-WIN.font.linkFlags = [linkFlags, "advapi32.lib", "gdi32.lib", "user32.lib", "dwrite.lib", "d2d1.lib", "windowscodecs.lib", "ole32.lib"].flatten()
+WIN.font.linkFlags = (IS_STATIC_BUILD ? [linkFlags] : [linkFlags, "advapi32.lib", "gdi32.lib", "user32.lib", "dwrite.lib", "d2d1.lib", "windowscodecs.lib", "ole32.lib"]).flatten()
 WIN.font.lib = "javafx_font"
 WIN.font.rcCompiler = rcCompiler;
 WIN.font.rcSource = defaultRcSource
 WIN.font.rcFlags = ["/d", "JFX_FNAME=javafx_font.dll", "/d", "JFX_INTERNAL_NAME=font", rcFlags].flatten();
 
diff a/modules/javafx.graphics/src/main/native-font/directwrite.cpp b/modules/javafx.graphics/src/main/native-font/directwrite.cpp
--- a/modules/javafx.graphics/src/main/native-font/directwrite.cpp
+++ b/modules/javafx.graphics/src/main/native-font/directwrite.cpp
@@ -49,11 +49,11 @@
   REFIID iid,
   const D2D1_FACTORY_OPTIONS *pFactoryOptions,
   void **factory
 );
 
-jboolean checkAndClearException(JNIEnv* env)
+static jboolean checkAndClearException(JNIEnv* env)
 {
     jthrowable t = env->ExceptionOccurred();
     if (!t) {
         return JNI_FALSE;
     }
diff a/modules/javafx.graphics/src/main/native-font/fontpath.c b/modules/javafx.graphics/src/main/native-font/fontpath.c
--- a/modules/javafx.graphics/src/main/native-font/fontpath.c
+++ b/modules/javafx.graphics/src/main/native-font/fontpath.c
@@ -48,10 +48,24 @@
             (*env)->DeleteLocalRef(env, jniRef); \
             jniRef = NULL; \
         } \
     } while (0)
 
+#ifdef STATIC_BUILD
+JNIEXPORT jint JNICALL JNI_OnLoad_javafx_font(JavaVM *vm, void *reserved) {
+#ifdef JNI_VERSION_1_8
+    JNIEnv *env;
+    if ((*vm)->GetEnv(vm, (void **)&env, JNI_VERSION_1_8) != JNI_OK) {
+        return JNI_VERSION_1_4;
+    }
+    return JNI_VERSION_1_8;
+#else
+    return JNI_VERSION_1_4;
+#endif // JNI_VERSION_1_8
+}
+#endif // STATIC_BUILD
+
 JNIEXPORT jbyteArray JNICALL
 Java_com_sun_javafx_font_PrismFontFactory_getFontPath(JNIEnv *env, jobject thiz)
 {
     char windir[BSIZE];
     char sysdir[BSIZE];
diff a/modules/javafx.graphics/src/main/native-glass/win/GlassApplication.cpp b/modules/javafx.graphics/src/main/native-glass/win/GlassApplication.cpp
--- a/modules/javafx.graphics/src/main/native-glass/win/GlassApplication.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/win/GlassApplication.cpp
@@ -353,26 +353,33 @@
  * JNI section
  *******************************************************/
 
 extern "C" {
 
+#ifndef STATIC_BUILD
 BOOL WINAPI DllMain(HANDLE hinstDLL, DWORD dwReason, LPVOID lpvReserved)
 {
     if (dwReason == DLL_PROCESS_ATTACH) {
         GlassApplication::SetHInstance((HINSTANCE)hinstDLL);
     }
     return TRUE;
 }
+#endif
 
 /*
  * Class:     com_sun_glass_ui_win_WinApplication
  * Method:    initIDs
  * Signature: ()V
  */
 JNIEXPORT void JNICALL Java_com_sun_glass_ui_win_WinApplication_initIDs
   (JNIEnv *env, jclass cls, jfloat overrideUIScale)
 {
+#ifdef STATIC_BUILD
+    HINSTANCE hInstExe = ::GetModuleHandle(NULL);
+    GlassApplication::SetHInstance((HINSTANCE)hInstExe);
+#endif
+
     GlassApplication::overrideUIScale = overrideUIScale;
 
     javaIDs.Application.reportExceptionMID =
         env->GetStaticMethodID(cls, "reportException", "(Ljava/lang/Throwable;)V");
     ASSERT(javaIDs.Application.reportExceptionMID);
diff a/modules/javafx.graphics/src/main/native-glass/win/Utils.cpp b/modules/javafx.graphics/src/main/native-glass/win/Utils.cpp
--- a/modules/javafx.graphics/src/main/native-glass/win/Utils.cpp
+++ b/modules/javafx.graphics/src/main/native-glass/win/Utils.cpp
@@ -107,11 +107,15 @@
     return modifiers;
 }
 
 extern "C" {
 
+#ifdef STATIC_BUILD
+JNIEXPORT jint JNICALL JNI_OnLoad_glass(JavaVM *vm, void *reserved)
+#else
 JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved)
+#endif
 {
     memset(&javaIDs, 0, sizeof(javaIDs));
     jvm = vm;
     return JNI_VERSION_1_2;
 }
diff a/modules/javafx.graphics/src/main/native-prism-d3d/D3DPipeline.cc b/modules/javafx.graphics/src/main/native-prism-d3d/D3DPipeline.cc
--- a/modules/javafx.graphics/src/main/native-prism-d3d/D3DPipeline.cc
+++ b/modules/javafx.graphics/src/main/native-prism-d3d/D3DPipeline.cc
@@ -34,13 +34,11 @@
 typedef HRESULT WINAPI FnDirect3DCreate9Ex(UINT SDKVersion, IDirect3D9Ex**);
 
 FnDirect3DCreate9 * pD3D9FactoryFunction = 0;
 FnDirect3DCreate9Ex * pD3D9FactoryExFunction = 0;
 
-extern jboolean checkAndClearException(JNIEnv *env);
-
-jboolean checkAndClearException(JNIEnv *env) {
+static jboolean checkAndClearException(JNIEnv *env) {
     if (!env->ExceptionCheck()) {
         return JNI_FALSE;
     }
     env->ExceptionClear();
     return JNI_TRUE;
@@ -75,10 +73,11 @@
     IDirect3D9Ex * pD3D = 0;
     HRESULT hr = pD3D9FactoryExFunction ? pD3D9FactoryExFunction(D3D_SDK_VERSION, &pD3D) : E_FAIL;
     return SUCCEEDED(hr) ? pD3D : 0;
 }
 
+#ifndef STATIC_BUILD
 BOOL APIENTRY DllMain( HANDLE hModule,
                        DWORD  ul_reason_for_call,
                        LPVOID lpReserved)
 {
     switch (ul_reason_for_call) {
@@ -89,10 +88,11 @@
         freeD3DLibrary();
         break;
     }
     return TRUE;
 }
+#endif // STATIC_BUILD
 
 struct ConfigJavaStaticClass : IConfig {
     JNIEnv *_env; jclass _psClass;
     ConfigJavaStaticClass(JNIEnv *env, jclass psClass)  :
     _env(env), _psClass(psClass) {}
@@ -125,10 +125,14 @@
     if (FAILED(D3DPipelineManager::CheckOSVersion())) {
         D3DPipelineManager::SetErrorMessage("Wrong operating system version");
         return false;
     }
 
+#ifdef STATIC_BUILD
+    loadD3DLibrary();
+#endif // STATIC_BUILD
+
     TraceLn(NWT_TRACE_INFO, "D3DPipeline_nInit");
     D3DPipelineManager *pMgr = D3DPipelineManager::CreateInstance(ConfigJavaStaticClass(env, psClass));
 
     if (!pMgr && !D3DPipelineManager::GetErrorMessage()) {
         D3DPipelineManager::SetErrorMessage("Direct3D initialization failed");
@@ -152,10 +156,14 @@
 {
     TraceLn(NWT_TRACE_INFO, "D3DPipeline_nDispose");
     if (D3DPipelineManager::GetInstance()) {
         D3DPipelineManager::DeleteInstance();
     }
+
+#ifdef STATIC_BUILD
+    freeD3DLibrary();
+#endif // STATIC_BUILD
 }
 
 
 JNIEXPORT jint JNICALL Java_com_sun_prism_d3d_D3DPipeline_nGetAdapterOrdinal(JNIEnv *, jclass, jlong hMonitor) {
     D3DPipelineManager *pMgr = D3DPipelineManager::GetInstance();
diff a/modules/javafx.graphics/src/main/native-prism-d3d/D3DShader.cc b/modules/javafx.graphics/src/main/native-prism-d3d/D3DShader.cc
--- a/modules/javafx.graphics/src/main/native-prism-d3d/D3DShader.cc
+++ b/modules/javafx.graphics/src/main/native-prism-d3d/D3DShader.cc
@@ -194,6 +194,21 @@
   (JNIEnv *, jclass, jlong, jlong, jstring)
 {
     return -1;
 }
 
+#ifdef STATIC_BUILD
+JNIEXPORT jint JNICALL JNI_OnLoad_prism_d3d(JavaVM *vm, void *reserved) {
+#ifdef JNI_VERSION_1_8
+    //min. returned JNI_VERSION required by JDK8 for builtin libraries
+    JNIEnv *env;
+    if (vm->GetEnv((void **)&env, JNI_VERSION_1_8) != JNI_OK) {
+        return JNI_VERSION_1_4;
+    }
+    return JNI_VERSION_1_8;
+#else
+    return JNI_VERSION_1_4;
+#endif // JNI_VERSION_1_8
+}
+#endif // STATIC_BUILD
+
 }
diff a/modules/javafx.graphics/src/main/native-prism-es2/windows/WinGLFactory.c b/modules/javafx.graphics/src/main/native-prism-es2/windows/WinGLFactory.c
--- a/modules/javafx.graphics/src/main/native-prism-es2/windows/WinGLFactory.c
+++ b/modules/javafx.graphics/src/main/native-prism-es2/windows/WinGLFactory.c
@@ -31,10 +31,25 @@
 #include <math.h>
 
 #include "../PrismES2Defs.h"
 #include "com_sun_prism_es2_WinGLFactory.h"
 
+#ifdef STATIC_BUILD
+JNIEXPORT jint JNICALL JNI_OnLoad_prism_es2(JavaVM *vm, void * reserved) {
+#ifdef JNI_VERSION_1_8
+    //min. returned JNI_VERSION required by JDK8 for builtin libraries
+    JNIEnv *env;
+    if ((*vm)->GetEnv(vm, (void **)&env, JNI_VERSION_1_8) != JNI_OK) {
+        return JNI_VERSION_1_4;
+    }
+    return JNI_VERSION_1_8;
+#else
+    return JNI_VERSION_1_4;
+#endif // JNI_VERSION_1_8
+}
+#endif // STATIC_BUILD
+
 PIXELFORMATDESCRIPTOR getPFD(jint* attrArr) {
 
     static PIXELFORMATDESCRIPTOR pfd = {
         sizeof (PIXELFORMATDESCRIPTOR),
         1, /* Version number */
