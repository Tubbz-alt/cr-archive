diff a/modules/javafx.graphics/src/main/native-prism-d3d/D3DPipeline.cc b/modules/javafx.graphics/src/main/native-prism-d3d/D3DPipeline.cc
--- a/modules/javafx.graphics/src/main/native-prism-d3d/D3DPipeline.cc
+++ b/modules/javafx.graphics/src/main/native-prism-d3d/D3DPipeline.cc
@@ -34,13 +34,11 @@
 typedef HRESULT WINAPI FnDirect3DCreate9Ex(UINT SDKVersion, IDirect3D9Ex**);
 
 FnDirect3DCreate9 * pD3D9FactoryFunction = 0;
 FnDirect3DCreate9Ex * pD3D9FactoryExFunction = 0;
 
-extern jboolean checkAndClearException(JNIEnv *env);
-
-jboolean checkAndClearException(JNIEnv *env) {
+static jboolean checkAndClearException(JNIEnv *env) {
     if (!env->ExceptionCheck()) {
         return JNI_FALSE;
     }
     env->ExceptionClear();
     return JNI_TRUE;
@@ -75,10 +73,11 @@
     IDirect3D9Ex * pD3D = 0;
     HRESULT hr = pD3D9FactoryExFunction ? pD3D9FactoryExFunction(D3D_SDK_VERSION, &pD3D) : E_FAIL;
     return SUCCEEDED(hr) ? pD3D : 0;
 }
 
+#ifndef STATIC_BUILD
 BOOL APIENTRY DllMain( HANDLE hModule,
                        DWORD  ul_reason_for_call,
                        LPVOID lpReserved)
 {
     switch (ul_reason_for_call) {
@@ -89,10 +88,11 @@
         freeD3DLibrary();
         break;
     }
     return TRUE;
 }
+#endif // STATIC_BUILD
 
 struct ConfigJavaStaticClass : IConfig {
     JNIEnv *_env; jclass _psClass;
     ConfigJavaStaticClass(JNIEnv *env, jclass psClass)  :
     _env(env), _psClass(psClass) {}
@@ -125,10 +125,14 @@
     if (FAILED(D3DPipelineManager::CheckOSVersion())) {
         D3DPipelineManager::SetErrorMessage("Wrong operating system version");
         return false;
     }
 
+#ifdef STATIC_BUILD
+    loadD3DLibrary();
+#endif // STATIC_BUILD
+
     TraceLn(NWT_TRACE_INFO, "D3DPipeline_nInit");
     D3DPipelineManager *pMgr = D3DPipelineManager::CreateInstance(ConfigJavaStaticClass(env, psClass));
 
     if (!pMgr && !D3DPipelineManager::GetErrorMessage()) {
         D3DPipelineManager::SetErrorMessage("Direct3D initialization failed");
@@ -152,10 +156,14 @@
 {
     TraceLn(NWT_TRACE_INFO, "D3DPipeline_nDispose");
     if (D3DPipelineManager::GetInstance()) {
         D3DPipelineManager::DeleteInstance();
     }
+
+#ifdef STATIC_BUILD
+    freeD3DLibrary();
+#endif // STATIC_BUILD
 }
 
 
 JNIEXPORT jint JNICALL Java_com_sun_prism_d3d_D3DPipeline_nGetAdapterOrdinal(JNIEnv *, jclass, jlong hMonitor) {
     D3DPipelineManager *pMgr = D3DPipelineManager::GetInstance();
