diff a/tests/system/src/test/java/test/javafx/scene/control/ProgressIndicatorLeakTest.java b/tests/system/src/test/java/test/javafx/scene/control/ProgressIndicatorLeakTest.java
--- a/tests/system/src/test/java/test/javafx/scene/control/ProgressIndicatorLeakTest.java
+++ b/tests/system/src/test/java/test/javafx/scene/control/ProgressIndicatorLeakTest.java
@@ -25,23 +25,19 @@
 
 package test.javafx.scene.control;
 
 import javafx.application.Application;
 import javafx.application.Platform;
-import javafx.scene.Group;
 import javafx.scene.Node;
-import javafx.scene.Parent;
 import javafx.scene.Scene;
 import javafx.scene.control.ProgressIndicator;
 import javafx.scene.control.skin.ProgressIndicatorSkin;
 import javafx.stage.Stage;
 import javafx.stage.WindowEvent;
 
 import java.lang.ref.WeakReference;
-import java.lang.reflect.Field;
 import java.util.LinkedList;
-import java.util.List;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
 import junit.framework.Assert;
 import org.junit.AfterClass;
@@ -67,28 +63,24 @@
             Assert.assertEquals("size is wrong", 1, indicator.getChildrenUnmodifiable().size());
             detIndicator = new WeakReference<Node>(indicator.getChildrenUnmodifiable().get(0));
             indicator.setProgress(-1.0);
             indicator.setProgress(1.0);
 
-            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {
-                Platform.runLater(() -> {
-                    startupLatch.countDown();
-                });
+            primaryStage.setOnShown(l -> {
+                Platform.runLater(() -> startupLatch.countDown());
             });
             primaryStage.show();
         }
     }
 
     @BeforeClass
     public static void initFX() throws Exception {
         startupLatch = new CountDownLatch(1);
         new Thread(() -> Application.launch(TestApp.class, (String[]) null)).start();
-
         Assert.assertTrue("Timeout waiting for FX runtime to start", startupLatch.await(15, TimeUnit.SECONDS));
     }
 
-
     @Test
     public void memoryTest() throws Exception {
         assertCollectable(detIndicator);
     }
 
@@ -105,13 +97,11 @@
             createGarbage();
             System.gc();
             System.runFinalization();
         }
 
-        if (weakReference.get() != null) {
-            throw new AssertionError("Content of WeakReference was not collected. content: " + weakReference.get());
-        }
+        Assert.assertNull(weakReference.get());
     }
     public static void createGarbage() {
         LinkedList list = new LinkedList<Integer>();
         int counter = 0;
         while (counter < 999999) {
@@ -125,7 +115,6 @@
         Platform.runLater(() -> {
             stage.hide();
             Platform.exit();
         });
     }
-
 }
