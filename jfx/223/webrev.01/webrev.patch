diff a/modules/javafx.controls/src/shims/java/javafx/scene/control/skin/ControlSkinShim.java b/modules/javafx.controls/src/shims/java/javafx/scene/control/skin/ControlSkinShim.java
--- /dev/null
+++ b/modules/javafx.controls/src/shims/java/javafx/scene/control/skin/ControlSkinShim.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package javafx.scene.control.skin;
+
+import java.lang.reflect.Field;
+
+import com.sun.javafx.scene.control.behavior.BehaviorBase;
+
+import javafx.scene.control.Skin;
+
+public class ControlSkinShim {
+
+    /**
+     * Reflectively accesses and returns the value of the skin's behavior field.
+     *
+     * @param skin the skin to get the behavior from
+     * @return the value of the skin's behavior field
+     * @throws RuntimeException wrapped around the exception thrown by the reflective access
+     */
+    public static BehaviorBase<?> getBehavior(Skin<?> skin) {
+        try {
+            Field field = skin.getClass().getDeclaredField("behavior");
+            field.setAccessible(true);
+            return (BehaviorBase<?>) field.get(skin);
+        } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException e) {
+            throw new RuntimeException("failed access to behavior in " + skin.getClass(), e);
+        }
+    }
+
+
+    private ControlSkinShim() {}
+}
diff a/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/behavior/BehaviorMemoryLeakTest.java b/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/behavior/BehaviorMemoryLeakTest.java
--- /dev/null
+++ b/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/behavior/BehaviorMemoryLeakTest.java
@@ -0,0 +1,157 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.com.sun.javafx.scene.control.behavior;
+
+import java.lang.ref.WeakReference;
+import java.util.Collection;
+import java.util.List;
+import java.util.stream.Collectors;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import com.sun.javafx.scene.control.behavior.BehaviorBase;
+
+import static org.junit.Assert.*;
+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;
+
+import javafx.scene.control.Button;
+import javafx.scene.control.CheckBox;
+import javafx.scene.control.ColorPicker;
+import javafx.scene.control.ComboBox;
+import javafx.scene.control.Control;
+import javafx.scene.control.DatePicker;
+import javafx.scene.control.Hyperlink;
+import javafx.scene.control.ListView;
+import javafx.scene.control.MenuButton;
+import javafx.scene.control.PasswordField;
+import javafx.scene.control.RadioButton;
+import javafx.scene.control.SplitMenuButton;
+import javafx.scene.control.TableView;
+import javafx.scene.control.TextArea;
+import javafx.scene.control.TextField;
+import javafx.scene.control.ToggleButton;
+import javafx.scene.control.TreeTableView;
+import javafx.scene.control.TreeView;
+import test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory;
+
+/**
+ * Test for memory leaks in Behavior implementations.
+ * <p>
+ * This test is parameterized on control type.
+ */
+@RunWith(Parameterized.class)
+public class BehaviorMemoryLeakTest {
+
+    private Control control;
+
+    /**
+     * Create behavior -> dispose behavior -> gc
+     */
+    @Test
+    public void testMemoryLeakDisposeBehavior() {
+        WeakReference<BehaviorBase<?>> weakRef = new WeakReference<>(createBehavior(control));
+        assertNotNull(weakRef.get());
+        weakRef.get().dispose();
+        attemptGC(weakRef);
+        assertNull("behavior must be gc'ed", weakRef.get());
+    }
+
+    //---------------- parameterized
+
+    // Note: name property not supported before junit 4.11
+    @Parameterized.Parameters //(name = "{index}: {0} ")
+    public static Collection<Object[]> data() {
+        List<Class<Control>> controlClasses = getControlClassesWithBehavior();
+        // FIXME as part of JDK-8241364
+        // The behaviors of these controls are leaking
+        // step 1: file issues (where not yet done), add informal ignore to entry
+        // step 2: fix and remove from list
+        List<Class<? extends Control>> leakingClasses = List.of(
+                // @Ignore("8245282")
+                Button.class,
+                // @Ignore("8245282")
+                CheckBox.class,
+                // @Ignore("8245282")
+                ColorPicker.class,
+                // @Ignore("8245282")
+                ComboBox.class,
+                // @Ignore("8245282")
+                DatePicker.class,
+                // @Ignore("8245282")
+                Hyperlink.class,
+                ListView.class,
+                // @Ignore("8245282")
+                MenuButton.class,
+                PasswordField.class,
+                // @Ignore("8245282")
+                RadioButton.class,
+                // @Ignore("8245282")
+                SplitMenuButton.class,
+                TableView.class,
+                TextArea.class,
+                TextField.class,
+                // @Ignore("8245282")
+                ToggleButton.class,
+                TreeTableView.class,
+                TreeView.class
+         );
+        // remove the known issues to make the test pass
+        controlClasses.removeAll(leakingClasses);
+        // instantiate controls
+        List<Control> controls = controlClasses.stream()
+                .map(ControlSkinFactory::createControl)
+                .collect(Collectors.toList());
+        return asArrays(controls);
+    }
+
+    public BehaviorMemoryLeakTest(Control control) {
+        this.control = control;
+    }
+
+//------------------- setup
+
+    @After
+    public void cleanup() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
+    }
+
+    @Before
+    public void setup() {
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+        assertNotNull(control);
+    }
+
+}
diff a/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/infrastructure/ControlBehaviorTestExample.java b/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/infrastructure/ControlBehaviorTestExample.java
--- /dev/null
+++ b/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/infrastructure/ControlBehaviorTestExample.java
@@ -0,0 +1,103 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.com.sun.javafx.scene.control.infrastructure;
+
+import java.lang.ref.WeakReference;
+import java.util.Collection;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import com.sun.javafx.scene.control.behavior.BehaviorBase;
+
+import static org.junit.Assert.*;
+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;
+
+import javafx.scene.control.Control;
+
+/**
+ * Example of writing a test for a streak of similar issues,
+ * here f.i. memory leak in behavior.
+ *
+ * Note: doesn't have postfix _Test_ to not be included in
+ * default testing.
+ */
+@RunWith(Parameterized.class)
+public class ControlBehaviorTestExample {
+
+    private Control control;
+    private Class<Control> controlClass;
+
+    /**
+     * Create behavior -> dispose behavior -> gc
+     */
+    @Test
+    public void testMemoryLeakDisposeBehavior() {
+        WeakReference<BehaviorBase<?>> weakRef = new WeakReference<>(createBehavior(control));
+        assertNotNull(weakRef.get());
+        weakRef.get().dispose();
+        attemptGC(weakRef);
+        assertNull("behavior must be gc'ed", weakRef.get());
+    }
+
+//------------ parameters
+
+    // Note: name property not supported before junit 4.11
+    @Parameterized.Parameters //(name = "{index}: {0} ")
+    public static Collection<Object[]> data() {
+        return asArrays(getControlClassesWithBehavior());
+    }
+
+    public ControlBehaviorTestExample(Class<Control> controlClass) {
+        this.controlClass = controlClass;
+    }
+
+//------------ setup
+
+    @Before
+    public void setup() {
+        assertNotNull(controlClass);
+
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+
+        control = createControl(controlClass);
+    }
+
+    @After
+    public void cleanup() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
+    }
+
+}
diff a/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/infrastructure/ControlSkinFactory.java b/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/infrastructure/ControlSkinFactory.java
--- /dev/null
+++ b/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/infrastructure/ControlSkinFactory.java
@@ -0,0 +1,751 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.com.sun.javafx.scene.control.infrastructure;
+
+import java.lang.ref.WeakReference;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+
+import com.sun.javafx.scene.control.behavior.BehaviorBase;
+import com.sun.javafx.scene.control.behavior.ButtonBehavior;
+import com.sun.javafx.scene.control.behavior.ComboBoxListViewBehavior;
+import com.sun.javafx.scene.control.behavior.ToggleButtonBehavior;
+
+import static java.util.stream.Collectors.*;
+import static org.junit.Assert.*;
+
+import javafx.scene.control.Accordion;
+import javafx.scene.control.Button;
+import javafx.scene.control.ButtonBar;
+import javafx.scene.control.ButtonBase;
+import javafx.scene.control.CheckBox;
+import javafx.scene.control.ChoiceBox;
+import javafx.scene.control.ColorPicker;
+import javafx.scene.control.ComboBox;
+import javafx.scene.control.Control;
+import javafx.scene.control.DateCell;
+import javafx.scene.control.DatePicker;
+import javafx.scene.control.Hyperlink;
+import javafx.scene.control.Label;
+import javafx.scene.control.ListCell;
+import javafx.scene.control.ListView;
+import javafx.scene.control.MenuBar;
+import javafx.scene.control.MenuButton;
+import javafx.scene.control.Pagination;
+import javafx.scene.control.PasswordField;
+import javafx.scene.control.ProgressBar;
+import javafx.scene.control.ProgressIndicator;
+import javafx.scene.control.RadioButton;
+import javafx.scene.control.ScrollBar;
+import javafx.scene.control.ScrollPane;
+import javafx.scene.control.Separator;
+import javafx.scene.control.Skin;
+import javafx.scene.control.Slider;
+import javafx.scene.control.Spinner;
+import javafx.scene.control.SplitMenuButton;
+import javafx.scene.control.SplitPane;
+import javafx.scene.control.TabPane;
+import javafx.scene.control.TableCell;
+import javafx.scene.control.TableRow;
+import javafx.scene.control.TableView;
+import javafx.scene.control.TextArea;
+import javafx.scene.control.TextField;
+import javafx.scene.control.TitledPane;
+import javafx.scene.control.ToggleButton;
+import javafx.scene.control.ToolBar;
+import javafx.scene.control.TreeCell;
+import javafx.scene.control.TreeTableCell;
+import javafx.scene.control.TreeTableRow;
+import javafx.scene.control.TreeTableView;
+import javafx.scene.control.TreeView;
+import javafx.scene.control.skin.AccordionSkin;
+import javafx.scene.control.skin.ButtonBarSkin;
+import javafx.scene.control.skin.ButtonSkin;
+import javafx.scene.control.skin.CheckBoxSkin;
+import javafx.scene.control.skin.ChoiceBoxSkin;
+import javafx.scene.control.skin.ColorPickerSkin;
+import javafx.scene.control.skin.ComboBoxListViewSkin;
+import javafx.scene.control.skin.ControlSkinShim;
+import javafx.scene.control.skin.DateCellSkin;
+import javafx.scene.control.skin.DatePickerSkin;
+import javafx.scene.control.skin.HyperlinkSkin;
+import javafx.scene.control.skin.LabelSkin;
+import javafx.scene.control.skin.ListCellSkin;
+import javafx.scene.control.skin.ListViewSkin;
+import javafx.scene.control.skin.MenuBarSkin;
+import javafx.scene.control.skin.MenuButtonSkin;
+import javafx.scene.control.skin.PaginationSkin;
+import javafx.scene.control.skin.ProgressBarSkin;
+import javafx.scene.control.skin.ProgressIndicatorSkin;
+import javafx.scene.control.skin.RadioButtonSkin;
+import javafx.scene.control.skin.ScrollBarSkin;
+import javafx.scene.control.skin.ScrollPaneSkin;
+import javafx.scene.control.skin.SeparatorSkin;
+import javafx.scene.control.skin.SliderSkin;
+import javafx.scene.control.skin.SpinnerSkin;
+import javafx.scene.control.skin.SplitMenuButtonSkin;
+import javafx.scene.control.skin.SplitPaneSkin;
+import javafx.scene.control.skin.TabPaneSkin;
+import javafx.scene.control.skin.TableCellSkin;
+import javafx.scene.control.skin.TableRowSkin;
+import javafx.scene.control.skin.TableViewSkin;
+import javafx.scene.control.skin.TextAreaSkin;
+import javafx.scene.control.skin.TextFieldSkin;
+import javafx.scene.control.skin.TitledPaneSkin;
+import javafx.scene.control.skin.ToggleButtonSkin;
+import javafx.scene.control.skin.ToolBarSkin;
+import javafx.scene.control.skin.TreeCellSkin;
+import javafx.scene.control.skin.TreeTableCellSkin;
+import javafx.scene.control.skin.TreeTableRowSkin;
+import javafx.scene.control.skin.TreeTableViewSkin;
+import javafx.scene.control.skin.TreeViewSkin;
+
+/**
+ * Utility class to create Controls, alternative Skins and access/create behaviors.
+ * Note: the alternative skin class must be "different enough" from the default
+ * to really trigger a replace (see skinProperty for details).
+ * <p>
+ *
+ * Naming conventions for alternative skins: ControlName + Skin + 1.
+ *
+ */
+public class ControlSkinFactory {
+
+// ----------------- control support
+
+    /**
+     * Returns a list of all control classes in package controls.
+     *
+     * @return a list control classes in package controls
+     */
+    public static List<Class<Control>> getControlClasses() {
+        List<Object[]> data = Arrays.asList(controlClasses);
+        List<Class<Control>> controls = data.stream()
+            .map(array -> array[0])
+            .map(element -> (Class<Control>) element)
+            .collect(toList());
+        return controls;
+    }
+
+    /**
+     * Returns a list of all controls in package controls.
+     *
+     * @return a list of controls in package controls
+     */
+    public static List<Control> getControls() {
+        List<Control> controls = getControlClasses().stream()
+            .map(ControlSkinFactory::createControl)
+            .collect(toList());
+        return controls;
+    }
+
+    /**
+     * Creates and returns an instance of the given control class.
+     * @param <T> the type of the control
+     * @param controlClass the class of the control
+     * @return an instance of the class
+     */
+    public static <T extends Control> T createControl(Class<T> controlClass) {
+        try {
+            return controlClass.getDeclaredConstructor().newInstance();
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+//----------- behavior support
+
+    /**
+     * Returns a List of controlClasses that have skins with behaviour.
+     *
+     * @return list of controlClasses that have skins with behavior
+     */
+    public static List<Class<Control>> getControlClassesWithBehavior() {
+        List<Class<Control>> controlClasses = getControlClasses();
+        controlClasses.removeAll(withoutBehaviors);
+        return controlClasses;
+    }
+
+    /**
+     * Returns the skin's behavior.
+     *
+     * @param skin the skin to get the behavior from
+     * @return the skin's behavior
+     */
+    public static BehaviorBase<?> getBehavior(Skin<?> skin) {
+        return ControlSkinShim.getBehavior(skin);
+    }
+
+    /**
+     * Creates and returns the default behavior for the given control.
+     *
+     * @param <T> the type of the control
+     * @param control the control to create the behavior for
+     * @return the default behavior for the control
+     * @throws RuntimeException with the exception thrown when instantiating the behavior
+     *
+     */
+    public static <T extends Control> BehaviorBase<T> createBehavior(T control) {
+        Class<?> controlClass = control.getClass();
+        Function<Control, BehaviorBase> creator = specialBehaviorMap.get(controlClass);
+        if (creator != null) {
+            return creator.apply(control);
+        }
+
+        String behaviorClassName = "com.sun.javafx.scene.control.behavior." + controlClass.getSimpleName() + "Behavior";
+        try {
+            Class<?>  behaviorClass = Class.forName(behaviorClassName);
+             return  (BehaviorBase<T>) behaviorClass.getDeclaredConstructor(controlClass).newInstance(control);
+        } catch (Exception e) {
+            throw new RuntimeException("failed to instantiate a default behavior", e);
+        }
+    }
+
+
+    // map for behaviors that don't have the standard name or are shared for several control classes
+    static Map<Class<? extends Control>, Function<Control, BehaviorBase>> specialBehaviorMap = new HashMap<>();
+
+    static {
+        specialBehaviorMap.put(Button.class, (Function<Control, BehaviorBase>) c -> new ButtonBehavior((ButtonBase) c));
+        specialBehaviorMap.put(CheckBox.class, (Function<Control, BehaviorBase>) c -> new ButtonBehavior((ButtonBase) c));
+        specialBehaviorMap.put(ComboBox.class, (Function<Control, BehaviorBase>) c -> new ComboBoxListViewBehavior((ComboBox) c));
+        specialBehaviorMap.put(Hyperlink.class, (Function<Control, BehaviorBase>) c -> new ButtonBehavior((ButtonBase) c));
+        specialBehaviorMap.put(RadioButton.class, (Function<Control, BehaviorBase>) c -> new ToggleButtonBehavior((ToggleButton) c));
+        specialBehaviorMap.put(ToggleButton.class, (Function<Control, BehaviorBase>) c -> new ToggleButtonBehavior((ToggleButton) c));
+    }
+
+    // list of control classes that have no behavior
+    static List<Class<? extends Control>> withoutBehaviors = List.of(
+            ButtonBar.class,
+            Label.class,
+            MenuBar.class,
+            ProgressBar.class,
+            ProgressIndicator.class,
+            Separator.class,
+            SplitPane.class
+            );
+
+///---------------- misc
+
+    /**
+     * Tries to let the weakRef be gc'ed.
+     * @param weakRef the weakRef to be gc'ed
+     */
+    public static void attemptGC(WeakReference<?> weakRef) {
+        for (int i = 0; i < 10; i++) {
+            System.gc();
+            System.runFinalization();
+
+            if (weakRef.get() == null) {
+                break;
+            }
+            try {
+                Thread.sleep(50);
+            } catch (InterruptedException e) {
+                fail("InterruptedException occurred during Thread.sleep()");
+            }
+        }
+    }
+
+    /**
+     * Nasty hack to keep JUnit pre-4.12 happy.
+     * Before 4.12, Parameterized can only handle
+     * a collection of arrays.
+     *
+     * @param data the list of data
+     * @return the list of the data converted to one-dimensional arrays
+     */
+    public static List<Object[]> asArrays(List<?> data) {
+        List<Object[]> result =  (List) data.stream()
+                .map(d -> new Object[] {d, })
+                .collect(toList());
+        return result;
+    }
+
+  //------------- skin support
+    /**
+     * Creates and sets an alternative skin for the given control.
+     *
+     * @param <T> the type of the control
+     * @param control the control to set the alternative skin to
+     * @return the old skin of the control.
+     */
+    public static <T extends Control> Skin<?> replaceSkin(T control) {
+        Skin<?> old = control.getSkin();
+        control.setSkin(createAlternativeSkin(control));
+        return old;
+    }
+
+    /**
+     * Creates and returns an alternative skin for the given control.
+     * This implementation uses the alternativeSkinsMap to lookup the
+     * class for the alternative skin and instantiates it.
+     *
+     * @param <T> the type of the control
+     * @param control the control to create an alternative skin for
+     * @return the alternative skin for the control
+     * @throws RuntimeException with the exception thrown thrown when instantiating the skin
+     */
+    public static <T extends Control> Skin<?> createAlternativeSkin(T control) {
+        Class<?> controlClass = control.getClass();
+        try {
+            Class<?> skinClass =
+                alternativeSkinClassMap.get(controlClass);
+             return  (Skin<?>) skinClass.getDeclaredConstructor(controlClass).newInstance(control);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    // map for alternative skins
+    static Map<Class<?>, Class<?>> alternativeSkinClassMap = new HashMap<>();
+
+    // filling the map .. could do without and create the alternative
+    // skin classes by naming convention
+    static {
+        alternativeSkinClassMap.put(Accordion.class, AccordionSkin1.class);
+        alternativeSkinClassMap.put(Button.class, ButtonSkin1.class);
+        alternativeSkinClassMap.put(ButtonBar.class, ButtonBarSkin1.class);
+        alternativeSkinClassMap.put(CheckBox.class, CheckBoxSkin1.class);
+        alternativeSkinClassMap.put(ChoiceBox.class, ChoiceBoxSkin1.class);
+        alternativeSkinClassMap.put(ColorPicker.class, ColorPickerSkin1.class);
+        alternativeSkinClassMap.put(ComboBox.class, ComboBoxSkin1.class);
+        alternativeSkinClassMap.put(DateCell.class, DateCellSkin1.class);
+        alternativeSkinClassMap.put(DatePicker.class, DatePickerSkin1.class);
+        alternativeSkinClassMap.put(Hyperlink.class, HyperlinkSkin1.class);
+        alternativeSkinClassMap.put(Label.class, LabelSkin1.class);
+        alternativeSkinClassMap.put(ListCell.class, ListCellSkin1.class);
+        alternativeSkinClassMap.put(ListView.class, ListViewSkin1.class);
+        alternativeSkinClassMap.put(MenuBar.class, MenuBarSkin1.class);
+        alternativeSkinClassMap.put(MenuButton.class, MenuButtonSkin1.class);
+        alternativeSkinClassMap.put(Pagination.class, PaginationSkin1.class);
+        alternativeSkinClassMap.put(PasswordField.class, PasswordFieldSkin1.class);
+        alternativeSkinClassMap.put(ProgressBar.class, ProgressBarSkin1.class);
+        alternativeSkinClassMap.put(ProgressIndicator.class, ProgressIndicatorSkin1.class);
+        alternativeSkinClassMap.put(RadioButton.class, RadioButtonSkin1.class);
+        alternativeSkinClassMap.put(ScrollBar.class, ScrollBarSkin1.class);
+        alternativeSkinClassMap.put(ScrollPane.class, ScrollPaneSkin1.class);
+        alternativeSkinClassMap.put(Separator.class, SeparatorSkin1.class);
+        alternativeSkinClassMap.put(Slider.class, SliderSkin1.class);
+        alternativeSkinClassMap.put(Spinner.class, SpinnerSkin1.class);
+        alternativeSkinClassMap.put(SplitMenuButton.class, SplitMenuButtonSkin1.class);
+        alternativeSkinClassMap.put(SplitPane.class, SplitPaneSkin1.class);
+        alternativeSkinClassMap.put(TableCell.class, TableCellSkin1.class);
+        alternativeSkinClassMap.put(TableRow.class, TableRowSkin1.class);
+        alternativeSkinClassMap.put(TableView.class, TableViewSkin1.class);
+        alternativeSkinClassMap.put(TabPane.class, TabPaneSkin1.class);
+        alternativeSkinClassMap.put(TextArea.class, TextAreaSkin1.class);
+        alternativeSkinClassMap.put(TextField.class, TextFieldSkin1.class);
+        alternativeSkinClassMap.put(TitledPane.class, TitledPaneSkin1.class);
+        alternativeSkinClassMap.put(ToggleButton.class, ToggleButtonSkin1.class);
+        alternativeSkinClassMap.put(ToolBar.class, ToolBarSkin1.class);
+        alternativeSkinClassMap.put(TreeCell.class, TreeCellSkin1.class);
+        alternativeSkinClassMap.put(TreeTableCell.class, TreeTableCellSkin1.class);
+        alternativeSkinClassMap.put(TreeTableRow.class, TreeTableRowSkin1.class);
+        alternativeSkinClassMap.put(TreeTableView.class, TreeTableViewSkin1.class);
+        alternativeSkinClassMap.put(TreeView.class, TreeViewSkin1.class);
+    }
+
+//----------------- alternative skins for all controls
+
+    public static class AccordionSkin1 extends AccordionSkin {
+
+        public AccordionSkin1(Accordion control) {
+            super(control);
+        }
+
+    }
+    public static class ButtonSkin1 extends ButtonSkin {
+
+        public ButtonSkin1(Button control) {
+            super(control);
+        }
+
+    }
+
+    public static class ButtonBarSkin1 extends ButtonBarSkin {
+
+        public ButtonBarSkin1(ButtonBar control) {
+            super(control);
+        }
+
+    }
+
+    public static class CheckBoxSkin1 extends CheckBoxSkin {
+
+        public CheckBoxSkin1(CheckBox control) {
+            super(control);
+        }
+
+    }
+    public static class ChoiceBoxSkin1 extends ChoiceBoxSkin {
+
+        public ChoiceBoxSkin1(ChoiceBox control) {
+            super(control);
+        }
+
+    }
+
+    public static class ColorPickerSkin1 extends ColorPickerSkin {
+
+        public ColorPickerSkin1(ColorPicker control) {
+            super(control);
+        }
+
+    }
+
+    public static class ComboBoxSkin1 extends ComboBoxListViewSkin {
+
+        public ComboBoxSkin1(ComboBox control) {
+            super(control);
+        }
+
+    }
+
+    public static class DateCellSkin1 extends DateCellSkin {
+
+        public DateCellSkin1(DateCell control) {
+            super(control);
+        }
+
+    }
+
+    public static class DatePickerSkin1 extends DatePickerSkin {
+
+        public DatePickerSkin1(DatePicker control) {
+            super(control);
+        }
+
+    }
+
+    public static class HyperlinkSkin1 extends HyperlinkSkin {
+
+        public HyperlinkSkin1(Hyperlink control) {
+            super(control);
+        }
+
+    }
+
+    public static class LabelSkin1 extends LabelSkin {
+
+        public LabelSkin1(Label control) {
+            super(control);
+        }
+
+    }
+
+    public static class ListCellSkin1 extends ListCellSkin {
+
+        public ListCellSkin1(ListCell control) {
+            super(control);
+        }
+
+    }
+
+    public static class ListViewSkin1 extends ListViewSkin {
+
+        public ListViewSkin1(ListView control) {
+            super(control);
+        }
+
+    }
+
+    public static class MenuBarSkin1 extends MenuBarSkin {
+
+        public MenuBarSkin1(MenuBar control) {
+            super(control);
+        }
+
+    }
+
+    public static class MenuButtonSkin1 extends MenuButtonSkin {
+
+        public MenuButtonSkin1(MenuButton control) {
+            super(control);
+        }
+
+    }
+
+    public static class PaginationSkin1 extends PaginationSkin {
+
+        public PaginationSkin1(Pagination control) {
+            super(control);
+        }
+
+    }
+
+    public static class PasswordFieldSkin1 extends TextFieldSkin {
+
+        public PasswordFieldSkin1(PasswordField control) {
+            super(control);
+        }
+
+    }
+
+    public static class ProgressBarSkin1 extends ProgressBarSkin {
+
+        public ProgressBarSkin1(ProgressBar control) {
+            super(control);
+        }
+
+    }
+
+    public static class ProgressIndicatorSkin1 extends ProgressIndicatorSkin {
+
+        public ProgressIndicatorSkin1(ProgressIndicator control) {
+            super(control);
+        }
+
+    }
+
+    public static class RadioButtonSkin1 extends RadioButtonSkin {
+
+        public RadioButtonSkin1(RadioButton control) {
+            super(control);
+        }
+
+    }
+
+    public static class ScrollBarSkin1 extends ScrollBarSkin {
+
+        public ScrollBarSkin1(ScrollBar control) {
+            super(control);
+        }
+
+    }
+
+    public static class ScrollPaneSkin1 extends ScrollPaneSkin {
+
+        public ScrollPaneSkin1(ScrollPane control) {
+            super(control);
+        }
+
+    }
+
+    public static class SeparatorSkin1 extends SeparatorSkin {
+
+        public SeparatorSkin1(Separator control) {
+            super(control);
+        }
+
+    }
+
+    public static class SliderSkin1 extends SliderSkin {
+
+        public SliderSkin1(Slider control) {
+            super(control);
+        }
+
+    }
+
+    public static class SpinnerSkin1 extends SpinnerSkin {
+
+        public SpinnerSkin1(Spinner control) {
+            super(control);
+        }
+
+    }
+
+    public static class SplitMenuButtonSkin1 extends SplitMenuButtonSkin {
+
+        public SplitMenuButtonSkin1(SplitMenuButton control) {
+            super(control);
+        }
+
+    }
+
+    public static class SplitPaneSkin1 extends SplitPaneSkin {
+
+        public SplitPaneSkin1(SplitPane control) {
+            super(control);
+        }
+
+    }
+
+    public static class TableCellSkin1 extends TableCellSkin {
+
+        public TableCellSkin1(TableCell control) {
+            super(control);
+        }
+
+    }
+
+    public static class TableRowSkin1 extends TableRowSkin {
+
+        public TableRowSkin1(TableRow control) {
+            super(control);
+        }
+
+    }
+
+    public static class TableViewSkin1 extends TableViewSkin {
+
+        public TableViewSkin1(TableView control) {
+            super(control);
+        }
+
+    }
+
+    public static class TabPaneSkin1 extends TabPaneSkin {
+
+        public TabPaneSkin1(TabPane control) {
+            super(control);
+        }
+
+    }
+
+    public static class TextAreaSkin1 extends TextAreaSkin {
+
+        public TextAreaSkin1(TextArea control) {
+            super(control);
+        }
+
+    }
+
+    public static class TextFieldSkin1 extends TextFieldSkin {
+
+        public TextFieldSkin1(TextField control) {
+            super(control);
+        }
+
+    }
+
+    public static class TitledPaneSkin1 extends TitledPaneSkin {
+
+        public TitledPaneSkin1(TitledPane control) {
+            super(control);
+        }
+
+    }
+
+    public static class ToggleButtonSkin1 extends ToggleButtonSkin {
+
+        public ToggleButtonSkin1(ToggleButton control) {
+            super(control);
+        }
+
+    }
+
+    public static class ToolBarSkin1 extends ToolBarSkin {
+
+        public ToolBarSkin1(ToolBar control) {
+            super(control);
+        }
+
+    }
+
+    public static class TreeCellSkin1 extends TreeCellSkin {
+
+        public TreeCellSkin1(TreeCell control) {
+            super(control);
+        }
+
+    }
+
+    public static class TreeTableCellSkin1 extends TreeTableCellSkin {
+
+        public TreeTableCellSkin1(TreeTableCell control) {
+            super(control);
+        }
+
+    }
+
+    public static class TreeTableRowSkin1 extends TreeTableRowSkin {
+
+        public TreeTableRowSkin1(TreeTableRow control) {
+            super(control);
+        }
+
+    }
+
+    public static class TreeTableViewSkin1<T> extends TreeTableViewSkin<T> {
+
+        public TreeTableViewSkin1(TreeTableView<T> control) {
+            super(control);
+        }
+
+    }
+
+    public static class TreeViewSkin1<T> extends TreeViewSkin<T> {
+
+        public TreeViewSkin1(TreeView<T> control) {
+            super(control);
+        }
+
+    }
+
+    // all control classes in package controls
+    // can be c&p'ed into parameterized test
+    static Object[][] controlClasses = new Object[][] {
+        {Accordion.class, },
+        {Button.class, },
+        {ButtonBar.class, }, // no behavior
+        {CheckBox.class, }, // ButtonBehavior
+        {ChoiceBox.class, },
+        {ColorPicker.class, },
+        {ComboBox.class, }, // ComboBoxListViewBehavior
+        {DateCell.class, },
+        {DatePicker.class, },
+        {Hyperlink.class, }, // ButtonBehavior
+        {Label.class, },    // no behavior
+        {ListCell.class, },
+        {ListView.class, },
+        {MenuBar.class, },  // no behavior
+        {MenuButton.class, },
+        {Pagination.class, },
+        {PasswordField.class, },
+        {ProgressBar.class, },  // no behavior
+        {ProgressIndicator.class, }, // no behavior
+        {RadioButton.class, }, // ToggleButtonBehavior
+        {ScrollBar.class, },
+        {ScrollPane.class, },
+        {Separator.class, }, // no behavior
+        {Slider.class, },
+        {Spinner.class, },
+        {SplitMenuButton.class, },
+        {SplitPane.class, }, // no behavior
+        {TableCell.class, },
+        {TableRow.class, },
+        {TableView.class, },
+        {TabPane.class, },
+        {TextArea.class, },
+        {TextField.class, },
+        {TitledPane.class, },
+        {ToggleButton.class, },
+        {ToolBar.class, },
+        {TreeCell.class, },
+        {TreeTableCell.class, },
+        {TreeTableRow.class, },
+        {TreeTableView.class, },
+        {TreeView.class, },
+        };
+
+    private ControlSkinFactory() {}
+}
diff a/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/infrastructure/ControlSkinFactoryTest.java b/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/infrastructure/ControlSkinFactoryTest.java
--- /dev/null
+++ b/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/infrastructure/ControlSkinFactoryTest.java
@@ -0,0 +1,116 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.com.sun.javafx.scene.control.infrastructure;
+
+import java.util.List;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;
+
+import javafx.scene.control.Control;
+import javafx.scene.control.ControlShim;
+import javafx.scene.control.Skin;
+
+/**
+ * Tests on ControlSkinFactory.
+ */
+public class ControlSkinFactoryTest {
+
+    @Test
+    public void testConvertToArray() {
+        List<Class<Control>> controls = getControlClasses();
+        List<Object[]> asArray = asArrays(controls);
+        for (int i = 0; i < controls.size(); i++) {
+            assertEquals(1, asArray.get(i).length);
+            assertSame(controls.get(i), asArray.get(i)[0]);
+        }
+    }
+
+    @Test
+    public void testControlClassesWithBehavior() {
+        List<Class<Control>> controls = getControlClassesWithBehavior();
+        assertEquals(controlClasses.length - withoutBehaviors.size(), controls.size());
+        for (Class<Control> class1 : controls) {
+            Control control = createControl(class1);
+            ControlShim.installDefaultSkin(control);
+            getBehavior(control.getSkin());
+            createBehavior(control);
+        }
+    }
+
+    @Test
+    public void testGetControls() {
+        List<Control> controls = getControls();
+        assertEquals(controlClasses.length, controls.size());
+        for (int i = 0; i < controlClasses.length; i++) {
+            Class<Control> controlClass = (Class<Control>) controlClasses[i][0];
+            assertSame(controlClass, controls.get(i).getClass());
+        }
+    }
+
+    @Test
+    public void testGetControlClasses() {
+        List<Class<Control>> controls = getControlClasses();
+        assertEquals(controlClasses.length, controls.size());
+        for (int i = 0; i < controlClasses.length; i++) {
+            Class<Control> controlClass = (Class<Control>) controlClasses[i][0];
+            assertSame(controlClass, controls.get(i));
+        }
+    }
+
+    @Test
+    public void testAlternativeSkinAssignable() {
+        for (int i = 0; i < controlClasses.length; i++) {
+            Class<Control> controlClass = (Class<Control>) controlClasses[i][0];
+            Control control = createControl(controlClass);
+            Skin<?> old = replaceSkin(control);
+            assertNotNull(control.getSkin());
+            assertNotSame(old, control.getSkin());
+        }
+    }
+
+    @Test
+    public void testControlInstantiatable() {
+        for (int i = 0; i < controlClasses.length; i++) {
+            Class<Control> controlClass = (Class<Control>) controlClasses[i][0];
+            Control control = createControl(controlClass);
+            assertSame(controlClass, control.getClass());
+        }
+    }
+
+    @Test
+    public void testControlsAndSkin() {
+        assertEquals(alternativeSkinClassMap.size(), controlClasses.length);
+        // every control class has an entry
+        for (int i = 0; i < controlClasses.length; i++) {
+            Class<Control> controlClass = (Class<Control>) controlClasses[i][0];
+            assertTrue(alternativeSkinClassMap.containsKey(controlClass));
+        }
+
+    }
+}
diff a/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/infrastructure/ControlSkinTestExample.java b/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/infrastructure/ControlSkinTestExample.java
--- /dev/null
+++ b/modules/javafx.controls/src/test/java/test/com/sun/javafx/scene/control/infrastructure/ControlSkinTestExample.java
@@ -0,0 +1,112 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.com.sun.javafx.scene.control.infrastructure;
+
+import java.lang.ref.WeakReference;
+import java.util.Collection;
+import java.util.List;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import static javafx.scene.control.ControlShim.*;
+import static org.junit.Assert.*;
+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;
+
+import javafx.scene.control.Button;
+import javafx.scene.control.Control;
+import javafx.scene.control.Label;
+import javafx.scene.shape.Rectangle;
+
+/**
+ * Example of writing a test for a streak of similar issues,
+ * adding controls instantiated by constructors with parameters.
+ *
+ * Note that LabelSkin without graphic passes the test, while
+ * one with graphic fails.
+ */
+@RunWith(Parameterized.class)
+public class ControlSkinTestExample {
+
+    private Control control;
+
+//--------- tests
+
+    /**
+     * default skin -> set alternative
+     */
+    @Test
+    public void testMemoryLeakAlternativeSkin() {
+        installDefaultSkin(control);
+        WeakReference<?> weakRef = new WeakReference<>(replaceSkin(control));
+        assertNotNull(weakRef.get());
+        attemptGC(weakRef);
+        assertEquals("Skin must be gc'ed", null, weakRef.get());
+    }
+
+//------------ parameters
+
+    // Note: name property not supported before junit 4.11
+    @Parameterized.Parameters //(name = "{index}: {0} ")
+    public static Collection<Object[]> data() {
+        List<Control> controls = getControls();
+        // add controls that are leaking in some configurations
+        List<Control> addedControls = List.of(
+                new Label("", new Rectangle())
+                , new Button("", new Rectangle())
+                );
+        controls.addAll(addedControls);
+        return asArrays(controls);
+    }
+
+    public ControlSkinTestExample(Control control) {
+        this.control = control;
+    }
+
+//------------ setup
+
+    @Before
+    public void setup() {
+        assertNotNull(control);
+
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+    }
+
+    @After
+    public void cleanup() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
+    }
+
+}
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinDisposeContractTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinDisposeContractTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinDisposeContractTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinDisposeContractTest.java
@@ -23,62 +23,24 @@
  * questions.
  */
 
 package test.javafx.scene.control.skin;
 
-import java.util.Arrays;
 import java.util.Collection;
+import java.util.List;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
 import static javafx.scene.control.ControlShim.*;
+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;
 
-import javafx.scene.control.Accordion;
-import javafx.scene.control.Button;
-import javafx.scene.control.ButtonBar;
-import javafx.scene.control.CheckBox;
-import javafx.scene.control.ChoiceBox;
-import javafx.scene.control.ColorPicker;
-import javafx.scene.control.ComboBox;
 import javafx.scene.control.Control;
-import javafx.scene.control.DateCell;
-import javafx.scene.control.DatePicker;
-import javafx.scene.control.Hyperlink;
-import javafx.scene.control.Label;
-import javafx.scene.control.ListCell;
-import javafx.scene.control.ListView;
-import javafx.scene.control.MenuBar;
-import javafx.scene.control.MenuButton;
-import javafx.scene.control.Pagination;
-import javafx.scene.control.PasswordField;
-import javafx.scene.control.ProgressBar;
-import javafx.scene.control.ProgressIndicator;
-import javafx.scene.control.RadioButton;
-import javafx.scene.control.ScrollBar;
-import javafx.scene.control.ScrollPane;
-import javafx.scene.control.Separator;
-import javafx.scene.control.Slider;
-import javafx.scene.control.Spinner;
-import javafx.scene.control.SplitMenuButton;
-import javafx.scene.control.SplitPane;
-import javafx.scene.control.TabPane;
-import javafx.scene.control.TableCell;
-import javafx.scene.control.TableRow;
-import javafx.scene.control.TableView;
-import javafx.scene.control.TextField;
-import javafx.scene.control.TitledPane;
-import javafx.scene.control.ToggleButton;
-import javafx.scene.control.ToolBar;
-import javafx.scene.control.TreeCell;
-import javafx.scene.control.TreeTableCell;
-import javafx.scene.control.TreeTableRow;
-import javafx.scene.control.TreeTableView;
-import javafx.scene.control.TreeView;
+import javafx.scene.control.TextArea;
 
 /**
  * Test for https://bugs.openjdk.java.net/browse/JDK-8244112:
  * skin must not blow if dispose is called more than once.
  * <p>
@@ -108,59 +70,17 @@
     }
 
   //---------------- parameterized
 
     // Note: name property not supported before junit 4.11
+    // Note: collection of single values supported since 4.12
     @Parameterized.Parameters //(name = "{index}: {0} ")
     public static Collection<Object[]> data() {
-        // class of control to test
-        // commented controls have different issues as described in the referenced issues
-        Object[][] data = new Object[][] {
-            {Accordion.class, },
-            {Button.class, },
-            {ButtonBar.class, },
-            {CheckBox.class, },
-            {ChoiceBox.class, },
-            {ColorPicker.class, },
-            {ComboBox.class, },
-            {DateCell.class, },
-            {DatePicker.class, },
-            {Hyperlink.class, },
-            {Label.class, },
-            {ListCell.class, },
-            {ListView.class, },
-            {MenuBar.class, },
-            {MenuButton.class, },
-            {Pagination.class, },
-            {PasswordField.class, },
-            {ProgressBar.class, },
-            {ProgressIndicator.class, },
-            {RadioButton.class, },
-            {ScrollBar.class, },
-            {ScrollPane.class, },
-            {Separator.class, },
-            {Slider.class, },
-            {Spinner.class, },
-            {SplitMenuButton.class, },
-            {SplitPane.class, },
-            {TableCell.class, },
-            {TableRow.class, },
-            {TableView.class, },
-            {TabPane.class, },
-            // @Ignore("8244419")
-            // {TextArea.class, },
-            {TextField.class, },
-            {TitledPane.class, },
-            {ToggleButton.class, },
-            {ToolBar.class, },
-            {TreeCell.class, },
-            {TreeTableCell.class, },
-            {TreeTableRow.class, },
-            {TreeTableView.class, },
-            {TreeView.class, },
-        };
-        return Arrays.asList(data);
+        List<Class<Control>> controlClasses = getControlClasses();
+        // @Ignore("8244419")
+        controlClasses.remove(TextArea.class);
+        return asArrays(controlClasses);
     }
 
     public SkinDisposeContractTest(Class<Control> controlClass) {
         this.controlClass = controlClass;
     }
@@ -182,20 +102,6 @@
             }
         });
         control = createControl(controlClass);
     }
 
-    /**
-     * Creates and returns an instance of the given control class.
-     * @param <T> the type of the control
-     * @param controlClass
-     * @return an instance of the class
-     */
-    public static <T extends Control> T createControl(Class<T> controlClass) {
-        try {
-            return controlClass.getDeclaredConstructor().newInstance();
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-
 }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinMemoryLeakTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinMemoryLeakTest.java
--- /dev/null
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinMemoryLeakTest.java
@@ -0,0 +1,173 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.javafx.scene.control.skin;
+
+import java.lang.ref.WeakReference;
+import java.util.Collection;
+import java.util.List;
+import java.util.stream.Collectors;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import static javafx.scene.control.ControlShim.*;
+import static org.junit.Assert.*;
+import static test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory.*;
+
+import javafx.scene.control.Accordion;
+import javafx.scene.control.ButtonBar;
+import javafx.scene.control.ChoiceBox;
+import javafx.scene.control.ColorPicker;
+import javafx.scene.control.ComboBox;
+import javafx.scene.control.Control;
+import javafx.scene.control.DatePicker;
+import javafx.scene.control.ListCell;
+import javafx.scene.control.ListView;
+import javafx.scene.control.MenuBar;
+import javafx.scene.control.MenuButton;
+import javafx.scene.control.Pagination;
+import javafx.scene.control.PasswordField;
+import javafx.scene.control.ScrollBar;
+import javafx.scene.control.ScrollPane;
+import javafx.scene.control.Spinner;
+import javafx.scene.control.SplitMenuButton;
+import javafx.scene.control.SplitPane;
+import javafx.scene.control.TabPane;
+import javafx.scene.control.TableRow;
+import javafx.scene.control.TableView;
+import javafx.scene.control.TextArea;
+import javafx.scene.control.TextField;
+import javafx.scene.control.ToolBar;
+import javafx.scene.control.TreeCell;
+import javafx.scene.control.TreeTableRow;
+import javafx.scene.control.TreeTableView;
+import javafx.scene.control.TreeView;
+import test.com.sun.javafx.scene.control.infrastructure.ControlSkinFactory;
+
+/**
+ * Test memory leaks in Skin implementations.
+ * <p>
+ * This test is parameterized on control type.
+ */
+@RunWith(Parameterized.class)
+public class SkinMemoryLeakTest {
+
+    private Control control;
+
+//--------- tests
+
+    /**
+     * default skin -> set alternative
+     */
+    @Test
+    public void testMemoryLeakAlternativeSkin() {
+        installDefaultSkin(control);
+        WeakReference<?> weakRef = new WeakReference<>(replaceSkin(control));
+        assertNotNull(weakRef.get());
+        attemptGC(weakRef);
+        assertEquals("Skin must be gc'ed", null, weakRef.get());
+    }
+
+//------------ parameters
+
+    // Note: name property not supported before junit 4.11
+    @Parameterized.Parameters //(name = "{index}: {0} ")
+    public static Collection<Object[]> data() {
+        List<Class<Control>> controlClasses = getControlClasses();
+        // FIXME as part of JDK-8241364
+        // The default skins of these controls are leaking
+        // step 1: file issues (where not yet done), add informal ignore to entry
+        // step 2: fix and remove from list
+        List<Class<? extends Control>> leakingClasses = List.of(
+                Accordion.class,
+                ButtonBar.class,
+                // @Ignore("8244657")
+                ChoiceBox.class,
+                ColorPicker.class,
+                ComboBox.class,
+                DatePicker.class,
+                ListCell.class,
+                ListView.class,
+                MenuBar.class,
+                MenuButton.class,
+                Pagination.class,
+                PasswordField.class,
+                ScrollBar.class,
+                ScrollPane.class,
+                // @Ignore("8245145")
+                Spinner.class,
+                SplitMenuButton.class,
+                SplitPane.class,
+                TableRow.class,
+                TableView.class,
+                // @Ignore("8242621")
+                TabPane.class,
+                // @Ignore("8244419")
+                TextArea.class,
+                // @Ignore("8240506")
+                TextField.class,
+                ToolBar.class,
+                TreeCell.class,
+                TreeTableRow.class,
+                TreeTableView.class,
+                TreeView.class
+        );
+        // remove the known issues to make the test pass
+        controlClasses.removeAll(leakingClasses);
+        // instantiate controls
+        List<Control> controls = controlClasses.stream()
+                .map(ControlSkinFactory::createControl)
+                .collect(Collectors.toList());
+        return asArrays(controls);
+    }
+
+    public SkinMemoryLeakTest(Control control) {
+        this.control = control;
+    }
+
+//------------ setup
+
+    @Before
+    public void setup() {
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+        assertNotNull(control);
+    }
+
+    @After
+    public void cleanup() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
+    }
+
+}
