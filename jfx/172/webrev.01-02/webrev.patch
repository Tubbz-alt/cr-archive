diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/BehaviorBase.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/BehaviorBase.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/BehaviorBase.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/BehaviorBase.java
@@ -86,11 +86,11 @@
         // make a copy of the existing mappings, so we only check against those
         List<Mapping<?>> existingMappings = new ArrayList<>(inputMap.getMappings());
 
         for (Mapping<?> mapping : newMapping) {
             // check if a mapping already exists, and if so, do not add this mapping
-            // TODO this is insufficient as we need to check entire InputMap hierarchy
+            // TODO: JDK-8250807: this is insufficient as we need to check entire InputMap hierarchy
 //            for (Mapping<?> existingMapping : existingMappings) {
 //                if (existingMapping != null && existingMapping.equals(mapping)) {
 //                    return;
 //                }
 //            }
@@ -114,10 +114,11 @@
 //                new InputMap<>(node);
         return new InputMap<>(node);
     }
 
     protected void removeMapping(Object key) {
+        // TODO: JDK-8250807: Traverse the child maps of getInputMap() and remove the mapping from them.
         InputMap<?> inputMap = getInputMap();
         inputMap.lookupMapping(key).ifPresent(mapping -> {
             inputMap.getMappings().remove(mapping);
             installedDefaultMappings.remove(mapping);
         });
diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/FocusTraversalInputMap.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/FocusTraversalInputMap.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/FocusTraversalInputMap.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/FocusTraversalInputMap.java
@@ -43,47 +43,34 @@
 import static javafx.scene.input.KeyCode.UP;
 
 public class FocusTraversalInputMap<N extends Node> {
 
     private static final List<InputMap.Mapping<?>> mappings = new ArrayList<>();
-    private static final List<InputMap.Mapping<?>> arrowKeyMappings = new ArrayList<>();
-    private static final List<InputMap.Mapping<?>> modifierArrowKeyMappings = new ArrayList<>();
     static {
-        arrowKeyMappings.add(new KeyMapping(UP, e -> traverseUp(e)));
-        arrowKeyMappings.add(new KeyMapping(DOWN, e -> traverseDown(e)));
-        arrowKeyMappings.add(new KeyMapping(LEFT, e -> traverseLeft(e)));
-        arrowKeyMappings.add(new KeyMapping(RIGHT, e -> traverseRight(e)));
+        mappings.add(new KeyMapping(UP, e -> traverseUp(e)));
+        mappings.add(new KeyMapping(DOWN, e -> traverseDown(e)));
+        mappings.add(new KeyMapping(LEFT, e -> traverseLeft(e)));
+        mappings.add(new KeyMapping(RIGHT, e -> traverseRight(e)));
+        mappings.add(new KeyMapping(TAB, e -> traverseNext(e)));
+        mappings.add(new KeyMapping(new KeyBinding(TAB).shift(), e -> traversePrevious(e)));
 
-        modifierArrowKeyMappings.add(new KeyMapping(TAB, e -> traverseNext(e)));
-        modifierArrowKeyMappings.add(new KeyMapping(new KeyBinding(TAB).shift(), e -> traversePrevious(e)));
-        modifierArrowKeyMappings.add(new KeyMapping(new KeyBinding(UP).shift().alt().ctrl(), e -> traverseUp(e)));
-        modifierArrowKeyMappings.add(new KeyMapping(new KeyBinding(DOWN).shift().alt().ctrl(), e -> traverseDown(e)));
-        modifierArrowKeyMappings.add(new KeyMapping(new KeyBinding(LEFT).shift().alt().ctrl(), e -> traverseLeft(e)));
-        modifierArrowKeyMappings.add(new KeyMapping(new KeyBinding(RIGHT).shift().alt().ctrl(), e -> traverseRight(e)));
-        modifierArrowKeyMappings.add(new KeyMapping(new KeyBinding(TAB).shift().alt().ctrl(), e -> traverseNext(e)));
-        modifierArrowKeyMappings.add(new KeyMapping(new KeyBinding(TAB).alt().ctrl(), e -> traversePrevious(e)));
-
-        mappings.addAll(arrowKeyMappings);
-        mappings.addAll(modifierArrowKeyMappings);
+        mappings.add(new KeyMapping(new KeyBinding(UP).shift().alt().ctrl(), e -> traverseUp(e)));
+        mappings.add(new KeyMapping(new KeyBinding(DOWN).shift().alt().ctrl(), e -> traverseDown(e)));
+        mappings.add(new KeyMapping(new KeyBinding(LEFT).shift().alt().ctrl(), e -> traverseLeft(e)));
+        mappings.add(new KeyMapping(new KeyBinding(RIGHT).shift().alt().ctrl(), e -> traverseRight(e)));
+        mappings.add(new KeyMapping(new KeyBinding(TAB).shift().alt().ctrl(), e -> traverseNext(e)));
+        mappings.add(new KeyMapping(new KeyBinding(TAB).alt().ctrl(), e -> traversePrevious(e)));
     }
 
     private FocusTraversalInputMap() {
         // no-op, just forcing use of static method
     }
 
     public static InputMap.Mapping<?>[] getFocusTraversalMappings() {
         return mappings.toArray(new InputMap.Mapping[mappings.size()]);
     }
 
-    public static InputMap.Mapping<?>[] getArrowKeyMappings() {
-        return arrowKeyMappings.toArray(new InputMap.Mapping[arrowKeyMappings.size()]);
-    }
-
-    public static InputMap.Mapping<?>[] getModifierArrowKeyMappings() {
-        return modifierArrowKeyMappings.toArray(new InputMap.Mapping[modifierArrowKeyMappings.size()]);
-    }
-
     public static <N extends Node> InputMap<N> createInputMap(N node) {
         InputMap<N> inputMap = new InputMap<>(node);
         inputMap.getMappings().addAll(getFocusTraversalMappings());
         return inputMap;
     }
diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ListViewBehavior.java
@@ -76,11 +76,11 @@
 
         // create a map for listView-specific mappings
         listViewInputMap = createInputMap();
 
         // add focus traversal mappings
-        addDefaultMapping(listViewInputMap, FocusTraversalInputMap.getModifierArrowKeyMappings());
+        addDefaultMapping(listViewInputMap, FocusTraversalInputMap.getFocusTraversalMappings());
         addDefaultMapping(listViewInputMap,
             new KeyMapping(HOME, e -> selectFirstRow()),
             new KeyMapping(END, e -> selectLastRow()),
             new KeyMapping(new KeyBinding(HOME).shift(), e -> selectAllToFirstRow()),
             new KeyMapping(new KeyBinding(END).shift(), e -> selectAllToLastRow()),
@@ -96,10 +96,11 @@
             new KeyMapping(ENTER, e -> activate()),
             new KeyMapping(SPACE, e -> activate()),
             new KeyMapping(F2, e -> activate()),
             new KeyMapping(ESCAPE, e -> cancelEdit()),
 
+            new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll()),
             new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow()),
             new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow()),
             new KeyMapping(new KeyBinding(PAGE_UP).shortcut(), e -> focusPageUp()),
             new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut(), e -> focusPageDown()),
 
@@ -194,16 +195,27 @@
         if (Utils.isTwoLevelFocus()) {
             tlFocus = new TwoLevelFocusListBehavior(control); // needs to be last.
         }
     }
 
-    public void updateSelectionModeKeyMapping(SelectionMode selectionMode) {
-        if (selectionMode.equals(SelectionMode.SINGLE)) {
-            removeMapping(new KeyBinding(A).shortcut());
-        } else {
-            addDefaultMapping(listViewInputMap, new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll()));
-        }
+    public void removeKeyMappingsForComboBoxEditor() {
+        removeMapping(new KeyBinding(LEFT));
+        removeMapping(new KeyBinding(KP_LEFT));
+        removeMapping(new KeyBinding(RIGHT));
+        removeMapping(new KeyBinding(KP_RIGHT));
+        removeMapping(new KeyBinding(HOME));
+        removeMapping(new KeyBinding(HOME).shift());
+        removeMapping(new KeyBinding(HOME).shortcut());
+        removeMapping(new KeyBinding(END));
+        removeMapping(new KeyBinding(END).shift());
+        removeMapping(new KeyBinding(END).shortcut());
+        removeMapping(new KeyBinding(A).shortcut());
+        /*
+        Should be uncommented after the removeMapping() issue JBS-8250807 is fixed.
+        removeMapping(new KeyBinding(HOME).shortcut().shift());
+        removeMapping(new KeyBinding(END).shortcut().shift());
+        */
     }
 
 
     /***************************************************************************
      *                                                                         *
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ComboBoxListViewSkin.java
@@ -502,10 +502,11 @@
     private ListView<T> createListView() {
         final ListView<T> _listView = new ListView<T>() {
 
             {
                 getProperties().put("selectFirstRowByDefault", false);
+                getProperties().put("removeKeyMappingsForComboBoxEditor", true);
             }
 
             @Override protected double computeMinHeight(double width) {
                 return 30;
             }
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListViewSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListViewSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListViewSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListViewSkin.java
@@ -29,12 +29,10 @@
 import java.util.List;
 
 import com.sun.javafx.scene.control.Properties;
 import javafx.beans.InvalidationListener;
 import javafx.beans.WeakInvalidationListener;
-import javafx.beans.value.ChangeListener;
-import javafx.beans.value.WeakChangeListener;
 import javafx.collections.FXCollections;
 import javafx.collections.ListChangeListener;
 import javafx.collections.MapChangeListener;
 import javafx.collections.ObservableList;
 import javafx.collections.ObservableMap;
@@ -50,11 +48,10 @@
 import javafx.scene.control.IndexedCell;
 import javafx.scene.control.Label;
 import javafx.scene.control.ListCell;
 import javafx.scene.control.ListView;
 import javafx.scene.control.MultipleSelectionModel;
-import javafx.scene.control.SelectionMode;
 import javafx.scene.control.SelectionModel;
 import com.sun.javafx.scene.control.behavior.ListViewBehavior;
 import javafx.scene.input.MouseEvent;
 import javafx.scene.layout.StackPane;
 
@@ -206,10 +203,14 @@
         behavior.setOnMoveToLastCell(() -> onMoveToLastCell());
         behavior.setOnSelectPreviousRow(() -> onSelectPreviousCell());
         behavior.setOnSelectNextRow(() -> onSelectNextCell());
         behavior.setOnScrollPageDown(this::onScrollPageDown);
         behavior.setOnScrollPageUp(this::onScrollPageUp);
+        Boolean isRemoveKeyMappings = (Boolean) control.getProperties().get("removeKeyMappingsForComboBoxEditor");
+        if (isRemoveKeyMappings != null && isRemoveKeyMappings) {
+            behavior.removeKeyMappingsForComboBoxEditor();
+        }
 
         updateListViewItems();
 
         // init the VirtualFlow
         flow = getVirtualFlow();
@@ -261,35 +262,12 @@
         });
         registerChangeListener(control.placeholderProperty(), o -> updatePlaceholderRegionVisibility());
         registerChangeListener(control.fixedCellSizeProperty(), o ->
             flow.setFixedCellSize(control.getFixedCellSize())
         );
-
-        if (control.getSelectionModel() != null) {
-            behavior.updateSelectionModeKeyMapping(control.getSelectionModel().getSelectionMode());
-            control.getSelectionModel().selectionModeProperty().addListener(weakSelectionModeCL);
-        }
-        control.selectionModelProperty().addListener(weakSelectionModelCL);
     }
 
-    ChangeListener<SelectionMode> selectionModeCL = (ov, oldMode, newMode) -> {
-        behavior.updateSelectionModeKeyMapping(newMode);
-    };
-    WeakChangeListener<SelectionMode> weakSelectionModeCL = new WeakChangeListener<>(selectionModeCL);
-
-    ChangeListener<MultipleSelectionModel<?>> selectionModelCL = (ov, oldSM, newSM) -> {
-        if (oldSM != null) {
-            oldSM.selectionModeProperty().removeListener(weakSelectionModeCL);
-        }
-        if (newSM != null) {
-            behavior.updateSelectionModeKeyMapping(newSM.getSelectionMode());
-            newSM.selectionModeProperty().addListener(weakSelectionModeCL);
-        }
-    };
-    WeakChangeListener<MultipleSelectionModel<?>> weakSelectionModelCL = new WeakChangeListener<>(selectionModelCL);
-
-
     /***************************************************************************
      *                                                                         *
      * Public API                                                              *
      *                                                                         *
      **************************************************************************/
@@ -302,14 +280,10 @@
         getSkinnable().itemsProperty().removeListener(weakItemsChangeListener);
         if (listViewItems != null) {
             listViewItems.removeListener(weakListViewItemsListener);
             listViewItems = null;
         }
-        getSkinnable().selectionModelProperty().removeListener(weakSelectionModelCL);
-        if (getSkinnable().getSelectionModel() != null) {
-            getSkinnable().getSelectionModel().selectionModeProperty().removeListener(weakSelectionModeCL);
-        }
         // flow related cleanup
         // leaking without nulling factory
         flow.setCellFactory(null);
         // for completeness - but no effect with/out?
         flow.getVbar().removeEventFilter(MouseEvent.MOUSE_PRESSED, ml);
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ComboBoxTest.java
@@ -1332,42 +1332,124 @@
         assertTrue(cb.isShowing());
 
         sl.dispose();
     }
 
-    @Test public void test_ArrowKeysWhenPopupIsShowing() {
+    @Test public void test_EditorKeyInputsWhenPopupIsShowing() {
         final ComboBox<String> cb = new ComboBox<>(FXCollections.observableArrayList("a", "b", "c"));
         cb.setEditable(true);
         StageLoader sl = new StageLoader(cb);
         KeyEventFirer keyboard = new KeyEventFirer(cb);
 
         new StageLoader(cb);
 
+        // Show the popup
         assertFalse(cb.isShowing());
         cb.requestFocus();
-        keyboard.doDownArrowPress(KeyModifier.ALT);  // show the popup
+        cb.getEditor().setText("ABC DEF");
+        assertEquals("ABC DEF", cb.getEditor().getText());
+        keyboard.doDownArrowPress(KeyModifier.ALT);
+        // Sanity
         assertTrue(cb.isShowing());
+        assertEquals(0, cb.getEditor().getCaretPosition());
 
-        // Enter some text
-        keyboard.doKeyTyped(KeyCode.A);
-        keyboard.doKeyTyped(KeyCode.C);
-        assertEquals("AC", cb.getEditor().getText());
+        // LEFT, RIGHT keys with CTRL, SHIFT modifiers
+        // Test RIGHT key
+        keyboard.doRightArrowPress();
+        assertEquals(1, cb.getEditor().getCaretPosition());
+
+        // Test KP_RIGHT key
+        keyboard.doKeyPress(KeyCode.KP_RIGHT);
+        assertEquals(2, cb.getEditor().getCaretPosition());
 
         // Test LEFT key
         keyboard.doLeftArrowPress();
-        keyboard.doKeyTyped(KeyCode.B);
-        assertEquals("ABC", cb.getEditor().getText());
+        assertEquals(1, cb.getEditor().getCaretPosition());
 
-        // Test RIGHT key
-        keyboard.doRightArrowPress();
-        keyboard.doKeyTyped(KeyCode.D);
-        assertEquals("ABCD", cb.getEditor().getText());
+        // Test KP_LEFT key
+        keyboard.doKeyPress(KeyCode.KP_LEFT);
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test SHIFT + RIGHT key
+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);
+        assertEquals("A", cb.getEditor().getSelectedText());
+        assertEquals(1, cb.getEditor().getCaretPosition());
+
+        // Test SHIFT + LEFT key
+        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + RIGHT key
+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.CTRL);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(4, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + LEFT key
+        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.CTRL);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + SHIFT + RIGHT key
+        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.CTRL, KeyModifier.SHIFT);
+        assertEquals("ABC ", cb.getEditor().getSelectedText());
+        assertEquals(4, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + SHIFT + LEFT key
+        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.CTRL, KeyModifier.SHIFT);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // HOME, END keys with CTRL, SHIFT modifiers
+        // Test END key
+        keyboard.doKeyPress(KeyCode.END);
+        assertEquals(7, cb.getEditor().getCaretPosition());
+
+        // Test HOME key
+        keyboard.doKeyPress(KeyCode.HOME);
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test SHIFT + END key
+        keyboard.doKeyPress(KeyCode.END, KeyModifier.SHIFT);
+        assertEquals(cb.getEditor().getText(), cb.getEditor().getSelectedText());
+        assertEquals(7, cb.getEditor().getCaretPosition());
+
+        // Test SHIFT + HOME key
+        keyboard.doKeyPress(KeyCode.HOME, KeyModifier.SHIFT);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + END key
+        keyboard.doKeyPress(KeyCode.END, KeyModifier.CTRL);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(7, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + HOME key
+        keyboard.doKeyPress(KeyCode.HOME, KeyModifier.CTRL);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+
+        /* @Ignore(JBS-8250807)
+        // Test CTRL + SHIFT + END key
+        keyboard.doKeyPress(KeyCode.END, KeyModifier.CTRL, KeyModifier.SHIFT);
+        assertEquals(cb.getEditor().getText(), cb.getEditor().getSelectedText());
+        assertEquals(7, cb.getEditor().getCaretPosition());
+
+        // Test CTRL + SHIFT + HOME key
+        keyboard.doKeyPress(KeyCode.HOME, KeyModifier.CTRL, KeyModifier.SHIFT);
+        assertEquals("", cb.getEditor().getSelectedText());
+        assertEquals(0, cb.getEditor().getCaretPosition());
+         */
 
         // Test CTRL + A key
+        keyboard.doLeftArrowPress();
         assertEquals("", cb.getEditor().getSelectedText());
         keyboard.doKeyPress(KeyCode.A, KeyModifier.getShortcutKey());
-        assertEquals("ABCD", cb.getEditor().getSelectedText());
+        assertEquals(cb.getEditor().getText(), cb.getEditor().getSelectedText());
+
+        // Sanity
+        assertTrue(cb.isShowing());
 
         sl.dispose();
     }
 
     @Test public void test_rt36280_nonEditable_enterHidesShowingPopup() {
