diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListViewSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListViewSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListViewSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListViewSkin.java
@@ -29,10 +29,12 @@
 import java.util.List;
 
 import com.sun.javafx.scene.control.Properties;
 import javafx.beans.InvalidationListener;
 import javafx.beans.WeakInvalidationListener;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.WeakChangeListener;
 import javafx.collections.FXCollections;
 import javafx.collections.ListChangeListener;
 import javafx.collections.MapChangeListener;
 import javafx.collections.ObservableList;
 import javafx.collections.ObservableMap;
@@ -48,10 +50,11 @@
 import javafx.scene.control.IndexedCell;
 import javafx.scene.control.Label;
 import javafx.scene.control.ListCell;
 import javafx.scene.control.ListView;
 import javafx.scene.control.MultipleSelectionModel;
+import javafx.scene.control.SelectionMode;
 import javafx.scene.control.SelectionModel;
 import com.sun.javafx.scene.control.behavior.ListViewBehavior;
 import javafx.scene.input.MouseEvent;
 import javafx.scene.layout.StackPane;
 
@@ -258,12 +261,33 @@
         });
         registerChangeListener(control.placeholderProperty(), o -> updatePlaceholderRegionVisibility());
         registerChangeListener(control.fixedCellSizeProperty(), o ->
             flow.setFixedCellSize(control.getFixedCellSize())
         );
+
+        if (control.getSelectionModel() != null) {
+            behavior.updateSelectionModeKeyMapping(control.getSelectionModel().getSelectionMode());
+            control.getSelectionModel().selectionModeProperty().addListener(weakSelectionModeCL);
+        }
+        control.selectionModelProperty().addListener(weakSelectionModelCL);
     }
 
+    ChangeListener<SelectionMode> selectionModeCL = (ov, oldMode, newMode) -> {
+        behavior.updateSelectionModeKeyMapping(newMode);
+    };
+    WeakChangeListener<SelectionMode> weakSelectionModeCL = new WeakChangeListener<>(selectionModeCL);
+
+    ChangeListener<MultipleSelectionModel<?>> selectionModelCL = (ov, oldSM, newSM) -> {
+        if (oldSM != null) {
+            oldSM.selectionModeProperty().removeListener(weakSelectionModeCL);
+        }
+        if (newSM != null) {
+            behavior.updateSelectionModeKeyMapping(newSM.getSelectionMode());
+            newSM.selectionModeProperty().addListener(weakSelectionModeCL);
+        }
+    };
+    WeakChangeListener<MultipleSelectionModel<?>> weakSelectionModelCL = new WeakChangeListener<>(selectionModelCL);
 
 
     /***************************************************************************
      *                                                                         *
      * Public API                                                              *
@@ -278,10 +302,14 @@
         getSkinnable().itemsProperty().removeListener(weakItemsChangeListener);
         if (listViewItems != null) {
             listViewItems.removeListener(weakListViewItemsListener);
             listViewItems = null;
         }
+        getSkinnable().selectionModelProperty().removeListener(weakSelectionModelCL);
+        if (getSkinnable().getSelectionModel() != null) {
+            getSkinnable().getSelectionModel().selectionModeProperty().removeListener(weakSelectionModeCL);
+        }
         // flow related cleanup
         // leaking without nulling factory
         flow.setCellFactory(null);
         // for completeness - but no effect with/out?
         flow.getVbar().removeEventFilter(MouseEvent.MOUSE_PRESSED, ml);
