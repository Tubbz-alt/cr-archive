diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuBarSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuBarSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuBarSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuBarSkin.java
@@ -469,13 +469,16 @@
 
             openMenu.show();
         }
     }
 
-    private void setFocusedMenuIndex(int index) {
-        focusedMenuIndex = (index >= -1 && index < getSkinnable().getMenus().size())? index : -1;
-        focusedMenu = (focusedMenuIndex != -1)? getSkinnable().getMenus().get(index) : null;
+    /**
+     * This method is package scoped as it is used in this class as well as for testing
+     */
+    void setFocusedMenuIndex(int index) {
+        focusedMenuIndex = (index >= -1 && index < getSkinnable().getMenus().size()) ? index : -1;
+        focusedMenu = (focusedMenuIndex != -1) ? getSkinnable().getMenus().get(index) : null;
 
         if (focusedMenuIndex != -1) {
             openMenuButton = (MenuBarButton)container.getChildren().get(focusedMenuIndex);
             openMenuButton.setHover();
         }
@@ -758,14 +761,10 @@
 
     int getFocusedMenuIndex() {
         return focusedMenuIndex;
     }
 
-    void setFocusedIndex(int index) {
-        this.setFocusedMenuIndex(0);
-    }
-
     private boolean menusContainCustomMenuItem() {
         for (Menu menu : getSkinnable().getMenus()) {
             if (menuContainsCustomMenuItem(menu)) {
                 System.err.println("Warning: MenuBar ignored property useSystemMenuBar because menus contain CustomMenuItem");
                 return true;
diff a/modules/javafx.controls/src/shims/java/javafx/scene/control/skin/MenuBarSkinShim.java b/modules/javafx.controls/src/shims/java/javafx/scene/control/skin/MenuBarSkinShim.java
--- a/modules/javafx.controls/src/shims/java/javafx/scene/control/skin/MenuBarSkinShim.java
+++ b/modules/javafx.controls/src/shims/java/javafx/scene/control/skin/MenuBarSkinShim.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -51,14 +51,14 @@
     public static ContextMenuContent getMenuContent(MenuButton mb) {
         ContextMenuContent cmc = (ContextMenuContent)getPopupSkin(mb).getNode();
         return cmc;
     }
 
-    public static int getFocusedIndex(MenuBarSkin skin) {
+    public static int getFocusedMenuIndex(MenuBarSkin skin) {
         return skin.getFocusedMenuIndex();
     }
 
-    public static void setFocusedIndex(MenuBarSkin skin, int index) {
-        skin.setFocusedIndex(index);
+    public static void setFocusedMenuIndex(MenuBarSkin skin, int index) {
+        skin.setFocusedMenuIndex(index);
     }
 
 }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java
@@ -128,11 +128,11 @@
         MenuBarSkin skin = (MenuBarSkin)menuBar.getSkin();
         assertTrue(skin != null);
 
         menuBar.getScene().getWindow().requestFocus();
 
-        int focusedIndex = MenuBarSkinShim.getFocusedIndex(skin);
+        int focusedIndex = MenuBarSkinShim.getFocusedMenuIndex(skin);
         assertEquals(-1, focusedIndex);
     }
 
     @Test public void testSimulateTraverseIntoEmptyMenubar() {
         menuBar.setFocusTraversable(true);
@@ -143,12 +143,12 @@
 
         MenuBarSkin skin = (MenuBarSkin)menuBar.getSkin();
         assertTrue(skin != null);
 
         // simulate notification from traversalListener
-        MenuBarSkinShim.setFocusedIndex(skin, 0);
-        int focusedIndex = MenuBarSkinShim.getFocusedIndex(skin);
+        MenuBarSkinShim.setFocusedMenuIndex(skin, 0);
+        int focusedIndex = MenuBarSkinShim.getFocusedMenuIndex(skin);
         assertEquals(-1, focusedIndex);
     }
 
     @Test public void getMenusHasSizeZero() {
         assertEquals(0, menuBar.getMenus().size());
@@ -323,11 +323,11 @@
         assertTrue(!menu.isShowing());
         keyboard.doKeyPress(KeyCode.LEFT);
         tk.firePulse();
 
         // check if focusedMenuIndex is reset to -1 so navigation happens.
-        int focusedIndex = MenuBarSkinShim.getFocusedIndex(skin);
+        int focusedIndex = MenuBarSkinShim.getFocusedMenuIndex(skin);
         assertEquals(-1, focusedIndex);
     }
 
     @Test public void testMenuOnShownEventFiringWithKeyNavigation() {
         final MouseEventGenerator generator = new MouseEventGenerator();
@@ -708,9 +708,9 @@
         SceneHelper.processMouseEvent(scene,
             MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_RELEASED, xval+20, yval+20));
         assertFalse(menu1.isShowing());
 
         // check if focusedMenuIndex is 0 (menu1 is still in selected state).
-        int focusedIndex = MenuBarSkinShim.getFocusedIndex(skin);
+        int focusedIndex = MenuBarSkinShim.getFocusedMenuIndex(skin);
         assertEquals(0, focusedIndex);
     }
 }
