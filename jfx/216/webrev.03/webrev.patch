diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuBarSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuBarSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuBarSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuBarSkin.java
@@ -298,21 +298,19 @@
                     break;
                 }
             }
         };
         menuBarFocusedPropertyListener = (ov, t, t1) -> {
-            if (t1) {
+            unSelectMenus();
+            if (t1 && !container.getChildren().isEmpty()) {
                 // RT-23147 when MenuBar's focusTraversable is true the first
                 // menu will visually indicate focus
-                unSelectMenus();
                 menuModeStart(0);
                 openMenuButton = ((MenuBarButton)container.getChildren().get(0));
                 setFocusedMenuIndex(0);
                 openMenuButton.setHover();
-            } else {
-                unSelectMenus();
-             }
+            }
          };
         weakSceneKeyEventHandler = new WeakEventHandler<KeyEvent>(keyEventHandler);
         Utils.executeOnceWhenPropertyIsNonNull(control.sceneProperty(), (Scene scene) -> {
             scene.addEventFilter(KeyEvent.KEY_PRESSED, weakSceneKeyEventHandler);
         });
@@ -471,15 +469,18 @@
 
             openMenu.show();
         }
     }
 
-    private void setFocusedMenuIndex(int index) {
-        this.focusedMenuIndex = index;
-        focusedMenu = index == -1 ? null : getSkinnable().getMenus().get(index);
+    /**
+     * This method is package scoped as it is used in this class as well as for testing
+     */
+    void setFocusedMenuIndex(int index) {
+        focusedMenuIndex = (index >= -1 && index < getSkinnable().getMenus().size()) ? index : -1;
+        focusedMenu = (focusedMenuIndex != -1) ? getSkinnable().getMenus().get(index) : null;
 
-        if (focusedMenu != null && focusedMenuIndex != -1) {
+        if (focusedMenuIndex != -1) {
             openMenuButton = (MenuBarButton)container.getChildren().get(focusedMenuIndex);
             openMenuButton.setHover();
         }
     }
 
diff a/modules/javafx.controls/src/shims/java/javafx/scene/control/skin/MenuBarSkinShim.java b/modules/javafx.controls/src/shims/java/javafx/scene/control/skin/MenuBarSkinShim.java
--- a/modules/javafx.controls/src/shims/java/javafx/scene/control/skin/MenuBarSkinShim.java
+++ b/modules/javafx.controls/src/shims/java/javafx/scene/control/skin/MenuBarSkinShim.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -51,9 +51,14 @@
     public static ContextMenuContent getMenuContent(MenuButton mb) {
         ContextMenuContent cmc = (ContextMenuContent)getPopupSkin(mb).getNode();
         return cmc;
     }
 
-    public static int getFocusedIndex(MenuBarSkin skin) {
+    public static int getFocusedMenuIndex(MenuBarSkin skin) {
         return skin.getFocusedMenuIndex();
     }
+
+    public static void setFocusedMenuIndex(MenuBarSkin skin, int index) {
+        skin.setFocusedMenuIndex(index);
+    }
+
 }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java
@@ -112,14 +112,46 @@
     @Test public void defaultConstructorHasFalseFocusTraversable() {
         assertFalse(menuBar.isFocusTraversable());
     }
 
     @Test public void defaultConstructorButSetTrueFocusTraversable() {
-            menuBar.setFocusTraversable(true);
+        menuBar.setFocusTraversable(true);
         assertTrue(menuBar.isFocusTraversable());
     }
 
+    @Test public void testFocusOnEmptyMenubar() {
+        menuBar.setFocusTraversable(true);
+
+        AnchorPane root = new AnchorPane();
+        root.getChildren().add(menuBar);
+        startApp(root);
+
+        MenuBarSkin skin = (MenuBarSkin)menuBar.getSkin();
+        assertTrue(skin != null);
+
+        menuBar.getScene().getWindow().requestFocus();
+
+        int focusedIndex = MenuBarSkinShim.getFocusedMenuIndex(skin);
+        assertEquals(-1, focusedIndex);
+    }
+
+    @Test public void testSimulateTraverseIntoEmptyMenubar() {
+        menuBar.setFocusTraversable(true);
+
+        AnchorPane root = new AnchorPane();
+        root.getChildren().add(menuBar);
+        startApp(root);
+
+        MenuBarSkin skin = (MenuBarSkin)menuBar.getSkin();
+        assertTrue(skin != null);
+
+        // simulate notification from traversalListener
+        MenuBarSkinShim.setFocusedMenuIndex(skin, 0);
+        int focusedIndex = MenuBarSkinShim.getFocusedMenuIndex(skin);
+        assertEquals(-1, focusedIndex);
+    }
+
     @Test public void getMenusHasSizeZero() {
         assertEquals(0, menuBar.getMenus().size());
     }
 
     @Test public void getMenusIsAddable() {
@@ -291,12 +323,12 @@
         assertTrue(!menu.isShowing());
         keyboard.doKeyPress(KeyCode.LEFT);
         tk.firePulse();
 
         // check if focusedMenuIndex is reset to -1 so navigation happens.
-        int focusedIndex = MenuBarSkinShim.getFocusedIndex(skin);
-        assertEquals(focusedIndex, -1);
+        int focusedIndex = MenuBarSkinShim.getFocusedMenuIndex(skin);
+        assertEquals(-1, focusedIndex);
     }
 
     @Test public void testMenuOnShownEventFiringWithKeyNavigation() {
         final MouseEventGenerator generator = new MouseEventGenerator();
         VBox root = new VBox();
@@ -676,9 +708,9 @@
         SceneHelper.processMouseEvent(scene,
             MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_RELEASED, xval+20, yval+20));
         assertFalse(menu1.isShowing());
 
         // check if focusedMenuIndex is 0 (menu1 is still in selected state).
-        int focusedIndex = MenuBarSkinShim.getFocusedIndex(skin);
-        assertEquals(focusedIndex, 0);
+        int focusedIndex = MenuBarSkinShim.getFocusedMenuIndex(skin);
+        assertEquals(0, focusedIndex);
     }
 }
