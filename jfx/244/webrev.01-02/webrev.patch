diff a/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTablePosition.java b/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTablePosition.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTablePosition.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTablePosition.java
@@ -75,14 +75,13 @@
         this.treeItemRef = new WeakReference<>(doLookup ? treeTableView.getTreeItem(row) : null);
 
         nonFixedColumnIndex = treeTableView == null || tableColumn == null ? -1 : treeTableView.getVisibleLeafIndex(tableColumn);
     }
 
-    // A call to 'treeTableView.getTreeItem(row)' may result in TreeModificationEvent being triggered.
-    // This causes issue by triggering a new TreeModificationEvent while one TreeModificationEvent
-    // is being handled currently.
-    // This is kind of a copy constructor with different value for row.
+    // Copy-like constructor with a different row.
+    // It is used for updating the selection when the TreeItems are
+    // sorted using TreeTableView.sort() or reordered using setAll().
     TreeTablePosition(@NamedArg("treeTableView") TreeTablePosition<S, T> pos, @NamedArg("row") int row) {
         super(row, pos.getTableColumn());
         this.controlRef = new WeakReference<>(pos.getTreeTableView());
         this.treeItemRef = new WeakReference<>(pos.getTreeItem());
         nonFixedColumnIndex = pos.getColumn();
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java b/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java
@@ -1802,11 +1802,11 @@
     public TreeTableColumn<S,?> getVisibleLeafColumn(int column) {
         if (column < 0 || column >= visibleLeafColumns.size()) return null;
         return visibleLeafColumns.get(column);
     }
 
-    boolean sortingInProgress;
+    private boolean sortingInProgress;
     boolean isSortingInProgress() {
         return sortingInProgress;
     }
 
     /**
