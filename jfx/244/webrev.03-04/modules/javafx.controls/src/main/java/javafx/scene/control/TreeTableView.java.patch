diff a/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java b/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java
@@ -1808,15 +1808,10 @@
     private boolean sortingInProgress;
     boolean isSortingInProgress() {
         return sortingInProgress;
     }
 
-    private boolean sortTreeOfSelectedItems = true;
-    boolean isSortTreeOfSelectedItems() {
-        return sortTreeOfSelectedItems;
-    }
-
     /**
      * The sort method forces the TreeTableView to re-run its sorting algorithm. More
      * often than not it is not necessary to call this method directly, as it is
      * automatically called when the {@link #getSortOrder() sort order},
      * {@link #sortPolicyProperty() sort policy}, or the state of the
@@ -1859,11 +1854,11 @@
         // get the sort policy and run it
         Callback<TreeTableView<S>, Boolean> sortPolicy = getSortPolicy();
         if (sortPolicy == null) return;
         Boolean success = sortPolicy.call(this);
 
-        if (getSortMode() == TreeSortMode.ALL_DESCENDANTS && isSortTreeOfSelectedItems()) {
+        if (getSortMode() == TreeSortMode.ALL_DESCENDANTS) {
             Set<TreeItem<S>> sortedParents = new HashSet<>();
             for (TreeTablePosition<S,?> selectedPosition : prevState) {
                 TreeItem<S> parent = selectedPosition.getTreeItem().getParent();
                 while (parent != null && sortedParents.add(parent)) {
                     parent.getChildren();
