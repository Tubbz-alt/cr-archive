diff a/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java b/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java
@@ -54,10 +54,11 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.WeakHashMap;
@@ -1802,20 +1803,26 @@
     public TreeTableColumn<S,?> getVisibleLeafColumn(int column) {
         if (column < 0 || column >= visibleLeafColumns.size()) return null;
         return visibleLeafColumns.get(column);
     }
 
+    private boolean sortingInProgress;
+    boolean isSortingInProgress() {
+        return sortingInProgress;
+    }
+
     /**
      * The sort method forces the TreeTableView to re-run its sorting algorithm. More
      * often than not it is not necessary to call this method directly, as it is
      * automatically called when the {@link #getSortOrder() sort order},
      * {@link #sortPolicyProperty() sort policy}, or the state of the
      * TreeTableColumn {@link TreeTableColumn#sortTypeProperty() sort type} properties
      * change. In other words, this method should only be called directly when
      * something external changes and a sort is required.
      */
     public void sort() {
+        sortingInProgress = true;
         final ObservableList<TreeTableColumn<S,?>> sortOrder = getSortOrder();
 
         // update the Comparator property
         final Comparator<TreeItem<S>> oldComparator = getComparator();
         setComparator(sortOrder.isEmpty() ? null : new TableColumnComparatorBase.TreeTableColumnComparator(sortOrder));
@@ -1830,10 +1837,11 @@
             // sign that the developer has decided to handle the event themselves.
 
             // sortLock = true;
             // TableUtil.handleSortFailure(sortOrder, lastSortEventType, lastSortEventSupportInfo);
             // sortLock = false;
+            sortingInProgress = false;
             return;
         }
 
         final List<TreeTablePosition<S,?>> prevState = new ArrayList<>(getSelectionModel().getSelectedCells());
         final int itemCount = prevState.size();
@@ -1843,13 +1851,31 @@
         // of this method.
         getSelectionModel().startAtomic();
 
         // get the sort policy and run it
         Callback<TreeTableView<S>, Boolean> sortPolicy = getSortPolicy();
-        if (sortPolicy == null) return;
+        if (sortPolicy == null) {
+            sortingInProgress = false;
+            return;
+        }
         Boolean success = sortPolicy.call(this);
 
+        if (getSortMode() == TreeSortMode.ALL_DESCENDANTS) {
+            Set<TreeItem<S>> sortedParents = new HashSet<>();
+            for (TreeTablePosition<S,?> selectedPosition : prevState) {
+                // This null check is not required ideally.
+                // The selectedPosition.getTreeItem() should always return a valid TreeItem.
+                // But, it is possible to be null due to JDK-8248217.
+                if (selectedPosition.getTreeItem() != null) {
+                    TreeItem<S> parent = selectedPosition.getTreeItem().getParent();
+                    while (parent != null && sortedParents.add(parent)) {
+                        parent.getChildren();
+                        parent = parent.getParent();
+                    }
+                }
+            }
+        }
         getSelectionModel().stopAtomic();
 
         if (success == null || ! success) {
             // the sort was a failure. Need to backout if possible
             sortLock = true;
@@ -1870,22 +1896,24 @@
                     TreeTablePosition<S, ?> prevItem = prevState.get(i);
                     if (!newState.contains(prevItem)) {
                         removed.add(prevItem);
                     }
                 }
-
                 if (!removed.isEmpty()) {
                     // the sort operation effectively permutates the selectedCells list,
                     // but we cannot fire a permutation event as we are talking about
                     // TreeTablePosition's changing (which may reside in the same list
                     // position before and after the sort). Therefore, we need to fire
                     // a single add/remove event to cover the added and removed positions.
                     ListChangeListener.Change<TreeTablePosition<S, ?>> c = new NonIterableChange.GenericAddRemoveChange<>(0, itemCount, removed, newState);
                     sm.fireCustomSelectedCellsListChangeEvent(c);
                 }
             }
+            getSelectionModel().setSelectedIndex(getRow(getSelectionModel().getSelectedItem()));
+            getFocusModel().focus(getSelectionModel().getSelectedIndex());
         }
+        sortingInProgress = false;
     }
 
     /**
      * Calling {@code refresh()} forces the TreeTableView control to recreate and
      * repopulate the cells necessary to populate the visual bounds of the control.
@@ -2538,72 +2566,44 @@
                         }
 
                         shift += -count + 1;
                         startRow++;
                     } else if (e.wasPermutated()) {
-                        // General approach:
-                        //   -- detected a sort has happened
-                        //   -- Create a permutation lookup map (1)
-                        //   -- dump all the selected indices into a list (2)
-                        //   -- create a list containing the new indices (3)
-                        //   -- for each previously-selected index (4)
-                        //     -- if index is in the permutation lookup map
-                        //       -- add the new index to the new indices list
-                        //   -- Perform batch selection (5)
-
-                        startAtomic();
-
-                        final int offset = startRow + 1;
-
-                        // (1)
-                        int length = e.getTo() - e.getFrom();
-                        HashMap<Integer, Integer> pMap = new HashMap<> (length);
-                        for (int i = e.getFrom(); i < e.getTo(); i++) {
-                            pMap.put(i, e.getChange().getPermutation(i));
-                        }
-
-                        // (2)
-                        List<TreeTablePosition<S,?>> selectedIndices = new ArrayList<>(getSelectedCells());
+                        // Approach:
+                        // Get the current selection.
+                        // Create a new selection with updated index(row).
+                        // Update the current selection with new selection.
+                        // If sorting is in progress then one Selection change event will be sent from
+                        // TreeTableView.sort() method, and should not be sent from here.
+                        // else, in case otherwise, the selection change events would be generated.
+                        // Do not call shiftSelection() in case of permutation change(when shift == 0).
+
+                        List<TreeTablePosition<S, ?>> currentSelection = new ArrayList<>(selectedCellsMap.getSelectedCells());
+                        List<TreeTablePosition<S, ?>> updatedSelection = new ArrayList<>();
 
-                        // (3)
-                        List<TreeTablePosition<S,?>> newIndices = new ArrayList<>(selectedIndices.size());
-
-                        // (4)
                         boolean selectionIndicesChanged = false;
-                        for (int i = 0; i < selectedIndices.size(); i++) {
-                            final TreeTablePosition<S,?> oldIndex = selectedIndices.get(i);
-                            final int oldRow = oldIndex.getRow() - offset;
-
-                            if (pMap.containsKey(oldRow)) {
-                                int newIndex = pMap.get(oldRow) + offset;
-
-                                selectionIndicesChanged = selectionIndicesChanged || newIndex != oldRow;
-
-                                newIndices.add(new TreeTablePosition<>(oldIndex.getTreeTableView(), newIndex, oldIndex.getTableColumn()));
-                            }
-
-                            // check if the root element of this event was selected, so that we can retain it
-                            if (oldIndex.getRow() == startRow) {
-                                newIndices.add(new TreeTablePosition<>(oldIndex.getTreeTableView(), oldIndex.getRow(), oldIndex.getTableColumn()));
+                        for (TreeTablePosition<S, ?> selectedCell : currentSelection) {
+                            int newRow = treeTableView.getRow(selectedCell.getTreeItem());
+                            if (selectedCell.getRow() != newRow) {
+                                selectionIndicesChanged = true;
                             }
+                            updatedSelection.add(new TreeTablePosition<>(selectedCell, newRow));
                         }
-
                         if (selectionIndicesChanged) {
-                            // (5)
-                            quietClearSelection();
-                            stopAtomic();
-
-                            selectedCellsMap.setAll(newIndices);
-
-                            final int offsetOldIndex = oldSelectedIndex - offset;
-                            if (offsetOldIndex >= 0 && offsetOldIndex < getItemCount()) {
-                                int newIndex = e.getChange().getPermutation(offsetOldIndex);
-                                setSelectedIndex(newIndex + offset);
-                                focus(newIndex + offset);
+                            if (treeTableView.isSortingInProgress()) {
+                                startAtomic();
+                                selectedCellsMap.setAll(updatedSelection);
+                                stopAtomic();
+                            } else {
+                                startAtomic();
+                                quietClearSelection();
+                                stopAtomic();
+                                selectedCellsMap.setAll(updatedSelection);
+                                int selectedIndex = treeTableView.getRow(getSelectedItem());
+                                setSelectedIndex(selectedIndex);
+                                focus(selectedIndex);
                             }
-                        } else {
-                            stopAtomic();
                         }
                     } else if (e.wasAdded()) {
                         // shuffle selection by the number of added items
                         shift += treeItem.isExpanded() ? addedSize : 0;
 
@@ -2661,46 +2661,48 @@
                             }
                         }
                     }
                 } while (e.getChange() != null && e.getChange().next());
 
-                shiftSelection(startRow, shift, new Callback<ShiftParams, Void>() {
-                    @Override public Void call(ShiftParams param) {
-
-                        // we make the shifts atomic, as otherwise listeners to
-                        // the items / indices lists get a lot of intermediate
-                        // noise. They eventually get the summary event fired
-                        // from within shiftSelection, so this is ok.
-                        startAtomic();
-
-                        final int clearIndex = param.getClearIndex();
-                        final int setIndex = param.getSetIndex();
-                        TreeTablePosition<S,?> oldTP = null;
-                        if (clearIndex > -1) {
-                            for (int i = 0; i < selectedCellsMap.size(); i++) {
-                                TreeTablePosition<S,?> tp = selectedCellsMap.get(i);
-                                if (tp.getRow() == clearIndex) {
-                                    oldTP = tp;
-                                    selectedCellsMap.remove(tp);
-                                } else if (tp.getRow() == setIndex && !param.isSelected()) {
-                                    selectedCellsMap.remove(tp);
+                if (shift != 0) {
+                    shiftSelection(startRow, shift, new Callback<ShiftParams, Void>() {
+                        @Override public Void call(ShiftParams param) {
+
+                            // we make the shifts atomic, as otherwise listeners to
+                            // the items / indices lists get a lot of intermediate
+                            // noise. They eventually get the summary event fired
+                            // from within shiftSelection, so this is ok.
+                            startAtomic();
+
+                            final int clearIndex = param.getClearIndex();
+                            final int setIndex = param.getSetIndex();
+                            TreeTablePosition<S,?> oldTP = null;
+                            if (clearIndex > -1) {
+                                for (int i = 0; i < selectedCellsMap.size(); i++) {
+                                    TreeTablePosition<S,?> tp = selectedCellsMap.get(i);
+                                    if (tp.getRow() == clearIndex) {
+                                        oldTP = tp;
+                                        selectedCellsMap.remove(tp);
+                                    } else if (tp.getRow() == setIndex && !param.isSelected()) {
+                                        selectedCellsMap.remove(tp);
+                                    }
                                 }
                             }
-                        }
 
-                        if (oldTP != null && param.isSelected()) {
-                            TreeTablePosition<S,?> newTP = new TreeTablePosition<>(
-                                    treeTableView, param.getSetIndex(), oldTP.getTableColumn());
+                            if (oldTP != null && param.isSelected()) {
+                                TreeTablePosition<S,?> newTP = new TreeTablePosition<>(
+                                        treeTableView, param.getSetIndex(), oldTP.getTableColumn());
 
-                            selectedCellsMap.add(newTP);
-                        }
+                                selectedCellsMap.add(newTP);
+                            }
 
-                        stopAtomic();
+                            stopAtomic();
 
-                        return null;
-                    }
-                });
+                            return null;
+                        }
+                    });
+                }
             }
         };
 
         private WeakChangeListener<TreeItem<S>> weakRootPropertyListener =
                 new WeakChangeListener<>(rootPropertyListener);
