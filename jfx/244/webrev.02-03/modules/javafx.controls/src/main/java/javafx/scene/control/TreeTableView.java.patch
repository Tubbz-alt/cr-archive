diff a/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java b/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/TreeTableView.java
@@ -54,10 +54,11 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.WeakHashMap;
@@ -1807,10 +1808,15 @@
     private boolean sortingInProgress;
     boolean isSortingInProgress() {
         return sortingInProgress;
     }
 
+    private boolean sortTreeOfSelectedItems = true;
+    boolean isSortTreeOfSelectedItems() {
+        return sortTreeOfSelectedItems;
+    }
+
     /**
      * The sort method forces the TreeTableView to re-run its sorting algorithm. More
      * often than not it is not necessary to call this method directly, as it is
      * automatically called when the {@link #getSortOrder() sort order},
      * {@link #sortPolicyProperty() sort policy}, or the state of the
@@ -1853,10 +1859,20 @@
         // get the sort policy and run it
         Callback<TreeTableView<S>, Boolean> sortPolicy = getSortPolicy();
         if (sortPolicy == null) return;
         Boolean success = sortPolicy.call(this);
 
+        if (getSortMode() == TreeSortMode.ALL_DESCENDANTS && isSortTreeOfSelectedItems()) {
+            Set<TreeItem<S>> sortedParents = new HashSet<>();
+            for (TreeTablePosition<S,?> selectedPosition : prevState) {
+                TreeItem<S> parent = selectedPosition.getTreeItem().getParent();
+                while (parent != null && sortedParents.add(parent)) {
+                    parent.getChildren();
+                    parent = parent.getParent();
+                }
+            }
+        }
         getSelectionModel().stopAtomic();
 
         if (success == null || ! success) {
             // the sort was a failure. Need to backout if possible
             sortLock = true;
@@ -2551,12 +2567,12 @@
                     } else if (e.wasPermutated()) {
                         // Approach:
                         // Get the current selection.
                         // Create a new selection with updated index(row).
                         // Update the current selection with new selection.
-                        // If sorting is in progress then Selection change events will be sent from
-                        // sort() method, and should not be sent from here.
+                        // If sorting is in progress then one Selection change event will be sent from
+                        // TreeTableView.sort() method, and should not be sent from here.
                         // else, in case otherwise, the selection change events would be generated.
                         // Do not call shiftSelection() in case of permutation change(when shift == 0).
 
                         List<TreeTablePosition<S, ?>> currentSelection = new ArrayList<>(selectedCellsMap.getSelectedCells());
                         List<TreeTablePosition<S, ?>> updatedSelection = new ArrayList<>();
@@ -2570,11 +2586,10 @@
                             updatedSelection.add(new TreeTablePosition<>(selectedCell, newRow));
                         }
                         if (selectionIndicesChanged) {
                             if (treeTableView.isSortingInProgress()) {
                                 startAtomic();
-                                quietClearSelection();
                                 selectedCellsMap.setAll(updatedSelection);
                                 stopAtomic();
                             } else {
                                 startAtomic();
                                 quietClearSelection();
