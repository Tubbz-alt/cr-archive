diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TreeTableViewTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TreeTableViewTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TreeTableViewTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TreeTableViewTest.java
@@ -395,22 +395,22 @@
         List<TreeItem<String>> childrenReversed = getReverseChildrenOrder(parentTreeItem);
         parentTreeItem.getChildren().setAll(childrenReversed);
         verifySelectionAfterPermutation();
     }
 
-    @Ignore("JDK-8248217")
+    @Ignore("JDK-8193442")
     @Test public void testSelectionUpdatesCorrectlyAfterRemovingSelectedItem() {
         setupForPermutationTest();
         TreeItem<String> parentOfSelectedTreeItem = ((TreeItem<String>)sm.getSelectedItem()).getParent();
         expectedCountSelectedItemChangeEvent = 1;
         selectedItemBefore = treeTableView.getTreeItem(
                 (int)sm.getSelectedIndices().get(sm.getSelectedIndices().size() - 1));
         parentOfSelectedTreeItem.getChildren().remove(sm.getSelectedItem());
         verifySelectionAfterPermutation();
     }
 
-    @Ignore("JDK-8248217")
+    @Ignore("JDK-8248389")
     @Test public void testSelectionUpdatesCorrectlyAfterAddingAnItemBeforeSelectedItem() {
         setupForPermutationTest();
         TreeItem<String> parentOfSelectedTreeItem = ((TreeItem<String>)sm.getSelectedItem()).getParent();
         int indexOfSelectedItem = parentOfSelectedTreeItem.getChildren().indexOf(sm.getSelectedItem());
         if (indexOfSelectedItem > 0) {
@@ -426,31 +426,30 @@
         List<TreeItem<String>> childrenReversed = getReverseChildrenOrder(parentTreeItem);
         parentTreeItem.getChildren().setAll(childrenReversed);
         verifySelectionAfterPermutation();
     }
 
-    @Ignore("JDK-8248217")
+    @Ignore("JDK-8193442")
     @Test public void testSelectionUpdatesCorrectlyAfterChildReverseRemoveOneAndSetAll() {
         setupForPermutationTest();
         TreeItem<String> parentTreeItem = ((TreeItem<String>)sm.getSelectedItem()).getParent();
         List<TreeItem<String>> childrenReversed = getReverseChildrenOrder(parentTreeItem);
         childrenReversed.remove(0);
         parentTreeItem.getChildren().setAll(childrenReversed);
         verifySelectionAfterPermutation();
     }
 
-    @Ignore("JDK-8248217")
+    @Ignore("JDK-8193442")
     @Test public void testSelectionUpdatesCorrectlyAfterChildRemoveOneAndSetAll() {
-        TreeTableColumn<String, String> col = setupForPermutationTest();
         TreeItem<String> parentTreeItem = ((TreeItem<String>)sm.getSelectedItem()).getParent();
         List<TreeItem<String>> children = new ArrayList<>(parentTreeItem.getChildren());
         children.remove(0);
         parentTreeItem.getChildren().setAll(children);
         verifySelectionAfterPermutation();
     }
 
-    @Ignore("JDK-8248217")
+    @Ignore("JDK-8193442")
     @Test public void testSelectionUpdatesCorrectlyAfterChildRemoveOneAndSetAllAndSort() {
         TreeTableColumn<String, String> col = setupForPermutationTest();
         TreeItem<String> parentTreeItem = ((TreeItem<String>)sm.getSelectedItem()).getParent();
         List<TreeItem<String>> children = new ArrayList<>(parentTreeItem.getChildren());
         children.remove(0);
