diff a/modules/javafx.controls/src/main/java/javafx/scene/control/ToggleButton.java b/modules/javafx.controls/src/main/java/javafx/scene/control/ToggleButton.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/ToggleButton.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/ToggleButton.java
@@ -191,18 +191,21 @@
      * {@code ToggleButton} can only be in one group at any one time. If the
      * group is changed, then the button is removed from the old group prior to
      * being added to the new group.
      */
     private ObjectProperty<ToggleGroup> toggleGroup;
+    @Override
     public final void setToggleGroup(ToggleGroup value) {
         toggleGroupProperty().set(value);
     }
 
+    @Override
     public final ToggleGroup getToggleGroup() {
         return toggleGroup == null ? null : toggleGroup.get();
     }
 
+    @Override
     public final ObjectProperty<ToggleGroup> toggleGroupProperty() {
         if (toggleGroup == null) {
             toggleGroup = new ObjectPropertyBase<ToggleGroup>() {
                 private ToggleGroup old;
                 private ChangeListener<Toggle> listener = (o, oV, nV) ->
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/ToggleGroup.java b/modules/javafx.controls/src/main/java/javafx/scene/control/ToggleGroup.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/ToggleGroup.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/ToggleGroup.java
@@ -69,23 +69,31 @@
     }
 
     private final ObservableList<Toggle> toggles = new VetoableListDecorator<Toggle>(new TrackableObservableList<Toggle>() {
         @Override protected void onChanged(Change<Toggle> c) {
             while (c.next()) {
-                // Look through the removed toggles, and if any of them was the
-                // one and only selected toggle, then we will clear the selected
-                // toggle property.
+                List<Toggle> addedToggles = c.getAddedSubList();
+
+                // Look through the removed toggles.
                 for (Toggle t : c.getRemoved()) {
+                    // If any of them was the one and only selected toggle,
+                    // then we will clear the selected toggle property.
                     if (t.isSelected()) {
                         selectToggle(null);
                     }
+
+                    // If the toggle is not added again (below) remove
+                    // the group association.
+                    if (!addedToggles.contains(t)) {
+                        t.setToggleGroup(null);
+                    }
                 }
 
                 // A Toggle can only be in one group at any one time. If the
                 // group is changed, then the toggle is removed from the old group prior to
                 // being added to the new group.
-                for (Toggle t: c.getAddedSubList()) {
+                for (Toggle t: addedToggles) {
                     if (!ToggleGroup.this.equals(t.getToggleGroup())) {
                         if (t.getToggleGroup() != null) {
                             t.getToggleGroup().getToggles().remove(t);
                         }
                         t.setToggleGroup(ToggleGroup.this);
@@ -93,11 +101,11 @@
                 }
 
                 // Look through all the added toggles and the very first selected
                 // toggle we encounter will become the one we make the selected
                 // toggle for this group.
-                for (Toggle t : c.getAddedSubList()) {
+                for (Toggle t : addedToggles) {
                     if (t.isSelected()) {
                         selectToggle(t);
                         break;
                     }
                 }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ToggleButtonTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ToggleButtonTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ToggleButtonTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ToggleButtonTest.java
@@ -28,10 +28,11 @@
 import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;
 
 import test.com.sun.javafx.pgstub.StubToolkit;
 import com.sun.javafx.logging.PlatformLogger;
 import com.sun.javafx.tk.Toolkit;
+import java.lang.ref.WeakReference;
 import javafx.event.ActionEvent;
 import javafx.event.EventType;
 import javafx.geometry.Pos;
 import javafx.scene.Node;
 import javafx.scene.control.ToggleButton;
@@ -140,10 +141,84 @@
         toggle.setSelected(true);
         toggle.setSelected(false);
         assertPseudoClassDoesNotExist(toggle, "selected");
     }
 
+    /*********************************************************************
+     * Toggle group Tests                                                *
+     ********************************************************************/
+    @Test public void setToggleGroupAndSeeValueIsReflectedInModel() {
+        toggle.setToggleGroup(toggleGroup);
+        assertSame(toggle.toggleGroupProperty().getValue(), toggleGroup);
+    }
+
+    @Test public void setToggleGroupAndSeeValue() {
+        toggle.setToggleGroup(toggleGroup);
+        assertSame(toggle.getToggleGroup(), toggleGroup);
+    }
+
+    @Test public void toggleGroupViaGroupAddAndRemoveClearsReference() {
+        WeakReference<ToggleButton> ref = new WeakReference<>(toggle);
+
+        toggleGroup.getToggles().add(toggle);
+        toggleGroup.getToggles().clear();
+
+        toggle = null;
+        attemptGC(ref, 5);
+
+        assertNull(ref.get());
+    }
+
+    @Test public void toggleGroupViaToggleSetClearsReference() {
+        WeakReference<ToggleButton> ref = new WeakReference<>(toggle);
+
+        toggle.setToggleGroup(toggleGroup);
+        toggle.setToggleGroup(null);
+
+        toggle = null;
+        attemptGC(ref, 5);
+
+        assertNull(ref.get());
+    }
+
+    @Test public void toggleGroupViaToggleThenGroupClearsReference() {
+        WeakReference<ToggleButton> ref = new WeakReference<>(toggle);
+
+        toggle.setToggleGroup(toggleGroup);
+        toggleGroup.getToggles().clear();
+
+        toggle = null;
+        attemptGC(ref, 5);
+
+        assertNull(ref.get());
+    }
+
+    @Test public void toggleGroupViaGroupThenToggleClearsReference() {
+        WeakReference<ToggleButton> ref = new WeakReference<>(toggle);
+
+        toggleGroup.getToggles().add(toggle);
+        toggle.setToggleGroup(null);
+
+        toggle = null;
+        attemptGC(ref, 5);
+
+        assertNull(ref.get());
+    }
+
+    @Test public void toggleGroupSwitchingClearsReference() {
+        WeakReference<ToggleButton> ref = new WeakReference<>(toggle);
+
+        ToggleGroup anotherToggleGroup = new ToggleGroup();
+        toggle.setToggleGroup(toggleGroup);
+        toggle.setToggleGroup(anotherToggleGroup);
+        toggle.setToggleGroup(null);
+
+        toggle = null;
+        attemptGC(ref, 5);
+
+        assertNull(ref.get());
+    }
 
     /*********************************************************************
      * Miscellaneous Tests                                         *
      ********************************************************************/
     @Test public void setSelectedAndSeeValueIsReflectedInModel() {
@@ -154,20 +229,10 @@
     @Test public void setSelectedAndSeeValue() {
         toggle.setSelected(false);
         assertFalse(toggle.isSelected());
     }
 
-    @Test public void setToggleGroupAndSeeValueIsReflectedInModel() {
-        toggle.setToggleGroup(toggleGroup);
-        assertSame(toggle.toggleGroupProperty().getValue(), toggleGroup);
-    }
-
-    @Test public void setToggleGroupAndSeeValue() {
-        toggle.setToggleGroup(toggleGroup);
-        assertSame(toggle.getToggleGroup(), toggleGroup);
-    }
-
     @Test public void fireAndCheckSelectionToggled() {
         toggle.fire();
         assertTrue(toggle.isSelected());
         toggle.fire();
         assertFalse(toggle.isSelected());
@@ -188,6 +253,22 @@
             PlatformLogger.getLogger(ToggleButtonTest.class.getName()).severe(null, ex);
         }
         assertTrue("fire() doesnt emit ActionEvent!", flag[0]);
     }
 
+    private void attemptGC(WeakReference<? extends Object> weakRef, int n) {
+        // Attempt gc n times
+        for (int i = 0; i < n; i++) {
+            System.gc();
+            System.runFinalization();
+
+            if (weakRef.get() == null) {
+                break;
+            }
+            try {
+                Thread.sleep(500);
+            } catch (InterruptedException e) {
+               System.err.println("InterruptedException occurred during Thread.sleep()");
+            }
+        }
+    }
 }
