diff a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/theme/ScrollBarThemeImpl.java b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/theme/ScrollBarThemeImpl.java
--- a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/theme/ScrollBarThemeImpl.java
+++ b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/theme/ScrollBarThemeImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -46,13 +46,10 @@
 
 public final class ScrollBarThemeImpl extends ScrollBarTheme {
 
     private final static PlatformLogger log = PlatformLogger.getLogger(ScrollBarThemeImpl.class.getName());
 
-    private WeakReference<ScrollBar> testSBRef = // used for scrollbar thickness calculation
-            new WeakReference<ScrollBar>(null);
-
     private final Accessor accessor;
 
     private final Pool<ScrollBarWidget> pool;
 
     private static final class ScrollBarRef extends Ref {
@@ -79,23 +76,18 @@
                     accessor.removeChild(sb);
                 }, ScrollBarWidget.class);
         accessor.addViewListener(new ViewListener(pool, accessor) {
             @Override public void invalidated(Observable ov) {
                 super.invalidated(ov);
-                ScrollBar testSB = new ScrollBarWidget(ScrollBarThemeImpl.this);
+                ScrollBar testSB = new ScrollBarWidget();
                 // testSB should be added to the new WebView (if any)
                 accessor.addChild(testSB);
-                testSBRef = new WeakReference<ScrollBar>(testSB);
             }
         });
 
     }
 
-    ScrollBar getTestSBRef() {
-        return testSBRef.get();
-    }
-
     private static Orientation convertOrientation(int orientation) {
         return orientation == VERTICAL_SCROLLBAR ? Orientation.VERTICAL : Orientation.HORIZONTAL;
     }
 
     private void adjustScrollBar(ScrollBar sb, int w, int h, int orientation) {
@@ -154,11 +146,11 @@
                                          int value, int visibleSize,
                                          int totalSize)
     {
         ScrollBarWidget sb = pool.get(id);
         if (sb == null) {
-            sb = new ScrollBarWidget(this);
+            sb = new ScrollBarWidget();
             pool.put(id, sb, accessor.getPage().getUpdateContentCycleID());
             accessor.addChild(sb);
         }
         adjustScrollBar(sb, w, h, orientation, value, visibleSize, totalSize);
         return new ScrollBarRef(sb);
