diff a/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java b/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java
@@ -164,11 +164,11 @@
                 int start = sel.getStart();
                 int end = sel.getEnd();
                 int length = txt.length();
                 if (end > start + length) end = length;
                 if (start > length-1) start = end = 0;
-                return txt.substring(start, Utils.clamp(0, end, txt.length()));
+                return txt.substring(start, end);
             }
         });
 
         focusedProperty().addListener((ob, o, n) -> {
             if (n) {
@@ -1242,10 +1242,11 @@
         if (end != start) {
             getContent().delete(start, end, value.isEmpty());
             length -= (end - start);
         }
         if (value != null) {
+            doSelectRange(0, 0); // clear selection before replacing to avoid JDK-8176270
             getContent().insert(start, value, true);
             adjustmentAmount = value.length() - (getLength() - length);
             anchor -= adjustmentAmount;
             caretPosition -= adjustmentAmount;
         }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextAreaTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextAreaTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextAreaTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextAreaTest.java
@@ -32,10 +32,11 @@
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.property.StringProperty;
 import javafx.scene.Scene;
 import javafx.scene.control.TextArea;
 import javafx.scene.control.TextInputControlShim;
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 
 import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;
@@ -50,10 +51,29 @@
     private TextArea dummyTxtArea;//With string value
 
     @Before public void setup() {
         txtArea = new TextArea();
         dummyTxtArea = new TextArea("dummy");
+        setUncaughtExceptionHandler();
+    }
+
+    @After public void cleanup() {
+        removeUncaughtExceptionHandler();
+    }
+
+    private void setUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+    }
+
+    private void removeUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
     }
 
     /*********************************************************************
      * Tests for the constructors                                        *
      ********************************************************************/
@@ -485,10 +505,11 @@
 
     @Test public void replaceSelectionAtEndWithListener() {
         StringBuilder log = new StringBuilder();
         txtArea.setText("x xxx");
         txtArea.selectRange(2, 5);
-        txtArea.selectedTextProperty().addListener((__, ___, selection) -> log.append("."));
+        txtArea.selectedTextProperty().addListener((__, ___, selection) -> log.append("|" + selection));
         txtArea.replaceSelection("a");
-        assertFalse(log.toString().isEmpty());
+        assertEquals("|", log.toString());
+        assertEquals("x a", txtArea.getText());
     }
 }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
@@ -68,10 +68,25 @@
     private TextField dummyTxtField;//With string value
 
     @Before public void setup() {
         txtField = new TextField();
         dummyTxtField = new TextField("dummy");
+        setUncaughtExceptionHandler();
+    }
+
+    private void setUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+    }
+
+    private void removeUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
     }
 
     /*********************************************************************
      * Tests for the constructors                                        *
      ********************************************************************/
@@ -449,23 +464,24 @@
     }
 
     @Test public void replaceSelectionAtEndWithListener() {
         StringBuilder log = new StringBuilder();
         txtField.setText("x xxx");
-        txtField.selectedTextProperty().addListener((__, ___, selection) -> log.append("."));
         txtField.selectRange(2, 5);
+        txtField.selectedTextProperty().addListener((__, ___, selection) -> log.append("|" + selection));
         txtField.replaceSelection("a");
-        assertFalse(log.toString().isEmpty());
+        assertEquals("|", log.toString());
+        assertEquals("x a", txtField.getText());
     }
 
 
     /**
      * Helper method to init the stage only if really needed.
      */
     private void initStage() {
         //This step is not needed (Just to make sure StubToolkit is loaded into VM)
-        Toolkit tk = (StubToolkit)Toolkit.getToolkit();
+        Toolkit tk = Toolkit.getToolkit();
         root = new StackPane();
         scene = new Scene(root);
         stage = new Stage();
         stage.setScene(scene);
     }
@@ -473,7 +489,8 @@
     @After
     public void cleanup() {
         if (stage != null) {
             stage.hide();
         }
+        removeUncaughtExceptionHandler();
     }
 }
