diff a/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java b/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java
@@ -118,10 +118,12 @@
          * @return the number of characters
          */
         public int length();
     }
 
+    private boolean blockSelectedTextUpdate;
+
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
      *                                                                         *
      **************************************************************************/
@@ -152,25 +154,12 @@
                 return txt == null ? 0 : txt.length();
             }
         });
 
         // Bind the selected text to be based on the selection and text properties
-        selectedText.bind(new StringBinding() {
-            { bind(selection, text); }
-            @Override protected String computeValue() {
-                String txt = text.get();
-                IndexRange sel = selection.get();
-                if (txt == null || sel == null) return "";
-
-                int start = sel.getStart();
-                int end = sel.getEnd();
-                int length = txt.length();
-                if (end > start + length) end = length;
-                if (start > length-1) start = end = 0;
-                return txt.substring(start, end);
-            }
-        });
+        selection.addListener((ob, o, n) -> updateSelectedText());
+        text.addListener((ob, o, n) -> updateSelectedText());
 
         focusedProperty().addListener((ob, o, n) -> {
             if (n) {
                 if (getTextFormatter() != null) {
                     updateText(getTextFormatter());
@@ -182,10 +171,27 @@
 
         // Specify the default style class
         getStyleClass().add("text-input");
     }
 
+    private void updateSelectedText() {
+        if (!blockSelectedTextUpdate) {
+            String txt = text.get();
+            IndexRange sel = selection.get();
+            if (txt == null || sel == null) {
+                selectedText.set("");
+            } else {
+                int start = sel.getStart();
+                int end = sel.getEnd();
+                int length = txt.length();
+                if (end > start + length) end = length;
+                if (start > length-1) start = end = 0;
+                selectedText.set(txt.substring(start, end));
+            }
+        }
+    }
+
     /***************************************************************************
      *                                                                         *
      * Properties                                                              *
      *                                                                         *
      **************************************************************************/
@@ -1235,27 +1241,30 @@
      *         new lines by the TextField)
      */
     private int replaceText(int start, int end, String value, int anchor, int caretPosition) {
         // RT-16566: Need to take into account stripping of chars into the
         // final anchor & caret position
-        int length = getLength();
-        int adjustmentAmount = 0;
-        if (end != start) {
-            getContent().delete(start, end, value.isEmpty());
-            length -= (end - start);
-        }
-        doSelectRange(anchor, caretPosition);
-        if (value != null) {
-            getContent().insert(start, value, true);
-            adjustmentAmount = value.length() - (getLength() - length);
-            if (adjustmentAmount != 0) {
+        blockSelectedTextUpdate = true;
+        try {
+            int length = getLength();
+            int adjustmentAmount = 0;
+            if (end != start) {
+                getContent().delete(start, end, value.isEmpty());
+                length -= (end - start);
+            }
+            if (value != null) {
+                getContent().insert(start, value, true);
+                adjustmentAmount = value.length() - (getLength() - length);
                 anchor -= adjustmentAmount;
                 caretPosition -= adjustmentAmount;
-                doSelectRange(anchor, caretPosition);
             }
+            doSelectRange(anchor, caretPosition);
+            return adjustmentAmount;
+        } finally {
+            blockSelectedTextUpdate = false;
+            updateSelectedText();
         }
-        return adjustmentAmount;
     }
 
     private <T> void updateText(TextFormatter<T> formatter) {
         T value = formatter.getValue();
         StringConverter<T> converter = formatter.getValueConverter();
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
@@ -51,10 +51,12 @@
 import javafx.event.Event;
 import javafx.event.EventHandler;
 import javafx.scene.Scene;
 import javafx.scene.control.ComboBox;
 import javafx.scene.control.TextField;
+import javafx.scene.control.TextFormatter;
+import javafx.scene.control.TextFormatter.Change;
 import javafx.scene.control.TextInputControlShim;
 import javafx.scene.input.KeyCode;
 import javafx.scene.input.KeyCodeCombination;
 import javafx.scene.input.KeyEvent;
 import javafx.scene.layout.StackPane;
@@ -461,10 +463,26 @@
         keyboard.doKeyPress(ENTER);
         assertEquals("actionHandler must be notified", 1, actions.size());
         assertTrue("action must be consumed ", actions.get(0).isConsumed());
     }
 
+    @Test public void replaceSelectionWithFilteredCharacters() {
+        txtField.setText("x xxxyyy");
+        txtField.selectRange(2, 5);
+        txtField.setTextFormatter(new TextFormatter<>(this::noDigits));
+        txtField.replaceSelection("a1234a");
+        assertEquals("x aayyy", txtField.getText());
+        assertEquals(4, txtField.getSelection().getStart());
+        assertEquals(4, txtField.getSelection().getStart());
+    }
+
+    private Change noDigits(Change change) {
+        Change filtered = change.clone();
+        filtered.setText(change.getText().replaceAll("[0-9]","\n"));
+        return filtered;
+    }
+
     @Test public void replaceSelectionAtEndWithListener() {
         StringBuilder selectedTextLog = new StringBuilder();
         StringBuilder selectionLog = new StringBuilder();
         txtField.setText("x xxx");
         txtField.selectRange(2, 5);
