diff a/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java b/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java
@@ -1241,17 +1241,20 @@
         int adjustmentAmount = 0;
         if (end != start) {
             getContent().delete(start, end, value.isEmpty());
             length -= (end - start);
         }
+        doSelectRange(anchor, caretPosition);
         if (value != null) {
             getContent().insert(start, value, true);
             adjustmentAmount = value.length() - (getLength() - length);
-            anchor -= adjustmentAmount;
-            caretPosition -= adjustmentAmount;
+            if (adjustmentAmount != 0) {
+                anchor -= adjustmentAmount;
+                caretPosition -= adjustmentAmount;
+                doSelectRange(anchor, caretPosition);
+            }
         }
-        doSelectRange(anchor, caretPosition);
         return adjustmentAmount;
     }
 
     private <T> void updateText(TextFormatter<T> formatter) {
         T value = formatter.getValue();
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextAreaTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextAreaTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextAreaTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextAreaTest.java
@@ -32,10 +32,11 @@
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.property.StringProperty;
 import javafx.scene.Scene;
 import javafx.scene.control.TextArea;
 import javafx.scene.control.TextInputControlShim;
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 
 import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;
@@ -50,10 +51,29 @@
     private TextArea dummyTxtArea;//With string value
 
     @Before public void setup() {
         txtArea = new TextArea();
         dummyTxtArea = new TextArea("dummy");
+        setUncaughtExceptionHandler();
+    }
+
+    @After public void cleanup() {
+        removeUncaughtExceptionHandler();
+    }
+
+    private void setUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+    }
+
+    private void removeUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
     }
 
     /*********************************************************************
      * Tests for the constructors                                        *
      ********************************************************************/
@@ -480,6 +500,19 @@
     @Test public void deleteParagraphAndCheckParagraphContents() {
         dummyTxtArea.appendText("\nanother");
         dummyTxtArea.deleteText(0,6);
         assertEquals(dummyTxtArea.getParagraphs().get(0).toString(), "another");
     }
+
+    @Test public void replaceSelectionAtEndWithListener() {
+        StringBuilder selectedTextLog = new StringBuilder();
+        StringBuilder selectionLog = new StringBuilder();
+        txtArea.setText("x xxx");
+        txtArea.selectRange(2, 5);
+        txtArea.selectedTextProperty().addListener((__, ___, selection) -> selectedTextLog.append("|" + selection));
+        txtArea.selectionProperty().addListener((__, ___, selection) -> selectionLog.append("|" + selection.getStart() + "," + selection.getEnd()));
+        txtArea.replaceSelection("a");
+        assertEquals("|", selectedTextLog.toString());
+        assertEquals("|3,3", selectionLog.toString());
+        assertEquals("x a", txtArea.getText());
+    }
 }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
@@ -68,10 +68,25 @@
     private TextField dummyTxtField;//With string value
 
     @Before public void setup() {
         txtField = new TextField();
         dummyTxtField = new TextField("dummy");
+        setUncaughtExceptionHandler();
+    }
+
+    private void setUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+    }
+
+    private void removeUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
     }
 
     /*********************************************************************
      * Tests for the constructors                                        *
      ********************************************************************/
@@ -446,16 +461,30 @@
         keyboard.doKeyPress(ENTER);
         assertEquals("actionHandler must be notified", 1, actions.size());
         assertTrue("action must be consumed ", actions.get(0).isConsumed());
     }
 
+    @Test public void replaceSelectionAtEndWithListener() {
+        StringBuilder selectedTextLog = new StringBuilder();
+        StringBuilder selectionLog = new StringBuilder();
+        txtField.setText("x xxx");
+        txtField.selectRange(2, 5);
+        txtField.selectedTextProperty().addListener((__, ___, selection) -> selectedTextLog.append("|" + selection));
+        txtField.selectionProperty().addListener((__, ___, selection) -> selectionLog.append("|" + selection.getStart() + "," + selection.getEnd()));
+        txtField.replaceSelection("a");
+        assertEquals("|", selectedTextLog.toString());
+        assertEquals("|3,3", selectionLog.toString());
+        assertEquals("x a", txtField.getText());
+    }
+
+
     /**
      * Helper method to init the stage only if really needed.
      */
     private void initStage() {
         //This step is not needed (Just to make sure StubToolkit is loaded into VM)
-        Toolkit tk = (StubToolkit)Toolkit.getToolkit();
+        Toolkit tk = Toolkit.getToolkit();
         root = new StackPane();
         scene = new Scene(root);
         stage = new Stage();
         stage.setScene(scene);
     }
@@ -463,7 +492,8 @@
     @After
     public void cleanup() {
         if (stage != null) {
             stage.hide();
         }
+        removeUncaughtExceptionHandler();
     }
 }
