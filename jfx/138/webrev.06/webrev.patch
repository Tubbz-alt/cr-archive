diff a/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java b/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/TextInputControl.java
@@ -118,10 +118,12 @@
          * @return the number of characters
          */
         public int length();
     }
 
+    private boolean blockSelectedTextUpdate;
+
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
      *                                                                         *
      **************************************************************************/
@@ -152,25 +154,12 @@
                 return txt == null ? 0 : txt.length();
             }
         });
 
         // Bind the selected text to be based on the selection and text properties
-        selectedText.bind(new StringBinding() {
-            { bind(selection, text); }
-            @Override protected String computeValue() {
-                String txt = text.get();
-                IndexRange sel = selection.get();
-                if (txt == null || sel == null) return "";
-
-                int start = sel.getStart();
-                int end = sel.getEnd();
-                int length = txt.length();
-                if (end > start + length) end = length;
-                if (start > length-1) start = end = 0;
-                return txt.substring(start, end);
-            }
-        });
+        selection.addListener((ob, o, n) -> updateSelectedText());
+        text.addListener((ob, o, n) -> updateSelectedText());
 
         focusedProperty().addListener((ob, o, n) -> {
             if (n) {
                 if (getTextFormatter() != null) {
                     updateText(getTextFormatter());
@@ -182,10 +171,24 @@
 
         // Specify the default style class
         getStyleClass().add("text-input");
     }
 
+    private void updateSelectedText() {
+        if (!blockSelectedTextUpdate) {
+            String txt = text.get();
+            IndexRange sel = selection.get();
+            if (txt == null || sel == null) {
+                selectedText.set("");
+            } else {
+                int start = sel.getStart();
+                int end = sel.getEnd();
+                selectedText.set(txt.substring(start, end));
+            }
+        }
+    }
+
     /***************************************************************************
      *                                                                         *
      * Properties                                                              *
      *                                                                         *
      **************************************************************************/
@@ -1137,22 +1140,28 @@
             // Apply reverse change here
             final int start = undoChange.start;
             final String newText = undoChange.newText;
             final String oldText = undoChange.oldText;
 
-            if (newText != null) {
-                getContent().delete(start, start + newText.length(), oldText.isEmpty());
-            }
+            blockSelectedTextUpdate = true;
+            try {
+                if (newText != null) {
+                    getContent().delete(start, start + newText.length(), oldText.isEmpty());
+                }
 
-            if (oldText != null) {
-                getContent().insert(start, oldText, true);
-                doSelectRange(start, start + oldText.length());
-            } else {
-                doSelectRange(start, start + newText.length());
-            }
+                if (oldText != null) {
+                    getContent().insert(start, oldText, true);
+                    doSelectRange(start, start + oldText.length());
+                } else {
+                    doSelectRange(start, start + newText.length());
+                }
 
-            undoChange = undoChange.prev;
+                undoChange = undoChange.prev;
+            } finally {
+                blockSelectedTextUpdate = false;
+                updateSelectedText();
+            }
         }
         updateUndoRedoState();
     }
 
     /**
@@ -1166,19 +1175,25 @@
             undoChange = undoChange.next;
             final int start = undoChange.start;
             final String newText = undoChange.newText;
             final String oldText = undoChange.oldText;
 
-            if (oldText != null) {
-                getContent().delete(start, start + oldText.length(), newText.isEmpty());
-            }
+            blockSelectedTextUpdate = true;
+            try {
+                if (oldText != null) {
+                    getContent().delete(start, start + oldText.length(), newText.isEmpty());
+                }
 
-            if (newText != null) {
-                getContent().insert(start, newText, true);
-                doSelectRange(start + newText.length(), start + newText.length());
-            } else {
-                doSelectRange(start, start);
+                if (newText != null) {
+                    getContent().insert(start, newText, true);
+                    doSelectRange(start + newText.length(), start + newText.length());
+                } else {
+                    doSelectRange(start, start);
+                }
+            } finally {
+                blockSelectedTextUpdate = false;
+                updateSelectedText();
             }
         }
         updateUndoRedoState();
         // else beep ?
     }
@@ -1235,24 +1250,30 @@
      *         new lines by the TextField)
      */
     private int replaceText(int start, int end, String value, int anchor, int caretPosition) {
         // RT-16566: Need to take into account stripping of chars into the
         // final anchor & caret position
-        int length = getLength();
-        int adjustmentAmount = 0;
-        if (end != start) {
-            getContent().delete(start, end, value.isEmpty());
-            length -= (end - start);
-        }
-        if (value != null) {
-            getContent().insert(start, value, true);
-            adjustmentAmount = value.length() - (getLength() - length);
-            anchor -= adjustmentAmount;
-            caretPosition -= adjustmentAmount;
+        blockSelectedTextUpdate = true;
+        try {
+            int length = getLength();
+            int adjustmentAmount = 0;
+            if (end != start) {
+                getContent().delete(start, end, value.isEmpty());
+                length -= (end - start);
+            }
+            if (value != null) {
+                getContent().insert(start, value, true);
+                adjustmentAmount = value.length() - (getLength() - length);
+                anchor -= adjustmentAmount;
+                caretPosition -= adjustmentAmount;
+            }
+            doSelectRange(anchor, caretPosition);
+            return adjustmentAmount;
+        } finally {
+            blockSelectedTextUpdate = false;
+            updateSelectedText();
         }
-        doSelectRange(anchor, caretPosition);
-        return adjustmentAmount;
     }
 
     private <T> void updateText(TextFormatter<T> formatter) {
         T value = formatter.getValue();
         StringConverter<T> converter = formatter.getValueConverter();
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextAreaTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextAreaTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextAreaTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextAreaTest.java
@@ -32,10 +32,11 @@
 import javafx.beans.property.SimpleStringProperty;
 import javafx.beans.property.StringProperty;
 import javafx.scene.Scene;
 import javafx.scene.control.TextArea;
 import javafx.scene.control.TextInputControlShim;
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 
 import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;
@@ -50,10 +51,29 @@
     private TextArea dummyTxtArea;//With string value
 
     @Before public void setup() {
         txtArea = new TextArea();
         dummyTxtArea = new TextArea("dummy");
+        setUncaughtExceptionHandler();
+    }
+
+    @After public void cleanup() {
+        removeUncaughtExceptionHandler();
+    }
+
+    private void setUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+    }
+
+    private void removeUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
     }
 
     /*********************************************************************
      * Tests for the constructors                                        *
      ********************************************************************/
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextFieldTest.java
@@ -51,10 +51,12 @@
 import javafx.event.Event;
 import javafx.event.EventHandler;
 import javafx.scene.Scene;
 import javafx.scene.control.ComboBox;
 import javafx.scene.control.TextField;
+import javafx.scene.control.TextFormatter;
+import javafx.scene.control.TextFormatter.Change;
 import javafx.scene.control.TextInputControlShim;
 import javafx.scene.input.KeyCode;
 import javafx.scene.input.KeyCodeCombination;
 import javafx.scene.input.KeyEvent;
 import javafx.scene.layout.StackPane;
@@ -68,10 +70,25 @@
     private TextField dummyTxtField;//With string value
 
     @Before public void setup() {
         txtField = new TextField();
         dummyTxtField = new TextField("dummy");
+        setUncaughtExceptionHandler();
+    }
+
+    private void setUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+    }
+
+    private void removeUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
     }
 
     /*********************************************************************
      * Tests for the constructors                                        *
      ********************************************************************/
@@ -446,16 +463,32 @@
         keyboard.doKeyPress(ENTER);
         assertEquals("actionHandler must be notified", 1, actions.size());
         assertTrue("action must be consumed ", actions.get(0).isConsumed());
     }
 
+    @Test public void replaceSelectionWithFilteredCharacters() {
+        txtField.setText("x xxxyyy");
+        txtField.selectRange(2, 5);
+        txtField.setTextFormatter(new TextFormatter<>(this::noDigits));
+        txtField.replaceSelection("a1234a");
+        assertEquals("x aayyy", txtField.getText());
+        assertEquals(4, txtField.getSelection().getStart());
+        assertEquals(4, txtField.getSelection().getStart());
+    }
+
+    private Change noDigits(Change change) {
+        Change filtered = change.clone();
+        filtered.setText(change.getText().replaceAll("[0-9]","\n"));
+        return filtered;
+    }
+
     /**
      * Helper method to init the stage only if really needed.
      */
     private void initStage() {
         //This step is not needed (Just to make sure StubToolkit is loaded into VM)
-        Toolkit tk = (StubToolkit)Toolkit.getToolkit();
+        Toolkit tk = Toolkit.getToolkit();
         root = new StackPane();
         scene = new Scene(root);
         stage = new Stage();
         stage.setScene(scene);
     }
@@ -463,7 +496,8 @@
     @After
     public void cleanup() {
         if (stage != null) {
             stage.hide();
         }
+        removeUncaughtExceptionHandler();
     }
 }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextInputControlTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextInputControlTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextInputControlTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TextInputControlTest.java
@@ -50,10 +50,12 @@
 import javafx.scene.control.PasswordField;
 import javafx.scene.control.TextArea;
 import javafx.scene.control.TextField;
 import javafx.scene.control.TextInputControl;
 import com.sun.javafx.tk.Toolkit;
+
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;
@@ -83,10 +85,29 @@
         this.type = type;
     }
 
     @Before public void setup() throws Exception {
         textInput = (TextInputControl) type.newInstance();
+        setUncaughtExceptionHandler();
+    }
+
+    @After public void cleanup() {
+        removeUncaughtExceptionHandler();
+    }
+
+    private void setUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+    }
+
+    private void removeUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
     }
 
     /******************************************************
      * Test the default states                            *
      *****************************************************/
@@ -1863,10 +1884,68 @@
 
         textInput.undo();
         assertEquals("", textInput.getText());
     }
 
+    @Test public void test_redo_replaceText_selectionShortening() {
+        textInput.setText("0123456789");
+        assertEquals("0123456789", textInput.getText());
+
+        textInput.replaceText(8, 10, "x");
+        assertEquals("01234567x", textInput.getText());
+
+        textInput.undo();
+        assertEquals("0123456789", textInput.getText());
+
+        textInput.redo();
+        assertEquals("01234567x", textInput.getText());
+    }
+
+    @Test public void replaceSelectionAtEndWithListener() {
+        StringBuilder selectedTextLog = new StringBuilder();
+        StringBuilder selectionLog = new StringBuilder();
+        textInput.setText("x xxx");
+        textInput.selectRange(2, 5);
+        textInput.selectedTextProperty().addListener((__, ___, selection) -> selectedTextLog.append("|" + selection));
+        textInput.selectionProperty().addListener((__, ___, selection) -> selectionLog.append("|" + selection.getStart() + "," + selection.getEnd()));
+        textInput.replaceSelection("a");
+        assertEquals("|", selectedTextLog.toString());
+        assertEquals("|3,3", selectionLog.toString());
+        assertEquals("x a", textInput.getText());
+    }
+
+    @Test public void testSelectionProperties() {
+        textInput.setText("abcdefghij");
+
+        StringBuilder selectedTextLog = new StringBuilder();
+        StringBuilder selectionLog = new StringBuilder();
+        StringBuilder textLog = new StringBuilder();
+        textInput.selectedTextProperty().addListener((__, ___, selection) -> selectedTextLog.append("|" + selection));
+        textInput.selectionProperty().addListener((__, ___, selection) -> selectionLog.append("|" + selection.getStart() + "," + selection.getEnd()));
+        textInput.textProperty().addListener((__, ___, text) -> textLog.append("|" + text));
+
+        textInput.selectRange(3, 6);
+        assertEquals("|def", selectedTextLog.toString());
+        assertEquals("|3,6", selectionLog.toString());
+        assertEquals("", textLog.toString());
+
+        textInput.replaceSelection("xyz");
+        assertEquals("|def|", selectedTextLog.toString());
+        assertEquals("|3,6|6,6", selectionLog.toString());
+        assertEquals("|abcxyzghij", textLog.toString());
+
+        textInput.undo();
+        assertEquals("|def||def", selectedTextLog.toString());
+        assertEquals("|3,6|6,6|3,6", selectionLog.toString());
+        assertEquals("|abcxyzghij|abcdefghij", textLog.toString());
+
+        textInput.redo();
+        assertEquals("|def||def|", selectedTextLog.toString());
+        assertEquals("|3,6|6,6|3,6|6,6", selectionLog.toString());
+        assertEquals("|abcxyzghij|abcdefghij|abcxyzghij", textLog.toString());
+    }
+
     // Test for JDK-8178418
     @Test public void UndoRedoSpaceSequence() {
         Toolkit tk = (StubToolkit)Toolkit.getToolkit();
         StackPane root = new StackPane();
         Scene scene = new Scene(root);
