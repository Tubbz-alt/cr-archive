diff a/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java b/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java
--- a/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java
+++ b/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java
@@ -1562,11 +1562,11 @@
                     Bindings engineBindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);
                     String filename = location.getPath();
                     engineBindings.put(engine.FILENAME, filename);
 
                     InputStreamReader scriptReader = null;
-                    String script=null;
+                    String script = null;
                     try {
                         scriptReader = new InputStreamReader(location.openStream(), charset);
                         StringBuilder sb = new StringBuilder();
                         final int bufSize = 4096;
                         char[] charBuffer = new char[bufSize];
@@ -1587,11 +1587,11 @@
                     }
                     try {
                         if (engine instanceof Compilable && compileScript) {
                             CompiledScript compiledScript = null;
                             try {
-                                compiledScript=((Compilable) engine).compile(script);
+                                compiledScript = ((Compilable) engine).compile(script);
                             } catch (ScriptException compileExc) {
                                 Logging.getJavaFXLogger().warning(filename + ": compiling caused \"" + compileExc +
                                     "\", falling back to evaluating script in uncompiled mode");
                             }
                             if (compiledScript != null) {
@@ -1627,11 +1627,11 @@
                                        + (getLineNumber() - (int) script.codePoints().filter(c -> c == '\n').count());
                     engineBindings.put(scriptEngine.FILENAME, filename);
                     if (scriptEngine instanceof Compilable && compileScript) {
                         CompiledScript compiledScript = null;
                         try {
-                            compiledScript=((Compilable) scriptEngine).compile(script);
+                            compiledScript = ((Compilable) scriptEngine).compile(script);
                         } catch (ScriptException compileExc) {
                             Logging.getJavaFXLogger().warning(filename + ": compiling caused \"" + compileExc +
                                 "\", falling back to evaluating script in uncompiled mode");
                         }
                         if (compiledScript != null) {
@@ -1734,11 +1734,11 @@
     private static class ScriptEventHandler implements EventHandler<Event> {
         public final String script;
         public final ScriptEngine scriptEngine;
         public final String filename;
         public CompiledScript compiledScript;
-        public boolean isCompiled=false;
+        public boolean isCompiled = false;
 
         public ScriptEventHandler(String script, ScriptEngine scriptEngine, String filename) {
             this.script = script;
             this.scriptEngine = scriptEngine;
             this.filename = filename;
@@ -2755,13 +2755,13 @@
         if (piTarget.equals(LANGUAGE_PROCESSING_INSTRUCTION)) {
             processLanguage();
         } else if (piTarget.equals(IMPORT_PROCESSING_INSTRUCTION)) {
             processImport();
         } else if (piTarget.equals(COMPILE_PROCESSING_INSTRUCTION)) {
-            String strCompile=xmlStreamReader.getPIData().trim();
+            String strCompile = xmlStreamReader.getPIData().trim();
             // if PIData() is empty string then default to true, otherwise use Boolean.parseBoolean(string) to determine the boolean value
-            compileScript = (strCompile.length()==0 ? true : Boolean.parseBoolean(strCompile));
+            compileScript = (strCompile.length() == 0 ? true : Boolean.parseBoolean(strCompile));
         }
     }
 
     private void processLanguage() throws LoadException {
         if (scriptEngine != null) {
diff a/tests/system/src/test/java/test/launchertest/ModuleLauncherTest.java b/tests/system/src/test/java/test/launchertest/ModuleLauncherTest.java
--- a/tests/system/src/test/java/test/launchertest/ModuleLauncherTest.java
+++ b/tests/system/src/test/java/test/launchertest/ModuleLauncherTest.java
@@ -304,7 +304,5 @@
     @Test (timeout = 15000)
     public void testFXMLScriptDeployment2Compile_Fail_Compilation() throws Exception {
         doTestLaunchModule(modulePathScript2, "myapp2.FXMLScriptDeployment2Compile_Fail_Compilation");
     }
 }
-
-
diff a/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_Fail_Compilation.java b/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_Fail_Compilation.java
--- a/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_Fail_Compilation.java
+++ b/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_Fail_Compilation.java
@@ -105,27 +105,27 @@
         }
             // fire three events on the button
         btn.fire();
         btn.fireEvent(new ActionEvent());
         btn.fireEvent(new MouseEvent(MouseEvent.MOUSE_CLICKED,
-                                       0,       // double x,
-                                       0,       // double y,
-                                       0,       // double screenX,
-                                       0,       // double screenY,
-                                       MouseButton.PRIMARY,         // MouseButton button,
-                                       0,       // int clickCount,
-                                       false,   // boolean shiftDown,
-                                       false,   // boolean controlDown,
-                                       false,   // boolean altDown,
-                                       false,   // boolean metaDown,
-                                       true,    // boolean primaryButtonDown,
-                                       false,   // boolean middleButtonDown,
-                                       false,   // boolean secondaryButtonDown,
-                                       false,   // boolean synthesized,
-                                       false,   // boolean popupTrigger,
-                                       false,   // boolean stillSincePress,
-                                       null     // PickResult pickResult
+                                     0,       // double x,
+                                     0,       // double y,
+                                     0,       // double screenX,
+                                     0,       // double screenY,
+                                     MouseButton.PRIMARY,         // MouseButton button,
+                                     0,       // int clickCount,
+                                     false,   // boolean shiftDown,
+                                     false,   // boolean controlDown,
+                                     false,   // boolean altDown,
+                                     false,   // boolean metaDown,
+                                     true,    // boolean primaryButtonDown,
+                                     false,   // boolean middleButtonDown,
+                                     false,   // boolean secondaryButtonDown,
+                                     false,   // boolean synthesized,
+                                     false,   // boolean popupTrigger,
+                                     false,   // boolean stillSincePress,
+                                     null     // PickResult pickResult
                                      )
                       );
 
         // mainStage.setScene(scene);
         // mainStage.show();
@@ -169,11 +169,11 @@
         final String IDBUTTON = "idButton";
         final String IDROOT = "idRoot";
         final String LOCATION = "location";    // always FXML File hosting script controller code
         final String RESOURCES = "resources";   // always null in this test
 
-        for (Integer invocation = 1; invocation <= invocationList.size(); invocation++) {
+        for (int invocation = 1; invocation <= invocationList.size(); invocation++) {
             InvocationInfos entry = (InvocationInfos) invocationList.get(invocation - 1);
             String script = entry.script;
             TreeMap<Integer,TreeMap> scopes = (TreeMap) entry.bindings;
 
             TreeMap<String,Object> engineBindings = scopes.get(100);
@@ -266,16 +266,18 @@
                     Util.assertStartsWith("demo_03_fail_compile.fxml (line # 59):", script);
                     break;
 
                 case 7:     // same as case 8 (same button clicked)
                     Util.assertEndsWith("demo_03_fail_compile.fxml-onAction_attribute_in_element_ending_at_line_46", filename);
-                    Util.assertStartsWith("demo_03_fail_compile.fxml embedded event - ActionEvent - line # 45 - LF entity (&#10;) forces linebreak in attribute value:", script);
+                    Util.assertStartsWith("demo_03_fail_compile.fxml embedded event - ActionEvent - line # 45 - LF entity (&#10;) " +
+                                          "forces linebreak in attribute value:", script);
                     break;
 
                 case 8:     // same as case 7 (same button clicked)
                     Util.assertEndsWith("demo_03_fail_compile.fxml-onAction_attribute_in_element_ending_at_line_46", filename);
-                    Util.assertStartsWith("demo_03_fail_compile.fxml embedded event - ActionEvent - line # 45 - LF entity (&#10;) forces linebreak in attribute value:", script);
+                    Util.assertStartsWith("demo_03_fail_compile.fxml embedded event - ActionEvent - line # 45 - LF entity (&#10;) " +
+                                          "forces linebreak in attribute value:", script);
                     break;
 
                 case 9:
                     Util.assertEndsWith("demo_03_fail_compile.fxml-onMouseClicked_attribute_in_element_ending_at_line_46", filename);
                     Util.assertStartsWith("demo_03_fail_compile.fxml embedded event - MouseClicked - line # 44 (PCDATA)", script);
diff a/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_Off.java b/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_Off.java
--- a/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_Off.java
+++ b/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_Off.java
@@ -105,27 +105,27 @@
         }
             // fire three events on the button
         btn.fire();
         btn.fireEvent(new ActionEvent());
         btn.fireEvent(new MouseEvent(MouseEvent.MOUSE_CLICKED,
-                                       0,       // double x,
-                                       0,       // double y,
-                                       0,       // double screenX,
-                                       0,       // double screenY,
-                                       MouseButton.PRIMARY,         // MouseButton button,
-                                       0,       // int clickCount,
-                                       false,   // boolean shiftDown,
-                                       false,   // boolean controlDown,
-                                       false,   // boolean altDown,
-                                       false,   // boolean metaDown,
-                                       true,    // boolean primaryButtonDown,
-                                       false,   // boolean middleButtonDown,
-                                       false,   // boolean secondaryButtonDown,
-                                       false,   // boolean synthesized,
-                                       false,   // boolean popupTrigger,
-                                       false,   // boolean stillSincePress,
-                                       null     // PickResult pickResult
+                                     0,       // double x,
+                                     0,       // double y,
+                                     0,       // double screenX,
+                                     0,       // double screenY,
+                                     MouseButton.PRIMARY,         // MouseButton button,
+                                     0,       // int clickCount,
+                                     false,   // boolean shiftDown,
+                                     false,   // boolean controlDown,
+                                     false,   // boolean altDown,
+                                     false,   // boolean metaDown,
+                                     true,    // boolean primaryButtonDown,
+                                     false,   // boolean middleButtonDown,
+                                     false,   // boolean secondaryButtonDown,
+                                     false,   // boolean synthesized,
+                                     false,   // boolean popupTrigger,
+                                     false,   // boolean stillSincePress,
+                                     null     // PickResult pickResult
                                      )
                       );
 
         // mainStage.setScene(scene);
         // mainStage.show();
@@ -169,11 +169,11 @@
         final String IDBUTTON = "idButton";
         final String IDROOT = "idRoot";
         final String LOCATION = "location";    // always FXML File hosting script controller code
         final String RESOURCES = "resources";   // always null in this test
 
-        for (Integer invocation = 1; invocation <= invocationList.size(); invocation++) {
+        for (int invocation = 1; invocation <= invocationList.size(); invocation++) {
             InvocationInfos entry = (InvocationInfos) invocationList.get(invocation - 1);
             String script = entry.script;
             TreeMap<Integer,TreeMap> scopes = (TreeMap) entry.bindings;
 
             TreeMap<String,Object> engineBindings = scopes.get(100);
@@ -266,16 +266,18 @@
                     Util.assertStartsWith("demo_02_off.fxml (line # 59):", script);
                     break;
 
                 case 7:     // same as case 8 (same button clicked)
                     Util.assertEndsWith("demo_02_off.fxml-onAction_attribute_in_element_ending_at_line_46", filename);
-                    Util.assertStartsWith("demo_02_off.fxml embedded event - ActionEvent - line # 45 - LF entity (&#10;) forces linebreak in attribute value:", script);
+                    Util.assertStartsWith("demo_02_off.fxml embedded event - ActionEvent - line # 45 - LF entity (&#10;) " +
+                                          "forces linebreak in attribute value:", script);
                     break;
 
                 case 8:     // same as case 7 (same button clicked)
                     Util.assertEndsWith("demo_02_off.fxml-onAction_attribute_in_element_ending_at_line_46", filename);
-                    Util.assertStartsWith("demo_02_off.fxml embedded event - ActionEvent - line # 45 - LF entity (&#10;) forces linebreak in attribute value:", script);
+                    Util.assertStartsWith("demo_02_off.fxml embedded event - ActionEvent - line # 45 - LF entity (&#10;) " +
+                                          "forces linebreak in attribute value:", script);
                     break;
 
                 case 9:
                     Util.assertEndsWith("demo_02_off.fxml-onMouseClicked_attribute_in_element_ending_at_line_46", filename);
                     Util.assertStartsWith("demo_02_off.fxml embedded event - MouseClicked - line # 44 (PCDATA)", script);
diff a/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_Off_On.java b/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_Off_On.java
--- a/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_Off_On.java
+++ b/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_Off_On.java
@@ -105,27 +105,27 @@
         }
             // fire three events on the button
         btn.fire();
         btn.fireEvent(new ActionEvent());
         btn.fireEvent(new MouseEvent(MouseEvent.MOUSE_CLICKED,
-                                       0,       // double x,
-                                       0,       // double y,
-                                       0,       // double screenX,
-                                       0,       // double screenY,
-                                       MouseButton.PRIMARY,         // MouseButton button,
-                                       0,       // int clickCount,
-                                       false,   // boolean shiftDown,
-                                       false,   // boolean controlDown,
-                                       false,   // boolean altDown,
-                                       false,   // boolean metaDown,
-                                       true,    // boolean primaryButtonDown,
-                                       false,   // boolean middleButtonDown,
-                                       false,   // boolean secondaryButtonDown,
-                                       false,   // boolean synthesized,
-                                       false,   // boolean popupTrigger,
-                                       false,   // boolean stillSincePress,
-                                       null     // PickResult pickResult
+                                     0,       // double x,
+                                     0,       // double y,
+                                     0,       // double screenX,
+                                     0,       // double screenY,
+                                     MouseButton.PRIMARY,         // MouseButton button,
+                                     0,       // int clickCount,
+                                     false,   // boolean shiftDown,
+                                     false,   // boolean controlDown,
+                                     false,   // boolean altDown,
+                                     false,   // boolean metaDown,
+                                     true,    // boolean primaryButtonDown,
+                                     false,   // boolean middleButtonDown,
+                                     false,   // boolean secondaryButtonDown,
+                                     false,   // boolean synthesized,
+                                     false,   // boolean popupTrigger,
+                                     false,   // boolean stillSincePress,
+                                     null     // PickResult pickResult
                                      )
                       );
 
         // mainStage.setScene(scene);
         // mainStage.show();
@@ -169,11 +169,11 @@
         final String IDBUTTON = "idButton";
         final String IDROOT = "idRoot";
         final String LOCATION = "location";    // always FXML File hosting script controller code
         final String RESOURCES = "resources";   // always null in this test
 
-        for (Integer invocation = 1; invocation <= invocationList.size(); invocation++) {
+        for (int invocation = 1; invocation <= invocationList.size(); invocation++) {
             InvocationInfos entry = (InvocationInfos) invocationList.get(invocation - 1);
             String script = entry.script;
             TreeMap<Integer,TreeMap> scopes = (TreeMap) entry.bindings;
 
             TreeMap<String,Object> engineBindings = scopes.get(100);
@@ -251,11 +251,12 @@
                     Util.assertStartsWith("demo_02_off_on.fxml embedded script sqtmc - line # 52", script);
                     break;
 
                 case 4:
                     Util.assertEndsWith  ("demo_02_bottomscript.sqtmc", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_bottomscript.sqtmc file - pseudo script", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_bottomscript.sqtmc file - " +
+                                          "pseudo script", script);
                     break;
 
                 case 5:
                     Util.assertEndsWith("demo_02_off_on.fxml-script_starting_at_line_56", filename);
                     Util.assertStartsWith("something (line # 56)(PCDATA)", script);
@@ -266,21 +267,24 @@
                     Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_off_on.fxml (line # 59):", script);
                     break;
 
                 case 7:     // same as case 8 (same button clicked)
                     Util.assertEndsWith("demo_02_off_on.fxml-onAction_attribute_in_element_ending_at_line_46", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(Bindings bindings): RgfPseudoCompiledScript=[demo_02_off_on.fxml embedded event - ActionEvent - line # 45 -", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(Bindings bindings): RgfPseudoCompiledScript=[demo_02_off_on.fxml " +
+                                          "embedded event - ActionEvent - line # 45 -", script);
                     break;
 
                 case 8:     // same as case 7 (same button clicked)
                     Util.assertEndsWith("demo_02_off_on.fxml-onAction_attribute_in_element_ending_at_line_46", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(Bindings bindings): RgfPseudoCompiledScript=[demo_02_off_on.fxml embedded event - ActionEvent - line # 45 -", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(Bindings bindings): RgfPseudoCompiledScript=[demo_02_off_on.fxml " +
+                                          "embedded event - ActionEvent - line # 45 -", script);
                     break;
 
                 case 9:
                     Util.assertEndsWith("demo_02_off_on.fxml-onMouseClicked_attribute_in_element_ending_at_line_46", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(Bindings bindings): RgfPseudoCompiledScript=[demo_02_off_on.fxml embedded event - MouseClicked - line # 44", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(Bindings bindings): RgfPseudoCompiledScript=[demo_02_off_on.fxml " +
+                                          "embedded event - MouseClicked - line # 44", script);
                     break;
             }
         }
     }
 }
diff a/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_On.java b/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_On.java
--- a/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_On.java
+++ b/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_On.java
@@ -105,27 +105,27 @@
         }
             // fire three events on the button
         btn.fire();
         btn.fireEvent(new ActionEvent());
         btn.fireEvent(new MouseEvent(MouseEvent.MOUSE_CLICKED,
-                                       0,       // double x,
-                                       0,       // double y,
-                                       0,       // double screenX,
-                                       0,       // double screenY,
-                                       MouseButton.PRIMARY,         // MouseButton button,
-                                       0,       // int clickCount,
-                                       false,   // boolean shiftDown,
-                                       false,   // boolean controlDown,
-                                       false,   // boolean altDown,
-                                       false,   // boolean metaDown,
-                                       true,    // boolean primaryButtonDown,
-                                       false,   // boolean middleButtonDown,
-                                       false,   // boolean secondaryButtonDown,
-                                       false,   // boolean synthesized,
-                                       false,   // boolean popupTrigger,
-                                       false,   // boolean stillSincePress,
-                                       null     // PickResult pickResult
+                                     0,       // double x,
+                                     0,       // double y,
+                                     0,       // double screenX,
+                                     0,       // double screenY,
+                                     MouseButton.PRIMARY,         // MouseButton button,
+                                     0,       // int clickCount,
+                                     false,   // boolean shiftDown,
+                                     false,   // boolean controlDown,
+                                     false,   // boolean altDown,
+                                     false,   // boolean metaDown,
+                                     true,    // boolean primaryButtonDown,
+                                     false,   // boolean middleButtonDown,
+                                     false,   // boolean secondaryButtonDown,
+                                     false,   // boolean synthesized,
+                                     false,   // boolean popupTrigger,
+                                     false,   // boolean stillSincePress,
+                                     null     // PickResult pickResult
                                      )
                       );
 
         // mainStage.setScene(scene);
         // mainStage.show();
@@ -169,11 +169,11 @@
         final String IDBUTTON = "idButton";
         final String IDROOT = "idRoot";
         final String LOCATION = "location";    // always FXML File hosting script controller code
         final String RESOURCES = "resources";   // always null in this test
 
-        for (Integer invocation = 1; invocation <= invocationList.size(); invocation++) {
+        for (int invocation = 1; invocation <= invocationList.size(); invocation++) {
             InvocationInfos entry = (InvocationInfos) invocationList.get(invocation - 1);
             String script = entry.script;
             TreeMap<Integer,TreeMap> scopes = (TreeMap) entry.bindings;
 
             TreeMap<String,Object> engineBindings = scopes.get(100);
@@ -236,26 +236,30 @@
             String filename = (String) engineBindings.get(FILENAME);
             boolean ok = false;
             switch (invocation) {
                 case 1:
                     Util.assertEndsWith  ("demo_02_topscript.sqtmc", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_topscript.sqtmc file - pseudo script", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_topscript.sqtmc " +
+                                          "file - pseudo script", script);
                     break;
 
                 case 2:
                     Util.assertEndsWith  ("demo_02_middlescript.sqtmc", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_middlescript.sqtmc file - pseudo script", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_middlescript.sqtmc " +
+                                          "file - pseudo script", script);
                     break;
 
                 case 3:
                     Util.assertEndsWith("demo_02_on.fxml-script_starting_at_line_52", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_on.fxml embedded script sqtmc - line # 52", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_on.fxml embedded " +
+                                          "script sqtmc - line # 52", script);
                     break;
 
                 case 4:
                     Util.assertEndsWith  ("demo_02_bottomscript.sqtmc", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_bottomscript.sqtmc file - pseudo script", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_bottomscript.sqtmc " +
+                                          "file - pseudo script", script);
                     break;
 
                 case 5:
                     Util.assertEndsWith("demo_02_on.fxml-script_starting_at_line_56", filename);
                     Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[something (line # 56)", script);
@@ -266,21 +270,24 @@
                     Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_on.fxml (line # 59):", script);
                     break;
 
                 case 7:     // same as case 8 (same button clicked)
                     Util.assertEndsWith("demo_02_on.fxml-onAction_attribute_in_element_ending_at_line_46", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(Bindings bindings): RgfPseudoCompiledScript=[demo_02_on.fxml embedded event - ActionEvent - line # 45 -", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(Bindings bindings): RgfPseudoCompiledScript=[demo_02_on.fxml " +
+                                          "embedded event - ActionEvent - line # 45 -", script);
                     break;
 
                 case 8:     // same as case 7 (same button clicked)
                     Util.assertEndsWith("demo_02_on.fxml-onAction_attribute_in_element_ending_at_line_46", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(Bindings bindings): RgfPseudoCompiledScript=[demo_02_on.fxml embedded event - ActionEvent - line # 45 -", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(Bindings bindings): RgfPseudoCompiledScript=[demo_02_on.fxml " +
+                                          "embedded event - ActionEvent - line # 45 -", script);
                     break;
 
                 case 9:
                     Util.assertEndsWith("demo_02_on.fxml-onMouseClicked_attribute_in_element_ending_at_line_46", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(Bindings bindings): RgfPseudoCompiledScript=[demo_02_on.fxml embedded event - MouseClicked - line # 44", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(Bindings bindings): RgfPseudoCompiledScript=[demo_02_on.fxml " +
+                                          "embedded event - MouseClicked - line # 44", script);
                     break;
             }
         }
     }
 }
diff a/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_On_Off.java b/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_On_Off.java
--- a/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_On_Off.java
+++ b/tests/system/src/testscriptapp2/java/mymod/myapp2/FXMLScriptDeployment2Compile_On_Off.java
@@ -105,27 +105,27 @@
         }
             // fire three events on the button
         btn.fire();
         btn.fireEvent(new ActionEvent());
         btn.fireEvent(new MouseEvent(MouseEvent.MOUSE_CLICKED,
-                                       0,       // double x,
-                                       0,       // double y,
-                                       0,       // double screenX,
-                                       0,       // double screenY,
-                                       MouseButton.PRIMARY,         // MouseButton button,
-                                       0,       // int clickCount,
-                                       false,   // boolean shiftDown,
-                                       false,   // boolean controlDown,
-                                       false,   // boolean altDown,
-                                       false,   // boolean metaDown,
-                                       true,    // boolean primaryButtonDown,
-                                       false,   // boolean middleButtonDown,
-                                       false,   // boolean secondaryButtonDown,
-                                       false,   // boolean synthesized,
-                                       false,   // boolean popupTrigger,
-                                       false,   // boolean stillSincePress,
-                                       null     // PickResult pickResult
+                                     0,       // double x,
+                                     0,       // double y,
+                                     0,       // double screenX,
+                                     0,       // double screenY,
+                                     MouseButton.PRIMARY,         // MouseButton button,
+                                     0,       // int clickCount,
+                                     false,   // boolean shiftDown,
+                                     false,   // boolean controlDown,
+                                     false,   // boolean altDown,
+                                     false,   // boolean metaDown,
+                                     true,    // boolean primaryButtonDown,
+                                     false,   // boolean middleButtonDown,
+                                     false,   // boolean secondaryButtonDown,
+                                     false,   // boolean synthesized,
+                                     false,   // boolean popupTrigger,
+                                     false,   // boolean stillSincePress,
+                                     null     // PickResult pickResult
                                      )
                       );
 
         // mainStage.setScene(scene);
         // mainStage.show();
@@ -169,11 +169,11 @@
         final String IDBUTTON = "idButton";
         final String IDROOT = "idRoot";
         final String LOCATION = "location";    // always FXML File hosting script controller code
         final String RESOURCES = "resources";   // always null in this test
 
-        for (Integer invocation = 1; invocation <= invocationList.size(); invocation++) {
+        for (int invocation = 1; invocation <= invocationList.size(); invocation++) {
             InvocationInfos entry = (InvocationInfos) invocationList.get(invocation - 1);
             String script = entry.script;
             TreeMap<Integer,TreeMap> scopes = (TreeMap) entry.bindings;
 
             TreeMap<String,Object> engineBindings = scopes.get(100);
@@ -236,26 +236,29 @@
             String filename = (String) engineBindings.get(FILENAME);
             boolean ok = false;
             switch (invocation) {
                 case 1:
                     Util.assertEndsWith  ("demo_02_topscript.sqtmc", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_topscript.sqtmc file - pseudo script", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_topscript.sqtmc file - " +
+                                          "pseudo script", script);
                     break;
 
                 case 2:
                     Util.assertEndsWith  ("demo_02_middlescript.sqtmc", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_middlescript.sqtmc file - pseudo script", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_middlescript.sqtmc file - " +
+                                          "pseudo script", script);
                     break;
 
                 case 3:
                     Util.assertEndsWith("demo_02_on_off.fxml-script_starting_at_line_52", filename);
                     Util.assertStartsWith("demo_02_on_off.fxml embedded script sqtmc - line # 52", script);
                     break;
 
                 case 4:
                     Util.assertEndsWith  ("demo_02_bottomscript.sqtmc", filename);
-                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_bottomscript.sqtmc file - pseudo script", script);
+                    Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_bottomscript.sqtmc file - " +
+                                          "pseudo script", script);
                     break;
 
                 case 5:
                     Util.assertEndsWith("demo_02_on_off.fxml-script_starting_at_line_56", filename);
                     Util.assertStartsWith("something (line # 56)(PCDATA)", script);
@@ -266,16 +269,18 @@
                     Util.assertStartsWith("RgfPseudoCompiledScript.eval(): RgfPseudoCompiledScript=[demo_02_on_off.fxml (line # 59):", script);
                     break;
 
                 case 7:     // same as case 8 (same button clicked)
                     Util.assertEndsWith("demo_02_on_off.fxml-onAction_attribute_in_element_ending_at_line_46", filename);
-                    Util.assertStartsWith("demo_02_on_off.fxml embedded event - ActionEvent - line # 45 - LF entity (&#10;) forces linebreak", script);
+                    Util.assertStartsWith("demo_02_on_off.fxml embedded event - ActionEvent - line # 45 - LF entity (&#10;) forces " +
+                                          "linebreak", script);
                     break;
 
                 case 8:     // same as case 7 (same button clicked)
                     Util.assertEndsWith("demo_02_on_off.fxml-onAction_attribute_in_element_ending_at_line_46", filename);
-                    Util.assertStartsWith("demo_02_on_off.fxml embedded event - ActionEvent - line # 45 - LF entity (&#10;) forces linebreak", script);
+                    Util.assertStartsWith("demo_02_on_off.fxml embedded event - ActionEvent - line # 45 - LF entity (&#10;) forces " +
+                                          "linebreak", script);
                     break;
 
                 case 9:
                     Util.assertEndsWith("demo_02_on_off.fxml-onMouseClicked_attribute_in_element_ending_at_line_46", filename);
                     Util.assertStartsWith("demo_02_on_off.fxml embedded event - MouseClicked - line # 44 (PCDATA)", script);
