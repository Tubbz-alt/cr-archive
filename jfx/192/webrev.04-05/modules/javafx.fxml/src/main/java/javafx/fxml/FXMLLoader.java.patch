diff a/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java b/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java
--- a/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java
+++ b/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java
@@ -1562,11 +1562,11 @@
                     Bindings engineBindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);
                     String filename = location.getPath();
                     engineBindings.put(engine.FILENAME, filename);
 
                     InputStreamReader scriptReader = null;
-                    String script=null;
+                    String script = null;
                     try {
                         scriptReader = new InputStreamReader(location.openStream(), charset);
                         StringBuilder sb = new StringBuilder();
                         final int bufSize = 4096;
                         char[] charBuffer = new char[bufSize];
@@ -1587,11 +1587,11 @@
                     }
                     try {
                         if (engine instanceof Compilable && compileScript) {
                             CompiledScript compiledScript = null;
                             try {
-                                compiledScript=((Compilable) engine).compile(script);
+                                compiledScript = ((Compilable) engine).compile(script);
                             } catch (ScriptException compileExc) {
                                 Logging.getJavaFXLogger().warning(filename + ": compiling caused \"" + compileExc +
                                     "\", falling back to evaluating script in uncompiled mode");
                             }
                             if (compiledScript != null) {
@@ -1627,11 +1627,11 @@
                                        + (getLineNumber() - (int) script.codePoints().filter(c -> c == '\n').count());
                     engineBindings.put(scriptEngine.FILENAME, filename);
                     if (scriptEngine instanceof Compilable && compileScript) {
                         CompiledScript compiledScript = null;
                         try {
-                            compiledScript=((Compilable) scriptEngine).compile(script);
+                            compiledScript = ((Compilable) scriptEngine).compile(script);
                         } catch (ScriptException compileExc) {
                             Logging.getJavaFXLogger().warning(filename + ": compiling caused \"" + compileExc +
                                 "\", falling back to evaluating script in uncompiled mode");
                         }
                         if (compiledScript != null) {
@@ -1734,11 +1734,11 @@
     private static class ScriptEventHandler implements EventHandler<Event> {
         public final String script;
         public final ScriptEngine scriptEngine;
         public final String filename;
         public CompiledScript compiledScript;
-        public boolean isCompiled=false;
+        public boolean isCompiled = false;
 
         public ScriptEventHandler(String script, ScriptEngine scriptEngine, String filename) {
             this.script = script;
             this.scriptEngine = scriptEngine;
             this.filename = filename;
@@ -2755,13 +2755,13 @@
         if (piTarget.equals(LANGUAGE_PROCESSING_INSTRUCTION)) {
             processLanguage();
         } else if (piTarget.equals(IMPORT_PROCESSING_INSTRUCTION)) {
             processImport();
         } else if (piTarget.equals(COMPILE_PROCESSING_INSTRUCTION)) {
-            String strCompile=xmlStreamReader.getPIData().trim();
+            String strCompile = xmlStreamReader.getPIData().trim();
             // if PIData() is empty string then default to true, otherwise use Boolean.parseBoolean(string) to determine the boolean value
-            compileScript = (strCompile.length()==0 ? true : Boolean.parseBoolean(strCompile));
+            compileScript = (strCompile.length() == 0 ? true : Boolean.parseBoolean(strCompile));
         }
     }
 
     private void processLanguage() throws LoadException {
         if (scriptEngine != null) {
