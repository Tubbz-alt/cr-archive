diff a/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java b/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java
--- a/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java
+++ b/modules/javafx.fxml/src/main/java/javafx/fxml/FXMLLoader.java
@@ -1570,13 +1570,13 @@
                         StringBuilder sb = new StringBuilder();
                         final int bufSize = 4096;
                         char[] charBuffer = new char[bufSize];
                         int n;
                         do {
-                          n = scriptReader.read(charBuffer,0,bufSize);
-                          if (n > 0) {
-                              sb.append(new String(charBuffer,0,n));
+                            n = scriptReader.read(charBuffer,0,bufSize);
+                            if (n > 0) {
+                                sb.append(new String(charBuffer,0,n));
                           }
                         } while (n > -1);
                         script = sb.toString();
                     } catch (IOException exception) {
                         throw constructLoadException(exception);
@@ -1589,22 +1589,23 @@
                         if (engine instanceof Compilable && compileScript) {
                             CompiledScript compiledScript = null;
                             try {
                                 compiledScript=((Compilable) engine).compile(script);
                             } catch (ScriptException compileExc) {
-                               Logging.getJavaFXLogger().warning(filename+": compiling caused \""+compileExc+"\", falling back to evaluating script in uncompiled mode");
+                                Logging.getJavaFXLogger().warning(filename + ": compiling caused \"" + compileExc +
+                                    "\", falling back to evaluating script in uncompiled mode");
                             }
                             if (compiledScript != null) {
-                               compiledScript.eval();
+                                compiledScript.eval();
                             } else { // fallback to uncompiled mode
-                               engine.eval(script);
+                                engine.eval(script);
                             }
                         } else {
-                           engine.eval(script);
+                            engine.eval(script);
                         }
                     } catch (ScriptException exception) {
-                        System.err.println(filename+": caused ScriptException");
+                        System.err.println(filename + ": caused ScriptException");
                         exception.printStackTrace();
                     }
                 }
                 catch (IOException exception) {
                   throw constructLoadException(exception);
@@ -1628,22 +1629,23 @@
                     if (scriptEngine instanceof Compilable && compileScript) {
                         CompiledScript compiledScript = null;
                         try {
                             compiledScript=((Compilable) scriptEngine).compile(script);
                         } catch (ScriptException compileExc) {
-                            Logging.getJavaFXLogger().warning(filename+": compiling caused \""+compileExc+"\", falling back to evaluating script in uncompiled mode");
+                            Logging.getJavaFXLogger().warning(filename + ": compiling caused \"" + compileExc +
+                                "\", falling back to evaluating script in uncompiled mode");
                         }
                         if (compiledScript != null) {
-                           compiledScript.eval();
+                            compiledScript.eval();
                         } else { // fallback to uncompiled mode
-                           scriptEngine.eval(script);
+                            scriptEngine.eval(script);
                         }
                     } else {
-                       scriptEngine.eval(script);
+                        scriptEngine.eval(script);
                     }
                 } catch (ScriptException exception) {
-                    System.err.println(filename+": caused ScriptException\n"+exception.getMessage());
+                    System.err.println(filename + ": caused ScriptException\n" + exception.getMessage());
                 }
             }
         }
 
         @Override
@@ -1739,18 +1741,19 @@
         public ScriptEventHandler(String script, ScriptEngine scriptEngine, String filename) {
             this.script = script;
             this.scriptEngine = scriptEngine;
             this.filename = filename;
             if (scriptEngine instanceof Compilable  && compileScript) {
-               try {
-                  // supply the filename to the scriptEngine engine scope Bindings in case it is needed for compilation
-                  scriptEngine.getBindings(ScriptContext.ENGINE_SCOPE).put(scriptEngine.FILENAME, filename);
-                  this.compiledScript = ((Compilable) scriptEngine).compile(script);
-                  this.isCompiled = true;
-               } catch (ScriptException compileExc){
-                    Logging.getJavaFXLogger().warning(filename+": compiling caused \""+compileExc+"\", falling back to evaluating script in uncompiled mode");
-               }
+                try {
+                    // supply the filename to the scriptEngine engine scope Bindings in case it is needed for compilation
+                    scriptEngine.getBindings(ScriptContext.ENGINE_SCOPE).put(scriptEngine.FILENAME, filename);
+                    this.compiledScript = ((Compilable) scriptEngine).compile(script);
+                    this.isCompiled = true;
+                } catch (ScriptException compileExc) {
+                    Logging.getJavaFXLogger().warning(filename + ": compiling caused \"" + compileExc +
+                        "\", falling back to evaluating script in uncompiled mode");
+                }
             }
         }
 
         @Override
         public void handle(Event event) {
@@ -1766,12 +1769,12 @@
                 if (isCompiled) {
                    compiledScript.eval(localBindings);
                 } else {
                    scriptEngine.eval(script, localBindings);
                 }
-            } catch (ScriptException exception){
-                throw new RuntimeException(filename+": caused ScriptException", exception);
+            } catch (ScriptException exception) {
+                throw new RuntimeException(filename + ": caused ScriptException", exception);
             }
         }
     }
 
     // Observable list change listener
@@ -3632,7 +3635,5 @@
                     return PACKAGE;
             }
         }
     }
 }
-
-
