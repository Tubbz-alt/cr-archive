diff a/modules/javafx.base/src/main/java/javafx/beans/binding/BooleanBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/BooleanBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/BooleanBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/BooleanBinding.java
@@ -65,10 +65,17 @@
     public BooleanBinding() {
     }
 
     private boolean value;
     private boolean valid = false;
+
+    /**
+     * Invalidation listener used for observing dependencies.  This
+     * is never cleared once created as there is no way to determine
+     * when all dependencies that were previously bound were removed
+     * in one or more calls to {@link #unbind(Observable...)}.
+     */
     private BindingHelperObserver observer;
     private ExpressionHelper<Boolean> helper = null;
 
     @Override
     public void addListener(InvalidationListener listener) {
@@ -117,11 +124,10 @@
     protected final void unbind(Observable... dependencies) {
         if (observer != null) {
             for (final Observable dep : dependencies) {
                 dep.removeListener(observer);
             }
-            observer = null;
         }
     }
 
     /**
      * A default implementation of {@code dispose()} that is empty.
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/DoubleBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/DoubleBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/DoubleBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/DoubleBinding.java
@@ -111,10 +111,17 @@
 public abstract class DoubleBinding extends DoubleExpression implements
         NumberBinding {
 
     private double value;
     private boolean valid;
+
+    /**
+     * Invalidation listener used for observing dependencies.  This
+     * is never cleared once created as there is no way to determine
+     * when all dependencies that were previously bound were removed
+     * in one or more calls to {@link #unbind(Observable...)}.
+     */
     private BindingHelperObserver observer;
     private ExpressionHelper<Number> helper = null;
 
     @Override
     public void addListener(InvalidationListener listener) {
@@ -163,11 +170,10 @@
     protected final void unbind(Observable... dependencies) {
         if (observer != null) {
             for (final Observable dep : dependencies) {
                 dep.removeListener(observer);
             }
-            observer = null;
         }
     }
 
     /**
      * A default implementation of {@code dispose()} that is empty.
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/FloatBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/FloatBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/FloatBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/FloatBinding.java
@@ -61,10 +61,17 @@
 public abstract class FloatBinding extends FloatExpression implements
         NumberBinding {
 
     private float value;
     private boolean valid;
+
+    /**
+     * Invalidation listener used for observing dependencies.  This
+     * is never cleared once created as there is no way to determine
+     * when all dependencies that were previously bound were removed
+     * in one or more calls to {@link #unbind(Observable...)}.
+     */
     private BindingHelperObserver observer;
     private ExpressionHelper<Number> helper = null;
 
     @Override
     public void addListener(InvalidationListener listener) {
@@ -113,11 +120,10 @@
     protected final void unbind(Observable... dependencies) {
         if (observer != null) {
             for (final Observable dep : dependencies) {
                 dep.removeListener(observer);
             }
-            observer = null;
         }
     }
 
     /**
      * A default implementation of {@code dispose()} that is empty.
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/IntegerBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/IntegerBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/IntegerBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/IntegerBinding.java
@@ -61,10 +61,17 @@
 public abstract class IntegerBinding extends IntegerExpression implements
         NumberBinding {
 
     private int value;
     private boolean valid = false;
+
+    /**
+     * Invalidation listener used for observing dependencies.  This
+     * is never cleared once created as there is no way to determine
+     * when all dependencies that were previously bound were removed
+     * in one or more calls to {@link #unbind(Observable...)}.
+     */
     private BindingHelperObserver observer;
     private ExpressionHelper<Number> helper = null;
 
     @Override
     public void addListener(InvalidationListener listener) {
@@ -113,11 +120,10 @@
     protected final void unbind(Observable... dependencies) {
         if (observer != null) {
             for (final Observable dep : dependencies) {
                 dep.removeListener(observer);
             }
-            observer = null;
         }
     }
 
     /**
      * A default implementation of {@code dispose()} that is empty.
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/ListBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/ListBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/ListBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/ListBinding.java
@@ -73,10 +73,17 @@
         }
     };
 
     private ObservableList<E> value;
     private boolean valid = false;
+
+    /**
+     * Invalidation listener used for observing dependencies.  This
+     * is never cleared once created as there is no way to determine
+     * when all dependencies that were previously bound were removed
+     * in one or more calls to {@link #unbind(Observable...)}.
+     */
     private BindingHelperObserver observer;
     private ListExpressionHelper<E> helper = null;
 
     private SizeProperty size0;
     private EmptyProperty empty0;
@@ -201,11 +208,10 @@
             for (final Observable dep : dependencies) {
                 if (dep != null) {
                     dep.removeListener(observer);
                 }
             }
-            observer = null;
         }
     }
 
     /**
      * A default implementation of {@code dispose()} that is empty.
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/LongBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/LongBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/LongBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/LongBinding.java
@@ -61,10 +61,17 @@
 public abstract class LongBinding extends LongExpression implements
         NumberBinding {
 
     private long value;
     private boolean valid = false;
+
+    /**
+     * Invalidation listener used for observing dependencies.  This
+     * is never cleared once created as there is no way to determine
+     * when all dependencies that were previously bound were removed
+     * in one or more calls to {@link #unbind(Observable...)}.
+     */
     private BindingHelperObserver observer;
     private ExpressionHelper<Number> helper = null;
 
     @Override
     public void addListener(InvalidationListener listener) {
@@ -113,11 +120,10 @@
     protected final void unbind(Observable... dependencies) {
         if (observer != null) {
             for (final Observable dep : dependencies) {
                 dep.removeListener(observer);
             }
-            observer = null;
         }
     }
 
     /**
      * A default implementation of {@code dispose()} that is empty.
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/ObjectBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/ObjectBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/ObjectBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/ObjectBinding.java
@@ -61,10 +61,17 @@
 public abstract class ObjectBinding<T> extends ObjectExpression<T> implements
         Binding<T> {
 
     private T value;
     private boolean valid = false;
+
+    /**
+     * Invalidation listener used for observing dependencies.  This
+     * is never cleared once created as there is no way to determine
+     * when all dependencies that were previously bound were removed
+     * in one or more calls to {@link #unbind(Observable...)}.
+     */
     private BindingHelperObserver observer;
     private ExpressionHelper<T> helper = null;
 
     @Override
     public void addListener(InvalidationListener listener) {
@@ -113,11 +120,10 @@
     protected final void unbind(Observable... dependencies) {
         if (observer != null) {
             for (final Observable dep : dependencies) {
                 dep.removeListener(observer);
             }
-            observer = null;
         }
     }
 
     /**
      * A default implementation of {@code dispose()} that is empty.
diff a/modules/javafx.base/src/main/java/javafx/beans/binding/StringBinding.java b/modules/javafx.base/src/main/java/javafx/beans/binding/StringBinding.java
--- a/modules/javafx.base/src/main/java/javafx/beans/binding/StringBinding.java
+++ b/modules/javafx.base/src/main/java/javafx/beans/binding/StringBinding.java
@@ -60,10 +60,17 @@
 public abstract class StringBinding extends StringExpression implements
         Binding<String> {
 
     private String value;
     private boolean valid = false;
+
+    /**
+     * Invalidation listener used for observing dependencies.  This
+     * is never cleared once created as there is no way to determine
+     * when all dependencies that were previously bound were removed
+     * in one or more calls to {@link #unbind(Observable...)}.
+     */
     private BindingHelperObserver observer;
     private ExpressionHelper<String> helper = null;
 
     @Override
     public void addListener(InvalidationListener listener) {
@@ -112,11 +119,10 @@
     protected final void unbind(Observable... dependencies) {
         if (observer != null) {
             for (final Observable dep : dependencies) {
                 dep.removeListener(observer);
             }
-            observer = null;
         }
     }
 
     /**
      * A default implementation of {@code dispose()} that is empty.
diff a/modules/javafx.base/src/test/java/test/javafx/binding/GenericBindingTest.java b/modules/javafx.base/src/test/java/test/javafx/binding/GenericBindingTest.java
--- a/modules/javafx.base/src/test/java/test/javafx/binding/GenericBindingTest.java
+++ b/modules/javafx.base/src/test/java/test/javafx/binding/GenericBindingTest.java
@@ -36,47 +36,51 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
+import java.lang.reflect.Constructor;
 import java.util.Arrays;
 import java.util.Collection;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
 @RunWith(Parameterized.class)
 public class GenericBindingTest<T> {
 
     private static final Object UNDEFINED = null;
 
-    private final ObservableStub dependency1;
-    private final ObservableStub dependency2;
-    private final BindingMock<T> binding0;
-    private final BindingMock<T> binding1;
-    private final BindingMock<T> binding2;
+    private final ObservableStub dependency1 = new ObservableStub();
+    private final ObservableStub dependency2 = new ObservableStub();
     private final T value1;
     private final T value2;
+    private final Constructor<BindingMock<T>> bindingMockClassConstructor;
+
+    private BindingMock<T> binding0;
+    private BindingMock<T> binding1;
+    private BindingMock<T> binding2;
     private InvalidationListenerMock invalidationListener;
     private ChangeListenerMock<Object> changeListener;
 
     public GenericBindingTest(
             T value1, T value2,
-            ObservableStub dependency1,
-            ObservableStub dependency2,
-            BindingMock<T> binding0, BindingMock<T> binding1, BindingMock<T> binding2) {
+            Class<BindingMock<T>> bindingMockClass) throws Exception {
         this.value1 = value1;
         this.value2 = value2;
-        this.dependency1 = dependency1;
-        this.dependency2 = dependency2;
-        this.binding0 = binding0;
-        this.binding1 = binding1;
-        this.binding2 = binding2;
+        this.bindingMockClassConstructor = bindingMockClass.getConstructor(Observable[].class);
     }
 
     @Before
-    public void setUp() {
+    public void setUp() throws Exception {
+        // Recreate bindings as they may have been altered by one of the tests
+        binding0 = bindingMockClassConstructor.newInstance((Object)new Observable[] {});
+        binding1 = bindingMockClassConstructor.newInstance((Object)new Observable[] {dependency1});
+        binding2 = bindingMockClassConstructor.newInstance((Object)new Observable[] {dependency1, dependency2});
+
         invalidationListener = new InvalidationListenerMock();
         changeListener = new ChangeListenerMock<Object>(UNDEFINED);
         binding0.setValue(value2);
         binding1.setValue(value2);
         binding2.setValue(value2);
@@ -290,71 +294,90 @@
         assertEquals(1, binding2.getComputeValueCounter());
         invalidationListener.check(null, 0);
         assertEquals(true, binding2.isValid());
     }
 
+    @Test
+    public void testUnbindDependencies() {
+        // Start by making binding valid:
+        binding2.getValue();
+        assertTrue(binding2.isValid());
+
+        // Changing dependency1 should cause binding to become invalid:
+        dependency1.fireValueChangedEvent();
+        assertFalse(binding2.isValid());
+
+        // Make valid again:
+        binding2.getValue();
+        assertTrue(binding2.isValid());
+
+        // Changing dependency2 should cause binding to become invalid:
+        dependency2.fireValueChangedEvent();
+        assertFalse(binding2.isValid());
+
+        // Make valid again:
+        binding2.getValue();
+        assertTrue(binding2.isValid());
+
+        // Remove dependency1:
+        binding2.publicUnbind(dependency1);
+
+        // Check that binding2 is no longer affected by changes in dependency1:
+        dependency1.fireValueChangedEvent();
+        assertTrue(binding2.isValid());
+
+        // But still affected by changes in dependency2:
+        dependency2.fireValueChangedEvent();
+        assertFalse(binding2.isValid());
+
+        // Make valid again:
+        binding2.getValue();
+        assertTrue(binding2.isValid());
+
+        // Remove dependency2:
+        binding2.publicUnbind(dependency2);
+
+        // Check that binding2 is no longer affected by changes in dependency2:
+        dependency2.fireValueChangedEvent();
+        assertTrue(binding2.isValid());   // Fixed by 8243115
+    }
+
     @Parameterized.Parameters
     public static Collection<Object[]> parameters() {
-        final ObservableStub dependency1 = new ObservableStub();
-        final ObservableStub dependency2 = new ObservableStub();
         return Arrays.asList(new Object[][] {
             {
                 Float.MIN_VALUE, Float.MAX_VALUE,
-                dependency1, dependency2,
-                new FloatBindingImpl(),
-                new FloatBindingImpl(dependency1),
-                new FloatBindingImpl(dependency1, dependency2),
+                FloatBindingImpl.class
             },
             {
                 Double.MIN_VALUE, Double.MAX_VALUE,
-                dependency1, dependency2,
-                new DoubleBindingImpl(),
-                new DoubleBindingImpl(dependency1),
-                new DoubleBindingImpl(dependency1, dependency2),
+                DoubleBindingImpl.class
             },
             {
                 Long.MIN_VALUE, Long.MAX_VALUE,
-                dependency1, dependency2,
-                new LongBindingImpl(),
-                new LongBindingImpl(dependency1),
-                new LongBindingImpl(dependency1, dependency2),
+                LongBindingImpl.class
             },
             {
                 Integer.MIN_VALUE, Integer.MAX_VALUE,
-                dependency1, dependency2,
-                new IntegerBindingImpl(),
-                new IntegerBindingImpl(dependency1),
-                new IntegerBindingImpl(dependency1, dependency2),
+                IntegerBindingImpl.class
             },
             {
                 true, false,
-                dependency1, dependency2,
-                new BooleanBindingImpl(),
-                new BooleanBindingImpl(dependency1),
-                new BooleanBindingImpl(dependency1, dependency2),
+                BooleanBindingImpl.class
             },
             {
                 "Hello World", "Goodbye",
-                dependency1, dependency2,
-                new StringBindingImpl(),
-                new StringBindingImpl(dependency1),
-                new StringBindingImpl(dependency1, dependency2),
+                StringBindingImpl.class
             },
             {
-                    new Object(), new Object(),
-                    dependency1, dependency2,
-                    new ObjectBindingImpl(),
-                    new ObjectBindingImpl(dependency1),
-                    new ObjectBindingImpl(dependency1, dependency2),
+                new Object(), new Object(),
+                ObjectBindingImpl.class
             },
             {
-                    FXCollections.observableArrayList(), FXCollections.observableArrayList(),
-                    dependency1, dependency2,
-                    new ListBindingImpl(),
-                    new ListBindingImpl(dependency1),
-                    new ListBindingImpl(dependency1, dependency2),
-            },
+                FXCollections.observableArrayList(), FXCollections.observableArrayList(),
+                ListBindingImpl.class
+            }
         });
     }
 
     public static class ObservableStub extends ObservableValueBase<Object> {
         @Override public void fireValueChangedEvent() {super.fireValueChangedEvent();}
@@ -367,10 +390,11 @@
 
     public static interface BindingMock<T> extends Binding<T> {
         int getComputeValueCounter();
         void reset();
         void setValue(T value);
+        void publicUnbind(Observable... observables);
     }
 
     private static class DoubleBindingImpl extends DoubleBinding implements BindingMock<Number> {
 
         private int computeValueCounter = 0;
@@ -399,10 +423,14 @@
 
         public ObservableList<?> getDependencies() {
             fail("Should not reach here");
             return null;
         }
+
+        public void publicUnbind(Observable... observables) {
+            super.unbind(observables);
+        }
     }
 
     private static class FloatBindingImpl extends FloatBinding implements BindingMock<Number> {
 
         private int computeValueCounter = 0;
@@ -431,10 +459,14 @@
 
         public ObservableList<?> getDependencies() {
             fail("Should not reach here");
             return null;
         }
+
+        public void publicUnbind(Observable... observables) {
+            super.unbind(observables);
+        }
     }
 
     private static class LongBindingImpl extends LongBinding implements BindingMock<Number> {
 
         private int computeValueCounter = 0;
@@ -463,10 +495,14 @@
 
         public ObservableList<?> getDependencies() {
             fail("Should not reach here");
             return null;
         }
+
+        public void publicUnbind(Observable... observables) {
+            super.unbind(observables);
+        }
     }
 
     private static class IntegerBindingImpl extends IntegerBinding implements BindingMock<Number> {
 
         private int computeValueCounter = 0;
@@ -495,10 +531,14 @@
 
         public ObservableList<?> getDependencies() {
             fail("Should not reach here");
             return null;
         }
+
+        public void publicUnbind(Observable... observables) {
+            super.unbind(observables);
+        }
     }
 
     private static class BooleanBindingImpl extends BooleanBinding implements BindingMock<Boolean> {
 
         private int computeValueCounter = 0;
@@ -527,10 +567,14 @@
 
         public ObservableList<?> getDependencies() {
             fail("Should not reach here");
             return null;
         }
+
+        public void publicUnbind(Observable... observables) {
+            super.unbind(observables);
+        }
     }
 
     private static class ObjectBindingImpl extends ObjectBinding<Object> implements BindingMock<Object> {
 
         private int computeValueCounter = 0;
@@ -559,10 +603,14 @@
 
         public ObservableList<?> getDependencies() {
             fail("Should not reach here");
             return null;
         }
+
+        public void publicUnbind(Observable... observables) {
+            super.unbind(observables);
+        }
     }
 
     private static class StringBindingImpl extends StringBinding implements BindingMock<String> {
 
         private int computeValueCounter = 0;
@@ -591,10 +639,14 @@
 
         public ObservableList<?> getDependencies() {
             fail("Should not reach here");
             return null;
         }
+
+        public void publicUnbind(Observable... observables) {
+            super.unbind(observables);
+        }
     }
 
     private static class ListBindingImpl extends ListBinding<Object> implements BindingMock<ObservableList<Object>> {
 
         private int computeValueCounter = 0;
@@ -623,9 +675,13 @@
 
         public ObservableList<?> getDependencies() {
             fail("Should not reach here");
             return null;
         }
+
+        public void publicUnbind(Observable... observables) {
+            super.unbind(observables);
+        }
     }
 
 
 }
