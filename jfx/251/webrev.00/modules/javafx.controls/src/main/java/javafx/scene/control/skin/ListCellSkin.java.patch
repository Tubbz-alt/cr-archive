diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListCellSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListCellSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListCellSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListCellSkin.java
@@ -24,21 +24,17 @@
  */
 
 package javafx.scene.control.skin;
 
 import com.sun.javafx.scene.control.behavior.BehaviorBase;
-import javafx.beans.InvalidationListener;
-import javafx.beans.Observable;
+import com.sun.javafx.scene.control.behavior.ListCellBehavior;
+
 import javafx.geometry.Orientation;
-import javafx.scene.Node;
-import javafx.scene.control.Accordion;
-import javafx.scene.control.Button;
 import javafx.scene.control.Control;
 import javafx.scene.control.ListCell;
 import javafx.scene.control.ListView;
-
-import com.sun.javafx.scene.control.behavior.ListCellBehavior;
+import javafx.scene.layout.Region;
 
 /**
  * Default skin implementation for the {@link ListCell} control.
  *
  * @see ListCell
@@ -50,16 +46,12 @@
      *                                                                         *
      * Private fields                                                          *
      *                                                                         *
      **************************************************************************/
 
-    private double fixedCellSize;
-    private boolean fixedCellSizeEnabled;
     private final BehaviorBase<ListCell<T>> behavior;
 
-
-
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
      *                                                                         *
      **************************************************************************/
@@ -75,35 +67,12 @@
         super(control);
 
         // install default input map for the ListCell control
         behavior = new ListCellBehavior<>(control);
 //        control.setInputMap(behavior.getInputMap());
-
-        setupListeners();
     }
 
-    private void setupListeners() {
-        ListView listView = getSkinnable().getListView();
-        if (listView == null) {
-            getSkinnable().listViewProperty().addListener(new InvalidationListener() {
-                @Override public void invalidated(Observable observable) {
-                    getSkinnable().listViewProperty().removeListener(this);
-                    setupListeners();
-                }
-            });
-        } else {
-            this.fixedCellSize = listView.getFixedCellSize();
-            this.fixedCellSizeEnabled = fixedCellSize > 0;
-            registerChangeListener(listView.fixedCellSizeProperty(), e -> {
-                this.fixedCellSize = getSkinnable().getListView().getFixedCellSize();
-                this.fixedCellSizeEnabled = fixedCellSize > 0;
-            });
-        }
-    }
-
-
-
     /***************************************************************************
      *                                                                         *
      * Public API                                                              *
      *                                                                         *
      **************************************************************************/
@@ -125,11 +94,12 @@
             listView.getOrientation() == Orientation.VERTICAL ? pref : Math.max(pref, getCellSize());
     }
 
     /** {@inheritDoc} */
     @Override protected double computePrefHeight(double width, double topInset, double rightInset, double bottomInset, double leftInset) {
-        if (fixedCellSizeEnabled) {
+        double fixedCellSize = getFixedCellSize();
+        if (fixedCellSize > 0) {
             return fixedCellSize;
         }
 
         // Added the comparison between the default cell size and the requested
         // cell size to prevent the issue identified in RT-19873.
@@ -138,21 +108,27 @@
         return prefHeight;
     }
 
     /** {@inheritDoc} */
     @Override protected double computeMinHeight(double width, double topInset, double rightInset, double bottomInset, double leftInset) {
-        if (fixedCellSizeEnabled) {
+        double fixedCellSize = getFixedCellSize();
+        if (fixedCellSize > 0) {
             return fixedCellSize;
         }
 
         return super.computeMinHeight(width, topInset, rightInset, bottomInset, leftInset);
     }
 
     /** {@inheritDoc} */
     @Override protected double computeMaxHeight(double width, double topInset, double rightInset, double bottomInset, double leftInset) {
-        if (fixedCellSizeEnabled) {
+        double fixedCellSize = getFixedCellSize();
+        if (fixedCellSize > 0) {
             return fixedCellSize;
         }
-
         return super.computeMaxHeight(width, topInset, rightInset, bottomInset, leftInset);
     }
+
+    private double getFixedCellSize() {
+        ListView<?> listView = getSkinnable().getListView();
+        return listView != null ? listView.getFixedCellSize() : Region.USE_COMPUTED_SIZE;
+    }
 }
