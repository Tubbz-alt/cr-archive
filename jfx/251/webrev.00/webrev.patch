diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListCellSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListCellSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListCellSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ListCellSkin.java
@@ -24,21 +24,17 @@
  */
 
 package javafx.scene.control.skin;
 
 import com.sun.javafx.scene.control.behavior.BehaviorBase;
-import javafx.beans.InvalidationListener;
-import javafx.beans.Observable;
+import com.sun.javafx.scene.control.behavior.ListCellBehavior;
+
 import javafx.geometry.Orientation;
-import javafx.scene.Node;
-import javafx.scene.control.Accordion;
-import javafx.scene.control.Button;
 import javafx.scene.control.Control;
 import javafx.scene.control.ListCell;
 import javafx.scene.control.ListView;
-
-import com.sun.javafx.scene.control.behavior.ListCellBehavior;
+import javafx.scene.layout.Region;
 
 /**
  * Default skin implementation for the {@link ListCell} control.
  *
  * @see ListCell
@@ -50,16 +46,12 @@
      *                                                                         *
      * Private fields                                                          *
      *                                                                         *
      **************************************************************************/
 
-    private double fixedCellSize;
-    private boolean fixedCellSizeEnabled;
     private final BehaviorBase<ListCell<T>> behavior;
 
-
-
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
      *                                                                         *
      **************************************************************************/
@@ -75,35 +67,12 @@
         super(control);
 
         // install default input map for the ListCell control
         behavior = new ListCellBehavior<>(control);
 //        control.setInputMap(behavior.getInputMap());
-
-        setupListeners();
     }
 
-    private void setupListeners() {
-        ListView listView = getSkinnable().getListView();
-        if (listView == null) {
-            getSkinnable().listViewProperty().addListener(new InvalidationListener() {
-                @Override public void invalidated(Observable observable) {
-                    getSkinnable().listViewProperty().removeListener(this);
-                    setupListeners();
-                }
-            });
-        } else {
-            this.fixedCellSize = listView.getFixedCellSize();
-            this.fixedCellSizeEnabled = fixedCellSize > 0;
-            registerChangeListener(listView.fixedCellSizeProperty(), e -> {
-                this.fixedCellSize = getSkinnable().getListView().getFixedCellSize();
-                this.fixedCellSizeEnabled = fixedCellSize > 0;
-            });
-        }
-    }
-
-
-
     /***************************************************************************
      *                                                                         *
      * Public API                                                              *
      *                                                                         *
      **************************************************************************/
@@ -125,11 +94,12 @@
             listView.getOrientation() == Orientation.VERTICAL ? pref : Math.max(pref, getCellSize());
     }
 
     /** {@inheritDoc} */
     @Override protected double computePrefHeight(double width, double topInset, double rightInset, double bottomInset, double leftInset) {
-        if (fixedCellSizeEnabled) {
+        double fixedCellSize = getFixedCellSize();
+        if (fixedCellSize > 0) {
             return fixedCellSize;
         }
 
         // Added the comparison between the default cell size and the requested
         // cell size to prevent the issue identified in RT-19873.
@@ -138,21 +108,27 @@
         return prefHeight;
     }
 
     /** {@inheritDoc} */
     @Override protected double computeMinHeight(double width, double topInset, double rightInset, double bottomInset, double leftInset) {
-        if (fixedCellSizeEnabled) {
+        double fixedCellSize = getFixedCellSize();
+        if (fixedCellSize > 0) {
             return fixedCellSize;
         }
 
         return super.computeMinHeight(width, topInset, rightInset, bottomInset, leftInset);
     }
 
     /** {@inheritDoc} */
     @Override protected double computeMaxHeight(double width, double topInset, double rightInset, double bottomInset, double leftInset) {
-        if (fixedCellSizeEnabled) {
+        double fixedCellSize = getFixedCellSize();
+        if (fixedCellSize > 0) {
             return fixedCellSize;
         }
-
         return super.computeMaxHeight(width, topInset, rightInset, bottomInset, leftInset);
     }
+
+    private double getFixedCellSize() {
+        ListView<?> listView = getSkinnable().getListView();
+        return listView != null ? listView.getFixedCellSize() : Region.USE_COMPUTED_SIZE;
+    }
 }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListCellTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListCellTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListCellTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/ListCellTest.java
@@ -40,10 +40,11 @@
 import javafx.scene.control.SelectionMode;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 
+import static javafx.scene.control.ControlShim.*;
 import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.*;
 import static org.junit.Assert.*;
 
 /**
  */
@@ -721,6 +722,30 @@
 
     @Test public void test_jdk_8151524() {
         ListCell cell = new ListCell();
         cell.setSkin(new ListCellSkin(cell));
     }
+
+    /**
+     * Test that min/max/pref height respect fixedCellSize.
+     * Sanity test when fixing JDK-8246745.
+     */
+    @Test
+    public void testListCellHeights() {
+        ListCell<Object> cell =  new ListCell<>();
+        ListView<Object> listView = new ListView<>();
+        cell.updateListView(listView);
+        installDefaultSkin(cell);
+        listView.setFixedCellSize(100);
+        assertEquals("pref height must be fixedCellSize",
+                listView.getFixedCellSize(),
+                cell.prefHeight(-1), 1);
+        assertEquals("min height must be fixedCellSize",
+                listView.getFixedCellSize(),
+                cell.minHeight(-1), 1);
+        assertEquals("max height must be fixedCellSize",
+                listView.getFixedCellSize(),
+                cell.maxHeight(-1), 1);
+    }
+
+
 }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinCleanupTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinCleanupTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinCleanupTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinCleanupTest.java
@@ -37,10 +37,11 @@
 
 import javafx.scene.Scene;
 import javafx.scene.control.Button;
 import javafx.scene.control.ChoiceBox;
 import javafx.scene.control.Control;
+import javafx.scene.control.ListCell;
 import javafx.scene.control.ListView;
 import javafx.scene.control.ToolBar;
 import javafx.scene.layout.Pane;
 import javafx.scene.layout.VBox;
 import javafx.scene.shape.Rectangle;
@@ -53,10 +54,35 @@
 
     private Scene scene;
     private Stage stage;
     private Pane root;
 
+// ------------------ ListCell
+
+    @Test
+    public void testListCellReplaceListViewWithNull() {
+        ListCell<Object> cell =  new ListCell<>();
+        ListView<Object> listView = new ListView<>();
+        cell.updateListView(listView);
+        installDefaultSkin(cell);
+        cell.updateListView(null);
+        listView.setFixedCellSize(100);
+    }
+
+   @Test
+   public void testListCellPrefHeightOnReplaceListView() {
+       ListCell<Object> cell =  new ListCell<>();
+       cell.updateListView(new ListView<>());
+       installDefaultSkin(cell);
+       ListView<Object> listView = new ListView<>();
+       listView.setFixedCellSize(100);
+       cell.updateListView(listView);
+       assertEquals("fixed cell set to value of new listView",
+               cell.getListView().getFixedCellSize(),
+               cell.prefHeight(-1), 1);
+   }
+
   //-------------- listView
 
     @Test
     public void testListViewAddItems() {
         ListView<String> listView = new ListView<>();
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinMemoryLeakTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinMemoryLeakTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinMemoryLeakTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/SkinMemoryLeakTest.java
@@ -108,11 +108,10 @@
                 Accordion.class,
                 ButtonBar.class,
                 ColorPicker.class,
                 ComboBox.class,
                 DatePicker.class,
-                ListCell.class,
                 MenuBar.class,
                 MenuButton.class,
                 Pagination.class,
                 PasswordField.class,
                 ScrollBar.class,
