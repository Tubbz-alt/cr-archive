diff a/buildSrc/win.gradle b/buildSrc/win.gradle
--- a/buildSrc/win.gradle
+++ b/buildSrc/win.gradle
@@ -188,26 +188,22 @@
 }
 
 def winSdkDllDir = "$WINDOWS_VS_WINSDKDLLINSTALLDIR/$CPU_BITS"
 
 def WINDOWS_DLL_VER = WINDOWS_VS_VER
-ext.MSVCR = null
-ext.MSVCP = null
 
 def windowsCRTVer = System.getenv("WINDOWS_CRT_VER") ?: WINDOWS_CRT_VER
 if (WINDOWS_VS_VER == "150") {
     WINDOWS_DLL_VER = "140"
-    ext.MSVCR = cygpath("${msvcRedstDir}/Microsoft.VC${windowsCRTVer}.CRT/vcruntime${WINDOWS_DLL_VER}.dll")
-    ext.MSVCP = cygpath("${msvcRedstDir}/Microsoft.VC${windowsCRTVer}.CRT/msvcp${WINDOWS_DLL_VER}.dll")
 }
 
 def vs2017DllPath = cygpath("${msvcRedstDir}/Microsoft.VC${windowsCRTVer}.CRT")
 if (file(vs2017DllPath).exists()) {
     ext.WIN.VS2017DLLNames = [
-        "concrt140.dll",
         "msvcp140.dll",
-        "vcruntime140.dll"
+        "vcruntime140.dll",
+        "vcruntime140_1.dll"
     ];
     ext.WIN.VS2017DLLs = []
     ext.WIN.VS2017DLLNames.each { vsdll->
         ext.WIN.VS2017DLLs += "$vs2017DllPath/$vsdll"
     }
diff a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/win/WinApplication.java b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/win/WinApplication.java
--- a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/win/WinApplication.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/win/WinApplication.java
@@ -94,11 +94,11 @@
                                    "(No longer supported) force integer rendering scale");
                     }
                 } else {
                     overrideUIScale = 1.0f;
                 }
-                // This loading of msvcp140.dll and vcruntime140.dll (VS2017) is required on Windows platforms
+                // Load required Microsoft runtime DLLs on Windows platforms
                 Toolkit.loadMSWindowsLibraries();
                 Application.loadNativeLibrary();
                 return null;
             }
         });
diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/Toolkit.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/Toolkit.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/Toolkit.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/Toolkit.java
@@ -151,12 +151,12 @@
         "api-ms-win-crt-utility-l1-1-0",
         "ucrtbase",
 
         // Finally load VS 2017 DLLs in the following order
         "vcruntime140",
-        "msvcp140",
-        "concrt140"
+        "vcruntime140_1",
+        "msvcp140"
 };
 
     private static String lookupToolkitClass(String name) {
         if ("prism".equalsIgnoreCase(name)) {
             return QUANTUM_TOOLKIT;
@@ -205,11 +205,11 @@
             // java class, VersionInfo, created at build time.
             VersionInfo.setupSystemProperties();
             return null;
         });
 
-        // This loading of msvcp140.dll and vcruntime140.dll (VS2017) is required on Windows platforms
+        // Load required Microsoft runtime DLLs on Windows platforms
         if (PlatformUtil.isWindows()) {
             loadMSWindowsLibraries();
         }
 
         boolean userSpecifiedToolkit = true;
