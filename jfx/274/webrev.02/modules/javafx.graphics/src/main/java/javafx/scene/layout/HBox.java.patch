diff a/modules/javafx.graphics/src/main/java/javafx/scene/layout/HBox.java b/modules/javafx.graphics/src/main/java/javafx/scene/layout/HBox.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/layout/HBox.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/layout/HBox.java
@@ -46,12 +46,10 @@
 import javafx.css.converter.SizeConverter;
 import javafx.css.Styleable;
 import javafx.geometry.HPos;
 import javafx.util.Callback;
 
-
-
 /**
  * HBox lays out its children in a single horizontal row.
  * If the hbox has a border and/or padding set, then the contents will be laid
  * out within those insets.
  * <p>
@@ -166,17 +164,18 @@
     private static final String MARGIN_CONSTRAINT = "hbox-margin";
     private static final String HGROW_CONSTRAINT = "hbox-hgrow";
 
     /**
      * Sets the horizontal grow priority for the child when contained by an hbox.
-     * If set, the hbox will use the priority to allocate additional space if the
-     * hbox is resized larger than it's preferred width.
+     * If set, the hbox will use the priority value to allocate additional space if the
+     * hbox is resized larger than its preferred width.
      * If multiple hbox children have the same horizontal grow priority, then the
      * extra space will be split evenly between them.
      * If no horizontal grow priority is set on a child, the hbox will never
      * allocate it additional horizontal space if available.
-     * Setting the value to null will remove the constraint.
+     * <p>
+     * Setting the value to {@code null} will remove the constraint.
      * @param child the child of an hbox
      * @param value the horizontal grow priority for the child
      */
     public static void setHgrow(Node child, Priority value) {
         setConstraint(child, HGROW_CONSTRAINT, value);
@@ -225,39 +224,39 @@
     /********************************************************************
      *  END static methods
      ********************************************************************/
 
     /**
-     * Creates an HBox layout with spacing = 0.
+     * Creates an {@code HBox} layout with {@code spacing = 0}.
      */
     public HBox() {
         super();
     }
 
     /**
-     * Creates an HBox layout with the specified spacing between children.
+     * Creates an {@code HBox} layout with the specified spacing between children.
      * @param spacing the amount of horizontal space between each child
      */
     public HBox(double spacing) {
         this();
         setSpacing(spacing);
     }
 
     /**
-     * Creates an HBox layout with spacing = 0.
-     * @param children The initial set of children for this pane.
+     * Creates an {@code HBox} layout with{@code spacing = 0}.
+     * @param children the initial set of children for this pane
      * @since JavaFX 8.0
      */
     public HBox(Node... children) {
         super();
         getChildren().addAll(children);
     }
 
     /**
-     * Creates an HBox layout with the specified spacing between children.
+     * Creates an {@code HBox} layout with the specified spacing between children.
      * @param spacing the amount of horizontal space between each child
-     * @param children The initial set of children for this pane.
+     * @param children The initial set of children for this pane
      * @since JavaFX 8.0
      */
     public HBox(double spacing, Node... children) {
         this();
         setSpacing(spacing);
