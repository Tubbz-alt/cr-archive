diff a/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java b/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java
@@ -594,10 +594,11 @@
             setEditing(false);
         }
     }
 
     /**
+     * Commits an edit to the value of the cell.
      * Call this function when appropriate (based on the user interaction requirements
      * of your cell editing user interface) to do two things:
      *
      * <ol>
      *     <li>Fire the appropriate events back to the backing UI control (e.g.
@@ -609,16 +610,16 @@
      *     <li>Begin the transition from an editing state into a non-editing state.</li>
      * </ol>
      *
      * <p>In general there is no need to override this method in custom cell
      * implementations - it should be sufficient to simply call this method
-     * when appropriate (e.g. when the user pressed the Enter key, you may do something
+     * when appropriate (e.g., when the user pressed the Enter key, you may do something
      * like {@code cell.commitEdit(converter.fromString(textField.getText()));}</p>
      *
-     * @param newValue The value as input by the end user, which should be
+     * @param newValue the value as input by the end user, which should be
      *      persisted in the relevant way given the data source underpinning the
-     *      user interface and the install edit commit handler of the UI control.
+     *      user interface and the install edit commit handler of the UI control
      */
     public void commitEdit(T newValue) {
         if (isEditing()) {
             setEditing(false);
         }
