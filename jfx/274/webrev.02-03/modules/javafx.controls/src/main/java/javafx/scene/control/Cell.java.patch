diff a/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java b/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java
@@ -573,10 +573,11 @@
      * Public API                                                              *
      *                                                                         *
      **************************************************************************/
 
     /**
+     * Starts an edit to the value of the cell.
      * Call this function to transition from a non-editing state into an editing
      * state, if the cell is editable. If this cell is already in an editing
      * state, it will stay in it.
      */
     public void startEdit() {
@@ -584,10 +585,11 @@
             setEditing(true);
         }
     }
 
     /**
+     * Cancels an edit to the value of the cell.
      * Call this function to transition from an editing state into a non-editing
      * state, without saving any user input.
      */
     public void cancelEdit() {
         if (isEditing()) {
@@ -599,11 +601,11 @@
      * Commits an edit to the value of the cell.
      * Call this function when appropriate (based on the user interaction requirements
      * of your cell editing user interface) to do two things:
      *
      * <ol>
-     *     <li>Fire the appropriate events back to the backing UI control (e.g.
+     *     <li>Fire the appropriate events back to the backing UI control (e.g.,
      *     {@link ListView}). This will begin the process of pushing this edit
      *     back to the relevant data source / property (although it does not
      *     guarantee that this will be successful - that is dependent upon the
      *     specific edit commit handler being used). Refer to the UI control
      *     class javadoc for more detail.</li>
