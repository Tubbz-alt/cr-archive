diff a/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java b/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/Cell.java
@@ -594,10 +594,11 @@
             setEditing(false);
         }
     }
 
     /**
+     * Commits an edit to the value of the cell.
      * Call this function when appropriate (based on the user interaction requirements
      * of your cell editing user interface) to do two things:
      *
      * <ol>
      *     <li>Fire the appropriate events back to the backing UI control (e.g.
@@ -609,16 +610,16 @@
      *     <li>Begin the transition from an editing state into a non-editing state.</li>
      * </ol>
      *
      * <p>In general there is no need to override this method in custom cell
      * implementations - it should be sufficient to simply call this method
-     * when appropriate (e.g. when the user pressed the Enter key, you may do something
+     * when appropriate (e.g., when the user pressed the Enter key, you may do something
      * like {@code cell.commitEdit(converter.fromString(textField.getText()));}</p>
      *
-     * @param newValue The value as input by the end user, which should be
+     * @param newValue the value as input by the end user, which should be
      *      persisted in the relevant way given the data source underpinning the
-     *      user interface and the install edit commit handler of the UI control.
+     *      user interface and the install edit commit handler of the UI control
      */
     public void commitEdit(T newValue) {
         if (isEditing()) {
             setEditing(false);
         }
diff a/modules/javafx.fxml/src/main/docs/javafx/fxml/doc-files/introduction_to_fxml.html b/modules/javafx.fxml/src/main/docs/javafx/fxml/doc-files/introduction_to_fxml.html
--- a/modules/javafx.fxml/src/main/docs/javafx/fxml/doc-files/introduction_to_fxml.html
+++ b/modules/javafx.fxml/src/main/docs/javafx/fxml/doc-files/introduction_to_fxml.html
@@ -718,11 +718,11 @@
 
 <h4><a id="collections_and_property_handlers">Special handlers for collections and properties</a></h4>
 <p> Collections and object properties cannot be listen to using <span class="code">setOn<span class="variable">Event</span>()</span> methods.
     For these reason, special handler methods need to be used.
 <span class="code">ObservableList</span>, <span class="code">ObservableMap</span> or <span class="code">ObservableSet</span>
- uses a special <span class="code">onChange</span> attribute that points to a handler method with a <span class="code">ListChangeListner.Change</span>, <span class="code">MapChangeListener.Change</span> or <span class="code">SetChangeListener.Change</span> parameter respectively.
+ uses a special <span class="code">onChange</span> attribute that points to a handler method with a <span class="code">ListChangeListner</span>, <span class="code">MapChangeListener</span> or <span class="code">SetChangeListener</span> parameter, respectively.
 </p>
 <pre class="code">
 &lt;VBox fx:controller="com.foo.MyController"
     xmlns:fx="http://javafx.com/fxml"&gt;
     &lt;children onChange="#handleChildrenChange"/&gt;
diff a/modules/javafx.graphics/src/main/java/javafx/animation/Transition.java b/modules/javafx.graphics/src/main/java/javafx/animation/Transition.java
--- a/modules/javafx.graphics/src/main/java/javafx/animation/Transition.java
+++ b/modules/javafx.graphics/src/main/java/javafx/animation/Transition.java
@@ -38,11 +38,11 @@
  * This class offers a simple framework to define animation. It provides all the
  * basic functionality defined in {@link Animation}. {@code Transition} requires
  * the implementation of a method {@link #interpolate(double)} which is the
  * called in each frame, while the {@code Transition} is running.
  * <p>
- * In addition an extending class needs to set the duration of a single cycle
+ * In addition, an extending class needs to set the duration of a single cycle
  * with {@link Animation#setCycleDuration(javafx.util.Duration)}. This duration
  * is usually set by the user via a duration property (as in
  * {@link FadeTransition#durationProperty() duration}) for example. But it can also be calculated
  * by the extending class as is done in {@link ParallelTransition} and
  * {@link FadeTransition}.
diff a/modules/javafx.graphics/src/main/java/javafx/scene/layout/HBox.java b/modules/javafx.graphics/src/main/java/javafx/scene/layout/HBox.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/layout/HBox.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/layout/HBox.java
@@ -166,17 +166,18 @@
     private static final String MARGIN_CONSTRAINT = "hbox-margin";
     private static final String HGROW_CONSTRAINT = "hbox-hgrow";
 
     /**
      * Sets the horizontal grow priority for the child when contained by an hbox.
-     * If set, the hbox will use the priority to allocate additional space if the
-     * hbox is resized larger than it's preferred width.
+     * If set, the hbox will use the priority value to allocate additional space if the
+     * hbox is resized larger than its preferred width.
      * If multiple hbox children have the same horizontal grow priority, then the
      * extra space will be split evenly between them.
      * If no horizontal grow priority is set on a child, the hbox will never
      * allocate it additional horizontal space if available.
-     * Setting the value to null will remove the constraint.
+     * <p>
+     * Setting the value to {@code null} will remove the constraint.
      * @param child the child of an hbox
      * @param value the horizontal grow priority for the child
      */
     public static void setHgrow(Node child, Priority value) {
         setConstraint(child, HGROW_CONSTRAINT, value);
diff a/modules/javafx.graphics/src/main/java/javafx/scene/layout/VBox.java b/modules/javafx.graphics/src/main/java/javafx/scene/layout/VBox.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/layout/VBox.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/layout/VBox.java
@@ -153,19 +153,20 @@
     private static final String MARGIN_CONSTRAINT = "vbox-margin";
     private static final String VGROW_CONSTRAINT = "vbox-vgrow";
 
     /**
      * Sets the vertical grow priority for the child when contained by an vbox.
-     * If set, the vbox will use the priority to allocate additional space if the
-     * vbox is resized larger than it's preferred height.
+     * If set, the vbox will use the priority value to allocate additional space if the
+     * vbox is resized larger than its preferred height.
      * If multiple vbox children have the same vertical grow priority, then the
      * extra space will be split evenly between them.
      * If no vertical grow priority is set on a child, the vbox will never
-     * allocate it additional vertical space if available.
-     * Setting the value to null will remove the constraint.
+     * allocate it additional vertical space, if available.
+     * <p>
+     * Setting the value to {@code null} will remove the constraint.
      * @param child the child of a vbox
-     * @param value the horizontal grow priority for the child
+     * @param value the vertical grow priority for the child
      */
     public static void setVgrow(Node child, Priority value) {
         setConstraint(child, VGROW_CONSTRAINT, value);
     }
 
@@ -212,39 +213,39 @@
     /********************************************************************
      *  END static methods
      ********************************************************************/
 
     /**
-     * Creates a VBox layout with spacing = 0 and alignment at TOP_LEFT.
+     * Creates a {@code VBox} layout with {@code spacing = 0} and alignment at {@code TOP_LEFT}.
      */
     public VBox() {
         super();
     }
 
     /**
-     * Creates a VBox layout with the specified spacing between children.
+     * Creates a {@code VBox} layout with the specified spacing between children.
      * @param spacing the amount of vertical space between each child
      */
     public VBox(double spacing) {
         this();
         setSpacing(spacing);
     }
 
     /**
-     * Creates an VBox layout with spacing = 0.
-     * @param children The initial set of children for this pane.
+     * Creates an {@code VBox} layout with {@code spacing = 0}.
+     * @param children the initial set of children for this pane
      * @since JavaFX 8.0
      */
     public VBox(Node... children) {
         super();
         getChildren().addAll(children);
     }
 
     /**
-     * Creates an VBox layout with the specified spacing between children.
-     * @param spacing the amount of horizontal space between each child
-     * @param children The initial set of children for this pane.
+     * Creates an {@code VBox} layout with the specified spacing between children.
+     * @param spacing the amount of vertical space between each child
+     * @param children the initial set of children for this pane
      * @since JavaFX 8.0
      */
     public VBox(double spacing, Node... children) {
         this();
         setSpacing(spacing);
diff a/modules/javafx.graphics/src/main/java/javafx/scene/text/Text.java b/modules/javafx.graphics/src/main/java/javafx/scene/text/Text.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/text/Text.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/text/Text.java
@@ -793,17 +793,15 @@
         return getTextAttribute().baselineOffsetProperty();
     }
 
     /**
      * Specifies a requested font smoothing type: gray or LCD.
-     *
-     * The width of the bounding box is defined by the widest row.
-     *
+     * <p>
      * Note: LCD mode doesn't apply in numerous cases, such as various
      * compositing modes, where effects are applied and very large glyphs.
      *
-     * @defaultValue FontSmoothingType.GRAY
+     * @defaultValue {@code FontSmoothingType.GRAY}
      * @since JavaFX 2.1
      */
     private ObjectProperty<FontSmoothingType> fontSmoothingType;
 
     public final void setFontSmoothingType(FontSmoothingType value) {
