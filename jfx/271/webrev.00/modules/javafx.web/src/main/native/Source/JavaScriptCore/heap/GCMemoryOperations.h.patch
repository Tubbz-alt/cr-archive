diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/GCMemoryOperations.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/GCMemoryOperations.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/GCMemoryOperations.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/GCMemoryOperations.h
@@ -51,11 +51,11 @@
         size_t count = bytes / 8;
         for (unsigned i = 0; i < count; ++i)
             bitwise_cast<volatile uint64_t*>(dst)[i] = bitwise_cast<volatile uint64_t*>(src)[i];
     };
 
-#if COMPILER(GCC_COMPATIBLE) && USE(JSVALUE64)
+#if COMPILER(GCC_COMPATIBLE) && (CPU(X86_64) || CPU(ARM64))
     if (bytes <= smallCutoff)
         slowPathForwardMemcpy();
     else if (isARM64() || bytes <= mediumCutoff) {
 #if CPU(X86_64)
         size_t alignedBytes = (bytes / 64) * 64;
@@ -119,12 +119,10 @@
 
             : [alignedBytes] "+r" (alignedBytes), [bytes] "+r" (bytes), [offset] "+r" (offset), [dstPtr] "+r" (dstPtr), [srcPtr] "+r" (srcPtr)
             :
             : "d0", "d1", "memory"
         );
-#else
-    slowPathForwardMemcpy();
 #endif // CPU(X86_64)
     } else {
         RELEASE_ASSERT(isX86_64());
 #if CPU(X86_64)
         size_t count = bytes / 8;
@@ -137,11 +135,11 @@
             : "memory");
 #endif // CPU(X86_64)
     }
 #else
     slowPathForwardMemcpy();
-#endif // COMPILER(GCC_COMPATIBLE)
+#endif // COMPILER(GCC_COMPATIBLE) && (CPU(X86_64) || CPU(ARM64))
 #else
     memcpy(dst, src, bytes);
 #endif // USE(JSVALUE64)
 }
 
