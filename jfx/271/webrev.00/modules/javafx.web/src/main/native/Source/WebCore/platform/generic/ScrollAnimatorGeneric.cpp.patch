diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/generic/ScrollAnimatorGeneric.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/generic/ScrollAnimatorGeneric.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/generic/ScrollAnimatorGeneric.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/generic/ScrollAnimatorGeneric.cpp
@@ -38,28 +38,31 @@
 
 namespace WebCore {
 
 static const Seconds overflowScrollbarsAnimationDuration { 1_s };
 static const Seconds overflowScrollbarsAnimationHideDelay { 2_s };
-static const Seconds scrollCaptureThreshold { 150_ms };
 
 std::unique_ptr<ScrollAnimator> ScrollAnimator::create(ScrollableArea& scrollableArea)
 {
     return makeUnique<ScrollAnimatorGeneric>(scrollableArea);
 }
 
 ScrollAnimatorGeneric::ScrollAnimatorGeneric(ScrollableArea& scrollableArea)
     : ScrollAnimator(scrollableArea)
     , m_overlayScrollbarAnimationTimer(*this, &ScrollAnimatorGeneric::overlayScrollbarAnimationTimerFired)
 {
-    m_kineticAnimation = makeUnique<ScrollAnimationKinetic>(m_scrollableArea, [this](FloatPoint&& position) {
+    m_kineticAnimation = makeUnique<ScrollAnimationKinetic>(
+        [this]() -> ScrollAnimationKinetic::ScrollExtents {
+            return { m_scrollableArea.minimumScrollPosition(), m_scrollableArea.maximumScrollPosition() };
+        },
+        [this](FloatPoint&& position) {
 #if ENABLE(SMOOTH_SCROLLING)
-        if (m_smoothAnimation)
-            m_smoothAnimation->setCurrentPosition(position);
+            if (m_smoothAnimation)
+                m_smoothAnimation->setCurrentPosition(position);
 #endif
-        updatePosition(WTFMove(position));
-    });
+            updatePosition(WTFMove(position));
+        });
 
 #if ENABLE(SMOOTH_SCROLLING)
     if (scrollableArea.scrollAnimatorEnabled())
         ensureSmoothScrollingAnimation();
 #endif
@@ -92,70 +95,43 @@
 
 void ScrollAnimatorGeneric::scrollToOffsetWithoutAnimation(const FloatPoint& offset, ScrollClamping)
 {
     FloatPoint position = ScrollableArea::scrollPositionFromOffset(offset, toFloatSize(m_scrollableArea.scrollOrigin()));
     m_kineticAnimation->stop();
-    m_scrollHistory.clear();
+    m_kineticAnimation->clearScrollHistory();
 
 #if ENABLE(SMOOTH_SCROLLING)
     if (m_smoothAnimation)
         m_smoothAnimation->setCurrentPosition(position);
 #endif
 
     updatePosition(WTFMove(position));
 }
 
-FloatPoint ScrollAnimatorGeneric::computeVelocity()
-{
-    if (m_scrollHistory.isEmpty())
-        return { };
-
-    auto first = m_scrollHistory[0].timestamp();
-    auto last = m_scrollHistory.rbegin()->timestamp();
-
-    if (last == first)
-        return { };
-
-    FloatPoint accumDelta;
-    for (const auto& scrollEvent : m_scrollHistory)
-        accumDelta += FloatPoint(scrollEvent.deltaX(), scrollEvent.deltaY());
-
-    m_scrollHistory.clear();
-
-    return FloatPoint(accumDelta.x() * -1 / (last - first).value(), accumDelta.y() * -1 / (last - first).value());
-}
-
 bool ScrollAnimatorGeneric::handleWheelEvent(const PlatformWheelEvent& event)
 {
     m_kineticAnimation->stop();
 
-    m_scrollHistory.removeAllMatching([&event] (PlatformWheelEvent& otherEvent) -> bool {
-        return (event.timestamp() - otherEvent.timestamp()) > scrollCaptureThreshold;
-    });
-
 #if ENABLE(KINETIC_SCROLLING)
+    m_kineticAnimation->appendToScrollHistory(event);
+
     if (event.isEndOfNonMomentumScroll()) {
-        // We don't need to add the event to the history as its delta will be (0, 0).
-        static_cast<ScrollAnimationKinetic*>(m_kineticAnimation.get())->start(m_currentPosition, computeVelocity(), m_scrollableArea.horizontalScrollbar(), m_scrollableArea.verticalScrollbar());
+        m_kineticAnimation->start(m_currentPosition, m_kineticAnimation->computeVelocity(), m_scrollableArea.horizontalScrollbar(), m_scrollableArea.verticalScrollbar());
         return true;
     }
     if (event.isTransitioningToMomentumScroll()) {
-        m_scrollHistory.clear();
-        static_cast<ScrollAnimationKinetic*>(m_kineticAnimation.get())->start(m_currentPosition, event.swipeVelocity(), m_scrollableArea.horizontalScrollbar(), m_scrollableArea.verticalScrollbar());
+        m_kineticAnimation->clearScrollHistory();
+        m_kineticAnimation->start(m_currentPosition, event.swipeVelocity(), m_scrollableArea.horizontalScrollbar(), m_scrollableArea.verticalScrollbar());
         return true;
     }
 #endif
 
-    m_scrollHistory.append(event);
-
     return ScrollAnimator::handleWheelEvent(event);
 }
 
 void ScrollAnimatorGeneric::willEndLiveResize()
 {
-    m_kineticAnimation->updateVisibleLengths();
-
 #if ENABLE(SMOOTH_SCROLLING)
     if (m_smoothAnimation)
         m_smoothAnimation->updateVisibleLengths();
 #endif
 }
@@ -167,12 +143,10 @@
     notifyPositionChanged(delta);
 }
 
 void ScrollAnimatorGeneric::didAddVerticalScrollbar(Scrollbar* scrollbar)
 {
-    m_kineticAnimation->updateVisibleLengths();
-
 #if ENABLE(SMOOTH_SCROLLING)
     if (m_smoothAnimation)
         m_smoothAnimation->updateVisibleLengths();
 #endif
     if (!scrollbar->isOverlayScrollbar())
@@ -184,12 +158,10 @@
     hideOverlayScrollbars();
 }
 
 void ScrollAnimatorGeneric::didAddHorizontalScrollbar(Scrollbar* scrollbar)
 {
-    m_kineticAnimation->updateVisibleLengths();
-
 #if ENABLE(SMOOTH_SCROLLING)
     if (m_smoothAnimation)
         m_smoothAnimation->updateVisibleLengths();
 #endif
     if (!scrollbar->isOverlayScrollbar())
