diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResourceClipper.h b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResourceClipper.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResourceClipper.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGResourceClipper.h
@@ -28,12 +28,10 @@
 namespace WebCore {
 
 class GraphicsContext;
 class ImageBuffer;
 
-typedef std::unique_ptr<ImageBuffer> ClipperMaskImage;
-
 class RenderSVGResourceClipper final : public RenderSVGResourceContainer {
     WTF_MAKE_ISO_ALLOCATED(RenderSVGResourceClipper);
 public:
     RenderSVGResourceClipper(SVGClipPathElement&, RenderStyle&&);
     virtual ~RenderSVGResourceClipper();
@@ -45,11 +43,11 @@
 
     bool applyResource(RenderElement&, const RenderStyle&, GraphicsContext*&, OptionSet<RenderSVGResourceMode>) override;
     // clipPath can be clipped too, but don't have a boundingBox or repaintRect. So we can't call
     // applyResource directly and use the rects from the object, since they are empty for RenderSVGResources
     // FIXME: We made applyClippingToContext public because we cannot call applyResource on HTML elements (it asserts on RenderObject::objectBoundingBox)
-    bool applyClippingToContext(RenderElement&, const FloatRect&, const FloatRect&, GraphicsContext&);
+    bool applyClippingToContext(RenderElement&, const FloatRect&, GraphicsContext&);
     FloatRect resourceBoundingBox(const RenderObject&) override;
 
     RenderSVGResourceType resourceType() const override { return ClipperResourceType; }
 
     bool hitTestClipContent(const FloatRect&, const FloatPoint&);
@@ -58,22 +56,41 @@
 
 protected:
     bool selfNeedsClientInvalidation() const override { return (everHadLayout() || m_clipper.size()) && selfNeedsLayout(); }
 
 private:
+    struct ClipperData {
+        FloatRect objectBoundingBox;
+        AffineTransform absoluteTransform;
+        std::unique_ptr<ImageBuffer> imageBuffer;
+
+        ClipperData() = default;
+        ClipperData(std::unique_ptr<ImageBuffer>&& buffer, const FloatRect& boundingBox, const AffineTransform& transform)
+            : objectBoundingBox(boundingBox)
+            , absoluteTransform(transform)
+            , imageBuffer(WTFMove(buffer))
+        {
+        }
+
+        bool isValidForGeometry(const FloatRect& boundingBox, const AffineTransform& transform) const
+        {
+            return imageBuffer && objectBoundingBox == boundingBox && absoluteTransform == transform;
+        }
+    };
+
     void element() const = delete;
 
     const char* renderName() const override { return "RenderSVGResourceClipper"; }
     bool isSVGResourceClipper() const override { return true; }
 
     bool pathOnlyClipping(GraphicsContext&, const AffineTransform&, const FloatRect&);
-    bool drawContentIntoMaskImage(const ClipperMaskImage&, const FloatRect& objectBoundingBox);
+    bool drawContentIntoMaskImage(ImageBuffer&, const FloatRect& objectBoundingBox);
     void calculateClipContentRepaintRect();
-    ClipperMaskImage& addRendererToClipper(const RenderObject&);
+    ClipperData& addRendererToClipper(const RenderObject&);
 
     FloatRect m_clipBoundaries;
-    HashMap<const RenderObject*, ClipperMaskImage> m_clipper;
+    HashMap<const RenderObject*, ClipperData> m_clipper;
 };
 
 }
 
 SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::RenderSVGResourceClipper)
