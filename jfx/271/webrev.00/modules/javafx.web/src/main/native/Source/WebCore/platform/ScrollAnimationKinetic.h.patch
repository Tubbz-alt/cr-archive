diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/ScrollAnimationKinetic.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/ScrollAnimationKinetic.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/ScrollAnimationKinetic.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/ScrollAnimationKinetic.h
@@ -25,19 +25,20 @@
 
 #pragma once
 
 #include "FloatPoint.h"
 #include "ScrollAnimation.h"
-#include "Timer.h"
 
 #include <wtf/Optional.h>
+#include <wtf/RunLoop.h>
 
 namespace WebCore {
 
-class ScrollableArea;
+class PlatformWheelEvent;
 
-class ScrollAnimationKinetic final: public ScrollAnimation {
+class ScrollAnimationKinetic final {
+    WTF_MAKE_FAST_ALLOCATED;
 private:
     class PerAxisData {
     public:
         PerAxisData(double lower, double upper, double initialPosition, double initialVelocity);
 
@@ -56,25 +57,39 @@
         double m_position { 0 };
         double m_velocity { 0 };
     };
 
 public:
-    ScrollAnimationKinetic(ScrollableArea&, std::function<void(FloatPoint&&)>&& notifyPositionChangedFunction);
+    struct ScrollExtents {
+        IntPoint minimumScrollPosition;
+        IntPoint maximumScrollPosition;
+    };
+
+    using ScrollExtentsCallback = WTF::Function<ScrollExtents(void)>;
+    using NotifyPositionChangedCallback = WTF::Function<void(FloatPoint&&)>;
+
+    ScrollAnimationKinetic(ScrollExtentsCallback&&, NotifyPositionChangedCallback&&);
     virtual ~ScrollAnimationKinetic();
 
+    void appendToScrollHistory(const PlatformWheelEvent&);
+    void clearScrollHistory();
+    FloatPoint computeVelocity();
+
     void start(const FloatPoint& initialPosition, const FloatPoint& velocity, bool mayHScroll, bool mayVScroll);
+    void stop();
 
 private:
-    void stop() override;
     void animationTimerFired();
 
-    std::function<void(FloatPoint&&)> m_notifyPositionChangedFunction;
+    ScrollExtentsCallback m_scrollExtentsFunction;
+    NotifyPositionChangedCallback m_notifyPositionChangedFunction;
 
     Optional<PerAxisData> m_horizontalData;
     Optional<PerAxisData> m_verticalData;
 
     MonotonicTime m_startTime;
-    Timer m_animationTimer;
+    RunLoop::Timer<ScrollAnimationKinetic> m_animationTimer;
     FloatPoint m_position;
+    Vector<PlatformWheelEvent> m_scrollHistory;
 };
 
 } // namespace WebCore
