diff a/modules/javafx.controls/src/main/java/javafx/scene/control/ListView.java b/modules/javafx.controls/src/main/java/javafx/scene/control/ListView.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/ListView.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/ListView.java
@@ -29,11 +29,10 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 
 import com.sun.javafx.scene.control.Properties;
-import com.sun.javafx.scene.control.SelectedItemsReadOnlyObservableList;
 import com.sun.javafx.scene.control.behavior.ListCellBehavior;
 import javafx.beans.InvalidationListener;
 import javafx.beans.Observable;
 import javafx.beans.WeakInvalidationListener;
 import javafx.beans.property.BooleanProperty;
@@ -1219,13 +1218,10 @@
                 throw new IllegalArgumentException("ListView can not be null");
             }
 
             this.listView = listView;
 
-            ((SelectedItemsReadOnlyObservableList)getSelectedItems()).setItemsList(listView.getItems());
-
-
             /*
              * The following two listeners are used in conjunction with
              * SelectionModel.select(T obj) to allow for a developer to select
              * an item that is not actually in the data model. When this occurs,
              * we actively try to find an index that matches this object, going
@@ -1236,11 +1232,10 @@
                 private WeakReference<ObservableList<T>> weakItemsRef = new WeakReference<>(listView.getItems());
 
                 @Override public void invalidated(Observable observable) {
                     ObservableList<T> oldItems = weakItemsRef.get();
                     weakItemsRef = new WeakReference<>(listView.getItems());
-                    ((SelectedItemsReadOnlyObservableList)getSelectedItems()).setItemsList(listView.getItems());
                     updateItemsObserver(oldItems, listView.getItems());
                 }
             };
 
             this.listView.itemsProperty().addListener(new WeakInvalidationListener(itemsObserver));
