diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/SelectedItemsReadOnlyObservableList.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/SelectedItemsReadOnlyObservableList.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/SelectedItemsReadOnlyObservableList.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/SelectedItemsReadOnlyObservableList.java
@@ -25,35 +25,21 @@
 package com.sun.javafx.scene.control;
 
 import javafx.collections.ListChangeListener;
 import javafx.collections.ObservableList;
 import javafx.collections.ObservableListBase;
-import javafx.collections.WeakListChangeListener;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Supplier;
 
 public abstract class SelectedItemsReadOnlyObservableList<E> extends ObservableListBase<E> {
 
     // This is the actual observable list of selected indices used in the selection model
     private final ObservableList<Integer> selectedIndices;
-
-    private ObservableList<E> itemsList;
-
-    private boolean itemsListChanged = false;
-    private ListChangeListener.Change<? extends E> itemsListChange;
-    private final ListChangeListener itemsListListener = c -> {
-        itemsListChanged = true;
-        itemsListChange = c;
-    };
-    private final WeakListChangeListener weakItemsListListener =
-            new WeakListChangeListener(itemsListListener);
-
     private final Supplier<Integer> modelSizeSupplier;
-
     private final List<WeakReference<E>> itemsRefList;
 
     public SelectedItemsReadOnlyObservableList(ObservableList<Integer> selectedIndices, Supplier<Integer> modelSizeSupplier) {
         this.modelSizeSupplier = modelSizeSupplier;
         this.selectedIndices = selectedIndices;
@@ -98,13 +84,10 @@
             itemsRefList.clear();
             for (int selectedIndex : selectedIndices) {
                 itemsRefList.add(new WeakReference<>(getModelItem(selectedIndex)));
             }
 
-            itemsListChanged = false;
-            itemsListChange = null;
-
             endChange();
         });
     }
 
     protected abstract E getModelItem(int index);
@@ -118,21 +101,10 @@
     @Override
     public int size() {
         return selectedIndices.size();
     }
 
-    // Used by ListView and TableView to allow for improved handling.
-    public void setItemsList(ObservableList<E> itemsList) {
-        if (this.itemsList != null) {
-            this.itemsList.removeListener(weakItemsListListener);
-        }
-        this.itemsList = itemsList;
-        if (itemsList != null) {
-            itemsList.addListener(weakItemsListListener);
-        }
-    }
-
     private E _getModelItem(int index) {
         if (index >= modelSizeSupplier.get()) {
             // attempt to return from the itemsRefList instead
             return getRemovedModelItem(index);
         } else {
