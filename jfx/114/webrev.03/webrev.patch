diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TableViewBehaviorBase.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TableViewBehaviorBase.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TableViewBehaviorBase.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TableViewBehaviorBase.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -144,24 +144,24 @@
                 new KeyMapping(END, e -> selectLastRow()),
 
                 new KeyMapping(PAGE_UP, e -> scrollUp()),
                 new KeyMapping(PAGE_DOWN, e -> scrollDown()),
 
-                new KeyMapping(LEFT, e -> selectLeftCell()),
-                new KeyMapping(KP_LEFT, e -> selectLeftCell()),
-                new KeyMapping(RIGHT, e -> selectRightCell()),
-                new KeyMapping(KP_RIGHT, e -> selectRightCell()),
+                new KeyMapping(LEFT, e -> { if(isRTL()) selectRightCell(); else selectLeftCell(); }),
+                new KeyMapping(KP_LEFT,e -> { if(isRTL()) selectRightCell(); else selectLeftCell(); }),
+                new KeyMapping(RIGHT, e -> { if(isRTL()) selectLeftCell(); else selectRightCell(); }),
+                new KeyMapping(KP_RIGHT, e -> { if(isRTL()) selectLeftCell(); else selectRightCell(); }),
 
                 new KeyMapping(UP, e -> selectPreviousRow()),
                 new KeyMapping(KP_UP, e -> selectPreviousRow()),
                 new KeyMapping(DOWN, e -> selectNextRow()),
                 new KeyMapping(KP_DOWN, e -> selectNextRow()),
 
-                new KeyMapping(LEFT, FocusTraversalInputMap::traverseLeft),
-                new KeyMapping(KP_LEFT, FocusTraversalInputMap::traverseLeft),
-                new KeyMapping(RIGHT, FocusTraversalInputMap::traverseRight),
-                new KeyMapping(KP_RIGHT, FocusTraversalInputMap::traverseRight),
+                new KeyMapping(LEFT,   e -> { if(isRTL()) focusTraverseRight(); else focusTraverseLeft(); }),
+                new KeyMapping(KP_LEFT, e -> { if(isRTL()) focusTraverseRight(); else focusTraverseLeft(); }),
+                new KeyMapping(RIGHT, e -> { if(isRTL()) focusTraverseLeft(); else focusTraverseRight(); }),
+                new KeyMapping(KP_RIGHT,e -> { if(isRTL()) focusTraverseLeft(); else focusTraverseRight(); }),
                 new KeyMapping(UP, FocusTraversalInputMap::traverseUp),
                 new KeyMapping(KP_UP, FocusTraversalInputMap::traverseUp),
                 new KeyMapping(DOWN, FocusTraversalInputMap::traverseDown),
                 new KeyMapping(KP_DOWN, FocusTraversalInputMap::traverseDown),
 
@@ -176,32 +176,32 @@
                 new KeyMapping(new KeyBinding(KP_DOWN).shift(), e -> alsoSelectNext()),
 
                 new KeyMapping(new KeyBinding(SPACE).shift(), e -> selectAllToFocus(false)),
                 new KeyMapping(new KeyBinding(SPACE).shortcut().shift(), e -> selectAllToFocus(true)),
 
-                new KeyMapping(new KeyBinding(LEFT).shift(), e -> alsoSelectLeftCell()),
-                new KeyMapping(new KeyBinding(KP_LEFT).shift(), e -> alsoSelectLeftCell()),
-                new KeyMapping(new KeyBinding(RIGHT).shift(), e -> alsoSelectRightCell()),
-                new KeyMapping(new KeyBinding(KP_RIGHT).shift(), e -> alsoSelectRightCell()),
+                new KeyMapping(new KeyBinding(LEFT).shift(), e -> { if(isRTL()) alsoSelectRightCell(); else alsoSelectLeftCell(); }),
+                new KeyMapping(new KeyBinding(KP_LEFT).shift(),  e -> { if(isRTL()) alsoSelectRightCell(); else alsoSelectLeftCell(); }),
+                new KeyMapping(new KeyBinding(RIGHT).shift(),  e -> { if(isRTL()) alsoSelectLeftCell(); else alsoSelectRightCell(); }),
+                new KeyMapping(new KeyBinding(KP_RIGHT).shift(), e -> { if(isRTL()) alsoSelectLeftCell(); else alsoSelectRightCell(); }),
 
                 new KeyMapping(new KeyBinding(UP).shortcut(), e -> focusPreviousRow()),
                 new KeyMapping(new KeyBinding(DOWN).shortcut(), e -> focusNextRow()),
-                new KeyMapping(new KeyBinding(RIGHT).shortcut(), e -> focusRightCell()),
-                new KeyMapping(new KeyBinding(KP_RIGHT).shortcut(), e -> focusRightCell()),
-                new KeyMapping(new KeyBinding(LEFT).shortcut(), e -> focusLeftCell()),
-                new KeyMapping(new KeyBinding(KP_LEFT).shortcut(), e -> focusLeftCell()),
+                new KeyMapping(new KeyBinding(RIGHT).shortcut(), e -> { if(isRTL()) focusLeftCell(); else focusRightCell(); }),
+                new KeyMapping(new KeyBinding(KP_RIGHT).shortcut(), e -> { if(isRTL()) focusLeftCell(); else focusRightCell(); }),
+                new KeyMapping(new KeyBinding(LEFT).shortcut(), e -> { if(isRTL()) focusRightCell(); else focusLeftCell(); }),
+                new KeyMapping(new KeyBinding(KP_LEFT).shortcut(), e -> { if(isRTL()) focusRightCell(); else focusLeftCell(); }),
 
                 new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll()),
                 new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow()),
                 new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow()),
                 new KeyMapping(new KeyBinding(PAGE_UP).shortcut(), e -> focusPageUp()),
                 new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut(), e -> focusPageDown()),
 
                 new KeyMapping(new KeyBinding(UP).shortcut().shift(), e -> discontinuousSelectPreviousRow()),
                 new KeyMapping(new KeyBinding(DOWN).shortcut().shift(), e -> discontinuousSelectNextRow()),
-                new KeyMapping(new KeyBinding(LEFT).shortcut().shift(), e -> discontinuousSelectPreviousColumn()),
-                new KeyMapping(new KeyBinding(RIGHT).shortcut().shift(), e -> discontinuousSelectNextColumn()),
+                new KeyMapping(new KeyBinding(LEFT).shortcut().shift(), e -> { if(isRTL()) discontinuousSelectNextColumn(); else discontinuousSelectPreviousColumn(); }),
+                new KeyMapping(new KeyBinding(RIGHT).shortcut().shift(), e -> { if(isRTL()) discontinuousSelectPreviousColumn(); else discontinuousSelectNextColumn(); }),
                 new KeyMapping(new KeyBinding(PAGE_UP).shortcut().shift(), e -> discontinuousSelectPageUp()),
                 new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut().shift(), e -> discontinuousSelectPageDown()),
                 new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow()),
                 new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow()),
 
@@ -1307,6 +1307,14 @@
             }
         }
 
         if (onMoveToLastCell != null) onMoveToLastCell.run();
     }
+
+    private EventHandler<KeyEvent> focusTraverseLeft() {
+        return FocusTraversalInputMap::traverseLeft;
+    }
+
+    private EventHandler<KeyEvent> focusTraverseRight() {
+        return FocusTraversalInputMap::traverseRight;
+    }
 }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewHorizontalArrowsTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewHorizontalArrowsTest.java
--- /dev/null
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewHorizontalArrowsTest.java
@@ -0,0 +1,226 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.javafx.scene.control;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.function.BiConsumer;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import static org.junit.Assert.*;
+import static test.com.sun.javafx.scene.control.infrastructure.KeyModifier.*;
+
+import javafx.geometry.NodeOrientation;
+import javafx.scene.control.SelectionMode;
+import javafx.scene.control.TableColumn;
+import javafx.scene.control.TablePosition;
+import javafx.scene.control.TableView;
+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;
+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;
+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;
+
+/**
+ * Test basic horizontal navigation mappings for TableView. It's parametrized on NodeOrientation
+ */
+@RunWith(Parameterized.class)
+public class TableViewHorizontalArrowsTest {
+    @Parameterized.Parameters
+    public static Collection<?> implementations() {
+        return Arrays.asList(new Object[][] {
+            {NodeOrientation.LEFT_TO_RIGHT},
+            {NodeOrientation.RIGHT_TO_LEFT} 
+        });
+    }
+
+    private TableView<String> tableView;
+    private TableView.TableViewSelectionModel<String> sm;
+    private TableView.TableViewFocusModel<String> fm;
+
+    private TableColumn<String, String> col0;
+    private TableColumn<String, String> col1;
+    private TableColumn<String, String> col2;
+    private TableColumn<String, String> col3;
+    private TableColumn<String, String> col4;
+
+    private KeyEventFirer keyboard;
+    private StageLoader stageLoader;
+    private NodeOrientation orientation;
+
+    public TableViewHorizontalArrowsTest(NodeOrientation val) {
+        orientation = val;
+    }
+
+    @Before
+    public void setup() {
+        tableView = new TableView<String>();
+        tableView.setNodeOrientation(orientation);
+        sm = tableView.getSelectionModel();
+        fm = tableView.getFocusModel();
+
+        sm.setSelectionMode(SelectionMode.MULTIPLE);
+        sm.setCellSelectionEnabled(false);
+
+        tableView.getItems().setAll("1", "2", "3", "4", "5", "6", "7", "8", "9",
+                                    "10", "11", "12");
+
+        col0 = new TableColumn<String, String>("col0");
+        col1 = new TableColumn<String, String>("col1");
+        col2 = new TableColumn<String, String>("col2");
+        col3 = new TableColumn<String, String>("col3");
+        col4 = new TableColumn<String, String>("col4");
+        tableView.getColumns().setAll(col0, col1, col2, col3, col4);
+
+        keyboard = new KeyEventFirer(tableView);
+
+        stageLoader = new StageLoader(tableView);
+        stageLoader.getStage().show();
+    }
+
+    @After
+    public void tearDown() {
+        tableView.getSkin().dispose();
+        stageLoader.dispose();
+    }
+
+    // ---------------- Helper methods -------------------------
+    /**
+     * Toggles the nodeOrientation of tableView.
+     */
+    private void changeNodeOrientation() {
+        orientation = (orientation == NodeOrientation.LEFT_TO_RIGHT?
+            NodeOrientation.RIGHT_TO_LEFT : NodeOrientation.LEFT_TO_RIGHT);
+        tableView.setNodeOrientation(orientation);
+    }
+
+    /**
+     * Orientation-aware forward horizontal navigation with arrow keys.
+     * @param modifiers the modifiers to use on keyboard
+     */
+    private void forward(KeyModifier... modifiers) {
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doRightArrowPress(modifiers);
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doLeftArrowPress(modifiers);
+        }
+    }
+
+    /**
+     * Orientation-aware backward horizontal navigation with arrow keys.
+     * @param modifiers the modifiers to use on keyboard
+     */
+    private void backward(KeyModifier... modifiers) {
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doLeftArrowPress(modifiers);
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doRightArrowPress(modifiers);
+        }
+    }
+
+
+    // ----------------------- Tests ----------------------------
+
+    @Test
+    public void testForwardSelect() {
+        sm.setCellSelectionEnabled(true);
+        sm.select(0, col0);
+        forward();
+        assertTrue("next cell must be selected", sm.isSelected(0, col1));
+        assertFalse("old cell not be selected", sm.isSelected(0, col0));
+    }
+
+    @Test
+    public void testBackwardSelect() {
+        sm.setCellSelectionEnabled(true);
+        sm.select(0, col4);
+        backward();
+        assertTrue("next cell must be selected", sm.isSelected(0, col3));
+        assertFalse("old cell not be selected", sm.isSelected(0, col4));
+    }
+
+    @Test
+    public void testForwardFocus() {
+        sm.setCellSelectionEnabled(true);
+        sm.select(0, col0);
+        forward(getShortcutKey());
+        assertTrue("selected cell must still be selected", sm.isSelected(0, col0));
+        assertFalse("next cell must not be selected", sm.isSelected(0, col1));
+        TablePosition<?, ?> focusedCell = fm.getFocusedCell();
+        assertEquals("focused cell must moved to next", col1, focusedCell.getTableColumn());
+    }
+
+    @Test
+    public void testBackwardFocus() {
+        sm.setCellSelectionEnabled(true);
+        sm.select(0, col4);
+        backward(getShortcutKey());
+        assertTrue("selected cell must still be selected", sm.isSelected(0, col4));
+        assertFalse("previous cell must not be selected", sm.isSelected(0, col3));
+        TablePosition<?, ?> focusedCell = fm.getFocusedCell();
+        assertEquals("focused cell must moved to prev", col3, focusedCell.getTableColumn());
+    }
+
+
+
+    @Test
+    public void testChangeOrientationSimpleForwardSelect() {
+        sm.setCellSelectionEnabled(true);
+        sm.select(0, col0);
+        forward();
+        assertTrue(sm.isSelected(0, col1));
+        assertFalse(sm.isSelected(0, col0));
+
+        changeNodeOrientation();
+
+        // Now, test that the forward select resprects change in NodeOrientation
+        forward();
+
+        assertFalse(sm.isSelected(0, col1));
+        assertTrue(sm.isSelected(0, col2));
+    }
+
+    @Test
+    public void testChangeOrientationSimpleBackwardSelect() {
+        sm.setCellSelectionEnabled(true);
+        sm.select(0, col4);
+        backward();
+        assertTrue(sm.isSelected(0, col3));
+        assertFalse(sm.isSelected(0, col4));
+
+        changeNodeOrientation();
+
+        // Now, test that the backward select resprects change in NodeOrientation
+        backward();
+        assertFalse(sm.isSelected(0, col3));
+        assertTrue(sm.isSelected(0, col2));
+    }
+
+    // TBD: add tests for all keyMappings with modifiers
+}
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewKeyInputTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewKeyInputTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewKeyInputTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewKeyInputTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -33,10 +33,12 @@
 import javafx.scene.Group;
 import javafx.scene.control.Button;
 import javafx.scene.input.KeyCode;
 import javafx.scene.layout.HBox;
 
+import java.util.Arrays;
+import java.util.Collection;
 import java.util.List;
 import java.util.function.Function;
 
 import com.sun.javafx.PlatformUtil;
 import com.sun.javafx.util.Utils;
@@ -55,22 +57,35 @@
 import javafx.scene.control.TableColumn;
 import javafx.scene.control.TableFocusModel;
 import javafx.scene.control.TablePosition;
 import javafx.scene.control.TableSelectionModel;
 import javafx.scene.control.TableView;
+import javafx.geometry.NodeOrientation;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
+
 import static org.junit.Assert.fail;
 
+@RunWith(Parameterized.class)
 public class TableViewKeyInputTest {
+    @Parameterized.Parameters public static Collection implementations() {
+        return Arrays.asList(new Object[][]{
+                {NodeOrientation.LEFT_TO_RIGHT},
+                {NodeOrientation.RIGHT_TO_LEFT}
+        });
+    }
+
     private TableView<String> tableView;
 //    private TableSelectionModel<String> sm;
     private TableView.TableViewSelectionModel<String> sm;
     private TableView.TableViewFocusModel<String> fm;
 
@@ -82,12 +97,19 @@
     private TableColumn<String, String> col1;
     private TableColumn<String, String> col2;
     private TableColumn<String, String> col3;
     private TableColumn<String, String> col4;
 
+    private NodeOrientation orientation;
+
+    public TableViewKeyInputTest(NodeOrientation val) {
+        orientation = val;
+    }
+
     @Before public void setup() {
         tableView = new TableView<String>();
+        tableView.setNodeOrientation(orientation);
         sm = tableView.getSelectionModel();
         fm = tableView.getFocusModel();
 
         sm.setSelectionMode(SelectionMode.MULTIPLE);
         sm.setCellSelectionEnabled(false);
@@ -1107,21 +1129,32 @@
     // Test 1
     @Test public void test_rt18591_cell_1() {
         sm.setSelectionMode(SelectionMode.MULTIPLE);
         sm.setCellSelectionEnabled(true);
         sm.select(0, col0);
-        keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
-        keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+        }
         keyboard.doKeyPress(KeyCode.SPACE,
                 KeyModifier.getShortcutKey(),
                 (Utils.isMac()  ? KeyModifier.CTRL : null));
         assertTrue(sm.isSelected(0,col0));
         assertTrue(sm.isSelected(0,col2));
         assertTrue(isAnchor(0,2));
 
-        keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
-        keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        }
         assertTrue(sm.isSelected(0,col0));
         assertTrue(sm.isSelected(0,col2));
         assertTrue(sm.isSelected(0,col3));
         assertTrue(sm.isSelected(0,col4));
         assertTrue(isAnchor(0,2));
@@ -1130,21 +1163,31 @@
     // Test 2
     @Test public void test_rt18591_cell_2() {
         sm.setSelectionMode(SelectionMode.MULTIPLE);
         sm.setCellSelectionEnabled(true);
         sm.select(0, col4);
-        keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
-        keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+        }
         keyboard.doKeyPress(KeyCode.SPACE,
                 KeyModifier.getShortcutKey(),
                 (Utils.isMac()  ? KeyModifier.CTRL : null));
         assertTrue(sm.isSelected(0,col4));
         assertTrue(sm.isSelected(0,col2));
         assertTrue(isAnchor(0,2));
 
-        keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
-        keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        }
         assertTrue(sm.isSelected(0,col0));
         assertTrue(sm.isSelected(0,col1));
         assertTrue(sm.isSelected(0,col2));
         assertTrue(sm.isSelected(0,col4));
         assertTrue(isAnchor(0,2));
@@ -1153,30 +1196,46 @@
     // Test 3
     @Test public void test_rt18591_cell_3() {
         sm.setSelectionMode(SelectionMode.MULTIPLE);
         sm.setCellSelectionEnabled(true);
         sm.select(0, col0);
-        keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
-        keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+        }
         keyboard.doKeyPress(KeyCode.SPACE,
                 KeyModifier.getShortcutKey(),
                 (Utils.isMac()  ? KeyModifier.CTRL : null));
         assertTrue(sm.isSelected(0,col0));
         assertTrue(sm.isSelected(0,col2));
         assertTrue(isAnchor(0,2));
 
-        keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
-        keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        }
         assertTrue(sm.isSelected(0,col0));
         assertTrue(sm.isSelected(0,col2));
         assertTrue(sm.isSelected(0,col3));
         assertTrue(sm.isSelected(0,col4));
         assertTrue(isAnchor(0,2));
 
-        keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
-        keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
-        keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        }
         assertTrue(sm.isSelected(0,col0));
         assertTrue(sm.isSelected(0,col1));
         assertTrue(sm.isSelected(0,col2));
         assertTrue(sm.isSelected(0,col3));
         assertTrue(sm.isSelected(0,col4));
@@ -1186,30 +1245,47 @@
     // Test 4
     @Test public void test_rt18591_cell_4() {
         sm.setSelectionMode(SelectionMode.MULTIPLE);
         sm.setCellSelectionEnabled(true);
         sm.select(0, col4);
-        keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
-        keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+        }
         keyboard.doKeyPress(KeyCode.SPACE,
                 KeyModifier.getShortcutKey(),
                 (Utils.isMac()  ? KeyModifier.CTRL : null));
         assertTrue(sm.isSelected(0,col4));
         assertTrue(sm.isSelected(0,col2));
         assertTrue(isAnchor(0,2));
 
-        keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
-        keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        }
         assertTrue(sm.isSelected(0,col0));
         assertTrue(sm.isSelected(0,col1));
         assertTrue(sm.isSelected(0,col2));
         assertTrue(sm.isSelected(0,col4));
         assertTrue(isAnchor(0,2));
 
-        keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
-        keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
-        keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doRightArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        }
         assertTrue(sm.isSelected(0,col0));
         assertTrue(sm.isSelected(0,col1));
         assertTrue(sm.isSelected(0,col2));
         assertTrue(sm.isSelected(0,col3));
         assertTrue(sm.isSelected(0,col4));
@@ -1481,44 +1557,77 @@
 
         keyboard.doLeftArrowPress(KeyModifier.SHIFT);   // select (1, col4)
         keyboard.doLeftArrowPress(KeyModifier.SHIFT);   // select (1, col3)
         keyboard.doLeftArrowPress(KeyModifier.SHIFT);   // select (1, col2)
         keyboard.doLeftArrowPress(KeyModifier.SHIFT);   // select (1, col1)
-        assertTrue(sm.isSelected(1, col4));
-        assertTrue(sm.isSelected(1, col3));
-        assertTrue(sm.isSelected(1, col2));
-        assertTrue(sm.isSelected(1, col1));
-        assertTrue(sm.isSelected(1, col0));
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertTrue(sm.isSelected(1, col4));
+            assertTrue(sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col1));
+            assertTrue(sm.isSelected(1, col0));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertTrue(sm.isSelected(1, col4));
+            assertFalse(sm.isSelected(1, col3));
+            assertFalse(sm.isSelected(1, col2));
+            assertFalse(sm.isSelected(1, col1));
+            assertFalse(sm.isSelected(1, col0));
+        }
 
         keyboard.doRightArrowPress(KeyModifier.SHIFT);   // deselect (1, col1)
-        assertTrue(sm.isSelected(1, col4));
-        assertTrue(sm.isSelected(1, col3));
-        assertTrue(sm.isSelected(1, col2));
-        assertTrue(debug(), sm.isSelected(1, col1));
-        assertFalse(sm.isSelected(1, col0));
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertTrue(sm.isSelected(1, col4));
+            assertTrue(sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col2));
+            assertTrue(debug(), sm.isSelected(1, col1));
+            assertFalse(sm.isSelected(1, col0));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertTrue(sm.isSelected(1, col4));
+            assertTrue(sm.isSelected(1, col3));
+        }
     }
 
     @Test public void test_rt18488_selectToRight() {
         sm.setCellSelectionEnabled(true);
         sm.clearAndSelect(1, col0);
 
         keyboard.doRightArrowPress(KeyModifier.SHIFT);   // select (1, col2)
         keyboard.doRightArrowPress(KeyModifier.SHIFT);   // select (1, col3)
         keyboard.doRightArrowPress(KeyModifier.SHIFT);   // select (1, col4)
         keyboard.doRightArrowPress(KeyModifier.SHIFT);   // select (1, col5)
-        assertTrue(sm.isSelected(1, col4));
-        assertTrue(sm.isSelected(1, col3));
-        assertTrue(sm.isSelected(1, col2));
-        assertTrue(sm.isSelected(1, col1));
-        assertTrue(sm.isSelected(1, col0));
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertTrue(sm.isSelected(1, col4));
+            assertTrue(sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col1));
+            assertTrue(sm.isSelected(1, col0));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertFalse(sm.isSelected(1, col4));
+            assertFalse(sm.isSelected(1, col3));
+            assertFalse(sm.isSelected(1, col2));
+            assertFalse(sm.isSelected(1, col1));
+            assertTrue(sm.isSelected(1, col0));
+        }
 
         keyboard.doLeftArrowPress(KeyModifier.SHIFT);   // deselect (1, col5)
-        assertFalse(sm.isSelected(1, col4));
-        assertTrue(sm.isSelected(1, col3));
-        assertTrue(sm.isSelected(1, col2));
-        assertTrue(sm.isSelected(1, col1));
-        assertTrue(sm.isSelected(1, col0));
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertFalse(sm.isSelected(1, col4));
+            assertTrue(sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col1));
+            assertTrue(sm.isSelected(1, col0));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertFalse(sm.isSelected(1, col4));
+            assertFalse(sm.isSelected(1, col3));
+            assertFalse(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col1));
+            assertTrue(sm.isSelected(1, col0));
+        }
     }
 
     @Test public void test_rt18488_comment1() {
         sm.setCellSelectionEnabled(true);
         sm.clearAndSelect(1, col0);
@@ -1527,66 +1636,128 @@
         keyboard.doRightArrowPress(KeyModifier.SHIFT);   // select (1, col3)
         keyboard.doRightArrowPress(KeyModifier.SHIFT);   // select (1, col4)
         keyboard.doRightArrowPress(KeyModifier.SHIFT);   // select (1, col5)
         keyboard.doDownArrowPress(KeyModifier.SHIFT);    // select (2, col5)
 
-        assertTrue(sm.isSelected(2, col4));
-        assertTrue(sm.isSelected(1, col4));
-        assertTrue(sm.isSelected(1, col3));
-        assertTrue(sm.isSelected(1, col2));
-        assertTrue(sm.isSelected(1, col1));
-        assertTrue(sm.isSelected(1, col0));
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertTrue(sm.isSelected(2, col4));
+            assertTrue(sm.isSelected(1, col4));
+            assertTrue(sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col1));
+            assertTrue(sm.isSelected(1, col0));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT)  {
+            assertFalse(sm.isSelected(1, col4));
+            assertFalse(sm.isSelected(1, col3));
+            assertFalse(sm.isSelected(1, col2));
+            assertFalse(sm.isSelected(1, col1));
+            assertTrue(sm.isSelected(1, col0));
+            assertTrue(sm.isSelected(2, col0));
+        }
 
         keyboard.doUpArrowPress(KeyModifier.SHIFT);     // deselect (2, col5)
-        assertFalse(sm.isSelected(2, col4));
-        assertTrue(sm.isSelected(1, col4));
-        assertTrue(sm.isSelected(1, col3));
-        assertTrue(sm.isSelected(1, col2));
-        assertTrue(sm.isSelected(1, col1));
-        assertTrue(sm.isSelected(1, col0));
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertFalse(sm.isSelected(2, col4));
+            assertTrue(sm.isSelected(1, col4));
+            assertTrue(sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col1));
+            assertTrue(sm.isSelected(1, col0));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT)  {
+            assertFalse(sm.isSelected(1, col4));
+            assertFalse(sm.isSelected(1, col3));
+            assertFalse(sm.isSelected(1, col2));
+            assertFalse(sm.isSelected(1, col1));
+            assertTrue(sm.isSelected(1, col0));
+            assertFalse(sm.isSelected(2, col0));
+        }
     }
 
     @Test public void test_rt18536_positive_horizontal() {
-        // Test shift selection when focus is elsewhere (so as to select a range)
-        sm.setCellSelectionEnabled(true);
-        sm.clearAndSelect(1, col0);
-
-        // move focus by holding down ctrl button
-        keyboard.doRightArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col2)
-        keyboard.doRightArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col3)
-        keyboard.doRightArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col4)
-        keyboard.doRightArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col5)
-        assertTrue(fm.isFocused(1, col4));
-
-        // press shift + space to select all cells between (1, col1) and (1, col5)
-        keyboard.doKeyPress(KeyCode.SPACE, KeyModifier.SHIFT);
-        assertTrue(sm.isSelected(1, col4));
-        assertTrue(debug(), sm.isSelected(1, col3));
-        assertTrue(sm.isSelected(1, col2));
-        assertTrue(sm.isSelected(1, col1));
-        assertTrue(sm.isSelected(1, col0));
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            // Test shift selection when focus is elsewhere (so as to select a range)
+            sm.setCellSelectionEnabled(true);
+            sm.clearAndSelect(1, col0);
+
+            // move focus by holding down ctrl button
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col2)
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col3)
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col4)
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col5)
+            assertTrue(fm.isFocused(1, col4));
+
+            // press shift + space to select all cells between (1, col1) and (1, col5)
+            keyboard.doKeyPress(KeyCode.SPACE, KeyModifier.SHIFT);
+            assertTrue(sm.isSelected(1, col4));
+            assertTrue(debug(), sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col1));
+            assertTrue(sm.isSelected(1, col0));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            // Test shift selection when focus is elsewhere (so as to select a range)
+            sm.setCellSelectionEnabled(true);
+            sm.clearAndSelect(1, col4);
+
+            // move focus by holding down ctrl button
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col3)
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col2)
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col1)
+            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col0)
+            assertTrue(fm.isFocused(1, col0));
+
+            // press shift + space to select all cells between (1, col1) and (1, col5)
+            keyboard.doKeyPress(KeyCode.SPACE, KeyModifier.SHIFT);
+            assertTrue(sm.isSelected(1, col0));
+            assertTrue(debug(), sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col1));
+            assertTrue(sm.isSelected(1, col0));
+        }
     }
 
     @Test public void test_rt18536_negative_horizontal() {
-        // Test shift selection when focus is elsewhere (so as to select a range)
-        sm.setCellSelectionEnabled(true);
-        sm.clearAndSelect(1, col4);
-
-        // move focus by holding down ctrl button
-        keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col4)
-        keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col3)
-        keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col2)
-        keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col1)
-        assertTrue(fm.isFocused(1, col0));
 
-        // press shift + space to select all cells between (1, col1) and (1, col5)
-        keyboard.doKeyPress(KeyCode.SPACE, KeyModifier.SHIFT);
-        assertTrue(debug(), sm.isSelected(1, col4));
-        assertTrue(sm.isSelected(1, col3));
-        assertTrue(sm.isSelected(1, col2));
-        assertTrue(sm.isSelected(1, col1));
-        assertTrue(sm.isSelected(1, col0));
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            // Test shift selection when focus is elsewhere (so as to select a range)
+            sm.setCellSelectionEnabled(true);
+            sm.clearAndSelect(1, col4);
+
+            // move focus by holding down ctrl button
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col4)
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col3)
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col2)
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col1)
+            assertTrue(fm.isFocused(1, col0));
+
+            // press shift + space to select all cells between (1, col1) and (1, col5)
+            keyboard.doKeyPress(KeyCode.SPACE, KeyModifier.SHIFT);
+            assertTrue(debug(), sm.isSelected(1, col4));
+            assertTrue(sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col1));
+            assertTrue(sm.isSelected(1, col0));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            // Test shift selection when focus is elsewhere (so as to select a range)
+            sm.setCellSelectionEnabled(true);
+            sm.clearAndSelect(1, col0);
+
+            // move focus by holding down ctrl button
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col1)
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col2)
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col3)
+            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());   // move focus to (1, col4)
+            assertTrue(fm.isFocused(1, col4));
+
+            // press shift + space to select all cells between (1, col1) and (1, col5)
+            keyboard.doKeyPress(KeyCode.SPACE, KeyModifier.SHIFT);
+            assertTrue(debug(), sm.isSelected(1, col0));
+            assertTrue(sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col1));
+            assertTrue(sm.isSelected(1, col0));
+        }
     }
 
     //
     @Test public void test_rt18536_positive_vertical() {
         // Test shift selection when focus is elsewhere (so as to select a range)
@@ -2630,34 +2801,48 @@
             tableView.getItems().add("Row " + i);
         }
 
         sm.setCellSelectionEnabled(true);
 
-        sm.clearAndSelect(6, col0);
+        sm.clearAndSelect(6, col1);
         assertEquals(6, getAnchor().getRow());
-        assertEquals(0, getAnchor().getColumn());
-        assertTrue(fm.isFocused(6, col0));
-        assertTrue(sm.isSelected(6, col0));
+        assertEquals(1, getAnchor().getColumn());
+        assertTrue(fm.isFocused(6, col1));
+        assertTrue(sm.isSelected(6, col1));
 
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.getShortcutKey());
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.getShortcutKey());
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.getShortcutKey());
         keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.getShortcutKey());
         Toolkit.getToolkit().firePulse();
         assertEquals(6, getAnchor().getRow());
-        assertEquals(0, getAnchor().getColumn());
-        assertTrue(fm.isFocused(3, col1));
-        assertTrue(sm.isSelected(6, col0));
-        assertFalse(sm.isSelected(3, col1));
+        assertEquals(1, getAnchor().getColumn());
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertTrue(fm.isFocused(3, col2));
+            assertTrue(sm.isSelected(6, col1));
+            assertFalse(sm.isSelected(3, col2));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertTrue(fm.isFocused(3, col0));
+            assertTrue(sm.isSelected(6, col1));
+            assertFalse(sm.isSelected(3, col0));
+        }
 
         keyboard.doKeyPress(KeyCode.SPACE, KeyModifier.SHIFT);
         Toolkit.getToolkit().firePulse();
         assertEquals(6, getAnchor().getRow());
-        assertEquals(0, getAnchor().getColumn());
-        assertTrue(fm.isFocused(3, col1));
-        assertTrue(sm.isSelected(3, col1));
-        assertTrue(sm.isSelected(6, col0));
+        assertEquals(1, getAnchor().getColumn());
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertTrue(fm.isFocused(3, col2));
+            assertTrue(sm.isSelected(3, col2));
+            assertTrue(sm.isSelected(6, col1));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertTrue(fm.isFocused(3, col0));
+            assertTrue(sm.isSelected(3, col0));
+            assertTrue(sm.isSelected(6, col1));
+        }
     }
 
     @Test public void test_rt33613_up_multipleColumn_left() {
         final int items = 10;
         tableView.getItems().clear();
@@ -2678,21 +2863,35 @@
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.getShortcutKey());
         keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.getShortcutKey());
         Toolkit.getToolkit().firePulse();
         assertEquals(6, getAnchor().getRow());
         assertEquals(1, getAnchor().getColumn());
-        assertTrue(fm.isFocused(3, col0));
-        assertTrue(sm.isSelected(6, col1));
-        assertFalse(sm.isSelected(3, col0));
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertTrue(fm.isFocused(3, col0));
+            assertTrue(sm.isSelected(6, col1));
+            assertFalse(sm.isSelected(3, col0));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertTrue(fm.isFocused(3, col2));
+            assertTrue(sm.isSelected(6, col1));
+            assertFalse(sm.isSelected(3, col2));
+        }
 
         keyboard.doKeyPress(KeyCode.SPACE, KeyModifier.SHIFT);
         Toolkit.getToolkit().firePulse();
         assertEquals(6, getAnchor().getRow());
         assertEquals(1, getAnchor().getColumn());
-        assertTrue(fm.isFocused(3, col0));
-        assertTrue(sm.isSelected(3, col0));
-        assertTrue(sm.isSelected(6, col1));
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertTrue(fm.isFocused(3, col0));
+            assertTrue(sm.isSelected(3, col0));
+            assertTrue(sm.isSelected(6, col1));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertTrue(fm.isFocused(3, col2));
+            assertTrue(sm.isSelected(3, col2));
+            assertTrue(sm.isSelected(6, col1));
+        }
     }
 
     @Test public void test_rt33613_down_oneColumn() {
         final int items = 10;
         tableView.getItems().clear();
@@ -2732,34 +2931,48 @@
             tableView.getItems().add("Row " + i);
         }
 
         sm.setCellSelectionEnabled(true);
 
-        sm.clearAndSelect(3, col0);
+        sm.clearAndSelect(3, col1);
         assertEquals(3, getAnchor().getRow());
-        assertEquals(0, getAnchor().getColumn());
-        assertTrue(fm.isFocused(3, col0));
-        assertTrue(sm.isSelected(3, col0));
+        assertEquals(1, getAnchor().getColumn());
+        assertTrue(fm.isFocused(3, col1));
+        assertTrue(sm.isSelected(3, col1));
 
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.getShortcutKey());
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.getShortcutKey());
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.getShortcutKey());
         keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.getShortcutKey());
         Toolkit.getToolkit().firePulse();
         assertEquals(3, getAnchor().getRow());
-        assertEquals(0, getAnchor().getColumn());
-        assertTrue(fm.isFocused(6, col1));
-        assertTrue(sm.isSelected(3, col0));
-        assertFalse(sm.isSelected(6, col1));
+        assertEquals(1, getAnchor().getColumn());
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertTrue(fm.isFocused(6, col2));
+            assertTrue(sm.isSelected(3, col1));
+            assertFalse(sm.isSelected(6, col2));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertTrue(fm.isFocused(6, col0));
+            assertTrue(sm.isSelected(3, col1));
+            assertFalse(sm.isSelected(6, col0));
+        }
 
         keyboard.doKeyPress(KeyCode.SPACE, KeyModifier.SHIFT);
         Toolkit.getToolkit().firePulse();
         assertEquals(3, getAnchor().getRow());
-        assertEquals(0, getAnchor().getColumn());
-        assertTrue(fm.isFocused(6, col1));
-        assertTrue(sm.isSelected(6, col1));
-        assertTrue(sm.isSelected(3, col0));
+        assertEquals(1, getAnchor().getColumn());
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertTrue(fm.isFocused(6, col2));
+            assertTrue(sm.isSelected(6, col2));
+            assertTrue(sm.isSelected(3, col1));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertTrue(fm.isFocused(6, col0));
+            assertTrue(sm.isSelected(6, col0));
+            assertTrue(sm.isSelected(3, col1));
+        }
     }
 
     @Test public void test_rt33613_down_multipleColumn_left() {
         final int items = 10;
         tableView.getItems().clear();
@@ -2779,96 +2992,179 @@
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.getShortcutKey());
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.getShortcutKey());
         keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.getShortcutKey());
         assertEquals(3, getAnchor().getRow());
         assertEquals(1, getAnchor().getColumn());
-        assertTrue(fm.isFocused(6, col0));
-        assertTrue(sm.isSelected(3, col1));
-        assertFalse(sm.isSelected(6, col0));
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertTrue(fm.isFocused(6, col0));
+            assertTrue(sm.isSelected(3, col1));
+            assertFalse(sm.isSelected(6, col0));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertTrue(fm.isFocused(6, col2));
+            assertTrue(sm.isSelected(3, col1));
+            assertFalse(sm.isSelected(6, col2));
+        }
 
         keyboard.doKeyPress(KeyCode.SPACE, KeyModifier.SHIFT);
         assertEquals(3, getAnchor().getRow());
         assertEquals(1, getAnchor().getColumn());
-        assertTrue(fm.isFocused(6, col0));
-        assertTrue(sm.isSelected(6, col0));
-        assertTrue(sm.isSelected(3, col1));
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertTrue(fm.isFocused(6, col0));
+            assertTrue(sm.isSelected(6, col0));
+            assertTrue(sm.isSelected(3, col1));
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertTrue(fm.isFocused(6, col2));
+            assertTrue(sm.isSelected(6, col2));
+            assertTrue(sm.isSelected(3, col1));
+        }
     }
 
     @Test public void test_rt18439() {
+
         final int items = 10;
         tableView.getItems().clear();
         for (int i = 0; i < items; i++) {
             tableView.getItems().add("Row " + i);
         }
 
         sm.setCellSelectionEnabled(true);
         sm.setSelectionMode(SelectionMode.MULTIPLE);
 
-        sm.clearAndSelect(0, col0);
-
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 1
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 2
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 3
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 4
-        assertEquals(0, getAnchor().getRow());
-        assertEquals(0, getAnchor().getColumn());              // anchor does not move
-        assertTrue(fm.isFocused(0, col4));
-        assertTrue(sm.isSelected(0, col0));
-        assertTrue(sm.isSelected(0, col1));
-        assertTrue(sm.isSelected(0, col2));
-        assertTrue(sm.isSelected(0, col3));
-        assertTrue(sm.isSelected(0, col4));
-
-        keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 1
-        keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 2
-        assertEquals(0, getAnchor().getRow());
-        assertEquals(0, getAnchor().getColumn());             // anchor does not move
-        assertTrue(fm.isFocused(2, col4));
-        assertTrue(sm.isSelected(0, col0));
-        assertTrue(sm.isSelected(0, col1));
-        assertTrue(sm.isSelected(0, col2));
-        assertTrue(sm.isSelected(0, col3));
-        assertTrue(sm.isSelected(0, col4));
-        assertTrue(sm.isSelected(1, col4));
-        assertTrue(sm.isSelected(2, col4));
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            sm.clearAndSelect(0, col0);
 
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 3
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 2
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 1
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 0
-        assertEquals(0, getAnchor().getRow());
-        assertEquals(0, getAnchor().getColumn());             // anchor does not move
-        assertTrue(fm.isFocused(2, col0));
-        assertTrue(sm.isSelected(0, col0));
-        assertTrue(sm.isSelected(0, col1));
-        assertTrue(sm.isSelected(0, col2));
-        assertTrue(sm.isSelected(0, col3));
-        assertTrue(sm.isSelected(0, col4));
-        assertTrue(sm.isSelected(1, col4));
-        assertTrue(sm.isSelected(2, col4));
-        assertTrue(sm.isSelected(2, col3));
-        assertTrue(sm.isSelected(2, col2));
-        assertTrue(sm.isSelected(2, col1));
-        assertTrue(sm.isSelected(2, col0));
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 3
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 4
+            assertEquals(0, getAnchor().getRow());
+            assertEquals(0, getAnchor().getColumn());              // anchor does not move
+            assertTrue(fm.isFocused(0, col4));
+            assertTrue(sm.isSelected(0, col0));
+            assertTrue(sm.isSelected(0, col1));
+            assertTrue(sm.isSelected(0, col2));
+            assertTrue(sm.isSelected(0, col3));
+            assertTrue(sm.isSelected(0, col4));
+
+            keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 1
+            keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 2
+            assertEquals(0, getAnchor().getRow());
+            assertEquals(0, getAnchor().getColumn());             // anchor does not move
+            assertTrue(fm.isFocused(2, col4));
+            assertTrue(sm.isSelected(0, col0));
+            assertTrue(sm.isSelected(0, col1));
+            assertTrue(sm.isSelected(0, col2));
+            assertTrue(sm.isSelected(0, col3));
+            assertTrue(sm.isSelected(0, col4));
+            assertTrue(sm.isSelected(1, col4));
+            assertTrue(sm.isSelected(2, col4));
+
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 3
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 0
+            assertEquals(0, getAnchor().getRow());
+            assertEquals(0, getAnchor().getColumn());             // anchor does not move
+            assertTrue(fm.isFocused(2, col0));
+            assertTrue(sm.isSelected(0, col0));
+            assertTrue(sm.isSelected(0, col1));
+            assertTrue(sm.isSelected(0, col2));
+            assertTrue(sm.isSelected(0, col3));
+            assertTrue(sm.isSelected(0, col4));
+            assertTrue(sm.isSelected(1, col4));
+            assertTrue(sm.isSelected(2, col4));
+            assertTrue(sm.isSelected(2, col3));
+            assertTrue(sm.isSelected(2, col2));
+            assertTrue(sm.isSelected(2, col1));
+            assertTrue(sm.isSelected(2, col0));
+
+            keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT); // row 1
+            keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT); // row 0
+            assertEquals(0, getAnchor().getRow());
+            assertEquals(0, getAnchor().getColumn());           // anchor does not move
+            assertTrue(fm.isFocused(0, col0));
+            assertFalse(sm.isSelected(0, col0));                // we've gone right around - this cell is now unselected
+            assertTrue(sm.isSelected(0, col1));
+            assertTrue(sm.isSelected(0, col2));
+            assertTrue(sm.isSelected(0, col3));
+            assertTrue(sm.isSelected(0, col4));
+            assertTrue(sm.isSelected(1, col4));
+            assertTrue(sm.isSelected(2, col4));
+            assertTrue(sm.isSelected(2, col3));
+            assertTrue(sm.isSelected(2, col2));
+            assertTrue(sm.isSelected(2, col1));
+            assertTrue(sm.isSelected(2, col0));
+            assertTrue(sm.isSelected(1, col0));
+        }
+        else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            sm.clearAndSelect(0, col4);
 
-        keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT); // row 1
-        keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT); // row 0
-        assertEquals(0, getAnchor().getRow());
-        assertEquals(0, getAnchor().getColumn());           // anchor does not move
-        assertTrue(fm.isFocused(0, col0));
-        assertFalse(sm.isSelected(0, col0));                // we've gone right around - this cell is now unselected
-        assertTrue(sm.isSelected(0, col1));
-        assertTrue(sm.isSelected(0, col2));
-        assertTrue(sm.isSelected(0, col3));
-        assertTrue(sm.isSelected(0, col4));
-        assertTrue(sm.isSelected(1, col4));
-        assertTrue(sm.isSelected(2, col4));
-        assertTrue(sm.isSelected(2, col3));
-        assertTrue(sm.isSelected(2, col2));
-        assertTrue(sm.isSelected(2, col1));
-        assertTrue(sm.isSelected(2, col0));
-        assertTrue(sm.isSelected(1, col0));
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 3
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 0
+            assertEquals(0, getAnchor().getRow());
+            assertEquals(4, getAnchor().getColumn());              // anchor does not move
+            assertTrue(fm.isFocused(0, col0));
+            assertTrue(sm.isSelected(0, col4));
+            assertTrue(sm.isSelected(0, col3));
+            assertTrue(sm.isSelected(0, col2));
+            assertTrue(sm.isSelected(0, col1));
+            assertTrue(sm.isSelected(0, col0));
+
+            keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 1
+            keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 2
+            assertEquals(0, getAnchor().getRow());
+            assertEquals(4, getAnchor().getColumn());             // anchor does not move
+            assertTrue(fm.isFocused(2, col0));
+            assertTrue(sm.isSelected(0, col4));
+            assertTrue(sm.isSelected(0, col3));
+            assertTrue(sm.isSelected(0, col2));
+            assertTrue(sm.isSelected(0, col1));
+            assertTrue(sm.isSelected(0, col0));
+            assertTrue(sm.isSelected(1, col0));
+            assertTrue(sm.isSelected(2, col0));
+
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 0
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 3
+            assertEquals(0, getAnchor().getRow());
+            assertEquals(4, getAnchor().getColumn());             // anchor does not move
+            assertTrue(fm.isFocused(2, col4));
+            assertTrue(sm.isSelected(0, col0));
+            assertTrue(sm.isSelected(0, col1));
+            assertTrue(sm.isSelected(0, col2));
+            assertTrue(sm.isSelected(0, col3));
+            assertTrue(sm.isSelected(0, col4));
+            assertTrue(sm.isSelected(1, col0));
+            assertTrue(sm.isSelected(2, col4));
+            assertTrue(sm.isSelected(2, col3));
+            assertTrue(sm.isSelected(2, col2));
+            assertTrue(sm.isSelected(2, col1));
+            assertTrue(sm.isSelected(2, col0));
+
+            keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT); // row 0
+            keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT); // row 1
+            assertEquals(0, getAnchor().getRow());
+            assertEquals(4, getAnchor().getColumn());           // anchor does not move
+            assertTrue(fm.isFocused(0, col4));
+            assertFalse(sm.isSelected(0, col4));                // we've gone right around - this cell is now unselected
+            assertTrue(sm.isSelected(0, col1));
+            assertTrue(sm.isSelected(0, col2));
+            assertTrue(sm.isSelected(0, col3));
+            assertTrue(sm.isSelected(0, col0));
+            assertTrue(sm.isSelected(1, col4));
+            assertTrue(sm.isSelected(2, col4));
+            assertTrue(sm.isSelected(2, col3));
+            assertTrue(sm.isSelected(2, col2));
+            assertTrue(sm.isSelected(2, col1));
+            assertTrue(sm.isSelected(2, col0));
+            assertTrue(sm.isSelected(1, col0));
+        }
     }
 
     // this is an extension of the previous test, where we had a bug where going up resulted in all cells between the
     // anchor (at (0,0)) and the first selected cell in column 0 were being selected. This wasn't visible in the previous
     // test as we only went down two rows, so when we went up everything looked as expected
@@ -2882,25 +3178,38 @@
         sm.setCellSelectionEnabled(true);
         sm.setSelectionMode(SelectionMode.MULTIPLE);
 
         sm.clearAndSelect(0, col0);
 
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 1
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 2
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 3
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 4
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 3
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 4
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 3
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 4
+        }
 
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 1
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 2
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 3
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 4
 
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 3
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 2
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 1
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 0
-
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 3
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 0
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 3
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 4
+        }
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT); // row 3
         assertEquals(0, getAnchor().getRow());
         assertEquals(0, getAnchor().getColumn());           // anchor does not move
         assertTrue(fm.isFocused(3, col0));
         assertTrue(sm.isSelected(0, col0));
@@ -2938,21 +3247,32 @@
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 1
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 2
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 3
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 4
 
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 3
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 2
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 1
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 0
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 3
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 0
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 3
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 0
+        }
 
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT);   // row 3
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT);   // row 2
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT);   // row 1
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT);   // row 0
 
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 1
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 1
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 1
+        }
         assertEquals(0, getAnchor().getRow());
         assertEquals(4, getAnchor().getColumn());           // anchor does not move
         assertTrue(fm.isFocused(0, col1));
         assertTrue(sm.isSelected(0, col4));
         assertTrue(sm.isSelected(1, col4));
@@ -2984,24 +3304,38 @@
         sm.setCellSelectionEnabled(true);
         sm.setSelectionMode(SelectionMode.MULTIPLE);
 
         sm.clearAndSelect(4, col4);
 
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 3
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 2
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 1
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 0
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 3
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 0
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 3
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 0
+        }
 
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT);   // row 3
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT);   // row 2
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT);   // row 1
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT);   // row 0
 
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 1
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 2
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 3
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 4
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 3
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 4
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 1
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 2
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 3
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 4
+        }
 
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 1
         assertEquals(4, getAnchor().getRow());
         assertEquals(4, getAnchor().getColumn());           // anchor does not move
         assertTrue(fm.isFocused(1, col4));
@@ -3040,21 +3374,32 @@
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT); // row 3
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT); // row 2
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT); // row 1
         keyboard.doKeyPress(KeyCode.UP, KeyModifier.SHIFT); // row 0
 
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);   // col 1
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);   // col 2
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);   // col 3
-        keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);   // col 4
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);   // col 1
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);   // col 2
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);   // col 3
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT);   // col 4
+        } if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT);   // col 1
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT);   // col 2
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT);   // col 3
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT);   // col 4
+        }
 
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 1
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 2
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 3
         keyboard.doKeyPress(KeyCode.DOWN, KeyModifier.SHIFT); // row 4
 
-        keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 3
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doKeyPress(KeyCode.LEFT, KeyModifier.SHIFT); // col 3
+        } if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doKeyPress(KeyCode.RIGHT, KeyModifier.SHIFT); // col 3
+        }
         assertEquals(4, getAnchor().getRow());
         assertEquals(0, getAnchor().getColumn());           // anchor does not move
         assertTrue(fm.isFocused(4, col3));
         assertTrue(sm.isSelected(4, col0));
         assertTrue(sm.isSelected(3, col0));
@@ -4016,35 +4361,63 @@
 
         sl.dispose();
     }
 
     @Test public void test_rt_18440_goLeft() {
-        test_rt_18440(KeyCode.LEFT, 3, false, colIndex -> {
-            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
-            return colIndex - 1;
-        });
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            test_rt_18440(KeyCode.LEFT, 3, false, colIndex -> {
+                keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+                return colIndex - 1;
+            });
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            test_rt_18440(KeyCode.LEFT, 0, false, colIndex -> {
+                keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+                return colIndex + 1;
+            });
+        }
     }
 
     @Test public void test_rt_18440_goLeft_toEnd() {
-        test_rt_18440(KeyCode.LEFT, 3, true, colIndex -> {
-            keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
-            return colIndex - 1;
-        });
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            test_rt_18440(KeyCode.LEFT, 3, true, colIndex -> {
+                keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+                return colIndex - 1;
+            });
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            test_rt_18440(KeyCode.LEFT, 0, true, colIndex -> {
+                keyboard.doLeftArrowPress(KeyModifier.getShortcutKey());
+                return colIndex + 1;
+            });
+        }
     }
 
     @Test public void test_rt_18440_goRight() {
-        test_rt_18440(KeyCode.RIGHT, 0, false, colIndex -> {
-            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
-            return colIndex + 1;
-        });
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            test_rt_18440(KeyCode.RIGHT, 0, false, colIndex -> {
+                keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+                return colIndex + 1;
+            });
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            test_rt_18440(KeyCode.RIGHT, 3, false, colIndex -> {
+                keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+                return colIndex - 1;
+            });
+        }
     }
 
     @Test public void test_rt_18440_goRight_toEnd() {
-        test_rt_18440(KeyCode.RIGHT, 0, true, colIndex -> {
-            keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
-            return colIndex + 1;
-        });
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            test_rt_18440(KeyCode.RIGHT, 0, true, colIndex -> {
+                keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+                return colIndex + 1;
+            });
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            test_rt_18440(KeyCode.RIGHT, 3, true, colIndex -> {
+                keyboard.doRightArrowPress(KeyModifier.getShortcutKey());
+                return colIndex - 1;
+            });
+        }
     }
 
     private void test_rt_18440(KeyCode direction, int startColumn, boolean goToEnd, Function<Integer, Integer> r) {
         ObservableList<String> itemsList = FXCollections.observableArrayList();
         for (int i = 0; i < 10; i++) {
@@ -4097,17 +4470,25 @@
             assertEquals(tableView.getColumns().get(startColumn), sm.getSelectedCells().get(0).getTableColumn());
             assertEquals(0, fm.getFocusedIndex());
             assertEquals(tableView.getColumns().get(expectedColumn), fm.getFocusedCell().getTableColumn());
         }
 
-        expectedColumn = direction == KeyCode.RIGHT ? 3 : 0;
-        keyboard.doKeyPress(direction, KeyModifier.SHIFT);
-        assertEquals(0, sm.getSelectedIndex());
-        assertEquals(debug(), 4, sm.getSelectedCells().size());
-        assertEquals(0, fm.getFocusedIndex());
-        assertEquals(tableView.getColumns().get(expectedColumn), fm.getFocusedCell().getTableColumn());
-
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            expectedColumn = direction == KeyCode.RIGHT ? 3 : 0;
+            keyboard.doKeyPress(direction, KeyModifier.SHIFT);
+            assertEquals(0, sm.getSelectedIndex());
+            assertEquals(debug(), 4, sm.getSelectedCells().size());
+            assertEquals(0, fm.getFocusedIndex());
+            assertEquals(tableView.getColumns().get(expectedColumn), fm.getFocusedCell().getTableColumn());
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            expectedColumn = direction == KeyCode.LEFT ? 3 : 0;
+            keyboard.doKeyPress(direction, KeyModifier.SHIFT);
+            assertEquals(0, sm.getSelectedIndex());
+            assertEquals(debug(), 4, sm.getSelectedCells().size());
+            assertEquals(0, fm.getFocusedIndex());
+            assertEquals(tableView.getColumns().get(expectedColumn), fm.getFocusedCell().getTableColumn());
+        }
         sl.dispose();
     }
 
     @Test public void test_rt_24865_moveDownwards() {
         tableView.getItems().clear();
@@ -4216,21 +4597,37 @@
         assertTrue(fm.isFocused(50 - newSelectedRowCount + 1));
         assertEquals(50, ((TablePosition)TableCellBehavior.getAnchor(tableView, null)).getRow());
     }
 
     @Test public void test_rt_39792_goLeft_goPastEnd() {
-        test_rt_39792(3, colIndex -> {
-            keyboard.doLeftArrowPress(KeyModifier.SHIFT);
-            return colIndex - 1;
-        });
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            test_rt_39792(3, colIndex -> {
+                keyboard.doLeftArrowPress(KeyModifier.SHIFT);
+                return colIndex - 1;
+            });
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            test_rt_39792(0, colIndex -> {
+                keyboard.doLeftArrowPress(KeyModifier.SHIFT);
+                return colIndex + 1;
+            });
+        }
     }
 
     @Test public void test_rt_39792_goRight_goPastEnd() {
-        test_rt_39792(0, colIndex -> {
-            keyboard.doRightArrowPress(KeyModifier.SHIFT);
-            return colIndex + 1;
-        });
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            test_rt_39792(0, colIndex -> {
+                keyboard.doRightArrowPress(KeyModifier.SHIFT);
+                return colIndex + 1;
+            });
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            test_rt_39792(3, colIndex -> {
+                keyboard.doRightArrowPress(KeyModifier.SHIFT);
+                return colIndex - 1;
+            });
+        }
     }
 
     private void test_rt_39792(int startColumn, Function<Integer, Integer> r) {
         ObservableList<String> itemsList = FXCollections.observableArrayList();
         for (int i = 0; i < 10; i++) {
@@ -4312,6 +4709,68 @@
         tableView.getFocusModel().focus(0);
         keyboard.doUpArrowPress();
 
         assertEquals(0, tableView.getSelectionModel().getSelectedIndex());
     }
+
+    @Test public void test_dynamic_NodeOrientation_change() {
+
+        sm.setCellSelectionEnabled(true);
+        sm.clearAndSelect(1, col2);
+
+        keyboard.doLeftArrowPress();
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertFalse(sm.isSelected(1, col0));
+            assertTrue(sm.isSelected(1, col1));
+            assertFalse(sm.isSelected(1, col2));
+            assertFalse(sm.isSelected(1, col3));
+            assertFalse(sm.isSelected(1, col4));
+
+            tableView.setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);
+            orientation = NodeOrientation.RIGHT_TO_LEFT;
+
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertFalse(sm.isSelected(1, col0));
+            assertFalse(sm.isSelected(1, col1));
+            assertFalse(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col3));
+            assertFalse(sm.isSelected(1, col4));
+
+            tableView.setNodeOrientation(NodeOrientation.LEFT_TO_RIGHT);
+            orientation = NodeOrientation.LEFT_TO_RIGHT;
+         }
+
+        keyboard.doRightArrowPress();
+
+        if (tableView.getNodeOrientation() == NodeOrientation.LEFT_TO_RIGHT) {
+            assertFalse(sm.isSelected(1, col0));
+            assertFalse(sm.isSelected(1, col1));
+            assertFalse(sm.isSelected(1, col2));
+            assertFalse(sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col4));
+
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT);
+
+            assertFalse(sm.isSelected(1, col0));
+            assertFalse(sm.isSelected(1, col1));
+            assertFalse(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col4));
+
+        } else if (tableView.getNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT) {
+            assertTrue(sm.isSelected(1, col0));
+            assertFalse(sm.isSelected(1, col1));
+            assertFalse(sm.isSelected(1, col2));
+            assertFalse(sm.isSelected(1, col3));
+            assertFalse(sm.isSelected(1, col4));
+
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT);
+
+            assertTrue(sm.isSelected(1, col0));
+            assertTrue(sm.isSelected(1, col1));
+            assertFalse(sm.isSelected(1, col2));
+            assertFalse(sm.isSelected(1, col3));
+            assertFalse(sm.isSelected(1, col4));
+        }
+    }
 }
