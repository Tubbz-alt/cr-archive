diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TableViewBehaviorBase.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TableViewBehaviorBase.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TableViewBehaviorBase.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TableViewBehaviorBase.java
@@ -133,12 +133,10 @@
 
 
         // create a map for TableView(Base)-specific mappings
         tableViewInputMap = createInputMap();
 
-        boolean rtl = isRTL();
-
         KeyMapping enterKeyActivateMapping, escapeKeyCancelEditMapping;
         addDefaultMapping(tableViewInputMap,
                 new KeyMapping(TAB, FocusTraversalInputMap::traverseNext),
                 new KeyMapping(new KeyBinding(TAB).shift(), FocusTraversalInputMap::traversePrevious),
 
@@ -146,25 +144,24 @@
                 new KeyMapping(END, e -> selectLastRow()),
 
                 new KeyMapping(PAGE_UP, e -> scrollUp()),
                 new KeyMapping(PAGE_DOWN, e -> scrollDown()),
 
-
-                new KeyMapping(LEFT, (rtl? e -> selectRightCell() : e -> selectLeftCell())),
-                new KeyMapping(KP_LEFT, (rtl? e -> selectRightCell() : e -> selectLeftCell())),
-                new KeyMapping(RIGHT, (rtl? e -> selectLeftCell() : e -> selectRightCell())),
-                new KeyMapping(KP_RIGHT, (rtl? e -> selectLeftCell() :e -> selectRightCell())),
+                new KeyMapping(LEFT, e -> { if(isRTL()) selectRightCell(); else selectLeftCell(); }),
+                new KeyMapping(KP_LEFT,e -> { if(isRTL()) selectRightCell(); else selectLeftCell(); }),
+                new KeyMapping(RIGHT, e -> { if(isRTL()) selectLeftCell(); else selectRightCell(); }),
+                new KeyMapping(KP_RIGHT, e -> { if(isRTL()) selectLeftCell(); else selectRightCell(); }),
 
                 new KeyMapping(UP, e -> selectPreviousRow()),
                 new KeyMapping(KP_UP, e -> selectPreviousRow()),
                 new KeyMapping(DOWN, e -> selectNextRow()),
                 new KeyMapping(KP_DOWN, e -> selectNextRow()),
 
-                new KeyMapping(LEFT, (rtl? FocusTraversalInputMap::traverseRight : FocusTraversalInputMap::traverseLeft)),
-                new KeyMapping(KP_LEFT, (rtl? FocusTraversalInputMap::traverseRight : FocusTraversalInputMap::traverseLeft)),
-                new KeyMapping(RIGHT, (rtl? FocusTraversalInputMap::traverseLeft : FocusTraversalInputMap::traverseRight)),
-                new KeyMapping(KP_RIGHT, (rtl? FocusTraversalInputMap::traverseLeft : FocusTraversalInputMap::traverseRight)),
+                new KeyMapping(LEFT,   e -> { if(isRTL()) focusTraverseRight(); else focusTraverseLeft(); }),
+                new KeyMapping(KP_LEFT, e -> { if(isRTL()) focusTraverseRight(); else focusTraverseLeft(); }),
+                new KeyMapping(RIGHT, e -> { if(isRTL()) focusTraverseLeft(); else focusTraverseRight(); }),
+                new KeyMapping(KP_RIGHT,e -> { if(isRTL()) focusTraverseLeft(); else focusTraverseRight(); }),
                 new KeyMapping(UP, FocusTraversalInputMap::traverseUp),
                 new KeyMapping(KP_UP, FocusTraversalInputMap::traverseUp),
                 new KeyMapping(DOWN, FocusTraversalInputMap::traverseDown),
                 new KeyMapping(KP_DOWN, FocusTraversalInputMap::traverseDown),
 
@@ -179,32 +176,32 @@
                 new KeyMapping(new KeyBinding(KP_DOWN).shift(), e -> alsoSelectNext()),
 
                 new KeyMapping(new KeyBinding(SPACE).shift(), e -> selectAllToFocus(false)),
                 new KeyMapping(new KeyBinding(SPACE).shortcut().shift(), e -> selectAllToFocus(true)),
 
-                new KeyMapping(new KeyBinding(LEFT).shift(), (rtl? e -> alsoSelectRightCell() : e -> alsoSelectLeftCell())),
-                new KeyMapping(new KeyBinding(KP_LEFT).shift(), (rtl? e -> alsoSelectRightCell() : e -> alsoSelectLeftCell())),
-                new KeyMapping(new KeyBinding(RIGHT).shift(), (rtl? e -> alsoSelectLeftCell() : e -> alsoSelectRightCell())),
-                new KeyMapping(new KeyBinding(KP_RIGHT).shift(), (rtl? e -> alsoSelectLeftCell() : e -> alsoSelectRightCell())),
+                new KeyMapping(new KeyBinding(LEFT).shift(), e -> { if(isRTL()) alsoSelectRightCell(); else alsoSelectLeftCell(); }),
+                new KeyMapping(new KeyBinding(KP_LEFT).shift(),  e -> { if(isRTL()) alsoSelectRightCell(); else alsoSelectLeftCell(); }),
+                new KeyMapping(new KeyBinding(RIGHT).shift(),  e -> { if(isRTL()) alsoSelectLeftCell(); else alsoSelectRightCell(); }),
+                new KeyMapping(new KeyBinding(KP_RIGHT).shift(), e -> { if(isRTL()) alsoSelectLeftCell(); else alsoSelectRightCell(); }),
 
                 new KeyMapping(new KeyBinding(UP).shortcut(), e -> focusPreviousRow()),
                 new KeyMapping(new KeyBinding(DOWN).shortcut(), e -> focusNextRow()),
-                new KeyMapping(new KeyBinding(RIGHT).shortcut(), (rtl? e -> focusLeftCell() : e -> focusRightCell())),
-                new KeyMapping(new KeyBinding(KP_RIGHT).shortcut(), (rtl? e -> focusLeftCell() : e -> focusRightCell())),
-                new KeyMapping(new KeyBinding(LEFT).shortcut(), (rtl? e -> focusRightCell() : e -> focusLeftCell())),
-                new KeyMapping(new KeyBinding(KP_LEFT).shortcut(), (rtl? e -> focusRightCell() : e -> focusLeftCell())),
+                new KeyMapping(new KeyBinding(RIGHT).shortcut(), e -> { if(isRTL()) focusLeftCell(); else focusRightCell(); }),
+                new KeyMapping(new KeyBinding(KP_RIGHT).shortcut(), e -> { if(isRTL()) focusLeftCell(); else focusRightCell(); }),
+                new KeyMapping(new KeyBinding(LEFT).shortcut(), e -> { if(isRTL()) focusRightCell(); else focusLeftCell(); }),
+                new KeyMapping(new KeyBinding(KP_LEFT).shortcut(), e -> { if(isRTL()) focusRightCell(); else focusLeftCell(); }),
 
                 new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll()),
                 new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow()),
                 new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow()),
                 new KeyMapping(new KeyBinding(PAGE_UP).shortcut(), e -> focusPageUp()),
                 new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut(), e -> focusPageDown()),
 
                 new KeyMapping(new KeyBinding(UP).shortcut().shift(), e -> discontinuousSelectPreviousRow()),
                 new KeyMapping(new KeyBinding(DOWN).shortcut().shift(), e -> discontinuousSelectNextRow()),
-                new KeyMapping(new KeyBinding(LEFT).shortcut().shift(), (rtl? e -> discontinuousSelectNextColumn() : e -> discontinuousSelectPreviousColumn())),
-                new KeyMapping(new KeyBinding(RIGHT).shortcut().shift(), (rtl? e -> discontinuousSelectPreviousColumn() : e -> discontinuousSelectNextColumn())),
+                new KeyMapping(new KeyBinding(LEFT).shortcut().shift(), e -> { if(isRTL()) discontinuousSelectNextColumn(); else discontinuousSelectPreviousColumn(); }),
+                new KeyMapping(new KeyBinding(RIGHT).shortcut().shift(), e -> { if(isRTL()) discontinuousSelectPreviousColumn(); else discontinuousSelectNextColumn(); }),
                 new KeyMapping(new KeyBinding(PAGE_UP).shortcut().shift(), e -> discontinuousSelectPageUp()),
                 new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut().shift(), e -> discontinuousSelectPageDown()),
                 new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow()),
                 new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow()),
 
@@ -1310,6 +1307,14 @@
             }
         }
 
         if (onMoveToLastCell != null) onMoveToLastCell.run();
     }
+
+    private EventHandler<KeyEvent> focusTraverseLeft() {
+        return FocusTraversalInputMap::traverseLeft;
+    }
+
+    private EventHandler<KeyEvent> focusTraverseRight() {
+        return FocusTraversalInputMap::traverseRight;
+    }
 }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewKeyInputTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewKeyInputTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewKeyInputTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewKeyInputTest.java
@@ -4709,6 +4709,68 @@
         tableView.getFocusModel().focus(0);
         keyboard.doUpArrowPress();
 
         assertEquals(0, tableView.getSelectionModel().getSelectedIndex());
     }
+
+    @Test public void test_dynamic_NodeOrientation_change() {
+
+        sm.setCellSelectionEnabled(true);
+        sm.clearAndSelect(1, col2);
+
+        keyboard.doLeftArrowPress();
+
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            assertFalse(sm.isSelected(1, col0));
+            assertTrue(sm.isSelected(1, col1));
+            assertFalse(sm.isSelected(1, col2));
+            assertFalse(sm.isSelected(1, col3));
+            assertFalse(sm.isSelected(1, col4));
+
+            tableView.setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);
+            orientation = NodeOrientation.RIGHT_TO_LEFT;
+
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            assertFalse(sm.isSelected(1, col0));
+            assertFalse(sm.isSelected(1, col1));
+            assertFalse(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col3));
+            assertFalse(sm.isSelected(1, col4));
+
+            tableView.setNodeOrientation(NodeOrientation.LEFT_TO_RIGHT);
+            orientation = NodeOrientation.LEFT_TO_RIGHT;
+         }
+
+        keyboard.doRightArrowPress();
+
+        if (tableView.getNodeOrientation() == NodeOrientation.LEFT_TO_RIGHT) {
+            assertFalse(sm.isSelected(1, col0));
+            assertFalse(sm.isSelected(1, col1));
+            assertFalse(sm.isSelected(1, col2));
+            assertFalse(sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col4));
+
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT);
+
+            assertFalse(sm.isSelected(1, col0));
+            assertFalse(sm.isSelected(1, col1));
+            assertFalse(sm.isSelected(1, col2));
+            assertTrue(sm.isSelected(1, col3));
+            assertTrue(sm.isSelected(1, col4));
+
+        } else if (tableView.getNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT) {
+            assertTrue(debug(), sm.isSelected(1, col0));
+            assertFalse(debug(), sm.isSelected(1, col1));
+            assertFalse(debug(), sm.isSelected(1, col2));
+            assertFalse(debug(), sm.isSelected(1, col3));
+            assertFalse(debug(), sm.isSelected(1, col4));
+
+            keyboard.doLeftArrowPress(KeyModifier.SHIFT);
+
+            assertTrue(debug(), sm.isSelected(1, col0));
+            assertTrue(debug(), sm.isSelected(1, col1));
+            assertFalse(debug(), sm.isSelected(1, col2));
+            assertFalse(debug(), sm.isSelected(1, col3));
+            assertFalse(debug(), sm.isSelected(1, col4));
+        }
+    }
 }
