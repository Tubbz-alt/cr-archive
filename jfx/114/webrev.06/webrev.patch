diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TableViewBehaviorBase.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TableViewBehaviorBase.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TableViewBehaviorBase.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TableViewBehaviorBase.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -144,24 +144,24 @@
                 new KeyMapping(END, e -> selectLastRow()),
 
                 new KeyMapping(PAGE_UP, e -> scrollUp()),
                 new KeyMapping(PAGE_DOWN, e -> scrollDown()),
 
-                new KeyMapping(LEFT, e -> selectLeftCell()),
-                new KeyMapping(KP_LEFT, e -> selectLeftCell()),
-                new KeyMapping(RIGHT, e -> selectRightCell()),
-                new KeyMapping(KP_RIGHT, e -> selectRightCell()),
+                new KeyMapping(LEFT, e -> { if(isRTL()) selectRightCell(); else selectLeftCell(); }),
+                new KeyMapping(KP_LEFT,e -> { if(isRTL()) selectRightCell(); else selectLeftCell(); }),
+                new KeyMapping(RIGHT, e -> { if(isRTL()) selectLeftCell(); else selectRightCell(); }),
+                new KeyMapping(KP_RIGHT, e -> { if(isRTL()) selectLeftCell(); else selectRightCell(); }),
 
                 new KeyMapping(UP, e -> selectPreviousRow()),
                 new KeyMapping(KP_UP, e -> selectPreviousRow()),
                 new KeyMapping(DOWN, e -> selectNextRow()),
                 new KeyMapping(KP_DOWN, e -> selectNextRow()),
 
-                new KeyMapping(LEFT, FocusTraversalInputMap::traverseLeft),
-                new KeyMapping(KP_LEFT, FocusTraversalInputMap::traverseLeft),
-                new KeyMapping(RIGHT, FocusTraversalInputMap::traverseRight),
-                new KeyMapping(KP_RIGHT, FocusTraversalInputMap::traverseRight),
+                new KeyMapping(LEFT,   e -> { if(isRTL()) focusTraverseRight(); else focusTraverseLeft(); }),
+                new KeyMapping(KP_LEFT, e -> { if(isRTL()) focusTraverseRight(); else focusTraverseLeft(); }),
+                new KeyMapping(RIGHT, e -> { if(isRTL()) focusTraverseLeft(); else focusTraverseRight(); }),
+                new KeyMapping(KP_RIGHT, e -> { if(isRTL()) focusTraverseLeft(); else focusTraverseRight(); }),
                 new KeyMapping(UP, FocusTraversalInputMap::traverseUp),
                 new KeyMapping(KP_UP, FocusTraversalInputMap::traverseUp),
                 new KeyMapping(DOWN, FocusTraversalInputMap::traverseDown),
                 new KeyMapping(KP_DOWN, FocusTraversalInputMap::traverseDown),
 
@@ -176,32 +176,32 @@
                 new KeyMapping(new KeyBinding(KP_DOWN).shift(), e -> alsoSelectNext()),
 
                 new KeyMapping(new KeyBinding(SPACE).shift(), e -> selectAllToFocus(false)),
                 new KeyMapping(new KeyBinding(SPACE).shortcut().shift(), e -> selectAllToFocus(true)),
 
-                new KeyMapping(new KeyBinding(LEFT).shift(), e -> alsoSelectLeftCell()),
-                new KeyMapping(new KeyBinding(KP_LEFT).shift(), e -> alsoSelectLeftCell()),
-                new KeyMapping(new KeyBinding(RIGHT).shift(), e -> alsoSelectRightCell()),
-                new KeyMapping(new KeyBinding(KP_RIGHT).shift(), e -> alsoSelectRightCell()),
+                new KeyMapping(new KeyBinding(LEFT).shift(), e -> { if(isRTL()) alsoSelectRightCell(); else alsoSelectLeftCell(); }),
+                new KeyMapping(new KeyBinding(KP_LEFT).shift(),  e -> { if(isRTL()) alsoSelectRightCell(); else alsoSelectLeftCell(); }),
+                new KeyMapping(new KeyBinding(RIGHT).shift(),  e -> { if(isRTL()) alsoSelectLeftCell(); else alsoSelectRightCell(); }),
+                new KeyMapping(new KeyBinding(KP_RIGHT).shift(), e -> { if(isRTL()) alsoSelectLeftCell(); else alsoSelectRightCell(); }),
 
                 new KeyMapping(new KeyBinding(UP).shortcut(), e -> focusPreviousRow()),
                 new KeyMapping(new KeyBinding(DOWN).shortcut(), e -> focusNextRow()),
-                new KeyMapping(new KeyBinding(RIGHT).shortcut(), e -> focusRightCell()),
-                new KeyMapping(new KeyBinding(KP_RIGHT).shortcut(), e -> focusRightCell()),
-                new KeyMapping(new KeyBinding(LEFT).shortcut(), e -> focusLeftCell()),
-                new KeyMapping(new KeyBinding(KP_LEFT).shortcut(), e -> focusLeftCell()),
+                new KeyMapping(new KeyBinding(RIGHT).shortcut(), e -> { if(isRTL()) focusLeftCell(); else focusRightCell(); }),
+                new KeyMapping(new KeyBinding(KP_RIGHT).shortcut(), e -> { if(isRTL()) focusLeftCell(); else focusRightCell(); }),
+                new KeyMapping(new KeyBinding(LEFT).shortcut(), e -> { if(isRTL()) focusRightCell(); else focusLeftCell(); }),
+                new KeyMapping(new KeyBinding(KP_LEFT).shortcut(), e -> { if(isRTL()) focusRightCell(); else focusLeftCell(); }),
 
                 new KeyMapping(new KeyBinding(A).shortcut(), e -> selectAll()),
                 new KeyMapping(new KeyBinding(HOME).shortcut(), e -> focusFirstRow()),
                 new KeyMapping(new KeyBinding(END).shortcut(), e -> focusLastRow()),
                 new KeyMapping(new KeyBinding(PAGE_UP).shortcut(), e -> focusPageUp()),
                 new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut(), e -> focusPageDown()),
 
                 new KeyMapping(new KeyBinding(UP).shortcut().shift(), e -> discontinuousSelectPreviousRow()),
                 new KeyMapping(new KeyBinding(DOWN).shortcut().shift(), e -> discontinuousSelectNextRow()),
-                new KeyMapping(new KeyBinding(LEFT).shortcut().shift(), e -> discontinuousSelectPreviousColumn()),
-                new KeyMapping(new KeyBinding(RIGHT).shortcut().shift(), e -> discontinuousSelectNextColumn()),
+                new KeyMapping(new KeyBinding(LEFT).shortcut().shift(), e -> { if(isRTL()) discontinuousSelectNextColumn(); else discontinuousSelectPreviousColumn(); }),
+                new KeyMapping(new KeyBinding(RIGHT).shortcut().shift(), e -> { if(isRTL()) discontinuousSelectPreviousColumn(); else discontinuousSelectNextColumn(); }),
                 new KeyMapping(new KeyBinding(PAGE_UP).shortcut().shift(), e -> discontinuousSelectPageUp()),
                 new KeyMapping(new KeyBinding(PAGE_DOWN).shortcut().shift(), e -> discontinuousSelectPageDown()),
                 new KeyMapping(new KeyBinding(HOME).shortcut().shift(), e -> discontinuousSelectAllToFirstRow()),
                 new KeyMapping(new KeyBinding(END).shortcut().shift(), e -> discontinuousSelectAllToLastRow()),
 
@@ -1307,6 +1307,14 @@
             }
         }
 
         if (onMoveToLastCell != null) onMoveToLastCell.run();
     }
+
+    private EventHandler<KeyEvent> focusTraverseLeft() {
+        return FocusTraversalInputMap::traverseLeft;
+    }
+
+    private EventHandler<KeyEvent> focusTraverseRight() {
+        return FocusTraversalInputMap::traverseRight;
+    }
 }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewHorizontalArrowsTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewHorizontalArrowsTest.java
--- /dev/null
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/TableViewHorizontalArrowsTest.java
@@ -0,0 +1,409 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.javafx.scene.control;
+
+import java.util.Arrays;
+import java.util.Collection;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import static org.junit.Assert.*;
+import static test.com.sun.javafx.scene.control.infrastructure.KeyModifier.*;
+
+import com.sun.javafx.util.Utils;
+import javafx.geometry.NodeOrientation;
+import javafx.scene.input.KeyCode;
+import javafx.scene.control.SelectionMode;
+import javafx.scene.control.TableColumn;
+import javafx.scene.control.TablePosition;
+import javafx.scene.control.TableView;
+import test.com.sun.javafx.scene.control.behavior.TableViewAnchorRetriever;
+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;
+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;
+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;
+
+
+/**
+ * Test basic horizontal navigation mappings for TableView.
+ * It is parameterized on NodeOrientation
+ */
+@RunWith(Parameterized.class)
+public class TableViewHorizontalArrowsTest {
+    @Parameterized.Parameters
+    public static Collection<?> implementations() {
+        return Arrays.asList(new Object[][] {
+            {NodeOrientation.LEFT_TO_RIGHT},
+            {NodeOrientation.RIGHT_TO_LEFT}
+        });
+    }
+
+    private TableView<String> tableView;
+    private TableView.TableViewSelectionModel<String> sm;
+    private TableView.TableViewFocusModel<String> fm;
+
+    private TableColumn<String, String> col0;
+    private TableColumn<String, String> col1;
+    private TableColumn<String, String> col2;
+    private TableColumn<String, String> col3;
+    private TableColumn<String, String> col4;
+
+    private KeyEventFirer keyboard;
+    private StageLoader stageLoader;
+    private NodeOrientation orientation;
+
+    public TableViewHorizontalArrowsTest(NodeOrientation val) {
+        orientation = val;
+    }
+
+    @Before
+    public void setup() {
+        tableView = new TableView<String>();
+        tableView.setNodeOrientation(orientation);
+        sm = tableView.getSelectionModel();
+        fm = tableView.getFocusModel();
+
+        sm.setSelectionMode(SelectionMode.MULTIPLE);
+        sm.setCellSelectionEnabled(true);
+
+        tableView.getItems().setAll("1", "2", "3", "4", "5", "6", "7", "8", "9", "10");
+
+        col0 = new TableColumn<String, String>("col0");
+        col1 = new TableColumn<String, String>("col1");
+        col2 = new TableColumn<String, String>("col2");
+        col3 = new TableColumn<String, String>("col3");
+        col4 = new TableColumn<String, String>("col4");
+        tableView.getColumns().setAll(col0, col1, col2, col3, col4);
+
+        keyboard = new KeyEventFirer(tableView);
+
+        stageLoader = new StageLoader(tableView);
+        stageLoader.getStage().show();
+    }
+
+    @After
+    public void tearDown() {
+        tableView.getSkin().dispose();
+        stageLoader.dispose();
+    }
+
+    // ---------------- Helper methods -------------------------
+    /**
+     * Toggles the nodeOrientation of tableView.
+     */
+    private void changeNodeOrientation() {
+        orientation = (orientation == NodeOrientation.LEFT_TO_RIGHT?
+            NodeOrientation.RIGHT_TO_LEFT : NodeOrientation.LEFT_TO_RIGHT);
+        tableView.setNodeOrientation(orientation);
+    }
+
+    /**
+     * Orientation-aware forward horizontal navigation with arrow keys.
+     * @param modifiers the modifiers to use on keyboard
+     */
+    private void forward(KeyModifier... modifiers) {
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doRightArrowPress(modifiers);
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doLeftArrowPress(modifiers);
+        }
+    }
+
+    /**
+     * Orientation-aware backward horizontal navigation with arrow keys.
+     * @param modifiers the modifiers to use on keyboard
+     */
+    private void backward(KeyModifier... modifiers) {
+        if (orientation == NodeOrientation.LEFT_TO_RIGHT) {
+            keyboard.doLeftArrowPress(modifiers);
+        } else if (orientation == NodeOrientation.RIGHT_TO_LEFT) {
+            keyboard.doRightArrowPress(modifiers);
+        }
+    }
+
+    private TablePosition getAnchor() {
+        return TableViewAnchorRetriever.getAnchor(tableView);
+    }
+
+    private boolean isAnchor(int row) {
+        TablePosition tp = new TablePosition(tableView, row, null);
+        return getAnchor() != null && getAnchor().equals(tp);
+    }
+
+    private boolean isAnchor(int row, int col) {
+        TablePosition tp = new TablePosition(tableView, row, tableView.getColumns().get(col));
+        return getAnchor() != null && getAnchor().equals(tp);
+    }
+
+
+    // ----------------------- Tests ----------------------------
+
+    @Test
+    public void testForwardSelect() {
+        sm.select(0, col0);
+        forward();
+        assertTrue("next cell must be selected", sm.isSelected(0, col1));
+        assertFalse("old cell not be selected", sm.isSelected(0, col0));
+    }
+
+    @Test
+    public void testBackwardSelect() {
+        sm.select(0, col4);
+        backward();
+        assertTrue("next cell must be selected", sm.isSelected(0, col3));
+        assertFalse("old cell not be selected", sm.isSelected(0, col4));
+    }
+
+    @Test
+    public void testForwardFocus() {
+        sm.select(0, col0);
+        forward(getShortcutKey());
+        assertTrue("selected cell must still be selected", sm.isSelected(0, col0));
+        assertFalse("next cell must not be selected", sm.isSelected(0, col1));
+        TablePosition<?, ?> focusedCell = fm.getFocusedCell();
+        assertEquals("focused cell must moved to next", col1, focusedCell.getTableColumn());
+    }
+
+    @Test
+    public void testBackwardFocus() {
+        sm.select(0, col4);
+        backward(getShortcutKey());
+        assertTrue("selected cell must still be selected", sm.isSelected(0, col4));
+        assertFalse("previous cell must not be selected", sm.isSelected(0, col3));
+        TablePosition<?, ?> focusedCell = fm.getFocusedCell();
+        assertEquals("focused cell must moved to prev", col3, focusedCell.getTableColumn());
+    }
+
+
+    // Note : Any test that changs NodeOrientation must restore it back at the end of it
+    @Test
+    public void testChangeOrientationSimpleForwardSelect() {
+        sm.select(0, col0);
+        forward();
+        assertTrue(sm.isSelected(0, col1));
+        assertFalse(sm.isSelected(0, col0));
+
+        changeNodeOrientation();
+
+        // Now, test that the forward select respects change in NodeOrientation
+        forward();
+
+        assertFalse(sm.isSelected(0, col1));
+        assertTrue(sm.isSelected(0, col2));
+
+        // Restore Node orientation
+        changeNodeOrientation();
+    }
+
+    // Note : Any test that changs NodeOrientation must restore it back at the end of it
+    @Test
+    public void testChangeOrientationSimpleBackwardSelect() {
+        sm.select(0, col4);
+        backward();
+        assertTrue(sm.isSelected(0, col3));
+        assertFalse(sm.isSelected(0, col4));
+
+        changeNodeOrientation();
+
+        // Now, test that the backward select respects change in NodeOrientation
+        backward();
+        assertFalse(sm.isSelected(0, col3));
+        assertTrue(sm.isSelected(0, col2));
+
+        // Restore Node orientation
+        changeNodeOrientation();
+    }
+
+    @Test public void testShiftBackwardWhenAtFirstCol() {
+        sm.select(0, col0);
+        backward(KeyModifier.SHIFT);
+
+        assertTrue("Selected cell remains selected", sm.isSelected(0, col0));
+
+        // We are at the first colum, there is no backward cell
+        assertFalse("sanity - forward cell must not be selected", sm.isSelected(0, col1));
+    }
+
+    @Test public void testShiftForwardWhenAtFirstCol() {
+        sm.select(0, col0);
+        forward(KeyModifier.SHIFT);
+
+        assertTrue("Selected cell remains selected", sm.isSelected(0, col0));
+        assertTrue("forward cell must also be selected", sm.isSelected(0, col1));
+    }
+
+    @Test public void testShiftBackwardWhenAtLastCol() {
+        sm.select(0, col4);
+        backward(KeyModifier.SHIFT);
+        assertTrue("Selected cell remains selected", sm.isSelected(0, col4));
+        assertTrue("backward cell must also be selected", sm.isSelected(0, col3));
+    }
+
+    @Test public void testShiftForwardWhenAtLastCol() {
+        sm.select(0, col4);
+        forward(KeyModifier.SHIFT);
+        assertTrue("Selected cell remains selected", sm.isSelected(0, col4));
+
+        // We are at the last colum, there is no forward cell
+        assertFalse("sanity - backward cell must not be selected", sm.isSelected(0, col3));
+    }
+
+    @Test public void testCtrlBackwardDoesNotMoveRowFocus() {
+        // Select first row
+        sm.clearAndSelect(0);
+        assertTrue(fm.isFocused(0));
+
+        backward(KeyModifier.getShortcutKey());
+
+        assertTrue("Focus should not change", fm.isFocused(0));
+        assertTrue("Selection should not change", sm.isSelected(0));
+    }
+
+    @Test public void testCtrlForwardDoesNotMoveRowFocus() {
+        // Select first row
+        sm.clearAndSelect(0);
+        assertTrue(fm.isFocused(0));
+
+        forward(KeyModifier.getShortcutKey());
+
+        assertTrue("Focus should not change", fm.isFocused(0));
+        assertTrue("Selection should not change", sm.isSelected(0));
+    }
+
+    // Tests for discontinuous multiple cell selection (RT-18951)
+    @Test public void test_rt18591_select_forward_then_backward() {
+        sm.select(0, col0);
+
+        forward(KeyModifier.getShortcutKey());
+        forward(KeyModifier.getShortcutKey());
+        keyboard.doKeyPress(KeyCode.SPACE,
+                KeyModifier.getShortcutKey(),
+                (Utils.isMac()? KeyModifier.CTRL : null));
+        assertTrue(sm.isSelected(0, col0));
+        assertFalse(sm.isSelected(0, col1));
+        assertTrue(sm.isSelected(0, col2));
+        assertTrue(isAnchor(0, 2));
+
+        forward(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        forward(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+
+        assertTrue(sm.isSelected(0, col0));
+        assertFalse(sm.isSelected(0, col1));
+        assertTrue(sm.isSelected(0, col2));
+        assertTrue(sm.isSelected(0, col3));
+        assertTrue(sm.isSelected(0, col4));
+        assertTrue(isAnchor(0,2));
+
+
+        backward(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        backward(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        backward(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+
+        assertTrue(sm.isSelected(0, col0));
+        assertTrue(sm.isSelected(0, col1));
+        assertTrue(sm.isSelected(0, col2));
+        assertTrue(sm.isSelected(0, col3));
+        assertTrue(sm.isSelected(0, col4));
+    }
+
+    @Test public void test_rt18591_select_backward_then_forward() {
+        sm.select(0, col4);
+
+        backward(KeyModifier.getShortcutKey());
+        backward(KeyModifier.getShortcutKey());
+        keyboard.doKeyPress(KeyCode.SPACE,
+                KeyModifier.getShortcutKey(),
+                (Utils.isMac()? KeyModifier.CTRL : null));
+
+        assertTrue(sm.isSelected(0, col4));
+        assertFalse(sm.isSelected(0, col3));
+        assertTrue(sm.isSelected(0, col2));
+        assertTrue(isAnchor(0, 2));
+
+        backward(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        backward(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+
+        assertTrue(sm.isSelected(0, col4));
+        assertFalse(sm.isSelected(0, col3));
+        assertTrue(sm.isSelected(0, col2));
+        assertTrue(sm.isSelected(0, col1));
+        assertTrue(sm.isSelected(0, col0));
+        assertTrue(isAnchor(0,2));
+
+        forward(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        forward(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+        forward(KeyModifier.SHIFT, KeyModifier.getShortcutKey());
+
+        assertTrue(sm.isSelected(0, col4));
+        assertTrue(sm.isSelected(0, col3));
+        assertTrue(sm.isSelected(0, col2));
+        assertTrue(sm.isSelected(0, col1));
+        assertTrue(sm.isSelected(0, col0));
+    }
+
+    @Test public void test_rt18536_forward_focus_and_selectAll() {
+        // Test shift selection when focus is elsewhere (so as to select a range)
+        sm.clearAndSelect(1, col0);
+
+        // move focus by holding down ctrl button
+        forward(KeyModifier.getShortcutKey());   // move focus to (1, col1)
+        forward(KeyModifier.getShortcutKey());   // move focus to (1, col2)
+        forward(KeyModifier.getShortcutKey());   // move focus to (1, col3)
+        forward(KeyModifier.getShortcutKey());   // move focus to (1, col4)
+        assertTrue(fm.isFocused(1, col4));
+
+        // press shift + space to select all cells between (1, col0) and (1, col4)
+        keyboard.doKeyPress(KeyCode.SPACE, KeyModifier.SHIFT);
+        assertTrue(sm.isSelected(1, col0));
+        assertTrue(sm.isSelected(1, col1));
+        assertTrue(sm.isSelected(1, col2));
+        assertTrue(sm.isSelected(1, col3));
+        assertTrue(sm.isSelected(1, col4));
+    }
+
+    @Test public void test_rt18536_backward_focus_and_selectAll() {
+        // Test shift selection when focus is elsewhere (so as to select a range)
+        sm.clearAndSelect(1, col4);
+
+        // move focus by holding down ctrl button
+        backward(KeyModifier.getShortcutKey());   // move focus to (1, col3)
+        backward(KeyModifier.getShortcutKey());   // move focus to (1, col2)
+        backward(KeyModifier.getShortcutKey());   // move focus to (1, col1)
+        backward(KeyModifier.getShortcutKey());   // move focus to (1, col0)
+        assertTrue(fm.isFocused(1, col0));
+
+        // press shift + space to select all cells between (1, col0) and (1, col4)
+        keyboard.doKeyPress(KeyCode.SPACE, KeyModifier.SHIFT);
+        assertTrue(sm.isSelected(1, col0));
+        assertTrue(sm.isSelected(1, col1));
+        assertTrue(sm.isSelected(1, col2));
+        assertTrue(sm.isSelected(1, col3));
+        assertTrue(sm.isSelected(1, col4));
+    }
+}
