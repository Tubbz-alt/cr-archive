diff a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/Pixels.java b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/Pixels.java
--- a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/Pixels.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/Pixels.java
@@ -165,12 +165,15 @@
     public final int getBytesPerComponent() {
         Application.checkEventThread();
         return this.bytesPerComponent;
     }
 
-    /*
-     * Return the original pixels buffer.
+    /**
+     * Rewinds and returns the buffer used to create this {@code Pixels} object.
+     *
+     * @return the original pixels buffer with its position set to zero and its
+     * mark discarded
      */
     public final Buffer getPixels() {
         if (this.bytes != null) {
             this.bytes.rewind();
             return this.bytes;
@@ -180,10 +183,20 @@
         } else {
             throw new RuntimeException("Unexpected Pixels state.");
         }
     }
 
+    /**
+     * Returns the buffer used to create this {@code Pixels} object.
+     *
+     * @return the original pixels buffer, unmodified
+     */
+    public final Buffer getBuffer() {
+        assert this.bytes != null || this.ints != null;
+        return this.bytes != null ? this.bytes : this.ints;
+    }
+
     /*
      * Return a copy of pixels as bytes.
      */
     public final ByteBuffer asByteBuffer() {
         Application.checkEventThread();
diff a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/EPDFrameBuffer.java b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/EPDFrameBuffer.java
--- a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/EPDFrameBuffer.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/EPDFrameBuffer.java
@@ -580,13 +580,15 @@
      *
      * @return a 32-bit pixel buffer matching the resolution of the frame buffer
      */
     ByteBuffer getOffscreenBuffer() {
         /*
-         * Allocates a direct byte buffer to avoid bug JDK-8201567,
-         * "QuantumRenderer modifies buffer in use by JavaFX Application Thread"
-         * <https://bugs.openjdk.java.net/browse/JDK-8201567>.
+         * In this case, a direct byte buffer outside of the normal heap is
+         * faster than a non-direct byte buffer on the heap. The frame rate is
+         * roughly 10 to 40 percent faster for a framebuffer with 8 bits per
+         * pixel and 40 to 60 percent faster for a framebuffer with 16 bits per
+         * pixel, depending on the device processor and screen size.
          */
         int size = xresVirtual * yres * Integer.BYTES;
         return ByteBuffer.allocateDirect(size);
     }
 
diff a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/EPDScreen.java b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/EPDScreen.java
--- a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/EPDScreen.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/EPDScreen.java
@@ -229,11 +229,18 @@
         isShutdown = true;
     }
 
     @Override
     public synchronized void uploadPixels(Buffer b, int x, int y, int width, int height, float alpha) {
+        assert b.mark() == b;
         pixels.composePixels(b, x, y, width, height, alpha);
+        /*
+         * When enabled, throws an InvalidMarkException if the buffer is
+         * modified by a clear, flip, or rewind operation on another thread
+         * while in use by this method on the JavaFX Application Thread.
+         */
+        assert b.reset() == b;
     }
 
     @Override
     public synchronized void swapBuffers() {
         if (!isShutdown && pixels.hasReceivedData()) {
diff a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/HeadlessScreen.java b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/HeadlessScreen.java
--- a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/HeadlessScreen.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/HeadlessScreen.java
@@ -113,11 +113,18 @@
 
     @Override
     public void uploadPixels(Buffer b,
                              int x, int y, int width, int height,
                              float alpha) {
+        assert b.mark() == b;
         fb.composePixels(b, x, y, width, height, alpha);
+        /*
+         * When enabled, throws an InvalidMarkException if the buffer is
+         * modified by a clear, flip, or rewind operation on another thread
+         * while in use by this method on the JavaFX Application Thread.
+         */
+        assert b.reset() == b;
     }
 
     @Override
     public void swapBuffers() {
         fb.reset();
diff a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/QueuedPixelSource.java b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/QueuedPixelSource.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/QueuedPixelSource.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/QueuedPixelSource.java
@@ -98,11 +98,11 @@
     }
 
     private boolean usesSameBuffer(Pixels p1, Pixels p2) {
         if (p1 == p2) return true;
         if (p1 == null || p2 == null) return false;
-        return (p1.getPixels() == p2.getPixels());
+        return (p1.getBuffer() == p2.getBuffer());
     }
 
     /**
      * Return an unused Pixels with the indicated dimensions and scale.
      * The returned object may either be saved from a previous use, but
