diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuButtonSkinBase.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuButtonSkinBase.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuButtonSkinBase.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuButtonSkinBase.java
@@ -29,10 +29,11 @@
 import com.sun.javafx.scene.control.ContextMenuContent;
 import com.sun.javafx.scene.control.ControlAcceleratorSupport;
 import com.sun.javafx.scene.control.LabeledImpl;
 import com.sun.javafx.scene.control.skin.Utils;
 import javafx.application.Platform;
+import javafx.beans.value.ChangeListener;
 import javafx.collections.ListChangeListener;
 import javafx.event.ActionEvent;
 import javafx.scene.Node;
 import javafx.scene.Scene;
 import javafx.scene.control.ContextMenu;
@@ -71,11 +72,11 @@
     /**
      * If true, the control should behave like a button for mouse button events.
      */
     boolean behaveLikeButton = false;
     private ListChangeListener<MenuItem> itemsChangedListener;
-
+    private final ChangeListener<? super Scene> sceneChangeListener;
 
 
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
@@ -144,19 +145,22 @@
         control.getItems().addListener(itemsChangedListener);
 
         if (getSkinnable().getScene() != null) {
             ControlAcceleratorSupport.addAcceleratorsIntoScene(getSkinnable().getItems(), getSkinnable());
         }
-        control.sceneProperty().addListener((scene, oldValue, newValue) -> {
+
+        sceneChangeListener = (scene, oldValue, newValue) -> {
             if (oldValue != null) {
                 ControlAcceleratorSupport.removeAcceleratorsFromScene(getSkinnable().getItems(), oldValue);
             }
 
+             // FIXME: null skinnable should not happen
             if (getSkinnable() != null && getSkinnable().getScene() != null) {
                 ControlAcceleratorSupport.addAcceleratorsIntoScene(getSkinnable().getItems(), getSkinnable());
             }
-        });
+        };
+        control.sceneProperty().addListener(sceneChangeListener);
 
         // Register listeners
         registerChangeListener(control.showingProperty(), e -> {
             if (getSkinnable().isShowing()) {
                 show();
@@ -212,10 +216,20 @@
      *                                                                         *
      **************************************************************************/
 
     /** {@inheritDoc} */
     @Override public void dispose() {
+        // FIXME : JDK-8244112 - backout if we are already disposed
+        // should check for getSkinnable to be null and return
+
+        // Cleanup accelerators
+        if (getSkinnable().getScene() != null) {
+            ControlAcceleratorSupport.removeAcceleratorsFromScene(getSkinnable().getItems(), getSkinnable().getScene());
+        }
+
+        // Remove listeners
+        getSkinnable().sceneProperty().removeListener(sceneChangeListener);
         getSkinnable().getItems().removeListener(itemsChangedListener);
         super.dispose();
         if (popup != null ) {
             if (popup.getSkin() != null && popup.getSkin().getNode() != null) {
                 ContextMenuContent cmContent = (ContextMenuContent)popup.getSkin().getNode();
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -38,10 +38,11 @@
 import javafx.scene.input.MouseEvent;
 import javafx.scene.layout.AnchorPane;
 import javafx.scene.layout.VBox;
 import javafx.stage.Stage;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
 import test.com.sun.javafx.pgstub.StubToolkit;
 import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;
@@ -68,15 +69,38 @@
     private Toolkit tk;
     private Scene scene;
     private Stage stage;
 
     @Before public void setup() {
+        setUncaughtExceptionHandler();
+
         tk = (StubToolkit)Toolkit.getToolkit();
         menuBar = new MenuBar();
         menuBar.setUseSystemMenuBar(false);
     }
 
+    @After public void cleanup() {
+        if (stage != null) {
+            stage.hide();
+        }
+        removeUncaughtExceptionHandler();
+    }
+
+    private void setUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+    }
+
+    private void removeUncaughtExceptionHandler() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
+    }
+
     protected void startApp(Parent root) {
         scene = new Scene(root,800,600);
         stage = new Stage();
         stage.setX(0); // The MouseEventGenerator set the screen X/Y to be the same as local Node X/Y, so we need to keep stage at 0,0
         stage.setY(0);
@@ -450,11 +474,10 @@
         tk.firePulse();
         assertTrue(menu1.isShowing());
     }
 
     @Test public void testKeyNavigationWithAllDisabledMenuItems() {
-
         // Test key navigation with a single disabled menu in menubar
         VBox root = new VBox();
         Menu menu1 = new Menu("Menu1");
         MenuItem menuItem1 = new MenuItem("MenuItem1");
 
