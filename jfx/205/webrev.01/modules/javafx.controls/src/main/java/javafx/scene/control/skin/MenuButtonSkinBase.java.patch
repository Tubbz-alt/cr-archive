diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuButtonSkinBase.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuButtonSkinBase.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuButtonSkinBase.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/MenuButtonSkinBase.java
@@ -29,10 +29,11 @@
 import com.sun.javafx.scene.control.ContextMenuContent;
 import com.sun.javafx.scene.control.ControlAcceleratorSupport;
 import com.sun.javafx.scene.control.LabeledImpl;
 import com.sun.javafx.scene.control.skin.Utils;
 import javafx.application.Platform;
+import javafx.beans.value.ChangeListener;
 import javafx.collections.ListChangeListener;
 import javafx.event.ActionEvent;
 import javafx.scene.Node;
 import javafx.scene.Scene;
 import javafx.scene.control.ContextMenu;
@@ -71,11 +72,11 @@
     /**
      * If true, the control should behave like a button for mouse button events.
      */
     boolean behaveLikeButton = false;
     private ListChangeListener<MenuItem> itemsChangedListener;
-
+    private final ChangeListener<? super Scene> sceneChangeListener;
 
 
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
@@ -144,19 +145,22 @@
         control.getItems().addListener(itemsChangedListener);
 
         if (getSkinnable().getScene() != null) {
             ControlAcceleratorSupport.addAcceleratorsIntoScene(getSkinnable().getItems(), getSkinnable());
         }
-        control.sceneProperty().addListener((scene, oldValue, newValue) -> {
+
+        sceneChangeListener = (scene, oldValue, newValue) -> {
             if (oldValue != null) {
                 ControlAcceleratorSupport.removeAcceleratorsFromScene(getSkinnable().getItems(), oldValue);
             }
 
+             // FIXME: null skinnable should not happen
             if (getSkinnable() != null && getSkinnable().getScene() != null) {
                 ControlAcceleratorSupport.addAcceleratorsIntoScene(getSkinnable().getItems(), getSkinnable());
             }
-        });
+        };
+        control.sceneProperty().addListener(sceneChangeListener);
 
         // Register listeners
         registerChangeListener(control.showingProperty(), e -> {
             if (getSkinnable().isShowing()) {
                 show();
@@ -212,10 +216,20 @@
      *                                                                         *
      **************************************************************************/
 
     /** {@inheritDoc} */
     @Override public void dispose() {
+        // FIXME : JDK-8244112 - backout if we are already disposed
+        // should check for getSkinnable to be null and return
+
+        // Cleanup accelerators
+        if (getSkinnable().getScene() != null) {
+            ControlAcceleratorSupport.removeAcceleratorsFromScene(getSkinnable().getItems(), getSkinnable().getScene());
+        }
+
+        // Remove listeners
+        getSkinnable().sceneProperty().removeListener(sceneChangeListener);
         getSkinnable().getItems().removeListener(itemsChangedListener);
         super.dispose();
         if (popup != null ) {
             if (popup.getSkin() != null && popup.getSkin().getNode() != null) {
                 ContextMenuContent cmContent = (ContextMenuContent)popup.getSkin().getNode();
