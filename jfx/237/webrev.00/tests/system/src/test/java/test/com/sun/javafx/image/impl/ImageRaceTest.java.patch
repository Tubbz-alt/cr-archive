diff a/tests/system/src/test/java/test/com/sun/javafx/image/impl/ImageRaceTest.java b/tests/system/src/test/java/test/com/sun/javafx/image/impl/ImageRaceTest.java
--- a/tests/system/src/test/java/test/com/sun/javafx/image/impl/ImageRaceTest.java
+++ b/tests/system/src/test/java/test/com/sun/javafx/image/impl/ImageRaceTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -36,17 +36,14 @@
 import com.sun.javafx.image.impl.ByteRgba;
 import com.sun.javafx.image.impl.IntArgb;
 import com.sun.javafx.image.impl.IntArgbPre;
 import java.util.ArrayList;
 import java.util.List;
-import javafx.application.Application;
-import javafx.application.Platform;
-import javafx.stage.Stage;
 import org.junit.Test;
 import static test.util.Util.TIMEOUT;
 
-public class ImageRaceTest extends Application {
+public class ImageRaceTest {
     static boolean verbose;
     static List<Initializer> initalizers = new ArrayList<>();
     static volatile boolean ready = false;
 
     static interface InitProc {
@@ -72,17 +69,10 @@
             init.get();
             if (verbose) System.err.println(getName()+" done");
         }
     }
 
-    @Override
-    public void start(Stage stage) {
-        forkAndJoinInitializers();
-
-        Platform.exit();
-    }
-
     void forkAndJoinInitializers() {
         long limit = System.currentTimeMillis() + TIMEOUT;
         for (Initializer i : initalizers) {
             i.start();
             while (!i.isRunning() && System.currentTimeMillis() < limit) {
@@ -111,15 +101,10 @@
                 }
             }
         } catch (InterruptedException ex) {}
     }
 
-    public static void main(String[] args) {
-        init(args);
-        Application.launch(args);
-    }
-
     static void init(String[] args) {
         boolean getters, setters, converters;
         if (args.length == 0) {
             getters = setters = converters = true;
         } else {
