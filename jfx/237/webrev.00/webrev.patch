diff a/tests/system/src/test/java/test/com/sun/javafx/image/impl/ImageRaceTest.java b/tests/system/src/test/java/test/com/sun/javafx/image/impl/ImageRaceTest.java
--- a/tests/system/src/test/java/test/com/sun/javafx/image/impl/ImageRaceTest.java
+++ b/tests/system/src/test/java/test/com/sun/javafx/image/impl/ImageRaceTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -36,17 +36,14 @@
 import com.sun.javafx.image.impl.ByteRgba;
 import com.sun.javafx.image.impl.IntArgb;
 import com.sun.javafx.image.impl.IntArgbPre;
 import java.util.ArrayList;
 import java.util.List;
-import javafx.application.Application;
-import javafx.application.Platform;
-import javafx.stage.Stage;
 import org.junit.Test;
 import static test.util.Util.TIMEOUT;
 
-public class ImageRaceTest extends Application {
+public class ImageRaceTest {
     static boolean verbose;
     static List<Initializer> initalizers = new ArrayList<>();
     static volatile boolean ready = false;
 
     static interface InitProc {
@@ -72,17 +69,10 @@
             init.get();
             if (verbose) System.err.println(getName()+" done");
         }
     }
 
-    @Override
-    public void start(Stage stage) {
-        forkAndJoinInitializers();
-
-        Platform.exit();
-    }
-
     void forkAndJoinInitializers() {
         long limit = System.currentTimeMillis() + TIMEOUT;
         for (Initializer i : initalizers) {
             i.start();
             while (!i.isRunning() && System.currentTimeMillis() < limit) {
@@ -111,15 +101,10 @@
                 }
             }
         } catch (InterruptedException ex) {}
     }
 
-    public static void main(String[] args) {
-        init(args);
-        Application.launch(args);
-    }
-
     static void init(String[] args) {
         boolean getters, setters, converters;
         if (args.length == 0) {
             getters = setters = converters = true;
         } else {
diff a/tests/system/src/test/java/test/javafx/scene/control/AccordionTitlePaneLeakTest.java b/tests/system/src/test/java/test/javafx/scene/control/AccordionTitlePaneLeakTest.java
--- a/tests/system/src/test/java/test/javafx/scene/control/AccordionTitlePaneLeakTest.java
+++ b/tests/system/src/test/java/test/javafx/scene/control/AccordionTitlePaneLeakTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -30,11 +30,10 @@
 import javafx.scene.Scene;
 import javafx.scene.control.Accordion;
 import javafx.scene.control.TitledPane;
 import javafx.scene.layout.StackPane;
 import javafx.stage.Stage;
-import javafx.stage.WindowEvent;
 
 import test.util.Util;
 
 import java.lang.ref.WeakReference;
 import java.util.concurrent.CountDownLatch;
@@ -43,41 +42,44 @@
 import junit.framework.Assert;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-public class AccordionTitlePaneLeakTest extends Application {
+public class AccordionTitlePaneLeakTest {
 
     static private CountDownLatch startupLatch;
     static private Accordion accordion;
     static private StackPane root;
     static private Stage stage;
 
-    @Override
-    public void start(Stage primaryStage) throws Exception {
-        stage = primaryStage;
-        accordion = new Accordion();
-        root = new StackPane(accordion);
-        stage.setScene(new Scene(root));
-        stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {
-            Platform.runLater(() -> startupLatch.countDown());
-        });
-        stage.show();
+    public static class TestApp extends Application {
+        @Override
+        public void start(Stage primaryStage) throws Exception {
+            stage = primaryStage;
+            accordion = new Accordion();
+            root = new StackPane(accordion);
+            stage.setScene(new Scene(root));
+            stage.setOnShown(l -> {
+                Platform.runLater(() -> startupLatch.countDown());
+            });
+            stage.show();
+        }
     }
 
     @BeforeClass
-    public static void initFX() {
+    public static void initFX() throws Exception {
         startupLatch = new CountDownLatch(1);
-        new Thread(() -> Application.launch(AccordionTitlePaneLeakTest.class, (String[]) null)).start();
+        new Thread(() -> Application.launch(TestApp.class, (String[])null)).start();
+        Assert.assertTrue("Timeout waiting for FX runtime to start", startupLatch.await(15, TimeUnit.SECONDS));
+    }
 
-        try {
-            if (!startupLatch.await(15, TimeUnit.SECONDS)) {
-                Assert.fail("Timeout waiting for FX runtime to start");
-            }
-        } catch (InterruptedException ex) {
-            Assert.fail("Unexpected exception: " + ex);
-        }
+    @AfterClass
+    public static void teardownOnce() {
+        Platform.runLater(() -> {
+            stage.hide();
+            Platform.exit();
+        });
     }
 
     @Test
     public void testForTitledPaneLeak() throws Exception {
         TitledPane pane = new TitledPane();
@@ -94,14 +96,6 @@
             Util.sleep(500);
         }
         // Ensure accordion's skin no longer hold a ref to titled pane.
         Assert.assertNull("Couldn't collect TitledPane", weakRefToPane.get());
     }
-
-    @AfterClass
-    public static void teardownOnce() {
-        Platform.runLater(() -> {
-            stage.hide();
-            Platform.exit();
-        });
-    }
 }
