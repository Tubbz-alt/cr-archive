diff a/tests/3DLighting/attenuation/CameraScene3D.java b/tests/3DLighting/attenuation/CameraScene3D.java
--- a/tests/3DLighting/attenuation/CameraScene3D.java
+++ b/tests/3DLighting/attenuation/CameraScene3D.java
@@ -110,11 +110,11 @@
             curX = e.getX();
             curY = e.getY();
             double deltaX = curX - startX;
             double deltaY = curY - startY;
             if (e.getButton() == MouseButton.PRIMARY) {
-            	pan(deltaX, deltaY);
+                pan(deltaX, deltaY);
             } else if (e.getButton() == MouseButton.SECONDARY) {
                 boolean positiveX = curX > getWidth() / 2;
                 boolean positiveY = curY > getHeight() / 2;
                 deltaX = positiveY ? -deltaX : deltaX;
                 deltaY = positiveX ? deltaY : -deltaY;
@@ -143,6 +143,6 @@
     }
 
     private void rotate(double amount) {
         zAngle.set(zAngle.get() - amount * zRotationSensitivity.get());
     }
-}
+}
diff a/tests/3DLighting/attenuation/Environment.java b/tests/3DLighting/attenuation/Environment.java
--- a/tests/3DLighting/attenuation/Environment.java
+++ b/tests/3DLighting/attenuation/Environment.java
@@ -26,17 +26,17 @@
     Environment() {
         farClip.set(1000);
         zoom.set(-350);
 
         for (var light : lights) {
-        	light.setTranslateZ(-50);
-        	var lightRep = new Sphere(2);
-        	lightRep.setMaterial(new PhongMaterial(light.getColor()));
-        	lightRep.translateXProperty().bind(light.translateXProperty());
-        	lightRep.translateYProperty().bind(light.translateYProperty());
-        	lightRep.translateZProperty().bind(light.translateZProperty());
-        	rootGroup.getChildren().addAll(light, lightRep);
+            light.setTranslateZ(-50);
+            var lightRep = new Sphere(2);
+            lightRep.setMaterial(new PhongMaterial(light.getColor()));
+            lightRep.translateXProperty().bind(light.translateXProperty());
+            lightRep.translateYProperty().bind(light.translateYProperty());
+            lightRep.translateZProperty().bind(light.translateZProperty());
+            rootGroup.getChildren().addAll(light, lightRep);
         }
         light1.setTranslateX(40);
         light2.setTranslateX(-40);
         light1.setUserData("RED");
         light2.setUserData("BLUE");
diff a/tests/3DLighting/attenuation/LightingSample.java b/tests/3DLighting/attenuation/LightingSample.java
--- a/tests/3DLighting/attenuation/LightingSample.java
+++ b/tests/3DLighting/attenuation/LightingSample.java
@@ -57,11 +57,11 @@
         var sphereBox = new HBox(sphere, subdivisionSlider, subdivisionLabel);
         var meshBox = new HBox(mesh, quadSlider, quadLabel);
 
         var controls = new VBox(sphereBox, meshBox);
         for (var light : environment.lights) {
-        	controls.getChildren().add(addLightControls(light));
+            controls.getChildren().add(addLightControls(light));
         }
 
         var hBox = new HBox(controls, environment);
         HBox.setHgrow(environment, Priority.ALWAYS);
         stage.setScene(new Scene(hBox));
@@ -76,13 +76,13 @@
         slider.setShowTickMarks(true);
         slider.setSnapToTicks(true);
     }
 
     protected VBox addLightControls(PointLight light) {
-    	var lightOn = new CheckBox("On/Off");
-    	lightOn.setSelected(true);
-    	light.lightOnProperty().bind(lightOn.selectedProperty());
+        var lightOn = new CheckBox("On/Off");
+        lightOn.setSelected(true);
+        light.lightOnProperty().bind(lightOn.selectedProperty());
         return new VBox(new Separator(), new Label(light.getUserData() + " light"), lightOn);
     }
 
    private TranslateTransition createAnimation() {
         var anim = new TranslateTransition(Duration.seconds(2));
