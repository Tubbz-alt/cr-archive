diff a/tests/3DLighting/attenuation/AttenLightingSample.java b/tests/3DLighting/attenuation/AttenLightingSample.java
--- /dev/null
+++ b/tests/3DLighting/attenuation/AttenLightingSample.java
@@ -0,0 +1,42 @@
+package attenuation;
+
+import javafx.beans.property.DoubleProperty;
+import javafx.scene.PointLight;
+import javafx.scene.control.Label;
+import javafx.scene.control.Slider;
+import javafx.scene.control.TextField;
+import javafx.scene.layout.HBox;
+import javafx.scene.layout.VBox;
+import javafx.util.converter.NumberStringConverter;
+
+/**
+ * A {@code LightingSample} with additional controls for light attenuation.
+ */
+public class AttenLightingSample extends LightingSample {
+
+    @Override
+    protected VBox addLightControls(PointLight light) {
+        var vbox = super.addLightControls(light);
+        var range = createSliderControl("range", light.maxRangeProperty(), 0, 100, light.getMaxRange());
+        var c = createSliderControl("constant", light.constantAttenuationProperty(), -1, 1, light.getConstantAttenuation());
+        var lc = createSliderControl("linear", light.linearAttenuationProperty(), -1, 1, light.getLinearAttenuation());
+        var qc = createSliderControl("quadratic", light.quadraticAttenuationProperty(), -1, 1, light.getQuadraticAttenuation());
+        vbox.getChildren().addAll(range, c, lc, qc);
+        return vbox;
+    }
+
+    private HBox createSliderControl(String name, DoubleProperty property, double min, double max, double start) {
+        var slider = new Slider(min, max, start);
+        slider.setShowTickMarks(true);
+        slider.setShowTickLabels(true);
+        property.bindBidirectional(slider.valueProperty());
+        var tf = new TextField();
+        tf.textProperty().bindBidirectional(slider.valueProperty(), new NumberStringConverter());
+        tf.setMaxWidth(50);
+        return new HBox(5, new Label(name), slider, tf);
+    }
+
+    public static void main(String[] args) {
+        launch(args);
+    }
+}
diff a/tests/3DLighting/attenuation/CameraScene3D.java b/tests/3DLighting/attenuation/CameraScene3D.java
--- /dev/null
+++ b/tests/3DLighting/attenuation/CameraScene3D.java
@@ -0,0 +1,148 @@
+package attenuation;
+
+import javafx.beans.property.BooleanProperty;
+import javafx.beans.property.DoubleProperty;
+import javafx.beans.property.SimpleBooleanProperty;
+import javafx.beans.property.SimpleDoubleProperty;
+import javafx.scene.Group;
+import javafx.scene.PerspectiveCamera;
+import javafx.scene.PointLight;
+import javafx.scene.SceneAntialiasing;
+import javafx.scene.SubScene;
+import javafx.scene.input.MouseButton;
+import javafx.scene.input.ScrollEvent;
+import javafx.scene.layout.Pane;
+import javafx.scene.transform.Rotate;
+import javafx.scene.transform.Translate;
+
+class CameraScene3D extends Pane {
+
+    public DoubleProperty xPan = new SimpleDoubleProperty();
+    public DoubleProperty yPan = new SimpleDoubleProperty(-10);
+    public DoubleProperty zoom = new SimpleDoubleProperty();
+    public DoubleProperty zAngle = new SimpleDoubleProperty();
+    public DoubleProperty isometricAngle = new SimpleDoubleProperty();
+
+    public DoubleProperty panSensitivity = new SimpleDoubleProperty(1);
+    public DoubleProperty zoomSensitivity = new SimpleDoubleProperty(1);
+    public DoubleProperty zRotationSensitivity = new SimpleDoubleProperty(1);
+    public BooleanProperty isZoomTotal = new SimpleBooleanProperty();
+
+    protected PerspectiveCamera camera = new PerspectiveCamera(true);
+
+    public DoubleProperty farClip = new SimpleDoubleProperty(camera.getFarClip());
+    public DoubleProperty nearClip = new SimpleDoubleProperty(camera.getNearClip());
+    public DoubleProperty fieldOfView = new SimpleDoubleProperty(camera.getFieldOfView());
+    public BooleanProperty verticalFOV = new SimpleBooleanProperty(camera.isVerticalFieldOfView());
+
+    protected PointLight camLight = new PointLight();
+    public BooleanProperty camLightOn = new SimpleBooleanProperty(camLight.isLightOn());
+
+    public Group rootGroup = new Group();
+
+    public CameraScene3D() {
+        setupCamera();
+        createScenes();
+        setUIBindings();
+    }
+
+    private void setupCamera() {
+        Translate panTranslation = new Translate();
+        panTranslation.xProperty().bind(xPan);
+        panTranslation.yProperty().bind(yPan);
+
+        Translate zoomTranslation = new Translate();
+        zoomTranslation.zProperty().bind(zoom);
+
+        Rotate zRotation = new Rotate(0, Rotate.Y_AXIS);
+        zRotation.angleProperty().bind(zAngle);
+
+        Rotate isometricRotation = new Rotate(0, Rotate.X_AXIS);
+        isometricRotation.angleProperty().bind(isometricAngle);
+
+        camera.farClipProperty().bind(farClip);
+        camera.nearClipProperty().bind(nearClip);
+        camera.fieldOfViewProperty().bind(fieldOfView);
+        camera.verticalFieldOfViewProperty().bind(verticalFOV);
+
+        camera.getTransforms().addAll(panTranslation, zRotation, isometricRotation, zoomTranslation);
+
+        camLight.lightOnProperty().bind(camLightOn);
+        camLight.getTransforms().addAll(camera.getTransforms());
+        camLightOn.set(false);
+
+        rootGroup.getTransforms().addAll();
+        rootGroup.getChildren().add(camLight);
+        rootGroup.setId("root group");
+    }
+
+    private void createScenes() {
+        var aaScene = new SubScene(rootGroup, 0, 0, true, SceneAntialiasing.BALANCED);
+        aaScene.setCamera(camera);
+        aaScene.widthProperty().bind(widthProperty());
+        aaScene.heightProperty().bind(heightProperty());
+        aaScene.setOnMouseEntered(e -> aaScene.requestFocus());
+        getChildren().setAll(aaScene);
+    }
+
+    private double startX, startY, curX, curY;
+
+    private final void setUIBindings() {
+        setOnRotate(e -> rotate(e.getAngle()));
+        setOnZoom(e -> zoom(isZoomTotal.get() ? e.getTotalZoomFactor() : e.getZoomFactor()));
+        setOnScroll(e -> {
+            // touch scroll for moving the board
+            if (e.getEventType() == ScrollEvent.SCROLL_STARTED)
+                pan(e.getDeltaX(), e.getDeltaY());
+            // mouse scroll for zoom
+            else
+                zoom(e.getDeltaY());
+        });
+
+        setOnMousePressed(e -> {
+            startX = curX = e.getX();
+            startY = curY = e.getY();
+        });
+
+        setOnMouseDragged(e -> {
+            startX = curX;
+            startY = curY;
+            curX = e.getX();
+            curY = e.getY();
+            double deltaX = curX - startX;
+            double deltaY = curY - startY;
+            if (e.getButton() == MouseButton.PRIMARY) {
+            	pan(deltaX, deltaY);
+            } else if (e.getButton() == MouseButton.SECONDARY) {
+                boolean positiveX = curX > getWidth() / 2;
+                boolean positiveY = curY > getHeight() / 2;
+                deltaX = positiveY ? -deltaX : deltaX;
+                deltaY = positiveX ? deltaY : -deltaY;
+                rotate((deltaX + deltaY)/2);
+            }
+        });
+    }
+
+    private final double scaleFactor = 500;
+
+    private void pan(double deltaX, double deltaY) {
+        double angle = Math.toRadians(zAngle.get());
+        double cosA = Math.cos(angle);
+        double sinA = Math.sin(angle);
+        double rotatedDeltaX = deltaX *  cosA + deltaY * sinA;
+        double rotatedDeltaY = deltaX * -sinA + deltaY * cosA;
+        double panFactor = panSensitivity.get() * zoom.get() / scaleFactor;
+        double newX = xPan.get() + rotatedDeltaX * panFactor;
+        double newY = yPan.get() + rotatedDeltaY * panFactor;
+        xPan.set(newX);
+        yPan.set(newY);
+    }
+
+    private void zoom(double amount) {
+        zoom.set(zoom.get() - amount * zoomSensitivity.get() * zoom.get() / scaleFactor);
+    }
+
+    private void rotate(double amount) {
+        zAngle.set(zAngle.get() - amount * zRotationSensitivity.get());
+    }
+}
diff a/tests/3DLighting/attenuation/Environment.java b/tests/3DLighting/attenuation/Environment.java
--- /dev/null
+++ b/tests/3DLighting/attenuation/Environment.java
@@ -0,0 +1,97 @@
+package attenuation;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import javafx.scene.AmbientLight;
+import javafx.scene.PointLight;
+import javafx.scene.paint.Color;
+import javafx.scene.paint.PhongMaterial;
+import javafx.scene.shape.MeshView;
+import javafx.scene.shape.Shape3D;
+import javafx.scene.shape.Sphere;
+import javafx.scene.shape.TriangleMesh;
+
+class Environment extends CameraScene3D {
+
+    private final PointLight light1 = new PointLight(Color.RED);
+    private final PointLight light2 = new PointLight(Color.BLUE);
+    private final PointLight light3 = new PointLight(Color.MAGENTA);
+    final PointLight[] lights = {light1, light2, light3};
+
+    private Shape3D currentShape;
+
+    private final AmbientLight worldLight = new AmbientLight();
+
+    Environment() {
+        farClip.set(1000);
+        zoom.set(-350);
+
+        for (var light : lights) {
+        	light.setTranslateZ(-50);
+        	var lightRep = new Sphere(2);
+        	lightRep.setMaterial(new PhongMaterial(light.getColor()));
+        	lightRep.translateXProperty().bind(light.translateXProperty());
+        	lightRep.translateYProperty().bind(light.translateYProperty());
+        	lightRep.translateZProperty().bind(light.translateZProperty());
+        	rootGroup.getChildren().addAll(light, lightRep);
+        }
+        light1.setTranslateX(40);
+        light2.setTranslateX(-40);
+        light1.setUserData("RED");
+        light2.setUserData("BLUE");
+        light3.setUserData("MAGENTA");
+
+        rootGroup.getChildren().add(worldLight);
+        rootGroup.setMouseTransparent(true);
+    }
+
+    Sphere createSphere(int subdivisions) {
+        return new Sphere(50, subdivisions);
+    }
+
+    MeshView createMeshView(int quadNum) {
+        // Points and texCoords array defining a single quad that will
+        // be referenced by all pairs of triangles in the faces array
+        final float[] points = {
+            -75.0f,  75.0f, 0.0f,
+             75.0f,  75.0f, 0.0f,
+             75.0f, -75.0f, 0.0f,
+            -75.0f, -75.0f, 0.0f
+        };
+        final float[] texCoords = {
+            0.0f, 0.0f,
+            1.0f, 0.0f,
+            1.0f, 1.0f,
+            0.0f, 1.0f
+        };
+        // List of faces defining a single quad (pair of triangles).
+        // This is replicated for the desired number of quads
+        var face = List.of(
+            0, 0, 1, 1, 2, 2,
+            0, 0, 2, 2, 3, 3
+        );
+
+        var faces = new ArrayList<Integer>(quadNum * face.size());
+        for (int i = 0; i < quadNum; i++) {
+            faces.addAll(face);
+        }
+
+        var mesh = new TriangleMesh();
+        mesh.getPoints().setAll(points);
+        mesh.getTexCoords().setAll(texCoords);
+        int[] array = faces.stream().mapToInt(i -> i).toArray();
+        mesh.getFaces().setAll(array);
+
+        var mv = new MeshView(mesh);
+        return mv;
+    }
+
+    void switchTo(Shape3D node) {
+        worldLight.getExclusionScope().remove(currentShape);
+        worldLight.getExclusionScope().add(node);
+        rootGroup.getChildren().remove(currentShape);
+        rootGroup.getChildren().add(node);
+        currentShape = node;
+    }
+}
diff a/tests/3DLighting/attenuation/FPSCounter.java b/tests/3DLighting/attenuation/FPSCounter.java
--- /dev/null
+++ b/tests/3DLighting/attenuation/FPSCounter.java
@@ -0,0 +1,62 @@
+package attenuation;
+
+import javafx.animation.AnimationTimer;
+
+final class FPSCounter extends AnimationTimer {
+
+    private int skipFrames = 100;
+    private long lastTime = -1;
+    private long elapsedTime;
+    private int elapsedFrames;
+    private long totalElapsedTime;
+    private int totalElapsedFrames;
+
+    @Override
+    public void handle(long now) {
+        if (skipFrames > 0) {
+            --skipFrames;
+            return;
+        }
+
+        if (lastTime < 0) {
+            lastTime = System.nanoTime();
+            elapsedTime = 0;
+            elapsedFrames = 0;
+            totalElapsedTime = 0;
+            totalElapsedFrames = 0;
+            return;
+        }
+
+        long currTime = System.nanoTime();
+        elapsedTime += currTime - lastTime;
+        elapsedFrames += 1;
+        totalElapsedTime += currTime - lastTime;
+        totalElapsedFrames += 1;
+
+        double elapsedSeconds = (double) elapsedTime / 1e9;
+        double totalElapsedSeconds = (double) totalElapsedTime / 1e9;
+        if (elapsedSeconds >= 5.0) {
+            double fps = elapsedFrames / elapsedSeconds;
+            System.out.println();
+            System.out.println("instant fps: " + fps);
+            double avgFps = totalElapsedFrames / totalElapsedSeconds;
+            System.out.println("average fps: " + avgFps);
+            System.out.flush();
+            elapsedTime = 0;
+            elapsedFrames = 0;
+        }
+
+        lastTime = currTime;
+    }
+
+    void reset() {
+        skipFrames = 100;
+        lastTime = -1;
+        elapsedTime = 0;
+        elapsedFrames = 0;
+        totalElapsedTime = 0;
+        totalElapsedFrames = 0;
+        System.out.println();
+        System.out.println(" --------------------- ");
+    }
+}
diff a/tests/3DLighting/attenuation/LightingSample.java b/tests/3DLighting/attenuation/LightingSample.java
--- /dev/null
+++ b/tests/3DLighting/attenuation/LightingSample.java
@@ -0,0 +1,108 @@
+package attenuation;
+
+import javafx.animation.Animation;
+import javafx.animation.TranslateTransition;
+import javafx.application.Application;
+import javafx.scene.PointLight;
+import javafx.scene.Scene;
+import javafx.scene.control.Button;
+import javafx.scene.control.CheckBox;
+import javafx.scene.control.Label;
+import javafx.scene.control.Separator;
+import javafx.scene.control.Slider;
+import javafx.scene.layout.HBox;
+import javafx.scene.layout.Priority;
+import javafx.scene.layout.VBox;
+import javafx.scene.shape.Shape3D;
+import javafx.stage.Stage;
+import javafx.util.Duration;
+import javafx.util.converter.NumberStringConverter;
+
+/**
+ * A sample application for measuring FPS for various 3D nodes with environmental lighting.
+ * <p>
+ * <b>Important</b>: make sure that no other application on your system is rendering heavy graphics, like videos, to a screen,
+ * as this will corrupt the measurement. 
+ */
+public class LightingSample extends Application {
+
+    private final Environment environment = new Environment();
+    private final TranslateTransition animation = createAnimation();
+    private final FPSCounter fpsCouner = new FPSCounter();
+
+    @Override
+    public void start(Stage stage) throws Exception {
+        environment.setStyle("-fx-background-color: teal");
+
+        var subdivisionSlider = new Slider(10, 200, 60);
+        subdivisionSlider.setMajorTickUnit(10);
+        setupSlier(subdivisionSlider);
+
+        var subdivisionLabel = new Label();
+        subdivisionLabel.textProperty().bindBidirectional(subdivisionSlider.valueProperty(), new NumberStringConverter("#"));
+
+        var sphere = new Button("Sphere");
+        sphere.setOnAction(e -> switchTo(environment.createSphere((int) subdivisionSlider.getValue())));
+
+        var quadSlider = new Slider(500, 10_000, 1000);
+        quadSlider.setMajorTickUnit(500);
+        setupSlier(quadSlider);
+
+        var quadLabel = new Label();
+        quadLabel.textProperty().bindBidirectional(quadSlider.valueProperty(), new NumberStringConverter("#"));
+
+        var mesh = new Button("Mesh");
+        mesh.setOnAction(e -> switchTo(environment.createMeshView((int) quadSlider.getValue())));
+
+        var sphereBox = new HBox(sphere, subdivisionSlider, subdivisionLabel);
+        var meshBox = new HBox(mesh, quadSlider, quadLabel);
+
+        var controls = new VBox(sphereBox, meshBox);
+        for (var light : environment.lights) {
+        	controls.getChildren().add(addLightControls(light));
+        }
+
+        var hBox = new HBox(controls, environment);
+        HBox.setHgrow(environment, Priority.ALWAYS);
+        stage.setScene(new Scene(hBox));
+        stage.setWidth(1100);
+        stage.setHeight(735);
+        stage.show();
+    }
+
+    private void setupSlier(Slider slider) {
+        slider.setMinorTickCount(0);
+        slider.setShowTickLabels(true);
+        slider.setShowTickMarks(true);
+        slider.setSnapToTicks(true);
+    }
+
+    protected VBox addLightControls(PointLight light) {
+    	var lightOn = new CheckBox("On/Off");
+    	lightOn.setSelected(true);
+    	light.lightOnProperty().bind(lightOn.selectedProperty());
+        return new VBox(new Separator(), new Label(light.getUserData() + " light"), lightOn);
+    }
+
+   private TranslateTransition createAnimation() {
+        var anim = new TranslateTransition(Duration.seconds(2));
+        anim.setAutoReverse(true);
+        anim.setCycleCount(Animation.INDEFINITE);
+        anim.setFromZ(150);
+        anim.setToZ(0);
+        return anim;
+    }
+
+    private void switchTo(Shape3D node) {
+        fpsCouner.stop();
+        fpsCouner.reset();
+        environment.switchTo(node);
+        animation.setNode(node);
+        animation.playFromStart();
+        fpsCouner.start();
+    }
+
+    public static void main(String[] args) {
+        launch(args);
+    }
+}
