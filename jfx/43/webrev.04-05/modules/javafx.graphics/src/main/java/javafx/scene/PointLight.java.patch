diff a/modules/javafx.graphics/src/main/java/javafx/scene/PointLight.java b/modules/javafx.graphics/src/main/java/javafx/scene/PointLight.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/PointLight.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/PointLight.java
@@ -103,11 +103,11 @@
      * Nodes that are inside the light's range can still be excluded from the light's effect by removing them from
      * its {@link #getScope() scope} (or including them in its {@link #getExclusionScope() exclusion scope}). If a
      * node is known to always be outside of the light's range, it is more performant to exclude it from its scope.
      *
      * @defaultValue {@code Double.POSITIVE_INFINITY}
-     * @since 14
+     * @since 16
      */
     private DoubleProperty maxRange;
 
     public final void setMaxRange(double value) {
         maxRangeProperty().set(value);
@@ -132,11 +132,11 @@
      * {@code attn = 1 / (ca + la * dist + qa * dist^2)}
      * <p>
      * where {@code dist} is the distance between the light source and the pixel.
      *
      * @defaultValue 1
-     * @since 14
+     * @since 16
      */
     private DoubleProperty constantAttenuation;
 
     public final void setConstantAttenuation(double value) {
         constantAttenuationProperty().set(value);
@@ -161,27 +161,27 @@
      * {@code attn = 1 / (ca + la * dist + qa * dist^2)}
      * <p>
      * where {@code dist} is the distance between the light source and the pixel.
      *
      * @defaultValue 0
-     * @since 14
+     * @since 16
      */
     private DoubleProperty linearAttenuation;
 
     public final void setLinearAttenuation(double value) {
         linearAttenuationProperty().set(value);
     }
 
-    private static final double DEFAULT_LINEAR_CONSTANT = NGPointLight.getDefaultLa();
+    private static final double DEFAULT_LINEAR_ATTENUATION = NGPointLight.getDefaultLa();
 
     public final double getLinearAttenuation() {
-        return linearAttenuation == null ? DEFAULT_LINEAR_CONSTANT : linearAttenuation.get();
+        return linearAttenuation == null ? DEFAULT_LINEAR_ATTENUATION : linearAttenuation.get();
     }
 
     public final DoubleProperty linearAttenuationProperty() {
         if (linearAttenuation == null) {
-            linearAttenuation = getLightDoubleProperty("linearAttenuation", DEFAULT_LINEAR_CONSTANT);
+            linearAttenuation = getLightDoubleProperty("linearAttenuation", DEFAULT_LINEAR_ATTENUATION);
         }
         return linearAttenuation;
     }
 
     /**
@@ -190,27 +190,27 @@
      * {@code attn = 1 / (ca + la * dist + qa * dist^2)}
      * <p>
      * where {@code dist} is the distance between the light source and the pixel.
      *
      * @defaultValue 0
-     * @since 14
+     * @since 16
      */
     private DoubleProperty quadraticAttenuation;
 
     public final void setQuadraticAttenuation(double value) {
         quadraticAttenuationProperty().set(value);
     }
 
-    private static final double DEFAULT_QUADRATIC_CONSTANT = NGPointLight.getDefaultQa();
+    private static final double DEFAULT_QUADRATIC_ATTENUATION = NGPointLight.getDefaultQa();
 
     public final double getQuadraticAttenuation() {
-        return quadraticAttenuation == null ? DEFAULT_QUADRATIC_CONSTANT : quadraticAttenuation.get();
+        return quadraticAttenuation == null ? DEFAULT_QUADRATIC_ATTENUATION : quadraticAttenuation.get();
     }
 
     public final DoubleProperty quadraticAttenuationProperty() {
         if (quadraticAttenuation == null) {
-            quadraticAttenuation = getLightDoubleProperty("quadraticAttenuation", DEFAULT_QUADRATIC_CONSTANT);
+            quadraticAttenuation = getLightDoubleProperty("quadraticAttenuation", DEFAULT_QUADRATIC_ATTENUATION);
         }
         return quadraticAttenuation;
     }
 
     /*
