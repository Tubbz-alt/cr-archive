diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLIntrinsics.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLIntrinsics.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLIntrinsics.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLIntrinsics.h
@@ -56,10 +56,16 @@
     {
         ASSERT(m_boolType);
         return *m_boolType;
     }
 
+    AST::NativeTypeDeclaration& boolVectorTypeForSize(unsigned size) const
+    {
+        RELEASE_ASSERT(size == 2 || size == 3 || size == 4);
+        return *m_vectorBool[size - 2];
+    }
+
     AST::NativeTypeDeclaration& uintType() const
     {
         ASSERT(m_uintType);
         return *m_uintType;
     }
@@ -80,10 +86,16 @@
     {
         ASSERT(m_vectorUint[2]);
         return *m_vectorUint[2];
     }
 
+    AST::NativeTypeDeclaration& uintVectorTypeForSize(unsigned size) const
+    {
+        RELEASE_ASSERT(size == 2 || size == 3 || size == 4);
+        return *m_vectorUint[size - 2];
+    }
+
     AST::NativeTypeDeclaration& int2Type() const
     {
         ASSERT(m_vectorInt[0]);
         return *m_vectorInt[0];
     }
@@ -92,10 +104,16 @@
     {
         ASSERT(m_vectorInt[2]);
         return *m_vectorInt[2];
     }
 
+    AST::NativeTypeDeclaration& intVectorTypeForSize(unsigned size) const
+    {
+        RELEASE_ASSERT(size == 2 || size == 3 || size == 4);
+        return *m_vectorInt[size - 2];
+    }
+
     AST::NativeTypeDeclaration& samplerType() const
     {
         ASSERT(m_samplerType);
         return *m_samplerType;
     }
@@ -122,10 +140,16 @@
     {
         ASSERT(m_vectorFloat[2]);
         return *m_vectorFloat[2];
     }
 
+    AST::NativeTypeDeclaration& floatVectorTypeForSize(unsigned size) const
+    {
+        RELEASE_ASSERT(size == 2 || size == 3 || size == 4);
+        return *m_vectorFloat[size - 2];
+    }
+
     // These functions may have been pruned from the AST if they are unused.
     AST::NativeFunctionDeclaration* ddx() const
     {
         return m_ddx;
     }
