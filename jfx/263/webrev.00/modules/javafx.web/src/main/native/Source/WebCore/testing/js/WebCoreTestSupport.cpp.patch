diff a/modules/javafx.web/src/main/native/Source/WebCore/testing/js/WebCoreTestSupport.cpp b/modules/javafx.web/src/main/native/Source/WebCore/testing/js/WebCoreTestSupport.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/testing/js/WebCoreTestSupport.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/testing/js/WebCoreTestSupport.cpp
@@ -37,11 +37,11 @@
 #include "LogInitialization.h"
 #include "MockGamepadProvider.h"
 #include "Page.h"
 #include "SWContextManager.h"
 #include "ServiceWorkerGlobalScope.h"
-#include "WheelEventTestTrigger.h"
+#include "WheelEventTestMonitor.h"
 #include <JavaScriptCore/APICast.h>
 #include <JavaScriptCore/CallFrame.h>
 #include <JavaScriptCore/IdentifierInlines.h>
 #include <JavaScriptCore/JSValueRef.h>
 #include <wtf/URLParser.h>
@@ -54,26 +54,27 @@
 using namespace JSC;
 using namespace WebCore;
 
 void injectInternalsObject(JSContextRef context)
 {
-    ExecState* exec = toJS(context);
-    VM& vm = exec->vm();
+    JSGlobalObject* lexicalGlobalObject = toJS(context);
+    VM& vm = lexicalGlobalObject->vm();
     JSLockHolder lock(vm);
-    JSDOMGlobalObject* globalObject = jsCast<JSDOMGlobalObject*>(exec->lexicalGlobalObject());
+    JSDOMGlobalObject* globalObject = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject);
     ScriptExecutionContext* scriptContext = globalObject->scriptExecutionContext();
     if (is<Document>(*scriptContext)) {
-        globalObject->putDirect(vm, Identifier::fromString(vm, Internals::internalsId), toJS(exec, globalObject, Internals::create(downcast<Document>(*scriptContext))));
+        globalObject->putDirect(vm, Identifier::fromString(vm, Internals::internalsId), toJS(lexicalGlobalObject, globalObject, Internals::create(downcast<Document>(*scriptContext))));
+        Options::useDollarVM() = true;
         globalObject->exposeDollarVM(vm);
     }
 }
 
 void resetInternalsObject(JSContextRef context)
 {
-    ExecState* exec = toJS(context);
-    JSLockHolder lock(exec);
-    JSDOMGlobalObject* globalObject = jsCast<JSDOMGlobalObject*>(exec->lexicalGlobalObject());
+    JSGlobalObject* lexicalGlobalObject = toJS(context);
+    JSLockHolder lock(lexicalGlobalObject);
+    JSDOMGlobalObject* globalObject = jsCast<JSDOMGlobalObject*>(lexicalGlobalObject);
     ScriptExecutionContext* scriptContext = globalObject->scriptExecutionContext();
     Page* page = downcast<Document>(scriptContext)->frame()->page();
     Internals::resetToConsistentState(*page);
     InternalSettings::from(page)->resetToConsistentState();
 }
@@ -82,34 +83,34 @@
 {
     Page* page = frame.page();
     if (!page)
         return;
 
-    page->ensureTestTrigger();
+    page->ensureWheelEventTestMonitor();
 }
 
 void setTestCallbackAndStartNotificationTimer(WebCore::Frame& frame, JSContextRef context, JSObjectRef jsCallbackFunction)
 {
     Page* page = frame.page();
-    if (!page || !page->expectsWheelEventTriggers())
+    if (!page || !page->isMonitoringWheelEvents())
         return;
 
     JSValueProtect(context, jsCallbackFunction);
 
-    page->ensureTestTrigger().setTestCallbackAndStartNotificationTimer([=](void) {
+    page->ensureWheelEventTestMonitor().setTestCallbackAndStartNotificationTimer([=](void) {
         JSObjectCallAsFunction(context, jsCallbackFunction, nullptr, 0, nullptr, nullptr);
         JSValueUnprotect(context, jsCallbackFunction);
     });
 }
 
-void clearWheelEventTestTrigger(WebCore::Frame& frame)
+void clearWheelEventTestMonitor(WebCore::Frame& frame)
 {
     Page* page = frame.page();
     if (!page)
         return;
 
-    page->clearTrigger();
+    page->clearWheelEventTestMonitor();
 }
 
 void setLogChannelToAccumulate(const String& name)
 {
 #if !LOG_DISABLED
@@ -117,10 +118,17 @@
 #else
     UNUSED_PARAM(name);
 #endif
 }
 
+void clearAllLogChannelsToAccumulate()
+{
+#if !LOG_DISABLED
+    WebCore::clearAllLogChannelsToAccumulate();
+#endif
+}
+
 void initializeLogChannelsIfNecessary()
 {
 #if !LOG_DISABLED || !RELEASE_LOG_DISABLED
     WebCore::initializeLogChannelsIfNecessary();
 #endif
