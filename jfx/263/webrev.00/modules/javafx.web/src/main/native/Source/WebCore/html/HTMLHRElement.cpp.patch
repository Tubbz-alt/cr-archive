diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLHRElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLHRElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLHRElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLHRElement.cpp
@@ -61,24 +61,24 @@
 
 void HTMLHRElement::collectStyleForPresentationAttribute(const QualifiedName& name, const AtomString& value, MutableStyleProperties& style)
 {
     if (name == alignAttr) {
         if (equalLettersIgnoringASCIICase(value, "left")) {
-            addPropertyToPresentationAttributeStyle(style, CSSPropertyMarginLeft, 0, CSSPrimitiveValue::CSS_PX);
+            addPropertyToPresentationAttributeStyle(style, CSSPropertyMarginLeft, 0, CSSUnitType::CSS_PX);
             addPropertyToPresentationAttributeStyle(style, CSSPropertyMarginRight, CSSValueAuto);
         } else if (equalLettersIgnoringASCIICase(value, "right")) {
             addPropertyToPresentationAttributeStyle(style, CSSPropertyMarginLeft, CSSValueAuto);
-            addPropertyToPresentationAttributeStyle(style, CSSPropertyMarginRight, 0, CSSPrimitiveValue::CSS_PX);
+            addPropertyToPresentationAttributeStyle(style, CSSPropertyMarginRight, 0, CSSUnitType::CSS_PX);
         } else {
             addPropertyToPresentationAttributeStyle(style, CSSPropertyMarginLeft, CSSValueAuto);
             addPropertyToPresentationAttributeStyle(style, CSSPropertyMarginRight, CSSValueAuto);
         }
     } else if (name == widthAttr) {
         bool ok;
         int v = value.toInt(&ok);
         if (ok && !v)
-            addPropertyToPresentationAttributeStyle(style, CSSPropertyWidth, 1, CSSPrimitiveValue::CSS_PX);
+            addPropertyToPresentationAttributeStyle(style, CSSPropertyWidth, 1, CSSUnitType::CSS_PX);
         else
             addHTMLLengthToStyle(style, CSSPropertyWidth, value);
     } else if (name == colorAttr) {
         addPropertyToPresentationAttributeStyle(style, CSSPropertyBorderStyle, CSSValueSolid);
         addHTMLColorToStyle(style, CSSPropertyBorderColor, value);
@@ -93,13 +93,13 @@
         }
     } else if (name == sizeAttr) {
         StringImpl* si = value.impl();
         int size = si->toInt();
         if (size <= 1)
-            addPropertyToPresentationAttributeStyle(style, CSSPropertyBorderBottomWidth, 0, CSSPrimitiveValue::CSS_PX);
+            addPropertyToPresentationAttributeStyle(style, CSSPropertyBorderBottomWidth, 0, CSSUnitType::CSS_PX);
         else
-            addPropertyToPresentationAttributeStyle(style, CSSPropertyHeight, size - 2, CSSPrimitiveValue::CSS_PX);
+            addPropertyToPresentationAttributeStyle(style, CSSPropertyHeight, size - 2, CSSUnitType::CSS_PX);
     } else
         HTMLElement::collectStyleForPresentationAttribute(name, value, style);
 }
 
 bool HTMLHRElement::canContainRangeEndPoint() const
