diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/EvalExecutable.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/EvalExecutable.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/EvalExecutable.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/EvalExecutable.cpp
@@ -31,12 +31,13 @@
 
 namespace JSC {
 
 const ClassInfo EvalExecutable::s_info = { "EvalExecutable", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(EvalExecutable) };
 
-EvalExecutable::EvalExecutable(ExecState* exec, const SourceCode& source, bool inStrictContext, DerivedContextType derivedContextType, bool isArrowFunctionContext, EvalContextType evalContextType)
-    : Base(exec->vm().evalExecutableStructure.get(), exec->vm(), source, inStrictContext, derivedContextType, isArrowFunctionContext, evalContextType, NoIntrinsic)
+EvalExecutable::EvalExecutable(JSGlobalObject* globalObject, const SourceCode& source, bool inStrictContext, DerivedContextType derivedContextType, bool isArrowFunctionContext, EvalContextType evalContextType, NeedsClassFieldInitializer needsClassFieldInitializer)
+    : Base(globalObject->vm().evalExecutableStructure.get(), globalObject->vm(), source, inStrictContext, derivedContextType, isArrowFunctionContext, evalContextType, NoIntrinsic)
+    , m_needsClassFieldInitializer(static_cast<unsigned>(needsClassFieldInitializer))
 {
     ASSERT(source.provider()->sourceType() == SourceProviderSourceType::Program);
 }
 
 void EvalExecutable::destroy(JSCell* cell)
