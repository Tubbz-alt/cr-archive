diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/DOMImplementation.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/DOMImplementation.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/DOMImplementation.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/DOMImplementation.cpp
@@ -75,22 +75,22 @@
     if (parseResult.hasException())
         return parseResult.releaseException();
     return DocumentType::create(m_document, qualifiedName, publicId, systemId);
 }
 
-static inline Ref<XMLDocument> createXMLDocument(PAL::SessionID sessionID, const String& namespaceURI)
+static inline Ref<XMLDocument> createXMLDocument(const String& namespaceURI)
 {
     if (namespaceURI == SVGNames::svgNamespaceURI)
-        return SVGDocument::create(sessionID, nullptr, URL());
+        return SVGDocument::create(nullptr, URL());
     if (namespaceURI == HTMLNames::xhtmlNamespaceURI)
-        return XMLDocument::createXHTML(sessionID, nullptr, URL());
-    return XMLDocument::create(sessionID, nullptr, URL());
+        return XMLDocument::createXHTML(nullptr, URL());
+    return XMLDocument::create(nullptr, URL());
 }
 
 ExceptionOr<Ref<XMLDocument>> DOMImplementation::createDocument(const String& namespaceURI, const String& qualifiedName, DocumentType* documentType)
 {
-    auto document = createXMLDocument(m_document.sessionID(), namespaceURI);
+    auto document = createXMLDocument(namespaceURI);
     document->setContextDocument(m_document.contextDocument());
     document->setSecurityOriginPolicy(m_document.securityOriginPolicy());
 
     RefPtr<Element> documentElement;
     if (!qualifiedName.isEmpty()) {
@@ -118,11 +118,11 @@
     return sheet;
 }
 
 Ref<HTMLDocument> DOMImplementation::createHTMLDocument(const String& title)
 {
-    auto document = HTMLDocument::create(m_document.sessionID(), nullptr, URL());
+    auto document = HTMLDocument::create(nullptr, URL());
     document->open();
     document->write(nullptr, { "<!doctype html><html><head></head><body></body></html>"_s });
     if (!title.isNull()) {
         auto titleElement = HTMLTitleElement::create(titleTag, document);
         titleElement->appendChild(document->createTextNode(title));
@@ -132,23 +132,23 @@
     document->setContextDocument(m_document.contextDocument());
     document->setSecurityOriginPolicy(m_document.securityOriginPolicy());
     return document;
 }
 
-Ref<Document> DOMImplementation::createDocument(PAL::SessionID sessionID, const String& type, Frame* frame, const URL& url)
+Ref<Document> DOMImplementation::createDocument(const String& type, Frame* frame, const URL& url)
 {
     // FIXME: Inelegant to have this here just because this is the home of DOM APIs for creating documents.
     // This is internal, not a DOM API. Maybe we should put it in a new class called DocumentFactory,
     // because of the analogy with HTMLElementFactory.
 
     // Plug-ins cannot take over for HTML, XHTML, plain text, or non-PDF images.
     if (equalLettersIgnoringASCIICase(type, "text/html"))
-        return HTMLDocument::create(sessionID, frame, url);
+        return HTMLDocument::create(frame, url);
     if (equalLettersIgnoringASCIICase(type, "application/xhtml+xml"))
-        return XMLDocument::createXHTML(sessionID, frame, url);
+        return XMLDocument::createXHTML(frame, url);
     if (equalLettersIgnoringASCIICase(type, "text/plain"))
-        return TextDocument::create(sessionID, frame, url);
+        return TextDocument::create(frame, url);
     bool isImage = MIMETypeRegistry::isSupportedImageMIMEType(type);
     if (frame && isImage && !MIMETypeRegistry::isPDFOrPostScriptMIMEType(type))
         return ImageDocument::create(*frame, url);
 
     // The "image documents for subframe PDFs" mode will override a PDF plug-in.
@@ -157,17 +157,17 @@
 
 #if ENABLE(VIDEO)
     MediaEngineSupportParameters parameters;
     parameters.type = ContentType { type };
     parameters.url = url;
-    if (MediaPlayer::supportsType(parameters))
-        return MediaDocument::create(sessionID, frame, url);
+    if (MediaPlayer::supportsType(parameters) != MediaPlayer::SupportsType::IsNotSupported)
+        return MediaDocument::create(frame, url);
 #endif
 
 #if ENABLE(FTPDIR)
     if (equalLettersIgnoringASCIICase(type, "application/x-ftp-directory"))
-        return FTPDirectoryDocument::create(sessionID, frame, url);
+        return FTPDirectoryDocument::create(frame, url);
 #endif
 
     if (frame && frame->loader().client().shouldAlwaysUsePluginDocument(type))
         return PluginDocument::create(*frame, url);
 
@@ -182,14 +182,17 @@
     // Items listed here, after the plug-in checks, can be overridden by plug-ins.
     // For example, plug-ins can take over support for PDF or SVG.
     if (frame && isImage)
         return ImageDocument::create(*frame, url);
     if (MIMETypeRegistry::isTextMIMEType(type))
-        return TextDocument::create(sessionID, frame, url);
+        return TextDocument::create(frame, url);
     if (equalLettersIgnoringASCIICase(type, "image/svg+xml"))
-        return SVGDocument::create(sessionID, frame, url);
-    if (MIMETypeRegistry::isXMLMIMEType(type))
-        return XMLDocument::create(sessionID, frame, url);
-    return HTMLDocument::create(sessionID, frame, url);
+        return SVGDocument::create(frame, url);
+    if (MIMETypeRegistry::isXMLMIMEType(type)) {
+        auto document = XMLDocument::create(frame, url);
+        document->overrideMIMEType(type);
+        return document;
+    }
+    return HTMLDocument::create(frame, url);
 }
 
 }
