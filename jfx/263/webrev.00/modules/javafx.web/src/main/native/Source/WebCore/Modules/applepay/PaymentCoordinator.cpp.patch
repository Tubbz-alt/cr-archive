diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/PaymentCoordinator.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/PaymentCoordinator.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/PaymentCoordinator.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/PaymentCoordinator.cpp
@@ -231,19 +231,19 @@
 
     RELEASE_LOG_IF_ALLOWED("didSelectShippingContact()");
     m_activeSession->didSelectShippingContact(shippingContact);
 }
 
-void PaymentCoordinator::didCancelPaymentSession()
+void PaymentCoordinator::didCancelPaymentSession(PaymentSessionError&& error)
 {
     if (!m_activeSession) {
         // It's possible that the payment has been aborted already.
         return;
     }
 
     RELEASE_LOG_IF_ALLOWED("didCancelPaymentSession()");
-    m_activeSession->didCancelPaymentSession();
+    m_activeSession->didCancelPaymentSession(WTFMove(error));
     m_activeSession = nullptr;
 }
 
 Optional<String> PaymentCoordinator::validatedPaymentNetwork(Document&, unsigned version, const String& paymentNetwork) const
 {
@@ -287,19 +287,19 @@
     RELEASE_LOG_IF_ALLOWED("setApplePayIsActiveIfAllowed() -> true (supportsUnrestrictedApplePay: %d)", supportsUnrestrictedApplePay);
     document.setApplePayIsActive();
     return true;
 }
 
-bool PaymentCoordinator::shouldAllowUserAgentScripts(Document& document) const
+Expected<void, ExceptionDetails> PaymentCoordinator::shouldAllowUserAgentScripts(Document& document) const
 {
     if (m_client.supportsUnrestrictedApplePay() || !document.isApplePayActive())
-        return true;
+        return { };
 
     ASSERT(!document.hasEvaluatedUserAgentScripts());
     ASSERT(!document.isRunningUserScripts());
     RELEASE_LOG_ERROR_IF_ALLOWED("shouldAllowUserAgentScripts() -> false (active session)");
-    return false;
+    return makeUnexpected(ExceptionDetails { m_client.userAgentScriptsBlockedErrorMessage() });
 }
 
 } // namespace WebCore
 
 #undef RELEASE_LOG_ERROR_IF_ALLOWED
