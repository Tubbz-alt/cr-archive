diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/SourceProviderCacheItem.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/SourceProviderCacheItem.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/SourceProviderCacheItem.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/SourceProviderCacheItem.h
@@ -55,12 +55,13 @@
 #if COMPILER(MSVC)
 #pragma warning(push)
 #pragma warning(disable: 4200) // Disable "zero-sized array in struct/union" warning
 #endif
 
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(SourceProviderCacheItem);
 class SourceProviderCacheItem {
-    WTF_MAKE_FAST_ALLOCATED;
+    WTF_MAKE_STRUCT_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(SourceProviderCacheItem);
 public:
     static std::unique_ptr<SourceProviderCacheItem> create(const SourceProviderCacheItemCreationParameters&);
     ~SourceProviderCacheItem();
 
     JSToken endFunctionToken() const
@@ -92,16 +93,16 @@
     unsigned usedVariablesCount;
     unsigned tokenType : 24; // JSTokenType
     unsigned innerArrowFunctionFeatures : 6; // InnerArrowFunctionCodeFeatures
     unsigned constructorKind : 2; // ConstructorKind
 
-    UniquedStringImpl** usedVariables() const { return const_cast<UniquedStringImpl**>(m_variables); }
+    PackedPtr<UniquedStringImpl>* usedVariables() const { return const_cast<PackedPtr<UniquedStringImpl>*>(m_variables); }
 
 private:
     SourceProviderCacheItem(const SourceProviderCacheItemCreationParameters&);
 
-    UniquedStringImpl* m_variables[0];
+    PackedPtr<UniquedStringImpl> m_variables[0];
 };
 
 inline SourceProviderCacheItem::~SourceProviderCacheItem()
 {
     for (unsigned i = 0; i < usedVariablesCount; ++i)
@@ -110,11 +111,11 @@
 
 inline std::unique_ptr<SourceProviderCacheItem> SourceProviderCacheItem::create(const SourceProviderCacheItemCreationParameters& parameters)
 {
     size_t variableCount = parameters.usedVariables.size();
     size_t objectSize = sizeof(SourceProviderCacheItem) + sizeof(UniquedStringImpl*) * variableCount;
-    void* slot = fastMalloc(objectSize);
+    void* slot = SourceProviderCacheItemMalloc::malloc(objectSize);
     return std::unique_ptr<SourceProviderCacheItem>(new (slot) SourceProviderCacheItem(parameters));
 }
 
 inline SourceProviderCacheItem::SourceProviderCacheItem(const SourceProviderCacheItemCreationParameters& parameters)
     : needsFullActivation(parameters.needsFullActivation)
@@ -137,12 +138,13 @@
     ASSERT(tokenType == static_cast<unsigned>(parameters.tokenType));
     ASSERT(innerArrowFunctionFeatures == static_cast<unsigned>(parameters.innerArrowFunctionFeatures));
     ASSERT(constructorKind == static_cast<unsigned>(parameters.constructorKind));
     ASSERT(expectedSuperBinding == static_cast<unsigned>(parameters.expectedSuperBinding));
     for (unsigned i = 0; i < usedVariablesCount; ++i) {
-        m_variables[i] = parameters.usedVariables[i];
-        m_variables[i]->ref();
+        auto* pointer = parameters.usedVariables[i];
+        pointer->ref();
+        m_variables[i] = pointer;
     }
 }
 
 #if COMPILER(MSVC)
 #pragma warning(pop)
