diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyDescriptor.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyDescriptor.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyDescriptor.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyDescriptor.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2009, 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2009-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -70,14 +70,13 @@
 {
     m_value = jsUndefined();
     m_attributes = PropertyAttribute::ReadOnly | PropertyAttribute::DontDelete | PropertyAttribute::DontEnum;
 }
 
-GetterSetter* PropertyDescriptor::slowGetterSetter(ExecState* exec)
+GetterSetter* PropertyDescriptor::slowGetterSetter(JSGlobalObject* globalObject)
 {
-    VM& vm = exec->vm();
-    JSGlobalObject* globalObject = exec->lexicalGlobalObject();
+    VM& vm = globalObject->vm();
     JSValue getter = m_getter && !m_getter.isUndefined() ? jsCast<JSObject*>(m_getter) : jsUndefined();
     JSValue setter = m_setter && !m_setter.isUndefined() ? jsCast<JSObject*>(m_setter) : jsUndefined();
     return GetterSetter::create(vm, globalObject, getter, setter);
 }
 
@@ -191,19 +190,26 @@
     m_getter = getter;
     m_attributes |= PropertyAttribute::Accessor;
     m_attributes &= ~PropertyAttribute::ReadOnly;
 }
 
-bool PropertyDescriptor::equalTo(ExecState* exec, const PropertyDescriptor& other) const
+bool PropertyDescriptor::equalTo(JSGlobalObject* globalObject, const PropertyDescriptor& other) const
 {
+    VM& vm = globalObject->vm();
+    auto scope = DECLARE_THROW_SCOPE(vm);
     if (other.m_value.isEmpty() != m_value.isEmpty()
         || other.m_getter.isEmpty() != m_getter.isEmpty()
         || other.m_setter.isEmpty() != m_setter.isEmpty())
         return false;
-    return (!m_value || sameValue(exec, other.m_value, m_value))
-        && (!m_getter || JSValue::strictEqual(exec, other.m_getter, m_getter))
-        && (!m_setter || JSValue::strictEqual(exec, other.m_setter, m_setter))
+    if (m_value) {
+        bool isSame = sameValue(globalObject, other.m_value, m_value);
+        RETURN_IF_EXCEPTION(scope, false);
+        if (!isSame)
+            return false;
+    }
+    return (!m_getter || JSValue::strictEqual(globalObject, other.m_getter, m_getter))
+        && (!m_setter || JSValue::strictEqual(globalObject, other.m_setter, m_setter))
         && attributesEqual(other);
 }
 
 bool PropertyDescriptor::attributesEqual(const PropertyDescriptor& other) const
 {
