diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSElementCustom.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSElementCustom.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSElementCustom.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSElementCustom.cpp
@@ -34,12 +34,14 @@
 #include "HTMLFrameElementBase.h"
 #include "HTMLNames.h"
 #include "JSAttr.h"
 #include "JSDOMBinding.h"
 #include "JSHTMLElementWrapperFactory.h"
+#include "JSMathMLElementWrapperFactory.h"
 #include "JSNodeList.h"
 #include "JSSVGElementWrapperFactory.h"
+#include "MathMLElement.h"
 #include "NodeList.h"
 #include "SVGElement.h"
 
 
 namespace WebCore {
@@ -51,21 +53,25 @@
 {
     if (is<HTMLElement>(element))
         return createJSHTMLWrapper(globalObject, static_reference_cast<HTMLElement>(WTFMove(element)));
     if (is<SVGElement>(element))
         return createJSSVGWrapper(globalObject, static_reference_cast<SVGElement>(WTFMove(element)));
+#if ENABLE(MATHML)
+    if (is<MathMLElement>(element))
+        return createJSMathMLWrapper(globalObject, static_reference_cast<MathMLElement>(WTFMove(element)));
+#endif
     return createWrapper<Element>(globalObject, WTFMove(element));
 }
 
-JSValue toJS(ExecState*, JSDOMGlobalObject* globalObject, Element& element)
+JSValue toJS(JSGlobalObject*, JSDOMGlobalObject* globalObject, Element& element)
 {
     if (auto* wrapper = getCachedWrapper(globalObject->world(), element))
         return wrapper;
     return createNewElementWrapper(globalObject, element);
 }
 
-JSValue toJSNewlyCreated(ExecState*, JSDOMGlobalObject* globalObject, Ref<Element>&& element)
+JSValue toJSNewlyCreated(JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<Element>&& element)
 {
     if (element->isDefinedCustomElement())
         return getCachedWrapper(globalObject->world(), element);
     ASSERT(!getCachedWrapper(globalObject->world(), element));
     return createNewElementWrapper(globalObject, WTFMove(element));
