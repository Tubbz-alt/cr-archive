diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ICStatusUtils.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ICStatusUtils.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ICStatusUtils.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ICStatusUtils.h
@@ -23,10 +23,11 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include "BytecodeIndex.h"
 #include "ExitFlag.h"
 
 namespace JSC {
 
 class CodeBlock;
@@ -40,22 +41,22 @@
         VariantType& mergedVariant = variants[i];
         if (mergedVariant.attemptToMerge(variant)) {
             for (unsigned j = 0; j < variants.size(); ++j) {
                 if (i == j)
                     continue;
-                if (variants[j].structureSet().overlaps(mergedVariant.structureSet()))
+                if (variants[j].overlaps(mergedVariant))
                     return false;
             }
             return true;
         }
     }
 
     // Make sure there is no overlap. We should have pruned out opportunities for
     // overlap but it's possible that an inline cache got into a weird state. We are
     // defensive and bail if we detect crazy.
     for (unsigned i = 0; i < variants.size(); ++i) {
-        if (variants[i].structureSet().overlaps(variant.structureSet()))
+        if (variants[i].overlaps(variant))
             return false;
     }
 
     variants.append(variant);
     return true;
@@ -69,9 +70,9 @@
             variant.structureSet().filter(set);
             return variant.structureSet().isEmpty();
         });
 }
 
-ExitFlag hasBadCacheExitSite(CodeBlock* profiledBlock, unsigned bytecodeIndex);
+ExitFlag hasBadCacheExitSite(CodeBlock* profiledBlock, BytecodeIndex);
 
 } // namespace JSC
 
