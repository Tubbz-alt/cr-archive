diff a/modules/javafx.web/src/main/native/Source/WebCore/bridge/jni/jsc/BridgeUtils.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bridge/jni/jsc/BridgeUtils.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bridge/jni/jsc/BridgeUtils.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bridge/jni/jsc/BridgeUtils.cpp
@@ -120,11 +120,11 @@
 
 namespace WebCore {
 
 JSGlobalContextRef getGlobalContext(WebCore::ScriptController* scriptController)
 {
-    return toGlobalRef(scriptController->globalObject(WebCore::mainThreadNormalWorld())->globalExec());
+    return toGlobalRef(scriptController->globalObject(WebCore::mainThreadNormalWorld()));
 }
 
 JSStringRef asJSStringRef(JNIEnv *env, jstring str)
 {
     unsigned int slen = env->GetStringLength(str);
@@ -141,12 +141,12 @@
     jobject val,
     jobject accessControlContext)
 {
     if (val == nullptr)
         return JSValueMakeNull(ctx);
-    JSC::ExecState* exec = toJS(ctx);
-    JSC::JSLockHolder lock(exec);
+    JSC::JSGlobalObject* lexicalGlobalObject = toJS(ctx);
+    JSC::JSLockHolder lock(lexicalGlobalObject);
 
     jclass clJSObject = getJSObjectClass(env);
     if (env->IsInstanceOf(val, clJSObject)) {
         static jfieldID fldPeer = env->GetFieldID(clJSObject, "peer", "J");
         static jfieldID fldPeerType = env->GetFieldID(clJSObject, "peer_type", "I");
@@ -160,15 +160,15 @@
             {
                 JSDOMGlobalObject* globalObject = toJSDOMGlobalObject(
                     ((peer_type == com_sun_webkit_dom_JSObject_JS_DOM_WINDOW_OBJECT)
                         ? *static_cast<DOMWindow*>(jlong_to_ptr(peer))->document()
                         : static_cast<Node*>(jlong_to_ptr(peer))->document()),
-                    normalWorld(exec->vm()));
-                return toRef(exec,
+                    normalWorld(lexicalGlobalObject->vm()));
+                return toRef(lexicalGlobalObject,
                     (peer_type == com_sun_webkit_dom_JSObject_JS_DOM_WINDOW_OBJECT)
-                        ? WebCore::toJS(exec, globalObject, static_cast<DOMWindow*>(jlong_to_ptr(peer)))
-                        : WebCore::toJS(exec, globalObject, static_cast<Node*>(jlong_to_ptr(peer))));
+                        ? WebCore::toJS(lexicalGlobalObject, globalObject, static_cast<DOMWindow*>(jlong_to_ptr(peer)))
+                        : WebCore::toJS(lexicalGlobalObject, globalObject, static_cast<Node*>(jlong_to_ptr(peer))));
             }
         }
     }
     jclass clString = getStringClass(env);
     if (env->IsInstanceOf(val, clString)) {
@@ -192,18 +192,18 @@
 
     JLObject valClass(JSC::Bindings::callJNIMethod<jobject>(val, "getClass", "()Ljava/lang/Class;"));
     if (JSC::Bindings::callJNIMethod<jboolean>(valClass, "isArray", "()Z")) {
         JLString className((jstring)JSC::Bindings::callJNIMethod<jobject>(valClass, "getName", "()Ljava/lang/String;"));
         const char* classNameC = JSC::Bindings::getCharactersFromJString(className);
-        JSC::JSValue arr = JSC::Bindings::JavaArray::convertJObjectToArray(exec, val, classNameC, rootObject, accessControlContext);
+        JSC::JSValue arr = JSC::Bindings::JavaArray::convertJObjectToArray(lexicalGlobalObject, val, classNameC, rootObject, accessControlContext);
         JSC::Bindings::releaseCharactersForJString(className, classNameC);
-        return toRef(exec, arr);
+        return toRef(lexicalGlobalObject, arr);
     }
     else {
         // All other Java Object types including java.lang.Character will be wrapped inside JavaInstance.
         RefPtr<JSC::Bindings::JavaInstance> jinstance = JSC::Bindings::JavaInstance::create(val, rootObject, accessControlContext);
-        return toRef(jinstance->createRuntimeObject(exec));
+        return toRef(jinstance->createRuntimeObject(lexicalGlobalObject));
     }
 }
 
 jstring JSValue_to_Java_String(JSValueRef value, JNIEnv* env, JSContextRef ctx)
 {
@@ -219,12 +219,12 @@
     JSValueRef value,
     JNIEnv*,
     JSContextRef ctx,
     JSC::Bindings::RootObject* rootObject)
 {
-    JSC::ExecState* exec = toJS(ctx);
-    return convertValueToJValue(exec, rootObject, toJS(exec, value),
+    JSC::JSGlobalObject* globalObject = toJS(ctx);
+    return convertValueToJValue(globalObject, rootObject, toJS(globalObject, value),
         JSC::Bindings::JavaTypeObject, "java.lang.Object").l;
 }
 
 static void throwJavaException(
     JNIEnv* env,
@@ -280,11 +280,11 @@
     case com_sun_webkit_dom_JSObject_JS_CONTEXT_OBJECT:
         {
             object = static_cast<JSObjectRef>(jlong_to_ptr(peer));
             rootObject = JSC::Bindings::findProtectingRootObject(reinterpret_cast<JSC::JSObject*>(object));
             if (rootObject) {
-                context = toRef(rootObject->globalObject()->globalExec());
+                context = toRef(rootObject->globalObject());
             }
         }
         break;
     case com_sun_webkit_dom_JSObject_JS_DOM_NODE_OBJECT:
     case com_sun_webkit_dom_JSObject_JS_DOM_WINDOW_OBJECT:
@@ -297,17 +297,17 @@
                 return rootObject;
             }
             rootObject = &(frame->script().createRootObject(frame).leakRef());
             if (rootObject) {
                 context = WebCore::getGlobalContext(&frame->script());
-                JSC::ExecState* exec = toJS(context);
-                JSC::JSLockHolder lock(exec);
+                JSC::JSGlobalObject* JSGlobalObject = toJS(context);
+                JSC::JSLockHolder lock(JSGlobalObject);
 
-                object = const_cast<JSObjectRef>(toRef(exec,
+                object = const_cast<JSObjectRef>(toRef(JSGlobalObject,
                     (peer_type == com_sun_webkit_dom_JSObject_JS_DOM_WINDOW_OBJECT)
-                    ? WebCore::toJS(exec, static_cast<WebCore::JSDOMGlobalObject *>(rootObject->globalObject()), static_cast<WebCore::DOMWindow*>(jlong_to_ptr(peer)))
-                    : WebCore::toJS(exec, static_cast<WebCore::JSDOMGlobalObject *>(rootObject->globalObject()), static_cast<WebCore::Node*>(jlong_to_ptr(peer)))));
+                    ? WebCore::toJS(JSGlobalObject, static_cast<WebCore::JSDOMGlobalObject *>(rootObject->globalObject()), static_cast<WebCore::DOMWindow*>(jlong_to_ptr(peer)))
+                    : WebCore::toJS(JSGlobalObject, static_cast<WebCore::JSDOMGlobalObject *>(rootObject->globalObject()), static_cast<WebCore::Node*>(jlong_to_ptr(peer)))));
 
             }
         }
         break;
     };
@@ -438,14 +438,14 @@
     JSContextRef ctx;
     if (!checkJSPeer(peer, peer_type, object, ctx)) {
         return nullptr;
     }
 
-    JSC::ExecState* exec = toJS(ctx);
-    JSC::JSLockHolder lock(exec);
+    JSC::JSGlobalObject* JSGlobalObject = toJS(ctx);
+    JSC::JSLockHolder lock(JSGlobalObject);
 
-    return toJS(object)->toString(exec)->value(exec)
+    return toJS(object)->toString(JSGlobalObject)->value(JSGlobalObject)
         .toJavaString(env).releaseLocal();
 }
 
 JNIEXPORT jobject JNICALL Java_com_sun_webkit_dom_JSObject_callImpl
   (JNIEnv *env, jclass, jlong peer, jint peer_type, jstring methodName, jobjectArray args, jobject accessControlContext)
