diff a/modules/javafx.web/src/main/native/Source/WebCore/html/CustomPaintCanvas.h b/modules/javafx.web/src/main/native/Source/WebCore/html/CustomPaintCanvas.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/CustomPaintCanvas.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/CustomPaintCanvas.h
@@ -27,22 +27,23 @@
 
 #if ENABLE(CSS_PAINTING_API)
 
 #include "AffineTransform.h"
 #include "CanvasBase.h"
+#include "ContextDestructionObserver.h"
 #include "EventTarget.h"
 #include "ExceptionOr.h"
 #include "ImageBuffer.h"
 #include "IntSize.h"
-#include "JSDOMPromiseDeferred.h"
 #include "ScriptWrappable.h"
 #include <wtf/Forward.h>
 #include <wtf/RefCounted.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
+class CanvasRenderingContext;
 class ImageBitmap;
 class PaintRenderingContext2D;
 
 class CustomPaintCanvas final : public RefCounted<CustomPaintCanvas>, public CanvasBase, private ContextDestructionObserver {
     WTF_MAKE_FAST_ALLOCATED;
@@ -50,24 +51,16 @@
 
     static Ref<CustomPaintCanvas> create(ScriptExecutionContext&, unsigned width, unsigned height);
     virtual ~CustomPaintCanvas();
     bool isCustomPaintCanvas() const final { return true; }
 
-    unsigned width() const final;
-    void setWidth(unsigned);
-    unsigned height() const final;
-    void setHeight(unsigned);
-
-    const IntSize& size() const final;
-    void setSize(const IntSize&) final;
-
     ExceptionOr<RefPtr<PaintRenderingContext2D>> getContext();
 
+    CanvasRenderingContext* renderingContext() const final { return m_context.get(); }
     GraphicsContext* drawingContext() const final;
     GraphicsContext* existingDrawingContext() const final;
 
-    void makeRenderingResultsAvailable() final;
     void didDraw(const FloatRect&) final { }
 
     AffineTransform baseTransform() const final { ASSERT(m_destinationGraphicsContext && m_copiedBuffer); return m_copiedBuffer->baseTransform(); }
     Image* copiedImage() const final;
     void replayDisplayList(GraphicsContext*) const;
@@ -80,12 +73,12 @@
 
     void refCanvasBase() final { ref(); }
     void derefCanvasBase() final { deref(); }
     ScriptExecutionContext* canvasBaseScriptExecutionContext() const final { return ContextDestructionObserver::scriptExecutionContext(); }
 
+    std::unique_ptr<CanvasRenderingContext> m_context;
     mutable GraphicsContext* m_destinationGraphicsContext = nullptr;
-    mutable IntSize m_size;
     mutable std::unique_ptr<ImageBuffer> m_copiedBuffer;
     mutable RefPtr<Image> m_copiedImage;
 };
 
 }
