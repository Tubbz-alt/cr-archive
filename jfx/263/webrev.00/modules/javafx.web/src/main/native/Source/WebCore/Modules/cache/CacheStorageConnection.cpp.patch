diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/CacheStorageConnection.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/CacheStorageConnection.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/CacheStorageConnection.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/CacheStorageConnection.cpp
@@ -31,27 +31,27 @@
 #include <wtf/RandomNumber.h>
 
 namespace WebCore {
 using namespace WebCore::DOMCacheEngine;
 
-static inline uint64_t formDataSize(const FormData& formData, PAL::SessionID sessionID)
+static inline uint64_t formDataSize(const FormData& formData)
 {
     if (isMainThread())
-        return formData.lengthInBytes(sessionID);
+        return formData.lengthInBytes();
 
     uint64_t resultSize;
-    callOnMainThreadAndWait([sessionID, formData = formData.isolatedCopy(), &resultSize] {
-        resultSize = formData->lengthInBytes(sessionID);
+    callOnMainThreadAndWait([formData = formData.isolatedCopy(), &resultSize] {
+        resultSize = formData->lengthInBytes();
     });
     return resultSize;
 }
 
 uint64_t CacheStorageConnection::computeRealBodySize(const DOMCacheEngine::ResponseBody& body)
 {
     uint64_t result = 0;
     WTF::switchOn(body, [&] (const Ref<FormData>& formData) {
-        result = formDataSize(formData, sessionID());
+        result = formDataSize(formData);
     }, [&] (const Ref<SharedBuffer>& buffer) {
         result = buffer->size();
     }, [] (const std::nullptr_t&) {
     });
     return result;
