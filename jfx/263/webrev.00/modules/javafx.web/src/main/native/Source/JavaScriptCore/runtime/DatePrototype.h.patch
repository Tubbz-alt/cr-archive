diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DatePrototype.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DatePrototype.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DatePrototype.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DatePrototype.h
@@ -1,8 +1,8 @@
 /*
  *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
- *  Copyright (C) 2008 Apple Inc. All rights reserved.
+ *  Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Lesser General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -30,11 +30,11 @@
 private:
     DatePrototype(VM&, Structure*);
 
 public:
     typedef JSNonFinalObject Base;
-    static const unsigned StructureFlags = Base::StructureFlags | HasStaticPropertyTable;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | HasStaticPropertyTable;
 
     static DatePrototype* create(VM& vm, JSGlobalObject* globalObject, Structure* structure)
     {
         DatePrototype* prototype = new (NotNull, allocateCell<DatePrototype>(vm.heap)) DatePrototype(vm, structure);
         prototype->finishCreation(vm, globalObject);
@@ -50,8 +50,8 @@
 
 protected:
     void finishCreation(VM&, JSGlobalObject*);
 };
 
-EncodedJSValue JSC_HOST_CALL dateProtoFuncGetTime(ExecState*);
+EncodedJSValue JSC_HOST_CALL dateProtoFuncGetTime(JSGlobalObject*, CallFrame*);
 
 } // namespace JSC
