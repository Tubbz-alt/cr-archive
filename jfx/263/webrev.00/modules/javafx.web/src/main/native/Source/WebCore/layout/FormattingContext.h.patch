diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/FormattingContext.h b/modules/javafx.web/src/main/native/Source/WebCore/layout/FormattingContext.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/FormattingContext.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/FormattingContext.h
@@ -25,127 +25,200 @@
 
 #pragma once
 
 #if ENABLE(LAYOUT_FORMATTING_CONTEXT)
 
-#include "DisplayBox.h"
+#include "LayoutContainer.h"
+#include "LayoutUnit.h"
+#include "LayoutUnits.h"
 #include <wtf/IsoMalloc.h>
 #include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
-class LayoutPoint;
-class LayoutUnit;
+namespace Display {
+class Box;
+}
+class LayoutSize;
+struct Length;
 
 namespace Layout {
 
 class Box;
+struct ComputedHorizontalMargin;
+struct ComputedVerticalMargin;
 class Container;
+struct ContentHeightAndMargin;
+struct ContentWidthAndMargin;
+struct Edges;
 class FormattingState;
+struct HorizontalGeometry;
+class InvalidationState;
 class LayoutState;
+struct OverrideHorizontalValues;
+struct OverrideVerticalValues;
+struct VerticalGeometry;
 
 class FormattingContext {
     WTF_MAKE_ISO_ALLOCATED(FormattingContext);
 public:
-    FormattingContext(const Box& formattingContextRoot, FormattingState&);
+    FormattingContext(const Container& formattingContextRoot, FormattingState&);
     virtual ~FormattingContext();
 
-    virtual void layout() const = 0;
-    void layoutOutOfFlowContent() const;
+    virtual void layoutInFlowContent(InvalidationState&, const HorizontalConstraints&, const VerticalConstraints&) = 0;
+    void layoutOutOfFlowContent(InvalidationState&, const HorizontalConstraints&, const VerticalConstraints&);
 
     struct IntrinsicWidthConstraints {
         void expand(LayoutUnit horizontalValue);
         IntrinsicWidthConstraints& operator+=(const IntrinsicWidthConstraints&);
 
         LayoutUnit minimum;
         LayoutUnit maximum;
     };
-    virtual IntrinsicWidthConstraints computedIntrinsicWidthConstraints() const = 0;
-
-    static Display::Box mapBoxToAncestor(const LayoutState&, const Box&, const Container& ancestor);
-    static LayoutUnit mapTopToAncestor(const LayoutState&, const Box&, const Container& ancestor);
-    static LayoutUnit mapLeftToAncestor(const LayoutState&, const Box&, const Container& ancestor);
-    static LayoutUnit mapRightToAncestor(const LayoutState&, const Box&, const Container& ancestor);
-    static Point mapPointToAncestor(const LayoutState&, Point, const Container& from, const Container& to);
-    static Point mapPointToDescendent(const LayoutState&, Point, const Container& from, const Container& to);
+    virtual IntrinsicWidthConstraints computedIntrinsicWidthConstraints() = 0;
+
+    LayoutUnit mapTopToFormattingContextRoot(const Box&) const;
+    LayoutUnit mapLeftToFormattingContextRoot(const Box&) const;
+    LayoutUnit mapRightToFormattingContextRoot(const Box&) const;
+
+    bool isBlockFormattingContext() const { return root().establishesBlockFormattingContext(); }
+    bool isInlineFormattingContext() const { return root().establishesInlineFormattingContext(); }
+    bool isTableFormattingContext() const { return root().establishesTableFormattingContext(); }
+
+    enum class EscapeReason {
+        NeedsGeometryFromEstablishedFormattingContext,
+        OutOfFlowBoxNeedsInFlowGeometry,
+        FloatBoxNeedsToBeInAbsoluteCoordinates,
+        FindFixedHeightAncestorQuirk,
+        BodyStrechesToViewportQuirk,
+        StrokeOverflowNeedsViewportGeometry,
+        TableNeedsAccessToTableWrapper
+    };
+    const Display::Box& geometryForBox(const Box&, Optional<EscapeReason> = WTF::nullopt) const;
 
 protected:
     using LayoutQueue = Vector<const Box*>;
 
+    const Container& root() const { return *m_root; }
     LayoutState& layoutState() const;
-    FormattingState& formattingState() const { return m_formattingState; }
-    const Box& root() const { return *m_root; }
+    const FormattingState& formattingState() const { return m_formattingState; }
+    FormattingState& formattingState() { return m_formattingState; }
 
-    void computeBorderAndPadding(const Box&, Optional<UsedHorizontalValues> = WTF::nullopt) const;
+    void computeBorderAndPadding(const Box&, const HorizontalConstraints&);
 
 #ifndef NDEBUG
     virtual void validateGeometryConstraintsAfterLayout() const;
 #endif
 
     // This class implements generic positioning and sizing.
     class Geometry {
     public:
-        static VerticalGeometry outOfFlowVerticalGeometry(const LayoutState&, const Box&, UsedVerticalValues);
-        static HorizontalGeometry outOfFlowHorizontalGeometry(LayoutState&, const Box&, UsedHorizontalValues);
+        VerticalGeometry outOfFlowVerticalGeometry(const Box&, const HorizontalConstraints&, const VerticalConstraints&, const OverrideVerticalValues&) const;
+        HorizontalGeometry outOfFlowHorizontalGeometry(const Box&, const HorizontalConstraints&, const OverrideHorizontalValues&);
+
+        ContentHeightAndMargin floatingHeightAndMargin(const Box&, const HorizontalConstraints&, const OverrideVerticalValues&) const;
+        ContentWidthAndMargin floatingWidthAndMargin(const Box&, const HorizontalConstraints&, const OverrideHorizontalValues&);
+
+        ContentHeightAndMargin inlineReplacedHeightAndMargin(const Box&, const HorizontalConstraints&, Optional<VerticalConstraints>, const OverrideVerticalValues&) const;
+        ContentWidthAndMargin inlineReplacedWidthAndMargin(const Box&, const HorizontalConstraints&, const OverrideHorizontalValues&) const;
 
-        static HeightAndMargin floatingHeightAndMargin(const LayoutState&, const Box&, UsedVerticalValues, UsedHorizontalValues);
-        static WidthAndMargin floatingWidthAndMargin(LayoutState&, const Box&, UsedHorizontalValues);
+        LayoutSize inFlowPositionedPositionOffset(const Box&, const HorizontalConstraints&) const;
 
-        static HeightAndMargin inlineReplacedHeightAndMargin(const LayoutState&, const Box&, UsedVerticalValues);
-        static WidthAndMargin inlineReplacedWidthAndMargin(const LayoutState&, const Box&, UsedHorizontalValues);
+        ContentHeightAndMargin complicatedCases(const Box&, const HorizontalConstraints&, const OverrideVerticalValues&) const;
+        LayoutUnit shrinkToFitWidth(const Box&, LayoutUnit availableWidth);
 
-        static LayoutSize inFlowPositionedPositionOffset(const LayoutState&, const Box&);
+        Edges computedBorder(const Box&) const;
+        Optional<Edges> computedPadding(const Box&, const HorizontalConstraints&) const;
 
-        static HeightAndMargin complicatedCases(const LayoutState&, const Box&, UsedVerticalValues, UsedHorizontalValues);
-        static LayoutUnit shrinkToFitWidth(LayoutState&, const Box&, UsedHorizontalValues);
+        ComputedHorizontalMargin computedHorizontalMargin(const Box&, const HorizontalConstraints&) const;
+        ComputedVerticalMargin computedVerticalMargin(const Box&, const HorizontalConstraints&) const;
 
-        static Edges computedBorder(const Box&);
-        static Optional<Edges> computedPadding(const Box&, UsedHorizontalValues);
+        Optional<LayoutUnit> computedValueIfNotAuto(const Length& geometryProperty, LayoutUnit containingBlockWidth) const;
+        Optional<LayoutUnit> fixedValue(const Length& geometryProperty) const;
 
-        static ComputedHorizontalMargin computedHorizontalMargin(const Box&, UsedHorizontalValues);
-        static ComputedVerticalMargin computedVerticalMargin(const Box&, UsedHorizontalValues);
+        Optional<LayoutUnit> computedMinHeight(const Box&, Optional<LayoutUnit> containingBlockHeight = WTF::nullopt) const;
+        Optional<LayoutUnit> computedMaxHeight(const Box&, Optional<LayoutUnit> containingBlockHeight = WTF::nullopt) const;
 
-        static Optional<LayoutUnit> computedValueIfNotAuto(const Length& geometryProperty, LayoutUnit containingBlockWidth);
-        static Optional<LayoutUnit> fixedValue(const Length& geometryProperty);
+        Optional<LayoutUnit> computedMinWidth(const Box&, LayoutUnit containingBlockWidth) const;
+        Optional<LayoutUnit> computedMaxWidth(const Box&, LayoutUnit containingBlockWidth) const;
 
-        static Optional<LayoutUnit> computedMinHeight(const LayoutState&, const Box&);
-        static Optional<LayoutUnit> computedMaxHeight(const LayoutState&, const Box&);
+        FormattingContext::IntrinsicWidthConstraints constrainByMinMaxWidth(const Box&, IntrinsicWidthConstraints) const;
 
-        static FormattingContext::IntrinsicWidthConstraints constrainByMinMaxWidth(const Box&, IntrinsicWidthConstraints);
+        LayoutUnit contentHeightForFormattingContextRoot(const Box&) const;
 
-        static LayoutUnit contentHeightForFormattingContextRoot(const LayoutState&, const Box&);
+        static HorizontalConstraints horizontalConstraintsForOutOfFlow(const Display::Box& containingBlockGeometry);
+        static VerticalConstraints verticalConstraintsForOutOfFlow(const Display::Box& containingBlockGeometry);
+        static HorizontalConstraints horizontalConstraintsForInFlow(const Display::Box& containingBlockGeometry);
+        static VerticalConstraints verticalConstraintsForInFlow(const Display::Box& containingBlockGeometry);
 
     protected:
+        friend class FormattingContext;
+        Geometry(const FormattingContext&);
+
         enum class HeightType { Min, Max, Normal };
-        static Optional<LayoutUnit> computedHeightValue(const LayoutState&, const Box&, HeightType);
+        Optional<LayoutUnit> computedHeightValue(const Box&, HeightType, Optional<LayoutUnit> containingBlockHeight) const;
+        Optional<LayoutUnit> computedContentHeight(const Box&, Optional<LayoutUnit> containingBlockHeight = WTF::nullopt) const;
+        Optional<LayoutUnit> computedContentWidth(const Box&, LayoutUnit containingBlockWidth) const;
+
+        const LayoutState& layoutState() const { return m_formattingContext.layoutState(); }
+        LayoutState& layoutState() { return m_formattingContext.layoutState(); }
+        const FormattingContext& formattingContext() const { return m_formattingContext; }
 
     private:
-        static VerticalGeometry outOfFlowReplacedVerticalGeometry(const LayoutState&, const Box&, UsedVerticalValues);
-        static HorizontalGeometry outOfFlowReplacedHorizontalGeometry(const LayoutState&, const Box&, UsedHorizontalValues);
+        VerticalGeometry outOfFlowReplacedVerticalGeometry(const Box&, const HorizontalConstraints&, const VerticalConstraints&, const OverrideVerticalValues&) const;
+        HorizontalGeometry outOfFlowReplacedHorizontalGeometry(const Box&, const HorizontalConstraints&, const OverrideHorizontalValues&) const;
+
+        VerticalGeometry outOfFlowNonReplacedVerticalGeometry(const Box&, const HorizontalConstraints&, const VerticalConstraints&, const OverrideVerticalValues&) const;
+        HorizontalGeometry outOfFlowNonReplacedHorizontalGeometry(const Box&, const HorizontalConstraints&, const OverrideHorizontalValues&);
 
-        static VerticalGeometry outOfFlowNonReplacedVerticalGeometry(const LayoutState&, const Box&, UsedVerticalValues);
-        static HorizontalGeometry outOfFlowNonReplacedHorizontalGeometry(LayoutState&, const Box&, UsedHorizontalValues);
+        ContentHeightAndMargin floatingReplacedHeightAndMargin(const Box&, const HorizontalConstraints&, const OverrideVerticalValues&) const;
+        ContentWidthAndMargin floatingReplacedWidthAndMargin(const Box&, const HorizontalConstraints&, const OverrideHorizontalValues&) const;
 
-        static HeightAndMargin floatingReplacedHeightAndMargin(const LayoutState&, const Box&, UsedVerticalValues);
-        static WidthAndMargin floatingReplacedWidthAndMargin(const LayoutState&, const Box&, UsedHorizontalValues);
+        ContentWidthAndMargin floatingNonReplacedWidthAndMargin(const Box&, const HorizontalConstraints&, const OverrideHorizontalValues&);
 
-        static WidthAndMargin floatingNonReplacedWidthAndMargin(LayoutState&, const Box&, UsedHorizontalValues);
+        LayoutUnit staticVerticalPositionForOutOfFlowPositioned(const Box&, const VerticalConstraints&) const;
+        LayoutUnit staticHorizontalPositionForOutOfFlowPositioned(const Box&, const HorizontalConstraints&) const;
+
+        const FormattingContext& m_formattingContext;
     };
+    FormattingContext::Geometry geometry() const { return Geometry(*this); }
 
     class Quirks {
     public:
-        static LayoutUnit heightValueOfNearestContainingBlockWithFixedHeight(const LayoutState&, const Box&);
+        LayoutUnit heightValueOfNearestContainingBlockWithFixedHeight(const Box&);
+
+    protected:
+        friend class FormattingContext;
+        Quirks(const FormattingContext&);
+
+        const LayoutState& layoutState() const { return m_formattingContext.layoutState(); }
+        LayoutState& layoutState() { return m_formattingContext.layoutState(); }
+        const FormattingContext& formattingContext() const { return m_formattingContext; }
+
+        const FormattingContext& m_formattingContext;
     };
+    FormattingContext::Quirks quirks() const { return Quirks(*this); }
 
 private:
-    void computeOutOfFlowVerticalGeometry(const Box&) const;
-    void computeOutOfFlowHorizontalGeometry(const Box&) const;
+    void collectOutOfFlowDescendantsIfNeeded();
+    void computeOutOfFlowVerticalGeometry(const Box&, const HorizontalConstraints&, const VerticalConstraints&);
+    void computeOutOfFlowHorizontalGeometry(const Box&, const HorizontalConstraints&);
 
-    WeakPtr<const Box> m_root;
+    WeakPtr<const Container> m_root;
     FormattingState& m_formattingState;
 };
 
+inline FormattingContext::Geometry::Geometry(const FormattingContext& formattingContext)
+    : m_formattingContext(formattingContext)
+{
+}
+
+inline FormattingContext::Quirks::Quirks(const FormattingContext& formattingContext)
+    : m_formattingContext(formattingContext)
+{
+}
+
 inline void FormattingContext::IntrinsicWidthConstraints::expand(LayoutUnit horizontalValue)
 {
     minimum += horizontalValue;
     maximum += horizontalValue;
 }
@@ -157,6 +230,12 @@
     return *this;
 }
 
 }
 }
+
+#define SPECIALIZE_TYPE_TRAITS_LAYOUT_FORMATTING_CONTEXT(ToValueTypeName, predicate) \
+SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::Layout::ToValueTypeName) \
+    static bool isType(const WebCore::Layout::FormattingContext& formattingContext) { return formattingContext.predicate; } \
+SPECIALIZE_TYPE_TRAITS_END()
+
 #endif
