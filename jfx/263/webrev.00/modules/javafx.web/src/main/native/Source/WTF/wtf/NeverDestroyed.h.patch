diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/NeverDestroyed.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/NeverDestroyed.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/NeverDestroyed.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/NeverDestroyed.h
@@ -98,11 +98,11 @@
     template<typename... Args>
     void construct(Args&&... args)
     {
         ASSERT(!m_isConstructed);
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         m_isConstructed = true;
 #endif
 
         MaybeRelax<T>(new (storagePointer()) T(std::forward<Args>(args)...));
     }
@@ -115,11 +115,11 @@
     operator const T&() const { return *storagePointer(); }
     const T& get() const { return *storagePointer(); }
 
     const T* operator->() const { return storagePointer(); }
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     bool isConstructed() const { return m_isConstructed; }
 #endif
 
 private:
     using PointerType = typename std::remove_const<T>::type*;
@@ -135,11 +135,11 @@
     };
     template<typename PtrType> struct MaybeRelax<PtrType, true> {
         explicit MaybeRelax(PtrType* ptr) { ptr->relaxAdoptionRequirement(); }
     };
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // LazyNeverDestroyed objects are always static, so this variable is initialized to false.
     // It must not be initialized dynamically; that would not be thread safe.
     bool m_isConstructed;
 #endif
 
