diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/layouttree/LayoutReplaced.h b/modules/javafx.web/src/main/native/Source/WebCore/layout/layouttree/LayoutReplaced.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/layouttree/LayoutReplaced.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/layouttree/LayoutReplaced.h
@@ -25,10 +25,11 @@
 
 #pragma once
 
 #if ENABLE(LAYOUT_FORMATTING_CONTEXT)
 
+#include "CachedImage.h"
 #include "LayoutSize.h"
 #include "LayoutUnit.h"
 #include <wtf/IsoMalloc.h>
 #include <wtf/WeakPtr.h>
 
@@ -42,10 +43,13 @@
     WTF_MAKE_ISO_ALLOCATED(Replaced);
 public:
     Replaced(const Box&);
     ~Replaced() = default;
 
+    void setCachedImage(CachedImage& cachedImage) { m_cachedImage = &cachedImage; }
+    CachedImage* cachedImage() const { return m_cachedImage; }
+
     // FIXME: Temporary until after intrinsic size change is tracked internallys.
     void setIntrinsicSize(LayoutSize size) { m_intrinsicSize = size; }
     void setIntrinsicRatio(LayoutUnit ratio) { m_intrinsicRatio = ratio; };
 
     bool hasIntrinsicWidth() const;
@@ -59,10 +63,11 @@
     bool hasAspectRatio() const;
 
     WeakPtr<const Box> m_layoutBox;
     Optional<LayoutSize> m_intrinsicSize;
     Optional<LayoutUnit> m_intrinsicRatio;
+    CachedImage* m_cachedImage { nullptr };
 };
 
 }
 }
 #endif
