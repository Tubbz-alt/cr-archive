diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/VMTraps.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/VMTraps.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/VMTraps.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/VMTraps.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -34,11 +34,12 @@
 #include <wtf/RefPtr.h>
 #include <wtf/StackBounds.h>
 
 namespace JSC {
 
-class ExecState;
+class CallFrame;
+class JSGlobalObject;
 class VM;
 
 class VMTraps {
     typedef uint8_t BitField;
 public:
@@ -49,47 +50,53 @@
     };
 
     enum EventType {
         // Sorted in servicing priority order from highest to lowest.
         NeedDebuggerBreak,
+        NeedShellTimeoutCheck,
         NeedTermination,
         NeedWatchdogCheck,
         NumberOfEventTypes, // This entry must be last in this list.
         Invalid
     };
 
     class Mask {
     public:
         enum AllEventTypes { AllEventTypesTag };
-        Mask(AllEventTypes)
+        constexpr Mask(AllEventTypes)
             : m_mask(std::numeric_limits<BitField>::max())
         { }
-        static Mask allEventTypes() { return Mask(AllEventTypesTag); }
+        static constexpr Mask allEventTypes() { return Mask(AllEventTypesTag); }
+
+        constexpr Mask(const Mask&) = default;
+        constexpr Mask(Mask&&) = default;
 
         template<typename... Arguments>
-        Mask(Arguments... args)
+        constexpr Mask(Arguments... args)
             : m_mask(0)
         {
             init(args...);
         }
 
         BitField bits() const { return m_mask; }
 
     private:
         template<typename... Arguments>
-        void init(EventType eventType, Arguments... args)
+        constexpr void init(EventType eventType, Arguments... args)
         {
             ASSERT(eventType < NumberOfEventTypes);
             m_mask |= (1 << eventType);
             init(args...);
         }
 
-        void init() { }
+        constexpr void init() { }
 
         BitField m_mask;
     };
 
+    static constexpr Mask interruptingTraps() { return Mask(NeedShellTimeoutCheck, NeedTermination, NeedWatchdogCheck); }
+
     ~VMTraps();
     VMTraps();
 
     void willDestroyVM();
 
@@ -103,11 +110,11 @@
             invalidateCodeBlocksOnStack();
     }
 
     JS_EXPORT_PRIVATE void fireTrap(EventType);
 
-    void handleTraps(ExecState*, VMTraps::Mask);
+    void handleTraps(JSGlobalObject*, CallFrame*, VMTraps::Mask);
 
     void tryInstallTrapBreakpoints(struct SignalContext&, StackBounds);
 
 private:
     VM& vm() const;
@@ -133,18 +140,19 @@
 #if ENABLE(SIGNAL_BASED_VM_TRAPS)
     class SignalSender;
     friend class SignalSender;
 
     void invalidateCodeBlocksOnStack();
-    void invalidateCodeBlocksOnStack(ExecState* topCallFrame);
-    void invalidateCodeBlocksOnStack(Locker<Lock>& codeBlockSetLocker, ExecState* topCallFrame);
+    void invalidateCodeBlocksOnStack(CallFrame* topCallFrame);
+    void invalidateCodeBlocksOnStack(Locker<Lock>& codeBlockSetLocker, CallFrame* topCallFrame);
 
     void addSignalSender(SignalSender*);
     void removeSignalSender(SignalSender*);
 #else
+    friend class SignalSender;
     void invalidateCodeBlocksOnStack() { }
-    void invalidateCodeBlocksOnStack(ExecState*) { }
+    void invalidateCodeBlocksOnStack(CallFrame*) { }
 #endif
 
     Box<Lock> m_lock;
     Ref<AutomaticThreadCondition> m_condition;
     union {
@@ -157,9 +165,8 @@
 #if ENABLE(SIGNAL_BASED_VM_TRAPS)
     RefPtr<SignalSender> m_signalSender;
 #endif
 
     friend class LLIntOffsetsExtractor;
-    friend class SignalSender;
 };
 
 } // namespace JSC
