diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadStatistics.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadStatistics.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadStatistics.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadStatistics.cpp
@@ -93,10 +93,11 @@
     // Top frame stats
     encodeHashSet(encoder, "topFrameUniqueRedirectsTo"_s, "domain"_s, topFrameUniqueRedirectsTo);
     encodeHashSet(encoder, "topFrameUniqueRedirectsFrom"_s, "domain"_s, topFrameUniqueRedirectsFrom);
     encodeHashSet(encoder, "topFrameLinkDecorationsFrom"_s, "domain", topFrameLinkDecorationsFrom);
     encoder.encodeBool("gotLinkDecorationFromPrevalentResource"_s, gotLinkDecorationFromPrevalentResource);
+    encodeHashSet(encoder, "topFrameLoadedThirdPartyScripts"_s, "domain", topFrameLoadedThirdPartyScripts);
 
     // Subframe stats
     encodeHashSet(encoder, "subframeUnderTopFrameDomains"_s, "domain"_s, subframeUnderTopFrameDomains);
 
     // Subresource stats
@@ -223,10 +224,17 @@
         decodeHashSet(decoder, "topFrameLinkDecorationsFrom", "domain", topFrameLinkDecorationsFrom);
         if (!decoder.decodeBool("gotLinkDecorationFromPrevalentResource", gotLinkDecorationFromPrevalentResource))
             return false;
     }
 
+    if (modelVersion >= 17) {
+        HashCountedSet<RegistrableDomain> topFrameLoadedThirdPartyScriptsCounted;
+        decodeHashCountedSet(decoder, "topFrameLoadedThirdPartyScripts", topFrameLoadedThirdPartyScriptsCounted);
+        for (auto& domain : topFrameLoadedThirdPartyScriptsCounted.values())
+            topFrameLoadedThirdPartyScripts.add(domain);
+    }
+
     // Subframe stats
     if (modelVersion >= 15)
         decodeHashSet(decoder, "subframeUnderTopFrameDomains", "domain", subframeUnderTopFrameDomains);
     else if (modelVersion >= 14) {
         HashCountedSet<RegistrableDomain> subframeUnderTopFrameDomainsCounted;
@@ -403,25 +411,30 @@
         builder.append('\n');
     }
 }
 #endif
 
+static bool hasHadRecentUserInteraction(WTF::Seconds interactionTimeSeconds)
+{
+    return interactionTimeSeconds > Seconds(0) && WallTime::now().secondsSinceEpoch() - interactionTimeSeconds < 24_h;
+}
+
 String ResourceLoadStatistics::toString() const
 {
     StringBuilder builder;
     builder.appendLiteral("Registrable domain: ");
     builder.append(registrableDomain.string());
     builder.append('\n');
-    builder.appendLiteral("    lastSeen: ");
-    builder.appendFixedPrecisionNumber(lastSeen.secondsSinceEpoch().value());
-    builder.append('\n');
 
     // User interaction
     appendBoolean(builder, "hadUserInteraction", hadUserInteraction);
     builder.append('\n');
     builder.appendLiteral("    mostRecentUserInteraction: ");
-    builder.appendFixedPrecisionNumber(mostRecentUserInteractionTime.secondsSinceEpoch().value());
+    if (hasHadRecentUserInteraction(mostRecentUserInteractionTime.secondsSinceEpoch()))
+        builder.appendLiteral("within 24 hours");
+    else
+        builder.appendLiteral("-1");
     builder.append('\n');
     appendBoolean(builder, "grandfathered", grandfathered);
     builder.append('\n');
 
     // Storage access
@@ -430,10 +443,12 @@
     // Top frame stats
     appendHashSet(builder, "topFrameUniqueRedirectsTo", topFrameUniqueRedirectsTo);
     appendHashSet(builder, "topFrameUniqueRedirectsFrom", topFrameUniqueRedirectsFrom);
     appendHashSet(builder, "topFrameLinkDecorationsFrom", topFrameLinkDecorationsFrom);
     appendBoolean(builder, "gotLinkDecorationFromPrevalentResource", gotLinkDecorationFromPrevalentResource);
+    builder.append('\n');
+    appendHashSet(builder, "topFrameLoadedThirdPartyScripts", topFrameLoadedThirdPartyScripts);
 
     // Subframe stats
     appendHashSet(builder, "subframeUnderTopFrameDomains", subframeUnderTopFrameDomains);
 
     // Subresource stats
@@ -506,10 +521,11 @@
     // Top frame stats
     mergeHashSet(topFrameUniqueRedirectsTo, other.topFrameUniqueRedirectsTo);
     mergeHashSet(topFrameUniqueRedirectsFrom, other.topFrameUniqueRedirectsFrom);
     mergeHashSet(topFrameLinkDecorationsFrom, other.topFrameLinkDecorationsFrom);
     gotLinkDecorationFromPrevalentResource |= other.gotLinkDecorationFromPrevalentResource;
+    mergeHashSet(topFrameLoadedThirdPartyScripts, other.topFrameLoadedThirdPartyScripts);
 
     // Subframe stats
     mergeHashSet(subframeUnderTopFrameDomains, other.subframeUnderTopFrameDomains);
 
     // Subresource stats
