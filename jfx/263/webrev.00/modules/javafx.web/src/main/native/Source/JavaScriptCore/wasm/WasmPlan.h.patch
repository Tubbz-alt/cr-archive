diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmPlan.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmPlan.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmPlan.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmPlan.h
@@ -30,10 +30,11 @@
 #include "CompilationResult.h"
 #include "WasmB3IRGenerator.h"
 #include "WasmEmbedder.h"
 #include "WasmModuleInformation.h"
 #include <wtf/Bag.h>
+#include <wtf/CrossThreadCopier.h>
 #include <wtf/SharedTask.h>
 #include <wtf/ThreadSafeRefCounted.h>
 #include <wtf/Vector.h>
 
 namespace JSC {
@@ -48,11 +49,10 @@
 public:
     typedef void CallbackType(Plan&);
     using CompletionTask = RefPtr<SharedTask<CallbackType>>;
 
     static CompletionTask dontFinalize() { return createSharedTask<CallbackType>([](Plan&) { }); }
-    Plan(Context*, Ref<ModuleInformation>, CompletionTask&&, CreateEmbedderWrapper&&, ThrowWasmException);
     Plan(Context*, Ref<ModuleInformation>, CompletionTask&&);
 
     // Note: This constructor should only be used if you are not actually building a module e.g. validation/function tests
     JS_EXPORT_PRIVATE Plan(Context*, CompletionTask&&);
     virtual JS_EXPORT_PRIVATE ~Plan();
@@ -62,13 +62,13 @@
     void addCompletionTask(Context*, CompletionTask&&);
 
     void setMode(MemoryMode mode) { m_mode = mode; }
     MemoryMode mode() const { return m_mode; }
 
-    const String& errorMessage() const { return m_errorMessage; }
+    String errorMessage() const { return crossThreadCopy(m_errorMessage); }
 
-    bool WARN_UNUSED_RETURN failed() const { return !errorMessage().isNull(); }
+    bool WARN_UNUSED_RETURN failed() const { return !m_errorMessage.isNull(); }
     virtual bool hasWork() const = 0;
     enum CompilationEffort { All, Partial };
     virtual void work(CompilationEffort = All) = 0;
     virtual bool multiThreaded() const = 0;
 
@@ -85,13 +85,10 @@
 
     Ref<ModuleInformation> m_moduleInformation;
 
     Vector<std::pair<Context*, CompletionTask>, 1> m_completionTasks;
 
-    CreateEmbedderWrapper m_createEmbedderWrapper;
-    ThrowWasmException m_throwWasmException { nullptr };
-
     String m_errorMessage;
     MemoryMode m_mode { MemoryMode::BoundsChecking };
     Lock m_lock;
     Condition m_completed;
 };
