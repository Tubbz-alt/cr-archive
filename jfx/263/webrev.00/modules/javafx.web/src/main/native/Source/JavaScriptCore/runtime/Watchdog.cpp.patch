diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Watchdog.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Watchdog.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Watchdog.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Watchdog.cpp
@@ -30,12 +30,10 @@
 #include <wtf/CPUTime.h>
 #include <wtf/MathExtras.h>
 
 namespace JSC {
 
-const Seconds Watchdog::noTimeLimit { Seconds::infinity() };
-
 Watchdog::Watchdog(VM* vm)
     : m_vm(vm)
     , m_timeLimit(noTimeLimit)
     , m_cpuDeadline(noTimeLimit)
     , m_deadline(MonotonicTime::infinity())
@@ -58,11 +56,11 @@
 
     if (m_hasEnteredVM && hasTimeLimit())
         startTimer(m_timeLimit);
 }
 
-bool Watchdog::shouldTerminate(ExecState* exec)
+bool Watchdog::shouldTerminate(JSGlobalObject* globalObject)
 {
     ASSERT(m_vm->currentThreadIsHoldingAPILock());
     if (MonotonicTime::now() < m_deadline)
         return false; // Just a stale timer firing. Nothing to do.
 
@@ -81,11 +79,11 @@
     // call setTimeLimit() which will try to lock as well.
 
     // If m_callback is not set, then we terminate by default.
     // Else, we let m_callback decide if we should terminate or not.
     bool needsTermination = !m_callback
-        || m_callback(exec, m_callbackData1, m_callbackData2);
+        || m_callback(globalObject, m_callbackData1, m_callbackData2);
     if (needsTermination)
         return true;
 
     // If we get here, then the callback above did not want to terminate execution. As a
     // result, the callback may have done one of the following:
