diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSDataViewPrototype.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSDataViewPrototype.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSDataViewPrototype.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSDataViewPrototype.cpp
@@ -59,29 +59,29 @@
   byteLength            dataViewProtoGetterByteLength        DontEnum|Accessor       0
   byteOffset            dataViewProtoGetterByteOffset        DontEnum|Accessor       0
 @end
 */
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetInt8(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetInt16(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetInt32(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetUint8(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetUint16(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetUint32(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetFloat32(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetFloat64(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetInt8(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetInt16(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetInt32(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetUint8(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetUint16(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetUint32(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetFloat32(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetFloat64(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoGetterBuffer(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoGetterByteLength(ExecState*);
-EncodedJSValue JSC_HOST_CALL dataViewProtoGetterByteOffset(ExecState*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetInt8(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetInt16(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetInt32(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetUint8(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetUint16(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetUint32(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetFloat32(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetFloat64(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetInt8(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetInt16(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetInt32(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetUint8(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetUint16(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetUint32(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetFloat32(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetFloat64(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoGetterBuffer(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoGetterByteLength(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL dataViewProtoGetterByteOffset(JSGlobalObject*, CallFrame*);
 
 }
 
 #include "JSDataViewPrototype.lut.h"
 
@@ -107,43 +107,43 @@
 }
 
 void JSDataViewPrototype::finishCreation(JSC::VM& vm)
 {
     Base::finishCreation(vm);
-    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsString(vm, "DataView"), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
+    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsNontrivialString(vm, "DataView"_s), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
 }
 
 Structure* JSDataViewPrototype::createStructure(
     VM& vm, JSGlobalObject* globalObject, JSValue prototype)
 {
     return Structure::create(
         vm, globalObject, prototype, TypeInfo(ObjectType, StructureFlags), info());
 }
 
 template<typename Adaptor>
-EncodedJSValue getData(ExecState* exec)
+EncodedJSValue getData(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    JSDataView* dataView = jsDynamicCast<JSDataView*>(vm, exec->thisValue());
+    JSDataView* dataView = jsDynamicCast<JSDataView*>(vm, callFrame->thisValue());
     if (!dataView)
-        return throwVMTypeError(exec, scope, "Receiver of DataView method must be a DataView"_s);
+        return throwVMTypeError(globalObject, scope, "Receiver of DataView method must be a DataView"_s);
 
-    unsigned byteOffset = exec->argument(0).toIndex(exec, "byteOffset");
+    unsigned byteOffset = callFrame->argument(0).toIndex(globalObject, "byteOffset");
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
     bool littleEndian = false;
     unsigned elementSize = sizeof(typename Adaptor::Type);
-    if (elementSize > 1 && exec->argumentCount() >= 2) {
-        littleEndian = exec->uncheckedArgument(1).toBoolean(exec);
+    if (elementSize > 1 && callFrame->argumentCount() >= 2) {
+        littleEndian = callFrame->uncheckedArgument(1).toBoolean(globalObject);
         RETURN_IF_EXCEPTION(scope, encodedJSValue());
     }
 
     unsigned byteLength = dataView->length();
     if (elementSize > byteLength || byteOffset > byteLength - elementSize)
-        return throwVMError(exec, scope, createRangeError(exec, "Out of bounds access"_s));
+        return throwVMError(globalObject, scope, createRangeError(globalObject, "Out of bounds access"_s));
 
     const unsigned dataSize = sizeof(typename Adaptor::Type);
     union {
         typename Adaptor::Type value;
         uint8_t rawBytes[dataSize];
@@ -161,41 +161,41 @@
 
     return JSValue::encode(Adaptor::toJSValue(u.value));
 }
 
 template<typename Adaptor>
-EncodedJSValue setData(ExecState* exec)
+EncodedJSValue setData(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    JSDataView* dataView = jsDynamicCast<JSDataView*>(vm, exec->thisValue());
+    JSDataView* dataView = jsDynamicCast<JSDataView*>(vm, callFrame->thisValue());
     if (!dataView)
-        return throwVMTypeError(exec, scope, "Receiver of DataView method must be a DataView"_s);
+        return throwVMTypeError(globalObject, scope, "Receiver of DataView method must be a DataView"_s);
 
-    unsigned byteOffset = exec->argument(0).toIndex(exec, "byteOffset");
+    unsigned byteOffset = callFrame->argument(0).toIndex(globalObject, "byteOffset");
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
     const unsigned dataSize = sizeof(typename Adaptor::Type);
     union {
         typename Adaptor::Type value;
         uint8_t rawBytes[dataSize];
     } u;
 
-    u.value = toNativeFromValue<Adaptor>(exec, exec->argument(1));
+    u.value = toNativeFromValue<Adaptor>(globalObject, callFrame->argument(1));
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
     bool littleEndian = false;
     unsigned elementSize = sizeof(typename Adaptor::Type);
-    if (elementSize > 1 && exec->argumentCount() >= 3) {
-        littleEndian = exec->uncheckedArgument(2).toBoolean(exec);
+    if (elementSize > 1 && callFrame->argumentCount() >= 3) {
+        littleEndian = callFrame->uncheckedArgument(2).toBoolean(globalObject);
         RETURN_IF_EXCEPTION(scope, encodedJSValue());
     }
 
     unsigned byteLength = dataView->length();
     if (elementSize > byteLength || byteOffset > byteLength - elementSize)
-        return throwVMError(exec, scope, createRangeError(exec, "Out of bounds access"_s));
+        return throwVMError(globalObject, scope, createRangeError(globalObject, "Out of bounds access"_s));
 
     uint8_t* dataPtr = static_cast<uint8_t*>(dataView->vector()) + byteOffset;
 
     if (needToFlipBytesIfLittleEndian(littleEndian)) {
         for (unsigned i = dataSize; i--;)
@@ -208,123 +208,123 @@
     return JSValue::encode(jsUndefined());
 }
 
 IGNORE_CLANG_WARNINGS_BEGIN("missing-prototypes")
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoGetterBuffer(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoGetterBuffer(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    JSDataView* view = jsDynamicCast<JSDataView*>(vm, exec->thisValue());
+    JSDataView* view = jsDynamicCast<JSDataView*>(vm, callFrame->thisValue());
     if (!view)
-        return throwVMTypeError(exec, scope, "DataView.prototype.buffer expects |this| to be a DataView object");
+        return throwVMTypeError(globalObject, scope, "DataView.prototype.buffer expects |this| to be a DataView object");
 
-    return JSValue::encode(view->possiblySharedJSBuffer(exec));
+    return JSValue::encode(view->possiblySharedJSBuffer(globalObject));
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoGetterByteLength(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoGetterByteLength(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    JSDataView* view = jsDynamicCast<JSDataView*>(vm, exec->thisValue());
+    JSDataView* view = jsDynamicCast<JSDataView*>(vm, callFrame->thisValue());
     if (!view)
-        return throwVMTypeError(exec, scope, "DataView.prototype.buffer expects |this| to be a DataView object");
+        return throwVMTypeError(globalObject, scope, "DataView.prototype.buffer expects |this| to be a DataView object");
 
     return JSValue::encode(jsNumber(view->length()));
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoGetterByteOffset(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoGetterByteOffset(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    JSDataView* view = jsDynamicCast<JSDataView*>(vm, exec->thisValue());
+    JSDataView* view = jsDynamicCast<JSDataView*>(vm, callFrame->thisValue());
     if (!view)
-        return throwVMTypeError(exec, scope, "DataView.prototype.buffer expects |this| to be a DataView object");
+        return throwVMTypeError(globalObject, scope, "DataView.prototype.buffer expects |this| to be a DataView object");
 
     return JSValue::encode(jsNumber(view->byteOffset()));
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetInt8(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetInt8(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return getData<Int8Adaptor>(exec);
+    return getData<Int8Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetInt16(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetInt16(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return getData<Int16Adaptor>(exec);
+    return getData<Int16Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetInt32(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetInt32(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return getData<Int32Adaptor>(exec);
+    return getData<Int32Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetUint8(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetUint8(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return getData<Uint8Adaptor>(exec);
+    return getData<Uint8Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetUint16(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetUint16(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return getData<Uint16Adaptor>(exec);
+    return getData<Uint16Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetUint32(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetUint32(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return getData<Uint32Adaptor>(exec);
+    return getData<Uint32Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetFloat32(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetFloat32(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return getData<Float32Adaptor>(exec);
+    return getData<Float32Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetFloat64(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncGetFloat64(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return getData<Float64Adaptor>(exec);
+    return getData<Float64Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetInt8(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetInt8(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return setData<Int8Adaptor>(exec);
+    return setData<Int8Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetInt16(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetInt16(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return setData<Int16Adaptor>(exec);
+    return setData<Int16Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetInt32(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetInt32(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return setData<Int32Adaptor>(exec);
+    return setData<Int32Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetUint8(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetUint8(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return setData<Uint8Adaptor>(exec);
+    return setData<Uint8Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetUint16(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetUint16(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return setData<Uint16Adaptor>(exec);
+    return setData<Uint16Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetUint32(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetUint32(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return setData<Uint32Adaptor>(exec);
+    return setData<Uint32Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetFloat32(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetFloat32(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return setData<Float32Adaptor>(exec);
+    return setData<Float32Adaptor>(globalObject, callFrame);
 }
 
-EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetFloat64(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL dataViewProtoFuncSetFloat64(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return setData<Float64Adaptor>(exec);
+    return setData<Float64Adaptor>(globalObject, callFrame);
 }
 IGNORE_CLANG_WARNINGS_END
 
 } // namespace JSC
