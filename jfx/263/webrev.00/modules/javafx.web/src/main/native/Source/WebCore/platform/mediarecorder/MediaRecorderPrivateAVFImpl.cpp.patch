diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediarecorder/MediaRecorderPrivateAVFImpl.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediarecorder/MediaRecorderPrivateAVFImpl.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediarecorder/MediaRecorderPrivateAVFImpl.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediarecorder/MediaRecorderPrivateAVFImpl.cpp
@@ -80,18 +80,18 @@
     , m_recordedAudioTrackID(WTFMove(audioTrackId))
     , m_recordedVideoTrackID(WTFMove(videoTrackId))
 {
 }
 
-void MediaRecorderPrivateAVFImpl::sampleBufferUpdated(MediaStreamTrackPrivate& track, MediaSample& sampleBuffer)
+void MediaRecorderPrivateAVFImpl::sampleBufferUpdated(const MediaStreamTrackPrivate& track, MediaSample& sampleBuffer)
 {
     if (track.id() != m_recordedVideoTrackID)
         return;
     m_writer->appendVideoSampleBuffer(sampleBuffer.platformSample().sample.cmSampleBuffer);
 }
 
-void MediaRecorderPrivateAVFImpl::audioSamplesAvailable(MediaStreamTrackPrivate& track, const WTF::MediaTime& mediaTime, const PlatformAudioData& data, const AudioStreamDescription& description, size_t sampleCount)
+void MediaRecorderPrivateAVFImpl::audioSamplesAvailable(const MediaStreamTrackPrivate& track, const WTF::MediaTime& mediaTime, const PlatformAudioData& data, const AudioStreamDescription& description, size_t sampleCount)
 {
     if (track.id() != m_recordedAudioTrackID)
         return;
     ASSERT(is<WebAudioBufferList>(data));
     ASSERT(description.platformDescription().type == PlatformDescription::CAAudioStreamBasicType);
@@ -101,13 +101,15 @@
 void MediaRecorderPrivateAVFImpl::stopRecording()
 {
     m_writer->stopRecording();
 }
 
-RefPtr<SharedBuffer> MediaRecorderPrivateAVFImpl::fetchData()
+void MediaRecorderPrivateAVFImpl::fetchData(CompletionHandler<void(RefPtr<SharedBuffer>&&, const String&)>&& completionHandler)
 {
-    return m_writer->fetchData();
+    m_writer->fetchData([completionHandler = WTFMove(completionHandler), mimeType = mimeType()](auto&& buffer) mutable {
+        completionHandler(WTFMove(buffer), mimeType);
+    });
 }
 
 const String& MediaRecorderPrivateAVFImpl::mimeType()
 {
     static NeverDestroyed<const String> mp4MimeType(MAKE_STATIC_STRING_IMPL("video/mp4"));
