diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/Register.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/Register.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/Register.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/Register.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2008-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  *
@@ -32,40 +32,38 @@
 #include <wtf/Assertions.h>
 #include <wtf/VectorTraits.h>
 
 namespace JSC {
 
+    class CallFrame;
     class CodeBlock;
-    class ExecState;
     class JSLexicalEnvironment;
     class JSObject;
     class JSScope;
 
-    typedef ExecState CallFrame;
-
     class Register {
         WTF_MAKE_FAST_ALLOCATED;
     public:
         Register();
 
         Register(const JSValue&);
-        Register& operator=(const JSValue&);
         JSValue jsValue() const;
         JSValue asanUnsafeJSValue() const;
         EncodedJSValue encodedJSValue() const;
 
-        Register& operator=(CallFrame*);
-        Register& operator=(CodeBlock*);
-        Register& operator=(JSScope*);
-        Register& operator=(JSObject*);
+        ALWAYS_INLINE Register& operator=(CallFrame*);
+        ALWAYS_INLINE Register& operator=(CodeBlock*);
+        ALWAYS_INLINE Register& operator=(JSScope*);
+        ALWAYS_INLINE Register& operator=(JSObject*);
+        ALWAYS_INLINE Register& operator=(EncodedJSValue);
 
         int32_t i() const;
-        CallFrame* callFrame() const;
-        CodeBlock* codeBlock() const;
-        CodeBlock* asanUnsafeCodeBlock() const;
-        JSObject* object() const;
-        JSScope* scope() const;
+        ALWAYS_INLINE CallFrame* callFrame() const;
+        ALWAYS_INLINE CodeBlock* codeBlock() const;
+        ALWAYS_INLINE CodeBlock* asanUnsafeCodeBlock() const;
+        ALWAYS_INLINE JSObject* object() const;
+        ALWAYS_INLINE JSScope* scope() const;
         int32_t unboxedInt32() const;
         int32_t asanUnsafeUnboxedInt32() const;
         int64_t unboxedInt52() const;
         int64_t asanUnsafeUnboxedInt52() const;
         int64_t unboxedStrictInt52() const;
@@ -112,16 +110,10 @@
     ALWAYS_INLINE Register::Register(const JSValue& v)
     {
         u.value = JSValue::encode(v);
     }
 
-    ALWAYS_INLINE Register& Register::operator=(const JSValue& v)
-    {
-        u.value = JSValue::encode(v);
-        return *this;
-    }
-
     // FIXME (rdar://problem/19379214): ASan only needs to be suppressed for Register::jsValue() when called from prepareOSREntry(), but there is currently no way to express this short of adding a separate copy of the function.
     SUPPRESS_ASAN ALWAYS_INLINE JSValue Register::asanUnsafeJSValue() const
     {
         return JSValue::decode(u.value);
     }
@@ -136,42 +128,15 @@
         return u.value;
     }
 
     // Interpreter functions
 
-    ALWAYS_INLINE Register& Register::operator=(CallFrame* callFrame)
-    {
-        u.callFrame = callFrame;
-        return *this;
-    }
-
-    ALWAYS_INLINE Register& Register::operator=(CodeBlock* codeBlock)
-    {
-        u.codeBlock = codeBlock;
-        return *this;
-    }
-
     ALWAYS_INLINE int32_t Register::i() const
     {
         return jsValue().asInt32();
     }
 
-    ALWAYS_INLINE CallFrame* Register::callFrame() const
-    {
-        return u.callFrame;
-    }
-
-    ALWAYS_INLINE CodeBlock* Register::codeBlock() const
-    {
-        return u.codeBlock;
-    }
-
-    SUPPRESS_ASAN ALWAYS_INLINE CodeBlock* Register::asanUnsafeCodeBlock() const
-    {
-        return u.codeBlock;
-    }
-
     ALWAYS_INLINE int32_t Register::unboxedInt32() const
     {
         return payload();
     }
 
