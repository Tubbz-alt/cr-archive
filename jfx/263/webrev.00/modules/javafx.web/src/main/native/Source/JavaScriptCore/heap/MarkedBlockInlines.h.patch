diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/MarkedBlockInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/MarkedBlockInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/MarkedBlockInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/MarkedBlockInlines.h
@@ -481,10 +481,16 @@
     if (space()->isMarking())
         marksAreUseful |= block().marksConveyLivenessDuringMarking(markingVersion);
     return marksAreUseful ? MarksNotStale : MarksStale;
 }
 
+inline void MarkedBlock::Handle::setIsFreeListed()
+{
+    m_directory->setIsEmpty(NoLockingNecessary, this, false);
+    m_isFreeListed = true;
+}
+
 template <typename Functor>
 inline IterationStatus MarkedBlock::Handle::forEachLiveCell(const Functor& functor)
 {
     // FIXME: This is not currently efficient to use in the constraint solver because isLive() grabs a
     // lock to protect itself from concurrent calls to aboutToMarkSlow(). But we could get around this by
