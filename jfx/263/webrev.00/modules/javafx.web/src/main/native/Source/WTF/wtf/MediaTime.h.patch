diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/MediaTime.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/MediaTime.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/MediaTime.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/MediaTime.h
@@ -51,14 +51,13 @@
         NegativeInfinite = 1 << 3,
         Indefinite = 1 << 4,
         DoubleValue = 1 << 5,
     };
 
-    MediaTime();
-    MediaTime(int64_t value, uint32_t scale, uint8_t flags = Valid);
+    constexpr MediaTime();
+    constexpr MediaTime(int64_t value, uint32_t scale, uint8_t flags = Valid);
     MediaTime(const MediaTime& rhs);
-    ~MediaTime();
 
     static MediaTime createWithFloat(float floatTime);
     static MediaTime createWithFloat(float floatTime, uint32_t timeScale);
     static MediaTime createWithDouble(double doubleTime);
     static MediaTime createWithDouble(double doubleTime, uint32_t timeScale);
@@ -147,10 +146,28 @@
     };
     uint32_t m_timeScale;
     uint8_t m_timeFlags;
 };
 
+constexpr MediaTime::MediaTime()
+    : m_timeValue(0)
+    , m_timeScale(DefaultTimeScale)
+    , m_timeFlags(Valid)
+{
+}
+
+constexpr MediaTime::MediaTime(int64_t value, uint32_t scale, uint8_t flags)
+    : m_timeValue(value)
+    , m_timeScale(scale)
+    , m_timeFlags(flags)
+{
+    if (scale || !(flags & Valid))
+        return;
+
+    *this = value < 0 ? negativeInfiniteTime() : positiveInfiniteTime();
+}
+
 inline MediaTime operator*(int32_t lhs, const MediaTime& rhs) { return rhs.operator*(lhs); }
 
 WTF_EXPORT_PRIVATE extern MediaTime abs(const MediaTime& rhs);
 
 struct WTF_EXPORT_PRIVATE MediaTimeRange {
@@ -174,29 +191,23 @@
     return decoder.decode(time.m_timeValue)
         && decoder.decode(time.m_timeScale)
         && decoder.decode(time.m_timeFlags);
 }
 
-template<typename Type>
-struct LogArgument;
+template<typename> struct LogArgument;
 
-template <>
-struct LogArgument<MediaTime> {
-    static String toString(const MediaTime& time)
-    {
-        return time.toJSONString();
-    }
+template<> struct LogArgument<MediaTime> {
+    static String toString(const MediaTime& time) { return time.toJSONString(); }
 };
-
-template <>
-struct LogArgument<MediaTimeRange> {
-    static String toString(const MediaTimeRange& range)
-    {
-        return range.toJSONString();
-    }
+template<> struct LogArgument<MediaTimeRange> {
+    static String toString(const MediaTimeRange& range) { return range.toJSONString(); }
 };
 
+#ifndef NDEBUG
+WTF_EXPORT_PRIVATE TextStream& operator<<(TextStream&, const MediaTime&);
+#endif
+
 }
 
 using WTF::MediaTime;
 using WTF::MediaTimeRange;
 using WTF::abs;
