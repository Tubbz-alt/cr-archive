diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLExpression.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLExpression.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLExpression.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLExpression.cpp
@@ -70,13 +70,10 @@
         delete &downcast<MakeArrayReferenceExpression>(expression);
         break;
     case Expression::Kind::MakePointer:
         delete &downcast<MakePointerExpression>(expression);
         break;
-    case Expression::Kind::NullLiteral:
-        delete &downcast<NullLiteral>(expression);
-        break;
     case Expression::Kind::Dot:
         delete &downcast<DotExpression>(expression);
         break;
     case Expression::Kind::GlobalVariableReference:
         delete &downcast<GlobalVariableReference>(expression);
@@ -136,13 +133,10 @@
         downcast<MakeArrayReferenceExpression>(expression).~MakeArrayReferenceExpression();
         break;
     case Expression::Kind::MakePointer:
         downcast<MakePointerExpression>(expression).~MakePointerExpression();
         break;
-    case Expression::Kind::NullLiteral:
-        downcast<NullLiteral>(expression).~NullLiteral();
-        break;
     case Expression::Kind::Dot:
         downcast<DotExpression>(expression).~DotExpression();
         break;
     case Expression::Kind::GlobalVariableReference:
         downcast<GlobalVariableReference>(expression).~GlobalVariableReference();
@@ -166,35 +160,50 @@
         downcast<VariableReference>(expression).~VariableReference();
         break;
     }
 }
 
-String PropertyAccessExpression::getterFunctionName() const
+bool Expression::mayBeEffectful() const
 {
-    if (is<DotExpression>(*this))
-        return downcast<DotExpression>(*this).getterFunctionName();
-    if (is<IndexExpression>(*this))
-        return downcast<IndexExpression>(*this).getterFunctionName();
-    RELEASE_ASSERT_NOT_REACHED();
-}
+    auto& expression = const_cast<Expression&>(*this);
 
-String PropertyAccessExpression::setterFunctionName() const
-{
-    if (is<DotExpression>(*this))
-        return downcast<DotExpression>(*this).setterFunctionName();
-    if (is<IndexExpression>(*this))
-        return downcast<IndexExpression>(*this).setterFunctionName();
-    RELEASE_ASSERT_NOT_REACHED();
-}
+    switch (expression.kind()) {
+    case Expression::Kind::BooleanLiteral:
+    case Expression::Kind::FloatLiteral:
+    case Expression::Kind::IntegerLiteral:
+    case Expression::Kind::UnsignedIntegerLiteral:
+    case Expression::Kind::EnumerationMemberLiteral:
+    case Expression::Kind::GlobalVariableReference:
+    case Expression::Kind::VariableReference:
+        return false;
 
-String PropertyAccessExpression::anderFunctionName() const
-{
-    if (is<DotExpression>(*this))
-        return downcast<DotExpression>(*this).anderFunctionName();
-    if (is<IndexExpression>(*this))
-        return downcast<IndexExpression>(*this).anderFunctionName();
-    RELEASE_ASSERT_NOT_REACHED();
+    case Expression::Kind::Dereference:
+        return downcast<DereferenceExpression>(expression).pointer().mayBeEffectful();
+
+    case Expression::Kind::Logical:
+        return downcast<LogicalExpression>(expression).left().mayBeEffectful() || downcast<LogicalExpression>(expression).right().mayBeEffectful();
+
+    case Expression::Kind::LogicalNot:
+        return downcast<LogicalNotExpression>(expression).operand().mayBeEffectful();
+
+    case Expression::Kind::MakeArrayReference:
+        return downcast<MakeArrayReferenceExpression>(expression).leftValue().mayBeEffectful();
+
+    case Expression::Kind::MakePointer:
+        return downcast<MakePointerExpression>(expression).leftValue().mayBeEffectful();
+
+    case Expression::Kind::Dot:
+        return downcast<DotExpression>(expression).base().mayBeEffectful();
+
+    case Expression::Kind::Index:
+        return downcast<IndexExpression>(expression).base().mayBeEffectful() || downcast<IndexExpression>(expression).indexExpression().mayBeEffectful();
+
+    default:
+        break;
+    }
+
+    return true;
 }
 
 } // namespace AST
 
 } // namespace WHLSL
