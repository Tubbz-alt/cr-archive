diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/HTTPHeaderMap.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/HTTPHeaderMap.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/HTTPHeaderMap.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/HTTPHeaderMap.h
@@ -156,11 +156,11 @@
     WEBCORE_EXPORT String get(const String& name) const;
     WEBCORE_EXPORT void set(const String& name, const String& value);
     WEBCORE_EXPORT void add(const String& name, const String& value);
     WEBCORE_EXPORT void append(const String& name, const String& value);
     WEBCORE_EXPORT bool contains(const String&) const;
-    bool remove(const String&);
+    WEBCORE_EXPORT bool remove(const String&);
 
 #if USE(CF)
     void set(CFStringRef name, const String& value);
 #ifdef __OBJC__
     void set(NSString *name, const String& value) { set((__bridge CFStringRef)name, value); }
@@ -188,11 +188,21 @@
     const_iterator begin() const { return const_iterator(*this, m_commonHeaders.begin(), m_uncommonHeaders.begin()); }
     const_iterator end() const { return const_iterator(*this, m_commonHeaders.end(), m_uncommonHeaders.end()); }
 
     friend bool operator==(const HTTPHeaderMap& a, const HTTPHeaderMap& b)
     {
-        return a.m_commonHeaders == b.m_commonHeaders && a.m_uncommonHeaders == b.m_uncommonHeaders;
+        if (a.m_commonHeaders.size() != b.m_commonHeaders.size() || a.m_uncommonHeaders.size() != b.m_uncommonHeaders.size())
+            return false;
+        for (auto& commonHeader : a.m_commonHeaders) {
+            if (b.get(commonHeader.key) != commonHeader.value)
+                return false;
+        }
+        for (auto& uncommonHeader : a.m_uncommonHeaders) {
+            if (b.getUncommonHeader(uncommonHeader.key) != uncommonHeader.value)
+                return false;
+        }
+        return true;
     }
 
     friend bool operator!=(const HTTPHeaderMap& a, const HTTPHeaderMap& b)
     {
         return !(a == b);
@@ -201,10 +211,11 @@
     template <class Encoder> void encode(Encoder&) const;
     template <class Decoder> static bool decode(Decoder&, HTTPHeaderMap&);
 
 private:
     void setUncommonHeader(const String& name, const String& value);
+    WEBCORE_EXPORT String getUncommonHeader(const String& name) const;
 
     CommonHeadersVector m_commonHeaders;
     UncommonHeadersVector m_uncommonHeaders;
 };
 
