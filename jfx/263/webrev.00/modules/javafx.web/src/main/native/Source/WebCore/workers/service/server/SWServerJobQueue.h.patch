diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/SWServerJobQueue.h b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/SWServerJobQueue.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/SWServerJobQueue.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/SWServerJobQueue.h
@@ -32,28 +32,30 @@
 #include "Timer.h"
 #include <wtf/Deque.h>
 
 namespace WebCore {
 
+class SWServerWorker;
+
 class SWServerJobQueue {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     explicit SWServerJobQueue(SWServer&, const ServiceWorkerRegistrationKey&);
     SWServerJobQueue(const SWServerRegistration&) = delete;
     ~SWServerJobQueue();
 
     const ServiceWorkerJobData& firstJob() const { return m_jobQueue.first(); }
     const ServiceWorkerJobData& lastJob() const { return m_jobQueue.last(); }
-    void enqueueJob(const ServiceWorkerJobData& jobData) { m_jobQueue.append(jobData); }
+    void enqueueJob(ServiceWorkerJobData&& jobData) { m_jobQueue.append(WTFMove(jobData)); }
     size_t size() const { return m_jobQueue.size(); }
 
     void runNextJob();
 
-    void scriptFetchFinished(SWServer::Connection&, const ServiceWorkerFetchResult&);
+    void scriptFetchFinished(const ServiceWorkerFetchResult&);
     void scriptContextFailedToStart(const ServiceWorkerJobDataIdentifier&, ServiceWorkerIdentifier, const String& message);
     void scriptContextStarted(const ServiceWorkerJobDataIdentifier&, ServiceWorkerIdentifier);
-    void didFinishInstall(const ServiceWorkerJobDataIdentifier&, ServiceWorkerIdentifier, bool wasSuccessful);
+    void didFinishInstall(const ServiceWorkerJobDataIdentifier&, SWServerWorker&, bool wasSuccessful);
     void didResolveRegistrationPromise();
     void cancelJobsFromConnection(SWServerConnectionIdentifier);
     void cancelJobsFromServiceWorker(ServiceWorkerIdentifier);
 
     bool isCurrentlyProcessingJob(const ServiceWorkerJobDataIdentifier&) const;
