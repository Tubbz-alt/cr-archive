diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/WeakMapImpl.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/WeakMapImpl.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/WeakMapImpl.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/WeakMapImpl.h
@@ -190,17 +190,18 @@
         memset(this, 0, allocationSize(capacity));
     }
 };
 
 template <typename WeakMapBucketType>
-class WeakMapImpl : public JSDestructibleObject {
-    using Base = JSDestructibleObject;
+class WeakMapImpl : public JSNonFinalObject {
+    using Base = JSNonFinalObject;
     using WeakMapBufferType = WeakMapBuffer<WeakMapBucketType>;
 
 public:
     using BucketType = WeakMapBucketType;
 
+    static constexpr bool needsDestruction = true;
     static void destroy(JSCell*);
 
     static void visitChildren(JSCell*, SlotVisitor&);
 
     static size_t estimatedSize(JSCell*, VM&);
@@ -303,11 +304,11 @@
     }
 
     template<typename CellType, SubspaceAccess mode>
     static IsoSubspace* subspaceFor(VM& vm)
     {
-        if (isWeakMap())
+        if constexpr (isWeakMap())
             return vm.weakMapSpace<mode>();
         return vm.weakSetSpace<mode>();
     }
 
     static void visitOutputConstraints(JSCell*, SlotVisitor&);
@@ -441,11 +442,11 @@
         checkConsistency();
     }
 
     ALWAYS_INLINE void checkConsistency() const
     {
-        if (!ASSERT_DISABLED) {
+        if (ASSERT_ENABLED) {
             uint32_t size = 0;
             auto* buffer = this->buffer();
             for (uint32_t index = 0; index < m_capacity; ++index) {
                 auto* bucket = buffer + index;
                 if (bucket->isEmpty() || bucket->isDeleted())
@@ -466,11 +467,11 @@
         assertBufferIsEmpty();
     }
 
     ALWAYS_INLINE void assertBufferIsEmpty() const
     {
-        if (!ASSERT_DISABLED) {
+        if (ASSERT_ENABLED) {
             for (unsigned i = 0; i < m_capacity; i++)
                 ASSERT((buffer() + i)->isEmpty());
         }
     }
 
