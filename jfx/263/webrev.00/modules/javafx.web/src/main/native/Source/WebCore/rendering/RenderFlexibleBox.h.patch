diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderFlexibleBox.h b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderFlexibleBox.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderFlexibleBox.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderFlexibleBox.h
@@ -90,10 +90,12 @@
 
 protected:
     void computeIntrinsicLogicalWidths(LayoutUnit& minLogicalWidth, LayoutUnit& maxLogicalWidth) const override;
     void computePreferredLogicalWidths() override;
 
+    bool shouldResetChildLogicalHeightBeforeLayout(const RenderBox&) const override { return m_shouldResetChildLogicalHeightBeforeLayout; }
+
 private:
     enum FlexSign {
         PositiveFlexibility,
         NegativeFlexibility,
     };
@@ -186,10 +188,12 @@
     void flipForWrapReverse(const Vector<LineContext>&, LayoutUnit crossAxisStartEdge);
 
     void appendChildFrameRects(ChildFrameRects&);
     void repaintChildrenDuringLayoutIfMoved(const ChildFrameRects&);
 
+    bool hasPercentHeightDescendants(const RenderBox&) const;
+
     // This is used to cache the preferred size for orthogonal flow children so we
     // don't have to relayout to get it
     HashMap<const RenderBox*, LayoutUnit> m_intrinsicSizeAlongMainAxis;
 
     // This is used to cache the intrinsic size on the cross axis to avoid
@@ -207,10 +211,11 @@
     int m_numberOfInFlowChildrenOnFirstLine { -1 };
 
     // This is SizeIsUnknown outside of layoutBlock()
     mutable SizeDefiniteness m_hasDefiniteHeight { SizeDefiniteness::Unknown };
     bool m_inLayout { false };
+    bool m_shouldResetChildLogicalHeightBeforeLayout { false };
 };
 
 } // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_RENDER_OBJECT(RenderFlexibleBox, isFlexibleBox())
