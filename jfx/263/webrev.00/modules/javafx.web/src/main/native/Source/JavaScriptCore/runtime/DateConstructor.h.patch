diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DateConstructor.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DateConstructor.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DateConstructor.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DateConstructor.h
@@ -1,8 +1,8 @@
 /*
  *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
- *  Copyright (C) 2008, 2011, 2016 Apple Inc. All rights reserved.
+ *  Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Lesser General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -28,11 +28,11 @@
 class GetterSetter;
 
 class DateConstructor final : public InternalFunction {
 public:
     typedef InternalFunction Base;
-    static const unsigned StructureFlags = Base::StructureFlags | HasStaticPropertyTable;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | HasStaticPropertyTable;
 
     static DateConstructor* create(VM& vm, Structure* structure, DatePrototype* datePrototype, GetterSetter*)
     {
         DateConstructor* constructor = new (NotNull, allocateCell<DateConstructor>(vm.heap)) DateConstructor(vm, structure);
         constructor->finishCreation(vm, datePrototype);
@@ -50,11 +50,11 @@
     void finishCreation(VM&, DatePrototype*);
 
 private:
     DateConstructor(VM&, Structure*);
 };
+STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(DateConstructor, InternalFunction);
 
-JSObject* constructDate(ExecState*, JSGlobalObject*, JSValue newTarget, const ArgList&);
-
-EncodedJSValue JSC_HOST_CALL dateNow(ExecState*);
+JSObject* constructDate(JSGlobalObject*, JSValue newTarget, const ArgList&);
+JSValue dateNowImpl();
 
 } // namespace JSC
