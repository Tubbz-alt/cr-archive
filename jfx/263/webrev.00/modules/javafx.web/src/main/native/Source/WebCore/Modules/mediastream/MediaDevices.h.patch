diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaDevices.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaDevices.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaDevices.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaDevices.h
@@ -35,11 +35,11 @@
 
 #include "ActiveDOMObject.h"
 #include "EventNames.h"
 #include "EventTarget.h"
 #include "ExceptionOr.h"
-#include "JSDOMPromiseDeferred.h"
+#include "IDLTypes.h"
 #include "MediaTrackConstraints.h"
 #include "RealtimeMediaSourceCenter.h"
 #include "Timer.h"
 #include "UserMediaClient.h"
 #include <wtf/WeakPtr.h>
@@ -47,13 +47,16 @@
 namespace WebCore {
 
 class Document;
 class MediaDeviceInfo;
 class MediaStream;
+class UserGestureToken;
 
 struct MediaTrackSupportedConstraints;
 
+template<typename IDLType> class DOMPromiseDeferred;
+
 class MediaDevices final : public RefCounted<MediaDevices>, public ActiveDOMObject, public EventTargetWithInlineData, public CanMakeWeakPtr<MediaDevices> {
     WTF_MAKE_ISO_ALLOCATED(MediaDevices);
 public:
     static Ref<MediaDevices> create(Document&);
 
@@ -73,20 +76,24 @@
 
     struct StreamConstraints {
         Variant<bool, MediaTrackConstraints> video;
         Variant<bool, MediaTrackConstraints> audio;
     };
-    void getUserMedia(const StreamConstraints&, Promise&&) const;
-    void getDisplayMedia(const StreamConstraints&, Promise&&) const;
+    void getUserMedia(const StreamConstraints&, Promise&&);
+
+    struct DisplayMediaStreamConstraints {
+        Variant<bool, MediaTrackConstraints> video;
+        Variant<bool, MediaTrackConstraints> audio;
+    };
+    void getDisplayMedia(const DisplayMediaStreamConstraints&, Promise&&);
+
     void enumerateDevices(EnumerateDevicesPromise&&);
     MediaTrackSupportedConstraints getSupportedConstraints();
 
     using RefCounted<MediaDevices>::ref;
     using RefCounted<MediaDevices>::deref;
 
-    void setDisableGetDisplayMediaUserGestureConstraint(bool value) { m_disableGetDisplayMediaUserGestureConstraint = value; }
-
 private:
     explicit MediaDevices(Document&);
 
     void scheduledEventTimerFired();
     bool addEventListener(const AtomString& eventType, Ref<EventListener>&&, const AddEventListenerOptions&) override;
@@ -96,29 +103,35 @@
 
     friend class JSMediaDevicesOwner;
 
     // ActiveDOMObject
     const char* activeDOMObjectName() const final;
-    bool canSuspendForDocumentSuspension() const final;
     void stop() final;
     bool hasPendingActivity() const final;
 
     // EventTargetWithInlineData.
     EventTargetInterface eventTargetInterface() const final { return MediaDevicesEventTargetInterfaceType; }
     ScriptExecutionContext* scriptExecutionContext() const final { return ActiveDOMObject::scriptExecutionContext(); }
     void refEventTarget() final { ref(); }
     void derefEventTarget() final { deref(); }
 
+    enum class GestureAllowedRequest {
+        Microphone = 1 << 0,
+        Camera = 1 << 1,
+        Display = 1 << 2,
+    };
+    bool computeUserGesturePriviledge(GestureAllowedRequest);
+
     Timer m_scheduledEventTimer;
     UserMediaClient::DeviceChangeObserverToken m_deviceChangeToken;
     const EventNames& m_eventNames; // Need to cache this so we can use it from GC threads.
     bool m_listeningForDeviceChanges { false };
-    bool m_disableGetDisplayMediaUserGestureConstraint { false };
 
     Vector<Ref<MediaDeviceInfo>> m_devices;
-    bool m_canAccessCamera { false };
-    bool m_canAccessMicrophone { false };
+
+    OptionSet<GestureAllowedRequest> m_requestTypesForCurrentGesture;
+    WeakPtr<UserGestureToken> m_currentGestureToken;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(MEDIA_STREAM)
