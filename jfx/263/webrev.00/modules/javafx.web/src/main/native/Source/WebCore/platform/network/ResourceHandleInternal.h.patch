diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceHandleInternal.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceHandleInternal.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceHandleInternal.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceHandleInternal.h
@@ -37,10 +37,11 @@
 #include <pal/spi/cf/CFNetworkSPI.h>
 #endif
 
 #if USE(CURL)
 #include "CurlRequest.h"
+#include "SynchronousLoaderClient.h"
 #include <wtf/MessageQueue.h>
 #include <wtf/MonotonicTime.h>
 #endif
 
 #if PLATFORM(COCOA)
@@ -60,12 +61,14 @@
 // Cocoa-exception-free (either simple Foundation classes or
 // WebCoreResourceLoaderImp which avoids doing work in dealloc).
 
 namespace WebCore {
 
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(ResourceHandleInternal);
 class ResourceHandleInternal {
-    WTF_MAKE_NONCOPYABLE(ResourceHandleInternal); WTF_MAKE_FAST_ALLOCATED;
+    WTF_MAKE_NONCOPYABLE(ResourceHandleInternal);
+    WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(ResourceHandleInternal);
 public:
     ResourceHandleInternal(ResourceHandle* loader, NetworkingContext* context, const ResourceRequest& request, ResourceHandleClient* client, bool defersLoading, bool shouldContentSniff, bool shouldContentEncodingSniff)
         : m_context(context)
         , m_client(client)
         , m_firstRequest(request)
@@ -127,11 +130,11 @@
     bool m_cancelled { false };
     unsigned m_redirectCount { 0 };
     unsigned m_authFailureCount { 0 };
     bool m_addedCacheValidationHeaders { false };
     RefPtr<CurlRequest> m_curlRequest;
-    MessageQueue<WTF::Function<void()>>* m_messageQueue { };
+    RefPtr<SynchronousLoaderMessageQueue> m_messageQueue;
     MonotonicTime m_startTime;
 #endif
 
 #if PLATFORM(JAVA)
     std::unique_ptr<URLLoader> m_loader;
