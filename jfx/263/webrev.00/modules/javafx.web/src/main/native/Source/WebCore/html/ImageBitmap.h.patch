diff a/modules/javafx.web/src/main/native/Source/WebCore/html/ImageBitmap.h b/modules/javafx.web/src/main/native/Source/WebCore/html/ImageBitmap.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/ImageBitmap.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/ImageBitmap.h
@@ -23,40 +23,55 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "JSDOMPromiseDeferred.h"
+#include "IDLTypes.h"
 #include "ScriptWrappable.h"
 #include <wtf/RefCounted.h>
 
+namespace JSC {
+class ArrayBuffer;
+}
+
+using JSC::ArrayBuffer;
+
 namespace WebCore {
 
 class Blob;
+class CanvasBase;
 class HTMLCanvasElement;
 class HTMLImageElement;
 class HTMLVideoElement;
 class ImageBitmapImageObserver;
 class ImageBuffer;
 class ImageData;
 class IntRect;
 class IntSize;
+#if ENABLE(OFFSCREEN_CANVAS)
+class OffscreenCanvas;
+#endif
 class PendingImageBitmap;
 class ScriptExecutionContext;
 class TypedOMCSSImageValue;
 struct ImageBitmapOptions;
 
+template<typename IDLType> class DOMPromiseDeferred;
+
 class ImageBitmap final : public ScriptWrappable, public RefCounted<ImageBitmap> {
     WTF_MAKE_ISO_ALLOCATED(ImageBitmap);
 public:
     using Source = Variant<
         RefPtr<HTMLImageElement>,
 #if ENABLE(VIDEO)
         RefPtr<HTMLVideoElement>,
 #endif
         RefPtr<HTMLCanvasElement>,
         RefPtr<ImageBitmap>,
+#if ENABLE(OFFSCREEN_CANVAS)
+        RefPtr<OffscreenCanvas>,
+#endif
 #if ENABLE(CSS_TYPED_OM)
         RefPtr<TypedOMCSSImageValue>,
 #endif
         RefPtr<Blob>,
         RefPtr<ImageData>
@@ -95,12 +110,16 @@
 
     static void createPromise(ScriptExecutionContext&, RefPtr<HTMLImageElement>&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
 #if ENABLE(VIDEO)
     static void createPromise(ScriptExecutionContext&, RefPtr<HTMLVideoElement>&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
 #endif
-    static void createPromise(ScriptExecutionContext&, RefPtr<HTMLCanvasElement>&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
     static void createPromise(ScriptExecutionContext&, RefPtr<ImageBitmap>&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
+    static void createPromise(ScriptExecutionContext&, RefPtr<HTMLCanvasElement>&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
+#if ENABLE(OFFSCREEN_CANVAS)
+    static void createPromise(ScriptExecutionContext&, RefPtr<OffscreenCanvas>&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
+#endif
+    static void createPromise(ScriptExecutionContext&, CanvasBase&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
     static void createPromise(ScriptExecutionContext&, RefPtr<Blob>&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
     static void createPromise(ScriptExecutionContext&, RefPtr<ImageData>&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
     static void createPromise(ScriptExecutionContext&, RefPtr<TypedOMCSSImageValue>&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
     static void createFromBuffer(Ref<ArrayBuffer>&&, String mimeType, long long expectedContentLength, const URL&, ImageBitmapOptions&&, Optional<IntRect>, Promise&&);
 
