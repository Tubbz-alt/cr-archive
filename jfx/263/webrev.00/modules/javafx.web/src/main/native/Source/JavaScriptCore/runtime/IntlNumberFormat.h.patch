diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlNumberFormat.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlNumberFormat.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlNumberFormat.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlNumberFormat.h
@@ -25,44 +25,56 @@
 
 #pragma once
 
 #if ENABLE(INTL)
 
-#include "JSDestructibleObject.h"
+#include "JSObject.h"
 #include <unicode/unum.h>
 #include <unicode/uvernum.h>
 
 #define HAVE_ICU_FORMAT_DOUBLE_FOR_FIELDS (U_ICU_VERSION_MAJOR_NUM >= 59)
 
 namespace JSC {
 
 class IntlNumberFormatConstructor;
 class JSBoundFunction;
 
-class IntlNumberFormat final : public JSDestructibleObject {
+class IntlNumberFormat final : public JSNonFinalObject {
 public:
-    typedef JSDestructibleObject Base;
+    using Base = JSNonFinalObject;
+
+    static constexpr bool needsDestruction = true;
+
+    static void destroy(JSCell* cell)
+    {
+        static_cast<IntlNumberFormat*>(cell)->IntlNumberFormat::~IntlNumberFormat();
+    }
+
+    template<typename CellType, SubspaceAccess mode>
+    static IsoSubspace* subspaceFor(VM& vm)
+    {
+        return vm.intlNumberFormatSpace<mode>();
+    }
 
     static IntlNumberFormat* create(VM&, Structure*);
     static Structure* createStructure(VM&, JSGlobalObject*, JSValue);
 
     DECLARE_INFO;
 
-    void initializeNumberFormat(ExecState&, JSValue locales, JSValue optionsValue);
-    JSValue formatNumber(ExecState&, double number);
+    void initializeNumberFormat(JSGlobalObject*, JSValue locales, JSValue optionsValue);
+    JSValue formatNumber(JSGlobalObject*, double number);
 #if HAVE(ICU_FORMAT_DOUBLE_FOR_FIELDS)
-    JSValue formatToParts(ExecState&, double value);
+    JSValue formatToParts(JSGlobalObject*, double value);
 #endif
-    JSObject* resolvedOptions(ExecState&);
+    JSObject* resolvedOptions(JSGlobalObject*);
 
     JSBoundFunction* boundFormat() const { return m_boundFormat.get(); }
     void setBoundFormat(VM&, JSBoundFunction*);
 
 protected:
     IntlNumberFormat(VM&, Structure*);
     void finishCreation(VM&);
-    static void destroy(JSCell*);
     static void visitChildren(JSCell*, SlotVisitor&);
 
 private:
     enum class Style : uint8_t { Decimal, Percent, Currency };
     enum class CurrencyDisplay : uint8_t { Code, Symbol, Name };
