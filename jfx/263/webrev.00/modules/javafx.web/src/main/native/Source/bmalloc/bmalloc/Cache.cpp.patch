diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Cache.cpp b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Cache.cpp
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Cache.cpp
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Cache.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2014-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2014-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -51,41 +51,33 @@
     BASSERT(!Environment::get()->isDebugHeapEnabled());
 }
 
 BNO_INLINE void* Cache::tryAllocateSlowCaseNullCache(HeapKind heapKind, size_t size)
 {
-    if (auto* debugHeap = DebugHeap::tryGet()) {
-        constexpr bool crashOnFailure = false;
-        return debugHeap->malloc(size, crashOnFailure);
-    }
+    if (auto* debugHeap = DebugHeap::tryGet())
+        return debugHeap->malloc(size, FailureAction::ReturnNull);
     return PerThread<PerHeapKind<Cache>>::getSlowCase()->at(mapToActiveHeapKind(heapKind)).allocator().tryAllocate(size);
 }
 
 BNO_INLINE void* Cache::allocateSlowCaseNullCache(HeapKind heapKind, size_t size)
 {
-    if (auto* debugHeap = DebugHeap::tryGet()) {
-        constexpr bool crashOnFailure = true;
-        return debugHeap->malloc(size, crashOnFailure);
-    }
+    if (auto* debugHeap = DebugHeap::tryGet())
+        return debugHeap->malloc(size, FailureAction::Crash);
     return PerThread<PerHeapKind<Cache>>::getSlowCase()->at(mapToActiveHeapKind(heapKind)).allocator().allocate(size);
 }
 
 BNO_INLINE void* Cache::tryAllocateSlowCaseNullCache(HeapKind heapKind, size_t alignment, size_t size)
 {
-    if (auto* debugHeap = DebugHeap::tryGet()) {
-        constexpr bool crashOnFailure = false;
-        return debugHeap->memalign(alignment, size, crashOnFailure);
-    }
+    if (auto* debugHeap = DebugHeap::tryGet())
+        return debugHeap->memalign(alignment, size, FailureAction::ReturnNull);
     return PerThread<PerHeapKind<Cache>>::getSlowCase()->at(mapToActiveHeapKind(heapKind)).allocator().tryAllocate(alignment, size);
 }
 
 BNO_INLINE void* Cache::allocateSlowCaseNullCache(HeapKind heapKind, size_t alignment, size_t size)
 {
-    if (auto* debugHeap = DebugHeap::tryGet()) {
-        constexpr bool crashOnFailure = true;
-        return debugHeap->memalign(alignment, size, crashOnFailure);
-    }
+    if (auto* debugHeap = DebugHeap::tryGet())
+        return debugHeap->memalign(alignment, size, FailureAction::Crash);
     return PerThread<PerHeapKind<Cache>>::getSlowCase()->at(mapToActiveHeapKind(heapKind)).allocator().allocate(alignment, size);
 }
 
 BNO_INLINE void Cache::deallocateSlowCaseNullCache(HeapKind heapKind, void* object)
 {
@@ -96,22 +88,18 @@
     PerThread<PerHeapKind<Cache>>::getSlowCase()->at(mapToActiveHeapKind(heapKind)).deallocator().deallocate(object);
 }
 
 BNO_INLINE void* Cache::tryReallocateSlowCaseNullCache(HeapKind heapKind, void* object, size_t newSize)
 {
-    if (auto* debugHeap = DebugHeap::tryGet()) {
-        constexpr bool crashOnFailure = false;
-        return debugHeap->realloc(object, newSize, crashOnFailure);
-    }
+    if (auto* debugHeap = DebugHeap::tryGet())
+        return debugHeap->realloc(object, newSize, FailureAction::ReturnNull);
     return PerThread<PerHeapKind<Cache>>::getSlowCase()->at(mapToActiveHeapKind(heapKind)).allocator().tryReallocate(object, newSize);
 }
 
 BNO_INLINE void* Cache::reallocateSlowCaseNullCache(HeapKind heapKind, void* object, size_t newSize)
 {
-    if (auto* debugHeap = DebugHeap::tryGet()) {
-        constexpr bool crashOnFailure = true;
-        return debugHeap->realloc(object, newSize, crashOnFailure);
-    }
+    if (auto* debugHeap = DebugHeap::tryGet())
+        return debugHeap->realloc(object, newSize, FailureAction::Crash);
     return PerThread<PerHeapKind<Cache>>::getSlowCase()->at(mapToActiveHeapKind(heapKind)).allocator().reallocate(object, newSize);
 }
 
 } // namespace bmalloc
