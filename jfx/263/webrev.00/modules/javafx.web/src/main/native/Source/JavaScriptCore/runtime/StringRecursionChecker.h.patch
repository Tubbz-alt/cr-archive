diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringRecursionChecker.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringRecursionChecker.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringRecursionChecker.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StringRecursionChecker.h
@@ -18,39 +18,40 @@
  */
 
 #pragma once
 
 #include "CallFrame.h"
+#include "GetVM.h"
 #include "VMInlines.h"
 #include <wtf/StackStats.h>
 
 namespace JSC {
 
 class StringRecursionChecker {
     WTF_MAKE_NONCOPYABLE(StringRecursionChecker);
 
 public:
-    StringRecursionChecker(ExecState*, JSObject* thisObject);
+    StringRecursionChecker(JSGlobalObject*, JSObject* thisObject);
     ~StringRecursionChecker();
 
     JSValue earlyReturnValue() const; // 0 if everything is OK, value to return for failure cases
 
 private:
     JSValue throwStackOverflowError();
     JSValue emptyString();
     JSValue performCheck();
 
-    ExecState* m_exec;
+    JSGlobalObject* m_globalObject;
     JSObject* m_thisObject;
     JSValue m_earlyReturnValue;
 
     StackStats::CheckPoint stackCheckpoint;
 };
 
 inline JSValue StringRecursionChecker::performCheck()
 {
-    VM& vm = m_exec->vm();
+    VM& vm = getVM(m_globalObject);
     if (UNLIKELY(!vm.isSafeToRecurseSoft()))
         return throwStackOverflowError();
 
     bool alreadyVisited = false;
     if (!vm.stringRecursionCheckFirstObject)
@@ -63,12 +64,12 @@
     if (alreadyVisited)
         return emptyString(); // Return empty string to avoid infinite recursion.
     return JSValue(); // Indicate success.
 }
 
-inline StringRecursionChecker::StringRecursionChecker(ExecState* exec, JSObject* thisObject)
-    : m_exec(exec)
+inline StringRecursionChecker::StringRecursionChecker(JSGlobalObject* globalObject, JSObject* thisObject)
+    : m_globalObject(globalObject)
     , m_thisObject(thisObject)
     , m_earlyReturnValue(performCheck())
 {
 }
 
@@ -80,11 +81,11 @@
 inline StringRecursionChecker::~StringRecursionChecker()
 {
     if (m_earlyReturnValue)
         return;
 
-    VM& vm = m_exec->vm();
+    VM& vm = getVM(m_globalObject);
     if (vm.stringRecursionCheckFirstObject == m_thisObject)
         vm.stringRecursionCheckFirstObject = nullptr;
     else {
         ASSERT(vm.stringRecursionCheckVisitedObjects.contains(m_thisObject));
         vm.stringRecursionCheckVisitedObjects.remove(m_thisObject);
