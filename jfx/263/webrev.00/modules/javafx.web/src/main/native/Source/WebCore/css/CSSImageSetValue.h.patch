diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSImageSetValue.h b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSImageSetValue.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSImageSetValue.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSImageSetValue.h
@@ -27,57 +27,58 @@
 
 #include "CSSValueList.h"
 #include "CachedResourceHandle.h"
 #include "ResourceLoaderOptions.h"
 #include <wtf/Function.h>
+#include <wtf/RefPtr.h>
 
 namespace WebCore {
 
 class CachedImage;
 class CachedResourceLoader;
+class CSSImageValue;
 class Document;
 
+namespace Style {
+class BuilderState;
+}
+
+struct ImageWithScale {
+    RefPtr<CSSValue> value;
+    float scaleFactor { 1 };
+};
+
 class CSSImageSetValue final : public CSSValueList {
 public:
-    static Ref<CSSImageSetValue> create(LoadedFromOpaqueSource loadedFromOpaqueSource)
-    {
-        return adoptRef(*new CSSImageSetValue(loadedFromOpaqueSource));
-    }
+    static Ref<CSSImageSetValue> create();
     ~CSSImageSetValue();
 
-    std::pair<CachedImage*, float>  loadBestFitImage(CachedResourceLoader&, const ResourceLoaderOptions&);
-    CachedImage* cachedImage() const { return m_cachedImage.get(); }
+    ImageWithScale selectBestFitImage(const Document&);
+    CachedImage* cachedImage() const;
 
     String customCSSText() const;
 
-    struct ImageWithScale {
-        URL imageURL;
-        float scaleFactor;
-    };
-
     bool traverseSubresources(const WTF::Function<bool (const CachedResource&)>& handler) const;
 
     void updateDeviceScaleFactor(const Document&);
 
-    URL bestImageForScaleFactorURL() { return bestImageForScaleFactor().imageURL; }
+    Ref<CSSImageSetValue> imageSetWithStylesResolved(Style::BuilderState&);
 
 protected:
     ImageWithScale bestImageForScaleFactor();
 
 private:
-    explicit CSSImageSetValue(LoadedFromOpaqueSource);
+    CSSImageSetValue();
 
     void fillImageSet();
     static inline bool compareByScaleFactor(ImageWithScale first, ImageWithScale second) { return first.scaleFactor < second.scaleFactor; }
 
-    CachedResourceHandle<CachedImage> m_cachedImage;
+    RefPtr<CSSValue> m_selectedImageValue;
     bool m_accessedBestFitImage { false };
-    float m_bestFitImageScaleFactor { 1 };
+    ImageWithScale m_bestFitImage;
     float m_deviceScaleFactor { 1 };
-
     Vector<ImageWithScale> m_imagesInSet;
-    LoadedFromOpaqueSource m_loadedFromOpaqueSource { LoadedFromOpaqueSource::No };
 };
 
 } // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_CSS_VALUE(CSSImageSetValue, isImageSetValue())
