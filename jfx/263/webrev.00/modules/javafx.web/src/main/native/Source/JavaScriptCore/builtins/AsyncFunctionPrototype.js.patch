diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/AsyncFunctionPrototype.js b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/AsyncFunctionPrototype.js
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/AsyncFunctionPrototype.js
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/AsyncFunctionPrototype.js
@@ -1,7 +1,8 @@
 /*
  * Copyright (C) 2016 Caitlin Potter <caitp@igalia.com>.
+ * Copyright (C) 2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -22,37 +23,34 @@
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 @globalPrivate
-function asyncFunctionResume(generator, promiseCapability, sentValue, resumeMode)
+function asyncFunctionResume(generator, promise, sentValue, resumeMode)
 {
     "use strict";
-    let state = @getByIdDirectPrivate(generator, "generatorState");
-    let value = @undefined;
 
-    if (state === @GeneratorStateCompleted || (resumeMode !== @GeneratorResumeModeNormal && resumeMode !== @GeneratorResumeModeThrow))
-        @throwTypeError("Async function illegally resumed");
+    @assert(@isPromise(promise));
+
+    var state = @getGeneratorInternalField(generator, @generatorFieldState);
+    var value = @undefined;
 
     try {
-        @putByIdDirectPrivate(generator, "generatorState", @GeneratorStateExecuting);
-        value = @getByIdDirectPrivate(generator, "generatorNext").@call(@getByIdDirectPrivate(generator, "generatorThis"), generator, state, sentValue, resumeMode, @getByIdDirectPrivate(generator, "generatorFrame"));
-        if (@getByIdDirectPrivate(generator, "generatorState") === @GeneratorStateExecuting) {
-            @putByIdDirectPrivate(generator, "generatorState", @GeneratorStateCompleted);
-            promiseCapability.@resolve(value);
-            return promiseCapability.@promise;
+        @putGeneratorInternalField(generator, @generatorFieldState, @GeneratorStateExecuting);
+        value = @getGeneratorInternalField(generator, @generatorFieldNext).@call(@getGeneratorInternalField(generator, @generatorFieldThis), generator, state, sentValue, resumeMode, @getGeneratorInternalField(generator, @generatorFieldFrame));
+        if (@getGeneratorInternalField(generator, @generatorFieldState) === @GeneratorStateExecuting) {
+            @resolvePromiseWithFirstResolvingFunctionCallCheck(promise, value);
+            return promise;
         }
     } catch (error) {
-        @putByIdDirectPrivate(generator, "generatorState", @GeneratorStateCompleted);
-        promiseCapability.@reject(error);
-        return promiseCapability.@promise;
+        @rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error);
+        return promise;
     }
 
-    let wrappedValue = @newPromiseCapability(@Promise);
-    wrappedValue.@resolve.@call(@undefined, value);
-
-    wrappedValue.@promise.@then(
-        function(value) { @asyncFunctionResume(generator, promiseCapability, value, @GeneratorResumeModeNormal); },
-        function(error) { @asyncFunctionResume(generator, promiseCapability, error, @GeneratorResumeModeThrow); });
+    var capturedGenerator = generator;
+    var capturedPromise = promise;
+    @resolveWithoutPromise(value,
+        function(value) { @asyncFunctionResume(capturedGenerator, capturedPromise, value, @GeneratorResumeModeNormal); },
+        function(error) { @asyncFunctionResume(capturedGenerator, capturedPromise, error, @GeneratorResumeModeThrow); });
 
-    return promiseCapability.@promise;
+    return promise;
 }
