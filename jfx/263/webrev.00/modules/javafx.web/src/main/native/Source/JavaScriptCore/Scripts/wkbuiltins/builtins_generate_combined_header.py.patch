diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generate_combined_header.py b/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generate_combined_header.py
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generate_combined_header.py
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generate_combined_header.py
@@ -76,11 +76,12 @@
     def generate_forward_declarations(self):
         return """namespace JSC {
 class FunctionExecutable;
 class VM;
 
-enum class ConstructAbility : unsigned;
+enum class ConstructAbility : uint8_t;
+enum class ConstructorKind : uint8_t;
 }"""
 
     def generate_section_for_object(self, object):
         lines = []
         lines.append('/* %s */' % object.object_name)
@@ -97,11 +98,12 @@
                 'codeName': BuiltinsGenerator.mangledNameForFunction(function) + 'Code',
             }
 
             lines.append("""extern const char* const s_%(codeName)s;
 extern const int s_%(codeName)sLength;
-extern const JSC::ConstructAbility s_%(codeName)sConstructAbility;""" % function_args)
+extern const JSC::ConstructAbility s_%(codeName)sConstructAbility;
+extern const JSC::ConstructorKind s_%(codeName)sConstructorKind;""" % function_args)
 
         return lines
 
     def generate_macros_for_object(self, object):
         args = {
@@ -168,13 +170,12 @@
         lines.append("#define %(macroPrefix)s_FOREACH_BUILTIN_FUNCTION_PRIVATE_GLOBAL_NAME(macro) \\" % args)
         functions = [function for function in self.model().all_functions() if function.is_global_private]
         functions.sort(key=lambda x: x.function_name)
         for function in functions:
             function_args = {
-                'varName': get_var_name(function),
                 'funcName': function.function_name,
                 'codeName': BuiltinsGenerator.mangledNameForFunction(function),
             }
 
-            lines.append("    macro(%(varName)s, %(funcName)s, %(codeName)s) \\" % function_args)
+            lines.append("    macro(%(funcName)s, %(codeName)s) \\" % function_args)
 
         return '\n'.join(lines)
