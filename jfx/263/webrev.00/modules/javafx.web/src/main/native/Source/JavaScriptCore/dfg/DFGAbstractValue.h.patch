diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractValue.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractValue.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractValue.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractValue.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2011-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -281,11 +281,11 @@
     ALWAYS_INLINE bool merge(const AbstractValue& other)
     {
         if (other.isClear())
             return false;
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         AbstractValue oldMe = *this;
 #endif
         bool result = false;
         if (isClear()) {
             *this = other;
@@ -334,11 +334,11 @@
     // SpecCell. Hence, after this call, the value will no longer have any non-cell members. But, you can
     // use admittedTypes to preserve some non-cell types. Note that it's wrong for admittedTypes to overlap
     // with SpecCell.
     FiltrationResult filter(Graph&, const RegisteredStructureSet&, SpeculatedType admittedTypes = SpecNone);
 
-    FiltrationResult filterArrayModes(ArrayModes);
+    FiltrationResult filterArrayModes(ArrayModes, SpeculatedType admittedTypes = SpecNone);
 
     ALWAYS_INLINE FiltrationResult filter(SpeculatedType type)
     {
         if ((m_type & type) == m_type)
             return FiltrationOK;
@@ -429,16 +429,16 @@
     {
         return m_structure.isNeitherClearNorTop()
             || !arrayModesAreClearOrTop(m_arrayModes);
     }
 
-#if ASSERT_DISABLED
-    void checkConsistency() const { }
-    void assertIsRegistered(Graph&) const { }
-#else
+#if ASSERT_ENABLED
     JS_EXPORT_PRIVATE void checkConsistency() const;
     void assertIsRegistered(Graph&) const;
+#else
+    void checkConsistency() const { }
+    void assertIsRegistered(Graph&) const { }
 #endif
 
     ResultType resultType() const;
 
     void dumpInContext(PrintStream&, DumpContext*) const;
@@ -565,16 +565,16 @@
 
 #if USE(JSVALUE64)
 namespace WTF {
 template <>
 struct VectorTraits<JSC::DFG::AbstractValue> : VectorTraitsBase<false, JSC::DFG::AbstractValue> {
-    static const bool canInitializeWithMemset = true;
+    static constexpr bool canInitializeWithMemset = true;
 };
 
 template <>
 struct HashTraits<JSC::DFG::AbstractValue> : GenericHashTraits<JSC::DFG::AbstractValue> {
-    static const bool emptyValueIsZero = true;
+    static constexpr bool emptyValueIsZero = true;
 };
 };
 #endif // USE(JSVALUE64)
 
 #endif // ENABLE(DFG_JIT)
