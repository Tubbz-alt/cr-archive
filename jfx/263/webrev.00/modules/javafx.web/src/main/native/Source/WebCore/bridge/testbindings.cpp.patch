diff a/modules/javafx.web/src/main/native/Source/WebCore/bridge/testbindings.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bridge/testbindings.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bridge/testbindings.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bridge/testbindings.cpp
@@ -374,42 +374,42 @@
 
         // create interpreter w/ global object
         Object global(new GlobalImp());
         Interpreter interp;
         interp.setGlobalObject(global);
-        ExecState *exec = interp.globalExec();
+        JSGlobalObject* lexicalGlobalObject = interp.globalObject();
 
         MyObject *myObject = (MyObject *)NPN_CreateObject (myFunctionPtrs);
 
-        global.put(exec, Identifier::fromString(exec, "myInterface"), Instance::createRuntimeObject(Instance::CLanguage, (void *)myObject));
+        global.put(lexicalGlobalObject, Identifier::fromString(lexicalGlobalObject, "myInterface"), Instance::createRuntimeObject(Instance::CLanguage, (void *)myObject));
 
         for (int i = 1; i < argc; i++) {
             const char *code = readJavaScriptFromFile(argv[i]);
 
             if (code) {
                 // run
                 Completion comp(interp.evaluate(code));
 
                 if (comp.complType() == Throw) {
                     Value exVal = comp.value();
-                    String message = exVal.toWTFString(exec);
+                    String message = exVal.toWTFString(lexicalGlobalObject);
                     auto cstring = msg.ascii();
                     const char* msg = cstring.data();
                     int lineno = -1;
                     if (exVal.type() == ObjectType) {
-                        Value lineVal = Object::dynamicCast(exVal).get(exec, Identifier::fromString(exec, "line"));
+                        Value lineVal = Object::dynamicCast(exVal).get(lexicalGlobalObject, Identifier::fromString(lexicalGlobalObject, "line"));
                         if (lineVal.type() == NumberType)
-                            lineno = int(lineVal.toNumber(exec));
+                            lineno = int(lineVal.toNumber(lexicalGlobalObject));
                     }
                     if (lineno != -1)
                         fprintf(stderr,"Exception, line %d: %s\n",lineno,msg);
                     else
                         fprintf(stderr,"Exception: %s\n",msg);
                     ret = false;
                 }
                 else if (comp.complType() == ReturnValue) {
-                    char *msg = comp.value().toString(interp.globalExec()).ascii();
+                    char *msg = comp.value().toString(interp.globalObject()).ascii();
                     fprintf(stderr,"Return value: %s\n",msg);
                 }
             }
         }
 
