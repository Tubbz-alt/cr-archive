diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionExecutable.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionExecutable.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionExecutable.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionExecutable.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2009-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2009-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -38,11 +38,11 @@
 class FunctionExecutable final : public ScriptExecutable {
     friend class JIT;
     friend class LLIntOffsetsExtractor;
 public:
     typedef ScriptExecutable Base;
-    static const unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
 
     template<typename CellType, SubspaceAccess>
     static IsoSubspace* subspaceFor(VM& vm)
     {
         return &vm.functionExecutableSpace.space;
@@ -53,11 +53,11 @@
         FunctionExecutable* executable = new (NotNull, allocateCell<FunctionExecutable>(vm.heap)) FunctionExecutable(vm, source, unlinkedExecutable, intrinsic);
         executable->finishCreation(vm, topLevelExecutable);
         return executable;
     }
     static FunctionExecutable* fromGlobalCode(
-        const Identifier& name, ExecState&, const SourceCode&,
+        const Identifier& name, JSGlobalObject*, const SourceCode&,
         JSObject*& exception, int overrideLineNumber, Optional<int> functionConstructorParametersEndPosition);
 
     static void destroy(JSCell*);
 
     UnlinkedFunctionExecutable* unlinkedExecutable() const
@@ -129,11 +129,10 @@
         return rareData.m_returnStatementTypeSet;
     }
 
     FunctionMode functionMode() { return m_unlinkedExecutable->functionMode(); }
     bool isBuiltinFunction() const { return m_unlinkedExecutable->isBuiltinFunction(); }
-    bool isAnonymousBuiltinFunction() const { return m_unlinkedExecutable->isAnonymousBuiltinFunction(); }
     ConstructAbility constructAbility() const { return m_unlinkedExecutable->constructAbility(); }
     bool isClass() const { return m_unlinkedExecutable->isClass(); }
     bool isArrowFunction() const { return parseMode() == SourceParseMode::ArrowFunctionMode; }
     bool isGetter() const { return parseMode() == SourceParseMode::GetterMode; }
     bool isSetter() const { return parseMode() == SourceParseMode::SetterMode; }
