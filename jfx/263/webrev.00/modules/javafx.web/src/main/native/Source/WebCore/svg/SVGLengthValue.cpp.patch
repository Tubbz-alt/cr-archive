diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGLengthValue.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGLengthValue.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGLengthValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGLengthValue.cpp
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2004, 2005, 2006 Nikolas Zimmermann <zimmermann@kde.org>
  * Copyright (C) 2004, 2005, 2006, 2007 Rob Buis <buis@kde.org>
- * Copyright (C) 2007 Apple Inc. All rights reserved.
+ * Copyright (C) 2007-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -20,194 +20,272 @@
  */
 
 #include "config.h"
 #include "SVGLengthValue.h"
 
-#include "CSSHelper.h"
+#include "AnimationUtilities.h"
 #include "CSSPrimitiveValue.h"
-#include "FloatConversion.h"
-#include "SVGNames.h"
+#include "SVGLengthContext.h"
 #include "SVGParserUtilities.h"
-#include <wtf/MathExtras.h>
-#include <wtf/NeverDestroyed.h>
 #include <wtf/text/StringConcatenateNumbers.h>
 #include <wtf/text/TextStream.h>
 
 namespace WebCore {
 
-// Helper functions
-static inline unsigned storeUnit(SVGLengthMode mode, SVGLengthType type)
+static inline const char* lengthTypeToString(SVGLengthType lengthType)
 {
-    return (mode << 4) | type;
-}
-
-static inline SVGLengthMode extractMode(unsigned unit)
-{
-    unsigned mode = unit >> 4;
-    return static_cast<SVGLengthMode>(mode);
-}
-
-static inline SVGLengthType extractType(unsigned unit)
-{
-    return static_cast<SVGLengthType>(unit & ((1 << 4) - 1));
-}
-
-static inline const char* lengthTypeToString(SVGLengthType type)
-{
-    switch (type) {
-    case LengthTypeUnknown:
-    case LengthTypeNumber:
+    switch (lengthType) {
+    case SVGLengthType::Unknown:
+    case SVGLengthType::Number:
         return "";
-    case LengthTypePercentage:
+    case SVGLengthType::Percentage:
         return "%";
-    case LengthTypeEMS:
+    case SVGLengthType::Ems:
         return "em";
-    case LengthTypeEXS:
+    case SVGLengthType::Exs:
         return "ex";
-    case LengthTypePX:
+    case SVGLengthType::Pixels:
         return "px";
-    case LengthTypeCM:
+    case SVGLengthType::Centimeters:
         return "cm";
-    case LengthTypeMM:
+    case SVGLengthType::Millimeters:
         return "mm";
-    case LengthTypeIN:
+    case SVGLengthType::Inches:
         return "in";
-    case LengthTypePT:
+    case SVGLengthType::Points:
         return "pt";
-    case LengthTypePC:
+    case SVGLengthType::Picas:
         return "pc";
     }
 
     ASSERT_NOT_REACHED();
     return "";
 }
 
-inline SVGLengthType parseLengthType(const UChar* ptr, const UChar* end)
+static inline SVGLengthType parseLengthType(const UChar* ptr, const UChar* end)
 {
     if (ptr == end)
-        return LengthTypeNumber;
+        return SVGLengthType::Number;
 
     const UChar firstChar = *ptr;
 
     if (++ptr == end)
-        return firstChar == '%' ? LengthTypePercentage : LengthTypeUnknown;
+        return firstChar == '%' ? SVGLengthType::Percentage : SVGLengthType::Unknown;
 
     const UChar secondChar = *ptr;
 
     if (++ptr != end)
-        return LengthTypeUnknown;
+        return SVGLengthType::Unknown;
 
     if (firstChar == 'e' && secondChar == 'm')
-        return LengthTypeEMS;
+        return SVGLengthType::Ems;
     if (firstChar == 'e' && secondChar == 'x')
-        return LengthTypeEXS;
+        return SVGLengthType::Exs;
     if (firstChar == 'p' && secondChar == 'x')
-        return LengthTypePX;
+        return SVGLengthType::Pixels;
     if (firstChar == 'c' && secondChar == 'm')
-        return LengthTypeCM;
+        return SVGLengthType::Centimeters;
     if (firstChar == 'm' && secondChar == 'm')
-        return LengthTypeMM;
+        return SVGLengthType::Millimeters;
     if (firstChar == 'i' && secondChar == 'n')
-        return LengthTypeIN;
+        return SVGLengthType::Inches;
     if (firstChar == 'p' && secondChar == 't')
-        return LengthTypePT;
+        return SVGLengthType::Points;
     if (firstChar == 'p' && secondChar == 'c')
-        return LengthTypePC;
+        return SVGLengthType::Picas;
 
-    return LengthTypeUnknown;
+    return SVGLengthType::Unknown;
 }
 
-SVGLengthValue::SVGLengthValue(SVGLengthMode mode, const String& valueAsString)
-    : m_unit(storeUnit(mode, LengthTypeNumber))
+static inline SVGLengthType primitiveTypeToLengthType(CSSUnitType primitiveType)
 {
-    setValueAsString(valueAsString);
+    switch (primitiveType) {
+    case CSSUnitType::CSS_UNKNOWN:
+        return SVGLengthType::Unknown;
+    case CSSUnitType::CSS_NUMBER:
+        return SVGLengthType::Number;
+    case CSSUnitType::CSS_PERCENTAGE:
+        return SVGLengthType::Percentage;
+    case CSSUnitType::CSS_EMS:
+        return SVGLengthType::Ems;
+    case CSSUnitType::CSS_EXS:
+        return SVGLengthType::Exs;
+    case CSSUnitType::CSS_PX:
+        return SVGLengthType::Pixels;
+    case CSSUnitType::CSS_CM:
+        return SVGLengthType::Centimeters;
+    case CSSUnitType::CSS_MM:
+        return SVGLengthType::Millimeters;
+    case CSSUnitType::CSS_IN:
+        return SVGLengthType::Inches;
+    case CSSUnitType::CSS_PT:
+        return SVGLengthType::Points;
+    case CSSUnitType::CSS_PC:
+        return SVGLengthType::Picas;
+    default:
+        return SVGLengthType::Unknown;
+    }
+
+    return SVGLengthType::Unknown;
 }
 
-SVGLengthValue::SVGLengthValue(const SVGLengthContext& context, float value, SVGLengthMode mode, SVGLengthType unitType)
-    : m_unit(storeUnit(mode, unitType))
+static inline CSSUnitType lengthTypeToPrimitiveType(SVGLengthType lengthType)
 {
-    setValue(value, context);
+    switch (lengthType) {
+    case SVGLengthType::Unknown:
+        return CSSUnitType::CSS_UNKNOWN;
+    case SVGLengthType::Number:
+        return CSSUnitType::CSS_NUMBER;
+    case SVGLengthType::Percentage:
+        return CSSUnitType::CSS_PERCENTAGE;
+    case SVGLengthType::Ems:
+        return CSSUnitType::CSS_EMS;
+    case SVGLengthType::Exs:
+        return CSSUnitType::CSS_EXS;
+    case SVGLengthType::Pixels:
+        return CSSUnitType::CSS_PX;
+    case SVGLengthType::Centimeters:
+        return CSSUnitType::CSS_CM;
+    case SVGLengthType::Millimeters:
+        return CSSUnitType::CSS_MM;
+    case SVGLengthType::Inches:
+        return CSSUnitType::CSS_IN;
+    case SVGLengthType::Points:
+        return CSSUnitType::CSS_PT;
+    case SVGLengthType::Picas:
+        return CSSUnitType::CSS_PC;
+    }
+
+    ASSERT_NOT_REACHED();
+    return CSSUnitType::CSS_UNKNOWN;
 }
 
-ExceptionOr<void> SVGLengthValue::setValueAsString(const String& valueAsString, SVGLengthMode mode)
+SVGLengthValue::SVGLengthValue(SVGLengthMode lengthMode, const String& valueAsString)
+    : m_lengthMode(lengthMode)
 {
-    m_valueInSpecifiedUnits = 0;
-    m_unit = storeUnit(mode, LengthTypeNumber);
-    return setValueAsString(valueAsString);
+    setValueAsString(valueAsString);
 }
 
-bool SVGLengthValue::operator==(const SVGLengthValue& other) const
+SVGLengthValue::SVGLengthValue(float valueInSpecifiedUnits, SVGLengthType lengthType, SVGLengthMode lengthMode)
+    : m_valueInSpecifiedUnits(valueInSpecifiedUnits)
+    , m_lengthType(lengthType)
+    , m_lengthMode(lengthMode)
 {
-    return m_unit == other.m_unit && m_valueInSpecifiedUnits == other.m_valueInSpecifiedUnits;
+    ASSERT(m_lengthType != SVGLengthType::Unknown);
 }
 
-bool SVGLengthValue::operator!=(const SVGLengthValue& other) const
+SVGLengthValue::SVGLengthValue(const SVGLengthContext& context, float value, SVGLengthType lengthType, SVGLengthMode lengthMode)
+    : m_lengthType(lengthType)
+    , m_lengthMode(lengthMode)
 {
-    return !operator==(other);
+    setValue(context, value);
 }
 
-SVGLengthValue SVGLengthValue::construct(SVGLengthMode mode, const String& valueAsString, SVGParsingError& parseError, SVGLengthNegativeValuesMode negativeValuesMode)
+SVGLengthValue SVGLengthValue::construct(SVGLengthMode lengthMode, const String& valueAsString, SVGParsingError& parseError, SVGLengthNegativeValuesMode negativeValuesMode)
 {
-    SVGLengthValue length(mode);
+    SVGLengthValue length(lengthMode);
 
     if (length.setValueAsString(valueAsString).hasException())
         parseError = ParsingAttributeFailedError;
-    else if (negativeValuesMode == ForbidNegativeLengths && length.valueInSpecifiedUnits() < 0)
+    else if (negativeValuesMode == SVGLengthNegativeValuesMode::Forbid && length.valueInSpecifiedUnits() < 0)
         parseError = NegativeValueForbiddenError;
 
     return length;
 }
 
-SVGLengthType SVGLengthValue::unitType() const
+SVGLengthValue SVGLengthValue::blend(const SVGLengthValue& from, const SVGLengthValue& to, float progress)
+{
+    if ((from.isZero() && to.isZero())
+        || from.lengthType() == SVGLengthType::Unknown
+        || to.lengthType() == SVGLengthType::Unknown
+        || (!from.isZero() && from.lengthType() != SVGLengthType::Percentage && to.lengthType() == SVGLengthType::Percentage)
+        || (!to.isZero() && from.lengthType() == SVGLengthType::Percentage && to.lengthType() != SVGLengthType::Percentage)
+        || (!from.isZero() && !to.isZero() && (from.lengthType() == SVGLengthType::Ems || from.lengthType() == SVGLengthType::Exs) && from.lengthType() != to.lengthType()))
+        return to;
+
+    if (from.lengthType() == SVGLengthType::Percentage || to.lengthType() == SVGLengthType::Percentage) {
+        auto fromPercent = from.valueAsPercentage() * 100;
+        auto toPercent = to.valueAsPercentage() * 100;
+        return { WebCore::blend(fromPercent, toPercent, progress), SVGLengthType::Percentage };
+    }
+
+    if (from.lengthType() == to.lengthType() || from.isZero() || to.isZero() || from.isRelative()) {
+        auto fromValue = from.valueInSpecifiedUnits();
+        auto toValue = to.valueInSpecifiedUnits();
+        return { WebCore::blend(fromValue, toValue, progress), to.isZero() ? from.lengthType() : to.lengthType() };
+    }
+
+    SVGLengthContext nonRelativeLengthContext(nullptr);
+    auto fromValueInUserUnits = nonRelativeLengthContext.convertValueToUserUnits(from.valueInSpecifiedUnits(), from.lengthType(), from.lengthMode());
+    if (fromValueInUserUnits.hasException())
+        return { };
+
+    auto fromValue = nonRelativeLengthContext.convertValueFromUserUnits(fromValueInUserUnits.releaseReturnValue(), to.lengthType(), to.lengthMode());
+    if (fromValue.hasException())
+        return { };
+
+    float toValue = to.valueInSpecifiedUnits();
+    return { WebCore::blend(fromValue.releaseReturnValue(), toValue, progress), to.lengthType() };
+}
+
+SVGLengthValue SVGLengthValue::fromCSSPrimitiveValue(const CSSPrimitiveValue& value)
 {
-    return extractType(m_unit);
+    // FIXME: This needs to call value.computeLength() so it can correctly resolve non-absolute units (webkit.org/b/204826).
+    SVGLengthType lengthType = primitiveTypeToLengthType(value.primitiveType());
+    return lengthType == SVGLengthType::Unknown ? SVGLengthValue() : SVGLengthValue(value.floatValue(), lengthType);
 }
 
-SVGLengthMode SVGLengthValue::unitMode() const
+Ref<CSSPrimitiveValue> SVGLengthValue::toCSSPrimitiveValue(const SVGLengthValue& length)
 {
-    return extractMode(m_unit);
+    return CSSPrimitiveValue::create(length.valueInSpecifiedUnits(), lengthTypeToPrimitiveType(length.lengthType()));
+}
+
+ExceptionOr<void> SVGLengthValue::setValueAsString(const String& valueAsString, SVGLengthMode lengthMode)
+{
+    m_valueInSpecifiedUnits = 0;
+    m_lengthMode = lengthMode;
+    m_lengthType = SVGLengthType::Number;
+    return setValueAsString(valueAsString);
 }
 
 float SVGLengthValue::value(const SVGLengthContext& context) const
 {
     auto result = valueForBindings(context);
     if (result.hasException())
         return 0;
     return result.releaseReturnValue();
 }
 
-ExceptionOr<float> SVGLengthValue::valueForBindings(const SVGLengthContext& context) const
+String SVGLengthValue::valueAsString() const
 {
-    return context.convertValueToUserUnits(m_valueInSpecifiedUnits, extractMode(m_unit), extractType(m_unit));
+    return makeString(m_valueInSpecifiedUnits, lengthTypeToString(m_lengthType));
 }
 
-ExceptionOr<void> SVGLengthValue::setValue(const SVGLengthContext& context, float value, SVGLengthMode mode, SVGLengthType unitType)
+ExceptionOr<float> SVGLengthValue::valueForBindings(const SVGLengthContext& context) const
 {
-    // FIXME: Seems like a bug that we change the value of m_unit even if setValue throws an exception.
-    m_unit = storeUnit(mode, unitType);
-    return setValue(value, context);
+    return context.convertValueToUserUnits(m_valueInSpecifiedUnits, m_lengthType, m_lengthMode);
 }
 
-ExceptionOr<void> SVGLengthValue::setValue(float value, const SVGLengthContext& context)
+ExceptionOr<void> SVGLengthValue::setValue(const SVGLengthContext& context, float value)
 {
     // 100% = 100.0 instead of 1.0 for historical reasons, this could eventually be changed
-    if (extractType(m_unit) == LengthTypePercentage)
+    if (m_lengthType == SVGLengthType::Percentage)
         value = value / 100;
 
-    auto convertedValue = context.convertValueFromUserUnits(value, extractMode(m_unit), extractType(m_unit));
+    auto convertedValue = context.convertValueFromUserUnits(value, m_lengthType, m_lengthMode);
     if (convertedValue.hasException())
         return convertedValue.releaseException();
     m_valueInSpecifiedUnits = convertedValue.releaseReturnValue();
     return { };
 }
-float SVGLengthValue::valueAsPercentage() const
-{
-    // 100% = 100.0 instead of 1.0 for historical reasons, this could eventually be changed
-    if (extractType(m_unit) == LengthTypePercentage)
-        return m_valueInSpecifiedUnits / 100;
 
-    return m_valueInSpecifiedUnits;
+ExceptionOr<void> SVGLengthValue::setValue(const SVGLengthContext& context, float value, SVGLengthType lengthType, SVGLengthMode lengthMode)
+{
+    // FIXME: Seems like a bug that we change the value of m_unit even if setValue throws an exception.
+    m_lengthMode = lengthMode;
+    m_lengthType = lengthType;
+    return setValue(context, value);
 }
 
 ExceptionOr<void> SVGLengthValue::setValueAsString(const String& string)
 {
     if (string.isEmpty())
@@ -219,179 +297,33 @@
     const UChar* end = ptr + string.length();
 
     if (!parseNumber(ptr, end, convertedNumber, false))
         return Exception { SyntaxError };
 
-    auto type = parseLengthType(ptr, end);
-    if (type == LengthTypeUnknown)
+    auto lengthType = parseLengthType(ptr, end);
+    if (lengthType == SVGLengthType::Unknown)
         return Exception { SyntaxError };
 
-    m_unit = storeUnit(extractMode(m_unit), type);
+    m_lengthType = lengthType;
     m_valueInSpecifiedUnits = convertedNumber;
     return { };
 }
 
-String SVGLengthValue::valueAsString() const
-{
-    return makeString(FormattedNumber::fixedPrecision(m_valueInSpecifiedUnits), lengthTypeToString(extractType(m_unit)));
-}
-
-ExceptionOr<void> SVGLengthValue::newValueSpecifiedUnits(unsigned short type, float value)
-{
-    if (type == LengthTypeUnknown || type > LengthTypePC)
-        return Exception { NotSupportedError };
-
-    m_unit = storeUnit(extractMode(m_unit), static_cast<SVGLengthType>(type));
-    m_valueInSpecifiedUnits = value;
-    return { };
-}
-
-ExceptionOr<void> SVGLengthValue::convertToSpecifiedUnits(unsigned short type, const SVGLengthContext& context)
+ExceptionOr<void> SVGLengthValue::convertToSpecifiedUnits(const SVGLengthContext& context, SVGLengthType lengthType)
 {
-    if (type == LengthTypeUnknown || type > LengthTypePC)
-        return Exception { NotSupportedError };
-
     auto valueInUserUnits = valueForBindings(context);
     if (valueInUserUnits.hasException())
         return valueInUserUnits.releaseException();
 
-    auto originalUnitAndType = m_unit;
-    m_unit = storeUnit(extractMode(m_unit), static_cast<SVGLengthType>(type));
-    auto result = setValue(valueInUserUnits.releaseReturnValue(), context);
-    if (result.hasException()) {
-        m_unit = originalUnitAndType;
-        return result.releaseException();
-    }
-
-    return { };
-}
-
-SVGLengthValue SVGLengthValue::fromCSSPrimitiveValue(const CSSPrimitiveValue& value)
-{
-    SVGLengthType type;
-    switch (value.primitiveType()) {
-    case CSSPrimitiveValue::CSS_NUMBER:
-        type = LengthTypeNumber;
-        break;
-    case CSSPrimitiveValue::CSS_PERCENTAGE:
-        type = LengthTypePercentage;
-        break;
-    case CSSPrimitiveValue::CSS_EMS:
-        type = LengthTypeEMS;
-        break;
-    case CSSPrimitiveValue::CSS_EXS:
-        type = LengthTypeEXS;
-        break;
-    case CSSPrimitiveValue::CSS_PX:
-        type = LengthTypePX;
-        break;
-    case CSSPrimitiveValue::CSS_CM:
-        type = LengthTypeCM;
-        break;
-    case CSSPrimitiveValue::CSS_MM:
-        type = LengthTypeMM;
-        break;
-    case CSSPrimitiveValue::CSS_IN:
-        type = LengthTypeIN;
-        break;
-    case CSSPrimitiveValue::CSS_PT:
-        type = LengthTypePT;
-        break;
-    case CSSPrimitiveValue::CSS_PC:
-        type = LengthTypePC;
-        break;
-    case CSSPrimitiveValue::CSS_UNKNOWN:
-    default:
+    auto originalLengthType = m_lengthType;
+    m_lengthType = lengthType;
+    auto result = setValue(context, valueInUserUnits.releaseReturnValue());
+    if (!result.hasException())
         return { };
-    };
 
-    SVGLengthValue length;
-    length.newValueSpecifiedUnits(type, value.floatValue());
-    return length;
-}
-
-Ref<CSSPrimitiveValue> SVGLengthValue::toCSSPrimitiveValue(const SVGLengthValue& length)
-{
-    CSSPrimitiveValue::UnitType cssType = CSSPrimitiveValue::CSS_UNKNOWN;
-    switch (length.unitType()) {
-    case LengthTypeUnknown:
-        break;
-    case LengthTypeNumber:
-        cssType = CSSPrimitiveValue::CSS_NUMBER;
-        break;
-    case LengthTypePercentage:
-        cssType = CSSPrimitiveValue::CSS_PERCENTAGE;
-        break;
-    case LengthTypeEMS:
-        cssType = CSSPrimitiveValue::CSS_EMS;
-        break;
-    case LengthTypeEXS:
-        cssType = CSSPrimitiveValue::CSS_EXS;
-        break;
-    case LengthTypePX:
-        cssType = CSSPrimitiveValue::CSS_PX;
-        break;
-    case LengthTypeCM:
-        cssType = CSSPrimitiveValue::CSS_CM;
-        break;
-    case LengthTypeMM:
-        cssType = CSSPrimitiveValue::CSS_MM;
-        break;
-    case LengthTypeIN:
-        cssType = CSSPrimitiveValue::CSS_IN;
-        break;
-    case LengthTypePT:
-        cssType = CSSPrimitiveValue::CSS_PT;
-        break;
-    case LengthTypePC:
-        cssType = CSSPrimitiveValue::CSS_PC;
-        break;
-    };
-
-    return CSSPrimitiveValue::create(length.valueInSpecifiedUnits(), cssType);
-}
-
-SVGLengthMode SVGLengthValue::lengthModeForAnimatedLengthAttribute(const QualifiedName& attrName)
-{
-    using Map = HashMap<QualifiedName, SVGLengthMode>;
-    static NeverDestroyed<Map> map = [] {
-        struct Mode {
-            const QualifiedName& name;
-            SVGLengthMode mode;
-        };
-        static const Mode modes[] = {
-            { SVGNames::xAttr, LengthModeWidth },
-            { SVGNames::yAttr, LengthModeHeight },
-            { SVGNames::cxAttr, LengthModeWidth },
-            { SVGNames::cyAttr, LengthModeHeight },
-            { SVGNames::dxAttr, LengthModeWidth },
-            { SVGNames::dyAttr, LengthModeHeight },
-            { SVGNames::fxAttr, LengthModeWidth },
-            { SVGNames::fyAttr, LengthModeHeight },
-            { SVGNames::widthAttr, LengthModeWidth },
-            { SVGNames::heightAttr, LengthModeHeight },
-            { SVGNames::x1Attr, LengthModeWidth },
-            { SVGNames::x2Attr, LengthModeWidth },
-            { SVGNames::y1Attr, LengthModeHeight },
-            { SVGNames::y2Attr, LengthModeHeight },
-            { SVGNames::refXAttr, LengthModeWidth },
-            { SVGNames::refYAttr, LengthModeHeight },
-            { SVGNames::markerWidthAttr, LengthModeWidth },
-            { SVGNames::markerHeightAttr, LengthModeHeight },
-            { SVGNames::textLengthAttr, LengthModeWidth },
-            { SVGNames::startOffsetAttr, LengthModeWidth },
-        };
-        Map map;
-        for (auto& mode : modes)
-            map.add(mode.name, mode.mode);
-        return map;
-    }();
-
-    auto result = map.get().find(attrName);
-    if (result == map.get().end())
-        return LengthModeOther;
-    return result->value;
+    m_lengthType = originalLengthType;
+    return result.releaseException();
 }
 
 TextStream& operator<<(TextStream& ts, const SVGLengthValue& length)
 {
     ts << length.valueAsString();
