diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringCommon.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringCommon.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringCommon.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringCommon.h
@@ -170,11 +170,11 @@
     if (length & 1 && *reinterpret_cast<const UChar*>(a) != *reinterpret_cast<const UChar*>(b))
         return false;
 
     return true;
 }
-#elif PLATFORM(IOS_FAMILY) && WTF_ARM_ARCH_AT_LEAST(7) && !ASAN_ENABLED
+#elif OS(DARWIN) && WTF_ARM_ARCH_AT_LEAST(7) && !ASAN_ENABLED
 ALWAYS_INLINE bool equal(const LChar* a, const LChar* b, unsigned length)
 {
     bool isEqual = false;
     uint32_t aValue;
     uint32_t bValue;
@@ -568,15 +568,16 @@
         if (haystack.is8Bit())
             return WTF::find(haystack.characters8(), haystack.length(), needle[0], start);
         return WTF::find(haystack.characters16(), haystack.length(), needle[0], start);
     }
 
-    if (!needleLength)
-        return std::min(start, haystack.length());
-
     if (start > haystack.length())
         return notFound;
+
+    if (!needleLength)
+        return start;
+
     unsigned searchLength = haystack.length() - start;
     if (needleLength > searchLength)
         return notFound;
 
     if (haystack.is8Bit()) {
@@ -609,11 +610,11 @@
     return charactersLength == lowercaseLettersStringLength && equalLettersIgnoringASCIICase(characters, lowercaseLetters, lowercaseLettersStringLength);
 }
 
 template<typename StringClass> bool inline hasPrefixWithLettersIgnoringASCIICaseCommon(const StringClass& string, const char* lowercaseLetters, unsigned length)
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     ASSERT(*lowercaseLetters);
     for (const char* letter = lowercaseLetters; *letter; ++letter)
         ASSERT(toASCIILowerUnchecked(*letter) == *letter);
 #endif
     ASSERT(string.length() >= length);
