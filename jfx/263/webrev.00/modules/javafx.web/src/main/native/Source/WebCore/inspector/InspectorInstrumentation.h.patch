diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorInstrumentation.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorInstrumentation.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorInstrumentation.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorInstrumentation.h
@@ -34,32 +34,36 @@
 #include "CSSSelector.h"
 #include "CallTracerTypes.h"
 #include "CanvasBase.h"
 #include "CanvasRenderingContext.h"
 #include "Database.h"
+#include "DeclarativeAnimation.h"
 #include "DocumentThreadableLoader.h"
 #include "Element.h"
 #include "EventTarget.h"
 #include "FormData.h"
 #include "Frame.h"
 #include "HitTestResult.h"
-#include "InspectorController.h"
-#include "InspectorInstrumentationCookie.h"
-#include "OffscreenCanvas.h"
+#include "InspectorInstrumentationPublic.h"
 #include "Page.h"
 #include "StorageArea.h"
-#include "WorkerGlobalScope.h"
-#include "WorkerInspectorController.h"
-#include <JavaScriptCore/JSCInlines.h>
+#include "WebAnimation.h"
+#include <JavaScriptCore/ConsoleMessage.h>
 #include <initializer_list>
+#include <wtf/CompletionHandler.h>
 #include <wtf/MemoryPressureHandler.h>
 #include <wtf/RefPtr.h>
 
 #if ENABLE(WEBGL)
 #include "WebGLRenderingContextBase.h"
 #endif
 
+#if ENABLE(WEBGPU)
+#include "GPUCanvasContext.h"
+#include "WebGPUPipeline.h"
+#endif
+
 namespace Inspector {
 class ConsoleMessage;
 class ScriptArguments;
 class ScriptCallStack;
 }
@@ -74,10 +78,11 @@
 class DocumentLoader;
 class EventListener;
 class HTTPHeaderMap;
 class InspectorTimelineAgent;
 class InstrumentingAgents;
+class KeyframeEffect;
 class NetworkLoadMetrics;
 class Node;
 class PseudoElement;
 class RegisteredEventListener;
 class RenderLayer;
@@ -86,22 +91,29 @@
 class ResourceRequest;
 class ResourceResponse;
 class ScriptExecutionContext;
 class SecurityOrigin;
 class ShadowRoot;
+class SharedBuffer;
 class TimerBase;
+class WebKitNamedFlow;
+class WorkerGlobalScope;
+class WorkerInspectorProxy;
+
 #if ENABLE(WEBGL)
 class WebGLProgram;
 #endif
-class WebKitNamedFlow;
-class WorkerInspectorProxy;
 
-enum class StorageType;
+#if ENABLE(WEBGPU)
+class WebGPUDevice;
+class WebGPUSwapChain;
+#endif
 
-struct WebSocketFrame;
+enum class StorageType : uint8_t;
 
-#define FAST_RETURN_IF_NO_FRONTENDS(value) if (LIKELY(!InspectorInstrumentation::hasFrontends())) return value;
+struct ComputedEffectTiming;
+struct WebSocketFrame;
 
 class InspectorInstrumentation {
 public:
     static void didClearWindowObjectInWorld(Frame&, DOMWrapperWorld&);
     static bool isDebuggerPaused(Frame*);
@@ -141,41 +153,41 @@
     static void willSendXMLHttpRequest(ScriptExecutionContext*, const String& url);
     static void willFetch(ScriptExecutionContext&, const String& url);
     static void didInstallTimer(ScriptExecutionContext&, int timerId, Seconds timeout, bool singleShot);
     static void didRemoveTimer(ScriptExecutionContext&, int timerId);
 
-    static void didPostMessage(Frame&, TimerBase&, JSC::ExecState&);
+    static void didPostMessage(Frame&, TimerBase&, JSC::JSGlobalObject&);
     static void didFailPostMessage(Frame&, TimerBase&);
     static void willDispatchPostMessage(Frame&, TimerBase&);
     static void didDispatchPostMessage(Frame&, TimerBase&);
 
-    static InspectorInstrumentationCookie willCallFunction(ScriptExecutionContext*, const String& scriptName, int scriptLine, int scriptColumn);
-    static void didCallFunction(const InspectorInstrumentationCookie&, ScriptExecutionContext*);
+    static void willCallFunction(ScriptExecutionContext*, const String& scriptName, int scriptLine, int scriptColumn);
+    static void didCallFunction(ScriptExecutionContext*);
     static void didAddEventListener(EventTarget&, const AtomString& eventType, EventListener&, bool capture);
     static void willRemoveEventListener(EventTarget&, const AtomString& eventType, EventListener&, bool capture);
     static bool isEventListenerDisabled(EventTarget&, const AtomString& eventType, EventListener&, bool capture);
-    static InspectorInstrumentationCookie willDispatchEvent(Document&, const Event&, bool hasEventListeners);
-    static void didDispatchEvent(const InspectorInstrumentationCookie&, bool defaultPrevented);
+    static void willDispatchEvent(Document&, const Event&);
+    static void didDispatchEvent(Document&, const Event&);
     static void willHandleEvent(ScriptExecutionContext&, Event&, const RegisteredEventListener&);
     static void didHandleEvent(ScriptExecutionContext&);
-    static InspectorInstrumentationCookie willDispatchEventOnWindow(Frame*, const Event&, DOMWindow&);
-    static void didDispatchEventOnWindow(const InspectorInstrumentationCookie&, bool defaultPrevented);
+    static void willDispatchEventOnWindow(Frame*, const Event&, DOMWindow&);
+    static void didDispatchEventOnWindow(Frame*, const Event&);
     static void eventDidResetAfterDispatch(const Event&);
-    static InspectorInstrumentationCookie willEvaluateScript(Frame&, const String& url, int lineNumber, int columnNumber);
-    static void didEvaluateScript(const InspectorInstrumentationCookie&, Frame&);
-    static InspectorInstrumentationCookie willFireTimer(ScriptExecutionContext&, int timerId, bool oneShot);
-    static void didFireTimer(const InspectorInstrumentationCookie&);
+    static void willEvaluateScript(Frame&, const String& url, int lineNumber, int columnNumber);
+    static void didEvaluateScript(Frame&);
+    static void willFireTimer(ScriptExecutionContext&, int timerId, bool oneShot);
+    static void didFireTimer(ScriptExecutionContext&);
     static void didInvalidateLayout(Frame&);
-    static InspectorInstrumentationCookie willLayout(Frame&);
-    static void didLayout(const InspectorInstrumentationCookie&, RenderObject&);
+    static void willLayout(Frame&);
+    static void didLayout(Frame&, RenderObject&);
     static void didScroll(Page&);
     static void willComposite(Frame&);
     static void didComposite(Frame&);
     static void willPaint(RenderObject&);
     static void didPaint(RenderObject&, const LayoutRect&);
-    static InspectorInstrumentationCookie willRecalculateStyle(Document&);
-    static void didRecalculateStyle(const InspectorInstrumentationCookie&);
+    static void willRecalculateStyle(Document&);
+    static void didRecalculateStyle(Document&);
     static void didScheduleStyleRecalculation(Document&);
     static void applyUserAgentOverride(Frame&, String&);
     static void applyEmulatedMedia(Frame&, String&);
 
     static void willSendRequest(Frame*, unsigned long identifier, DocumentLoader*, ResourceRequest&, const ResourceResponse& redirectResponse);
@@ -217,37 +229,42 @@
     static void frameScheduledNavigation(Frame&, Seconds delay);
     static void frameClearedScheduledNavigation(Frame&);
     static void defaultAppearanceDidChange(Page&, bool useDarkAppearance);
     static void willDestroyCachedResource(CachedResource&);
 
+    static bool willInterceptRequest(const Frame*, const ResourceRequest&);
+    static bool shouldInterceptResponse(const Frame&, const ResourceResponse&);
+    static void interceptResponse(const Frame&, const ResourceResponse&, unsigned long identifier, CompletionHandler<void(const ResourceResponse&, RefPtr<SharedBuffer>)>&&);
+
     static void addMessageToConsole(Page&, std::unique_ptr<Inspector::ConsoleMessage>);
     static void addMessageToConsole(WorkerGlobalScope&, std::unique_ptr<Inspector::ConsoleMessage>);
 
-    static void consoleCount(Page&, JSC::ExecState*, const String& label);
-    static void consoleCount(WorkerGlobalScope&, JSC::ExecState*, const String& label);
-    static void consoleCountReset(Page&, JSC::ExecState*, const String& label);
-    static void consoleCountReset(WorkerGlobalScope&, JSC::ExecState*, const String& label);
+    static void consoleCount(Page&, JSC::JSGlobalObject*, const String& label);
+    static void consoleCount(WorkerGlobalScope&, JSC::JSGlobalObject*, const String& label);
+    static void consoleCountReset(Page&, JSC::JSGlobalObject*, const String& label);
+    static void consoleCountReset(WorkerGlobalScope&, JSC::JSGlobalObject*, const String& label);
 
     static void takeHeapSnapshot(Frame&, const String& title);
-    static void startConsoleTiming(Frame&, JSC::ExecState*, const String& label);
-    static void startConsoleTiming(WorkerGlobalScope&, JSC::ExecState*, const String& label);
-    static void logConsoleTiming(Frame&, JSC::ExecState*, const String& label, Ref<Inspector::ScriptArguments>&&);
-    static void logConsoleTiming(WorkerGlobalScope&, JSC::ExecState*, const String& label, Ref<Inspector::ScriptArguments>&&);
-    static void stopConsoleTiming(Frame&, JSC::ExecState*, const String& label);
-    static void stopConsoleTiming(WorkerGlobalScope&, JSC::ExecState*, const String& label);
+    static void startConsoleTiming(Frame&, JSC::JSGlobalObject*, const String& label);
+    static void startConsoleTiming(WorkerGlobalScope&, JSC::JSGlobalObject*, const String& label);
+    static void logConsoleTiming(Frame&, JSC::JSGlobalObject*, const String& label, Ref<Inspector::ScriptArguments>&&);
+    static void logConsoleTiming(WorkerGlobalScope&, JSC::JSGlobalObject*, const String& label, Ref<Inspector::ScriptArguments>&&);
+    static void stopConsoleTiming(Frame&, JSC::JSGlobalObject*, const String& label);
+    static void stopConsoleTiming(WorkerGlobalScope&, JSC::JSGlobalObject*, const String& label);
     static void consoleTimeStamp(Frame&, Ref<Inspector::ScriptArguments>&&);
-    static void startProfiling(Page&, JSC::ExecState*, const String& title);
-    static void stopProfiling(Page&, JSC::ExecState*, const String& title);
-    static void consoleStartRecordingCanvas(CanvasRenderingContext&, JSC::ExecState&, JSC::JSObject* options);
+    static void startProfiling(Page&, JSC::JSGlobalObject*, const String& title);
+    static void stopProfiling(Page&, JSC::JSGlobalObject*, const String& title);
+    static void consoleStartRecordingCanvas(CanvasRenderingContext&, JSC::JSGlobalObject&, JSC::JSObject* options);
+    static void consoleStopRecordingCanvas(CanvasRenderingContext&);
 
     static void didRequestAnimationFrame(Document&, int callbackId);
     static void didCancelAnimationFrame(Document&, int callbackId);
-    static InspectorInstrumentationCookie willFireAnimationFrame(Document&, int callbackId);
-    static void didFireAnimationFrame(const InspectorInstrumentationCookie&);
+    static void willFireAnimationFrame(Document&, int callbackId);
+    static void didFireAnimationFrame(Document&);
 
-    static InspectorInstrumentationCookie willFireObserverCallback(ScriptExecutionContext&, const String& callbackType);
-    static void didFireObserverCallback(const InspectorInstrumentationCookie&);
+    static void willFireObserverCallback(ScriptExecutionContext&, const String& callbackType);
+    static void didFireObserverCallback(ScriptExecutionContext&);
 
     static void didOpenDatabase(Database&);
 
     static void didDispatchDOMStorageEvent(Page&, const String& key, const String& oldValue, const String& newValue, StorageType, SecurityOrigin*);
 
@@ -272,25 +289,39 @@
     static void didChangeCanvasMemory(CanvasRenderingContext&);
     static void recordCanvasAction(CanvasRenderingContext&, const String&, std::initializer_list<RecordCanvasActionVariant>&& = { });
     static void didFinishRecordingCanvasFrame(CanvasRenderingContext&, bool forceDispatch = false);
 #if ENABLE(WEBGL)
     static void didEnableExtension(WebGLRenderingContextBase&, const String&);
-    static void didCreateProgram(WebGLRenderingContextBase&, WebGLProgram&);
-    static void willDeleteProgram(WebGLRenderingContextBase&, WebGLProgram&);
-    static bool isShaderProgramDisabled(WebGLRenderingContextBase&, WebGLProgram&);
-    static bool isShaderProgramHighlighted(WebGLRenderingContextBase&, WebGLProgram&);
+    static void didCreateWebGLProgram(WebGLRenderingContextBase&, WebGLProgram&);
+    static void willDestroyWebGLProgram(WebGLProgram&);
+    static bool isWebGLProgramDisabled(WebGLRenderingContextBase&, WebGLProgram&);
+    static bool isWebGLProgramHighlighted(WebGLRenderingContextBase&, WebGLProgram&);
+#endif
+#if ENABLE(WEBGPU)
+    static void didCreateWebGPUDevice(WebGPUDevice&);
+    static void willDestroyWebGPUDevice(WebGPUDevice&);
+    static void willConfigureSwapChain(GPUCanvasContext&, WebGPUSwapChain&);
+    static void didCreateWebGPUPipeline(WebGPUDevice&, WebGPUPipeline&);
+    static void willDestroyWebGPUPipeline(WebGPUPipeline&);
 #endif
 
+    static void willApplyKeyframeEffect(Element&, KeyframeEffect&, ComputedEffectTiming);
+    static void didSetWebAnimationEffect(WebAnimation&);
+    static void didChangeWebAnimationEffectTiming(WebAnimation&);
+    static void didChangeWebAnimationEffectTarget(WebAnimation&);
+    static void didCreateWebAnimation(WebAnimation&);
+    static void willDestroyWebAnimation(WebAnimation&);
+
     static void networkStateChanged(Page&);
     static void updateApplicationCacheStatus(Frame*);
 
     static void layerTreeDidChange(Page*);
     static void renderLayerDestroyed(Page*, const RenderLayer&);
 
     static void frontendCreated();
     static void frontendDeleted();
-    static bool hasFrontends() { return s_frontendCounter; }
+    static bool hasFrontends() { return InspectorInstrumentationPublic::hasFrontends(); }
 
     static void firstFrontendCreated();
     static void lastFrontendDeleted();
 
     static bool consoleAgentEnabled(ScriptExecutionContext*);
@@ -340,41 +371,41 @@
     static void willSendXMLHttpRequestImpl(InstrumentingAgents&, const String& url);
     static void willFetchImpl(InstrumentingAgents&, const String& url);
     static void didInstallTimerImpl(InstrumentingAgents&, int timerId, Seconds timeout, bool singleShot, ScriptExecutionContext&);
     static void didRemoveTimerImpl(InstrumentingAgents&, int timerId, ScriptExecutionContext&);
 
-    static void didPostMessageImpl(InstrumentingAgents&, const TimerBase&, JSC::ExecState&);
+    static void didPostMessageImpl(InstrumentingAgents&, const TimerBase&, JSC::JSGlobalObject&);
     static void didFailPostMessageImpl(InstrumentingAgents&, const TimerBase&);
     static void willDispatchPostMessageImpl(InstrumentingAgents&, const TimerBase&);
     static void didDispatchPostMessageImpl(InstrumentingAgents&, const TimerBase&);
 
-    static InspectorInstrumentationCookie willCallFunctionImpl(InstrumentingAgents&, const String& scriptName, int scriptLine, int scriptColumn, ScriptExecutionContext*);
-    static void didCallFunctionImpl(const InspectorInstrumentationCookie&, ScriptExecutionContext*);
+    static void willCallFunctionImpl(InstrumentingAgents&, const String& scriptName, int scriptLine, int scriptColumn, ScriptExecutionContext*);
+    static void didCallFunctionImpl(InstrumentingAgents&, ScriptExecutionContext*);
     static void didAddEventListenerImpl(InstrumentingAgents&, EventTarget&, const AtomString& eventType, EventListener&, bool capture);
     static void willRemoveEventListenerImpl(InstrumentingAgents&, EventTarget&, const AtomString& eventType, EventListener&, bool capture);
     static bool isEventListenerDisabledImpl(InstrumentingAgents&, EventTarget&, const AtomString& eventType, EventListener&, bool capture);
-    static InspectorInstrumentationCookie willDispatchEventImpl(InstrumentingAgents&, Document&, const Event&, bool hasEventListeners);
+    static void willDispatchEventImpl(InstrumentingAgents&, Document&, const Event&);
     static void willHandleEventImpl(InstrumentingAgents&, Event&, const RegisteredEventListener&);
     static void didHandleEventImpl(InstrumentingAgents&);
-    static void didDispatchEventImpl(const InspectorInstrumentationCookie&, bool defaultPrevented);
-    static InspectorInstrumentationCookie willDispatchEventOnWindowImpl(InstrumentingAgents&, const Event&, DOMWindow&);
-    static void didDispatchEventOnWindowImpl(const InspectorInstrumentationCookie&, bool defaultPrevented);
+    static void didDispatchEventImpl(InstrumentingAgents&, const Event&);
+    static void willDispatchEventOnWindowImpl(InstrumentingAgents&, const Event&, DOMWindow&);
+    static void didDispatchEventOnWindowImpl(InstrumentingAgents&, const Event&);
     static void eventDidResetAfterDispatchImpl(InstrumentingAgents&, const Event&);
-    static InspectorInstrumentationCookie willEvaluateScriptImpl(InstrumentingAgents&, Frame&, const String& url, int lineNumber, int columnNumber);
-    static void didEvaluateScriptImpl(const InspectorInstrumentationCookie&, Frame&);
-    static InspectorInstrumentationCookie willFireTimerImpl(InstrumentingAgents&, int timerId, bool oneShot, ScriptExecutionContext&);
-    static void didFireTimerImpl(const InspectorInstrumentationCookie&);
+    static void willEvaluateScriptImpl(InstrumentingAgents&, Frame&, const String& url, int lineNumber, int columnNumber);
+    static void didEvaluateScriptImpl(InstrumentingAgents&, Frame&);
+    static void willFireTimerImpl(InstrumentingAgents&, int timerId, bool oneShot, ScriptExecutionContext&);
+    static void didFireTimerImpl(InstrumentingAgents&);
     static void didInvalidateLayoutImpl(InstrumentingAgents&, Frame&);
-    static InspectorInstrumentationCookie willLayoutImpl(InstrumentingAgents&, Frame&);
-    static void didLayoutImpl(const InspectorInstrumentationCookie&, RenderObject&);
+    static void willLayoutImpl(InstrumentingAgents&, Frame&);
+    static void didLayoutImpl(InstrumentingAgents&, RenderObject&);
     static void didScrollImpl(InstrumentingAgents&);
     static void willCompositeImpl(InstrumentingAgents&, Frame&);
     static void didCompositeImpl(InstrumentingAgents&);
     static void willPaintImpl(InstrumentingAgents&, RenderObject&);
     static void didPaintImpl(InstrumentingAgents&, RenderObject&, const LayoutRect&);
-    static InspectorInstrumentationCookie willRecalculateStyleImpl(InstrumentingAgents&, Document&);
-    static void didRecalculateStyleImpl(const InspectorInstrumentationCookie&);
+    static void willRecalculateStyleImpl(InstrumentingAgents&, Document&);
+    static void didRecalculateStyleImpl(InstrumentingAgents&);
     static void didScheduleStyleRecalculationImpl(InstrumentingAgents&, Document&);
     static void applyUserAgentOverrideImpl(InstrumentingAgents&, String&);
     static void applyEmulatedMediaImpl(InstrumentingAgents&, String&);
 
     static void willSendRequestImpl(InstrumentingAgents&, unsigned long identifier, DocumentLoader*, ResourceRequest&, const ResourceResponse& redirectResponse);
@@ -402,32 +433,37 @@
     static void frameScheduledNavigationImpl(InstrumentingAgents&, Frame&, Seconds delay);
     static void frameClearedScheduledNavigationImpl(InstrumentingAgents&, Frame&);
     static void defaultAppearanceDidChangeImpl(InstrumentingAgents&, bool useDarkAppearance);
     static void willDestroyCachedResourceImpl(CachedResource&);
 
+    static bool willInterceptRequestImpl(InstrumentingAgents&, const ResourceRequest&);
+    static bool shouldInterceptResponseImpl(InstrumentingAgents&, const ResourceResponse&);
+    static void interceptResponseImpl(InstrumentingAgents&, const ResourceResponse&, unsigned long identifier, CompletionHandler<void(const ResourceResponse&, RefPtr<SharedBuffer>)>&&);
+
     static void addMessageToConsoleImpl(InstrumentingAgents&, std::unique_ptr<Inspector::ConsoleMessage>);
 
-    static void consoleCountImpl(InstrumentingAgents&, JSC::ExecState*, const String& label);
-    static void consoleCountResetImpl(InstrumentingAgents&, JSC::ExecState*, const String& label);
+    static void consoleCountImpl(InstrumentingAgents&, JSC::JSGlobalObject*, const String& label);
+    static void consoleCountResetImpl(InstrumentingAgents&, JSC::JSGlobalObject*, const String& label);
     static void takeHeapSnapshotImpl(InstrumentingAgents&, const String& title);
-    static void startConsoleTimingImpl(InstrumentingAgents&, Frame&, JSC::ExecState*, const String& label);
-    static void startConsoleTimingImpl(InstrumentingAgents&, JSC::ExecState*, const String& label);
-    static void logConsoleTimingImpl(InstrumentingAgents&, JSC::ExecState*, const String& label, Ref<Inspector::ScriptArguments>&&);
-    static void stopConsoleTimingImpl(InstrumentingAgents&, Frame&, JSC::ExecState*, const String& label);
-    static void stopConsoleTimingImpl(InstrumentingAgents&, JSC::ExecState*, const String& label);
+    static void startConsoleTimingImpl(InstrumentingAgents&, Frame&, JSC::JSGlobalObject*, const String& label);
+    static void startConsoleTimingImpl(InstrumentingAgents&, JSC::JSGlobalObject*, const String& label);
+    static void logConsoleTimingImpl(InstrumentingAgents&, JSC::JSGlobalObject*, const String& label, Ref<Inspector::ScriptArguments>&&);
+    static void stopConsoleTimingImpl(InstrumentingAgents&, Frame&, JSC::JSGlobalObject*, const String& label);
+    static void stopConsoleTimingImpl(InstrumentingAgents&, JSC::JSGlobalObject*, const String& label);
     static void consoleTimeStampImpl(InstrumentingAgents&, Frame&, Ref<Inspector::ScriptArguments>&&);
-    static void startProfilingImpl(InstrumentingAgents&, JSC::ExecState*, const String& title);
-    static void stopProfilingImpl(InstrumentingAgents&, JSC::ExecState*, const String& title);
-    static void consoleStartRecordingCanvasImpl(InstrumentingAgents&, CanvasRenderingContext&, JSC::ExecState&, JSC::JSObject* options);
+    static void startProfilingImpl(InstrumentingAgents&, JSC::JSGlobalObject*, const String& title);
+    static void stopProfilingImpl(InstrumentingAgents&, JSC::JSGlobalObject*, const String& title);
+    static void consoleStartRecordingCanvasImpl(InstrumentingAgents&, CanvasRenderingContext&, JSC::JSGlobalObject&, JSC::JSObject* options);
+    static void consoleStopRecordingCanvasImpl(InstrumentingAgents&, CanvasRenderingContext&);
 
     static void didRequestAnimationFrameImpl(InstrumentingAgents&, int callbackId, Document&);
     static void didCancelAnimationFrameImpl(InstrumentingAgents&, int callbackId, Document&);
-    static InspectorInstrumentationCookie willFireAnimationFrameImpl(InstrumentingAgents&, int callbackId, Document&);
-    static void didFireAnimationFrameImpl(const InspectorInstrumentationCookie&);
+    static void willFireAnimationFrameImpl(InstrumentingAgents&, int callbackId, Document&);
+    static void didFireAnimationFrameImpl(InstrumentingAgents&);
 
-    static InspectorInstrumentationCookie willFireObserverCallbackImpl(InstrumentingAgents&, const String&, ScriptExecutionContext&);
-    static void didFireObserverCallbackImpl(const InspectorInstrumentationCookie&);
+    static void willFireObserverCallbackImpl(InstrumentingAgents&, const String&, ScriptExecutionContext&);
+    static void didFireObserverCallbackImpl(InstrumentingAgents&);
 
     static void didOpenDatabaseImpl(InstrumentingAgents&, Database&);
 
     static void didDispatchDOMStorageEventImpl(InstrumentingAgents&, const String& key, const String& oldValue, const String& newValue, StorageType, SecurityOrigin*);
 
@@ -455,34 +491,45 @@
     static void didChangeCanvasMemoryImpl(InstrumentingAgents&, CanvasRenderingContext&);
     static void recordCanvasActionImpl(InstrumentingAgents&, CanvasRenderingContext&, const String&, std::initializer_list<RecordCanvasActionVariant>&& = { });
     static void didFinishRecordingCanvasFrameImpl(InstrumentingAgents&, CanvasRenderingContext&, bool forceDispatch = false);
 #if ENABLE(WEBGL)
     static void didEnableExtensionImpl(InstrumentingAgents&, WebGLRenderingContextBase&, const String&);
-    static void didCreateProgramImpl(InstrumentingAgents&, WebGLRenderingContextBase&, WebGLProgram&);
-    static void willDeleteProgramImpl(InstrumentingAgents&, WebGLProgram&);
-    static bool isShaderProgramDisabledImpl(InstrumentingAgents&, WebGLProgram&);
-    static bool isShaderProgramHighlightedImpl(InstrumentingAgents&, WebGLProgram&);
+    static void didCreateWebGLProgramImpl(InstrumentingAgents&, WebGLRenderingContextBase&, WebGLProgram&);
+    static void willDestroyWebGLProgramImpl(InstrumentingAgents&, WebGLProgram&);
+    static bool isWebGLProgramDisabledImpl(InstrumentingAgents&, WebGLProgram&);
+    static bool isWebGLProgramHighlightedImpl(InstrumentingAgents&, WebGLProgram&);
+#endif
+#if ENABLE(WEBGPU)
+    static void didCreateWebGPUDeviceImpl(InstrumentingAgents&, WebGPUDevice&);
+    static void willDestroyWebGPUDeviceImpl(InstrumentingAgents&, WebGPUDevice&);
+    static void willConfigureSwapChainImpl(InstrumentingAgents&, GPUCanvasContext&, WebGPUSwapChain&);
+    static void didCreateWebGPUPipelineImpl(InstrumentingAgents&, WebGPUDevice&, WebGPUPipeline&);
+    static void willDestroyWebGPUPipelineImpl(InstrumentingAgents&, WebGPUPipeline&);
+    static InstrumentingAgents* instrumentingAgentsForWebGPUDevice(WebGPUDevice&);
 #endif
 
+    static void willApplyKeyframeEffectImpl(InstrumentingAgents&, Element&, KeyframeEffect&, ComputedEffectTiming);
+    static void didSetWebAnimationEffectImpl(InstrumentingAgents&, WebAnimation&);
+    static void didChangeWebAnimationEffectTimingImpl(InstrumentingAgents&, WebAnimation&);
+    static void didChangeWebAnimationEffectTargetImpl(InstrumentingAgents&, WebAnimation&);
+    static void didCreateWebAnimationImpl(InstrumentingAgents&, WebAnimation&);
+    static void willDestroyWebAnimationImpl(InstrumentingAgents&, WebAnimation&);
+
     static void layerTreeDidChangeImpl(InstrumentingAgents&);
     static void renderLayerDestroyedImpl(InstrumentingAgents&, const RenderLayer&);
 
     static InstrumentingAgents& instrumentingAgentsForPage(Page&);
     static InstrumentingAgents& instrumentingAgentsForWorkerGlobalScope(WorkerGlobalScope&);
 
-    static InstrumentingAgents* instrumentingAgentsForFrame(Frame&);
-    static InstrumentingAgents* instrumentingAgentsForFrame(Frame*);
+    static InstrumentingAgents* instrumentingAgentsForFrame(const Frame&);
+    static InstrumentingAgents* instrumentingAgentsForFrame(const Frame*);
     static InstrumentingAgents* instrumentingAgentsForContext(ScriptExecutionContext*);
     static InstrumentingAgents* instrumentingAgentsForContext(ScriptExecutionContext&);
     static InstrumentingAgents* instrumentingAgentsForDocument(Document&);
     static InstrumentingAgents* instrumentingAgentsForDocument(Document*);
     static InstrumentingAgents* instrumentingAgentsForRenderer(RenderObject&);
     static InstrumentingAgents* instrumentingAgentsForWorkerGlobalScope(WorkerGlobalScope*);
-
-    static InspectorTimelineAgent* retrieveTimelineAgent(const InspectorInstrumentationCookie&);
-
-    WEBCORE_EXPORT static int s_frontendCounter;
 };
 
 inline void InspectorInstrumentation::didClearWindowObjectInWorld(Frame& frame, DOMWrapperWorld& world)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
@@ -758,11 +805,11 @@
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForContext(target.scriptExecutionContext()))
         return isEventListenerDisabledImpl(*instrumentingAgents, target, eventType, listener, capture);
     return false;
 }
 
-inline void InspectorInstrumentation::didPostMessage(Frame& frame, TimerBase& timer, JSC::ExecState& state)
+inline void InspectorInstrumentation::didPostMessage(Frame& frame, TimerBase& timer, JSC::JSGlobalObject& state)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForFrame(frame))
         didPostMessageImpl(*instrumentingAgents, timer, state);
 }
@@ -786,38 +833,36 @@
     FAST_RETURN_IF_NO_FRONTENDS(void());
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForFrame(frame))
         didDispatchPostMessageImpl(*instrumentingAgents, timer);
 }
 
-inline InspectorInstrumentationCookie InspectorInstrumentation::willCallFunction(ScriptExecutionContext* context, const String& scriptName, int scriptLine, int scriptColumn)
+inline void InspectorInstrumentation::willCallFunction(ScriptExecutionContext* context, const String& scriptName, int scriptLine, int scriptColumn)
 {
-    FAST_RETURN_IF_NO_FRONTENDS(InspectorInstrumentationCookie());
-    if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForContext(context))
-        return willCallFunctionImpl(*instrumentingAgents, scriptName, scriptLine, scriptColumn, context);
-    return InspectorInstrumentationCookie();
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(context))
+        willCallFunctionImpl(*instrumentingAgents, scriptName, scriptLine, scriptColumn, context);
 }
 
-inline void InspectorInstrumentation::didCallFunction(const InspectorInstrumentationCookie& cookie, ScriptExecutionContext* context)
+inline void InspectorInstrumentation::didCallFunction(ScriptExecutionContext* context)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
-    if (cookie.isValid())
-        didCallFunctionImpl(cookie, context);
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(context))
+        didCallFunctionImpl(*instrumentingAgents, context);
 }
 
-inline InspectorInstrumentationCookie InspectorInstrumentation::willDispatchEvent(Document& document, const Event& event, bool hasEventListeners)
+inline void InspectorInstrumentation::willDispatchEvent(Document& document, const Event& event)
 {
-    FAST_RETURN_IF_NO_FRONTENDS(InspectorInstrumentationCookie());
-    if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForDocument(document))
-        return willDispatchEventImpl(*instrumentingAgents, document, event, hasEventListeners);
-    return InspectorInstrumentationCookie();
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForDocument(document))
+        willDispatchEventImpl(*instrumentingAgents, document, event);
 }
 
-inline void InspectorInstrumentation::didDispatchEvent(const InspectorInstrumentationCookie& cookie, bool defaultPrevented)
+inline void InspectorInstrumentation::didDispatchEvent(Document& document, const Event& event)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
-    if (cookie.isValid())
-        didDispatchEventImpl(cookie, defaultPrevented);
+    if (auto* instrumentingAgents = instrumentingAgentsForDocument(document))
+        didDispatchEventImpl(*instrumentingAgents, event);
 }
 
 inline void InspectorInstrumentation::willHandleEvent(ScriptExecutionContext& context, Event& event, const RegisteredEventListener& listener)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
@@ -830,23 +875,22 @@
     FAST_RETURN_IF_NO_FRONTENDS(void());
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForContext(context))
         return didHandleEventImpl(*instrumentingAgents);
 }
 
-inline InspectorInstrumentationCookie InspectorInstrumentation::willDispatchEventOnWindow(Frame* frame, const Event& event, DOMWindow& window)
+inline void InspectorInstrumentation::willDispatchEventOnWindow(Frame* frame, const Event& event, DOMWindow& window)
 {
-    FAST_RETURN_IF_NO_FRONTENDS(InspectorInstrumentationCookie());
-    if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForFrame(frame))
-        return willDispatchEventOnWindowImpl(*instrumentingAgents, event, window);
-    return InspectorInstrumentationCookie();
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForFrame(frame))
+        willDispatchEventOnWindowImpl(*instrumentingAgents, event, window);
 }
 
-inline void InspectorInstrumentation::didDispatchEventOnWindow(const InspectorInstrumentationCookie& cookie, bool defaultPrevented)
+inline void InspectorInstrumentation::didDispatchEventOnWindow(Frame* frame, const Event& event)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
-    if (cookie.isValid())
-        didDispatchEventOnWindowImpl(cookie, defaultPrevented);
+    if (auto* instrumentingAgents = instrumentingAgentsForFrame(frame))
+        didDispatchEventOnWindowImpl(*instrumentingAgents, event);
 }
 
 inline void InspectorInstrumentation::eventDidResetAfterDispatch(const Event& event)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
@@ -857,60 +901,57 @@
     auto* node = downcast<Node>(event.target());
     if (auto* instrumentingAgents = instrumentingAgentsForContext(node->scriptExecutionContext()))
         return eventDidResetAfterDispatchImpl(*instrumentingAgents, event);
 }
 
-inline InspectorInstrumentationCookie InspectorInstrumentation::willEvaluateScript(Frame& frame, const String& url, int lineNumber, int columnNumber)
+inline void InspectorInstrumentation::willEvaluateScript(Frame& frame, const String& url, int lineNumber, int columnNumber)
 {
-    FAST_RETURN_IF_NO_FRONTENDS(InspectorInstrumentationCookie());
-    if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForFrame(frame))
-        return willEvaluateScriptImpl(*instrumentingAgents, frame, url, lineNumber, columnNumber);
-    return InspectorInstrumentationCookie();
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForFrame(frame))
+        willEvaluateScriptImpl(*instrumentingAgents, frame, url, lineNumber, columnNumber);
 }
 
-inline void InspectorInstrumentation::didEvaluateScript(const InspectorInstrumentationCookie& cookie, Frame& frame)
+inline void InspectorInstrumentation::didEvaluateScript(Frame& frame)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
-    if (cookie.isValid())
-        didEvaluateScriptImpl(cookie, frame);
+    if (auto* instrumentingAgents = instrumentingAgentsForFrame(frame))
+        didEvaluateScriptImpl(*instrumentingAgents, frame);
 }
 
-inline InspectorInstrumentationCookie InspectorInstrumentation::willFireTimer(ScriptExecutionContext& context, int timerId, bool oneShot)
+inline void InspectorInstrumentation::willFireTimer(ScriptExecutionContext& context, int timerId, bool oneShot)
 {
-    FAST_RETURN_IF_NO_FRONTENDS(InspectorInstrumentationCookie());
-    if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForContext(context))
-        return willFireTimerImpl(*instrumentingAgents, timerId, oneShot, context);
-    return InspectorInstrumentationCookie();
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(context))
+        willFireTimerImpl(*instrumentingAgents, timerId, oneShot, context);
 }
 
-inline void InspectorInstrumentation::didFireTimer(const InspectorInstrumentationCookie& cookie)
+inline void InspectorInstrumentation::didFireTimer(ScriptExecutionContext& context)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
-    if (cookie.isValid())
-        didFireTimerImpl(cookie);
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(context))
+        didFireTimerImpl(*instrumentingAgents);
 }
 
 inline void InspectorInstrumentation::didInvalidateLayout(Frame& frame)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForFrame(frame))
         didInvalidateLayoutImpl(*instrumentingAgents, frame);
 }
 
-inline InspectorInstrumentationCookie InspectorInstrumentation::willLayout(Frame& frame)
+inline void InspectorInstrumentation::willLayout(Frame& frame)
 {
-    FAST_RETURN_IF_NO_FRONTENDS(InspectorInstrumentationCookie());
-    if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForFrame(frame))
-        return willLayoutImpl(*instrumentingAgents, frame);
-    return InspectorInstrumentationCookie();
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForFrame(frame))
+        willLayoutImpl(*instrumentingAgents, frame);
 }
 
-inline void InspectorInstrumentation::didLayout(const InspectorInstrumentationCookie& cookie, RenderObject& root)
+inline void InspectorInstrumentation::didLayout(Frame& frame, RenderObject& root)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
-    if (cookie.isValid())
-        didLayoutImpl(cookie, root);
+    if (auto* instrumentingAgents = instrumentingAgentsForFrame(frame))
+        didLayoutImpl(*instrumentingAgents, root);
 }
 
 inline void InspectorInstrumentation::didScroll(Page& page)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
@@ -943,23 +984,22 @@
     FAST_RETURN_IF_NO_FRONTENDS(void());
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForRenderer(renderer))
         didPaintImpl(*instrumentingAgents, renderer, rect);
 }
 
-inline InspectorInstrumentationCookie InspectorInstrumentation::willRecalculateStyle(Document& document)
+inline void InspectorInstrumentation::willRecalculateStyle(Document& document)
 {
-    FAST_RETURN_IF_NO_FRONTENDS(InspectorInstrumentationCookie());
-    if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForDocument(document))
-        return willRecalculateStyleImpl(*instrumentingAgents, document);
-    return InspectorInstrumentationCookie();
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForDocument(document))
+        willRecalculateStyleImpl(*instrumentingAgents, document);
 }
 
-inline void InspectorInstrumentation::didRecalculateStyle(const InspectorInstrumentationCookie& cookie)
+inline void InspectorInstrumentation::didRecalculateStyle(Document& document)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
-    if (cookie.isValid())
-        didRecalculateStyleImpl(cookie);
+    if (auto* instrumentingAgents = instrumentingAgentsForDocument(document))
+        didRecalculateStyleImpl(*instrumentingAgents);
 }
 
 inline void InspectorInstrumentation::didScheduleStyleRecalculation(Document& document)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
@@ -1197,10 +1237,33 @@
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
     willDestroyCachedResourceImpl(cachedResource);
 }
 
+inline bool InspectorInstrumentation::willInterceptRequest(const Frame* frame, const ResourceRequest& request)
+{
+    FAST_RETURN_IF_NO_FRONTENDS(false);
+    if (auto* instrumentingAgents = instrumentingAgentsForFrame(frame))
+        return willInterceptRequestImpl(*instrumentingAgents, request);
+    return false;
+}
+
+inline bool InspectorInstrumentation::shouldInterceptResponse(const Frame& frame, const ResourceResponse& response)
+{
+    ASSERT(InspectorInstrumentationPublic::hasFrontends());
+    if (auto* instrumentingAgents = instrumentingAgentsForFrame(frame))
+        return shouldInterceptResponseImpl(*instrumentingAgents, response);
+    return false;
+}
+
+inline void InspectorInstrumentation::interceptResponse(const Frame& frame, const ResourceResponse& response, unsigned long identifier, CompletionHandler<void(const ResourceResponse&, RefPtr<SharedBuffer>)>&& handler)
+{
+    ASSERT(InspectorInstrumentation::shouldInterceptResponse(frame, response));
+    if (auto* instrumentingAgents = instrumentingAgentsForFrame(frame))
+        interceptResponseImpl(*instrumentingAgents, response, identifier, WTFMove(handler));
+}
+
 inline void InspectorInstrumentation::didOpenDatabase(Database& database)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
     if (auto* instrumentingAgents = instrumentingAgentsForContext(database.document()))
         didOpenDatabaseImpl(*instrumentingAgents, database);
@@ -1332,41 +1395,120 @@
     FAST_RETURN_IF_NO_FRONTENDS(void());
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForContext(contextWebGLBase.canvasBase().scriptExecutionContext()))
         didEnableExtensionImpl(*instrumentingAgents, contextWebGLBase, extension);
 }
 
-inline void InspectorInstrumentation::didCreateProgram(WebGLRenderingContextBase& contextWebGLBase, WebGLProgram& program)
+inline void InspectorInstrumentation::didCreateWebGLProgram(WebGLRenderingContextBase& contextWebGLBase, WebGLProgram& program)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForContext(contextWebGLBase.canvasBase().scriptExecutionContext()))
-        didCreateProgramImpl(*instrumentingAgents, contextWebGLBase, program);
+        didCreateWebGLProgramImpl(*instrumentingAgents, contextWebGLBase, program);
 }
 
-inline void InspectorInstrumentation::willDeleteProgram(WebGLRenderingContextBase& contextWebGLBase, WebGLProgram& program)
+inline void InspectorInstrumentation::willDestroyWebGLProgram(WebGLProgram& program)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
-    if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForContext(contextWebGLBase.canvasBase().scriptExecutionContext()))
-        willDeleteProgramImpl(*instrumentingAgents, program);
+    if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForContext(program.scriptExecutionContext()))
+        willDestroyWebGLProgramImpl(*instrumentingAgents, program);
 }
 
-inline bool InspectorInstrumentation::isShaderProgramDisabled(WebGLRenderingContextBase& contextWebGLBase, WebGLProgram& program)
+inline bool InspectorInstrumentation::isWebGLProgramDisabled(WebGLRenderingContextBase& contextWebGLBase, WebGLProgram& program)
 {
     FAST_RETURN_IF_NO_FRONTENDS(false);
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForContext(contextWebGLBase.canvasBase().scriptExecutionContext()))
-        return isShaderProgramDisabledImpl(*instrumentingAgents, program);
+        return isWebGLProgramDisabledImpl(*instrumentingAgents, program);
     return false;
 }
 
-inline bool InspectorInstrumentation::isShaderProgramHighlighted(WebGLRenderingContextBase& contextWebGLBase, WebGLProgram& program)
+inline bool InspectorInstrumentation::isWebGLProgramHighlighted(WebGLRenderingContextBase& contextWebGLBase, WebGLProgram& program)
 {
     FAST_RETURN_IF_NO_FRONTENDS(false);
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForContext(contextWebGLBase.canvasBase().scriptExecutionContext()))
-        return isShaderProgramHighlightedImpl(*instrumentingAgents, program);
+        return isWebGLProgramHighlightedImpl(*instrumentingAgents, program);
     return false;
 }
 #endif
 
+#if ENABLE(WEBGPU)
+inline void InspectorInstrumentation::didCreateWebGPUDevice(WebGPUDevice& device)
+{
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForWebGPUDevice(device))
+        didCreateWebGPUDeviceImpl(*instrumentingAgents, device);
+}
+
+inline void InspectorInstrumentation::willDestroyWebGPUDevice(WebGPUDevice& device)
+{
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForWebGPUDevice(device))
+        willDestroyWebGPUDeviceImpl(*instrumentingAgents, device);
+}
+
+inline void InspectorInstrumentation::willConfigureSwapChain(GPUCanvasContext& contextGPU, WebGPUSwapChain& newSwapChain)
+{
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(contextGPU.canvasBase().scriptExecutionContext()))
+        willConfigureSwapChainImpl(*instrumentingAgents, contextGPU, newSwapChain);
+}
+
+inline void InspectorInstrumentation::didCreateWebGPUPipeline(WebGPUDevice& device, WebGPUPipeline& pipeline)
+{
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForWebGPUDevice(device))
+        didCreateWebGPUPipelineImpl(*instrumentingAgents, device, pipeline);
+}
+
+inline void InspectorInstrumentation::willDestroyWebGPUPipeline(WebGPUPipeline& pipeline)
+{
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(pipeline.scriptExecutionContext()))
+        willDestroyWebGPUPipelineImpl(*instrumentingAgents, pipeline);
+}
+#endif
+
+inline void InspectorInstrumentation::willApplyKeyframeEffect(Element& target, KeyframeEffect& effect, ComputedEffectTiming computedTiming)
+{
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForDocument(target.document()))
+        willApplyKeyframeEffectImpl(*instrumentingAgents, target, effect, computedTiming);
+}
+
+inline void InspectorInstrumentation::didSetWebAnimationEffect(WebAnimation& animation)
+{
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(animation.scriptExecutionContext()))
+        didSetWebAnimationEffectImpl(*instrumentingAgents, animation);
+}
+
+inline void InspectorInstrumentation::didChangeWebAnimationEffectTiming(WebAnimation& animation)
+{
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(animation.scriptExecutionContext()))
+        didChangeWebAnimationEffectTimingImpl(*instrumentingAgents, animation);
+}
+
+inline void InspectorInstrumentation::didChangeWebAnimationEffectTarget(WebAnimation& animation)
+{
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(animation.scriptExecutionContext()))
+        didChangeWebAnimationEffectTargetImpl(*instrumentingAgents, animation);
+}
+
+inline void InspectorInstrumentation::didCreateWebAnimation(WebAnimation& animation)
+{
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(animation.scriptExecutionContext()))
+        didCreateWebAnimationImpl(*instrumentingAgents, animation);
+}
+
+inline void InspectorInstrumentation::willDestroyWebAnimation(WebAnimation& animation)
+{
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(animation.scriptExecutionContext()))
+        willDestroyWebAnimationImpl(*instrumentingAgents, animation);
+}
+
 inline void InspectorInstrumentation::networkStateChanged(Page& page)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
     networkStateChangedImpl(instrumentingAgentsForPage(page));
 }
@@ -1386,26 +1528,26 @@
 inline void InspectorInstrumentation::addMessageToConsole(WorkerGlobalScope& workerGlobalScope, std::unique_ptr<Inspector::ConsoleMessage> message)
 {
     addMessageToConsoleImpl(instrumentingAgentsForWorkerGlobalScope(workerGlobalScope), WTFMove(message));
 }
 
-inline void InspectorInstrumentation::consoleCount(Page& page, JSC::ExecState* state, const String& label)
+inline void InspectorInstrumentation::consoleCount(Page& page, JSC::JSGlobalObject* state, const String& label)
 {
     consoleCountImpl(instrumentingAgentsForPage(page), state, label);
 }
 
-inline void InspectorInstrumentation::consoleCount(WorkerGlobalScope& workerGlobalScope, JSC::ExecState* state, const String& label)
+inline void InspectorInstrumentation::consoleCount(WorkerGlobalScope& workerGlobalScope, JSC::JSGlobalObject* state, const String& label)
 {
     consoleCountImpl(instrumentingAgentsForWorkerGlobalScope(workerGlobalScope), state, label);
 }
 
-inline void InspectorInstrumentation::consoleCountReset(Page& page, JSC::ExecState* state, const String& label)
+inline void InspectorInstrumentation::consoleCountReset(Page& page, JSC::JSGlobalObject* state, const String& label)
 {
     consoleCountResetImpl(instrumentingAgentsForPage(page), state, label);
 }
 
-inline void InspectorInstrumentation::consoleCountReset(WorkerGlobalScope& workerGlobalScope, JSC::ExecState* state, const String& label)
+inline void InspectorInstrumentation::consoleCountReset(WorkerGlobalScope& workerGlobalScope, JSC::JSGlobalObject* state, const String& label)
 {
     consoleCountResetImpl(instrumentingAgentsForWorkerGlobalScope(workerGlobalScope), state, label);
 }
 
 inline void InspectorInstrumentation::takeHeapSnapshot(Frame& frame, const String& title)
@@ -1413,39 +1555,39 @@
     FAST_RETURN_IF_NO_FRONTENDS(void());
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForFrame(frame))
         takeHeapSnapshotImpl(*instrumentingAgents, title);
 }
 
-inline void InspectorInstrumentation::startConsoleTiming(Frame& frame, JSC::ExecState* exec, const String& label)
+inline void InspectorInstrumentation::startConsoleTiming(Frame& frame, JSC::JSGlobalObject* exec, const String& label)
 {
     if (auto* instrumentingAgents = instrumentingAgentsForFrame(frame))
         startConsoleTimingImpl(*instrumentingAgents, frame, exec, label);
 }
 
-inline void InspectorInstrumentation::startConsoleTiming(WorkerGlobalScope& workerGlobalScope, JSC::ExecState* exec, const String& label)
+inline void InspectorInstrumentation::startConsoleTiming(WorkerGlobalScope& workerGlobalScope, JSC::JSGlobalObject* exec, const String& label)
 {
     startConsoleTimingImpl(instrumentingAgentsForWorkerGlobalScope(workerGlobalScope), exec, label);
 }
 
-inline void InspectorInstrumentation::logConsoleTiming(Frame& frame, JSC::ExecState* exec, const String& label, Ref<Inspector::ScriptArguments>&& arguments)
+inline void InspectorInstrumentation::logConsoleTiming(Frame& frame, JSC::JSGlobalObject* exec, const String& label, Ref<Inspector::ScriptArguments>&& arguments)
 {
     if (auto* instrumentingAgents = instrumentingAgentsForFrame(frame))
         logConsoleTimingImpl(*instrumentingAgents, exec, label, WTFMove(arguments));
 }
 
-inline void InspectorInstrumentation::logConsoleTiming(WorkerGlobalScope& workerGlobalScope, JSC::ExecState* exec, const String& label, Ref<Inspector::ScriptArguments>&& arguments)
+inline void InspectorInstrumentation::logConsoleTiming(WorkerGlobalScope& workerGlobalScope, JSC::JSGlobalObject* exec, const String& label, Ref<Inspector::ScriptArguments>&& arguments)
 {
     logConsoleTimingImpl(instrumentingAgentsForWorkerGlobalScope(workerGlobalScope), exec, label, WTFMove(arguments));
 }
 
-inline void InspectorInstrumentation::stopConsoleTiming(Frame& frame, JSC::ExecState* exec, const String& label)
+inline void InspectorInstrumentation::stopConsoleTiming(Frame& frame, JSC::JSGlobalObject* exec, const String& label)
 {
     if (auto* instrumentingAgents = instrumentingAgentsForFrame(frame))
         stopConsoleTimingImpl(*instrumentingAgents, frame, exec, label);
 }
 
-inline void InspectorInstrumentation::stopConsoleTiming(WorkerGlobalScope& workerGlobalScope, JSC::ExecState* exec, const String& label)
+inline void InspectorInstrumentation::stopConsoleTiming(WorkerGlobalScope& workerGlobalScope, JSC::JSGlobalObject* exec, const String& label)
 {
     stopConsoleTimingImpl(instrumentingAgentsForWorkerGlobalScope(workerGlobalScope), exec, label);
 }
 
 inline void InspectorInstrumentation::consoleTimeStamp(Frame& frame, Ref<Inspector::ScriptArguments>&& arguments)
@@ -1453,29 +1595,34 @@
     FAST_RETURN_IF_NO_FRONTENDS(void());
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForFrame(frame))
         consoleTimeStampImpl(*instrumentingAgents, frame, WTFMove(arguments));
 }
 
-inline void InspectorInstrumentation::startProfiling(Page& page, JSC::ExecState* exec, const String &title)
+inline void InspectorInstrumentation::startProfiling(Page& page, JSC::JSGlobalObject* exec, const String &title)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
     startProfilingImpl(instrumentingAgentsForPage(page), exec, title);
 }
 
-inline void InspectorInstrumentation::stopProfiling(Page& page, JSC::ExecState* exec, const String &title)
+inline void InspectorInstrumentation::stopProfiling(Page& page, JSC::JSGlobalObject* exec, const String &title)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
     stopProfilingImpl(instrumentingAgentsForPage(page), exec, title);
 }
 
-inline void InspectorInstrumentation::consoleStartRecordingCanvas(CanvasRenderingContext& context, JSC::ExecState& exec, JSC::JSObject* options)
+inline void InspectorInstrumentation::consoleStartRecordingCanvas(CanvasRenderingContext& context, JSC::JSGlobalObject& exec, JSC::JSObject* options)
 {
-    FAST_RETURN_IF_NO_FRONTENDS(void());
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForContext(context.canvasBase().scriptExecutionContext()))
         consoleStartRecordingCanvasImpl(*instrumentingAgents, context, exec, options);
 }
 
+inline void InspectorInstrumentation::consoleStopRecordingCanvas(CanvasRenderingContext& context)
+{
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(context.canvasBase().scriptExecutionContext()))
+        consoleStopRecordingCanvasImpl(*instrumentingAgents, context);
+}
+
 inline void InspectorInstrumentation::didRequestAnimationFrame(Document& document, int callbackId)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForDocument(document))
         didRequestAnimationFrameImpl(*instrumentingAgents, callbackId, document);
@@ -1486,38 +1633,36 @@
     FAST_RETURN_IF_NO_FRONTENDS(void());
     if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForDocument(document))
         didCancelAnimationFrameImpl(*instrumentingAgents, callbackId, document);
 }
 
-inline InspectorInstrumentationCookie InspectorInstrumentation::willFireAnimationFrame(Document& document, int callbackId)
+inline void InspectorInstrumentation::willFireAnimationFrame(Document& document, int callbackId)
 {
-    FAST_RETURN_IF_NO_FRONTENDS(InspectorInstrumentationCookie());
-    if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForDocument(document))
-        return willFireAnimationFrameImpl(*instrumentingAgents, callbackId, document);
-    return InspectorInstrumentationCookie();
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForDocument(document))
+        willFireAnimationFrameImpl(*instrumentingAgents, callbackId, document);
 }
 
-inline void InspectorInstrumentation::didFireAnimationFrame(const InspectorInstrumentationCookie& cookie)
+inline void InspectorInstrumentation::didFireAnimationFrame(Document& document)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
-    if (cookie.isValid())
-        didFireAnimationFrameImpl(cookie);
+    if (auto* instrumentingAgents = instrumentingAgentsForDocument(document))
+        didFireAnimationFrameImpl(*instrumentingAgents);
 }
 
-inline InspectorInstrumentationCookie InspectorInstrumentation::willFireObserverCallback(ScriptExecutionContext& context, const String& callbackType)
+inline void InspectorInstrumentation::willFireObserverCallback(ScriptExecutionContext& context, const String& callbackType)
 {
-    FAST_RETURN_IF_NO_FRONTENDS(InspectorInstrumentationCookie());
-    if (InstrumentingAgents* instrumentingAgents = instrumentingAgentsForContext(context))
-        return willFireObserverCallbackImpl(*instrumentingAgents, callbackType, context);
-    return InspectorInstrumentationCookie();
+    FAST_RETURN_IF_NO_FRONTENDS(void());
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(context))
+        willFireObserverCallbackImpl(*instrumentingAgents, callbackType, context);
 }
 
-inline void InspectorInstrumentation::didFireObserverCallback(const InspectorInstrumentationCookie& cookie)
+inline void InspectorInstrumentation::didFireObserverCallback(ScriptExecutionContext& context)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
-    if (cookie.isValid())
-        didFireObserverCallbackImpl(cookie);
+    if (auto* instrumentingAgents = instrumentingAgentsForContext(context))
+        didFireObserverCallbackImpl(*instrumentingAgents);
 }
 
 inline void InspectorInstrumentation::layerTreeDidChange(Page* page)
 {
     FAST_RETURN_IF_NO_FRONTENDS(void());
@@ -1535,25 +1680,16 @@
 inline InstrumentingAgents* InspectorInstrumentation::instrumentingAgentsForContext(ScriptExecutionContext* context)
 {
     return context ? instrumentingAgentsForContext(*context) : nullptr;
 }
 
-inline InstrumentingAgents* InspectorInstrumentation::instrumentingAgentsForContext(ScriptExecutionContext& context)
-{
-    if (is<Document>(context))
-        return instrumentingAgentsForPage(downcast<Document>(context).page());
-    if (is<WorkerGlobalScope>(context))
-        return &instrumentingAgentsForWorkerGlobalScope(downcast<WorkerGlobalScope>(context));
-    return nullptr;
-}
-
-inline InstrumentingAgents* InspectorInstrumentation::instrumentingAgentsForFrame(Frame* frame)
+inline InstrumentingAgents* InspectorInstrumentation::instrumentingAgentsForFrame(const Frame* frame)
 {
     return frame ? instrumentingAgentsForFrame(*frame) : nullptr;
 }
 
-inline InstrumentingAgents* InspectorInstrumentation::instrumentingAgentsForFrame(Frame& frame)
+inline InstrumentingAgents* InspectorInstrumentation::instrumentingAgentsForFrame(const Frame& frame)
 {
     return instrumentingAgentsForPage(frame.page());
 }
 
 inline InstrumentingAgents* InspectorInstrumentation::instrumentingAgentsForDocument(Document* document)
@@ -1572,40 +1708,29 @@
 inline InstrumentingAgents* InspectorInstrumentation::instrumentingAgentsForPage(Page* page)
 {
     return page ? &instrumentingAgentsForPage(*page) : nullptr;
 }
 
-inline InstrumentingAgents& InspectorInstrumentation::instrumentingAgentsForPage(Page& page)
-{
-    ASSERT(isMainThread());
-    return page.inspectorController().m_instrumentingAgents.get();
-}
-
 inline InstrumentingAgents* InspectorInstrumentation::instrumentingAgentsForWorkerGlobalScope(WorkerGlobalScope* workerGlobalScope)
 {
     return workerGlobalScope ? &instrumentingAgentsForWorkerGlobalScope(*workerGlobalScope) : nullptr;
 }
 
-inline InstrumentingAgents& InspectorInstrumentation::instrumentingAgentsForWorkerGlobalScope(WorkerGlobalScope& workerGlobalScope)
-{
-    return workerGlobalScope.inspectorController().m_instrumentingAgents;
-}
-
 inline void InspectorInstrumentation::frontendCreated()
 {
     ASSERT(isMainThread());
-    s_frontendCounter++;
+    ++InspectorInstrumentationPublic::s_frontendCounter;
 
-    if (s_frontendCounter == 1)
+    if (InspectorInstrumentationPublic::s_frontendCounter == 1)
         InspectorInstrumentation::firstFrontendCreated();
 }
 
 inline void InspectorInstrumentation::frontendDeleted()
 {
     ASSERT(isMainThread());
-    s_frontendCounter--;
+    --InspectorInstrumentationPublic::s_frontendCounter;
 
-    if (!s_frontendCounter)
+    if (!InspectorInstrumentationPublic::s_frontendCounter)
         InspectorInstrumentation::lastFrontendDeleted();
 }
 
 } // namespace WebCore
