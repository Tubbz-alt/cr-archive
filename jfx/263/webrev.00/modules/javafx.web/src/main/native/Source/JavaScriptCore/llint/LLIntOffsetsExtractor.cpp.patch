diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LLIntOffsetsExtractor.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LLIntOffsetsExtractor.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LLIntOffsetsExtractor.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LLIntOffsetsExtractor.cpp
@@ -43,10 +43,11 @@
 #include "JSArrayBufferView.h"
 #include "JSCPtrTag.h"
 #include "JSCast.h"
 #include "JSFunction.h"
 #include "JSGlobalObject.h"
+#include "JSInternalFieldObjectImpl.h"
 #include "JSLexicalEnvironment.h"
 #include "JSModuleRecord.h"
 #include "JSObject.h"
 #include "JSString.h"
 #include "JSTypeInfo.h"
@@ -63,30 +64,36 @@
 #include "StructureChain.h"
 #include "TypeProfiler.h"
 #include "TypeProfilerLog.h"
 #include "VM.h"
 #include "ValueProfile.h"
+#include "WasmCallingConvention.h"
+#include "WasmFunctionCodeBlock.h"
+#include "WasmInstance.h"
 #include "Watchdog.h"
+#include "WebAssemblyFunction.h"
 #include <stdio.h>
+#include <wtf/FastTLS.h>
 #include <wtf/text/StringImpl.h>
 
 namespace JSC {
 
 #define OFFLINE_ASM_OFFSETOF(clazz, field) (static_cast<unsigned>(OBJECT_OFFSETOF(clazz, field)))
 
 class LLIntOffsetsExtractor {
     // These types are useful since we can't use '<...>' syntax in LLInt offsets extraction. e.g. Vector<int>::m_data
     using Vector = WTF::Vector<int>;
+    using JSInternalFieldObjectImpl = JSC::JSInternalFieldObjectImpl<>;
     using RefCountedArray = WTF::RefCountedArray<int>;
 
 public:
     static const int64_t* dummy();
 };
 
 const int64_t* LLIntOffsetsExtractor::dummy()
 {
-// This is a file generated by offlineasm/generate_offsets_extractor.rb, and contains code
+// This is a file generated by offlineasm/generate_offset_extractor.rb, and contains code
 // to create a table of offsets, sizes, and a header identifying what combination of
 // Platform.h macros we have set. We include it inside of a method on LLIntOffsetsExtractor
 // because the fields whose offsets we're extracting are mostly private. So we make their
 // classes friends with LLIntOffsetsExtractor, and include the header here, to get the C++
 // compiler to kindly step aside and yield to our best intentions.
