diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/Database.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/Database.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/Database.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/Database.cpp
@@ -50,10 +50,11 @@
 #include "SQLiteStatement.h"
 #include "SQLiteTransaction.h"
 #include "ScriptExecutionContext.h"
 #include "SecurityOrigin.h"
 #include "VoidCallback.h"
+#include "WindowEventLoop.h"
 #include <wtf/NeverDestroyed.h>
 #include <wtf/RefPtr.h>
 #include <wtf/StdLibExtras.h>
 #include <wtf/text/CString.h>
 
@@ -682,14 +683,15 @@
     m_databaseAuthorizer->reset();
 }
 
 void Database::runTransaction(RefPtr<SQLTransactionCallback>&& callback, RefPtr<SQLTransactionErrorCallback>&& errorCallback, RefPtr<VoidCallback>&& successCallback, RefPtr<SQLTransactionWrapper>&& wrapper, bool readOnly)
 {
+    ASSERT(isMainThread());
     LockHolder locker(m_transactionInProgressMutex);
     if (!m_isTransactionQueueEnabled) {
         if (errorCallback) {
-            callOnMainThread([errorCallback = makeRef(*errorCallback)]() {
+            m_document->eventLoop().queueTask(TaskSource::Networking, [errorCallback = makeRef(*errorCallback)]() {
                 errorCallback->handleEvent(SQLError::create(SQLError::UNKNOWN_ERR, "database has been closed"));
             });
         }
         return;
     }
@@ -699,12 +701,14 @@
         scheduleTransaction();
 }
 
 void Database::scheduleTransactionCallback(SQLTransaction* transaction)
 {
-    callOnMainThread([transaction = makeRefPtr(transaction)] {
-        transaction->performPendingCallback();
+    callOnMainThread([this, protectedThis = makeRef(*this), transaction = makeRefPtr(transaction)] {
+        m_document->eventLoop().queueTask(TaskSource::Networking, [transaction = transaction.copyRef()] {
+            transaction->performPendingCallback();
+        });
     });
 }
 
 Vector<String> Database::performGetTableNames()
 {
