diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/BytecodeList.rb b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/BytecodeList.rb
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/BytecodeList.rb
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/BytecodeList.rb
@@ -28,10 +28,11 @@
     :BoundLabel,
     :DebugHookType,
     :ErrorType,
     :GetByIdMode,
     :GetByIdModeMetadata,
+    :GetByValHistory,
     :GetPutInfo,
     :IndexingType,
     :JSCell,
     :JSGlobalLexicalEnvironment,
     :JSGlobalObject,
@@ -39,10 +40,11 @@
     :JSObject,
     :JSScope,
     :JSType,
     :JSValue,
     :LLIntCallLinkInfo,
+    :ResultType,
     :OperandTypes,
     :ProfileTypeBytecodeFlag,
     :PropertyOffset,
     :PutByIdFlags,
     :ResolveType,
@@ -51,31 +53,29 @@
     :StructureChain,
     :SymbolTable,
     :SymbolTableOrScopeDepth,
     :ToThisStatus,
     :TypeLocation,
+    :WasmBoundLabel,
     :WatchpointSet,
 
     :ValueProfile,
-    :ValueProfileAndOperandBuffer,
-    :ArithProfile,
+    :ValueProfileAndVirtualRegisterBuffer,
+    :UnaryArithProfile,
+    :BinaryArithProfile,
     :ArrayProfile,
     :ArrayAllocationProfile,
     :ObjectAllocationProfile,
 ]
 
-namespace :Special do
-    types [ :Pointer ]
-end
-
 templates [
     :WriteBarrier,
     :WriteBarrierBase,
 ]
 
 
-begin_section :Bytecodes,
+begin_section :Bytecode,
     emit_in_h_file: true,
     emit_in_structs_file: true,
     emit_in_asm_file: true,
     emit_opcode_id_string_values_in_h_file: true,
     macro_name_component: :BYTECODE,
@@ -106,20 +106,59 @@
 op :create_cloned_arguments,
     args: {
         dst: VirtualRegister,
     }
 
+op :create_arguments_butterfly,
+    args: {
+        dst: VirtualRegister,
+    }
+
 op :create_this,
     args: {
         dst: VirtualRegister,
         callee: VirtualRegister,
         inlineCapacity: unsigned,
     },
     metadata: {
         cachedCallee: WriteBarrier[JSCell]
     }
 
+op :create_promise,
+    args: {
+        dst: VirtualRegister,
+        callee: VirtualRegister,
+        isInternalPromise: bool,
+    },
+    metadata: {
+        cachedCallee: WriteBarrier[JSCell]
+    }
+
+op :new_promise,
+    args: {
+        dst: VirtualRegister,
+        isInternalPromise: bool,
+    }
+
+op :new_generator,
+    args: {
+        dst: VirtualRegister,
+    }
+
+op_group :CreateInternalFieldObjectOp,
+    [
+        :create_generator,
+        :create_async_generator,
+    ],
+    args: {
+        dst: VirtualRegister,
+        callee: VirtualRegister,
+    },
+    metadata: {
+        cachedCallee: WriteBarrier[JSCell]
+    }
+
 op :get_argument,
     args: {
         dst: VirtualRegister,
         index: int,
     },
@@ -224,11 +263,10 @@
         :greatereq,
         :below,
         :beloweq,
         :mod,
         :pow,
-        :rshift,
         :urshift,
     ],
     args: {
         dst: VirtualRegister,
         lhs: VirtualRegister,
@@ -247,22 +285,20 @@
         lhs: VirtualRegister,
         rhs: VirtualRegister,
         operandTypes: OperandTypes,
     },
     metadata: {
-        arithProfile: ArithProfile
-    },
-    metadata_initializers: {
-        arithProfile: :operandTypes
+        arithProfile: BinaryArithProfile
     }
 
 op_group :ValueProfiledBinaryOp,
     [
         :bitand,
         :bitor,
         :bitxor,
         :lshift,
+        :rshift,
     ],
     args: {
         dst: VirtualRegister,
         lhs: VirtualRegister,
         rhs: VirtualRegister,
@@ -298,18 +334,20 @@
     args: {
         dst: VirtualRegister,
         operand: VirtualRegister,
     }
 
-op :inc,
-    args: {
-        srcDst: VirtualRegister,
-    }
-
-op :dec,
+op_group :UnaryInPlaceProfiledOp,
+    [
+        :inc,
+        :dec,
+    ],
     args: {
         srcDst: VirtualRegister,
+    },
+    metadata: {
+        arithProfile: UnaryArithProfile
     }
 
 op :to_object,
     args: {
         dst: VirtualRegister,
@@ -318,11 +356,15 @@
     },
     metadata: {
         profile: ValueProfile,
     }
 
-op :to_number,
+op_group :ValueProfiledUnaryOp,
+    [
+        :to_number,
+        :to_numeric,
+    ],
     args: {
         dst: VirtualRegister,
         operand: VirtualRegister,
     },
     metadata: {
@@ -331,17 +373,14 @@
 
 op :negate,
     args: {
         dst: VirtualRegister,
         operand: VirtualRegister,
-        operandTypes: OperandTypes,
+        resultType: ResultType,
     },
     metadata: {
-        arithProfile: ArithProfile,
-    },
-    metadata_initializers: {
-        arithProfile: :operandTypes
+        arithProfile: UnaryArithProfile,
     }
 
 op :not,
     args: {
         dst: VirtualRegister,
@@ -499,10 +538,11 @@
         property: VirtualRegister,
     },
     metadata: {
         profile: ValueProfile,
         arrayProfile: ArrayProfile,
+        seenIdentifiers: GetByValHistory,
     }
 
 op :put_by_val,
     args: {
         base: VirtualRegister,
@@ -638,11 +678,11 @@
     }
 
 op :jneq_ptr,
     args: {
         value: VirtualRegister,
-        specialPointer: Special::Pointer,
+        specialPointer: VirtualRegister,
         targetLabel: BoundLabel,
     },
     metadata: {
         hasJumped: bool,
     }
@@ -754,10 +794,17 @@
         firstVarArg: int,
     },
     metadata: {
         arrayProfile: ArrayProfile,
         profile: ValueProfile,
+    },
+    tmps: {
+        argCountIncludingThis: unsigned,
+    },
+    checkpoints: {
+        determiningArgCount: nil,
+        makeCall: nil,
     }
 
 op :tail_call_varargs,
     args: {
         dst: VirtualRegister,
@@ -768,10 +815,17 @@
         firstVarArg: int,
     },
     metadata: {
         arrayProfile: ArrayProfile,
         profile: ValueProfile,
+    },
+    tmps: {
+        argCountIncludingThis: unsigned
+    },
+    checkpoints: {
+        determiningArgCount: nil,
+        makeCall: nil,
     }
 
 op :tail_call_forward_arguments,
     args: {
         dst: VirtualRegister,
@@ -808,10 +862,17 @@
         firstVarArg: int,
     },
     metadata: {
         arrayProfile: ArrayProfile,
         profile: ValueProfile,
+    },
+    tmps: {
+        argCountIncludingThis: unsigned
+    },
+    checkpoints: {
+        determiningArgCount: nil,
+        makeCall: nil,
     }
 
 op :ret,
     args: {
         value: VirtualRegister,
@@ -828,10 +889,16 @@
     args: {
         dst: VirtualRegister,
         src: VirtualRegister,
     }
 
+op :to_property_key,
+    args: {
+        dst: VirtualRegister,
+        src: VirtualRegister,
+    }
+
 op :resolve_scope,
     args: {
         dst: VirtualRegister, # offset 1
         scope: VirtualRegister, # offset 2
         var: unsigned, # offset 3
@@ -955,11 +1022,11 @@
     args: {
         exception: VirtualRegister,
         thrownValue: VirtualRegister,
     },
     metadata: {
-        buffer: ValueProfileAndOperandBuffer.*,
+        buffer: ValueProfileAndVirtualRegisterBuffer.*,
     }
 
 op :throw,
     args: {
         value: VirtualRegister,
@@ -1091,10 +1158,12 @@
         generator: VirtualRegister,
         yieldPoint: unsigned,
         argument: VirtualRegister,
     }
 
+op :check_traps
+
 op :log_shadow_chicken_prologue,
     args: {
         scope: VirtualRegister,
     }
 
@@ -1109,17 +1178,34 @@
         dst: VirtualRegister,
         scope: VirtualRegister,
         property: unsigned,
     }
 
+op :get_internal_field,
+    args: {
+        dst: VirtualRegister,
+        base: VirtualRegister,
+        index: unsigned,
+    },
+    metadata: {
+        profile: ValueProfile,
+    }
+
+op :put_internal_field,
+    args: {
+        base: VirtualRegister,
+        index: unsigned,
+        value: VirtualRegister,
+    }
+
 op :nop
 
 op :super_sampler_begin
 
 op :super_sampler_end
 
-end_section :Bytecodes
+end_section :Bytecode
 
 begin_section :CLoopHelpers,
     emit_in_h_file: true,
     macro_name_component: :CLOOP_BYTECODE_HELPER
 
@@ -1182,8 +1268,251 @@
 op :llint_throw_during_call_trampoline
 op :llint_native_call_trampoline
 op :llint_native_construct_trampoline
 op :llint_internal_function_call_trampoline
 op :llint_internal_function_construct_trampoline
+op :checkpoint_osr_exit_from_inlined_call_trampoline
+op :checkpoint_osr_exit_trampoline
 op :handleUncaughtException
+op :op_call_return_location
+op :op_construct_return_location
+op :op_call_varargs_slow_return_location
+op :op_construct_varargs_slow_return_location
+op :op_get_by_id_return_location
+op :op_get_by_val_return_location
+op :op_put_by_id_return_location
+op :op_put_by_val_return_location
+op :wasm_function_prologue
+op :wasm_function_prologue_no_tls
 
 end_section :NativeHelpers
+
+begin_section :Wasm,
+    emit_in_h_file: true,
+    emit_in_structs_file: true,
+    macro_name_component: :WASM,
+    op_prefix: "wasm_"
+
+autogenerate_wasm_opcodes
+
+# Helpers
+
+op :throw_from_slow_path_trampoline
+
+# FIXME: Wasm and JS LLInt should share common opcodes
+# https://bugs.webkit.org/show_bug.cgi?id=203656
+
+op :wide16
+op :wide32
+
+op :enter
+op :nop
+op :loop_hint
+
+op :mov,
+    args: {
+        dst: VirtualRegister,
+        src: VirtualRegister,
+    }
+
+op_group :ConditionalJump,
+    [
+        :jtrue,
+        :jfalse,
+    ],
+    args: {
+        condition: VirtualRegister,
+        targetLabel: WasmBoundLabel,
+    }
+
+op :jmp,
+    args: {
+        targetLabel: WasmBoundLabel,
+    }
+
+op :ret
+
+op :switch,
+    args: {
+        scrutinee: VirtualRegister,
+        tableIndex: unsigned,
+    }
+
+# Wasm specific bytecodes
+
+op :unreachable
+op :ret_void
+
+op :drop_keep,
+    args: {
+        startOffset: unsigned,
+        dropCount: unsigned,
+        keepCount: unsigned,
+    }
+
+op :ref_is_null,
+    args: {
+        dst: VirtualRegister,
+        ref: VirtualRegister,
+    }
+
+op :ref_func,
+    args: {
+        dst: VirtualRegister,
+        functionIndex: unsigned,
+    }
+
+op :get_global,
+    args: {
+        dst: VirtualRegister,
+        globalIndex: unsigned,
+    }
+
+op :set_global,
+    args: {
+        globalIndex: unsigned,
+        value: VirtualRegister,
+    }
+
+op :set_global_ref,
+    args: {
+        globalIndex: unsigned,
+        value: VirtualRegister,
+    }
+
+op :get_global_portable_binding,
+    args: {
+        dst: VirtualRegister,
+        globalIndex: unsigned,
+    }
+
+op :set_global_portable_binding,
+    args: {
+        globalIndex: unsigned,
+        value: VirtualRegister,
+    }
+
+op :set_global_ref_portable_binding,
+    args: {
+        globalIndex: unsigned,
+        value: VirtualRegister,
+    }
+
+op :table_get,
+    args: {
+        dst: VirtualRegister,
+        index: VirtualRegister,
+        tableIndex: unsigned,
+    }
+
+op :table_set,
+    args: {
+        index: VirtualRegister,
+        value: VirtualRegister,
+        tableIndex: unsigned,
+    }
+
+op :table_size,
+    args: {
+        dst: VirtualRegister,
+        tableIndex: unsigned,
+    }
+
+op :table_grow,
+    args: {
+        dst: VirtualRegister,
+        fill: VirtualRegister,
+        size: VirtualRegister,
+        tableIndex: unsigned,
+    }
+
+op :table_fill,
+    args: {
+        offset: VirtualRegister,
+        fill: VirtualRegister,
+        size: VirtualRegister,
+        tableIndex: unsigned,
+    }
+
+op :call,
+    args: {
+        functionIndex: unsigned,
+        stackOffset: unsigned,
+        numberOfStackArgs: unsigned,
+    }
+
+op :call_no_tls,
+    args: {
+        functionIndex: unsigned,
+        stackOffset: unsigned,
+        numberOfStackArgs: unsigned,
+    }
+
+op :call_indirect,
+    args: {
+        functionIndex: VirtualRegister,
+        signatureIndex: unsigned,
+        stackOffset: unsigned,
+        numberOfStackArgs: unsigned,
+        tableIndex: unsigned,
+    }
+
+op :call_indirect_no_tls,
+    args: {
+        functionIndex: VirtualRegister,
+        signatureIndex: unsigned,
+        stackOffset: unsigned,
+        numberOfStackArgs: unsigned,
+        tableIndex: unsigned,
+    }
+
+op :current_memory,
+    args: {
+        dst: VirtualRegister,
+    }
+
+op :grow_memory,
+    args: {
+        dst: VirtualRegister,
+        delta: VirtualRegister
+    }
+
+op :select,
+    args: {
+        dst: VirtualRegister,
+        condition: VirtualRegister,
+        nonZero: VirtualRegister,
+        zero: VirtualRegister,
+    }
+
+op_group :Load,
+    [
+        :load8_u,
+        :load16_u,
+        :load32_u,
+        :load64_u,
+        :i32_load8_s,
+        :i64_load8_s,
+        :i32_load16_s,
+        :i64_load16_s,
+        :i64_load32_s,
+    ],
+    args: {
+        dst: VirtualRegister,
+        pointer: VirtualRegister,
+        offset: unsigned,
+    }
+
+op_group :Store,
+    [
+        :store8,
+        :store16,
+        :store32,
+        :store64,
+    ],
+    args: {
+        pointer: VirtualRegister,
+        value: VirtualRegister,
+        offset: unsigned,
+    }
+
+end_section :Wasm
