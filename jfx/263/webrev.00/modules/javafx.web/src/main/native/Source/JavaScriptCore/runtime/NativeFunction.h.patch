diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/NativeFunction.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/NativeFunction.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/NativeFunction.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/NativeFunction.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -28,13 +28,13 @@
 #include "JSCJSValue.h"
 #include "JSCPtrTag.h"
 
 namespace JSC {
 
-class ExecState;
+class CallFrame;
 
-typedef EncodedJSValue (JSC_HOST_CALL *RawNativeFunction)(ExecState*);
+typedef EncodedJSValue (JSC_HOST_CALL *RawNativeFunction)(JSGlobalObject*, CallFrame*);
 
 class NativeFunction {
 public:
     NativeFunction() = default;
     NativeFunction(std::nullptr_t) : m_ptr(nullptr) { }
@@ -45,11 +45,11 @@
     explicit operator bool() const { return !!m_ptr; }
     bool operator!() const { return !m_ptr; }
     bool operator==(NativeFunction other) const { return m_ptr == other.m_ptr; }
     bool operator!=(NativeFunction other) const { return m_ptr == other.m_ptr; }
 
-    EncodedJSValue operator()(ExecState* exec) { return m_ptr(exec); }
+    EncodedJSValue operator()(JSGlobalObject* globalObject, CallFrame* callFrame) { return m_ptr(globalObject, callFrame); }
 
     void* rawPointer() const { return reinterpret_cast<void*>(m_ptr); }
 
 private:
     RawNativeFunction m_ptr;
@@ -58,11 +58,11 @@
 };
 
 struct NativeFunctionHash {
     static unsigned hash(NativeFunction key) { return IntHash<uintptr_t>::hash(bitwise_cast<uintptr_t>(key)); }
     static bool equal(NativeFunction a, NativeFunction b) { return a == b; }
-    static const bool safeToCompareToEmptyOrDeleted = true;
+    static constexpr bool safeToCompareToEmptyOrDeleted = true;
 };
 
 class TaggedNativeFunction {
 public:
     TaggedNativeFunction() = default;
@@ -79,11 +79,11 @@
     explicit operator bool() const { return !!m_ptr; }
     bool operator!() const { return !m_ptr; }
     bool operator==(TaggedNativeFunction other) const { return m_ptr == other.m_ptr; }
     bool operator!=(TaggedNativeFunction other) const { return m_ptr != other.m_ptr; }
 
-    EncodedJSValue operator()(ExecState* exec) { return NativeFunction(*this)(exec); }
+    EncodedJSValue operator()(JSGlobalObject* globalObject, CallFrame* callFrame) { return NativeFunction(*this)(globalObject, callFrame); }
 
     explicit operator NativeFunction()
     {
         ASSERT(m_ptr);
         return untagCFunctionPtr<NativeFunction, JSEntryPtrTag>(m_ptr);
@@ -96,11 +96,11 @@
 };
 
 struct TaggedNativeFunctionHash {
     static unsigned hash(TaggedNativeFunction key) { return IntHash<uintptr_t>::hash(bitwise_cast<uintptr_t>(key)); }
     static bool equal(TaggedNativeFunction a, TaggedNativeFunction b) { return a == b; }
-    static const bool safeToCompareToEmptyOrDeleted = true;
+    static constexpr bool safeToCompareToEmptyOrDeleted = true;
 };
 
 static_assert(sizeof(NativeFunction) == sizeof(void*), "");
 static_assert(sizeof(TaggedNativeFunction) == sizeof(void*), "");
 
