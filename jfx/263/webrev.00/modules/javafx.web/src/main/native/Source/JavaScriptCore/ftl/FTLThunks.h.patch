diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLThunks.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLThunks.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLThunks.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLThunks.h
@@ -38,11 +38,11 @@
 
 namespace FTL {
 
 MacroAssemblerCodeRef<JITThunkPtrTag> osrExitGenerationThunkGenerator(VM&);
 MacroAssemblerCodeRef<JITThunkPtrTag> lazySlowPathGenerationThunkGenerator(VM&);
-MacroAssemblerCodeRef<JITThunkPtrTag> slowPathCallThunkGenerator(const SlowPathCallKey&);
+MacroAssemblerCodeRef<JITThunkPtrTag> slowPathCallThunkGenerator(VM&, const SlowPathCallKey&);
 
 template<typename KeyTypeArgument>
 struct ThunkMap {
     typedef KeyTypeArgument KeyType;
     typedef HashMap<KeyType, MacroAssemblerCodeRef<JITThunkPtrTag>> ToThunkMap;
@@ -52,17 +52,17 @@
     FromThunkMap m_fromThunk;
 };
 
 template<typename MapType, typename GeneratorType>
 MacroAssemblerCodeRef<JITThunkPtrTag> generateIfNecessary(
-    MapType& map, const typename MapType::KeyType& key, GeneratorType generator)
+    VM& vm, MapType& map, const typename MapType::KeyType& key, GeneratorType generator)
 {
     typename MapType::ToThunkMap::iterator iter = map.m_toThunk.find(key);
     if (iter != map.m_toThunk.end())
         return iter->value;
 
-    MacroAssemblerCodeRef<JITThunkPtrTag> result = generator(key);
+    MacroAssemblerCodeRef<JITThunkPtrTag> result = generator(vm, key);
     map.m_toThunk.add(key, result);
     map.m_fromThunk.add(result.code(), key);
     return result;
 }
 
@@ -77,14 +77,13 @@
 class Thunks {
     WTF_MAKE_FAST_ALLOCATED;
     WTF_MAKE_NONCOPYABLE(Thunks);
 public:
     Thunks() = default;
-    MacroAssemblerCodeRef<JITThunkPtrTag> getSlowPathCallThunk(const SlowPathCallKey& key)
+    MacroAssemblerCodeRef<JITThunkPtrTag> getSlowPathCallThunk(VM& vm, const SlowPathCallKey& key)
     {
-        return generateIfNecessary(
-            m_slowPathCallThunks, key, slowPathCallThunkGenerator);
+        return generateIfNecessary(vm, m_slowPathCallThunks, key, slowPathCallThunkGenerator);
     }
 
     SlowPathCallKey keyForSlowPathCallThunk(MacroAssemblerCodePtr<JITThunkPtrTag> ptr)
     {
         return keyForThunk(m_slowPathCallThunks, ptr);
