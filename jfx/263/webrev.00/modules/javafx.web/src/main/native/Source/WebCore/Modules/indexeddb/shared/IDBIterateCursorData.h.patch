diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBIterateCursorData.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBIterateCursorData.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBIterateCursorData.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBIterateCursorData.h
@@ -33,12 +33,13 @@
 
 struct IDBIterateCursorData {
     IDBKeyData keyData;
     IDBKeyData primaryKeyData;
     unsigned count;
+    IndexedDB::CursorIterateOption option { IndexedDB::CursorIterateOption::Reply };
 
-    IDBIterateCursorData isolatedCopy() const;
+    WEBCORE_EXPORT IDBIterateCursorData isolatedCopy() const;
 
 #if !LOG_DISABLED
     String loggingString() const;
 #endif
 
@@ -48,10 +49,11 @@
 
 template<class Encoder>
 void IDBIterateCursorData::encode(Encoder& encoder) const
 {
     encoder << keyData << primaryKeyData << static_cast<uint64_t>(count);
+    encoder.encodeEnum(option);
 }
 
 template<class Decoder>
 bool IDBIterateCursorData::decode(Decoder& decoder, IDBIterateCursorData& iteratorCursorData)
 {
@@ -71,13 +73,15 @@
     if (!decoder.decode(count))
         return false;
 
     if (count > std::numeric_limits<unsigned>::max())
         return false;
-
     iteratorCursorData.count = static_cast<unsigned>(count);
 
+    if (!decoder.decodeEnum(iteratorCursorData.option))
+        return false;
+
     return true;
 }
 
 } // namespace WebCore
 
