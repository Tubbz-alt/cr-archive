diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBindingSecurity.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBindingSecurity.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBindingSecurity.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBindingSecurity.h
@@ -25,11 +25,12 @@
 
 #include "ExceptionOr.h"
 #include <wtf/Forward.h>
 
 namespace JSC {
-class ExecState;
+class CallFrame;
+class JSGlobalObject;
 }
 
 namespace WebCore {
 
 class DOMWindow;
@@ -40,45 +41,45 @@
 
 enum SecurityReportingOption { DoNotReportSecurityError, LogSecurityError, ThrowSecurityError };
 
 namespace BindingSecurity {
 
-template<typename T> T* checkSecurityForNode(JSC::ExecState&, T&);
-template<typename T> T* checkSecurityForNode(JSC::ExecState&, T*);
-template<typename T> ExceptionOr<T*> checkSecurityForNode(JSC::ExecState&, ExceptionOr<T*>&&);
-template<typename T> ExceptionOr<T*> checkSecurityForNode(JSC::ExecState&, ExceptionOr<T&>&&);
+template<typename T> T* checkSecurityForNode(JSC::JSGlobalObject&, T&);
+template<typename T> T* checkSecurityForNode(JSC::JSGlobalObject&, T*);
+template<typename T> ExceptionOr<T*> checkSecurityForNode(JSC::JSGlobalObject&, ExceptionOr<T*>&&);
+template<typename T> ExceptionOr<T*> checkSecurityForNode(JSC::JSGlobalObject&, ExceptionOr<T&>&&);
 
-bool shouldAllowAccessToDOMWindow(JSC::ExecState*, DOMWindow&, SecurityReportingOption = LogSecurityError);
-bool shouldAllowAccessToDOMWindow(JSC::ExecState&, DOMWindow&, String& message);
-bool shouldAllowAccessToDOMWindow(JSC::ExecState*, DOMWindow*, SecurityReportingOption = LogSecurityError);
-bool shouldAllowAccessToDOMWindow(JSC::ExecState&, DOMWindow*, String& message);
-bool shouldAllowAccessToFrame(JSC::ExecState*, Frame*, SecurityReportingOption = LogSecurityError);
-bool shouldAllowAccessToFrame(JSC::ExecState&, Frame&, String& message);
-bool shouldAllowAccessToNode(JSC::ExecState&, Node*);
+bool shouldAllowAccessToDOMWindow(JSC::JSGlobalObject*, DOMWindow&, SecurityReportingOption = LogSecurityError);
+bool shouldAllowAccessToDOMWindow(JSC::JSGlobalObject&, DOMWindow&, String& message);
+bool shouldAllowAccessToDOMWindow(JSC::JSGlobalObject*, DOMWindow*, SecurityReportingOption = LogSecurityError);
+bool shouldAllowAccessToDOMWindow(JSC::JSGlobalObject&, DOMWindow*, String& message);
+bool shouldAllowAccessToFrame(JSC::JSGlobalObject*, Frame*, SecurityReportingOption = LogSecurityError);
+bool shouldAllowAccessToFrame(JSC::JSGlobalObject&, Frame&, String& message);
+bool shouldAllowAccessToNode(JSC::JSGlobalObject&, Node*);
 
 }
 
-template<typename T> inline T* BindingSecurity::checkSecurityForNode(JSC::ExecState& state, T& node)
+template<typename T> inline T* BindingSecurity::checkSecurityForNode(JSC::JSGlobalObject& lexicalGlobalObject, T& node)
 {
-    return shouldAllowAccessToNode(state, &node) ? &node : nullptr;
+    return shouldAllowAccessToNode(lexicalGlobalObject, &node) ? &node : nullptr;
 }
 
-template<typename T> inline T* BindingSecurity::checkSecurityForNode(JSC::ExecState& state, T* node)
+template<typename T> inline T* BindingSecurity::checkSecurityForNode(JSC::JSGlobalObject& lexicalGlobalObject, T* node)
 {
-    return shouldAllowAccessToNode(state, node) ? node : nullptr;
+    return shouldAllowAccessToNode(lexicalGlobalObject, node) ? node : nullptr;
 }
 
-template<typename T> inline ExceptionOr<T*> BindingSecurity::checkSecurityForNode(JSC::ExecState& state, ExceptionOr<T*>&& value)
+template<typename T> inline ExceptionOr<T*> BindingSecurity::checkSecurityForNode(JSC::JSGlobalObject& lexicalGlobalObject, ExceptionOr<T*>&& value)
 {
     if (value.hasException())
         return value.releaseException();
-    return checkSecurityForNode(state, value.releaseReturnValue());
+    return checkSecurityForNode(lexicalGlobalObject, value.releaseReturnValue());
 }
 
-template<typename T> inline ExceptionOr<T*> BindingSecurity::checkSecurityForNode(JSC::ExecState& state, ExceptionOr<T&>&& value)
+template<typename T> inline ExceptionOr<T*> BindingSecurity::checkSecurityForNode(JSC::JSGlobalObject& lexicalGlobalObject, ExceptionOr<T&>&& value)
 {
     if (value.hasException())
         return value.releaseException();
-    return checkSecurityForNode(state, value.releaseReturnValue());
+    return checkSecurityForNode(lexicalGlobalObject, value.releaseReturnValue());
 }
 
 } // namespace WebCore
