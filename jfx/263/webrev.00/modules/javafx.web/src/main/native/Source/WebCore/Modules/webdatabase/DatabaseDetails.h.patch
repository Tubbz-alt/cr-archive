diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseDetails.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseDetails.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseDetails.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseDetails.h
@@ -44,11 +44,11 @@
         , m_displayName(details.m_displayName)
         , m_expectedUsage(details.m_expectedUsage)
         , m_currentUsage(details.m_currentUsage)
         , m_creationTime(details.m_creationTime)
         , m_modificationTime(details.m_modificationTime)
-#ifndef NDEBUG
+#if ASSERT_ENABLED
         , m_thread(details.m_thread.copyRef())
 #endif
     {
     }
 
@@ -58,11 +58,11 @@
         m_displayName = details.m_displayName;
         m_expectedUsage = details.m_expectedUsage;
         m_currentUsage = details.m_currentUsage;
         m_creationTime = details.m_creationTime;
         m_modificationTime = details.m_modificationTime;
-#ifndef NDEBUG
+#if ASSERT_ENABLED
         m_thread = details.m_thread.copyRef();
 #endif
         return *this;
     }
 
@@ -80,22 +80,22 @@
     const String& displayName() const { return m_displayName; }
     uint64_t expectedUsage() const { return m_expectedUsage; }
     uint64_t currentUsage() const { return m_currentUsage; }
     Optional<WallTime> creationTime() const { return m_creationTime; }
     Optional<WallTime> modificationTime() const { return m_modificationTime; }
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     Thread& thread() const { return m_thread.get(); }
 #endif
 
 private:
     String m_name;
     String m_displayName;
     uint64_t m_expectedUsage { 0 };
     uint64_t m_currentUsage { 0 };
     Markable<WallTime, WallTime::MarkableTraits> m_creationTime;
     Markable<WallTime, WallTime::MarkableTraits> m_modificationTime;
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     Ref<Thread> m_thread { Thread::current() };
 #endif
 };
 
 } // namespace WebCore
