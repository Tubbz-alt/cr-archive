diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorConsoleAgent.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorConsoleAgent.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorConsoleAgent.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorConsoleAgent.h
@@ -34,11 +34,11 @@
 #include <wtf/Noncopyable.h>
 #include <wtf/Vector.h>
 #include <wtf/text/StringHash.h>
 
 namespace JSC {
-class ExecState;
+class CallFrame;
 }
 
 namespace Inspector {
 
 class ConsoleMessage;
@@ -51,11 +51,11 @@
 class JS_EXPORT_PRIVATE InspectorConsoleAgent : public InspectorAgentBase, public ConsoleBackendDispatcherHandler {
     WTF_MAKE_NONCOPYABLE(InspectorConsoleAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
     InspectorConsoleAgent(AgentContext&);
-    virtual ~InspectorConsoleAgent();
+    ~InspectorConsoleAgent() override;
 
     // InspectorAgentBase
     void didCreateFrontendAndBackend(FrontendRouter*, BackendDispatcher*) final;
     void willDestroyFrontendAndBackend(DisconnectReason) final;
     void discardValues() final;
@@ -68,20 +68,21 @@
     void setLoggingChannelLevel(ErrorString&, const String& channel, const String& level) override;
 
     void setInspectorHeapAgent(InspectorHeapAgent* agent) { m_heapAgent = agent; }
 
     bool enabled() const { return m_enabled; }
+    bool developerExtrasEnabled() const;
     void reset();
 
     void addMessageToConsole(std::unique_ptr<ConsoleMessage>);
 
-    void startTiming(JSC::ExecState*, const String& label);
-    void logTiming(JSC::ExecState*, const String& label, Ref<ScriptArguments>&&);
-    void stopTiming(JSC::ExecState*, const String& label);
+    void startTiming(JSC::JSGlobalObject*, const String& label);
+    void logTiming(JSC::JSGlobalObject*, const String& label, Ref<ScriptArguments>&&);
+    void stopTiming(JSC::JSGlobalObject*, const String& label);
     void takeHeapSnapshot(const String& title);
-    void count(JSC::ExecState*, const String& label);
-    void countReset(JSC::ExecState*, const String& label);
+    void count(JSC::JSGlobalObject*, const String& label);
+    void countReset(JSC::JSGlobalObject*, const String& label);
 
 protected:
     void addConsoleMessage(std::unique_ptr<ConsoleMessage>);
 
     InjectedScriptManager& m_injectedScriptManager;
