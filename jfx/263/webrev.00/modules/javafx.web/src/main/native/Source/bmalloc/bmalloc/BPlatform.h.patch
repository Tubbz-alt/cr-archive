diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/BPlatform.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/BPlatform.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/BPlatform.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/BPlatform.h
@@ -38,11 +38,11 @@
 
 #ifdef __APPLE__
 #define BOS_DARWIN 1
 #endif
 
-#ifdef __unix
+#if defined(__unix) || defined(__unix__)
 #define BOS_UNIX 1
 #endif
 
 #ifdef __linux__
 #define BOS_LINUX 1
@@ -56,10 +56,11 @@
 #define BOS_WINDOWS 1
 #endif
 
 #if BOS(DARWIN) && !defined(BUILDING_WITH_CMAKE)
 #if TARGET_OS_IOS
+#define BOS_IOS 1
 #define BPLATFORM_IOS 1
 #if TARGET_OS_SIMULATOR
 #define BPLATFORM_IOS_SIMULATOR 1
 #endif
 #endif
@@ -67,23 +68,26 @@
 #define BPLATFORM_IOS_FAMILY 1
 #if TARGET_OS_SIMULATOR
 #define BPLATFORM_IOS_FAMILY_SIMULATOR 1
 #endif
 #elif TARGET_OS_MAC
+#define BOS_MAC 1
 #define BPLATFORM_MAC 1
 #endif
 #endif
 
 #if BPLATFORM(MAC) || BPLATFORM(IOS_FAMILY)
 #define BPLATFORM_COCOA 1
 #endif
 
 #if defined(TARGET_OS_WATCH) && TARGET_OS_WATCH
+#define BOS_WATCHOS 1
 #define BPLATFORM_WATCHOS 1
 #endif
 
 #if defined(TARGET_OS_TV) && TARGET_OS_TV
+#define BOS_APPLETV 1
 #define BPLATFORM_APPLETV 1
 #endif
 
 /* ==== Policy decision macros: these define policy choices for a particular port. ==== */
 
@@ -228,10 +232,49 @@
 #  error "Cannot use both of BCPU_ARM_TRADITIONAL and BCPU_ARM_THUMB2 platforms"
 #endif /* !defined(BCPU_ARM_TRADITIONAL) && !defined(BCPU_ARM_THUMB2) */
 
 #endif /* ARM */
 
+
+#if BCOMPILER(GCC_COMPATIBLE)
+/* __LP64__ is not defined on 64bit Windows since it uses LLP64. Using __SIZEOF_POINTER__ is simpler. */
+#if __SIZEOF_POINTER__ == 8
+#define BCPU_ADDRESS64 1
+#elif __SIZEOF_POINTER__ == 4
+#define BCPU_ADDRESS32 1
+#else
+#error "Unsupported pointer width"
+#endif
+#else
+#error "Unsupported compiler for bmalloc"
+#endif
+
+#if BCOMPILER(GCC_COMPATIBLE)
+#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
+#define BCPU_BIG_ENDIAN 1
+#elif __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
+#define BCPU_LITTLE_ENDIAN 1
+#elif __BYTE_ORDER__ == __ORDER_PDP_ENDIAN__
+#define BCPU_MIDDLE_ENDIAN 1
+#else
+#error "Unknown endian"
+#endif
+#else
+#error "Unsupported compiler for bmalloc"
+#endif
+
+#if BCPU(ADDRESS64)
+#if (BOS(IOS) || BOS(TVOS) || BOS(WATCHOS)) && BCPU(ARM64)
+#define BOS_EFFECTIVE_ADDRESS_WIDTH 36
+#else
+/* We strongly assume that effective address width is <= 48 in 64bit architectures (e.g. NaN boxing). */
+#define BOS_EFFECTIVE_ADDRESS_WIDTH 48
+#endif
+#else
+#define BOS_EFFECTIVE_ADDRESS_WIDTH 32
+#endif
+
 #define BATTRIBUTE_PRINTF(formatStringArgument, extraArguments) __attribute__((__format__(printf, formatStringArgument, extraArguments)))
 
 #if BPLATFORM(MAC) || BPLATFORM(IOS_FAMILY)
 #define BUSE_OS_LOG 1
 #endif
@@ -243,14 +286,30 @@
 /* BUNUSED_PARAM */
 #if !defined(BUNUSED_PARAM)
 #define BUNUSED_PARAM(variable) (void)variable
 #endif
 
+/* Enable this to put each IsoHeap and other allocation categories into their own malloc heaps, so that tools like vmmap can show how big each heap is. */
+#define BENABLE_MALLOC_HEAP_BREAKDOWN 0
+
 /* This is used for debugging when hacking on how bmalloc calculates its physical footprint. */
 #define ENABLE_PHYSICAL_PAGE_MAP 0
 
 #if BPLATFORM(IOS_FAMILY) && (BCPU(ARM64) || BCPU(ARM))
 #define BUSE_CHECK_NANO_MALLOC 1
 #else
 #define BUSE_CHECK_NANO_MALLOC 0
 #endif
 
+#if BPLATFORM(MAC)
+#define BUSE_PARTIAL_SCAVENGE 1
+#else
+#define BUSE_PARTIAL_SCAVENGE 0
+#endif
+
+#if !defined(BUSE_PRECOMPUTED_CONSTANTS_VMPAGE4K)
+#define BUSE_PRECOMPUTED_CONSTANTS_VMPAGE4K 1
+#endif
+
+#if !defined(BUSE_PRECOMPUTED_CONSTANTS_VMPAGE16K)
+#define BUSE_PRECOMPUTED_CONSTANTS_VMPAGE16K 1
+#endif
