diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectInspectorController.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectInspectorController.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectInspectorController.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectInspectorController.h
@@ -36,13 +36,13 @@
 #if ENABLE(INSPECTOR_ALTERNATE_DISPATCHERS)
 #include "AugmentableInspectorController.h"
 #endif
 
 namespace JSC {
+class CallFrame;
 class ConsoleClient;
 class Exception;
-class ExecState;
 class JSGlobalObject;
 }
 
 namespace Inspector {
 
@@ -65,11 +65,11 @@
 {
     WTF_MAKE_NONCOPYABLE(JSGlobalObjectInspectorController);
     WTF_MAKE_FAST_ALLOCATED;
 public:
     JSGlobalObjectInspectorController(JSC::JSGlobalObject&);
-    ~JSGlobalObjectInspectorController();
+    ~JSGlobalObjectInspectorController() override;
 
     void connectFrontend(FrontendChannel&, bool isAutomaticInspection, bool immediatelyPause);
     void disconnectFrontend(FrontendChannel&);
 
     void dispatchMessageFromFrontend(const String&);
@@ -77,16 +77,16 @@
     void globalObjectDestroyed();
 
     bool includesNativeCallStackWhenReportingExceptions() const { return m_includeNativeCallStackWithExceptions; }
     void setIncludesNativeCallStackWhenReportingExceptions(bool includesNativeCallStack) { m_includeNativeCallStackWithExceptions = includesNativeCallStack; }
 
-    void reportAPIException(JSC::ExecState*, JSC::Exception*);
+    void reportAPIException(JSC::JSGlobalObject*, JSC::Exception*);
 
     JSC::ConsoleClient* consoleClient() const;
 
     bool developerExtrasEnabled() const override;
-    bool canAccessInspectedScriptState(JSC::ExecState*) const override { return true; }
+    bool canAccessInspectedScriptState(JSC::JSGlobalObject*) const override { return true; }
     InspectorFunctionCallHandler functionCallHandler() const override;
     InspectorEvaluateHandler evaluateHandler() const override;
     void frontendInitialized() override;
     Ref<WTF::Stopwatch> executionStopwatch() override;
     JSGlobalObjectScriptDebugServer& scriptDebugServer() override;
