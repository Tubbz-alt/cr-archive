diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Forward.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/Forward.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Forward.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Forward.h
@@ -19,10 +19,11 @@
  */
 
 #pragma once
 
 #include <stddef.h>
+#include <wtf/Platform.h>
 
 namespace WTF {
 
 class AtomString;
 class AtomStringImpl;
@@ -45,19 +46,26 @@
 class UniquedStringImpl;
 class URL;
 class WallTime;
 
 struct FastMalloc;
+#if ENABLE(MALLOC_HEAP_BREAKDOWN)
+struct VectorMalloc;
+#else
+using VectorMalloc = FastMalloc;
+#endif
 
 template<typename> class CompletionHandler;
 template<typename T> struct DumbPtrTraits;
 template<typename T> struct DumbValueTraits;
 template<typename> class Function;
 template<typename> class LazyNeverDestroyed;
 template<typename> class NeverDestroyed;
 template<typename> class OptionSet;
 template<typename> class Optional;
+template<typename T> class Packed;
+template<typename T, size_t = alignof(T)> class PackedAlignedPtr;
 template<typename T, typename = DumbPtrTraits<T>> class Ref;
 template<typename T, typename = DumbPtrTraits<T>> class RefPtr;
 template<typename> class StringBuffer;
 template<typename, typename = void> class StringTypeAdapter;
 template<typename T> class WeakPtr;
@@ -67,11 +75,11 @@
 
 template<typename> struct EnumTraits;
 template<typename E, E...> struct EnumValues;
 
 template<typename...> class Variant;
-template<typename, size_t = 0, typename = CrashOnOverflow, size_t = 16> class Vector;
+template<typename, size_t = 0, typename = CrashOnOverflow, size_t = 16, typename Malloc = VectorMalloc> class Vector;
 template<typename Value, typename = typename DefaultHash<Value>::Hash, typename = HashTraits<Value>> class HashCountedSet;
 template<typename KeyArg, typename MappedArg, typename = typename DefaultHash<KeyArg>::Hash, typename = HashTraits<KeyArg>, typename = HashTraits<MappedArg>> class HashMap;
 template<typename ValueArg, typename = typename DefaultHash<ValueArg>::Hash, typename = HashTraits<ValueArg>> class HashSet;
 
 template<size_t, typename> struct variant_alternative;
