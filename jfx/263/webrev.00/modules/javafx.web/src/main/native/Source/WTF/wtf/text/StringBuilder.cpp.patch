diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuilder.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuilder.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuilder.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuilder.cpp
@@ -34,11 +34,11 @@
 
 static constexpr unsigned maxCapacity = String::MaxLength;
 
 static unsigned expandedCapacity(unsigned capacity, unsigned requiredLength)
 {
-    static const unsigned minimumCapacity = 16;
+    static constexpr unsigned minimumCapacity = 16;
     return std::max(requiredLength, std::max(minimumCapacity, std::min(capacity * 2, maxCapacity)));
 }
 
 void StringBuilder::reifyString() const
 {
@@ -48,11 +48,11 @@
     if (!m_string.isNull()) {
         ASSERT(m_string.length() == m_length.unsafeGet<unsigned>());
         return;
     }
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     m_isReified = true;
 #endif
 
     // Check for empty.
     if (!m_length) {
@@ -420,22 +420,10 @@
 void StringBuilder::appendNumber(unsigned long long number)
 {
     numberToStringUnsigned<StringBuilder>(number, this);
 }
 
-void StringBuilder::appendFixedPrecisionNumber(float number, unsigned precision, TrailingZerosTruncatingPolicy policy)
-{
-    NumberToStringBuffer buffer;
-    append(numberToFixedPrecisionString(number, precision, buffer, policy == TruncateTrailingZeros));
-}
-
-void StringBuilder::appendFixedPrecisionNumber(double number, unsigned precision, TrailingZerosTruncatingPolicy policy)
-{
-    NumberToStringBuffer buffer;
-    append(numberToFixedPrecisionString(number, precision, buffer, policy == TruncateTrailingZeros));
-}
-
 void StringBuilder::appendNumber(float number)
 {
     NumberToStringBuffer buffer;
     append(numberToString(number, buffer));
 }
@@ -444,22 +432,10 @@
 {
     NumberToStringBuffer buffer;
     append(numberToString(number, buffer));
 }
 
-void StringBuilder::appendFixedWidthNumber(float number, unsigned decimalPlaces)
-{
-    NumberToStringBuffer buffer;
-    append(numberToFixedWidthString(number, decimalPlaces, buffer));
-}
-
-void StringBuilder::appendFixedWidthNumber(double number, unsigned decimalPlaces)
-{
-    NumberToStringBuffer buffer;
-    append(numberToFixedWidthString(number, decimalPlaces, buffer));
-}
-
 bool StringBuilder::canShrink() const
 {
     if (hasOverflowed())
         return false;
     // Only shrink the buffer if it's less than 80% full.
