diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PrototypeKey.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PrototypeKey.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PrototypeKey.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PrototypeKey.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -75,22 +75,22 @@
         return WTF::IntHash<uintptr_t>::hash(bitwise_cast<uintptr_t>(m_prototype) ^ bitwise_cast<uintptr_t>(m_executable) ^ bitwise_cast<uintptr_t>(m_classInfo) ^ bitwise_cast<uintptr_t>(m_globalObject)) + m_inlineCapacity;
     }
 
 private:
     // WARNING: We require all of these default values to be zero. Otherwise, you'll need to add
-    // "static const bool emptyValueIsZero = false;" to the HashTraits at the bottom of this file.
+    // "static constexpr bool emptyValueIsZero = false;" to the HashTraits at the bottom of this file.
     JSObject* m_prototype { nullptr };
     FunctionExecutable* m_executable { nullptr };
     unsigned m_inlineCapacity { 0 };
     const ClassInfo* m_classInfo { nullptr };
     JSGlobalObject* m_globalObject { nullptr };
 };
 
 struct PrototypeKeyHash {
     static unsigned hash(const PrototypeKey& key) { return key.hash(); }
     static bool equal(const PrototypeKey& a, const PrototypeKey& b) { return a == b; }
-    static const bool safeToCompareToEmptyOrDeleted = true;
+    static constexpr bool safeToCompareToEmptyOrDeleted = true;
 };
 
 } // namespace JSC
 
 namespace WTF {
