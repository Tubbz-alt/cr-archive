diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGURIReference.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGURIReference.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGURIReference.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGURIReference.cpp
@@ -43,23 +43,33 @@
 bool SVGURIReference::isKnownAttribute(const QualifiedName& attributeName)
 {
     return PropertyRegistry::isKnownAttribute(attributeName);
 }
 
+SVGElement& SVGURIReference::contextElement() const
+{
+    return *m_href->contextElement();
+}
+
 void SVGURIReference::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
-    if (isKnownAttribute(name))
+    if (name.matches(SVGNames::hrefAttr))
+        m_href->setBaseValInternal(value.isNull() ? contextElement().getAttribute(XLinkNames::hrefAttr) : value);
+    else if (name.matches(XLinkNames::hrefAttr) && !contextElement().hasAttribute(SVGNames::hrefAttr))
         m_href->setBaseValInternal(value);
 }
 
 String SVGURIReference::fragmentIdentifierFromIRIString(const String& url, const Document& document)
 {
     size_t start = url.find('#');
     if (start == notFound)
         return emptyString();
 
-    URL base = start ? URL(document.baseURL(), url.substring(0, start)) : document.baseURL();
+    if (!start)
+        return url.substring(1);
+
+    URL base = URL(document.baseURL(), url.substring(0, start));
     String fragmentIdentifier = url.substring(start);
     URL kurl(base, fragmentIdentifier);
     if (equalIgnoringFragmentIdentifier(kurl, document.url()))
         return fragmentIdentifier.substring(1);
 
@@ -92,6 +102,25 @@
         return { nullptr, WTFMove(id) };
 
     return { treeScope.getElementById(id), WTFMove(id) };
 }
 
+bool SVGURIReference::haveLoadedRequiredResources() const
+{
+    if (href().isEmpty() || !isExternalURIReference(href(), contextElement().document()))
+        return true;
+    return errorOccurred() || haveFiredLoadEvent();
+}
+
+void SVGURIReference::dispatchLoadEvent()
+{
+    if (haveFiredLoadEvent())
+        return;
+
+    // Dispatch the load event
+    setHaveFiredLoadEvent(true);
+    ASSERT(contextElement().haveLoadedRequiredResources());
+
+    contextElement().sendLoadEventIfPossible();
+}
+
 }
