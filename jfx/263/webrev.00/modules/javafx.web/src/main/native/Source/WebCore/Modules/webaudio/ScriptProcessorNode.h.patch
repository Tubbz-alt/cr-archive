diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ScriptProcessorNode.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ScriptProcessorNode.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ScriptProcessorNode.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/ScriptProcessorNode.h
@@ -22,10 +22,11 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include "ActiveDOMObject.h"
 #include "AudioBus.h"
 #include "AudioNode.h"
 #include "EventListener.h"
 #include "EventTarget.h"
 #include <wtf/Forward.h>
@@ -42,26 +43,29 @@
 // The API allows for a variable number of inputs and outputs, although it must have at least one input or output.
 // This basic implementation supports no more than one input and output.
 // The "onaudioprocess" attribute is an event listener which will get called periodically with an AudioProcessingEvent which has
 // AudioBuffers for each input and output.
 
-class ScriptProcessorNode final : public AudioNode {
+class ScriptProcessorNode final : public AudioNode, public ActiveDOMObject {
     WTF_MAKE_ISO_ALLOCATED(ScriptProcessorNode);
 public:
     // bufferSize must be one of the following values: 256, 512, 1024, 2048, 4096, 8192, 16384.
     // This value controls how frequently the onaudioprocess event handler is called and how many sample-frames need to be processed each call.
     // Lower numbers for bufferSize will result in a lower (better) latency. Higher numbers will be necessary to avoid audio breakup and glitches.
     // The value chosen must carefully balance between latency and audio quality.
     static Ref<ScriptProcessorNode> create(AudioContext&, float sampleRate, size_t bufferSize, unsigned numberOfInputChannels, unsigned numberOfOutputChannels);
 
     virtual ~ScriptProcessorNode();
 
+    const char* activeDOMObjectName() const override { return "ScriptProcessorNode"; }
+
     // AudioNode
     void process(size_t framesToProcess) override;
     void reset() override;
     void initialize() override;
     void uninitialize() override;
+    void didBecomeMarkedForDeletion() override;
 
     size_t bufferSize() const { return m_bufferSize; }
 
 private:
     double tailTime() const override;
@@ -69,14 +73,10 @@
 
     ScriptProcessorNode(AudioContext&, float sampleRate, size_t bufferSize, unsigned numberOfInputChannels, unsigned numberOfOutputChannels);
 
     void fireProcessEvent();
 
-    bool addEventListener(const AtomString& eventType, Ref<EventListener>&&, const AddEventListenerOptions&) override;
-    bool removeEventListener(const AtomString& eventType, EventListener&, const ListenerOptions&) override;
-    void removeAllEventListeners() override;
-
     // Double buffering
     unsigned doubleBufferIndex() const { return m_doubleBufferIndex; }
     void swapBuffers() { m_doubleBufferIndex = 1 - m_doubleBufferIndex; }
     unsigned m_doubleBufferIndex;
     unsigned m_doubleBufferIndexForEvent;
@@ -89,9 +89,9 @@
 
     unsigned m_numberOfInputChannels;
     unsigned m_numberOfOutputChannels;
 
     RefPtr<AudioBus> m_internalInputBus;
-    bool m_hasAudioProcessListener;
+    RefPtr<PendingActivity<ScriptProcessorNode>> m_pendingActivity;
 };
 
 } // namespace WebCore
