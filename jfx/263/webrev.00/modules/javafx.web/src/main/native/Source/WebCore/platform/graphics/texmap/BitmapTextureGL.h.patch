diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/texmap/BitmapTextureGL.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/texmap/BitmapTextureGL.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/texmap/BitmapTextureGL.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/texmap/BitmapTextureGL.h
@@ -24,10 +24,11 @@
 #if USE(TEXTURE_MAPPER_GL)
 
 #include "BitmapTexture.h"
 #include "ClipStack.h"
 #include "FilterOperation.h"
+#include "Image.h"
 #include "IntSize.h"
 #include "TextureMapperContextAttributes.h"
 #include "TextureMapperGL.h"
 #include "TextureMapperGLHeaders.h"
 
@@ -75,10 +76,14 @@
     ClipStack& clipStack() { return m_clipStack; }
 
     GLint internalFormat() const { return m_internalFormat; }
 
     void copyFromExternalTexture(GLuint textureID);
+#if USE(ANGLE)
+    void setPendingContents(RefPtr<Image>&&);
+    void updatePendingContents(const IntRect& targetRect, const IntPoint& offset);
+#endif
 
     TextureMapperGL::Flags colorConvertFlags() const { return m_colorConvertFlags; }
 
 private:
     BitmapTextureGL(const TextureMapperContextAttributes&, const Flags, GLint internalFormat);
@@ -92,10 +97,14 @@
     bool m_shouldClear { true };
     ClipStack m_clipStack;
     TextureMapperContextAttributes m_contextAttributes;
     TextureMapperGL::Flags m_colorConvertFlags { TextureMapperGL::NoFlag };
 
+#if USE(ANGLE)
+    RefPtr<Image> m_pendingContents { nullptr };
+#endif
+
     void clearIfNeeded();
     void createFboIfNeeded();
 
     FilterInfo m_filterInfo;
 
