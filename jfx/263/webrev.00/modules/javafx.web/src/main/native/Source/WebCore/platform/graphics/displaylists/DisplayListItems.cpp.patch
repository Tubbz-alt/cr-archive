diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/displaylists/DisplayListItems.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/displaylists/DisplayListItems.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/displaylists/DisplayListItems.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/displaylists/DisplayListItems.cpp
@@ -27,10 +27,14 @@
 #include "DisplayListItems.h"
 
 #include "FontCascade.h"
 #include <wtf/text/TextStream.h>
 
+#if USE(CG)
+#include "GraphicsContextPlatformPrivateCG.h"
+#endif
+
 namespace WebCore {
 namespace DisplayList {
 
 // Should match RenderTheme::platformFocusRingWidth()
 static const float platformFocusRingWidth = 3;
@@ -42,10 +46,17 @@
     ts << *this;
     return ts.release().utf8();
 }
 #endif
 
+Item::Item(ItemType type)
+    : m_type(type)
+{
+}
+
+Item::~Item() = default;
+
 size_t Item::sizeInBytes(const Item& item)
 {
     switch (item.type()) {
     case ItemType::Save:
         return sizeof(downcast<Save>(item));
@@ -55,10 +66,12 @@
         return sizeof(downcast<Translate>(item));
     case ItemType::Rotate:
         return sizeof(downcast<Rotate>(item));
     case ItemType::Scale:
         return sizeof(downcast<Scale>(item));
+    case ItemType::SetCTM:
+        return sizeof(downcast<SetCTM>(item));
     case ItemType::ConcatenateCTM:
         return sizeof(downcast<ConcatenateCTM>(item));
     case ItemType::SetState:
         return sizeof(downcast<SetState>(item));
     case ItemType::SetLineCap:
@@ -160,10 +173,24 @@
 
     ts.endGroup();
     return ts;
 }
 
+DrawingItem::DrawingItem(ItemType type)
+    : Item(type)
+{
+}
+
+DrawingItem::~DrawingItem() = default;
+
+Save::Save()
+    : Item(ItemType::Save)
+{
+}
+
+Save::~Save() = default;
+
 void Save::apply(GraphicsContext& context) const
 {
     context.save();
 }
 
@@ -171,15 +198,31 @@
 {
     ts.dumpProperty("restore-index", item.restoreIndex());
     return ts;
 }
 
+Restore::Restore()
+    : Item(ItemType::Restore)
+{
+}
+
+Restore::~Restore() = default;
+
 void Restore::apply(GraphicsContext& context) const
 {
     context.restore();
 }
 
+Translate::Translate(float x, float y)
+    : Item(ItemType::Translate)
+    , m_x(x)
+    , m_y(y)
+{
+}
+
+Translate::~Translate() = default;
+
 void Translate::apply(GraphicsContext& context) const
 {
     context.translate(m_x, m_y);
 }
 
@@ -189,10 +232,18 @@
     ts.dumpProperty("y", item.y());
 
     return ts;
 }
 
+Rotate::Rotate(float angle)
+    : Item(ItemType::Rotate)
+    , m_angle(angle)
+{
+}
+
+Rotate::~Rotate() = default;
+
 void Rotate::apply(GraphicsContext& context) const
 {
     context.rotate(m_angle);
 }
 
@@ -201,10 +252,18 @@
     ts.dumpProperty("angle", item.angle());
 
     return ts;
 }
 
+Scale::Scale(const FloatSize& size)
+    : Item(ItemType::Scale)
+    , m_size(size)
+{
+}
+
+Scale::~Scale() = default;
+
 void Scale::apply(GraphicsContext& context) const
 {
     context.scale(m_size);
 }
 
@@ -213,16 +272,38 @@
     ts.dumpProperty("size", item.amount());
 
     return ts;
 }
 
+SetCTM::SetCTM(const AffineTransform& transform)
+    : Item(ItemType::SetCTM)
+    , m_transform(transform)
+{
+}
+
+SetCTM::~SetCTM() = default;
+
+void SetCTM::apply(GraphicsContext& context) const
+{
+    context.setCTM(m_transform);
+}
+
+static TextStream& operator<<(TextStream& ts, const SetCTM& item)
+{
+    ts.dumpProperty("set-ctm", item.transform());
+
+    return ts;
+}
+
 ConcatenateCTM::ConcatenateCTM(const AffineTransform& transform)
     : Item(ItemType::ConcatenateCTM)
     , m_transform(transform)
 {
 }
 
+ConcatenateCTM::~ConcatenateCTM() = default;
+
 void ConcatenateCTM::apply(GraphicsContext& context) const
 {
     context.concatCTM(m_transform);
 }
 
@@ -231,10 +312,24 @@
     ts.dumpProperty("ctm", item.transform());
 
     return ts;
 }
 
+SetState::SetState(const GraphicsContextState& state, GraphicsContextState::StateChangeFlags flags)
+    : Item(ItemType::SetState)
+    , m_state(state, flags)
+{
+}
+
+SetState::SetState(const GraphicsContextStateChange& stateChange)
+    : Item(ItemType::SetState)
+    , m_state(stateChange)
+{
+}
+
+SetState::~SetState() = default;
+
 void SetState::apply(GraphicsContext& context) const
 {
     m_state.apply(context);
 }
 
@@ -247,10 +342,18 @@
 {
     ts << state.state();
     return ts;
 }
 
+SetLineCap::SetLineCap(LineCap lineCap)
+    : Item(ItemType::SetLineCap)
+    , m_lineCap(lineCap)
+{
+}
+
+SetLineCap::~SetLineCap() = default;
+
 void SetLineCap::apply(GraphicsContext& context) const
 {
     context.setLineCap(m_lineCap);
 }
 
@@ -258,10 +361,19 @@
 {
     ts.dumpProperty("line-cap", lineCap.lineCap());
     return ts;
 }
 
+SetLineDash::SetLineDash(const DashArray& dashArray, float dashOffset)
+    : Item(ItemType::SetLineDash)
+    , m_dashArray(dashArray)
+    , m_dashOffset(dashOffset)
+{
+}
+
+SetLineDash::~SetLineDash() = default;
+
 void SetLineDash::apply(GraphicsContext& context) const
 {
     context.setLineDash(m_dashArray, m_dashOffset);
 }
 
@@ -270,10 +382,18 @@
     ts.dumpProperty("dash-array", lineDash.dashArray());
     ts.dumpProperty("dash-offset", lineDash.dashOffset());
     return ts;
 }
 
+SetLineJoin::SetLineJoin(LineJoin lineJoin)
+    : Item(ItemType::SetLineJoin)
+    , m_lineJoin(lineJoin)
+{
+}
+
+SetLineJoin::~SetLineJoin() = default;
+
 void SetLineJoin::apply(GraphicsContext& context) const
 {
     context.setLineJoin(m_lineJoin);
 }
 
@@ -281,10 +401,18 @@
 {
     ts.dumpProperty("line-join", lineJoin.lineJoin());
     return ts;
 }
 
+SetMiterLimit::SetMiterLimit(float miterLimit)
+    : Item(ItemType::SetMiterLimit)
+    , m_miterLimit(miterLimit)
+{
+}
+
+SetMiterLimit::~SetMiterLimit() = default;
+
 void SetMiterLimit::apply(GraphicsContext& context) const
 {
     context.setMiterLimit(m_miterLimit);
 }
 
@@ -292,15 +420,30 @@
 {
     ts.dumpProperty("mitre-limit", miterLimit.miterLimit());
     return ts;
 }
 
+ClearShadow::ClearShadow()
+    : Item(ItemType::ClearShadow)
+{
+}
+
+ClearShadow::~ClearShadow() = default;
+
 void ClearShadow::apply(GraphicsContext& context) const
 {
     context.clearShadow();
 }
 
+Clip::Clip(const FloatRect& rect)
+    : Item(ItemType::Clip)
+    , m_rect(rect)
+{
+}
+
+Clip::~Clip() = default;
+
 void Clip::apply(GraphicsContext& context) const
 {
     context.clip(m_rect);
 }
 
@@ -308,10 +451,18 @@
 {
     ts.dumpProperty("rect", item.rect());
     return ts;
 }
 
+ClipOut::ClipOut(const FloatRect& rect)
+    : Item(ItemType::ClipOut)
+    , m_rect(rect)
+{
+}
+
+ClipOut::~ClipOut() = default;
+
 void ClipOut::apply(GraphicsContext& context) const
 {
     context.clipOut(m_rect);
 }
 
@@ -319,10 +470,18 @@
 {
     ts.dumpProperty("rect", item.rect());
     return ts;
 }
 
+ClipOutToPath::ClipOutToPath(const Path& path)
+    : Item(ItemType::ClipOutToPath)
+    , m_path(path)
+{
+}
+
+ClipOutToPath::~ClipOutToPath() = default;
+
 void ClipOutToPath::apply(GraphicsContext& context) const
 {
     context.clipOut(m_path);
 }
 
@@ -330,10 +489,19 @@
 {
     ts.dumpProperty("path", item.path());
     return ts;
 }
 
+ClipPath::ClipPath(const Path& path, WindRule windRule)
+    : Item(ItemType::ClipPath)
+    , m_path(path)
+    , m_windRule(windRule)
+{
+}
+
+ClipPath::~ClipPath() = default;
+
 void ClipPath::apply(GraphicsContext& context) const
 {
     context.clipPath(m_path, m_windRule);
 }
 
@@ -342,10 +510,22 @@
     ts.dumpProperty("path", item.path());
     ts.dumpProperty("wind-rule", item.windRule());
     return ts;
 }
 
+DrawGlyphs::DrawGlyphs(const Font& font, Vector<GlyphBufferGlyph, 128>&& glyphs, Vector<GlyphBufferAdvance, 128>&& advances, const FloatPoint& blockLocation, const FloatSize& localAnchor, FontSmoothingMode smoothingMode)
+    : DrawingItem(ItemType::DrawGlyphs)
+    , m_font(const_cast<Font&>(font))
+    , m_glyphs(WTFMove(glyphs))
+    , m_advances(WTFMove(advances))
+    , m_blockLocation(blockLocation)
+    , m_localAnchor(localAnchor)
+    , m_smoothingMode(smoothingMode)
+{
+    computeBounds();
+}
+
 DrawGlyphs::DrawGlyphs(const Font& font, const GlyphBufferGlyph* glyphs, const GlyphBufferAdvance* advances, unsigned count, const FloatPoint& blockLocation, const FloatSize& localAnchor, FontSmoothingMode smoothingMode)
     : DrawingItem(ItemType::DrawGlyphs)
     , m_font(const_cast<Font&>(font))
     , m_blockLocation(blockLocation)
     , m_localAnchor(localAnchor)
@@ -358,10 +538,12 @@
         m_advances.uncheckedAppend(advances[i]);
     }
     computeBounds();
 }
 
+DrawGlyphs::~DrawGlyphs() = default;
+
 inline GlyphBuffer DrawGlyphs::generateGlyphBuffer() const
 {
     GlyphBuffer result;
     for (size_t i = 0; i < m_glyphs.size(); ++i) {
         result.add(m_glyphs[i], &m_font.get(), m_advances[i], GlyphBuffer::noOffset);
@@ -417,10 +599,12 @@
     , m_source(source)
     , m_imagePaintingOptions(imagePaintingOptions)
 {
 }
 
+DrawImage::~DrawImage() = default;
+
 void DrawImage::apply(GraphicsContext& context) const
 {
     context.drawImage(m_image.get(), m_destination, m_source, m_imagePaintingOptions);
 }
 
@@ -442,10 +626,12 @@
     , m_spacing(spacing)
     , m_imagePaintingOptions(imagePaintingOptions)
 {
 }
 
+DrawTiledImage::~DrawTiledImage() = default;
+
 void DrawTiledImage::apply(GraphicsContext& context) const
 {
     context.drawTiledImage(m_image.get(), m_destination, m_source, m_tileSize, m_spacing, m_imagePaintingOptions);
 }
 
@@ -470,10 +656,12 @@
     , m_vRule(vRule)
     , m_imagePaintingOptions(imagePaintingOptions)
 {
 }
 
+DrawTiledScaledImage::~DrawTiledScaledImage() = default;
+
 void DrawTiledScaledImage::apply(GraphicsContext& context) const
 {
     context.drawTiledImage(m_image.get(), m_destination, m_source, m_tileScaleFactor, m_hRule, m_vRule, m_imagePaintingOptions);
 }
 
@@ -492,34 +680,36 @@
 #if USE(CG)
     // FIXME: Need to store an image for Cairo.
     , m_image(image)
 #endif
     , m_imageSize(imageSize)
-    , m_destination(destRect)
+    , m_destinationRect(destRect)
     , m_srcRect(srcRect)
     , m_options(options)
 {
 #if !USE(CG)
     UNUSED_PARAM(image);
 #endif
 }
 
+DrawNativeImage::~DrawNativeImage() = default;
+
 void DrawNativeImage::apply(GraphicsContext& context) const
 {
 #if USE(CG)
-    context.drawNativeImage(m_image, m_imageSize, m_destination, m_srcRect, m_options);
+    context.drawNativeImage(m_image, m_imageSize, m_destinationRect, m_srcRect, m_options);
 #else
     UNUSED_PARAM(context);
 #endif
 }
 
 static TextStream& operator<<(TextStream& ts, const DrawNativeImage& item)
 {
     ts << static_cast<const DrawingItem&>(item);
     // FIXME: dump more stuff.
     ts.dumpProperty("source-rect", item.source());
-    ts.dumpProperty("dest-rect", item.destination());
+    ts.dumpProperty("dest-rect", item.destinationRect());
     return ts;
 }
 #endif
 
 DrawPattern::DrawPattern(Image& image, const FloatRect& destRect, const FloatRect& tileRect, const AffineTransform& patternTransform, const FloatPoint& phase, const FloatSize& spacing, const ImagePaintingOptions& options)
@@ -532,10 +722,12 @@
     , m_spacing(spacing)
     , m_options(options)
 {
 }
 
+DrawPattern::~DrawPattern() = default;
+
 void DrawPattern::apply(GraphicsContext& context) const
 {
     context.drawPattern(m_image.get(), m_destination, m_tileRect, m_patternTransform, m_phase, m_spacing, m_options);
 }
 
@@ -549,10 +741,19 @@
     ts.dumpProperty("phase", item.phase());
     ts.dumpProperty("spacing", item.spacing());
     return ts;
 }
 
+DrawRect::DrawRect(const FloatRect& rect, float borderThickness)
+    : DrawingItem(ItemType::DrawRect)
+    , m_rect(rect)
+    , m_borderThickness(borderThickness)
+{
+}
+
+DrawRect::~DrawRect() = default;
+
 void DrawRect::apply(GraphicsContext& context) const
 {
     context.drawRect(m_rect, m_borderThickness);
 }
 
@@ -562,10 +763,19 @@
     ts.dumpProperty("rect", item.rect());
     ts.dumpProperty("border-thickness", item.borderThickness());
     return ts;
 }
 
+DrawLine::DrawLine(const FloatPoint& point1, const FloatPoint& point2)
+    : DrawingItem(ItemType::DrawLine)
+    , m_point1(point1)
+    , m_point2(point2)
+{
+}
+
+DrawLine::~DrawLine() = default;
+
 Optional<FloatRect> DrawLine::localBounds(const GraphicsContext&) const
 {
     FloatRect bounds;
     bounds.fitToPoints(m_point1, m_point2);
     return bounds;
@@ -582,10 +792,23 @@
     ts.dumpProperty("point-1", item.point1());
     ts.dumpProperty("point-2", item.point2());
     return ts;
 }
 
+DrawLinesForText::DrawLinesForText(const FloatPoint& blockLocation, const FloatSize& localAnchor, float thickness, const DashArray& widths, bool printing, bool doubleLines)
+    : DrawingItem(ItemType::DrawLinesForText)
+    , m_blockLocation(blockLocation)
+    , m_localAnchor(localAnchor)
+    , m_widths(widths)
+    , m_thickness(thickness)
+    , m_printing(printing)
+    , m_doubleLines(doubleLines)
+{
+}
+
+DrawLinesForText::~DrawLinesForText() = default;
+
 void DrawLinesForText::apply(GraphicsContext& context) const
 {
     context.drawLinesForText(point(), m_thickness, m_widths, m_printing, m_doubleLines);
 }
 
@@ -613,10 +836,19 @@
     ts.dumpProperty("is-printing", item.isPrinting());
     ts.dumpProperty("double", item.doubleLines());
     return ts;
 }
 
+DrawDotsForDocumentMarker::DrawDotsForDocumentMarker(const FloatRect& rect, DocumentMarkerLineStyle style)
+    : DrawingItem(ItemType::DrawDotsForDocumentMarker)
+    , m_rect(rect)
+    , m_style(style)
+{
+}
+
+DrawDotsForDocumentMarker::~DrawDotsForDocumentMarker() = default;
+
 void DrawDotsForDocumentMarker::apply(GraphicsContext& context) const
 {
     context.drawDotsForDocumentMarker(m_rect, m_style);
 }
 
@@ -630,10 +862,18 @@
     ts << static_cast<const DrawingItem&>(item);
     ts.dumpProperty("rect", item.rect());
     return ts;
 }
 
+DrawEllipse::DrawEllipse(const FloatRect& rect)
+    : DrawingItem(ItemType::DrawEllipse)
+    , m_rect(rect)
+{
+}
+
+DrawEllipse::~DrawEllipse() = default;
+
 void DrawEllipse::apply(GraphicsContext& context) const
 {
     context.drawEllipse(m_rect);
 }
 
@@ -641,10 +881,18 @@
 {
     ts.dumpProperty("rect", item.rect());
     return ts;
 }
 
+DrawPath::DrawPath(const Path& path)
+    : DrawingItem(ItemType::DrawPath)
+    , m_path(path)
+{
+}
+
+DrawPath::~DrawPath() = default;
+
 void DrawPath::apply(GraphicsContext& context) const
 {
 #if USE(CG)
     context.drawPath(m_path);
 #else
@@ -657,10 +905,21 @@
     ts << static_cast<const DrawingItem&>(item);
 //    ts.dumpProperty("path", item.path()); // FIXME: add logging for paths.
     return ts;
 }
 
+DrawFocusRingPath::DrawFocusRingPath(const Path& path, float width, float offset, const Color& color)
+    : DrawingItem(ItemType::DrawFocusRingPath)
+    , m_path(path)
+    , m_width(width)
+    , m_offset(offset)
+    , m_color(color)
+{
+}
+
+DrawFocusRingPath::~DrawFocusRingPath() = default;
+
 void DrawFocusRingPath::apply(GraphicsContext& context) const
 {
     context.drawFocusRing(m_path, m_width, m_offset, m_color);
 }
 
@@ -679,10 +938,21 @@
     ts.dumpProperty("offset", item.offset());
     ts.dumpProperty("color", item.color());
     return ts;
 }
 
+DrawFocusRingRects::DrawFocusRingRects(const Vector<FloatRect>& rects, float width, float offset, const Color& color)
+    : DrawingItem(ItemType::DrawFocusRingRects)
+    , m_rects(rects)
+    , m_width(width)
+    , m_offset(offset)
+    , m_color(color)
+{
+}
+
+DrawFocusRingRects::~DrawFocusRingRects() = default;
+
 void DrawFocusRingRects::apply(GraphicsContext& context) const
 {
     context.drawFocusRing(m_rects, m_width, m_offset, m_color);
 }
 
@@ -703,10 +973,18 @@
     ts.dumpProperty("offset", item.offset());
     ts.dumpProperty("color", item.color());
     return ts;
 }
 
+FillRect::FillRect(const FloatRect& rect)
+    : DrawingItem(ItemType::FillRect)
+    , m_rect(rect)
+{
+}
+
+FillRect::~FillRect() = default;
+
 void FillRect::apply(GraphicsContext& context) const
 {
     context.fillRect(m_rect);
 }
 
@@ -715,10 +993,19 @@
     ts << static_cast<const DrawingItem&>(item);
     ts.dumpProperty("rect", item.rect());
     return ts;
 }
 
+FillRectWithColor::FillRectWithColor(const FloatRect& rect, const Color& color)
+    : DrawingItem(ItemType::FillRectWithColor)
+    , m_rect(rect)
+    , m_color(color)
+{
+}
+
+FillRectWithColor::~FillRectWithColor() = default;
+
 void FillRectWithColor::apply(GraphicsContext& context) const
 {
     context.fillRect(m_rect, m_color);
 }
 
@@ -728,10 +1015,19 @@
     ts.dumpProperty("rect", item.rect());
     ts.dumpProperty("color", item.color());
     return ts;
 }
 
+FillRectWithGradient::FillRectWithGradient(const FloatRect& rect, Gradient& gradient)
+    : DrawingItem(ItemType::FillRectWithGradient)
+    , m_rect(rect)
+    , m_gradient(gradient)
+{
+}
+
+FillRectWithGradient::~FillRectWithGradient() = default;
+
 void FillRectWithGradient::apply(GraphicsContext& context) const
 {
     context.fillRect(m_rect, m_gradient.get());
 }
 
@@ -741,10 +1037,21 @@
     // FIXME: log gradient.
     ts.dumpProperty("rect", item.rect());
     return ts;
 }
 
+FillCompositedRect::FillCompositedRect(const FloatRect& rect, const Color& color, CompositeOperator op, BlendMode blendMode)
+    : DrawingItem(ItemType::FillCompositedRect)
+    , m_rect(rect)
+    , m_color(color)
+    , m_op(op)
+    , m_blendMode(blendMode)
+{
+}
+
+FillCompositedRect::~FillCompositedRect() = default;
+
 void FillCompositedRect::apply(GraphicsContext& context) const
 {
     context.fillRect(m_rect, m_color, m_op, m_blendMode);
 }
 
@@ -756,10 +1063,20 @@
     ts.dumpProperty("composite-operation", item.compositeOperator());
     ts.dumpProperty("blend-mode", item.blendMode());
     return ts;
 }
 
+FillRoundedRect::FillRoundedRect(const FloatRoundedRect& rect, const Color& color, BlendMode blendMode)
+    : DrawingItem(ItemType::FillRoundedRect)
+    , m_rect(rect)
+    , m_color(color)
+    , m_blendMode(blendMode)
+{
+}
+
+FillRoundedRect::~FillRoundedRect() = default;
+
 void FillRoundedRect::apply(GraphicsContext& context) const
 {
     context.fillRoundedRect(m_rect, m_color, m_blendMode);
 }
 
@@ -770,10 +1087,20 @@
     ts.dumpProperty("color", item.color());
     ts.dumpProperty("blend-mode", item.blendMode());
     return ts;
 }
 
+FillRectWithRoundedHole::FillRectWithRoundedHole(const FloatRect& rect, const FloatRoundedRect& roundedHoleRect, const Color& color)
+    : DrawingItem(ItemType::FillRectWithRoundedHole)
+    , m_rect(rect)
+    , m_roundedHoleRect(roundedHoleRect)
+    , m_color(color)
+{
+}
+
+FillRectWithRoundedHole::~FillRectWithRoundedHole() = default;
+
 void FillRectWithRoundedHole::apply(GraphicsContext& context) const
 {
     context.fillRectWithRoundedHole(m_rect, m_roundedHoleRect, m_color);
 }
 
@@ -784,10 +1111,18 @@
     ts.dumpProperty("rounded-hole-rect", item.roundedHoleRect());
     ts.dumpProperty("color", item.color());
     return ts;
 }
 
+FillPath::FillPath(const Path& path)
+    : DrawingItem(ItemType::FillPath)
+    , m_path(path)
+{
+}
+
+FillPath::~FillPath() = default;
+
 void FillPath::apply(GraphicsContext& context) const
 {
     context.fillPath(m_path);
 }
 
@@ -796,10 +1131,18 @@
     ts << static_cast<const DrawingItem&>(item);
     ts.dumpProperty("path", item.path());
     return ts;
 }
 
+FillEllipse::FillEllipse(const FloatRect& rect)
+    : DrawingItem(ItemType::FillEllipse)
+    , m_rect(rect)
+{
+}
+
+FillEllipse::~FillEllipse() = default;
+
 void FillEllipse::apply(GraphicsContext& context) const
 {
     context.fillEllipse(m_rect);
 }
 
@@ -808,10 +1151,19 @@
     ts << static_cast<const DrawingItem&>(item);
     ts.dumpProperty("rect", item.rect());
     return ts;
 }
 
+StrokeRect::StrokeRect(const FloatRect& rect, float lineWidth)
+    : DrawingItem(ItemType::StrokeRect)
+    , m_rect(rect)
+    , m_lineWidth(lineWidth)
+{
+}
+
+StrokeRect::~StrokeRect() = default;
+
 Optional<FloatRect> StrokeRect::localBounds(const GraphicsContext&) const
 {
     FloatRect bounds = m_rect;
     bounds.expand(m_lineWidth, m_lineWidth);
     return bounds;
@@ -850,10 +1202,18 @@
     ts << static_cast<const DrawingItem&>(item);
     ts.dumpProperty("path", item.path());
     return ts;
 }
 
+StrokeEllipse::StrokeEllipse(const FloatRect& rect)
+    : DrawingItem(ItemType::StrokeEllipse)
+    , m_rect(rect)
+{
+}
+
+StrokeEllipse::~StrokeEllipse() = default;
+
 Optional<FloatRect> StrokeEllipse::localBounds(const GraphicsContext& context) const
 {
     float strokeThickness = context.strokeThickness();
 
     FloatRect bounds = m_rect;
@@ -871,10 +1231,26 @@
     ts << static_cast<const DrawingItem&>(item);
     ts.dumpProperty("rect", item.rect());
     return ts;
 }
 
+StrokePath::StrokePath(const Path& path)
+    : DrawingItem(ItemType::StrokePath)
+    , m_path(path)
+{
+}
+
+StrokePath::~StrokePath() = default;
+
+ClearRect::ClearRect(const FloatRect& rect)
+    : DrawingItem(ItemType::ClearRect)
+    , m_rect(rect)
+{
+}
+
+ClearRect::~ClearRect() = default;
+
 void ClearRect::apply(GraphicsContext& context) const
 {
     context.clearRect(m_rect);
 }
 
@@ -883,10 +1259,18 @@
     ts << static_cast<const DrawingItem&>(item);
     ts.dumpProperty("rect", item.rect());
     return ts;
 }
 
+BeginTransparencyLayer::BeginTransparencyLayer(float opacity)
+    : DrawingItem(ItemType::BeginTransparencyLayer)
+    , m_opacity(opacity)
+{
+}
+
+BeginTransparencyLayer::~BeginTransparencyLayer() = default;
+
 void BeginTransparencyLayer::apply(GraphicsContext& context) const
 {
     context.beginTransparencyLayer(m_opacity);
 }
 
@@ -895,27 +1279,56 @@
     ts << static_cast<const DrawingItem&>(item);
     ts.dumpProperty("opacity", item.opacity());
     return ts;
 }
 
+EndTransparencyLayer::EndTransparencyLayer()
+    : DrawingItem(ItemType::EndTransparencyLayer)
+{
+}
+
+EndTransparencyLayer::~EndTransparencyLayer() = default;
+
 void EndTransparencyLayer::apply(GraphicsContext& context) const
 {
     context.endTransparencyLayer();
 }
 
 #if USE(CG)
+ApplyStrokePattern::ApplyStrokePattern()
+    : Item(ItemType::ApplyStrokePattern)
+{
+}
+
+ApplyStrokePattern::~ApplyStrokePattern() = default;
+
 void ApplyStrokePattern::apply(GraphicsContext& context) const
 {
     context.applyStrokePattern();
 }
 
+ApplyFillPattern::ApplyFillPattern()
+    : Item(ItemType::ApplyFillPattern)
+{
+}
+
+ApplyFillPattern::~ApplyFillPattern() = default;
+
 void ApplyFillPattern::apply(GraphicsContext& context) const
 {
     context.applyFillPattern();
 }
 #endif
 
+ApplyDeviceScaleFactor::ApplyDeviceScaleFactor(float scaleFactor)
+    : Item(ItemType::ApplyDeviceScaleFactor)
+    , m_scaleFactor(scaleFactor)
+{
+}
+
+ApplyDeviceScaleFactor::~ApplyDeviceScaleFactor() = default;
+
 void ApplyDeviceScaleFactor::apply(GraphicsContext& context) const
 {
     context.applyDeviceScaleFactor(m_scaleFactor);
 }
 
@@ -931,10 +1344,11 @@
     case ItemType::Save: ts << "save"; break;
     case ItemType::Restore: ts << "restore"; break;
     case ItemType::Translate: ts << "translate"; break;
     case ItemType::Rotate: ts << "rotate"; break;
     case ItemType::Scale: ts << "scale"; break;
+    case ItemType::SetCTM: ts << "set-ctm"; break;
     case ItemType::ConcatenateCTM: ts << "concatentate-ctm"; break;
     case ItemType::SetState: ts << "set-state"; break;
     case ItemType::SetLineCap: ts << "set-line-cap"; break;
     case ItemType::SetLineDash: ts << "set-line-dash"; break;
     case ItemType::SetLineJoin: ts << "set-line-join"; break;
@@ -1000,10 +1414,13 @@
         ts << downcast<Rotate>(item);
         break;
     case ItemType::Scale:
         ts << downcast<Scale>(item);
         break;
+    case ItemType::SetCTM:
+        ts << downcast<SetCTM>(item);
+        break;
     case ItemType::ConcatenateCTM:
         ts << downcast<ConcatenateCTM>(item);
         break;
     case ItemType::SetState:
         ts << downcast<SetState>(item);
