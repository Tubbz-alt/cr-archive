diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamSource.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamSource.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamSource.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamSource.h
@@ -28,19 +28,20 @@
 
 #pragma once
 
 #if ENABLE(STREAMS_API)
 
-#include "JSDOMPromiseDeferred.h"
 #include "ReadableStreamDefaultController.h"
 #include <wtf/Optional.h>
 
 namespace WebCore {
 
+template<typename IDLType> class DOMPromiseDeferred;
+
 class ReadableStreamSource : public RefCounted<ReadableStreamSource> {
 public:
-    virtual ~ReadableStreamSource() = default;
+    virtual ~ReadableStreamSource();
 
     void start(ReadableStreamDefaultController&&, DOMPromiseDeferred<void>&&);
     void pull(DOMPromiseDeferred<void>&&);
     void cancel(JSC::JSValue);
 
@@ -61,61 +62,12 @@
     virtual void doStart() = 0;
     virtual void doPull() = 0;
     virtual void doCancel() = 0;
 
 private:
-    Optional<DOMPromiseDeferred<void>> m_promise;
+    std::unique_ptr<DOMPromiseDeferred<void>> m_promise;
     Optional<ReadableStreamDefaultController> m_controller;
 };
 
-inline void ReadableStreamSource::start(ReadableStreamDefaultController&& controller, DOMPromiseDeferred<void>&& promise)
-{
-    ASSERT(!m_promise);
-    m_promise = WTFMove(promise);
-    m_controller = WTFMove(controller);
-
-    setActive();
-    doStart();
-}
-
-inline void ReadableStreamSource::pull(DOMPromiseDeferred<void>&& promise)
-{
-    ASSERT(!m_promise);
-    ASSERT(m_controller);
-
-    m_promise = WTFMove(promise);
-
-    setActive();
-    doPull();
-}
-
-inline void ReadableStreamSource::startFinished()
-{
-    ASSERT(m_promise);
-    std::exchange(m_promise, WTF::nullopt).value().resolve();
-    setInactive();
-}
-
-inline void ReadableStreamSource::pullFinished()
-{
-    ASSERT(m_promise);
-    std::exchange(m_promise, WTF::nullopt).value().resolve();
-    setInactive();
-}
-
-inline void ReadableStreamSource::cancel(JSC::JSValue)
-{
-    clean();
-    doCancel();
-}
-
-inline void ReadableStreamSource::clean()
-{
-    if (m_promise) {
-        m_promise = WTF::nullopt;
-        setInactive();
-    }
-}
-
 } // namespace WebCore
 
 #endif // ENABLE(STREAMS_API)
