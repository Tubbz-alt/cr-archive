diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendHost.idl b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendHost.idl
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendHost.idl
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendHost.idl
@@ -59,41 +59,58 @@
 
     void startWindowDrag();
     void moveWindowBy(unrestricted float x, unrestricted float y);
 
     readonly attribute boolean isRemote;
-    DOMString localizedStringsURL();
-    DOMString backendCommandsURL();
-    DOMString debuggableType();
-    unsigned long inspectionLevel();
+    readonly attribute DOMString localizedStringsURL;
+    readonly attribute DOMString backendCommandsURL;
+    readonly attribute unsigned long inspectionLevel;
+    readonly attribute DebuggableInfo debuggableInfo;
 
     void copyText(DOMString text);
     void killText(DOMString text, boolean shouldPrependToKillRing, boolean shouldStartNewSequence);
     void openInNewTab(DOMString url);
     boolean canSave();
     void save(DOMString url, DOMString content, boolean base64Encoded, boolean forceSaveAs);
     void append(DOMString url, DOMString content);
     void close(DOMString url);
 
-    DOMString platform();
-    DOMString port();
+    readonly attribute DOMString port;
+    readonly attribute DOMString platform;
 
     void showContextMenu(Event event, sequence<ContextMenuItem> items);
     void dispatchEventAsContextMenuEvent(Event event);
     void sendMessageToBackend(DOMString message);
     void unbufferedLog(DOMString message);
 
     boolean isUnderTest();
+    boolean isExperimentalBuild();
 
     void beep();
     void inspectInspector();
     boolean isBeingInspected();
+
+    readonly attribute boolean supportsDiagnosticLogging;
+#if ENABLE_INSPECTOR_TELEMETRY
+    void logDiagnosticEvent(DOMString eventName, DOMString content);
+#endif
 };
 
 dictionary ContextMenuItem {
     DOMString type;
     DOMString label;
     long id;
     boolean enabled;
     boolean checked;
     sequence<ContextMenuItem> subItems;
 };
+
+[
+    JSGenerateToJSObject,
+]
+dictionary DebuggableInfo {
+    DOMString debuggableType;
+    DOMString targetPlatformName;
+    DOMString targetBuildVersion;
+    DOMString targetProductVersion;
+    boolean targetIsSimulator;
+};
