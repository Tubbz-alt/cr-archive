diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/spi/darwin/SandboxSPI.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/spi/darwin/SandboxSPI.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/spi/darwin/SandboxSPI.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/spi/darwin/SandboxSPI.h
@@ -33,10 +33,11 @@
 #import <sandbox/private.h>
 #else
 enum sandbox_filter_type {
     SANDBOX_FILTER_NONE,
     SANDBOX_FILTER_GLOBAL_NAME = 2,
+    SANDBOX_FILTER_XPC_SERVICE_NAME = 12,
 };
 
 #define SANDBOX_NAMED_EXTERNAL 0x0003
 #endif
 
@@ -56,16 +57,19 @@
 
 extern const char *const APP_SANDBOX_READ;
 extern const char *const APP_SANDBOX_READ_WRITE;
 extern const enum sandbox_filter_type SANDBOX_CHECK_NO_REPORT;
 
-extern const uint32_t SANDBOX_EXTENSION_USER_INTENT;
-
 char *sandbox_extension_issue_file(const char *extension_class, const char *path, uint32_t flags);
 char *sandbox_extension_issue_generic(const char *extension_class, uint32_t flags);
-char *sandbox_extension_issue_mach_to_process_by_pid(const char *extension_class, const char *name, uint32_t flags, pid_t);
-char *sandbox_extension_issue_file_to_process_by_pid(const char *extension_class, const char *path, uint32_t flags, pid_t);
+#if HAVE(SANDBOX_ISSUE_READ_EXTENSION_TO_PROCESS_BY_AUDIT_TOKEN)
+char *sandbox_extension_issue_file_to_process(const char *extension_class, const char *path, uint32_t flags, audit_token_t);
+#endif
+#if HAVE(SANDBOX_ISSUE_MACH_EXTENSION_TO_PROCESS_BY_AUDIT_TOKEN)
+char *sandbox_extension_issue_mach_to_process(const char *extension_class, const char *name, uint32_t flags, audit_token_t);
+#endif
+char *sandbox_extension_issue_mach(const char *extension_class, const char *name, uint32_t flags);
 int sandbox_check(pid_t, const char *operation, enum sandbox_filter_type, ...);
 int sandbox_check_by_audit_token(audit_token_t, const char *operation, enum sandbox_filter_type, ...);
 int sandbox_container_path_for_pid(pid_t, char *buffer, size_t bufsize);
 int sandbox_extension_release(int64_t extension_handle);
 int sandbox_init_with_parameters(const char *profile, uint64_t flags, const char *const parameters[], char **errorbuf);
