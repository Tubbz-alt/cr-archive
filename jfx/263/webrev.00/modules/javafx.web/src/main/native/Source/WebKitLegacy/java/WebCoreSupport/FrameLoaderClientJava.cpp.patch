diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/FrameLoaderClientJava.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/FrameLoaderClientJava.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/FrameLoaderClientJava.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/FrameLoaderClientJava.cpp
@@ -337,20 +337,10 @@
         backgroundColor = fv->baseBackgroundColor();
     }
     frame()->createView(IntRect(pageRect).size(), backgroundColor, /* fixedLayoutSize */ { }, /* fixedVisibleContentRect */ { });
 }
 
-void FrameLoaderClientJava::didSaveToPageCache()
-{
-    notImplemented();
-}
-
-void FrameLoaderClientJava::didRestoreFromPageCache()
-{
-    notImplemented();
-}
-
 WTF::Ref<WebCore::DocumentLoader> FrameLoaderClientJava::createDocumentLoader(const WebCore::ResourceRequest& request, const SubstituteData& substituteData)
 {
     return DocumentLoader::create(request, substituteData);
 }
 
@@ -1059,10 +1049,15 @@
     using namespace FrameLoaderClientJavaInternal;
     //Font fallback supported by Java Fonts internaly
     return !(error.isCancellation() || (error.errorCode() == WebKitErrorFrameLoadInterruptedByPolicyChange));
 }
 
+void FrameLoaderClientJava::didRestoreFromBackForwardCache()
+{
+    // FIXME: openjfx2.26 Raise Bug to track fwd / back cache
+}
+
 bool FrameLoaderClientJava::canCachePage() const
 {
     return true;
 }
 
@@ -1112,11 +1107,11 @@
     if (&world != &mainThreadNormalWorld()) {
         return;
     }
 
     JSGlobalContextRef context = toGlobalRef(frame()->script().globalObject(
-            mainThreadNormalWorld())->globalExec());
+            mainThreadNormalWorld()));
     JSObjectRef windowObject = JSContextGetGlobalObject(context);
 
     env->CallVoidMethod(m_webPage, didClearWindowObjectMID,
             ptr_to_jlong(context), ptr_to_jlong(windowObject));
     WTF::CheckAndClearException(env);
@@ -1125,11 +1120,11 @@
 void FrameLoaderClientJava::registerForIconNotification()
 {
     //notImplemented();
 }
 
-void FrameLoaderClientJava::convertMainResourceLoadToDownload(DocumentLoader*, PAL::SessionID, const ResourceRequest&, const ResourceResponse&)
+void FrameLoaderClientJava::convertMainResourceLoadToDownload(DocumentLoader*, const ResourceRequest&, const ResourceResponse&)
 {
     //notImplemented();
 }
 
 Ref<FrameNetworkingContext> FrameLoaderClientJava::createNetworkingContext()
@@ -1167,11 +1162,6 @@
 Optional<FrameIdentifier> FrameLoaderClientJava::frameID() const
 {
     return WTF::nullopt;
 }
 
-PAL::SessionID FrameLoaderClientJava::sessionID() const
-{
-    return m_frame && m_frame->page() ? m_frame->page()->sessionID() : PAL::SessionID::defaultSessionID();
-}
-
 }
