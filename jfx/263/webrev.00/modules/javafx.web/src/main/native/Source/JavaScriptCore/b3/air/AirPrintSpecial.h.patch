diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirPrintSpecial.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirPrintSpecial.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirPrintSpecial.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirPrintSpecial.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -31,10 +31,13 @@
 #include "AirInst.h"
 #include "AirSpecial.h"
 #include "MacroAssemblerPrinter.h"
 
 namespace JSC {
+
+class CCallHelpers;
+
 namespace Printer {
 
 typedef Vector<B3::Air::Arg> ArgList;
 
 // IsSameOrReference::value is true if T is the same type as U or U&. Else, it is false.
@@ -95,34 +98,34 @@
     ~PrintSpecial();
 
     // You cannot use this register to pass arguments. It just so happens that this register is not
     // used for arguments in the C calling convention. By the way, this is the only thing that causes
     // this special to be specific to C calls.
-    static const GPRReg scratchRegister = GPRInfo::nonArgGPR0;
+    static constexpr GPRReg scratchRegister = GPRInfo::nonArgGPR0;
 
 protected:
     void forEachArg(Inst&, const ScopedLambda<Inst::EachArgCallback>&) final;
     bool isValid(Inst&) final;
     bool admitsStack(Inst&, unsigned argIndex) final;
     bool admitsExtendedOffsetAddr(Inst&, unsigned) final;
     void reportUsedRegisters(Inst&, const RegisterSet&) final;
-    CCallHelpers::Jump generate(Inst&, CCallHelpers&, GenerationContext&) final;
+    MacroAssembler::Jump generate(Inst&, CCallHelpers&, GenerationContext&) final;
     RegisterSet extraEarlyClobberedRegs(Inst&) final;
     RegisterSet extraClobberedRegs(Inst&) final;
 
     void dumpImpl(PrintStream&) const final;
     void deepDumpImpl(PrintStream&) const final;
 
 private:
-    static const unsigned specialArgOffset = 0;
-    static const unsigned numSpecialArgs = 1;
-    static const unsigned calleeArgOffset = numSpecialArgs;
-    static const unsigned numCalleeArgs = 1;
-    static const unsigned returnGPArgOffset = numSpecialArgs + numCalleeArgs;
-    static const unsigned numReturnGPArgs = 2;
-    static const unsigned returnFPArgOffset = numSpecialArgs + numCalleeArgs + numReturnGPArgs;
-    static const unsigned numReturnFPArgs = 1;
+    static constexpr unsigned specialArgOffset = 0;
+    static constexpr unsigned numSpecialArgs = 1;
+    static constexpr unsigned calleeArgOffset = numSpecialArgs;
+    static constexpr unsigned numCalleeArgs = 1;
+    static constexpr unsigned returnGPArgOffset = numSpecialArgs + numCalleeArgs;
+    static constexpr unsigned numReturnGPArgs = 2;
+    static constexpr unsigned returnFPArgOffset = numSpecialArgs + numCalleeArgs + numReturnGPArgs;
+    static constexpr unsigned numReturnFPArgs = 1;
     static constexpr unsigned argArgOffset =
     numSpecialArgs + numCalleeArgs + numReturnGPArgs + numReturnFPArgs;
 
     Printer::PrintRecordList* m_printRecordList;
 };
