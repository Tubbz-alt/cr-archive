diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScript.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScript.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScript.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScript.cpp
@@ -162,15 +162,20 @@
     }
 
     result = BindingTraits<Protocol::Runtime::ObjectPreview>::runtimeCast(WTFMove(resultValue));
 }
 
-void InjectedScript::getProperties(ErrorString& errorString, const String& objectId, bool ownProperties, bool generatePreview, RefPtr<JSON::ArrayOf<Protocol::Runtime::PropertyDescriptor>>& properties)
+void InjectedScript::getProperties(ErrorString& errorString, const String& objectId, bool ownProperties, int fetchStart, int fetchCount, bool generatePreview, RefPtr<JSON::ArrayOf<Protocol::Runtime::PropertyDescriptor>>& properties)
 {
+    ASSERT(fetchStart >= 0);
+    ASSERT(fetchCount >= 0);
+
     Deprecated::ScriptFunctionCall function(injectedScriptObject(), "getProperties"_s, inspectorEnvironment()->functionCallHandler());
     function.appendArgument(objectId);
     function.appendArgument(ownProperties);
+    function.appendArgument(fetchStart);
+    function.appendArgument(fetchCount);
     function.appendArgument(generatePreview);
 
     RefPtr<JSON::Value> result = makeCall(function);
     if (!result || result->type() != JSON::Value::Type::Array) {
         errorString = "Internal error"_s;
@@ -178,14 +183,19 @@
     }
 
     properties = BindingTraits<JSON::ArrayOf<Protocol::Runtime::PropertyDescriptor>>::runtimeCast(WTFMove(result));
 }
 
-void InjectedScript::getDisplayableProperties(ErrorString& errorString, const String& objectId, bool generatePreview, RefPtr<JSON::ArrayOf<Protocol::Runtime::PropertyDescriptor>>& properties)
+void InjectedScript::getDisplayableProperties(ErrorString& errorString, const String& objectId, int fetchStart, int fetchCount, bool generatePreview, RefPtr<JSON::ArrayOf<Protocol::Runtime::PropertyDescriptor>>& properties)
 {
+    ASSERT(fetchStart >= 0);
+    ASSERT(fetchCount >= 0);
+
     Deprecated::ScriptFunctionCall function(injectedScriptObject(), "getDisplayableProperties"_s, inspectorEnvironment()->functionCallHandler());
     function.appendArgument(objectId);
+    function.appendArgument(fetchStart);
+    function.appendArgument(fetchCount);
     function.appendArgument(generatePreview);
 
     RefPtr<JSON::Value> result = makeCall(function);
     if (!result || result->type() != JSON::Value::Type::Array) {
         errorString = "Internal error"_s;
@@ -209,17 +219,20 @@
 
     auto array = BindingTraits<JSON::ArrayOf<Protocol::Runtime::InternalPropertyDescriptor>>::runtimeCast(WTFMove(result));
     properties = array->length() > 0 ? array : nullptr;
 }
 
-void InjectedScript::getCollectionEntries(ErrorString& errorString, const String& objectId, const String& objectGroup, int startIndex, int numberToFetch, RefPtr<JSON::ArrayOf<Protocol::Runtime::CollectionEntry>>& entries)
+void InjectedScript::getCollectionEntries(ErrorString& errorString, const String& objectId, const String& objectGroup, int fetchStart, int fetchCount, RefPtr<JSON::ArrayOf<Protocol::Runtime::CollectionEntry>>& entries)
 {
+    ASSERT(fetchStart >= 0);
+    ASSERT(fetchCount >= 0);
+
     Deprecated::ScriptFunctionCall function(injectedScriptObject(), "getCollectionEntries"_s, inspectorEnvironment()->functionCallHandler());
     function.appendArgument(objectId);
     function.appendArgument(objectGroup);
-    function.appendArgument(startIndex);
-    function.appendArgument(numberToFetch);
+    function.appendArgument(fetchStart);
+    function.appendArgument(fetchCount);
 
     RefPtr<JSON::Value> result = makeCall(function);
     if (!result || result->type() != JSON::Value::Type::Array) {
         errorString = "Internal error"_s;
         return;
@@ -248,16 +261,16 @@
 {
     ASSERT(!hasNoValue());
     Deprecated::ScriptFunctionCall function(injectedScriptObject(), "wrapCallFrames"_s, inspectorEnvironment()->functionCallHandler());
     function.appendArgument(callFrames);
 
-    bool hadException = false;
-    auto callFramesValue = callFunctionWithEvalEnabled(function, hadException);
-    if (!callFramesValue)
+    auto callResult = callFunctionWithEvalEnabled(function);
+    ASSERT(callResult);
+    if (!callResult || !callResult.value())
         return JSON::ArrayOf<Protocol::Debugger::CallFrame>::create();
-    ASSERT(!hadException);
-    RefPtr<JSON::Value> result = toInspectorValue(*scriptState(), callFramesValue);
+
+    RefPtr<JSON::Value> result = toInspectorValue(globalObject(), callResult.value());
     if (result->type() == JSON::Value::Type::Array)
         return BindingTraits<JSON::ArrayOf<Protocol::Debugger::CallFrame>>::runtimeCast(WTFMove(result)).releaseNonNull();
 
     return JSON::ArrayOf<Protocol::Debugger::CallFrame>::create();
 }
@@ -269,17 +282,16 @@
     wrapFunction.appendArgument(value);
     wrapFunction.appendArgument(groupName);
     wrapFunction.appendArgument(hasAccessToInspectedScriptState());
     wrapFunction.appendArgument(generatePreview);
 
-    bool hadException = false;
-    auto r = callFunctionWithEvalEnabled(wrapFunction, hadException);
-    if (hadException)
+    auto callResult = callFunctionWithEvalEnabled(wrapFunction);
+    if (!callResult)
         return nullptr;
 
     RefPtr<JSON::Object> resultObject;
-    bool castSucceeded = toInspectorValue(*scriptState(), r)->asObject(resultObject);
+    bool castSucceeded = toInspectorValue(globalObject(), callResult.value())->asObject(resultObject);
     ASSERT_UNUSED(castSucceeded, castSucceeded);
 
     return BindingTraits<Protocol::Runtime::RemoteObject>::runtimeCast(resultObject);
 }
 
@@ -289,20 +301,19 @@
     Deprecated::ScriptFunctionCall wrapFunction(injectedScriptObject(), "wrapJSONString"_s, inspectorEnvironment()->functionCallHandler());
     wrapFunction.appendArgument(json);
     wrapFunction.appendArgument(groupName);
     wrapFunction.appendArgument(generatePreview);
 
-    bool hadException = false;
-    auto evalResult = callFunctionWithEvalEnabled(wrapFunction, hadException);
-    if (hadException)
+    auto callResult = callFunctionWithEvalEnabled(wrapFunction);
+    if (!callResult)
         return nullptr;
 
-    if (evalResult.isNull())
+    if (callResult.value().isNull())
         return nullptr;
 
     RefPtr<JSON::Object> resultObject;
-    bool castSucceeded = toInspectorValue(*scriptState(), evalResult)->asObject(resultObject);
+    bool castSucceeded = toInspectorValue(globalObject(), callResult.value())->asObject(resultObject);
     ASSERT_UNUSED(castSucceeded, castSucceeded);
 
     return BindingTraits<Protocol::Runtime::RemoteObject>::runtimeCast(resultObject);
 }
 
@@ -315,17 +326,16 @@
     if (!columns)
         wrapFunction.appendArgument(false);
     else
         wrapFunction.appendArgument(columns);
 
-    bool hadException = false;
-    auto r = callFunctionWithEvalEnabled(wrapFunction, hadException);
-    if (hadException)
+    auto callResult = callFunctionWithEvalEnabled(wrapFunction);
+    if (!callResult)
         return nullptr;
 
     RefPtr<JSON::Object> resultObject;
-    bool castSucceeded = toInspectorValue(*scriptState(), r)->asObject(resultObject);
+    bool castSucceeded = toInspectorValue(globalObject(), callResult.value())->asObject(resultObject);
     ASSERT_UNUSED(castSucceeded, castSucceeded);
 
     return BindingTraits<Protocol::Runtime::RemoteObject>::runtimeCast(resultObject);
 }
 
@@ -333,17 +343,16 @@
 {
     ASSERT(!hasNoValue());
     Deprecated::ScriptFunctionCall wrapFunction(injectedScriptObject(), "previewValue"_s, inspectorEnvironment()->functionCallHandler());
     wrapFunction.appendArgument(value);
 
-    bool hadException = false;
-    auto r = callFunctionWithEvalEnabled(wrapFunction, hadException);
-    if (hadException)
+    auto callResult = callFunctionWithEvalEnabled(wrapFunction);
+    if (!callResult)
         return nullptr;
 
     RefPtr<JSON::Object> resultObject;
-    bool castSucceeded = toInspectorValue(*scriptState(), r)->asObject(resultObject);
+    bool castSucceeded = toInspectorValue(globalObject(), callResult.value())->asObject(resultObject);
     ASSERT_UNUSED(castSucceeded, castSucceeded);
 
     return BindingTraits<Protocol::Runtime::ObjectPreview>::runtimeCast(resultObject);
 }
 
@@ -381,15 +390,15 @@
 {
     ASSERT(!hasNoValue());
     Deprecated::ScriptFunctionCall function(injectedScriptObject(), "findObjectById"_s, inspectorEnvironment()->functionCallHandler());
     function.appendArgument(objectId);
 
-    bool hadException = false;
-    auto resultValue = callFunctionWithEvalEnabled(function, hadException);
-    ASSERT(!hadException);
-
-    return resultValue;
+    auto callResult = callFunctionWithEvalEnabled(function);
+    ASSERT(callResult);
+    if (!callResult)
+        return { };
+    return callResult.value();
 }
 
 void InjectedScript::inspectObject(JSC::JSValue value)
 {
     ASSERT(!hasNoValue());
@@ -406,32 +415,35 @@
 }
 
 void InjectedScript::releaseObjectGroup(const String& objectGroup)
 {
     ASSERT(!hasNoValue());
+    // JDK-8164076
+    if (hasNoValue())
+        return;
+
     Deprecated::ScriptFunctionCall releaseFunction(injectedScriptObject(), "releaseObjectGroup"_s, inspectorEnvironment()->functionCallHandler());
     releaseFunction.appendArgument(objectGroup);
 
-    bool hadException = false;
-    callFunctionWithEvalEnabled(releaseFunction, hadException);
-    ASSERT(!hadException);
+    auto callResult = callFunctionWithEvalEnabled(releaseFunction);
+    ASSERT_UNUSED(callResult, callResult);
 }
 
 JSC::JSValue InjectedScript::arrayFromVector(Vector<JSC::JSValue>&& vector)
 {
-    JSC::ExecState* execState = scriptState();
-    if (!execState)
+    JSC::JSGlobalObject* globalObject = this->globalObject();
+    if (!globalObject)
         return JSC::jsUndefined();
 
-    JSC::JSLockHolder lock(execState);
+    JSC::JSLockHolder lock(globalObject);
 
-    JSC::JSArray* array = JSC::constructEmptyArray(execState, nullptr);
+    JSC::JSArray* array = JSC::constructEmptyArray(globalObject, nullptr);
     if (!array)
         return JSC::jsUndefined();
 
     for (auto& item : vector)
-        array->putDirectIndex(execState, array->length(), item);
+        array->putDirectIndex(globalObject, array->length(), item);
 
     return array;
 }
 
 } // namespace Inspector
