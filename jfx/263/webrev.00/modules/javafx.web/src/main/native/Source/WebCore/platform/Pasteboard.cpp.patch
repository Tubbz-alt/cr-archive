diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/Pasteboard.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/Pasteboard.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/Pasteboard.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/Pasteboard.cpp
@@ -28,12 +28,10 @@
 
 #include "PasteboardStrategy.h"
 #include "PlatformStrategies.h"
 #include "Settings.h"
 #include "SharedBuffer.h"
-#include <wtf/URLParser.h>
-#include <wtf/persistence/PersistentCoders.h>
 #include <wtf/text/StringHash.h>
 
 namespace WebCore {
 
 // Making this non-inline so that WebKit 2's decoding doesn't have to include Image.h.
@@ -49,53 +47,60 @@
 {
     URL url({ }, urlString);
     return url.protocolIsInHTTPFamily() || url.protocolIsBlob() || url.protocolIsData();
 }
 
-Ref<SharedBuffer> PasteboardCustomData::createSharedBuffer() const
-{
-    const static unsigned currentCustomDataSerializationVersion = 1;
-
-    WTF::Persistence::Encoder encoder;
-    encoder << currentCustomDataSerializationVersion;
-    encoder << origin;
-    encoder << sameOriginCustomData;
-    encoder << orderedTypes;
-    return SharedBuffer::create(encoder.buffer(), encoder.bufferSize());
-}
+#if !PLATFORM(COCOA)
 
-PasteboardCustomData PasteboardCustomData::fromSharedBuffer(const SharedBuffer& buffer)
+Vector<String> Pasteboard::readAllStrings(const String& type)
 {
-    const static unsigned maxSupportedDataSerializationVersionNumber = 1;
-
-    PasteboardCustomData result;
-    WTF::Persistence::Decoder decoder { reinterpret_cast<const uint8_t*>(buffer.data()), buffer.size() };
-    unsigned version;
-    if (!decoder.decode(version) || version > maxSupportedDataSerializationVersionNumber)
-        return { };
-
-    if (!decoder.decode(result.origin))
+    auto result = readString(type);
+    if (result.isEmpty())
         return { };
 
-    if (!decoder.decode(result.sameOriginCustomData))
-        return { };
+    return { result };
+}
 
-    if (!decoder.decode(result.orderedTypes))
-        return { };
+#endif
 
-    return result;
+Optional<Vector<PasteboardItemInfo>> Pasteboard::allPasteboardItemInfo() const
+{
+#if PLATFORM(COCOA)
+    if (auto* strategy = platformStrategies()->pasteboardStrategy())
+        return strategy->allPasteboardItemInfo(name(), m_changeCount);
+#endif
+    return WTF::nullopt;
 }
 
-#if !PLATFORM(COCOA)
+Optional<PasteboardItemInfo> Pasteboard::pasteboardItemInfo(size_t index) const
+{
+#if PLATFORM(COCOA)
+    if (auto* strategy = platformStrategies()->pasteboardStrategy())
+        return strategy->informationForItemAtIndex(index, name(), m_changeCount);
+#else
+    UNUSED_PARAM(index);
+#endif
+    return WTF::nullopt;
+}
 
-Vector<String> Pasteboard::readAllStrings(const String& type)
+String Pasteboard::readString(size_t index, const String& type)
 {
-    auto result = readString(type);
-    if (result.isEmpty())
-        return { };
+    if (auto* strategy = platformStrategies()->pasteboardStrategy())
+        return strategy->readStringFromPasteboard(index, type, name());
+    return { };
+}
 
-    return { result };
+RefPtr<WebCore::SharedBuffer> Pasteboard::readBuffer(size_t index, const String& type)
+{
+    if (auto* strategy = platformStrategies()->pasteboardStrategy())
+        return strategy->readBufferFromPasteboard(index, type, name());
+    return nullptr;
 }
 
-#endif
+URL Pasteboard::readURL(size_t index, String& title)
+{
+    if (auto* strategy = platformStrategies()->pasteboardStrategy())
+        return strategy->readURLFromPasteboard(index, name(), title);
+    return { };
+}
 
 };
