diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGDoesGC.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGDoesGC.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGDoesGC.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGDoesGC.cpp
@@ -83,11 +83,11 @@
     case ArithBitNot:
     case ArithBitAnd:
     case ArithBitOr:
     case ArithBitXor:
     case ArithBitLShift:
-    case BitRShift:
+    case ArithBitRShift:
     case BitURShift:
     case ValueToInt32:
     case UInt32ToNumber:
     case DoubleAsInt32:
     case ArithAdd:
@@ -115,26 +115,30 @@
     case CheckStructureImmediate:
     case GetExecutable:
     case GetButterfly:
     case CheckSubClass:
     case CheckArray:
+    case CheckArrayOrEmpty:
+    case CheckNeutered:
     case GetScope:
     case SkipScope:
     case GetGlobalObject:
     case GetGlobalThis:
     case GetClosureVar:
     case PutClosureVar:
+    case GetInternalField:
+    case PutInternalField:
     case GetRegExpObjectLastIndex:
     case SetRegExpObjectLastIndex:
     case RecordRegExpCachedResult:
     case GetGlobalVar:
     case GetGlobalLexicalVariable:
     case PutGlobalVariable:
     case CheckCell:
     case CheckNotEmpty:
     case AssertNotEmpty:
-    case CheckStringIdent:
+    case CheckIdent:
     case CompareBelow:
     case CompareBelowEq:
     case CompareEqPtr:
     case ProfileControlFlow:
     case OverridesHasInstance:
@@ -188,10 +192,11 @@
     case GetGetter:
     case GetSetter:
     case GetArrayLength:
     case GetVectorLength:
     case StringCharCodeAt:
+    case StringCodePointAt:
     case GetTypedArrayByteOffset:
     case GetPrototypeOf:
     case PutStructure:
     case GetByOffset:
     case GetGetterSetterByOffset:
@@ -203,10 +208,11 @@
     case PhantomNewObject:
     case PhantomNewFunction:
     case PhantomNewGeneratorFunction:
     case PhantomNewAsyncFunction:
     case PhantomNewAsyncGeneratorFunction:
+    case PhantomNewArrayIterator:
     case PhantomCreateActivation:
     case PhantomDirectArguments:
     case PhantomCreateRest:
     case PhantomNewArrayWithSpread:
     case PhantomNewArrayBuffer:
@@ -234,26 +240,29 @@
     case AtomicsSub:
     case AtomicsXor:
     case AtomicsIsLockFree:
     case MatchStructure:
     case FilterCallLinkStatus:
-    case FilterGetByIdStatus:
+    case FilterGetByStatus:
     case FilterPutByIdStatus:
     case FilterInByIdStatus:
+    case DateGetInt32OrNaN:
+    case DateGetTime:
     case DataViewGetInt:
     case DataViewGetFloat:
     case DataViewSet:
         return false;
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     case ArrayPush:
     case ArrayPop:
     case PushWithScope:
     case CreateActivation:
     case CreateDirectArguments:
     case CreateScopedArguments:
     case CreateClonedArguments:
+    case CreateArgumentsButterfly:
     case Call:
     case CallEval:
     case CallForwardVarargs:
     case CallObjectConstructor:
     case CallVarargs:
@@ -287,10 +296,11 @@
     case HasStructureProperty:
     case InById:
     case InByVal:
     case InstanceOf:
     case InstanceOfCustom:
+    case VarargsLength:
     case LoadVarargs:
     case NumberToStringWithRadix:
     case NumberToStringWithValidRadixConstant:
     case ProfileType:
     case PutById:
@@ -322,24 +332,33 @@
     case TailCallInlinedCaller:
     case TailCallVarargs:
     case TailCallVarargsInlinedCaller:
     case Throw:
     case ToNumber:
+    case ToNumeric:
     case ToObject:
     case ToPrimitive:
+    case ToPropertyKey:
     case ToThis:
     case TryGetById:
     case CreateThis:
+    case CreatePromise:
+    case CreateGenerator:
+    case CreateAsyncGenerator:
     case ObjectCreate:
     case ObjectKeys:
     case AllocatePropertyStorage:
     case ReallocatePropertyStorage:
     case Arrayify:
     case ArrayifyToStructure:
     case NewObject:
+    case NewPromise:
+    case NewGenerator:
+    case NewAsyncGenerator:
     case NewArray:
     case NewArrayWithSpread:
+    case NewArrayIterator:
     case Spread:
     case NewArrayWithSize:
     case NewArrayBuffer:
     case NewRegexp:
     case NewStringObject:
@@ -354,10 +373,11 @@
     case GetPropertyEnumerator:
     case GetEnumeratorStructurePname:
     case GetEnumeratorGenericPname:
     case ToIndexString:
     case MaterializeNewObject:
+    case MaterializeNewInternalFieldObject:
     case MaterializeCreateActivation:
     case SetFunctionName:
     case StrCat:
     case StringReplace:
     case StringReplaceRegExp:
@@ -374,23 +394,24 @@
     case MapSet:
     case ValueBitAnd:
     case ValueBitOr:
     case ValueBitXor:
     case ValueBitLShift:
+    case ValueBitRShift:
     case ValueAdd:
     case ValueSub:
     case ValueMul:
     case ValueDiv:
     case ValueMod:
     case ValuePow:
     case ValueBitNot:
     case ValueNegate:
-#else
-    // See comment at the top for why be default for all nodes should be to
+#else // not ASSERT_ENABLED
+    // See comment at the top for why the default for all nodes should be to
     // return true.
     default:
-#endif
+#endif // not ASSERT_ENABLED
         return true;
 
     case CallStringConstructor:
     case ToString:
         switch (node->child1().useKind()) {
@@ -514,10 +535,21 @@
             ASSERT(node->child1().useKind() == StringUse || node->child1().useKind() == UntypedUse);
             return true;
         }
         RELEASE_ASSERT_NOT_REACHED();
 
+    case Inc:
+    case Dec:
+        switch (node->child1().useKind()) {
+        case Int32Use:
+        case Int52RepUse:
+        case DoubleRepUse:
+            return false;
+        default:
+            return true;
+        }
+
     case LastNodeType:
         RELEASE_ASSERT_NOT_REACHED();
     }
 
     RELEASE_ASSERT_NOT_REACHED();
