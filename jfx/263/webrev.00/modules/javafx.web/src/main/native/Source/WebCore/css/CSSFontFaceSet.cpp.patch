diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSet.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSet.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSet.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSFontFaceSet.cpp
@@ -155,14 +155,15 @@
     }
 }
 
 void CSSFontFaceSet::addToFacesLookupTable(CSSFontFace& face)
 {
-    if (!face.families())
+    if (!face.families() || !face.families().hasValue())
         return;
+    auto families = face.families().value();
 
-    for (auto& item : *face.families()) {
+    for (auto& item : *families) {
         String familyName = CSSFontFaceSet::familyNameFromPrimitive(downcast<CSSPrimitiveValue>(item.get()));
         if (familyName.isEmpty())
             continue;
 
         auto addResult = m_facesLookupTable.add(familyName, Vector<Ref<CSSFontFace>>());
@@ -235,12 +236,12 @@
     m_cache.clear();
 
     for (auto* client : m_clients)
         client->fontModified();
 
-    if (face.families())
-        removeFromFacesLookupTable(face, *face.families());
+    if (face.families() && face.families().hasValue())
+        removeFromFacesLookupTable(face, *face.families().value());
 
     if (face.cssConnection()) {
         ASSERT(m_constituentCSSConnections.get(face.cssConnection()) == &face);
         m_constituentCSSConnections.remove(face.cssConnection());
     }
@@ -298,29 +299,32 @@
 {
     ASSERT(i < faceCount());
     return m_faces[i];
 }
 
-static FontSelectionRequest computeFontSelectionRequest(MutableStyleProperties& style)
+static ExceptionOr<FontSelectionRequest> computeFontSelectionRequest(MutableStyleProperties& style)
 {
     RefPtr<CSSValue> weightValue = style.getPropertyCSSValue(CSSPropertyFontWeight).get();
-    if (!weightValue)
+    if (!weightValue || weightValue->isInitialValue())
         weightValue = CSSValuePool::singleton().createIdentifierValue(CSSValueNormal).ptr();
 
     RefPtr<CSSValue> stretchValue = style.getPropertyCSSValue(CSSPropertyFontStretch).get();
-    if (!stretchValue)
+    if (!stretchValue || stretchValue->isInitialValue())
         stretchValue = CSSValuePool::singleton().createIdentifierValue(CSSValueNormal).ptr();
 
     RefPtr<CSSValue> styleValue = style.getPropertyCSSValue(CSSPropertyFontStyle).get();
-    if (!styleValue)
+    if (!styleValue || styleValue->isInitialValue())
         styleValue = CSSFontStyleValue::create(CSSValuePool::singleton().createIdentifierValue(CSSValueNormal));
 
-    auto weightSelectionValue = StyleBuilderConverter::convertFontWeightFromValue(*weightValue);
-    auto stretchSelectionValue = StyleBuilderConverter::convertFontStretchFromValue(*stretchValue);
-    auto styleSelectionValue = StyleBuilderConverter::convertFontStyleFromValue(*styleValue);
+    if (weightValue->isGlobalKeyword() || stretchValue->isGlobalKeyword() || styleValue->isGlobalKeyword())
+        return Exception { SyntaxError };
+
+    auto weightSelectionValue = Style::BuilderConverter::convertFontWeightFromValue(*weightValue);
+    auto stretchSelectionValue = Style::BuilderConverter::convertFontStretchFromValue(*stretchValue);
+    auto styleSelectionValue = Style::BuilderConverter::convertFontStyleFromValue(*styleValue);
 
-    return { weightSelectionValue, stretchSelectionValue, styleSelectionValue };
+    return {{ weightSelectionValue, stretchSelectionValue, styleSelectionValue }};
 }
 
 static HashSet<UChar32> codePointsFromString(StringView stringView)
 {
     HashSet<UChar32> result;
@@ -342,11 +346,14 @@
     auto style = MutableStyleProperties::create();
     auto parseResult = CSSParser::parseValue(style, CSSPropertyFont, font, true, HTMLStandardMode);
     if (parseResult == CSSParser::ParseResult::Error)
         return Exception { SyntaxError };
 
-    FontSelectionRequest request = computeFontSelectionRequest(style.get());
+    auto requestOrException = computeFontSelectionRequest(style.get());
+    if (requestOrException.hasException())
+        return requestOrException.releaseException();
+    auto request = requestOrException.releaseReturnValue();
 
     auto family = style->getPropertyCSSValue(CSSPropertyFontFamily);
     if (!is<CSSValueList>(family))
         return Exception { SyntaxError };
     CSSValueList& familyList = downcast<CSSValueList>(*family);
@@ -418,36 +425,49 @@
     face = CSSSegmentedFontFace::create();
 
     Vector<std::reference_wrapper<CSSFontFace>, 32> candidateFontFaces;
     for (int i = familyFontFaces.size() - 1; i >= 0; --i) {
         CSSFontFace& candidate = familyFontFaces[i];
-        auto capabilities = candidate.fontSelectionCapabilities();
+        auto capabilitiesWrapped = candidate.fontSelectionCapabilities();
+        if (!capabilitiesWrapped.hasValue())
+            continue;
+        auto capabilities = capabilitiesWrapped.value();
         if (!isItalic(request.slope) && isItalic(capabilities.slope.minimum))
             continue;
         candidateFontFaces.append(candidate);
     }
 
     auto localIterator = m_locallyInstalledFacesLookupTable.find(family);
     if (localIterator != m_locallyInstalledFacesLookupTable.end()) {
         for (auto& candidate : localIterator->value) {
-            auto capabilities = candidate->fontSelectionCapabilities();
+            auto capabilitiesWrapped = candidate->fontSelectionCapabilities();
+            if (!capabilitiesWrapped.hasValue())
+                continue;
+            auto capabilities = capabilitiesWrapped.value();
             if (!isItalic(request.slope) && isItalic(capabilities.slope.minimum))
                 continue;
             candidateFontFaces.append(candidate);
         }
     }
 
     if (!candidateFontFaces.isEmpty()) {
         Vector<FontSelectionCapabilities> capabilities;
         capabilities.reserveInitialCapacity(candidateFontFaces.size());
-        for (auto& face : candidateFontFaces)
-            capabilities.uncheckedAppend(face.get().fontSelectionCapabilities());
+        for (auto& face : candidateFontFaces) {
+            auto fontSelectionCapabilitiesWrapped = face.get().fontSelectionCapabilities();
+            ASSERT(fontSelectionCapabilitiesWrapped.hasValue());
+            auto fontSelectionCapabilities = fontSelectionCapabilitiesWrapped.value();
+            capabilities.uncheckedAppend(fontSelectionCapabilities);
+        }
         FontSelectionAlgorithm fontSelectionAlgorithm(request, capabilities);
         std::stable_sort(candidateFontFaces.begin(), candidateFontFaces.end(), [&fontSelectionAlgorithm](const CSSFontFace& first, const CSSFontFace& second) {
-            auto firstCapabilities = first.fontSelectionCapabilities();
-            auto secondCapabilities = second.fontSelectionCapabilities();
+            auto firstCapabilitiesWrapped = first.fontSelectionCapabilities();
+            auto secondCapabilitiesWrapped = second.fontSelectionCapabilities();
+            ASSERT(firstCapabilitiesWrapped.hasValue() && secondCapabilitiesWrapped.hasValue());
 
+            auto firstCapabilities = firstCapabilitiesWrapped.value();
+            auto secondCapabilities = secondCapabilitiesWrapped.value();
             auto stretchDistanceFirst = fontSelectionAlgorithm.stretchDistance(firstCapabilities).distance;
             auto stretchDistanceSecond = fontSelectionAlgorithm.stretchDistance(secondCapabilities).distance;
             if (stretchDistanceFirst < stretchDistanceSecond)
                 return true;
             if (stretchDistanceFirst > stretchDistanceSecond)
