diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generator.py b/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generator.py
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generator.py
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_generator.py
@@ -127,22 +127,28 @@
 
         constructAbility = "CannotConstruct"
         if function.is_constructor:
             constructAbility = "CanConstruct"
 
+        constructorKind = "None"
+        if function.is_naked_constructor:
+            constructorKind = "Naked"
+
         return {
             'codeName': BuiltinsGenerator.mangledNameForFunction(function) + 'Code',
             'embeddedSource': embeddedSource,
             'embeddedSourceLength': embeddedSourceLength,
             'originalSource': text + "\n",
-            'canConstruct': constructAbility,
+            'constructAbility': constructAbility,
+            'constructorKind': constructorKind,
             'intrinsic': function.intrinsic
         }
 
     def generate_embedded_code_string_section_for_data(self, data):
         lines = []
-        lines.append("const JSC::ConstructAbility s_%(codeName)sConstructAbility = JSC::ConstructAbility::%(canConstruct)s;" % data);
+        lines.append("const JSC::ConstructAbility s_%(codeName)sConstructAbility = JSC::ConstructAbility::%(constructAbility)s;" % data);
+        lines.append("const JSC::ConstructorKind s_%(codeName)sConstructorKind = JSC::ConstructorKind::%(constructorKind)s;" % data);
         lines.append("const int s_%(codeName)sLength = %(embeddedSourceLength)d;" % data);
         lines.append("static const JSC::Intrinsic s_%(codeName)sIntrinsic = JSC::%(intrinsic)s;" % data);
         lines.append("const char* const s_%(codeName)s =\n%(embeddedSource)s\n;" % data);
         return '\n'.join(lines)
 
