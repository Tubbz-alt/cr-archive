diff a/modules/javafx.web/src/main/native/Source/WebCore/html/CustomPaintCanvas.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/CustomPaintCanvas.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/CustomPaintCanvas.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/CustomPaintCanvas.cpp
@@ -26,10 +26,11 @@
 #include "config.h"
 #include "CustomPaintCanvas.h"
 
 #if ENABLE(CSS_PAINTING_API)
 
+#include "CanvasRenderingContext.h"
 #include "ImageBitmap.h"
 #include "PaintRenderingContext2D.h"
 
 namespace WebCore {
 
@@ -37,50 +38,21 @@
 {
     return adoptRef(*new CustomPaintCanvas(context, width, height));
 }
 
 CustomPaintCanvas::CustomPaintCanvas(ScriptExecutionContext& context, unsigned width, unsigned height)
-    : ContextDestructionObserver(&context)
-    , m_size(width, height)
+    : CanvasBase(IntSize(width, height))
+    , ContextDestructionObserver(&context)
 {
 }
 
 CustomPaintCanvas::~CustomPaintCanvas()
 {
     notifyObserversCanvasDestroyed();
 
     m_context = nullptr; // Ensure this goes away before the ImageBuffer.
-}
-
-unsigned CustomPaintCanvas::width() const
-{
-    return m_size.width();
-}
-
-void CustomPaintCanvas::setWidth(unsigned newWidth)
-{
-    return m_size.setWidth(newWidth);
-}
-
-unsigned CustomPaintCanvas::height() const
-{
-    return m_size.height();
-}
-
-void CustomPaintCanvas::setHeight(unsigned newHeight)
-{
-    return m_size.setHeight(newHeight);
-}
-
-const IntSize& CustomPaintCanvas::size() const
-{
-    return m_size;
-}
-
-void CustomPaintCanvas::setSize(const IntSize& newSize)
-{
-    m_size = newSize;
+    setImageBuffer(nullptr);
 }
 
 ExceptionOr<RefPtr<PaintRenderingContext2D>> CustomPaintCanvas::getContext()
 {
     if (m_context)
@@ -119,20 +91,20 @@
 {
     ASSERT(!m_destinationGraphicsContext);
     if (!width() || !height())
         return nullptr;
 
-    m_copiedBuffer = ImageBuffer::create(size(), Unaccelerated, 1, ColorSpaceSRGB, nullptr);
+    m_copiedBuffer = ImageBuffer::create(size(), RenderingMode::Unaccelerated, 1, ColorSpace::SRGB, nullptr);
     if (!m_copiedBuffer)
         return nullptr;
 
     m_destinationGraphicsContext = &m_copiedBuffer->context();
     if (m_context)
         m_context->paintRenderingResultsToCanvas();
     m_destinationGraphicsContext = nullptr;
 
-    m_copiedImage = m_copiedBuffer->copyImage(m_copiedBuffer->fastCopyImageMode(), PreserveResolution::Yes);
+    m_copiedImage = m_copiedBuffer->copyImage(DontCopyBackingStore, PreserveResolution::Yes);
     return m_copiedImage.get();
 }
 
 GraphicsContext* CustomPaintCanvas::drawingContext() const
 {
@@ -142,13 +114,7 @@
 GraphicsContext* CustomPaintCanvas::existingDrawingContext() const
 {
     return drawingContext();
 }
 
-void CustomPaintCanvas::makeRenderingResultsAvailable()
-{
-    if (m_context)
-        m_context->paintRenderingResultsToCanvas();
-}
-
 }
 #endif
