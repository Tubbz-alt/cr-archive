diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/double-conversion.cc b/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/double-conversion.cc
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/double-conversion.cc
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/dtoa/double-conversion.cc
@@ -203,12 +203,12 @@
 
 
 bool DoubleToStringConverter::ToFixed(double value,
                                       int requested_digits,
                                       StringBuilder* result_builder) const {
-  ASSERT(kMaxFixedDigitsBeforePoint == 60);
-  const double kFirstNonFixed = 1e60;
+  ASSERT(kMaxFixedDigitsBeforePoint == 21);
+  const double kFirstNonFixed = 1e21;
 
   if (Double(value).IsSpecial()) {
     return HandleSpecialValues(value, result_builder);
   }
 
@@ -265,14 +265,16 @@
     DoubleToAscii(value, PRECISION, requested_digits + 1,
                   decimal_rep, kDecimalRepCapacity,
                   &sign, &decimal_rep_length, &decimal_point);
     ASSERT(decimal_rep_length <= requested_digits + 1);
 
-    for (int i = decimal_rep_length; i < requested_digits + 1; ++i) {
-      decimal_rep[i] = '0';
+    if (decimal_rep_length < requested_digits + 1) {
+      for (int i = decimal_rep_length; i < requested_digits + 1; ++i)
+        decimal_rep[i] = '0';
+      decimal_rep_length = requested_digits + 1;
+      decimal_rep[decimal_rep_length] = '\0';
     }
-    decimal_rep_length = requested_digits + 1;
   }
 
   bool unique_zero = ((flags_ & UNIQUE_ZERO) != 0);
   if (sign && (value != 0.0 || !unique_zero)) {
     result_builder->AddCharacter('-');
