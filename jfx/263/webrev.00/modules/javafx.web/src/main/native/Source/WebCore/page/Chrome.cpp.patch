diff a/modules/javafx.web/src/main/native/Source/WebCore/page/Chrome.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/Chrome.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/Chrome.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/Chrome.cpp
@@ -59,12 +59,12 @@
 
 #if ENABLE(DATALIST_ELEMENT)
 #include "DataListSuggestionPicker.h"
 #endif
 
-#if PLATFORM(MAC) && ENABLE(GRAPHICS_CONTEXT_3D)
-#include "GraphicsContext3DManager.h"
+#if PLATFORM(MAC) && ENABLE(GRAPHICS_CONTEXT_GL)
+#include "GraphicsContextGLOpenGLManager.h"
 #endif
 
 namespace WebCore {
 
 using namespace HTMLNames;
@@ -186,11 +186,11 @@
     Page* newPage = m_client.createWindow(frame, request, features, action);
     if (!newPage)
         return nullptr;
 
     if (auto* oldSessionStorage = m_page.sessionStorage(false))
-        newPage->setSessionStorage(oldSessionStorage->copy(newPage));
+        newPage->setSessionStorage(oldSessionStorage->copy(*newPage));
 
     return newPage;
 }
 
 void Chrome::show() const
@@ -326,20 +326,23 @@
 
 void Chrome::mouseDidMoveOverElement(const HitTestResult& result, unsigned modifierFlags)
 {
     if (result.innerNode() && result.innerNode()->document().isDNSPrefetchEnabled())
         m_page.mainFrame().loader().client().prefetchDNS(result.absoluteLinkURL().host().toString());
-    m_client.mouseDidMoveOverElement(result, modifierFlags);
+
+    String toolTip;
+    TextDirection toolTipDirection;
+    getToolTip(result, toolTip, toolTipDirection);
+    m_client.mouseDidMoveOverElement(result, modifierFlags, toolTip, toolTipDirection);
 
     InspectorInstrumentation::mouseDidMoveOverElement(m_page, result, modifierFlags);
 }
 
-void Chrome::setToolTip(const HitTestResult& result)
+void Chrome::getToolTip(const HitTestResult& result, String& toolTip, TextDirection& toolTipDirection)
 {
     // First priority is a potential toolTip representing a spelling or grammar error
-    TextDirection toolTipDirection;
-    String toolTip = result.spellingToolTip(toolTipDirection);
+    toolTip = result.spellingToolTip(toolTipDirection);
 
     // Next priority is a toolTip from a URL beneath the mouse (if preference is set to show those).
     if (toolTip.isEmpty() && m_page.settings().showsURLsInToolTips()) {
         if (Element* element = result.innerNonSharedElement()) {
             // Get tooltip representing form action, if relevant
@@ -380,18 +383,16 @@
                 toolTip = downcast<HTMLInputElement>(*element).defaultToolTip();
 
                 // FIXME: We should obtain text direction of tooltip from
                 // ChromeClient or platform. As of October 2011, all client
                 // implementations don't use text direction information for
-                // ChromeClient::setToolTip. We'll work on tooltip text
+                // ChromeClient::mouseDidMoveOverElement. We'll work on tooltip text
                 // direction during bidi cleanup in form inputs.
                 toolTipDirection = TextDirection::LTR;
             }
         }
     }
-
-    m_client.setToolTip(toolTip, toolTipDirection);
 }
 
 bool Chrome::print(Frame& frame)
 {
     // FIXME: This should have PageGroupLoadDeferrer, like runModal() or runJavaScriptAlert(), because it's no different from those.
@@ -483,24 +484,16 @@
     m_client.dispatchViewportPropertiesDidChange(arguments);
 }
 
 void Chrome::setCursor(const Cursor& cursor)
 {
-#if ENABLE(CURSOR_SUPPORT)
     m_client.setCursor(cursor);
-#else
-    UNUSED_PARAM(cursor);
-#endif
 }
 
 void Chrome::setCursorHiddenUntilMouseMoves(bool hiddenUntilMouseMoves)
 {
-#if ENABLE(CURSOR_SUPPORT)
     m_client.setCursorHiddenUntilMouseMoves(hiddenUntilMouseMoves);
-#else
-    UNUSED_PARAM(hiddenUntilMouseMoves);
-#endif
 }
 
 PlatformDisplayID Chrome::displayID() const
 {
     return m_displayID;
@@ -516,12 +509,17 @@
     for (Frame* frame = &m_page.mainFrame(); frame; frame = frame->tree().traverseNext()) {
         if (frame->document())
             frame->document()->windowScreenDidChange(displayID);
     }
 
-#if PLATFORM(MAC) && ENABLE(GRAPHICS_CONTEXT_3D)
-    GraphicsContext3DManager::sharedManager().screenDidChange(displayID, this);
+#if USE(REQUEST_ANIMATION_FRAME_DISPLAY_MONITOR)
+    m_page.renderingUpdateScheduler().windowScreenDidChange(displayID);
+#endif
+    m_page.setNeedsRecalcStyleInAllFrames();
+
+#if PLATFORM(MAC) && ENABLE(GRAPHICS_CONTEXT_GL)
+    GraphicsContextGLOpenGLManager::sharedManager().screenDidChange(displayID, this);
 #endif
 }
 
 bool Chrome::selectItemWritingDirectionIsNatural()
 {
