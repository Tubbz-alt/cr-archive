diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSSetIterator.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSSetIterator.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSSetIterator.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSSetIterator.h
@@ -37,10 +37,16 @@
 public:
     using Base = JSCell;
 
     DECLARE_EXPORT_INFO;
 
+    template<typename CellType, SubspaceAccess mode>
+    static IsoSubspace* subspaceFor(VM& vm)
+    {
+        return vm.setIteratorSpace<mode>();
+    }
+
     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
     {
         return Structure::create(vm, globalObject, prototype, TypeInfo(ObjectType, StructureFlags), info());
     }
 
@@ -49,16 +55,16 @@
         JSSetIterator* instance = new (NotNull, allocateCell<JSSetIterator>(vm.heap)) JSSetIterator(vm, structure, iteratedObject, kind);
         instance->finishCreation(vm, iteratedObject);
         return instance;
     }
 
-    ALWAYS_INLINE HashMapBucketType* advanceIter(ExecState* exec)
+    ALWAYS_INLINE HashMapBucketType* advanceIter(JSGlobalObject* globalObject)
     {
         HashMapBucketType* prev = m_iter.get();
         if (!prev)
             return nullptr;
-        VM& vm = exec->vm();
+        VM& vm = getVM(globalObject);
         HashMapBucketType* bucket = m_iter->next();
         while (bucket && bucket->deleted())
             bucket = bucket->next();
         if (!bucket) {
             setIterator(vm, nullptr);
@@ -66,20 +72,20 @@
         }
         setIterator(vm, bucket); // We keep m_iter on the last value since the first thing we do in this function is call next().
         return bucket;
     }
 
-    bool next(ExecState* exec, JSValue& value)
+    bool next(JSGlobalObject* globalObject, JSValue& value)
     {
-        HashMapBucketType* bucket = advanceIter(exec);
+        HashMapBucketType* bucket = advanceIter(globalObject);
         if (!bucket)
             return false;
 
-        if (m_kind == IterateValue || m_kind == IterateKey)
+        if (m_kind == IterationKind::Values || m_kind == IterationKind::Keys)
             value = bucket->key();
         else
-            value = createPair(exec, bucket->key(), bucket->key());
+            value = createPair(globalObject, bucket->key(), bucket->key());
         return true;
     }
 
     IterationKind kind() const { return m_kind; }
     JSValue iteratedValue() const { return m_set.get(); }
@@ -95,11 +101,11 @@
     {
         m_iter.setMayBeNull(vm, this, bucket);
     }
 
     JS_EXPORT_PRIVATE void finishCreation(VM&, JSSet*);
-    JS_EXPORT_PRIVATE JSValue createPair(CallFrame*, JSValue, JSValue);
+    JS_EXPORT_PRIVATE JSValue createPair(JSGlobalObject*, JSValue, JSValue);
     static void visitChildren(JSCell*, SlotVisitor&);
 
     WriteBarrier<JSSet> m_set;
     WriteBarrier<HashMapBucketType> m_iter;
     IterationKind m_kind;
