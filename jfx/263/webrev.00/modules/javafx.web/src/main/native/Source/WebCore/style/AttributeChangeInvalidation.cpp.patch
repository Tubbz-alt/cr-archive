diff a/modules/javafx.web/src/main/native/Source/WebCore/style/AttributeChangeInvalidation.cpp b/modules/javafx.web/src/main/native/Source/WebCore/style/AttributeChangeInvalidation.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/style/AttributeChangeInvalidation.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/style/AttributeChangeInvalidation.cpp
@@ -26,12 +26,10 @@
 #include "config.h"
 #include "AttributeChangeInvalidation.h"
 
 #include "ElementIterator.h"
 #include "StyleInvalidationFunctions.h"
-#include "StyleInvalidator.h"
-#include <wtf/SetForScope.h>
 
 namespace WebCore {
 namespace Style {
 
 static bool mayBeAffectedByAttributeChange(const RuleFeatureSet& features, bool isHTML, const QualifiedName& attributeName)
@@ -78,25 +76,20 @@
     for (auto& invalidationRuleSet : *invalidationRuleSets) {
         for (auto* selector : invalidationRuleSet.invalidationSelectors) {
             bool oldMatches = !oldValue.isNull() && SelectorChecker::attributeSelectorMatches(m_element, attributeName, oldValue, *selector);
             bool newMatches = !newValue.isNull() && SelectorChecker::attributeSelectorMatches(m_element, attributeName, newValue, *selector);
             if (oldMatches != newMatches) {
-                m_invalidationRuleSets.append(&invalidationRuleSet);
+                Invalidator::addToMatchElementRuleSets(m_matchElementRuleSets, invalidationRuleSet);
                 break;
             }
         }
     }
 }
 
 void AttributeChangeInvalidation::invalidateStyleWithRuleSets()
 {
-    SetForScope<bool> isInvalidating(DocumentRuleSets::s_isInvalidatingStyleWithRuleSets, true);
-
-    for (auto* invalidationRuleSet : m_invalidationRuleSets) {
-        Invalidator invalidator(*invalidationRuleSet->ruleSet);
-        invalidator.invalidateStyleWithMatchElement(m_element, invalidationRuleSet->matchElement);
-    }
+    Invalidator::invalidateWithMatchElementRuleSets(m_element, m_matchElementRuleSets);
 }
 
 
 }
 }
