diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirCustom.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirCustom.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirCustom.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirCustom.h
@@ -31,10 +31,11 @@
 #include "AirGenerationContext.h"
 #include "AirInst.h"
 #include "AirSpecial.h"
 #include "B3ValueInlines.h"
 #include "B3WasmBoundsCheckValue.h"
+#include "MacroAssembler.h"
 
 namespace JSC { namespace B3 { namespace Air {
 
 // This defines the behavior of custom instructions - i.e. those whose behavior cannot be
 // described using AirOpcode.opcodes. If you define an opcode as "custom Foo" in that file, then
@@ -106,11 +107,11 @@
     static bool hasNonArgNonControlEffects(Inst& inst)
     {
         return inst.args[0].special()->hasNonArgNonControlEffects(inst);
     }
 
-    static CCallHelpers::Jump generate(
+    static MacroAssembler::Jump generate(
         Inst& inst, CCallHelpers& jit, GenerationContext& context)
     {
         return inst.args[0].special()->generate(inst, jit, context);
     }
 };
@@ -179,11 +180,11 @@
     {
         return true;
     }
 
     // This just crashes, since we expect C calls to be lowered before generation.
-    static CCallHelpers::Jump generate(Inst&, CCallHelpers&, GenerationContext&);
+    static MacroAssembler::Jump generate(Inst&, CCallHelpers&, GenerationContext&);
 };
 
 struct ColdCCallCustom : CCallCustom {
     template<typename Functor>
     static void forEachArg(Inst& inst, const Functor& functor)
@@ -246,11 +247,11 @@
     static bool hasNonArgNonControlEffects(Inst&)
     {
         return false;
     }
 
-    static CCallHelpers::Jump generate(Inst&, CCallHelpers&, GenerationContext&);
+    static MacroAssembler::Jump generate(Inst&, CCallHelpers&, GenerationContext&);
 };
 
 struct EntrySwitchCustom : public CommonCustomBase<EntrySwitchCustom> {
     template<typename Func>
     static void forEachArg(Inst&, const Func&)
@@ -286,16 +287,16 @@
     static bool hasNonArgNonControlEffects(Inst&)
     {
         return false;
     }
 
-    static CCallHelpers::Jump generate(Inst&, CCallHelpers&, GenerationContext&)
+    static MacroAssembler::Jump generate(Inst&, CCallHelpers&, GenerationContext&)
     {
         // This should never be reached because we should have lowered EntrySwitch before
         // generation.
         UNREACHABLE_FOR_PLATFORM();
-        return CCallHelpers::Jump();
+        return MacroAssembler::Jump();
     }
 };
 
 struct WasmBoundsCheckCustom : public CommonCustomBase<WasmBoundsCheckCustom> {
     template<typename Func>
@@ -331,32 +332,11 @@
     static bool hasNonArgNonControlEffects(Inst&)
     {
         return true;
     }
 
-    static CCallHelpers::Jump generate(Inst& inst, CCallHelpers& jit, GenerationContext& context)
-    {
-        WasmBoundsCheckValue* value = inst.origin->as<WasmBoundsCheckValue>();
-        CCallHelpers::Jump outOfBounds = Inst(Air::Branch64, value, Arg::relCond(CCallHelpers::AboveOrEqual), inst.args[0], inst.args[1]).generate(jit, context);
-
-        context.latePaths.append(createSharedTask<GenerationContext::LatePathFunction>(
-            [outOfBounds, value] (CCallHelpers& jit, Air::GenerationContext& context) {
-                outOfBounds.link(&jit);
-                switch (value->boundsType()) {
-                case WasmBoundsCheckValue::Type::Pinned:
-                    context.code->wasmBoundsCheckGenerator()->run(jit, value->bounds().pinnedSize);
-                    break;
-
-                case WasmBoundsCheckValue::Type::Maximum:
-                    context.code->wasmBoundsCheckGenerator()->run(jit, InvalidGPRReg);
-                    break;
-                }
-            }));
-
-        // We said we were not a terminal.
-        return CCallHelpers::Jump();
-    }
+    static MacroAssembler::Jump generate(Inst&, CCallHelpers&, GenerationContext&);
 };
 
 } } } // namespace JSC::B3::Air
 
 #endif // ENABLE(B3_JIT)
