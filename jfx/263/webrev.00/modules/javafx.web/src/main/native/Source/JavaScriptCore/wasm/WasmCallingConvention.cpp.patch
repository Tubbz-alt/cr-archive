diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCallingConvention.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCallingConvention.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCallingConvention.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmCallingConvention.cpp
@@ -28,70 +28,59 @@
 
 #if ENABLE(WEBASSEMBLY)
 
 #include <wtf/NeverDestroyed.h>
 
-namespace JSC { namespace Wasm {
+namespace JSC::Wasm {
 
-const JSCCallingConvention& jscCallingConvention()
+const JSCallingConvention& jsCallingConvention()
 {
-    static LazyNeverDestroyed<JSCCallingConvention> staticJSCCallingConvention;
+    static LazyNeverDestroyed<JSCallingConvention> staticJSCallingConvention;
     static std::once_flag staticJSCCallingConventionFlag;
     std::call_once(staticJSCCallingConventionFlag, [] () {
-        staticJSCCallingConvention.construct(Vector<Reg>(), Vector<Reg>(), RegisterSet::calleeSaveRegisters());
+        RegisterSet callerSaveRegisters = RegisterSet::allRegisters();
+        callerSaveRegisters.exclude(RegisterSet::calleeSaveRegisters());
+
+        staticJSCallingConvention.construct(Vector<Reg>(), Vector<Reg>(), RegisterSet::calleeSaveRegisters(), WTFMove(callerSaveRegisters));
     });
 
-    return staticJSCCallingConvention;
+    return staticJSCallingConvention;
 }
 
 const WasmCallingConvention& wasmCallingConvention()
 {
-    static LazyNeverDestroyed<JSCCallingConvention> staticWasmCallingConvention;
+    static LazyNeverDestroyed<WasmCallingConvention> staticWasmCallingConvention;
     static std::once_flag staticWasmCallingConventionFlag;
     std::call_once(staticWasmCallingConventionFlag, [] () {
         Vector<Reg> gprArgumentRegisters(GPRInfo::numberOfArgumentRegisters);
         for (unsigned i = 0; i < GPRInfo::numberOfArgumentRegisters; ++i)
             gprArgumentRegisters[i] = GPRInfo::toArgumentRegister(i);
 
         Vector<Reg> fprArgumentRegisters(FPRInfo::numberOfArgumentRegisters);
         for (unsigned i = 0; i < FPRInfo::numberOfArgumentRegisters; ++i)
             fprArgumentRegisters[i] = FPRInfo::toArgumentRegister(i);
 
-        staticWasmCallingConvention.construct(WTFMove(gprArgumentRegisters), WTFMove(fprArgumentRegisters), RegisterSet::calleeSaveRegisters());
-    });
-
-    return staticWasmCallingConvention;
-}
+        RegisterSet scratch = RegisterSet::allGPRs();
+        scratch.exclude(RegisterSet::calleeSaveRegisters());
+        scratch.exclude(RegisterSet::macroScratchRegisters());
+        scratch.exclude(RegisterSet::reservedHardwareRegisters());
+        scratch.exclude(RegisterSet::stackRegisters());
+        for (Reg reg : gprArgumentRegisters)
+            scratch.clear(reg);
 
-const JSCCallingConventionAir& jscCallingConventionAir()
-{
-    static LazyNeverDestroyed<JSCCallingConventionAir> staticJSCCallingConvention;
-    static std::once_flag staticJSCCallingConventionFlag;
-    std::call_once(staticJSCCallingConventionFlag, [] () {
-        staticJSCCallingConvention.construct(Vector<Reg>(), Vector<Reg>(), RegisterSet::calleeSaveRegisters());
-    });
-
-    return staticJSCCallingConvention;
-}
+        Vector<GPRReg> scratchGPRs;
+        for (Reg reg : scratch)
+            scratchGPRs.append(reg.gpr());
+        RELEASE_ASSERT(scratchGPRs.size() >= 2);
 
-const WasmCallingConventionAir& wasmCallingConventionAir()
-{
-    static LazyNeverDestroyed<WasmCallingConventionAir> staticWasmCallingConvention;
-    static std::once_flag staticWasmCallingConventionFlag;
-    std::call_once(staticWasmCallingConventionFlag, [] () {
-        Vector<Reg> gprArgumentRegisters(GPRInfo::numberOfArgumentRegisters);
-        for (unsigned i = 0; i < GPRInfo::numberOfArgumentRegisters; ++i)
-            gprArgumentRegisters[i] = GPRInfo::toArgumentRegister(i);
-
-        Vector<Reg> fprArgumentRegisters(FPRInfo::numberOfArgumentRegisters);
-        for (unsigned i = 0; i < FPRInfo::numberOfArgumentRegisters; ++i)
-            fprArgumentRegisters[i] = FPRInfo::toArgumentRegister(i);
+        RegisterSet callerSaveRegisters = RegisterSet::allRegisters();
+        callerSaveRegisters.exclude(RegisterSet::calleeSaveRegisters());
 
-        staticWasmCallingConvention.construct(WTFMove(gprArgumentRegisters), WTFMove(fprArgumentRegisters), RegisterSet::calleeSaveRegisters());
+        staticWasmCallingConvention.construct(WTFMove(gprArgumentRegisters), WTFMove(fprArgumentRegisters), WTFMove(scratchGPRs), RegisterSet::calleeSaveRegisters(), WTFMove(callerSaveRegisters));
     });
 
     return staticWasmCallingConvention;
 }
 
-} } // namespace JSC::Wasm
+} // namespace JSC::Wasm
 
 #endif // ENABLE(B3_JIT)
