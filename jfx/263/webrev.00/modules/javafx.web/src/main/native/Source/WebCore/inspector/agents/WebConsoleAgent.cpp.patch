diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/WebConsoleAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/WebConsoleAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/WebConsoleAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/WebConsoleAgent.cpp
@@ -27,11 +27,10 @@
 #include "config.h"
 #include "WebConsoleAgent.h"
 
 #include "CommandLineAPIHost.h"
 #include "DOMWindow.h"
-#include "InspectorWebAgentBase.h"
 #include "Logging.h"
 #include "ResourceError.h"
 #include "ResourceResponse.h"
 #include "ScriptState.h"
 #include "WebInjectedScriptManager.h"
@@ -51,41 +50,32 @@
 
 WebConsoleAgent::~WebConsoleAgent() = default;
 
 void WebConsoleAgent::frameWindowDiscarded(DOMWindow* window)
 {
-    if (!m_injectedScriptManager.inspectorEnvironment().developerExtrasEnabled())
-        return;
-
     for (auto& message : m_consoleMessages) {
-        JSC::ExecState* exec = message->scriptState();
-        if (!exec)
+        JSC::JSGlobalObject* lexicalGlobalObject = message->globalObject();
+        if (!lexicalGlobalObject)
             continue;
-        if (domWindowFromExecState(exec) != window)
+        if (domWindowFromExecState(lexicalGlobalObject) != window)
             continue;
         message->clear();
     }
 
     static_cast<WebInjectedScriptManager&>(m_injectedScriptManager).discardInjectedScriptsFor(window);
 }
 
 void WebConsoleAgent::didReceiveResponse(unsigned long requestIdentifier, const ResourceResponse& response)
 {
-    if (!m_injectedScriptManager.inspectorEnvironment().developerExtrasEnabled())
-        return;
-
     if (response.httpStatusCode() >= 400) {
         String message = makeString("Failed to load resource: the server responded with a status of ", response.httpStatusCode(), " (", response.httpStatusText(), ')');
         addMessageToConsole(makeUnique<ConsoleMessage>(MessageSource::Network, MessageType::Log, MessageLevel::Error, message, response.url().string(), 0, 0, nullptr, requestIdentifier));
     }
 }
 
 void WebConsoleAgent::didFailLoading(unsigned long requestIdentifier, const ResourceError& error)
 {
-    if (!m_injectedScriptManager.inspectorEnvironment().developerExtrasEnabled())
-        return;
-
     // Report failures only.
     if (error.isCancellation())
         return;
 
     StringBuilder message;
