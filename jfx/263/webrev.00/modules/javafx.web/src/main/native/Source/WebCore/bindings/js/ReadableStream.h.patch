diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ReadableStream.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ReadableStream.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ReadableStream.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ReadableStream.h
@@ -37,13 +37,13 @@
 
 class ReadableStream final : public DOMGuarded<JSReadableStream> {
 public:
     static Ref<ReadableStream> create(JSDOMGlobalObject& globalObject, JSReadableStream& readableStream) { return adoptRef(*new ReadableStream(globalObject, readableStream)); }
 
-    static Ref<ReadableStream> create(JSC::ExecState&, RefPtr<ReadableStreamSource>&&);
+    static Ref<ReadableStream> create(JSC::JSGlobalObject&, RefPtr<ReadableStreamSource>&&);
 
-    WEBCORE_EXPORT static bool isDisturbed(JSC::ExecState&, JSC::JSValue);
+    WEBCORE_EXPORT static bool isDisturbed(JSC::JSGlobalObject&, JSC::JSValue);
 
     std::pair<Ref<ReadableStream>, Ref<ReadableStream>> tee();
 
     void lock();
     void pipeTo(ReadableStreamSink&);
@@ -55,14 +55,14 @@
 protected:
     ReadableStream(JSDOMGlobalObject& globalObject, JSReadableStream& readableStream) : DOMGuarded<JSReadableStream>(globalObject, readableStream) { }
 };
 
 struct JSReadableStreamWrapperConverter {
-    static RefPtr<ReadableStream> toWrapped(JSC::ExecState& state, JSC::JSValue value)
+    static RefPtr<ReadableStream> toWrapped(JSC::JSGlobalObject& lexicalGlobalObject, JSC::JSValue value)
     {
-        JSC::VM& vm = state.vm();
-        auto* globalObject = JSC::jsDynamicCast<JSDOMGlobalObject*>(vm, state.lexicalGlobalObject());
+        JSC::VM& vm = JSC::getVM(&lexicalGlobalObject);
+        auto* globalObject = JSC::jsDynamicCast<JSDOMGlobalObject*>(vm, &lexicalGlobalObject);
         if (!globalObject)
             return nullptr;
 
         auto* readableStream = JSC::jsDynamicCast<JSReadableStream*>(vm, value);
         if (!readableStream)
@@ -76,11 +76,11 @@
     using WrapperClass = JSReadableStreamWrapperConverter;
     using ToWrappedReturnType = RefPtr<ReadableStream>;
     static constexpr bool needsState = true;
 };
 
-inline JSC::JSValue toJS(JSC::ExecState*, JSC::JSGlobalObject*, ReadableStream* stream)
+inline JSC::JSValue toJS(JSC::JSGlobalObject*, JSC::JSGlobalObject*, ReadableStream* stream)
 {
     return stream ? stream->readableStream() : JSC::jsUndefined();
 }
 
 }
