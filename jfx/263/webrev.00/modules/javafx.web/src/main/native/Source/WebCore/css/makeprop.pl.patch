diff a/modules/javafx.web/src/main/native/Source/WebCore/css/makeprop.pl b/modules/javafx.web/src/main/native/Source/WebCore/css/makeprop.pl
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/makeprop.pl
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/makeprop.pl
@@ -64,11 +64,11 @@
 my $numPredefinedProperties = 2;
 my %nameIsInherited;
 my %nameIsHighPriority;
 my %propertiesWithStyleBuilderOptions;
 my %styleBuilderOptions = (
-    "animatable" => 1, # Defined in Source/WebCore/css/StyleBuilderConverter.h
+    "animatable" => 1, # Defined in Source/WebCore/style/StyleBuilderConverter.h
     "auto-functions" => 1,
     "conditional-converter" => 1,
     "converter" => 1,
     "custom" => 1,
     "fill-layer-property" => 1,
@@ -478,11 +478,52 @@
 print HEADER "};\n\n";
 print HEADER "const int firstCSSProperty = $first;\n";
 print HEADER "const int numCSSProperties = $num;\n";
 print HEADER "const int lastCSSProperty = $last;\n";
 print HEADER "const size_t maxCSSPropertyNameLength = $maxLen;\n";
-print HEADER "const CSSPropertyID lastHighPriorityProperty = CSSProperty" . $nameToId{$lastHighPriorityPropertyName} . ";\n";
+print HEADER "const CSSPropertyID lastHighPriorityProperty = CSSProperty" . $nameToId{$lastHighPriorityPropertyName} . ";\n\n";
+
+print HEADER "static const CSSPropertyID computedPropertyIDs[] = {\n";
+my $numComputedPropertyIDs = 0;
+sub sortWithPrefixedPropertiesLast
+{
+    my $aStartsWithPrefix = substr($a, 0, 1) eq "-";
+    my $bStartsWithPrefix = substr($b, 0, 1) eq "-";
+    if ($aStartsWithPrefix && !$bStartsWithPrefix) {
+        return 1;
+    }
+    if (!$aStartsWithPrefix && $bStartsWithPrefix) {
+        return -1;
+    }
+    return $a cmp $b;
+}
+foreach my $name (sort sortWithPrefixedPropertiesLast @names) {
+  next if (exists($propertiesWithStyleBuilderOptions{$name}{"skip-builder"}));
+  next if (grep { $_ eq $name } @internalProprerties);
+
+  # Skip properties if they have a non-internal longhand property.
+  if (exists($propertiesWithStyleBuilderOptions{$name}{"longhands"})) {
+    my @longhands = @{$propertiesWithStyleBuilderOptions{$name}{"longhands"}};
+    if (scalar @longhands != 1) {
+      my $hasNonInternalLonghand = 0;
+      foreach my $longhand (@longhands) {
+        if (!exists($propertiesWithStyleBuilderOptions{$longhand}{"skip-builder"}) && !grep { $_ eq $longhand } @internalProprerties) {
+          $hasNonInternalLonghand = 1;
+          last;
+        }
+      }
+      if ($hasNonInternalLonghand) {
+        next;
+      }
+    }
+  }
+
+  print HEADER "    CSSProperty" . $nameToId{$name} . ",\n";
+  $numComputedPropertyIDs += 1;
+}
+print HEADER "};\n";
+print HEADER "const size_t numComputedPropertyIDs = $numComputedPropertyIDs;\n";
 
 print HEADER << "EOF";
 
 bool isInternalCSSProperty(const CSSPropertyID);
 bool isEnabledCSSProperty(const CSSPropertyID);
@@ -511,18 +552,18 @@
 EOF
 
 close HEADER;
 
 #
-# StyleBuilder.cpp generator.
+# StyleBuilderGenerated.cpp generator.
 #
 
 sub getScopeForFunction {
   my $name = shift;
   my $builderFunction = shift;
 
-  return $propertiesWithStyleBuilderOptions{$name}{"custom"}{$builderFunction} ? "StyleBuilderCustom" : "StyleBuilderFunctions";
+  return $propertiesWithStyleBuilderOptions{$name}{"custom"}{$builderFunction} ? "BuilderCustom" : "BuilderFunctions";
 }
 
 sub getNameForMethods {
   my $name = shift;
 
@@ -536,25 +577,25 @@
 
 sub getAutoGetter {
   my $name = shift;
   my $renderStyle = shift;
 
-  return $renderStyle . "->hasAuto" . getNameForMethods($name) . "()";
+  return $renderStyle . ".hasAuto" . getNameForMethods($name) . "()";
 }
 
 sub getAutoSetter {
   my $name = shift;
   my $renderStyle = shift;
 
-  return $renderStyle . "->setHasAuto" . getNameForMethods($name) . "()";
+  return $renderStyle . ".setHasAuto" . getNameForMethods($name) . "()";
 }
 
 sub getVisitedLinkSetter {
   my $name = shift;
   my $renderStyle = shift;
 
-  return $renderStyle . "->setVisitedLink" . getNameForMethods($name);
+  return $renderStyle . ".setVisitedLink" . getNameForMethods($name);
 }
 
 sub getClearFunction {
   my $name = shift;
 
@@ -656,11 +697,11 @@
 
 sub colorFromPrimitiveValue {
   my $primitiveValue = shift;
   my $forVisitedLink = @_ ? shift : NOT_FOR_VISITED_LINK;
 
-  return "styleResolver.colorFromPrimitiveValue(" . $primitiveValue . ", /* forVisitedLink */ " . ($forVisitedLink ? "true" : "false") . ")";
+  return "builderState.colorFromPrimitiveValue(" . $primitiveValue . ", /* forVisitedLink */ " . ($forVisitedLink ? "true" : "false") . ")";
 }
 
 use constant {
   VALUE_IS_COLOR => 0,
   VALUE_IS_PRIMITIVE => 1,
@@ -670,16 +711,16 @@
   my $name = shift;
   my $value = shift;
   my $indent = shift;
   my $valueIsPrimitive = @_ ? shift : VALUE_IS_COLOR;
 
-  my $style = "styleResolver.style()";
-  my $setterContent .= $indent . "if (styleResolver.applyPropertyToRegularStyle())\n";
-  my $setValue = $style . "->" . $propertiesWithStyleBuilderOptions{$name}{"setter"};
+  my $style = "builderState.style()";
+  my $setterContent .= $indent . "if (builderState.applyPropertyToRegularStyle())\n";
+  my $setValue = $style . "." . $propertiesWithStyleBuilderOptions{$name}{"setter"};
   my $color = $valueIsPrimitive ? colorFromPrimitiveValue($value) : $value;
   $setterContent .= $indent . "    " . $setValue . "(" . $color . ");\n";
-  $setterContent .= $indent . "if (styleResolver.applyPropertyToVisitedLinkStyle())\n";
+  $setterContent .= $indent . "if (builderState.applyPropertyToVisitedLinkStyle())\n";
   $color = $valueIsPrimitive ? colorFromPrimitiveValue($value, FOR_VISITED_LINK) : $value;
   $setterContent .= $indent . "    " . getVisitedLinkSetter($name, $style) . "(" . $color . ");\n";
 
   return $setterContent;
 }
@@ -688,22 +729,22 @@
   my $name = shift;
   my $primitiveValue = shift;
   my $indent = shift;
 
   my $code = $indent . "if (" . $primitiveValue . ".valueID() == CSSValueCurrentcolor) {\n";
-  $code .= $indent . "    applyInherit" . $nameToId{$name} . "(styleResolver);\n";
+  $code .= $indent . "    applyInherit" . $nameToId{$name} . "(builderState);\n";
   $code .= $indent . "    return;\n";
   $code .= $indent . "}\n";
   return $code;
 }
 
 sub generateAnimationPropertyInitialValueSetter {
   my $name = shift;
   my $indent = shift;
 
   my $setterContent = "";
-  $setterContent .= $indent . "AnimationList& list = styleResolver.style()->" . getEnsureAnimationsOrTransitionsMethod($name) . "();\n";
+  $setterContent .= $indent . "AnimationList& list = builderState.style()." . getEnsureAnimationsOrTransitionsMethod($name) . "();\n";
   $setterContent .= $indent . "if (list.isEmpty())\n";
   $setterContent .= $indent . "    list.append(Animation::create());\n";
   my $setter = $propertiesWithStyleBuilderOptions{$name}{"setter"};
   my $initial = $propertiesWithStyleBuilderOptions{$name}{"initial"};
   $setterContent .= $indent . "list.animation(0)." . $setter . "(Animation::" . $initial . "());\n";
@@ -719,12 +760,12 @@
 sub generateAnimationPropertyInheritValueSetter {
   my $name = shift;
   my $indent = shift;
 
   my $setterContent = "";
-  $setterContent .= $indent . "auto& list = styleResolver.style()->" . getEnsureAnimationsOrTransitionsMethod($name) . "();\n";
-  $setterContent .= $indent . "auto* parentList = styleResolver.parentStyle()->" . getAnimationsOrTransitionsMethod($name) . "();\n";
+  $setterContent .= $indent . "auto& list = builderState.style()." . getEnsureAnimationsOrTransitionsMethod($name) . "();\n";
+  $setterContent .= $indent . "auto* parentList = builderState.parentStyle()." . getAnimationsOrTransitionsMethod($name) . "();\n";
   $setterContent .= $indent . "size_t i = 0, parentSize = parentList ? parentList->size() : 0;\n";
   $setterContent .= $indent . "for ( ; i < parentSize && parentList->animation(i)." . getTestFunction($name) . "(); ++i) {\n";
   $setterContent .= $indent . "    if (list.size() <= i)\n";
   $setterContent .= $indent . "        list.append(Animation::create());\n";
   my $getter = $propertiesWithStyleBuilderOptions{$name}{"getter"};
@@ -743,24 +784,24 @@
 sub generateAnimationPropertyValueSetter {
   my $name = shift;
   my $indent = shift;
 
   my $setterContent = "";
-  $setterContent .= $indent . "AnimationList& list = styleResolver.style()->" . getEnsureAnimationsOrTransitionsMethod($name) . "();\n";
+  $setterContent .= $indent . "AnimationList& list = builderState.style()." . getEnsureAnimationsOrTransitionsMethod($name) . "();\n";
   $setterContent .= $indent . "size_t childIndex = 0;\n";
   $setterContent .= $indent . "if (is<CSSValueList>(value)) {\n";
   $setterContent .= $indent . "    /* Walk each value and put it into an animation, creating new animations as needed. */\n";
   $setterContent .= $indent . "    for (auto& currentValue : downcast<CSSValueList>(value)) {\n";
   $setterContent .= $indent . "        if (childIndex <= list.size())\n";
   $setterContent .= $indent . "            list.append(Animation::create());\n";
-  $setterContent .= $indent . "        styleResolver.styleMap()->" . getAnimationMapfunction($name) . "(list.animation(childIndex), currentValue);\n";
+  $setterContent .= $indent . "        builderState.styleMap()." . getAnimationMapfunction($name) . "(list.animation(childIndex), currentValue);\n";
   $setterContent .= $indent . "        ++childIndex;\n";
   $setterContent .= $indent . "    }\n";
   $setterContent .= $indent . "} else {\n";
   $setterContent .= $indent . "    if (list.isEmpty())\n";
   $setterContent .= $indent . "        list.append(Animation::create());\n";
-  $setterContent .= $indent . "    styleResolver.styleMap()->" . getAnimationMapfunction($name) . "(list.animation(childIndex), value);\n";
+  $setterContent .= $indent . "    builderState.styleMap()." . getAnimationMapfunction($name) . "(list.animation(childIndex), value);\n";
   $setterContent .= $indent . "    childIndex = 1;\n";
   $setterContent .= $indent . "}\n";
   $setterContent .= $indent . "for ( ; childIndex < list.size(); ++childIndex) {\n";
   $setterContent .= $indent . "    /* Reset all remaining animations to not have the property set. */\n";
   $setterContent .= $indent . "    list.animation(childIndex)." . getClearFunction($name) . "();\n";
@@ -779,15 +820,15 @@
   my $testFunction = getTestFunction($name);
   my $initial = "FillLayer::" . $propertiesWithStyleBuilderOptions{$name}{"initial"} . "(" . getFillLayerType($name) . ")";
 
   my $setterContent = "";
   $setterContent .= $indent . "// Check for (single-layer) no-op before clearing anything.\n";
-  $setterContent .= $indent . "auto& layers = styleResolver.style()->" . getLayersFunction($name) . "();\n";
+  $setterContent .= $indent . "auto& layers = builderState.style()." . getLayersFunction($name) . "();\n";
   $setterContent .= $indent . "if (!layers.next() && (!layers." . $testFunction . "() || layers." . $getter . "() == $initial))\n";
   $setterContent .= $indent . "    return;\n";
   $setterContent .= "\n";
-  $setterContent .= $indent . "auto* child = &styleResolver.style()->" . getLayersAccessorFunction($name) . "();\n";
+  $setterContent .= $indent . "auto* child = &builderState.style()." . getLayersAccessorFunction($name) . "();\n";
   $setterContent .= $indent . "child->" . $setter . "(" . $initial . ");\n";
   $setterContent .= $indent . "for (child = child->next(); child; child = child->next())\n";
   $setterContent .= $indent . "    child->" . $clearFunction . "();\n";
 
   return $setterContent;
@@ -802,16 +843,16 @@
   my $clearFunction = getClearFunction($name);
   my $testFunction = getTestFunction($name);
 
   my $setterContent = "";
   $setterContent .= $indent . "// Check for no-op before copying anything.\n";
-  $setterContent .= $indent . "if (styleResolver.parentStyle()->" . getLayersFunction($name) ."() == styleResolver.style()->" . getLayersFunction($name) . "())\n";
+  $setterContent .= $indent . "if (builderState.parentStyle()." . getLayersFunction($name) ."() == builderState.style()." . getLayersFunction($name) . "())\n";
   $setterContent .= $indent . "    return;\n";
   $setterContent .= "\n";
-  $setterContent .= $indent . "auto* child = &styleResolver.style()->" . getLayersAccessorFunction($name) . "();\n";
+  $setterContent .= $indent . "auto* child = &builderState.style()." . getLayersAccessorFunction($name) . "();\n";
   $setterContent .= $indent . "FillLayer* previousChild = nullptr;\n";
-  $setterContent .= $indent . "for (auto* parent = &styleResolver.parentStyle()->" . getLayersFunction($name) . "(); parent && parent->" . $testFunction . "(); parent = parent->next()) {\n";
+  $setterContent .= $indent . "for (auto* parent = &builderState.parentStyle()." . getLayersFunction($name) . "(); parent && parent->" . $testFunction . "(); parent = parent->next()) {\n";
   $setterContent .= $indent . "    if (!child) {\n";
   $setterContent .= $indent . "        previousChild->setNext(makeUnique<FillLayer>(" . getFillLayerType($name) . "));\n";
   $setterContent .= $indent . "        child = previousChild->next();\n";
   $setterContent .= $indent . "    }\n";
   $setterContent .= $indent . "    child->" . $setter . "(parent->" . $getter . "());\n";
@@ -829,25 +870,25 @@
   my $indent = shift;
 
   my $CSSPropertyId = "CSSProperty" . $nameToId{$name};
 
   my $setterContent = "";
-  $setterContent .= $indent . "auto* child = &styleResolver.style()->" . getLayersAccessorFunction($name) . "();\n";
+  $setterContent .= $indent . "auto* child = &builderState.style()." . getLayersAccessorFunction($name) . "();\n";
   $setterContent .= $indent . "FillLayer* previousChild = nullptr;\n";
   $setterContent .= $indent . "if (is<CSSValueList>(value) && !is<CSSImageSetValue>(value)) {\n";
   $setterContent .= $indent . "    // Walk each value and put it into a layer, creating new layers as needed.\n";
   $setterContent .= $indent . "    for (auto& item : downcast<CSSValueList>(value)) {\n";
   $setterContent .= $indent . "        if (!child) {\n";
   $setterContent .= $indent . "            previousChild->setNext(makeUnique<FillLayer>(" . getFillLayerType($name) . "));\n";
   $setterContent .= $indent . "            child = previousChild->next();\n";
   $setterContent .= $indent . "        }\n";
-  $setterContent .= $indent . "        styleResolver.styleMap()->" . getFillLayerMapfunction($name) . "(" . $CSSPropertyId . ", *child, item);\n";
+  $setterContent .= $indent . "        builderState.styleMap()." . getFillLayerMapfunction($name) . "(" . $CSSPropertyId . ", *child, item);\n";
   $setterContent .= $indent . "        previousChild = child;\n";
   $setterContent .= $indent . "        child = child->next();\n";
   $setterContent .= $indent . "    }\n";
   $setterContent .= $indent . "} else {\n";
-  $setterContent .= $indent . "    styleResolver.styleMap()->" . getFillLayerMapfunction($name) . "(" . $CSSPropertyId . ", *child, value);\n";
+  $setterContent .= $indent . "    builderState.styleMap()." . getFillLayerMapfunction($name) . "(" . $CSSPropertyId . ", *child, value);\n";
   $setterContent .= $indent . "    child = child->next();\n";
   $setterContent .= $indent . "}\n";
   $setterContent .= $indent . "for (; child; child = child->next())\n";
   $setterContent .= $indent . "    child->" . getClearFunction($name) . "();\n";
 
@@ -859,35 +900,35 @@
   my $name = shift;
   my $value = shift;
 
   my $isSVG = exists $propertiesWithStyleBuilderOptions{$name}{"svg"};
   my $setter = $propertiesWithStyleBuilderOptions{$name}{"setter"};
-  return "styleResolver.style()->" .  ($isSVG ? "accessSVGStyle()." : "") . $setter . "(" . $value . ")";
+  return "builderState.style()." .  ($isSVG ? "accessSVGStyle()." : "") . $setter . "(" . $value . ")";
 }
 
 sub generateInitialValueSetter {
   my $name = shift;
   my $indent = shift;
 
   my $setter = $propertiesWithStyleBuilderOptions{$name}{"setter"};
   my $initial = $propertiesWithStyleBuilderOptions{$name}{"initial"};
   my $isSVG = exists $propertiesWithStyleBuilderOptions{$name}{"svg"};
   my $setterContent = "";
-  $setterContent .= $indent . "static void applyInitial" . $nameToId{$name} . "(StyleResolver& styleResolver)\n";
+  $setterContent .= $indent . "static void applyInitial" . $nameToId{$name} . "(BuilderState& builderState)\n";
   $setterContent .= $indent . "{\n";
-  my $style = "styleResolver.style()";
+  my $style = "builderState.style()";
   if (exists $propertiesWithStyleBuilderOptions{$name}{"auto-functions"}) {
     $setterContent .= $indent . "    " . getAutoSetter($name, $style) . ";\n";
   } elsif (exists $propertiesWithStyleBuilderOptions{$name}{"visited-link-color-support"}) {
       my $initialColor = "RenderStyle::" . $initial . "()";
       $setterContent .= generateColorValueSetter($name, $initialColor, $indent . "    ");
   } elsif (exists $propertiesWithStyleBuilderOptions{$name}{"animatable"}) {
     $setterContent .= generateAnimationPropertyInitialValueSetter($name, $indent . "    ");
   } elsif (exists $propertiesWithStyleBuilderOptions{$name}{"font-property"}) {
-    $setterContent .= $indent . "    auto fontDescription = styleResolver.fontDescription();\n";
+    $setterContent .= $indent . "    auto fontDescription = builderState.fontDescription();\n";
     $setterContent .= $indent . "    fontDescription." . $setter . "(FontCascadeDescription::" . $initial . "());\n";
-    $setterContent .= $indent . "    styleResolver.setFontDescription(WTFMove(fontDescription));\n";
+    $setterContent .= $indent . "    builderState.setFontDescription(WTFMove(fontDescription));\n";
   } elsif (exists $propertiesWithStyleBuilderOptions{$name}{"fill-layer-property"}) {
     $setterContent .= generateFillLayerPropertyInitialValueSetter($name, $indent . "    ");
   } else {
     my $initialValue = ($isSVG ? "SVGRenderStyle" : "RenderStyle") . "::" . $initial . "()";
     $setterContent .= $indent . "    " . generateSetValueStatement($name, $initialValue) . ";\n";
@@ -900,45 +941,45 @@
 sub generateInheritValueSetter {
   my $name = shift;
   my $indent = shift;
 
   my $setterContent = "";
-  $setterContent .= $indent . "static void applyInherit" . $nameToId{$name} . "(StyleResolver& styleResolver)\n";
+  $setterContent .= $indent . "static void applyInherit" . $nameToId{$name} . "(BuilderState& builderState)\n";
   $setterContent .= $indent . "{\n";
   my $isSVG = exists $propertiesWithStyleBuilderOptions{$name}{"svg"};
-  my $parentStyle = "styleResolver.parentStyle()";
-  my $style = "styleResolver.style()";
+  my $parentStyle = "builderState.parentStyle()";
+  my $style = "builderState.style()";
   my $getter = $propertiesWithStyleBuilderOptions{$name}{"getter"};
   my $setter = $propertiesWithStyleBuilderOptions{$name}{"setter"};
   my $didCallSetValue = 0;
   if (exists $propertiesWithStyleBuilderOptions{$name}{"auto-functions"}) {
     $setterContent .= $indent . "    if (" . getAutoGetter($name, $parentStyle) . ") {\n";
     $setterContent .= $indent . "        " . getAutoSetter($name, $style) . ";\n";
     $setterContent .= $indent . "        return;\n";
     $setterContent .= $indent . "    }\n";
   } elsif (exists $propertiesWithStyleBuilderOptions{$name}{"visited-link-color-support"}) {
-    $setterContent .= $indent . "    Color color = " . $parentStyle . "->" . $getter . "();\n";
+    $setterContent .= $indent . "    Color color = " . $parentStyle . "." . $getter . "();\n";
     if (!exists($propertiesWithStyleBuilderOptions{$name}{"no-default-color"})) {
       $setterContent .= $indent . "    if (!color.isValid())\n";
-      $setterContent .= $indent . "        color = " . $parentStyle . "->color();\n";
+      $setterContent .= $indent . "        color = " . $parentStyle . ".color();\n";
     }
     $setterContent .= generateColorValueSetter($name, "color", $indent . "    ");
     $didCallSetValue = 1;
   } elsif (exists $propertiesWithStyleBuilderOptions{$name}{"animatable"}) {
     $setterContent .= generateAnimationPropertyInheritValueSetter($name, $indent . "    ");
     $didCallSetValue = 1;
   } elsif (exists $propertiesWithStyleBuilderOptions{$name}{"font-property"}) {
-    $setterContent .= $indent . "    auto fontDescription = styleResolver.fontDescription();\n";
-    $setterContent .= $indent . "    fontDescription." . $setter . "(styleResolver.parentFontDescription()." . $getter . "());\n";
-    $setterContent .= $indent . "    styleResolver.setFontDescription(WTFMove(fontDescription));\n";
+    $setterContent .= $indent . "    auto fontDescription = builderState.fontDescription();\n";
+    $setterContent .= $indent . "    fontDescription." . $setter . "(builderState.parentFontDescription()." . $getter . "());\n";
+    $setterContent .= $indent . "    builderState.setFontDescription(WTFMove(fontDescription));\n";
     $didCallSetValue = 1;
   } elsif (exists $propertiesWithStyleBuilderOptions{$name}{"fill-layer-property"}) {
     $setterContent .= generateFillLayerPropertyInheritValueSetter($name, $indent . "    ");
     $didCallSetValue = 1;
   }
   if (!$didCallSetValue) {
-    my $inheritedValue = $parentStyle . "->" . ($isSVG ? "svgStyle()." : "") .  $getter . "()";
+    my $inheritedValue = $parentStyle . "." . ($isSVG ? "svgStyle()." : "") .  $getter . "()";
     $setterContent .= $indent . "    " . generateSetValueStatement($name, "forwardInheritedValue(" . $inheritedValue . ")") . ";\n";
   }
   $setterContent .= $indent . "}\n";
 
   return $setterContent;
@@ -947,24 +988,24 @@
 sub generateValueSetter {
   my $name = shift;
   my $indent = shift;
 
   my $setterContent = "";
-  $setterContent .= $indent . "static void applyValue" . $nameToId{$name} . "(StyleResolver& styleResolver, CSSValue& value)\n";
+  $setterContent .= $indent . "static void applyValue" . $nameToId{$name} . "(BuilderState& builderState, CSSValue& value)\n";
   $setterContent .= $indent . "{\n";
   my $convertedValue;
   if (exists($propertiesWithStyleBuilderOptions{$name}{"converter"})) {
-    $convertedValue = "StyleBuilderConverter::convert" . $propertiesWithStyleBuilderOptions{$name}{"converter"} . "(styleResolver, value)";
+    $convertedValue = "BuilderConverter::convert" . $propertiesWithStyleBuilderOptions{$name}{"converter"} . "(builderState, value)";
   } elsif (exists($propertiesWithStyleBuilderOptions{$name}{"conditional-converter"})) {
-    $setterContent .= $indent . "    auto convertedValue = StyleBuilderConverter::convert" . $propertiesWithStyleBuilderOptions{$name}{"conditional-converter"} . "(styleResolver, value);\n";
+    $setterContent .= $indent . "    auto convertedValue = BuilderConverter::convert" . $propertiesWithStyleBuilderOptions{$name}{"conditional-converter"} . "(builderState, value);\n";
     $convertedValue = "WTFMove(convertedValue.value())";
   } else {
     $convertedValue = "downcast<CSSPrimitiveValue>(value)";
   }
 
   my $setter = $propertiesWithStyleBuilderOptions{$name}{"setter"};
-  my $style = "styleResolver.style()";
+  my $style = "builderState.style()";
   my $didCallSetValue = 0;
   if (exists $propertiesWithStyleBuilderOptions{$name}{"auto-functions"}) {
     $setterContent .= $indent . "    if (downcast<CSSPrimitiveValue>(value).valueID() == CSSValueAuto) {\n";
     $setterContent .= $indent . "        ". getAutoSetter($name, $style) . ";\n";
     $setterContent .= $indent . "        return;\n";
@@ -979,13 +1020,13 @@
     $didCallSetValue = 1;
   } elsif (exists $propertiesWithStyleBuilderOptions{$name}{"animatable"}) {
     $setterContent .= generateAnimationPropertyValueSetter($name, $indent . "    ");
     $didCallSetValue = 1;
   } elsif (exists $propertiesWithStyleBuilderOptions{$name}{"font-property"}) {
-    $setterContent .= $indent . "    auto fontDescription = styleResolver.fontDescription();\n";
+    $setterContent .= $indent . "    auto fontDescription = builderState.fontDescription();\n";
     $setterContent .= $indent . "    fontDescription." . $setter . "(" . $convertedValue . ");\n";
-    $setterContent .= $indent . "    styleResolver.setFontDescription(WTFMove(fontDescription));\n";
+    $setterContent .= $indent . "    builderState.setFontDescription(WTFMove(fontDescription));\n";
     $didCallSetValue = 1;
   } elsif (exists $propertiesWithStyleBuilderOptions{$name}{"fill-layer-property"}) {
     $setterContent .= generateFillLayerPropertyValueSetter($name, $indent . "    ");
     $didCallSetValue = 1;
   }
@@ -999,28 +1040,29 @@
   $setterContent .= $indent . "}\n";
 
   return $setterContent;
 }
 
-open STYLEBUILDER, ">StyleBuilder.cpp" || die "Could not open StyleBuilder.cpp for writing";
+open STYLEBUILDER, ">StyleBuilderGenerated.cpp" || die "Could not open StyleBuilderGenerated.cpp for writing";
 print STYLEBUILDER << "EOF";
 /* This file is automatically generated from $inputFile by makeprop, do not edit */
 
 #include "config.h"
-#include "StyleBuilder.h"
+#include "StyleBuilderGenerated.h"
 
 #include "CSSPrimitiveValueMappings.h"
 #include "CSSProperty.h"
 #include "RenderStyle.h"
+#include "StyleBuilderState.h"
 #include "StyleBuilderConverter.h"
 #include "StyleBuilderCustom.h"
 #include "StylePropertyShorthand.h"
-#include "StyleResolver.h"
 
 namespace WebCore {
+namespace Style {
 
-class StyleBuilderFunctions {
+class BuilderFunctions {
 public:
 EOF
 
 foreach my $name (@names) {
   # Skip Shorthand properties and properties that do not use the StyleBuilder.
@@ -1040,23 +1082,23 @@
 }
 
 print STYLEBUILDER << "EOF";
 };
 
-void StyleBuilder::applyProperty(CSSPropertyID property, StyleResolver& styleResolver, CSSValue& value, bool isInitial, bool isInherit, const CSSRegisteredCustomProperty* registered)
+void BuilderGenerated::applyProperty(CSSPropertyID property, BuilderState& builderState, CSSValue& value, bool isInitial, bool isInherit, const CSSRegisteredCustomProperty* registered)
 {
     switch (property) {
     case CSSPropertyInvalid:
         break;
     case CSSPropertyCustom: {
         auto& customProperty = downcast<CSSCustomPropertyValue>(value);
         if (isInitial)
-            StyleBuilderCustom::applyInitialCustomProperty(styleResolver, registered, customProperty.name());
+            BuilderCustom::applyInitialCustomProperty(builderState, registered, customProperty.name());
         else if (isInherit)
-            StyleBuilderCustom::applyInheritCustomProperty(styleResolver, registered, customProperty.name());
+            BuilderCustom::applyInheritCustomProperty(builderState, registered, customProperty.name());
         else
-            StyleBuilderCustom::applyValueCustomProperty(styleResolver, registered, customProperty);
+            BuilderCustom::applyValueCustomProperty(builderState, registered, customProperty);
         break;
     }
 EOF
 
 foreach my $name (@names) {
@@ -1064,23 +1106,24 @@
   if (exists $propertiesWithStyleBuilderOptions{$name}{"longhands"}) {
     print STYLEBUILDER "        ASSERT(isShorthandCSSProperty(property));\n";
     print STYLEBUILDER "        ASSERT_NOT_REACHED();\n";
   } elsif (!exists $propertiesWithStyleBuilderOptions{$name}{"skip-builder"}) {
     print STYLEBUILDER "        if (isInitial)\n";
-    print STYLEBUILDER "            " . getScopeForFunction($name, "Initial") . "::applyInitial" . $nameToId{$name} . "(styleResolver);\n";
+    print STYLEBUILDER "            " . getScopeForFunction($name, "Initial") . "::applyInitial" . $nameToId{$name} . "(builderState);\n";
     print STYLEBUILDER "        else if (isInherit)\n";
-    print STYLEBUILDER "            " . getScopeForFunction($name, "Inherit") . "::applyInherit" . $nameToId{$name} . "(styleResolver);\n";
+    print STYLEBUILDER "            " . getScopeForFunction($name, "Inherit") . "::applyInherit" . $nameToId{$name} . "(builderState);\n";
     print STYLEBUILDER "        else\n";
-    print STYLEBUILDER "            " . getScopeForFunction($name, "Value") . "::applyValue" . $nameToId{$name} . "(styleResolver, value);\n";
+    print STYLEBUILDER "            " . getScopeForFunction($name, "Value") . "::applyValue" . $nameToId{$name} . "(builderState, value);\n";
   }
   print STYLEBUILDER "        break;\n";
 }
 
 print STYLEBUILDER << "EOF";
     };
 }
 
+} // namespace Style
 } // namespace WebCore
 EOF
 
 close STYLEBUILDER;
 
