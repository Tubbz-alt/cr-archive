diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUComputePipeline.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUComputePipeline.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUComputePipeline.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUComputePipeline.h
@@ -25,26 +25,45 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
-#include "GPUComputePipeline.h"
-#include <wtf/RefCounted.h>
-#include <wtf/RefPtr.h>
+#include "WebGPUPipeline.h"
+#include <wtf/Forward.h>
 
 namespace WebCore {
 
-class WebGPUComputePipeline : public RefCounted<WebGPUComputePipeline> {
+class GPUComputePipeline;
+class GPUPipeline;
+class GPUErrorScopes;
+class WebGPUDevice;
+class WebGPUShaderModule;
+
+class WebGPUComputePipeline final : public WebGPUPipeline {
 public:
-    static Ref<WebGPUComputePipeline> create(RefPtr<GPUComputePipeline>&&);
+    virtual ~WebGPUComputePipeline();
+
+    static Ref<WebGPUComputePipeline> create(WebGPUDevice&, RefPtr<GPUComputePipeline>&&, GPUErrorScopes&, WebGPUPipeline::ShaderData&& computeShader);
+
+    bool isComputePipeline() const { return true; }
 
+    bool isValid() const { return computePipeline(); }
     const GPUComputePipeline* computePipeline() const { return m_computePipeline.get(); }
+    RefPtr<WebGPUShaderModule> computeShader() const { return m_computeShader.module; }
+
+    bool cloneShaderModules(const WebGPUDevice&);
+    bool recompile(const WebGPUDevice&);
 
 private:
-    WebGPUComputePipeline(RefPtr<GPUComputePipeline>&&);
+    WebGPUComputePipeline(WebGPUDevice&, RefPtr<GPUComputePipeline>&&, GPUErrorScopes&, WebGPUPipeline::ShaderData&& computeShader);
 
     RefPtr<GPUComputePipeline> m_computePipeline;
+
+    // Preserved for Web Inspector recompilation.
+    WebGPUPipeline::ShaderData m_computeShader;
 };
 
 } // namespace WebCore
 
+SPECIALIZE_TYPE_TRAITS_WEBGPUPIPELINE(WebCore::WebGPUComputePipeline, isComputePipeline())
+
 #endif // ENABLE(WEBGPU)
