diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSValue.h b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSValue.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSValue.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSValue.h
@@ -36,11 +36,14 @@
 class DeprecatedCSSOMValue;
 class StyleSheetContents;
 
 enum CSSPropertyID : uint16_t;
 
-class CSSValue : public RefCounted<CSSValue> {
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(CSSValue);
+class CSSValue {
+    WTF_MAKE_NONCOPYABLE(CSSValue);
+    WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(CSSValue);
 public:
     enum Type {
         CSS_INHERIT = 0,
         CSS_PRIMITIVE_VALUE = 1,
         CSS_VALUE_LIST = 2,
@@ -48,16 +51,30 @@
         CSS_INITIAL = 4,
         CSS_UNSET = 5,
         CSS_REVERT = 6
     };
 
-    // Override RefCounted's deref() to ensure operator delete is called on
-    // the appropriate subclass type.
+    static constexpr unsigned refCountFlagIsStatic = 0x1;
+    static constexpr unsigned refCountIncrement = 0x2; // This allows us to ref / deref without disturbing the static CSSValue flag.
+    void ref() const
+    {
+        m_refCount += refCountIncrement;
+    }
+    bool hasOneRef() const { return m_refCount == refCountIncrement; }
+    unsigned refCount() const { return m_refCount / refCountIncrement; }
+    bool hasAtLeastOneRef() const { return m_refCount; }
+
     void deref()
     {
-        if (derefBase())
+        // Customized deref() to ensure operator delete is called on
+        // the appropriate subclass type.
+        unsigned tempRefCount = m_refCount - refCountIncrement;
+        if (!tempRefCount) {
             destroy();
+            return;
+        }
+        m_refCount = tempRefCount;
     }
 
     Type cssValueType() const;
     String cssText() const;
 
@@ -210,10 +227,11 @@
     enum ValueListSeparator {
         SpaceSeparator,
         CommaSeparator,
         SlashSeparator
     };
+    enum StaticCSSValueTag { StaticCSSValue };
 
 protected:
     ClassType classType() const { return static_cast<ClassType>(m_classType); }
 
     explicit CSSValue(ClassType classType)
@@ -223,24 +241,29 @@
         , m_valueListSeparator(SpaceSeparator)
         , m_classType(classType)
     {
     }
 
+    void makeStatic()
+    {
+        m_refCount |= refCountFlagIsStatic;
+    }
+
     // NOTE: This class is non-virtual for memory and performance reasons.
     // Don't go making it virtual again unless you know exactly what you're doing!
 
     ~CSSValue() = default;
 
 private:
     WEBCORE_EXPORT void destroy();
 
+    mutable unsigned m_refCount { refCountIncrement };
 protected:
     // The bits in this section are only used by specific subclasses but kept here
     // to maximize struct packing.
-
     // CSSPrimitiveValue bits:
-    unsigned m_primitiveUnitType : 7; // CSSPrimitiveValue::UnitType
+    unsigned m_primitiveUnitType : 7; // CSSUnitType
     mutable unsigned m_hasCachedCSSText : 1;
     unsigned m_isQuirkValue : 1;
 
     unsigned m_valueListSeparator : ValueListSeparatorBits;
 
