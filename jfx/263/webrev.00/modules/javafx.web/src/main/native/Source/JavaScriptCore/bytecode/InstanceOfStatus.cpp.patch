diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InstanceOfStatus.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InstanceOfStatus.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InstanceOfStatus.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InstanceOfStatus.cpp
@@ -38,17 +38,17 @@
 {
     appendICStatusVariant(m_variants, variant);
 }
 
 InstanceOfStatus InstanceOfStatus::computeFor(
-    CodeBlock* codeBlock, ICStatusMap& infoMap, unsigned bytecodeIndex)
+    CodeBlock* codeBlock, ICStatusMap& infoMap, BytecodeIndex bytecodeIndex)
 {
     ConcurrentJSLocker locker(codeBlock->m_lock);
 
     InstanceOfStatus result;
 #if ENABLE(DFG_JIT)
-    result = computeForStubInfo(locker, infoMap.get(CodeOrigin(bytecodeIndex)).stubInfo);
+    result = computeForStubInfo(locker, codeBlock->vm(), infoMap.get(CodeOrigin(bytecodeIndex)).stubInfo);
 
     if (!result.takesSlowPath()) {
         UnlinkedCodeBlock* unlinkedCodeBlock = codeBlock->unlinkedCodeBlock();
         ConcurrentJSLocker locker(unlinkedCodeBlock->m_lock);
         // We also check for BadType here in case this is "primitive instanceof Foo".
@@ -64,20 +64,20 @@
 
     return result;
 }
 
 #if ENABLE(DFG_JIT)
-InstanceOfStatus InstanceOfStatus::computeForStubInfo(const ConcurrentJSLocker&, StructureStubInfo* stubInfo)
+InstanceOfStatus InstanceOfStatus::computeForStubInfo(const ConcurrentJSLocker&, VM& vm, StructureStubInfo* stubInfo)
 {
     // FIXME: We wouldn't have to bail for nonCell if we taught MatchStructure how to handle non
     // cells. If we fixed that then we wouldn't be able to use summary();
     // https://bugs.webkit.org/show_bug.cgi?id=185784
-    StubInfoSummary summary = StructureStubInfo::summary(stubInfo);
+    StubInfoSummary summary = StructureStubInfo::summary(vm, stubInfo);
     if (!isInlineable(summary))
         return InstanceOfStatus(summary);
 
-    if (stubInfo->cacheType != CacheType::Stub)
+    if (stubInfo->cacheType() != CacheType::Stub)
         return TakesSlowPath; // This is conservative. It could be that we have no information.
 
     PolymorphicAccess* list = stubInfo->u.stub;
     InstanceOfStatus result;
     for (unsigned listIndex = 0; listIndex < list->size(); ++listIndex) {
