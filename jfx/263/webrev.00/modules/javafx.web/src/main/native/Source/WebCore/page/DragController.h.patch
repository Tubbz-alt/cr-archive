diff a/modules/javafx.web/src/main/native/Source/WebCore/page/DragController.h b/modules/javafx.web/src/main/native/Source/WebCore/page/DragController.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/DragController.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/DragController.h
@@ -38,10 +38,11 @@
 class DragClient;
 class DragData;
 class Element;
 class Frame;
 class FrameSelection;
+class HTMLImageElement;
 class HTMLInputElement;
 class IntRect;
 class Page;
 class PlatformMouseEvent;
 
@@ -50,18 +51,15 @@
 struct PromisedAttachmentInfo;
 
     class DragController {
         WTF_MAKE_NONCOPYABLE(DragController); WTF_MAKE_FAST_ALLOCATED;
     public:
-        DragController(Page&, DragClient&);
+        DragController(Page&, std::unique_ptr<DragClient>&&);
         ~DragController();
 
-        static std::unique_ptr<DragController> create(Page&, DragClient&);
         static DragOperation platformGenericDragOperation();
 
-        DragClient& client() const { return m_client; }
-
         WEBCORE_EXPORT DragOperation dragEntered(const DragData&);
         WEBCORE_EXPORT void dragExited(const DragData&);
         WEBCORE_EXPORT DragOperation dragUpdated(const DragData&);
         WEBCORE_EXPORT bool performDragOperation(const DragData&);
         WEBCORE_EXPORT void dragCancelled();
@@ -87,10 +85,16 @@
         Element* draggableElement(const Frame*, Element* start, const IntPoint&, DragState&) const;
         WEBCORE_EXPORT void dragEnded();
 
         WEBCORE_EXPORT void placeDragCaret(const IntPoint&);
 
+        const Vector<Ref<HTMLImageElement>>& droppedImagePlaceholders() const { return m_droppedImagePlaceholders; }
+        const RefPtr<Range>& droppedImagePlaceholderRange() const { return m_droppedImagePlaceholderRange; }
+
+        WEBCORE_EXPORT void finalizeDroppedImagePlaceholder(HTMLImageElement&);
+        WEBCORE_EXPORT void insertDroppedImagePlaceholdersAtCaret(const Vector<IntSize>& imageSizes);
+
         bool startDrag(Frame& src, const DragState&, DragOperation srcOp, const PlatformMouseEvent& dragEvent, const IntPoint& dragOrigin, HasNonDefaultPasteboardData);
         static const IntSize& maxDragImageSize();
 
         static const int MaxOriginalImageArea;
         static const int DragIconRightInset;
@@ -126,20 +130,25 @@
 #else
             return true;
 #endif
         }
 
+        DragClient& client() const { return *m_client; }
+
+        bool tryToUpdateDroppedImagePlaceholders(const DragData&);
+        void removeAllDroppedImagePlaceholders();
+
         String platformContentTypeForBlobType(const String& type) const;
 
         void cleanupAfterSystemDrag();
         void declareAndWriteDragImage(DataTransfer&, Element&, const URL&, const String& label);
 
 #if ENABLE(ATTACHMENT_ELEMENT)
         PromisedAttachmentInfo promisedAttachmentInfo(Frame&, Element&);
 #endif
         Page& m_page;
-        DragClient& m_client;
+        std::unique_ptr<DragClient> m_client;
 
         RefPtr<Document> m_documentUnderMouse; // The document the mouse was last dragged over.
         RefPtr<Document> m_dragInitiator; // The Document (if any) that initiated the drag.
         RefPtr<HTMLInputElement> m_fileInputElementUnderMouse;
         unsigned m_numberOfItemsToBeAccepted { 0 };
@@ -150,10 +159,12 @@
         bool m_didInitiateDrag { false };
         DragOperation m_sourceDragOperation { DragOperationNone }; // Set in startDrag when a drag starts from a mouse down within WebKit
         IntPoint m_dragOffset;
         URL m_draggingImageURL;
         bool m_isPerformingDrop { false };
+        Vector<Ref<HTMLImageElement>> m_droppedImagePlaceholders;
+        RefPtr<Range> m_droppedImagePlaceholderRange;
     };
 
     WEBCORE_EXPORT bool isDraggableLink(const Element&);
 
 } // namespace WebCore
