diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageSource.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageSource.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageSource.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/ImageSource.h
@@ -27,22 +27,24 @@
 
 #include "ImageFrame.h"
 
 #include <wtf/Forward.h>
 #include <wtf/Optional.h>
+#include <wtf/RunLoop.h>
 #include <wtf/SynchronizedFixedQueue.h>
 #include <wtf/WeakPtr.h>
 #include <wtf/WorkQueue.h>
 #include <wtf/text/TextStream.h>
 
 namespace WebCore {
 
 class BitmapImage;
 class GraphicsContext;
 class ImageDecoder;
+class SharedBuffer;
 
-class ImageSource : public ThreadSafeRefCounted<ImageSource, WTF::DestructionThread::Main>, public CanMakeWeakPtr<ImageSource> {
+class ImageSource : public ThreadSafeRefCounted<ImageSource>, public CanMakeWeakPtr<ImageSource> {
     friend class BitmapImage;
 public:
     ~ImageSource();
 
     static Ref<ImageSource> create(BitmapImage* image, AlphaOption alphaOption = AlphaOption::Premultiplied, GammaAndColorProfileOption gammaAndColorProfileOption = GammaAndColorProfileOption::Applied)
@@ -91,13 +93,14 @@
     WEBCORE_EXPORT size_t frameCount();
     RepetitionCount repetitionCount();
     String uti();
     String filenameExtension();
     Optional<IntPoint> hotSpot();
+    ImageOrientation orientation();
 
     // Image metadata which is calculated from the first ImageFrame.
-    WEBCORE_EXPORT IntSize size();
+    WEBCORE_EXPORT IntSize size(ImageOrientation = ImageOrientation::FromImage);
     IntSize sizeRespectingOrientation();
     Color singlePixelSolidColor();
     SubsamplingLevel maximumSubsamplingLevel();
 
     // ImageFrame metadata which does not require caching the ImageFrame.
@@ -194,11 +197,13 @@
     Optional<String> m_filenameExtension;
     Optional<Optional<IntPoint>> m_hotSpot;
 
     // Image metadata which is calculated from the first ImageFrame.
     Optional<IntSize> m_size;
-    Optional<IntSize> m_sizeRespectingOrientation;
+    Optional<ImageOrientation> m_orientation;
     Optional<Color> m_singlePixelSolidColor;
     Optional<SubsamplingLevel> m_maximumSubsamplingLevel;
+
+    RunLoop& m_runLoop;
 };
 
 }
