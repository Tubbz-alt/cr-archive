diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/SQLiteIDBTransaction.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/SQLiteIDBTransaction.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/SQLiteIDBTransaction.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/SQLiteIDBTransaction.cpp
@@ -90,11 +90,11 @@
     String databaseDirectory = m_backingStore.databaseDirectory();
     for (auto& entry : m_blobTemporaryAndStoredFilenames) {
         if (!FileSystem::hardLinkOrCopyFile(entry.first, FileSystem::pathByAppendingComponent(databaseDirectory, entry.second)))
             LOG_ERROR("Failed to link/copy temporary blob file '%s' to location '%s'", entry.first.utf8().data(), FileSystem::pathByAppendingComponent(databaseDirectory, entry.second).utf8().data());
 
-        m_backingStore.temporaryFileHandler().accessToTemporaryFileComplete(entry.first);
+        FileSystem::deleteFile(entry.first);
     }
 
     m_blobTemporaryAndStoredFilenames.clear();
 }
 
@@ -104,20 +104,21 @@
         return;
 
     String databaseDirectory = m_backingStore.databaseDirectory();
     for (auto& entry : m_blobRemovedFilenames) {
         String fullPath = FileSystem::pathByAppendingComponent(databaseDirectory, entry);
-        m_backingStore.temporaryFileHandler().accessToTemporaryFileComplete(fullPath);
+
+        FileSystem::deleteFile(fullPath);
     }
 
     m_blobRemovedFilenames.clear();
 }
 
 IDBError SQLiteIDBTransaction::abort()
 {
     for (auto& entry : m_blobTemporaryAndStoredFilenames)
-        m_backingStore.temporaryFileHandler().accessToTemporaryFileComplete(entry.first);
+        FileSystem::deleteFile(entry.first);
 
     m_blobTemporaryAndStoredFilenames.clear();
 
     if (!m_sqliteTransaction || !m_sqliteTransaction->inProgress())
         return IDBError { UnknownError, "No SQLite transaction in progress to abort"_s };
