diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dynbench.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dynbench.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dynbench.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dynbench.cpp
@@ -94,11 +94,10 @@
     {
         JSLockHolder locker(vm);
 
         JSGlobalObject* globalObject =
             JSGlobalObject::create(vm, JSGlobalObject::createStructure(vm, jsNull()));
-        ExecState* exec = globalObject->globalExec();
 
         Identifier identF = Identifier::fromString(vm, "f");
         Identifier identG = Identifier::fromString(vm, "g");
 
         Structure* objectStructure =
@@ -106,50 +105,50 @@
 
         // Non-strict dynamic get by id:
         JSValue object = JSFinalObject::create(vm, objectStructure);
         {
             PutPropertySlot slot(object, false, PutPropertySlot::PutById);
-            object.putInline(exec, identF, jsNumber(42), slot);
+            object.putInline(globalObject, identF, jsNumber(42), slot);
         }
         {
             PutPropertySlot slot(object, false, PutPropertySlot::PutById);
-            object.putInline(exec, identG, jsNumber(43), slot);
+            object.putInline(globalObject, identG, jsNumber(43), slot);
         }
         benchmarkImpl(
             "Non Strict Dynamic Get By Id",
             1000000,
             [&] (unsigned iterationCount) {
                 for (unsigned i = iterationCount; i--;) {
-                    JSValue result = object.get(exec, identF);
+                    JSValue result = object.get(globalObject, identF);
                     CHECK(result == jsNumber(42));
-                    result = object.get(exec, identG);
+                    result = object.get(globalObject, identG);
                     CHECK(result == jsNumber(43));
                 }
             });
 
         // Non-strict dynamic put by id replace:
         object = JSFinalObject::create(vm, objectStructure);
         {
             PutPropertySlot slot(object, false, PutPropertySlot::PutById);
-            object.putInline(exec, identF, jsNumber(42), slot);
+            object.putInline(globalObject, identF, jsNumber(42), slot);
         }
         {
             PutPropertySlot slot(object, false, PutPropertySlot::PutById);
-            object.putInline(exec, identG, jsNumber(43), slot);
+            object.putInline(globalObject, identG, jsNumber(43), slot);
         }
         benchmarkImpl(
             "Non Strict Dynamic Put By Id Replace",
             1000000,
             [&] (unsigned iterationCount) {
                 for (unsigned i = iterationCount; i--;) {
                     {
                         PutPropertySlot slot(object, false, PutPropertySlot::PutById);
-                        object.putInline(exec, identF, jsNumber(i), slot);
+                        object.putInline(globalObject, identF, jsNumber(i), slot);
                     }
                     {
                         PutPropertySlot slot(object, false, PutPropertySlot::PutById);
-                        object.putInline(exec, identG, jsNumber(i), slot);
+                        object.putInline(globalObject, identG, jsNumber(i), slot);
                     }
                 }
             });
 
         // Non-strict dynamic put by id transition with object allocation:
@@ -159,63 +158,63 @@
             [&] (unsigned iterationCount) {
                 for (unsigned i = iterationCount; i--;) {
                     JSValue object = JSFinalObject::create(vm, objectStructure);
                     {
                         PutPropertySlot slot(object, false, PutPropertySlot::PutById);
-                        object.putInline(exec, identF, jsNumber(i), slot);
+                        object.putInline(globalObject, identF, jsNumber(i), slot);
                     }
                     {
                         PutPropertySlot slot(object, false, PutPropertySlot::PutById);
-                        object.putInline(exec, identG, jsNumber(i), slot);
+                        object.putInline(globalObject, identG, jsNumber(i), slot);
                     }
                 }
             });
 
         // Non-strict dynamic get by id with dynamic store context:
         object = JSFinalObject::create(vm, objectStructure);
         {
             PutPropertySlot slot(object, false);
-            object.putInline(exec, identF, jsNumber(42), slot);
+            object.putInline(globalObject, identF, jsNumber(42), slot);
         }
         {
             PutPropertySlot slot(object, false);
-            object.putInline(exec, identG, jsNumber(43), slot);
+            object.putInline(globalObject, identG, jsNumber(43), slot);
         }
         benchmarkImpl(
             "Non Strict Dynamic Get By Id With Dynamic Store Context",
             1000000,
             [&] (unsigned iterationCount) {
                 for (unsigned i = iterationCount; i--;) {
-                    JSValue result = object.get(exec, identF);
+                    JSValue result = object.get(globalObject, identF);
                     CHECK(result == jsNumber(42));
-                    result = object.get(exec, identG);
+                    result = object.get(globalObject, identG);
                     CHECK(result == jsNumber(43));
                 }
             });
 
         // Non-strict dynamic put by id replace with dynamic store context:
         object = JSFinalObject::create(vm, objectStructure);
         {
             PutPropertySlot slot(object, false);
-            object.putInline(exec, identF, jsNumber(42), slot);
+            object.putInline(globalObject, identF, jsNumber(42), slot);
         }
         {
             PutPropertySlot slot(object, false);
-            object.putInline(exec, identG, jsNumber(43), slot);
+            object.putInline(globalObject, identG, jsNumber(43), slot);
         }
         benchmarkImpl(
             "Non Strict Dynamic Put By Id Replace With Dynamic Store Context",
             1000000,
             [&] (unsigned iterationCount) {
                 for (unsigned i = iterationCount; i--;) {
                     {
                         PutPropertySlot slot(object, false);
-                        object.putInline(exec, identF, jsNumber(i), slot);
+                        object.putInline(globalObject, identF, jsNumber(i), slot);
                     }
                     {
                         PutPropertySlot slot(object, false);
-                        object.putInline(exec, identG, jsNumber(i), slot);
+                        object.putInline(globalObject, identG, jsNumber(i), slot);
                     }
                 }
             });
 
         // Non-strict dynamic put by id transition with object allocation with dynamic store context:
@@ -225,15 +224,15 @@
             [&] (unsigned iterationCount) {
                 for (unsigned i = iterationCount; i--;) {
                     JSValue object = JSFinalObject::create(vm, objectStructure);
                     {
                         PutPropertySlot slot(object, false);
-                        object.putInline(exec, identF, jsNumber(i), slot);
+                        object.putInline(globalObject, identF, jsNumber(i), slot);
                     }
                     {
                         PutPropertySlot slot(object, false);
-                        object.putInline(exec, identG, jsNumber(i), slot);
+                        object.putInline(globalObject, identG, jsNumber(i), slot);
                     }
                 }
             });
     }
 
