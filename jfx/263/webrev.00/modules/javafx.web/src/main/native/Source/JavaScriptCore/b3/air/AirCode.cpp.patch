diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirCode.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirCode.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirCode.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirCode.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -33,23 +33,24 @@
 #include "AirCFG.h"
 #include "AllowMacroScratchRegisterUsageIf.h"
 #include "B3BasicBlockUtils.h"
 #include "B3Procedure.h"
 #include "B3StackSlot.h"
+#include "CCallHelpers.h"
 #include <wtf/ListDump.h>
 #include <wtf/MathExtras.h>
 
 namespace JSC { namespace B3 { namespace Air {
 
+const char* const tierName = "Air ";
+
 static void defaultPrologueGenerator(CCallHelpers& jit, Code& code)
 {
     jit.emitFunctionPrologue();
     if (code.frameSize()) {
         AllowMacroScratchRegisterUsageIf allowScratch(jit, isARM64());
         jit.addPtr(MacroAssembler::TrustedImm32(-code.frameSize()), MacroAssembler::framePointerRegister,  MacroAssembler::stackPointerRegister);
-        if (Options::zeroStackFrame())
-            jit.clearStackFrame(MacroAssembler::framePointerRegister, MacroAssembler::stackPointerRegister, GPRInfo::nonArgGPR0, code.frameSize());
     }
 
     jit.emitSave(code.calleeSaveRegisterAtOffsetList());
 }
 
@@ -248,30 +249,30 @@
 }
 
 void Code::dump(PrintStream& out) const
 {
     if (!m_entrypoints.isEmpty())
-        out.print("Entrypoints: ", listDump(m_entrypoints), "\n");
+        out.print(tierName, "Entrypoints: ", listDump(m_entrypoints), "\n");
     for (BasicBlock* block : *this)
         out.print(deepDump(block));
     if (stackSlots().size()) {
-        out.print("Stack slots:\n");
+        out.print(tierName, "Stack slots:\n");
         for (StackSlot* slot : stackSlots())
-            out.print("    ", pointerDump(slot), ": ", deepDump(slot), "\n");
+            out.print(tierName, "    ", pointerDump(slot), ": ", deepDump(slot), "\n");
     }
     if (specials().size()) {
-        out.print("Specials:\n");
+        out.print(tierName, "Specials:\n");
         for (Special* special : specials())
-            out.print("    ", deepDump(special), "\n");
+            out.print(tierName, "    ", deepDump(special), "\n");
     }
     if (m_frameSize || m_stackIsAllocated)
-        out.print("Frame size: ", m_frameSize, m_stackIsAllocated ? " (Allocated)" : "", "\n");
+        out.print(tierName, "Frame size: ", m_frameSize, m_stackIsAllocated ? " (Allocated)" : "", "\n");
     if (m_callArgAreaSize)
-        out.print("Call arg area size: ", m_callArgAreaSize, "\n");
+        out.print(tierName, "Call arg area size: ", m_callArgAreaSize, "\n");
     RegisterAtOffsetList calleeSaveRegisters = this->calleeSaveRegisterAtOffsetList();
     if (calleeSaveRegisters.size())
-        out.print("Callee saves: ", calleeSaveRegisters, "\n");
+        out.print(tierName, "Callee saves: ", calleeSaveRegisters, "\n");
 }
 
 unsigned Code::findFirstBlockIndex(unsigned index) const
 {
     while (index < size() && !at(index))
