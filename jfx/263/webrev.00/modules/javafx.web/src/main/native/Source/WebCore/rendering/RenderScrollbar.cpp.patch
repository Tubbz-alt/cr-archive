diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderScrollbar.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderScrollbar.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderScrollbar.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderScrollbar.cpp
@@ -134,16 +134,25 @@
 
     updateScrollbarPart(ScrollbarBGPart);
     updateScrollbarPart(TrackBGPart);
 }
 
-std::unique_ptr<RenderStyle> RenderScrollbar::getScrollbarPseudoStyle(ScrollbarPart partType, PseudoId pseudoId)
+std::unique_ptr<RenderStyle> RenderScrollbar::getScrollbarPseudoStyle(ScrollbarPart partType, PseudoId pseudoId) const
 {
     if (!owningRenderer())
-        return 0;
-
-    std::unique_ptr<RenderStyle> result = owningRenderer()->getUncachedPseudoStyle(PseudoStyleRequest(pseudoId, this, partType), &owningRenderer()->style());
+        return nullptr;
+
+    StyleScrollbarState scrollbarState;
+    scrollbarState.scrollbarPart = partType;
+    scrollbarState.hoveredPart = hoveredPart();
+    scrollbarState.pressedPart = pressedPart();
+    scrollbarState.orientation = orientation();
+    scrollbarState.buttonsPlacement = theme().buttonsPlacement();
+    scrollbarState.enabled = enabled();
+    scrollbarState.scrollCornerIsVisible = scrollableArea().isScrollCornerVisible();
+
+    std::unique_ptr<RenderStyle> result = owningRenderer()->getUncachedPseudoStyle({ pseudoId, scrollbarState }, &owningRenderer()->style());
     // Scrollbars for root frames should always have background color
     // unless explicitly specified as transparent. So we force it.
     // This is because WebKit assumes scrollbar to be always painted and missing background
     // causes visual artifact like non-repainted dirty region.
     if (result && m_owningFrame && m_owningFrame->view() && !m_owningFrame->view()->isTransparent() && !result->hasBackground())
@@ -349,6 +358,12 @@
         return 1;
 
     return partRenderer->style().opacity();
 }
 
+bool RenderScrollbar::isHiddenByStyle() const
+{
+    std::unique_ptr<RenderStyle> partStyle = getScrollbarPseudoStyle(ScrollbarBGPart, pseudoForScrollbarPart(ScrollbarBGPart));
+    return partStyle && partStyle->display() == DisplayType::None;
+}
+
 }
