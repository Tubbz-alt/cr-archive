diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/LazyClassStructure.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/LazyClassStructure.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/LazyClassStructure.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/LazyClassStructure.cpp
@@ -58,37 +58,22 @@
 
     if (!prototype)
         prototype = structure->storedPrototypeObject();
 }
 
-void LazyClassStructure::Initializer::setConstructor(PropertyName propertyName, JSObject* constructor)
+void LazyClassStructure::Initializer::setConstructor(JSObject* constructor)
 {
     RELEASE_ASSERT(structure);
     RELEASE_ASSERT(prototype);
     RELEASE_ASSERT(!this->constructor);
 
     this->constructor = constructor;
 
     prototype->putDirectWithoutTransition(vm, vm.propertyNames->constructor, constructor, static_cast<unsigned>(PropertyAttribute::DontEnum));
-    if (!propertyName.isNull())
-        global->putDirect(vm, propertyName, constructor, static_cast<unsigned>(PropertyAttribute::DontEnum));
     classStructure.m_constructor.set(vm, global, constructor);
 }
 
-void LazyClassStructure::Initializer::setConstructor(JSObject* constructor)
-{
-    String name;
-    if (InternalFunction* internalFunction = jsDynamicCast<InternalFunction*>(vm, constructor))
-        name = internalFunction->name();
-    else if (JSFunction* function = jsDynamicCast<JSFunction*>(vm, constructor))
-        name = function->name(vm);
-    else
-        RELEASE_ASSERT_NOT_REACHED();
-
-    setConstructor(Identifier::fromString(vm, name), constructor);
-}
-
 void LazyClassStructure::visit(SlotVisitor& visitor)
 {
     m_structure.visit(visitor);
     visitor.append(m_constructor);
 }
