diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSelector.h b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSelector.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSelector.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSelector.h
@@ -32,10 +32,11 @@
         ClassB = 0x100,
         ClassC = 1
     };
 
     // this class represents a selector for a StyleRule
+    DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(CSSSelectorRareData);
     class CSSSelector {
         WTF_MAKE_FAST_ALLOCATED;
     public:
         CSSSelector();
         CSSSelector(const CSSSelector&);
@@ -108,10 +109,11 @@
             PseudoClassAnyLinkDeprecated,
             PseudoClassAutofill,
             PseudoClassAutofillStrongPassword,
             PseudoClassAutofillStrongPasswordViewable,
             PseudoClassHover,
+            PseudoClassDirectFocus,
             PseudoClassDrag,
             PseudoClassFocus,
             PseudoClassFocusWithin,
             PseudoClassActive,
             PseudoClassChecked,
@@ -148,10 +150,13 @@
             PseudoClassFullScreen,
             PseudoClassFullScreenDocument,
             PseudoClassFullScreenAncestor,
             PseudoClassAnimatingFullScreenTransition,
             PseudoClassFullScreenControlsHidden,
+#endif
+#if ENABLE(PICTURE_IN_PICTURE_API)
+            PseudoClassPictureInPicture,
 #endif
             PseudoClassInRange,
             PseudoClassOutOfRange,
 #if ENABLE(VIDEO_TRACK)
             PseudoClassFuture,
@@ -175,11 +180,13 @@
 #if ENABLE(VIDEO_TRACK)
             PseudoElementCue,
 #endif
             PseudoElementFirstLetter,
             PseudoElementFirstLine,
+            PseudoElementHighlight,
             PseudoElementMarker,
+            PseudoElementPart,
             PseudoElementResizer,
             PseudoElementScrollbar,
             PseudoElementScrollbarButton,
             PseudoElementScrollbarCorner,
             PseudoElementScrollbarThumb,
@@ -238,19 +245,19 @@
         const AtomString& serializingValue() const;
         const QualifiedName& attribute() const;
         const AtomString& attributeCanonicalLocalName() const;
         const AtomString& argument() const { return m_hasRareData ? m_data.m_rareData->m_argument : nullAtom(); }
         bool attributeValueMatchingIsCaseInsensitive() const;
-        const Vector<AtomString>* langArgumentList() const { return m_hasRareData ? m_data.m_rareData->m_langArgumentList.get() : nullptr; }
+        const Vector<AtomString>* argumentList() const { return m_hasRareData ? m_data.m_rareData->m_argumentList.get() : nullptr; }
         const CSSSelectorList* selectorList() const { return m_hasRareData ? m_data.m_rareData->m_selectorList.get() : nullptr; }
 
         void setValue(const AtomString&, bool matchLowerCase = false);
 
         void setAttribute(const QualifiedName&, bool convertToLowercase, AttributeMatchType);
         void setNth(int a, int b);
         void setArgument(const AtomString&);
-        void setLangArgumentList(std::unique_ptr<Vector<AtomString>>);
+        void setArgumentList(std::unique_ptr<Vector<AtomString>>);
         void setSelectorList(std::unique_ptr<CSSSelectorList>);
 
         bool matchNth(int count) const;
         int nthA() const;
         int nthB() const;
@@ -340,10 +347,11 @@
 
         // Hide.
         CSSSelector& operator=(const CSSSelector&);
 
         struct RareData : public RefCounted<RareData> {
+            WTF_MAKE_STRUCT_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(CSSSelectorRareData);
             static Ref<RareData> create(AtomString&& value) { return adoptRef(*new RareData(WTFMove(value))); }
             ~RareData();
 
             bool matchNth(int count);
 
@@ -356,11 +364,11 @@
             int m_a; // Used for :nth-*
             int m_b; // Used for :nth-*
             QualifiedName m_attribute; // used for attribute selector
             AtomString m_attributeCanonicalLocalName;
             AtomString m_argument; // Used for :contains and :nth-*
-            std::unique_ptr<Vector<AtomString>> m_langArgumentList; // Used for :lang arguments.
+            std::unique_ptr<Vector<AtomString>> m_argumentList; // Used for :lang and ::part arguments.
             std::unique_ptr<CSSSelectorList> m_selectorList; // Used for :matches() and :not().
 
         private:
             RareData(AtomString&& value);
         };
@@ -436,10 +444,15 @@
         || type == CSSSelector::PseudoClassNthOfType
         || type == CSSSelector::PseudoClassNthLastChild
         || type == CSSSelector::PseudoClassNthLastOfType;
 }
 
+static inline bool isTreeStructuralPseudoClass(CSSSelector::PseudoClassType type)
+{
+    return pseudoClassIsRelativeToSiblings(type) || type == CSSSelector::PseudoClassRoot;
+}
+
 inline bool CSSSelector::isSiblingSelector() const
 {
     return relation() == DirectAdjacent
         || relation() == IndirectAdjacent
         || (match() == CSSSelector::PseudoClass && pseudoClassIsRelativeToSiblings(pseudoClassType()));
