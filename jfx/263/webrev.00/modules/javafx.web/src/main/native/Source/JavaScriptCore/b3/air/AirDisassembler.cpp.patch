diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirDisassembler.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirDisassembler.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirDisassembler.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirDisassembler.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -30,10 +30,11 @@
 
 #include "AirBasicBlock.h"
 #include "AirCode.h"
 #include "AirInst.h"
 #include "B3Value.h"
+#include "CCallHelpers.h"
 #include "Disassembler.h"
 #include "LinkBuffer.h"
 
 namespace JSC { namespace B3 { namespace Air {
 
@@ -61,11 +62,11 @@
 {
     UNUSED_PARAM(jit);
     m_blocks.append(block);
 }
 
-void Disassembler::addInst(Inst* inst, CCallHelpers::Label start, CCallHelpers::Label end)
+void Disassembler::addInst(Inst* inst, MacroAssembler::Label start, MacroAssembler::Label end)
 {
     auto addResult = m_instToRange.add(inst, std::make_pair(start, end));
     RELEASE_ASSERT(addResult.isNewEntry);
 }
 
@@ -103,11 +104,11 @@
         block->dumpFooter(out);
     }
 
     // FIXME: We could be better about various late paths. We can implement
     // this later if we find a strong use for it.
-    out.print("# Late paths\n");
+    out.print(tierName, "# Late paths\n");
     dumpAsmRange(m_latePathStart, m_latePathEnd);
 }
 
 } } } // namespace JSC::B3::Air
 
