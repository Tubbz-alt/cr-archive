diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerProvider.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerProvider.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerProvider.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerProvider.cpp
@@ -27,13 +27,16 @@
 #include "ServiceWorkerProvider.h"
 
 #if ENABLE(SERVICE_WORKER)
 
 #include "Document.h"
+#include "Frame.h"
+#include "FrameLoader.h"
+#include "FrameLoaderClient.h"
+#include "LegacySchemeRegistry.h"
+#include "Page.h"
 #include "SWClientConnection.h"
-#include "SchemeRegistry.h"
-#include <pal/SessionID.h>
 
 namespace WebCore {
 
 static ServiceWorkerProvider* sharedProvider;
 
@@ -50,27 +53,8 @@
 void ServiceWorkerProvider::setSharedProvider(ServiceWorkerProvider& newProvider)
 {
     sharedProvider = &newProvider;
 }
 
-bool ServiceWorkerProvider::mayHaveServiceWorkerRegisteredForOrigin(PAL::SessionID sessionID, const SecurityOriginData& origin)
-{
-    auto* connection = existingServiceWorkerConnectionForSession(sessionID);
-    if (!connection)
-        return m_mayHaveRegisteredServiceWorkers;
-
-    return connection->mayHaveServiceWorkerRegisteredForOrigin(origin);
-}
-
-void ServiceWorkerProvider::registerServiceWorkerClients()
-{
-    setMayHaveRegisteredServiceWorkers();
-    for (auto* document : Document::allDocuments()) {
-        auto sessionID = document->sessionID();
-        if (SchemeRegistry::canServiceWorkersHandleURLScheme(document->url().protocol().toStringWithoutCopying()))
-            document->setServiceWorkerConnection(&serviceWorkerConnectionForSession(sessionID));
-    }
-}
-
 } // namespace WebCore
 
 #endif // ENABLE(SERVICE_WORKER)
