diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/testb3.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/testb3.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/testb3.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/testb3.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2019 Apple Inc. All rights reserved.
+ * Copyright (C) 2019-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -21,10 +21,12 @@
  * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
+#pragma once
+
 #include "AirCode.h"
 #include "AirInstInlines.h"
 #include "AirValidate.h"
 #include "AllowMacroScratchRegisterUsage.h"
 #include "B3ArgumentRegValue.h"
@@ -261,22 +263,24 @@
         },
         toCString("Did not expected to find ", text, " but it's there!"));
 }
 
 template<typename Type>
-struct Operand {
+struct B3Operand {
     const char* name;
     Type value;
 };
 
-typedef Operand<int64_t> Int64Operand;
-typedef Operand<int32_t> Int32Operand;
+typedef B3Operand<int64_t> Int64Operand;
+typedef B3Operand<int32_t> Int32Operand;
+typedef B3Operand<int16_t> Int16Operand;
+typedef B3Operand<int8_t> Int8Operand;
 
-#define MAKE_OPERAND(value) Operand<decltype(value)> { #value, value }
+#define MAKE_OPERAND(value) B3Operand<decltype(value)> { #value, value }
 
 template<typename FloatType>
-void populateWithInterestingValues(Vector<Operand<FloatType>>& operands)
+void populateWithInterestingValues(Vector<B3Operand<FloatType>>& operands)
 {
     operands.append({ "0.", static_cast<FloatType>(0.) });
     operands.append({ "-0.", static_cast<FloatType>(-0.) });
     operands.append({ "0.4", static_cast<FloatType>(0.5) });
     operands.append({ "-0.4", static_cast<FloatType>(-0.5) });
@@ -298,13 +302,13 @@
     operands.append({ "-infiniti", - std::numeric_limits<FloatType>::infinity() });
     operands.append({ "PNaN", static_cast<FloatType>(PNaN) });
 }
 
 template<typename FloatType>
-Vector<Operand<FloatType>> floatingPointOperands()
+Vector<B3Operand<FloatType>> floatingPointOperands()
 {
-    Vector<Operand<FloatType>> operands;
+    Vector<B3Operand<FloatType>> operands;
     populateWithInterestingValues(operands);
     return operands;
 };
 
 inline Vector<Int64Operand> int64Operands()
@@ -341,10 +345,42 @@
         { "uint32-min", static_cast<int32_t>(std::numeric_limits<uint32_t>::min()) }
     });
     return operands;
 }
 
+inline Vector<Int16Operand> int16Operands()
+{
+    Vector<Int16Operand> operands({
+        { "0", 0 },
+        { "1", 1 },
+        { "-1", -1 },
+        { "42", 42 },
+        { "-42", -42 },
+        { "int16-max", std::numeric_limits<int16_t>::max() },
+        { "int16-min", std::numeric_limits<int16_t>::min() },
+        { "uint16-max", static_cast<int16_t>(std::numeric_limits<uint16_t>::max()) },
+        { "uint16-min", static_cast<int16_t>(std::numeric_limits<uint16_t>::min()) }
+    });
+    return operands;
+}
+
+inline Vector<Int8Operand> int8Operands()
+{
+    Vector<Int8Operand> operands({
+        { "0", 0 },
+        { "1", 1 },
+        { "-1", -1 },
+        { "42", 42 },
+        { "-42", -42 },
+        { "int8-max", std::numeric_limits<int8_t>::max() },
+        { "int8-min", std::numeric_limits<int8_t>::min() },
+        { "uint8-max", static_cast<int8_t>(std::numeric_limits<uint8_t>::max()) },
+        { "uint8-min", static_cast<int8_t>(std::numeric_limits<uint8_t>::min()) }
+    });
+    return operands;
+}
+
 inline void add32(CCallHelpers& jit, GPRReg src1, GPRReg src2, GPRReg dest)
 {
     if (src2 == dest)
         jit.add32(src1, dest);
     else {
@@ -457,11 +493,13 @@
 void testBitOrImmsFloat(float, float);
 void testBitOrArgsFloatWithUselessDoubleConversion(float, float);
 void testBitXorArgs(int64_t, int64_t);
 void testBitXorSameArg(int64_t);
 void testBitXorAndAndArgs(int64_t, int64_t, int64_t c);
+void testBitXorAndAndArgs32(int32_t, int32_t, int32_t c);
 void testBitXorAndSameArgs(int64_t, int64_t);
+void testBitXorAndSameArgs32(int32_t, int32_t);
 void testBitXorImms(int64_t, int64_t);
 void testBitXorArgImm(int64_t, int64_t);
 void testBitXorImmArg(int64_t, int64_t);
 void testBitXorBitXorArgImmImm(int64_t, int64_t, int64_t c);
 void testBitXorImmBitXorArgImm(int64_t, int64_t, int64_t c);
@@ -757,10 +795,14 @@
 void testAddArgDouble(double);
 void testCheckAddArgumentAliasing64();
 void testCheckAddArgumentAliasing32();
 void testCheckAddSelfOverflow64();
 void testCheckAddSelfOverflow32();
+void testCheckAddRemoveCheckWithSExt8(int8_t);
+void testCheckAddRemoveCheckWithSExt16(int16_t);
+void testCheckAddRemoveCheckWithSExt32(int32_t);
+void testCheckAddRemoveCheckWithZExt32(int32_t);
 void testCheckSubImm();
 void testCheckSubBadImm();
 void testCheckSub();
 double doubleSub(double, double);
 void testCheckSub64();
