diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGMarkerElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGMarkerElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGMarkerElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGMarkerElement.cpp
@@ -31,11 +31,10 @@
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(SVGMarkerElement);
 
 inline SVGMarkerElement::SVGMarkerElement(const QualifiedName& tagName, Document& document)
     : SVGElement(tagName, document)
-    , SVGExternalResourcesRequired(this)
     , SVGFitToViewBox(this)
 {
     // Spec: If the markerWidth/markerHeight attribute is not specified, the effect is as if a value of "3" were specified.
     ASSERT(hasTagName(SVGNames::markerTag));
 
@@ -77,22 +76,21 @@
     }
 
     SVGParsingError parseError = NoError;
 
     if (name == SVGNames::refXAttr)
-        m_refX->setBaseValInternal(SVGLengthValue::construct(LengthModeWidth, value, parseError));
+        m_refX->setBaseValInternal(SVGLengthValue::construct(SVGLengthMode::Width, value, parseError));
     else if (name == SVGNames::refYAttr)
-        m_refY->setBaseValInternal(SVGLengthValue::construct(LengthModeHeight, value, parseError));
+        m_refY->setBaseValInternal(SVGLengthValue::construct(SVGLengthMode::Height, value, parseError));
     else if (name == SVGNames::markerWidthAttr)
-        m_markerWidth->setBaseValInternal(SVGLengthValue::construct(LengthModeWidth, value, parseError));
+        m_markerWidth->setBaseValInternal(SVGLengthValue::construct(SVGLengthMode::Width, value, parseError));
     else if (name == SVGNames::markerHeightAttr)
-        m_markerHeight->setBaseValInternal(SVGLengthValue::construct(LengthModeHeight, value, parseError));
+        m_markerHeight->setBaseValInternal(SVGLengthValue::construct(SVGLengthMode::Height, value, parseError));
 
     reportAttributeParsingError(parseError, name, value);
 
     SVGElement::parseAttribute(name, value);
-    SVGExternalResourcesRequired::parseAttribute(name, value);
     SVGFitToViewBox::parseAttribute(name, value);
 }
 
 void SVGMarkerElement::svgAttributeChanged(const QualifiedName& attrName)
 {
@@ -110,11 +108,10 @@
             object->setNeedsLayout();
         return;
     }
 
     SVGElement::svgAttributeChanged(attrName);
-    SVGExternalResourcesRequired::svgAttributeChanged(attrName);
 }
 
 void SVGMarkerElement::childrenChanged(const ChildChange& change)
 {
     SVGElement::childrenChanged(change);
@@ -124,25 +121,28 @@
 
     if (RenderObject* object = renderer())
         object->setNeedsLayout();
 }
 
-void SVGMarkerElement::setOrient(SVGMarkerOrientType orientType, const SVGAngleValue& angle)
+String SVGMarkerElement::orient() const
 {
-    m_orientType->setBaseValInternal(orientType);
-    m_orientAngle->setBaseValInternal(angle);
-    m_orientAngle->baseVal()->commitChange();
+    return getAttribute(SVGNames::orientAttr);
+}
+
+void SVGMarkerElement::setOrient(const String& orient)
+{
+    setAttribute(SVGNames::orientAttr, orient);
 }
 
 void SVGMarkerElement::setOrientToAuto()
 {
-    setOrient(SVGMarkerOrientAuto, { });
+    m_orientType->setBaseVal(SVGMarkerOrientAuto);
 }
 
-void SVGMarkerElement::setOrientToAngle(SVGAngle& angle)
+void SVGMarkerElement::setOrientToAngle(const SVGAngle& angle)
 {
-    setOrient(SVGMarkerOrientAngle, angle.value());
+    m_orientAngle->baseVal()->newValueSpecifiedUnits(angle.unitType(), angle.valueInSpecifiedUnits());
 }
 
 RenderPtr<RenderElement> SVGMarkerElement::createElementRenderer(RenderStyle&& style, const RenderTreePosition&)
 {
     return createRenderer<RenderSVGResourceMarker>(*this, WTFMove(style));
