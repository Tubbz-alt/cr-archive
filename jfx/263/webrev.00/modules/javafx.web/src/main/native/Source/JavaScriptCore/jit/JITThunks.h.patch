diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITThunks.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITThunks.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITThunks.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITThunks.h
@@ -85,21 +85,21 @@
         }
         static bool equal(const HostFunctionKey& a, const HostFunctionKey& b)
         {
             return (std::get<0>(a) == std::get<0>(b)) && (std::get<1>(a) == std::get<1>(b)) && (std::get<2>(a) == std::get<2>(b));
         }
-        static const bool safeToCompareToEmptyOrDeleted = true;
+        static constexpr bool safeToCompareToEmptyOrDeleted = true;
 
     private:
         static inline unsigned hashPointer(TaggedNativeFunction p)
         {
             return DefaultHash<TaggedNativeFunction>::Hash::hash(p);
         }
     };
 
     struct HostFunctionHashTrait : WTF::GenericHashTraits<HostFunctionKey> {
-        static const bool emptyValueIsZero = true;
+        static constexpr bool emptyValueIsZero = true;
         static EmptyValueType emptyValue() { return std::make_tuple(nullptr, nullptr, String()); }
 
         static void constructDeletedValue(HostFunctionKey& slot) { std::get<0>(slot) = TaggedNativeFunction(-1); }
         static bool isDeletedValue(const HostFunctionKey& value) { return std::get<0>(value) == TaggedNativeFunction(-1); }
     };
