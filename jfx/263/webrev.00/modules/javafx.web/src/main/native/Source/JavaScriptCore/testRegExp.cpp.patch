diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/testRegExp.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/testRegExp.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/testRegExp.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/testRegExp.cpp
@@ -1,7 +1,7 @@
 /*
- *  Copyright (C) 2011, 2015 Apple Inc. All rights reserved.
+ *  Copyright (C) 2011-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Library General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -100,26 +100,26 @@
     int offset;
     int result;
     Vector<int, 32> expectVector;
 };
 
-class GlobalObject : public JSGlobalObject {
+class GlobalObject final : public JSGlobalObject {
 private:
     GlobalObject(VM&, Structure*, const Vector<String>& arguments);
 
 public:
-    typedef JSGlobalObject Base;
+    using Base = JSGlobalObject;
 
     static GlobalObject* create(VM& vm, Structure* structure, const Vector<String>& arguments)
     {
         GlobalObject* globalObject = new (NotNull, allocateCell<GlobalObject>(vm.heap)) GlobalObject(vm, structure, arguments);
         return globalObject;
     }
 
     DECLARE_INFO;
 
-    static const bool needsDestructor = false;
+    static constexpr bool needsDestructor = true;
 
     static Structure* createStructure(VM& vm, JSValue prototype)
     {
         return Structure::create(vm, 0, prototype, TypeInfo(GlobalObjectType, StructureFlags), info());
     }
@@ -129,10 +129,11 @@
     {
         Base::finishCreation(vm);
         UNUSED_PARAM(arguments);
     }
 };
+STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(GlobalObject, JSGlobalObject);
 
 const ClassInfo GlobalObject::s_info = { "global", &JSGlobalObject::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(GlobalObject) };
 
 GlobalObject::GlobalObject(VM& vm, Structure* structure, const Vector<String>& arguments)
     : JSGlobalObject(vm, structure)
