diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBody.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBody.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBody.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBody.cpp
@@ -33,10 +33,11 @@
 #include "FetchBodyOwner.h"
 #include "FetchBodySource.h"
 #include "FetchHeaders.h"
 #include "HTTPHeaderValues.h"
 #include "HTTPParsers.h"
+#include "JSDOMPromiseDeferred.h"
 #include "ReadableStreamSource.h"
 #include <JavaScriptCore/ArrayBufferView.h>
 
 namespace WebCore {
 
@@ -73,11 +74,11 @@
         contentType = HTTPHeaderValues::textPlainContentType();
         return FetchBody(WTFMove(value));
     });
 }
 
-Optional<FetchBody> FetchBody::fromFormData(PAL::SessionID sessionID, FormData& formData)
+Optional<FetchBody> FetchBody::fromFormData(FormData& formData)
 {
     ASSERT(!formData.isEmpty());
 
     if (auto buffer = formData.asSharedBuffer()) {
         FetchBody body;
@@ -86,11 +87,11 @@
     }
 
     auto url = formData.asBlobURL();
     if (!url.isNull()) {
         // FIXME: Properly set mime type and size of the blob.
-        Ref<const Blob> blob = Blob::deserialize(sessionID, url, { }, { }, { });
+        Ref<const Blob> blob = Blob::deserialize(url, { }, { }, { });
         return FetchBody { WTFMove(blob) };
     }
 
     // FIXME: Support form data bodies.
     return WTF::nullopt;
@@ -127,10 +128,15 @@
     }
     m_consumer.setType(FetchBodyConsumer::Type::Text);
     consume(owner, WTFMove(promise));
 }
 
+void FetchBody::formData(FetchBodyOwner&, Ref<DeferredPromise>&& promise)
+{
+    promise.get().reject(NotSupportedError);
+}
+
 void FetchBody::consumeOnceLoadingFinished(FetchBodyConsumer::Type type, Ref<DeferredPromise>&& promise, const String& contentType)
 {
     m_consumer.setType(type);
     m_consumer.setConsumePromise(WTFMove(promise));
     if (type == FetchBodyConsumer::Type::Blob)
@@ -237,11 +243,11 @@
 void FetchBody::loadingSucceeded()
 {
     m_consumer.loadingSucceeded();
 }
 
-RefPtr<FormData> FetchBody::bodyAsFormData(ScriptExecutionContext& context) const
+RefPtr<FormData> FetchBody::bodyAsFormData() const
 {
     if (isText())
         return FormData::create(UTF8Encoding().encode(textBody(), UnencodableHandling::Entities));
     if (isURLSearchParams())
         return FormData::create(UTF8Encoding().encode(urlSearchParamsBody().toString(), UnencodableHandling::Entities));
@@ -253,11 +259,10 @@
     if (isArrayBuffer())
         return FormData::create(arrayBufferBody().data(), arrayBufferBody().byteLength());
     if (isArrayBufferView())
         return FormData::create(arrayBufferViewBody().baseAddress(), arrayBufferViewBody().byteLength());
     if (isFormData()) {
-        ASSERT_UNUSED(context, !context.isWorkerGlobalScope());
         auto body = makeRef(const_cast<FormData&>(formDataBody()));
         return body;
     }
     if (auto* data = m_consumer.data())
         return FormData::create(data->data(), data->size());
