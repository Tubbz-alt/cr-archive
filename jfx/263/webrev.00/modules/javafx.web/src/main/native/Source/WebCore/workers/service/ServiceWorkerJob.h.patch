diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerJob.h b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerJob.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerJob.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerJob.h
@@ -25,11 +25,10 @@
 
 #pragma once
 
 #if ENABLE(SERVICE_WORKER)
 
-#include "JSDOMPromiseDeferred.h"
 #include "ResourceResponse.h"
 #include "ServiceWorkerJobClient.h"
 #include "ServiceWorkerJobData.h"
 #include "ServiceWorkerTypes.h"
 #include "WorkerScriptLoader.h"
@@ -61,18 +60,20 @@
     using Identifier = ServiceWorkerJobIdentifier;
     Identifier identifier() const { return m_jobData.identifier().jobIdentifier; }
 
     const ServiceWorkerJobData& data() const { return m_jobData; }
     bool hasPromise() const { return !!m_promise; }
-    RefPtr<DeferredPromise> takePromise() { return WTFMove(m_promise); }
+    RefPtr<DeferredPromise> takePromise();
 
     void fetchScriptWithContext(ScriptExecutionContext&, FetchOptions::Cache);
 
     const DocumentOrWorkerIdentifier& contextIdentifier() { return m_contextIdentifier; }
 
     bool cancelPendingLoad();
 
+    WEBCORE_EXPORT static ResourceError validateServiceWorkerResponse(const ServiceWorkerJobData&, const ResourceResponse&);
+
 private:
     // WorkerScriptLoaderClient
     void didReceiveResponse(unsigned long identifier, const ResourceResponse&) final;
     void notifyFinished() final;
 
@@ -83,11 +84,11 @@
     bool m_completed { false };
 
     DocumentOrWorkerIdentifier m_contextIdentifier;
     RefPtr<WorkerScriptLoader> m_scriptLoader;
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     Ref<Thread> m_creationThread { Thread::current() };
 #endif
 };
 
 } // namespace WebCore
