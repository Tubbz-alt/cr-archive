diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimationElement.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimationElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimationElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimationElement.h
@@ -22,11 +22,10 @@
  * Boston, MA 02110-1301, USA.
  */
 
 #pragma once
 
-#include "SVGExternalResourcesRequired.h"
 #include "SVGSMILElement.h"
 #include "SVGTests.h"
 #include "UnitBezier.h"
 
 namespace WebCore {
@@ -36,11 +35,11 @@
 
 // If we have 'currentColor' or 'inherit' as animation value, we need to grab
 // the value during the animation since the value can be animated itself.
 enum AnimatedPropertyValueType { RegularPropertyValue, CurrentColorValue, InheritValue };
 
-class SVGAnimationElement : public SVGSMILElement, public SVGExternalResourcesRequired, public SVGTests {
+class SVGAnimationElement : public SVGSMILElement, public SVGTests {
     WTF_MAKE_ISO_ALLOCATED(SVGAnimationElement);
 public:
     float getStartTime() const;
     float getCurrentTime() const;
     float getSimpleDuration() const;
@@ -84,11 +83,11 @@
     virtual void determinePropertyValueTypes(const String& from, const String& to);
 
 protected:
     SVGAnimationElement(const QualifiedName&, Document&);
 
-    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGAnimationElement, SVGElement, SVGExternalResourcesRequired, SVGTests>;
+    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGAnimationElement, SVGElement, SVGTests>;
     const SVGPropertyRegistry& propertyRegistry() const override { return m_propertyRegistry; }
 
     virtual void resetAnimation();
 
     static bool isSupportedAttribute(const QualifiedName&);
@@ -101,11 +100,11 @@
 
     String targetAttributeBaseValue();
 
     // from SVGSMILElement
     void startedActiveInterval() override;
-    void updateAnimation(float percent, unsigned repeat, SVGSMILElement* resultElement) override;
+    void updateAnimation(float percent, unsigned repeat) override;
 
     AnimatedPropertyValueType m_fromPropertyValueType { RegularPropertyValue };
     AnimatedPropertyValueType m_toPropertyValueType { RegularPropertyValue };
 
     void setAttributeName(const QualifiedName&) override { }
@@ -119,11 +118,11 @@
     void setAttributeType(const AtomString&);
 
     virtual bool calculateToAtEndOfDurationValue(const String& toAtEndOfDurationString) = 0;
     virtual bool calculateFromAndToValues(const String& fromString, const String& toString) = 0;
     virtual bool calculateFromAndByValues(const String& fromString, const String& byString) = 0;
-    virtual void calculateAnimatedValue(float percent, unsigned repeatCount, SVGSMILElement* resultElement) = 0;
+    virtual void calculateAnimatedValue(float percent, unsigned repeatCount) = 0;
     virtual Optional<float> calculateDistance(const String& /*fromString*/, const String& /*toString*/) = 0;
 
     void currentValuesForValuesAnimation(float percent, float& effectivePercent, String& from, String& to);
     void calculateKeyTimesForCalcModePaced();
     float calculatePercentFromKeyPoints(float percent) const;
