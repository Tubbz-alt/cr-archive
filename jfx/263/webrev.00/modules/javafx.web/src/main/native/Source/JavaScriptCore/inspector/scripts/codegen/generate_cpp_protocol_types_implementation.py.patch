diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_protocol_types_implementation.py b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_protocol_types_implementation.py
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_protocol_types_implementation.py
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/scripts/codegen/generate_cpp_protocol_types_implementation.py
@@ -211,13 +211,11 @@
         should_count_properties = not Generator.type_has_open_fields(object_declaration.type)
         lines = []
 
         lines.append('void BindingTraits<%s>::assertValueHasExpectedType(JSON::Value* value)' % (CppGenerator.cpp_protocol_type_for_type(object_declaration.type)))
         lines.append("""{
-#if ASSERT_DISABLED
-    UNUSED_PARAM(value);
-#else
+#if ASSERT_ENABLED
     ASSERT_ARG(value, value);
     RefPtr<JSON::Object> object;
     bool castSucceeded = value->asObject(object);
     ASSERT_UNUSED(castSucceeded, castSucceeded);""")
         for type_member in required_members:
@@ -253,27 +251,29 @@
             lines.append('    }')
 
         if should_count_properties:
             lines.append('    if (foundPropertiesCount != object->size())')
             lines.append('        FATAL("Unexpected properties in object: %s\\n", object->toJSONString().ascii().data());')
-        lines.append('#endif // !ASSERT_DISABLED')
+        lines.append('#else // ASSERT_ENABLED')
+        lines.append('    UNUSED_PARAM(value);')
+        lines.append('#endif // ASSERT_ENABLED')
         lines.append('}')
         return '\n'.join(lines)
 
     def _generate_assertion_for_enum(self, enum_member, object_declaration):
         lines = []
         lines.append('void %s(JSON::Value* value)' % CppGenerator.cpp_assertion_method_for_type_member(enum_member, object_declaration))
         lines.append('{')
-        lines.append('#if ASSERT_DISABLED')
-        lines.append('    UNUSED_PARAM(value);')
-        lines.append('#else')
+        lines.append('#if ASSERT_ENABLED')
         lines.append('    ASSERT_ARG(value, value);')
         lines.append('    String result;')
         lines.append('    bool castSucceeded = value->asString(result);')
         lines.append('    ASSERT(castSucceeded);')
 
         assert_condition = ' || '.join(['result == "%s"' % enum_value for enum_value in enum_member.type.enum_values()])
         lines.append('    ASSERT(%s);' % assert_condition)
-        lines.append('#endif // !ASSERT_DISABLED')
+        lines.append('#else // ASSERT_ENABLED')
+        lines.append('    UNUSED_PARAM(value);')
+        lines.append('#endif // ASSERT_ENABLED')
         lines.append('}')
 
         return '\n'.join(lines)
