diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/U2fCommandConstructor.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/U2fCommandConstructor.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/U2fCommandConstructor.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/fido/U2fCommandConstructor.cpp
@@ -101,11 +101,12 @@
 Optional<Vector<uint8_t>> convertToU2fRegisterCommand(const Vector<uint8_t>& clientDataHash, const PublicKeyCredentialCreationOptions& request)
 {
     if (!isConvertibleToU2fRegisterCommand(request))
         return WTF::nullopt;
 
-    return constructU2fRegisterCommand(produceRpIdHash(request.rp.id), clientDataHash);
+    auto appId = processGoogleLegacyAppIdSupportExtension(request.extensions);
+    return constructU2fRegisterCommand(produceRpIdHash(!appId ? request.rp.id : appId), clientDataHash);
 }
 
 Optional<Vector<uint8_t>> convertToU2fCheckOnlySignCommand(const Vector<uint8_t>& clientDataHash, const PublicKeyCredentialCreationOptions& request, const PublicKeyCredentialDescriptor& keyHandle)
 {
     if (keyHandle.type != PublicKeyCredentialType::PublicKey)
@@ -128,8 +129,17 @@
 Vector<uint8_t> constructBogusU2fRegistrationCommand()
 {
     return constructU2fRegisterCommand(convertBytesToVector(kBogusAppParam, sizeof(kBogusAppParam)), convertBytesToVector(kBogusChallenge, sizeof(kBogusChallenge)));
 }
 
+String processGoogleLegacyAppIdSupportExtension(const Optional<AuthenticationExtensionsClientInputs>& extensions)
+{
+    // AuthenticatorCoordinator::create should always set it.
+    ASSERT(!!extensions);
+    if (!extensions->googleLegacyAppidSupport)
+        return String();
+    return "https://www.gstatic.com/securitykey/origins.json"_s;
+}
+
 } // namespace fido
 
 #endif // ENABLE(WEB_AUTHN)
