diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationObserver.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationObserver.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationObserver.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/MutationObserver.h
@@ -38,22 +38,23 @@
 #include <wtf/IsoMalloc.h>
 #include <wtf/Vector.h>
 
 namespace WebCore {
 
+class Document;
 class HTMLSlotElement;
 class MutationCallback;
 class MutationObserverRegistration;
 class MutationRecord;
 class Node;
+class WindowEventLoop;
 
 using MutationObserverOptions = unsigned char;
 using MutationRecordDeliveryOptions = unsigned char;
 
 class MutationObserver final : public RefCounted<MutationObserver> {
     WTF_MAKE_ISO_ALLOCATED(MutationObserver);
-    friend class MutationObserverMicrotask;
 public:
     enum MutationType {
         ChildList = 1 << 0,
         Attributes = 1 << 1,
         CharacterData = 1 << 2,
@@ -95,24 +96,25 @@
     void disconnect();
 
     void observationStarted(MutationObserverRegistration&);
     void observationEnded(MutationObserverRegistration&);
     void enqueueMutationRecord(Ref<MutationRecord>&&);
-    void setHasTransientRegistration();
+    void setHasTransientRegistration(Document&);
     bool canDeliver();
 
     HashSet<Node*> observedNodes() const;
 
     MutationCallback& callback() const { return m_callback.get(); }
 
     static void enqueueSlotChangeEvent(HTMLSlotElement&);
 
+    static void notifyMutationObservers(WindowEventLoop&);
+
 private:
     explicit MutationObserver(Ref<MutationCallback>&&);
     void deliver();
 
-    static void notifyMutationObservers();
     static bool validateOptions(MutationObserverOptions);
 
     Ref<MutationCallback> m_callback;
     Vector<Ref<MutationRecord>> m_records;
     HashSet<GCReachableRef<Node>> m_pendingTargets;
