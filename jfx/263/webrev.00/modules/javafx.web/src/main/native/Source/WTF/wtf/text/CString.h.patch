diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/CString.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/CString.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/CString.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/CString.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2003-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2003-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -30,13 +30,16 @@
 #include <wtf/Ref.h>
 #include <wtf/RefCounted.h>
 
 namespace WTF {
 
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(CStringBuffer);
+
 // CStringBuffer is the ref-counted storage class for the characters in a CString.
 // The data is implicitly allocated 1 character longer than length(), as it is zero-terminated.
 class CStringBuffer final : public RefCounted<CStringBuffer> {
+    WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(CStringBuffer);
 public:
     const char* data() { return mutableData(); }
     size_t length() const { return m_length; }
 
 private:
@@ -94,11 +97,11 @@
 WTF_EXPORT_PRIVATE bool operator<(const CString& a, const CString& b);
 
 struct CStringHash {
     static unsigned hash(const CString& string) { return string.hash(); }
     WTF_EXPORT_PRIVATE static bool equal(const CString& a, const CString& b);
-    static const bool safeToCompareToEmptyOrDeleted = true;
+    static constexpr bool safeToCompareToEmptyOrDeleted = true;
 };
 
 template<typename T> struct DefaultHash;
 template<> struct DefaultHash<CString> {
     typedef CStringHash Hash;
