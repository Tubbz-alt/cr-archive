diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/StyleCachedImage.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/StyleCachedImage.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/StyleCachedImage.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/StyleCachedImage.cpp
@@ -22,32 +22,30 @@
  */
 
 #include "config.h"
 #include "StyleCachedImage.h"
 
-#include "CSSCursorImageValue.h"
-#include "CSSImageSetValue.h"
 #include "CSSImageValue.h"
 #include "CachedImage.h"
 #include "RenderElement.h"
 #include "RenderView.h"
 
 namespace WebCore {
 
-StyleCachedImage::StyleCachedImage(CSSValue& cssValue)
-    : m_cssValue(cssValue)
+Ref<StyleCachedImage> StyleCachedImage::create(CSSImageValue& cssValue, float scaleFactor)
 {
-    ASSERT(is<CSSImageValue>(m_cssValue) || is<CSSImageSetValue>(m_cssValue) || is<CSSCursorImageValue>(m_cssValue));
+    return adoptRef(*new StyleCachedImage(cssValue, scaleFactor));
+}
 
+StyleCachedImage::StyleCachedImage(CSSImageValue& cssValue, float scaleFactor)
+    : m_cssValue(cssValue)
+    , m_scaleFactor(scaleFactor)
+{
     m_isCachedImage = true;
-
-    // CSSImageValue doesn't get invalidated so we can grab the CachedImage immediately if it exists.
-    if (is<CSSImageValue>(m_cssValue)) {
-        m_cachedImage = downcast<CSSImageValue>(m_cssValue.get()).cachedImage();
-        if (m_cachedImage)
-            m_isPending = false;
-    }
+    m_cachedImage = m_cssValue->cachedImage();
+    if (m_cachedImage)
+        m_isPending = false;
 }
 
 StyleCachedImage::~StyleCachedImage() = default;
 
 bool StyleCachedImage::operator==(const StyleImage& other) const
@@ -66,45 +64,18 @@
     return false;
 }
 
 URL StyleCachedImage::imageURL()
 {
-    if (is<CSSImageValue>(m_cssValue))
-        return downcast<CSSImageValue>(m_cssValue.get()).url();
-
-    if (is<CSSImageSetValue>(m_cssValue))
-        return downcast<CSSImageSetValue>(m_cssValue.get()).bestImageForScaleFactorURL();
-
-    if (is<CSSCursorImageValue>(m_cssValue.get()))
-        return downcast<CSSCursorImageValue>(m_cssValue.get()).imageURL();
-
-    ASSERT_NOT_REACHED();
-    return { };
+    return m_cssValue->url();
 }
 
 void StyleCachedImage::load(CachedResourceLoader& loader, const ResourceLoaderOptions& options)
 {
     ASSERT(m_isPending);
     m_isPending = false;
-
-    if (is<CSSImageValue>(m_cssValue)) {
-        auto& imageValue = downcast<CSSImageValue>(m_cssValue.get());
-        m_cachedImage = imageValue.loadImage(loader, options);
-        return;
-    }
-
-    if (is<CSSImageSetValue>(m_cssValue)) {
-        auto& imageSetValue = downcast<CSSImageSetValue>(m_cssValue.get());
-        std::tie(m_cachedImage, m_scaleFactor) = imageSetValue.loadBestFitImage(loader, options);
-        return;
-    }
-
-    if (is<CSSCursorImageValue>(m_cssValue.get())) {
-        auto& cursorValue = downcast<CSSCursorImageValue>(m_cssValue.get());
-        std::tie(m_cachedImage, m_scaleFactor) = cursorValue.loadImage(loader, options);
-        return;
-    }
+    m_cachedImage = m_cssValue->loadImage(loader, options);
 }
 
 CachedImage* StyleCachedImage::cachedImage() const
 {
     return m_cachedImage.get();
