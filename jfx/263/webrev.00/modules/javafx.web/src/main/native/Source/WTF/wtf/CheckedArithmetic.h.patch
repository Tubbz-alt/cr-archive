diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/CheckedArithmetic.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/CheckedArithmetic.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/CheckedArithmetic.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/CheckedArithmetic.h
@@ -240,26 +240,26 @@
     return true;
 }
 
 template <typename T> struct RemoveChecked {
     typedef T CleanType;
-    static const CleanType DefaultValue = 0;
+    static constexpr CleanType DefaultValue = 0;
 };
 
 template <typename T> struct RemoveChecked<Checked<T, ConditionalCrashOnOverflow>> {
     using CleanType = typename RemoveChecked<T>::CleanType;
-    static const CleanType DefaultValue = 0;
+    static constexpr CleanType DefaultValue = 0;
 };
 
 template <typename T> struct RemoveChecked<Checked<T, CrashOnOverflow>> {
     typedef typename RemoveChecked<T>::CleanType CleanType;
-    static const CleanType DefaultValue = 0;
+    static constexpr CleanType DefaultValue = 0;
 };
 
 template <typename T> struct RemoveChecked<Checked<T, RecordOverflow>> {
     typedef typename RemoveChecked<T>::CleanType CleanType;
-    static const CleanType DefaultValue = 0;
+    static constexpr CleanType DefaultValue = 0;
 };
 
 // The ResultBase and SignednessSelector are used to workaround typeof not being
 // available in MSVC
 template <typename U, typename V, bool uIsBigger = (sizeof(U) > sizeof(V)), bool sameSize = (sizeof(U) == sizeof(V))> struct ResultBase;
@@ -543,11 +543,11 @@
 
 template <class OverflowHandler, typename = std::enable_if_t<!std::is_scalar<OverflowHandler>::value>>
 inline constexpr bool observesOverflow() { return true; }
 
 template <>
-inline constexpr bool observesOverflow<AssertNoOverflow>() { return !ASSERT_DISABLED; }
+inline constexpr bool observesOverflow<AssertNoOverflow>() { return ASSERT_ENABLED; }
 
 template <typename U, typename V, typename R> static inline bool safeAdd(U lhs, V rhs, R& result)
 {
     return ArithmeticOperations<U, V, R>::add(lhs, rhs, result);
     return true;
