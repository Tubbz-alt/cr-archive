diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUErrorScopes.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUErrorScopes.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUErrorScopes.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUErrorScopes.h
@@ -27,21 +27,23 @@
 
 #if ENABLE(WEBGPU)
 
 #include "GPUError.h"
 #include "GPUErrorFilter.h"
+#include <wtf/Function.h>
 #include <wtf/Optional.h>
 #include <wtf/Ref.h>
 #include <wtf/RefCounted.h>
 #include <wtf/Vector.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 class GPUErrorScopes : public RefCounted<GPUErrorScopes> {
 public:
-    static Ref<GPUErrorScopes> create() { return adoptRef(*new GPUErrorScopes); }
+    using UncapturedErrorCallback = Function<void(GPUError&&)>;
+    static Ref<GPUErrorScopes> create(UncapturedErrorCallback&&);
 
     void pushErrorScope(GPUErrorFilter);
     Optional<GPUError> popErrorScope(String& failMessage);
 
     void generateError(const String&, GPUErrorFilter = GPUErrorFilter::Validation);
@@ -52,14 +54,17 @@
     struct ErrorScope {
         const GPUErrorFilter filter;
         Optional<GPUError> error;
     };
 
-    GPUErrorScopes() = default;
+    GPUErrorScopes(UncapturedErrorCallback&&);
+
+    UncapturedErrorCallback m_uncapturedErrorCallback;
 
     Vector<ErrorScope> m_errorScopes;
     String m_prefix;
+    unsigned m_numUncapturedErrorEventsAllowed;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(WEBGPU)
