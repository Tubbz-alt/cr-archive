diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/FormData.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/FormData.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/FormData.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/FormData.cpp
@@ -23,11 +23,10 @@
 #include "FormData.h"
 
 #include "BlobRegistryImpl.h"
 #include "BlobURL.h"
 #include "Chrome.h"
-#include "ChromeClient.h"
 #include "DOMFormData.h"
 #include "File.h"
 #include "FormDataBuilder.h"
 #include "Page.h"
 #include "SharedBuffer.h"
@@ -122,13 +121,13 @@
         formData->m_elements.uncheckedAppend(element.isolatedCopy());
 
     return formData;
 }
 
-static inline uint64_t computeLengthInBytes(const FormDataElement& element, const Function<uint64_t(const URL&)>& blobSize)
+uint64_t FormDataElement::lengthInBytes(const Function<uint64_t(const URL&)>& blobSize) const
 {
-    return switchOn(element.data,
+    return switchOn(data,
         [] (const Vector<char>& bytes) {
             return static_cast<uint64_t>(bytes.size());
         }, [] (const FormDataElement::EncodedFileData& fileData) {
             if (fileData.fileLength != BlobDataItem::toEndOfFile)
                 return static_cast<uint64_t>(fileData.fileLength);
@@ -140,21 +139,14 @@
             return blobSize(blobData.url);
         }
     );
 }
 
-uint64_t FormDataElement::lengthInBytes(BlobRegistryImpl* blobRegistry) const
-{
-    return computeLengthInBytes(*this, [&](auto& url) {
-        return blobRegistry ? blobRegistry->blobSize(url) : 0;
-    });
-}
-
-uint64_t FormDataElement::lengthInBytes(PAL::SessionID sessionID) const
+uint64_t FormDataElement::lengthInBytes() const
 {
-    return computeLengthInBytes(*this, [&](auto& url) {
-        return blobRegistry().blobSize(sessionID, url);
+    return lengthInBytes([](auto& url) {
+        return ThreadableBlobRegistry::blobSize(url);
     });
 }
 
 FormDataElement FormDataElement::isolatedCopy() const
 {
@@ -322,11 +314,11 @@
         else
             ASSERT_NOT_REACHED();
     }
 }
 
-Ref<FormData> FormData::resolveBlobReferences(BlobRegistryImpl* blobRegistry)
+Ref<FormData> FormData::resolveBlobReferences(BlobRegistryImpl* blobRegistryImpl)
 {
     // First check if any blobs needs to be resolved, or we can take the fast path.
     bool hasBlob = false;
     for (auto& element : m_elements) {
         if (WTF::holds_alternative<FormDataElement::EncodedBlobData>(element.data)) {
@@ -348,11 +340,11 @@
             [&] (const Vector<char>& bytes) {
                 newFormData->appendData(bytes.data(), bytes.size());
             }, [&] (const FormDataElement::EncodedFileData& fileData) {
                 newFormData->appendFileRange(fileData.filename, fileData.fileStart, fileData.fileLength, fileData.expectedFileModificationTime);
             }, [&] (const FormDataElement::EncodedBlobData& blobData) {
-                appendBlobResolved(blobRegistry, newFormData.get(), blobData.url);
+                appendBlobResolved(blobRegistryImpl ? blobRegistryImpl : blobRegistry().blobRegistryImpl(), newFormData.get(), blobData.url);
             }
         );
     }
     return newFormData;
 }
@@ -392,16 +384,16 @@
     ASSERT(isMainThread());
     for (auto& file : m_temporaryZipFiles)
         FileSystem::deleteFile(file);
 }
 
-uint64_t FormData::lengthInBytes(PAL::SessionID sessionID) const
+uint64_t FormData::lengthInBytes() const
 {
     if (!m_lengthInBytes) {
         uint64_t length = 0;
         for (auto& element : m_elements)
-            length += element.lengthInBytes(sessionID);
+            length += element.lengthInBytes();
         m_lengthInBytes = length;
     }
     return *m_lengthInBytes;
 }
 
