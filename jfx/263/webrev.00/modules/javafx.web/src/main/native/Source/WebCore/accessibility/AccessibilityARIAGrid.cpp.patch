diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityARIAGrid.cpp b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityARIAGrid.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityARIAGrid.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityARIAGrid.cpp
@@ -49,11 +49,11 @@
 Ref<AccessibilityARIAGrid> AccessibilityARIAGrid::create(RenderObject* renderer)
 {
     return adoptRef(*new AccessibilityARIAGrid(renderer));
 }
 
-bool AccessibilityARIAGrid::addTableCellChild(AccessibilityObject* child, HashSet<AccessibilityObject*>& appendedRows, unsigned& columnCount)
+bool AccessibilityARIAGrid::addTableCellChild(AXCoreObject* child, HashSet<AccessibilityObject*>& appendedRows, unsigned& columnCount)
 {
     if (!child || (!is<AccessibilityTableRow>(*child) && !is<AccessibilityARIAGridRow>(*child)))
         return false;
 
     auto& row = downcast<AccessibilityTableRow>(*child);
@@ -83,11 +83,11 @@
 {
     const AtomString& ariaMultiSelectable = getAttribute(HTMLNames::aria_multiselectableAttr);
     return !equalLettersIgnoringASCIICase(ariaMultiSelectable, "false");
 }
 
-void AccessibilityARIAGrid::addRowDescendant(AccessibilityObject* rowChild, HashSet<AccessibilityObject*>& appendedRows, unsigned& columnCount)
+void AccessibilityARIAGrid::addRowDescendant(AXCoreObject* rowChild, HashSet<AccessibilityObject*>& appendedRows, unsigned& columnCount)
 {
     if (!rowChild)
         return;
 
     if (!rowChild->isTableRow() || !rowChild->node()) {
