diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSXMLHttpRequestCustom.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSXMLHttpRequestCustom.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSXMLHttpRequestCustom.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSXMLHttpRequestCustom.cpp
@@ -48,14 +48,14 @@
 
     if (auto* responseDocument = wrapped().optionalResponseXML())
         visitor.addOpaqueRoot(responseDocument);
 }
 
-JSValue JSXMLHttpRequest::response(ExecState& state) const
+JSValue JSXMLHttpRequest::response(JSGlobalObject& lexicalGlobalObject) const
 {
     auto cacheResult = [&] (JSValue value) -> JSValue {
-        m_response.set(state.vm(), this, value);
+        m_response.set(lexicalGlobalObject.vm(), this, value);
         return value;
     };
 
 
     if (wrapped().responseCacheIsValid())
@@ -64,12 +64,12 @@
     auto type = wrapped().responseType();
 
     switch (type) {
     case XMLHttpRequest::ResponseType::EmptyString:
     case XMLHttpRequest::ResponseType::Text: {
-        auto scope = DECLARE_THROW_SCOPE(state.vm());
-        return cacheResult(toJS<IDLNullable<IDLUSVString>>(state, scope, wrapped().responseText()));
+        auto scope = DECLARE_THROW_SCOPE(lexicalGlobalObject.vm());
+        return cacheResult(toJS<IDLNullable<IDLUSVString>>(lexicalGlobalObject, scope, wrapped().responseText()));
     }
     default:
         break;
     }
 
@@ -82,28 +82,28 @@
     case XMLHttpRequest::ResponseType::Text:
         ASSERT_NOT_REACHED();
         return jsUndefined();
 
     case XMLHttpRequest::ResponseType::Json:
-        value = toJS<IDLJSON>(*globalObject()->globalExec(), wrapped().responseTextIgnoringResponseType());
+        value = toJS<IDLJSON>(*globalObject(), wrapped().responseTextIgnoringResponseType());
         if (!value)
             value = jsNull();
         break;
 
     case XMLHttpRequest::ResponseType::Document: {
         auto document = wrapped().responseXML();
         ASSERT(!document.hasException());
-        value = toJS<IDLInterface<Document>>(state, *globalObject(), document.releaseReturnValue());
+        value = toJS<IDLInterface<Document>>(lexicalGlobalObject, *globalObject(), document.releaseReturnValue());
         break;
     }
 
     case XMLHttpRequest::ResponseType::Blob:
-        value = toJSNewlyCreated<IDLInterface<Blob>>(state, *globalObject(), wrapped().createResponseBlob());
+        value = toJSNewlyCreated<IDLInterface<Blob>>(lexicalGlobalObject, *globalObject(), wrapped().createResponseBlob());
         break;
 
     case XMLHttpRequest::ResponseType::Arraybuffer:
-        value = toJS<IDLInterface<ArrayBuffer>>(state, *globalObject(), wrapped().createResponseArrayBuffer());
+        value = toJS<IDLInterface<ArrayBuffer>>(lexicalGlobalObject, *globalObject(), wrapped().createResponseArrayBuffer());
         break;
     }
 
     wrapped().didCacheResponse();
     return cacheResult(value);
