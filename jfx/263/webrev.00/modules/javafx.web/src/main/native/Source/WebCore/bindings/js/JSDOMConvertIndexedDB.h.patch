diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertIndexedDB.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertIndexedDB.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertIndexedDB.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertIndexedDB.h
@@ -36,35 +36,35 @@
 template<> struct JSConverter<IDLIDBKey> {
     static constexpr bool needsState = true;
     static constexpr bool needsGlobalObject = true;
 
     template <typename U>
-    static JSC::JSValue convert(JSC::ExecState& state, JSDOMGlobalObject& globalObject, U&& value)
+    static JSC::JSValue convert(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, U&& value)
     {
-        return toJS(state, globalObject, std::forward<U>(value));
+        return toJS(lexicalGlobalObject, globalObject, std::forward<U>(value));
     }
 };
 
 template<> struct JSConverter<IDLIDBKeyData> {
     static constexpr bool needsState = true;
     static constexpr bool needsGlobalObject = true;
 
     template <typename U>
-    static JSC::JSValue convert(JSC::ExecState& state, JSDOMGlobalObject& globalObject, U&& value)
+    static JSC::JSValue convert(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, U&& value)
     {
-        return toJS(&state, &globalObject, std::forward<U>(value));
+        return toJS(&lexicalGlobalObject, &globalObject, std::forward<U>(value));
     }
 };
 
 template<> struct JSConverter<IDLIDBValue> {
     static constexpr bool needsState = true;
     static constexpr bool needsGlobalObject = true;
 
     template <typename U>
-    static JSC::JSValue convert(JSC::ExecState& state, JSDOMGlobalObject& globalObject, U&& value)
+    static JSC::JSValue convert(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject, U&& value)
     {
-        return toJS(&state, &globalObject, std::forward<U>(value));
+        return toJS(&lexicalGlobalObject, &globalObject, std::forward<U>(value));
     }
 };
 
 } // namespace WebCore
 
