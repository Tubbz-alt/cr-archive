diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLReadModifyWriteExpression.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLReadModifyWriteExpression.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLReadModifyWriteExpression.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLReadModifyWriteExpression.h
@@ -58,10 +58,18 @@
         , m_oldValue(makeUniqueRef<VariableDeclaration>(location, Qualifiers(), nullptr, String(), nullptr, nullptr))
         , m_newValue(makeUniqueRef<VariableDeclaration>(location, Qualifiers(), nullptr, String(), nullptr, nullptr))
     {
     }
 
+    ReadModifyWriteExpression(CodeLocation location, UniqueRef<Expression> leftValue, UniqueRef<VariableDeclaration> oldValue, UniqueRef<VariableDeclaration> newValue)
+        : Expression(location, Kind::ReadModifyWrite)
+        , m_leftValue(WTFMove(leftValue))
+        , m_oldValue(WTFMove(oldValue))
+        , m_newValue(WTFMove(newValue))
+    {
+    }
+
 
     ~ReadModifyWriteExpression() = default;
 
     ReadModifyWriteExpression(const ReadModifyWriteExpression&) = delete;
     ReadModifyWriteExpression(ReadModifyWriteExpression&&) = default;
@@ -85,10 +93,11 @@
     {
         return makeUniqueRef<VariableReference>(VariableReference::wrap(m_newValue));
     }
 
     Expression& leftValue() { return m_leftValue; }
+    UniqueRef<Expression>& leftValueReference() { return m_leftValue; }
     VariableDeclaration& oldValue() { return m_oldValue; }
     VariableDeclaration& newValue() { return m_newValue; }
     Expression& newValueExpression()
     {
         ASSERT(m_newValueExpression);
