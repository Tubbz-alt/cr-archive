diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorTimelineAgent.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorTimelineAgent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorTimelineAgent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorTimelineAgent.h
@@ -84,34 +84,34 @@
 class InspectorTimelineAgent final : public InspectorAgentBase , public Inspector::TimelineBackendDispatcherHandler , public Inspector::ScriptDebugListener {
     WTF_MAKE_NONCOPYABLE(InspectorTimelineAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
     InspectorTimelineAgent(PageAgentContext&);
-    virtual ~InspectorTimelineAgent();
+    ~InspectorTimelineAgent() override;
 
     // InspectorAgentBase
-    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*);
-    void willDestroyFrontendAndBackend(Inspector::DisconnectReason);
+    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*) override;
+    void willDestroyFrontendAndBackend(Inspector::DisconnectReason) override;
 
     // TimelineBackendDispatcherHandler
-    void enable(ErrorString&);
-    void disable(ErrorString&);
-    void start(ErrorString&, const int* maxCallStackDepth = nullptr);
-    void stop(ErrorString&);
-    void setAutoCaptureEnabled(ErrorString&, bool);
-    void setInstruments(ErrorString&, const JSON::Array&);
+    void enable(ErrorString&) override;
+    void disable(ErrorString&) override;
+    void start(ErrorString&, const int* maxCallStackDepth = nullptr) override;
+    void stop(ErrorString&) override;
+    void setAutoCaptureEnabled(ErrorString&, bool) override;
+    void setInstruments(ErrorString&, const JSON::Array&) override;
 
     // ScriptDebugListener
-    void didParseSource(JSC::SourceID, const Script&) { }
-    void failedToParseSource(const String&, const String&, int, int, const String&) { }
-    void willRunMicrotask() { }
-    void didRunMicrotask() { }
-    void didPause(JSC::ExecState&, JSC::JSValue, JSC::JSValue) { }
-    void didContinue() { }
-    void breakpointActionLog(JSC::ExecState&, const String&) { }
-    void breakpointActionSound(int) { }
-    void breakpointActionProbe(JSC::ExecState&, const Inspector::ScriptBreakpointAction&, unsigned batchId, unsigned sampleId, JSC::JSValue result);
+    void didParseSource(JSC::SourceID, const Script&) override { }
+    void failedToParseSource(const String&, const String&, int, int, const String&) override { }
+    void willRunMicrotask() override { }
+    void didRunMicrotask() override { }
+    void didPause(JSC::JSGlobalObject*, JSC::JSValue, JSC::JSValue) override { }
+    void didContinue() override { }
+    void breakpointActionLog(JSC::JSGlobalObject*, const String&) override { }
+    void breakpointActionSound(int) override { }
+    void breakpointActionProbe(JSC::JSGlobalObject*, const Inspector::ScriptBreakpointAction&, unsigned batchId, unsigned sampleId, JSC::JSValue result) override;
 
     // InspectorInstrumentation
     void didInstallTimer(int timerId, Seconds timeout, bool singleShot, Frame*);
     void didRemoveTimer(int timerId, Frame*);
     void willFireTimer(int timerId, Frame*);
@@ -143,14 +143,12 @@
     void timeEnd(Frame&, const String&);
     void mainFrameStartedLoading();
     void mainFrameNavigated();
 
     // Console
-    void startFromConsole(JSC::ExecState*, const String& title);
-    void stopFromConsole(JSC::ExecState*, const String& title);
-
-    int id() const { return m_id; }
+    void startFromConsole(JSC::JSGlobalObject*, const String& title);
+    void stopFromConsole(JSC::JSGlobalObject*, const String& title);
 
 private:
     void startProgrammaticCapture();
     void stopProgrammaticCapture();
 
@@ -159,10 +157,11 @@
     void toggleScriptProfilerInstrument(InstrumentState);
     void toggleHeapInstrument(InstrumentState);
     void toggleCPUInstrument(InstrumentState);
     void toggleMemoryInstrument(InstrumentState);
     void toggleTimelineInstrument(InstrumentState);
+    void toggleAnimationInstrument(InstrumentState);
     void disableBreakpoints();
     void enableBreakpoints();
 
     friend class TimelineRecordStack;
 
@@ -198,22 +197,20 @@
 
     void didCompleteRecordEntry(const TimelineRecordEntry&);
     void didCompleteCurrentRecord(TimelineRecordType);
 
     void addRecordToTimeline(RefPtr<JSON::Object>&&, TimelineRecordType);
-    void clearRecordStack();
 
     void localToPageQuad(const RenderObject&, const LayoutRect&, FloatQuad*);
 
     std::unique_ptr<Inspector::TimelineFrontendDispatcher> m_frontendDispatcher;
     RefPtr<Inspector::TimelineBackendDispatcher> m_backendDispatcher;
     Page& m_inspectedPage;
 
     Vector<TimelineRecordEntry> m_recordStack;
     Vector<TimelineRecordEntry> m_pendingConsoleProfileRecords;
 
-    int m_id { 1 };
     int m_maxCallStackDepth { 5 };
 
     bool m_tracking { false };
     bool m_trackingFromFrontend { false };
     bool m_programmaticCaptureRestoreBreakpointActiveValue { false };
