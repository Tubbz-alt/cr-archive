diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessibleHyperlink.cpp b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessibleHyperlink.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessibleHyperlink.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessibleHyperlink.cpp
@@ -96,11 +96,11 @@
 
     if (!ATK_IS_ACTION(accessibleHyperlink->priv->hyperlinkImpl))
         return nullptr;
 
     auto& coreObject = webkitAccessibleGetAccessibilityObject(accessibleHyperlink->priv->hyperlinkImpl);
-    accessibleHyperlink->priv->actionKeyBinding = coreObject.accessKey().string().utf8();
+    accessibleHyperlink->priv->actionKeyBinding = coreObject.accessKey().utf8();
     return accessibleHyperlink->priv->actionKeyBinding.data();
 }
 
 static const gchar* webkitAccessibleHyperlinkActionGetName(AtkAction* action, gint)
 {
@@ -156,19 +156,19 @@
     // This is going to be the actual length in most of the cases
     int baseLength = TextIterator::rangeLength(range, true);
 
     // Check whether the current hyperlink belongs to a list item.
     // If so, we need to consider the length of the item's marker
-    AccessibilityObject* parent = obj.parentObjectUnignored();
+    AXCoreObject* parent = obj.parentObjectUnignored();
     if (!parent || !parent->isAccessibilityRenderObject() || !parent->isListItem())
         return baseLength;
 
     // Even if we don't expose list markers to Assistive
     // Technologies, we need to have a way to measure their length
     // for those cases when it's needed to take it into account
     // separately (as in getAccessibilityObjectForOffset)
-    AccessibilityObject* markerObj = parent->firstChild();
+    AXCoreObject* markerObj = parent->firstChild();
     if (!markerObj)
         return baseLength;
 
     RenderObject* renderer = markerObj->renderer();
     if (!is<RenderListMarker>(renderer))
@@ -182,11 +182,11 @@
 {
     auto* accessibleHyperlink = WEBKIT_ACCESSIBLE_HYPERLINK(link);
     returnValIfWebKitAccessibleIsInvalid(accessibleHyperlink->priv->hyperlinkImpl, 0);
 
     auto& coreObject = webkitAccessibleGetAccessibilityObject(accessibleHyperlink->priv->hyperlinkImpl);
-    AccessibilityObject* parentUnignored = coreObject.parentObjectUnignored();
+    AXCoreObject* parentUnignored = coreObject.parentObjectUnignored();
     if (!parentUnignored)
         return 0;
 
     Node* node = coreObject.node();
     if (!node)
@@ -204,11 +204,11 @@
 {
     auto* accessibleHyperlink = WEBKIT_ACCESSIBLE_HYPERLINK(link);
     returnValIfWebKitAccessibleIsInvalid(accessibleHyperlink->priv->hyperlinkImpl, 0);
 
     auto& coreObject = webkitAccessibleGetAccessibilityObject(accessibleHyperlink->priv->hyperlinkImpl);
-    AccessibilityObject* parentUnignored = coreObject.parentObjectUnignored();
+    AXCoreObject* parentUnignored = coreObject.parentObjectUnignored();
     if (!parentUnignored)
         return 0;
 
     Node* node = coreObject.node();
     if (!node)
