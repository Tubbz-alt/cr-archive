diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLJITFinalizer.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLJITFinalizer.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLJITFinalizer.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLJITFinalizer.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -69,28 +69,33 @@
     return finalizeCommon();
 }
 
 bool JITFinalizer::finalizeCommon()
 {
+    CodeBlock* codeBlock = m_plan.codeBlock();
     bool dumpDisassembly = shouldDumpDisassembly() || Options::asyncDisassembly();
 
     MacroAssemblerCodeRef<JSEntryPtrTag> b3CodeRef =
         FINALIZE_CODE_IF(dumpDisassembly, *b3CodeLinkBuffer, JSEntryPtrTag,
-            "FTL B3 code for %s", toCString(CodeBlockWithJITType(m_plan.codeBlock(), JITType::FTLJIT)).data());
+            "FTL B3 code for %s", toCString(CodeBlockWithJITType(codeBlock, JITType::FTLJIT)).data());
 
     MacroAssemblerCodeRef<JSEntryPtrTag> arityCheckCodeRef = entrypointLinkBuffer
         ? FINALIZE_CODE_IF(dumpDisassembly, *entrypointLinkBuffer, JSEntryPtrTag,
-            "FTL entrypoint thunk for %s with B3 generated code at %p", toCString(CodeBlockWithJITType(m_plan.codeBlock(), JITType::FTLJIT)).data(), function)
+            "FTL entrypoint thunk for %s with B3 generated code at %p", toCString(CodeBlockWithJITType(codeBlock, JITType::FTLJIT)).data(), function)
         : MacroAssemblerCodeRef<JSEntryPtrTag>::createSelfManagedCodeRef(b3CodeRef.code());
 
     jitCode->initializeB3Code(b3CodeRef);
     jitCode->initializeArityCheckEntrypoint(arityCheckCodeRef);
 
-    m_plan.codeBlock()->setJITCode(*jitCode);
+    codeBlock->setJITCode(*jitCode);
 
     if (UNLIKELY(m_plan.compilation()))
-        m_plan.vm()->m_perBytecodeProfiler->addCompilation(m_plan.codeBlock(), *m_plan.compilation());
+        m_plan.vm()->m_perBytecodeProfiler->addCompilation(codeBlock, *m_plan.compilation());
+
+    // The codeBlock is now responsible for keeping many things alive (e.g. frozen values)
+    // that were previously kept alive by the plan.
+    m_plan.vm()->heap.writeBarrier(codeBlock);
 
     return true;
 }
 
 } } // namespace JSC::FTL
