diff a/modules/javafx.web/src/main/native/Tools/Scripts/build-webkit b/modules/javafx.web/src/main/native/Tools/Scripts/build-webkit
--- a/modules/javafx.web/src/main/native/Tools/Scripts/build-webkit
+++ b/modules/javafx.web/src/main/native/Tools/Scripts/build-webkit
@@ -42,10 +42,11 @@
 use lib $FindBin::Bin;
 use webkitdirs;
 use List::Util qw(first);
 use webkitperl::FeatureList qw(getFeatureOptionList);
 use POSIX;
+use Text::ParseWords;
 
 sub writeCongrats();
 
 checkRequiredSystemConfig();
 setConfiguration();
@@ -80,11 +81,11 @@
 my $useCCache = -1;
 
 my @features = getFeatureOptionList();
 
 # Additional environment parameters
-push @ARGV, split(/ /, $ENV{'BUILD_WEBKIT_ARGS'}) if ($ENV{'BUILD_WEBKIT_ARGS'});
+push @ARGV, parse_line('\s+', 0, $ENV{'BUILD_WEBKIT_ARGS'}) if ($ENV{'BUILD_WEBKIT_ARGS'});
 
 # Initialize values from defaults
 foreach (@ARGV) {
     if ($_ eq '--minimal') {
         $minimal = 1;
@@ -117,10 +118,11 @@
   --analyze                         Enable static anaylsis (iOS and Mac only)
   --lto-mode=<mode>                 Set Link Time Optimization mode (full, thin, or none) (LLVM only)
   --[no-]xcbuild                    Force the use of XCBuild or not
 
   --java                            Build the Open JavaFX port
+  --ftw                             Build the FTW Windows port
   --gtk                             Build the GTK+ port
   --wpe                             Build the WPE port
   --wincairo                        Build using Cairo (rather than CoreGraphics) on Windows
   --playstation                     Build the PlayStation port
 
@@ -188,11 +190,11 @@
 
 # Check that all the project directories are there.
 my @projects = ("Source/JavaScriptCore", "Source/WebCore", "Source/WebKitLegacy");
 
 # Build WTF as a separate static library on ports which support it.
-splice @projects, 0, 0, "Source/WTF" if isAppleWebKit() or isWinCairo();
+splice @projects, 0, 0, "Source/WTF" if isAppleWebKit() or isWinCairo() or isFTW();
 
 splice @projects, 0, 0, "Source/bmalloc" if isAppleCocoaWebKit();
 
 # Ports using CMake will check if directories exist in the CMake configuration.
 if (!isCMakeBuild()) {
@@ -201,11 +203,11 @@
             die "Error: No $dir directory found. Please do a fresh checkout.\n";
         }
     }
 }
 
-if ((isAppleWebKit() || isWinCairo() || isPlayStation()) && !-d "WebKitLibraries") {
+if ((isAppleWebKit() || isWinCairo() || isPlayStation() || isFTW()) && !-d "WebKitLibraries") {
     die "Error: No WebKitLibraries directory found. Please do a fresh checkout.\n";
 }
 
 my @options = ();
 
@@ -260,10 +262,14 @@
         push @copyLibrariesArgs, productDir();
         print(join(" ", @copyLibrariesArgs) . "\n");
         (system(@copyLibrariesArgs) == 0) or die;
     }
 
+    if (isAppleMacWebKit()) {
+        push @projects, ("Tools/lldb/lldbWebKitTester");
+    }
+
     # Build Tools needed for Apple ports
     push @projects, ("Tools/DumpRenderTree", "Tools/WebKitTestRunner", "Source/ThirdParty/gtest", "Tools/TestWebKitAPI");
 
 } elsif (isWinCairo() && !$skipLibraryUpdate) {
     (system("python Tools/Scripts/update-webkit-wincairo-libs.py") == 0) or die;
@@ -305,11 +311,11 @@
 
     buildCMakeProjectOrExit($clean, $prefixPath, $makeArgs, @featureArgs, @cmakeArgs);
 }
 
 my $baseProductDir = baseProductDir();
-if (isAppleWinWebKit() || isWinCairo() || isPlayStation()) {
+if (isAppleWinWebKit() || isWinCairo() || isPlayStation() || isFTW()) {
     my @featureArgs = cmakeArgsFromFeatures(@features, !$noExperimentalFeatures);
     removeCMakeCache(@featureArgs);
 
     chdirWebKit();
     if (exitStatus(generateBuildSystemFromCMakeProject($prefixPath, @featureArgs, @cmakeArgs))) {
@@ -325,11 +331,11 @@
     } else {
         $result = buildVisualStudioProject(File::Spec->catfile($baseProductDir, configuration(), "WebKit.sln"), $clean);
     }
     if (exitStatus($result)) {
         my $scriptDir = relativeScriptsDir();
-        if (isAppleWinWebKit() || isWinCairo()) {
+        if (isAppleWinWebKit() || isWinCairo() || isFTW()) {
             print "\n\n===== BUILD FAILED ======\n\n";
             print "Please ensure you have run $scriptDir/update-webkit to install dependencies.\n\n";
             print "You can view build errors by checking the BuildLog.htm files located at:\n$baseProductDir/obj/<project>/<config>.\n";
         }
         exit exitStatus($result);
