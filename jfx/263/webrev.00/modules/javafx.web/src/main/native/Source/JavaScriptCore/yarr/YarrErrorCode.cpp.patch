diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/yarr/YarrErrorCode.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/yarr/YarrErrorCode.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/yarr/YarrErrorCode.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/yarr/YarrErrorCode.cpp
@@ -33,62 +33,70 @@
 const char* errorMessage(ErrorCode error)
 {
 #define REGEXP_ERROR_PREFIX "Invalid regular expression: "
     // The order of this array must match the ErrorCode enum.
     static const char* errorMessages[] = {
-        nullptr,                                                              // NoError
-        REGEXP_ERROR_PREFIX "regular expression too large",                   // PatternTooLarge
-        REGEXP_ERROR_PREFIX "numbers out of order in {} quantifier",          // QuantifierOutOfOrder
-        REGEXP_ERROR_PREFIX "nothing to repeat",                              // QuantifierWithoutAtom
-        REGEXP_ERROR_PREFIX "number too large in {} quantifier",              // QuantifierTooLarge
-        REGEXP_ERROR_PREFIX "missing )",                                      // MissingParentheses
-        REGEXP_ERROR_PREFIX "unmatched parentheses",                          // ParenthesesUnmatched
-        REGEXP_ERROR_PREFIX "unrecognized character after (?",                // ParenthesesTypeInvalid
-        REGEXP_ERROR_PREFIX "invalid group specifier name",                   // InvalidGroupName
-        REGEXP_ERROR_PREFIX "duplicate group specifier name",                 // DuplicateGroupName
-        REGEXP_ERROR_PREFIX "missing terminating ] for character class",      // CharacterClassUnmatched
-        REGEXP_ERROR_PREFIX "range out of order in character class",          // CharacterClassOutOfOrder
-        REGEXP_ERROR_PREFIX "\\ at end of pattern",                           // EscapeUnterminated
-        REGEXP_ERROR_PREFIX "invalid unicode {} escape",                      // InvalidUnicodeEscape
-        REGEXP_ERROR_PREFIX "invalid backreference for unicode pattern",      // InvalidBackreference
-        REGEXP_ERROR_PREFIX "invalid escaped character for unicode pattern",  // InvalidIdentityEscape
-        REGEXP_ERROR_PREFIX "invalid property expression",                    // InvalidUnicodePropertyExpression
-        REGEXP_ERROR_PREFIX "too many nested disjunctions",                   // TooManyDisjunctions
-        REGEXP_ERROR_PREFIX "pattern exceeds string length limits",           // OffsetTooLarge
-        REGEXP_ERROR_PREFIX "invalid flags"                                   // InvalidRegularExpressionFlags
+        nullptr,                                                                    // NoError
+        REGEXP_ERROR_PREFIX "regular expression too large",                         // PatternTooLarge
+        REGEXP_ERROR_PREFIX "numbers out of order in {} quantifier",                // QuantifierOutOfOrder
+        REGEXP_ERROR_PREFIX "nothing to repeat",                                    // QuantifierWithoutAtom
+        REGEXP_ERROR_PREFIX "number too large in {} quantifier",                    // QuantifierTooLarge
+        REGEXP_ERROR_PREFIX "incomplete {} quantifier for Unicode pattern",         // QuantifierIncomplete
+        REGEXP_ERROR_PREFIX "missing )",                                            // MissingParentheses
+        REGEXP_ERROR_PREFIX "unmatched ] or } bracket for Unicode pattern",         // BracketUnmatched
+        REGEXP_ERROR_PREFIX "unmatched parentheses",                                // ParenthesesUnmatched
+        REGEXP_ERROR_PREFIX "unrecognized character after (?",                      // ParenthesesTypeInvalid
+        REGEXP_ERROR_PREFIX "invalid group specifier name",                         // InvalidGroupName
+        REGEXP_ERROR_PREFIX "duplicate group specifier name",                       // DuplicateGroupName
+        REGEXP_ERROR_PREFIX "missing terminating ] for character class",            // CharacterClassUnmatched
+        REGEXP_ERROR_PREFIX "range out of order in character class",                // CharacterClassRangeOutOfOrder
+        REGEXP_ERROR_PREFIX "invalid range in character class for Unicode pattern", // CharacterClassRangeInvalid
+        REGEXP_ERROR_PREFIX "\\ at end of pattern",                                 // EscapeUnterminated
+        REGEXP_ERROR_PREFIX "invalid Unicode {} escape",                            // InvalidUnicodeEscape
+        REGEXP_ERROR_PREFIX "invalid backreference for Unicode pattern",            // InvalidBackreference
+        REGEXP_ERROR_PREFIX "invalid escaped character for Unicode pattern",        // InvalidIdentityEscape
+        REGEXP_ERROR_PREFIX "invalid \\c escape for Unicode pattern",               // InvalidControlLetterEscape
+        REGEXP_ERROR_PREFIX "invalid property expression",                          // InvalidUnicodePropertyExpression
+        REGEXP_ERROR_PREFIX "too many nested disjunctions",                         // TooManyDisjunctions
+        REGEXP_ERROR_PREFIX "pattern exceeds string length limits",                 // OffsetTooLarge
+        REGEXP_ERROR_PREFIX "invalid flags"                                         // InvalidRegularExpressionFlags
     };
 
     return errorMessages[static_cast<unsigned>(error)];
 }
 
-JSObject* errorToThrow(ExecState* exec, ErrorCode error)
+JSObject* errorToThrow(JSGlobalObject* globalObject, ErrorCode error)
 {
     switch (error) {
     case ErrorCode::NoError:
         ASSERT_NOT_REACHED();
         return nullptr;
     case ErrorCode::PatternTooLarge:
     case ErrorCode::QuantifierOutOfOrder:
     case ErrorCode::QuantifierWithoutAtom:
     case ErrorCode::QuantifierTooLarge:
+    case ErrorCode::QuantifierIncomplete:
     case ErrorCode::MissingParentheses:
+    case ErrorCode::BracketUnmatched:
     case ErrorCode::ParenthesesUnmatched:
     case ErrorCode::ParenthesesTypeInvalid:
     case ErrorCode::InvalidGroupName:
     case ErrorCode::DuplicateGroupName:
     case ErrorCode::CharacterClassUnmatched:
-    case ErrorCode::CharacterClassOutOfOrder:
+    case ErrorCode::CharacterClassRangeOutOfOrder:
+    case ErrorCode::CharacterClassRangeInvalid:
     case ErrorCode::EscapeUnterminated:
     case ErrorCode::InvalidUnicodeEscape:
     case ErrorCode::InvalidBackreference:
     case ErrorCode::InvalidIdentityEscape:
+    case ErrorCode::InvalidControlLetterEscape:
     case ErrorCode::InvalidUnicodePropertyExpression:
     case ErrorCode::OffsetTooLarge:
     case ErrorCode::InvalidRegularExpressionFlags:
-        return createSyntaxError(exec, errorMessage(error));
+        return createSyntaxError(globalObject, errorMessage(error));
     case ErrorCode::TooManyDisjunctions:
-        return createOutOfMemoryError(exec, errorMessage(error));
+        return createOutOfMemoryError(globalObject, errorMessage(error));
     }
 
     ASSERT_NOT_REACHED();
     return nullptr;
 }
