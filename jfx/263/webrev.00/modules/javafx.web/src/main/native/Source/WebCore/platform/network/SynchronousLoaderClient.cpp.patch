diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/SynchronousLoaderClient.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/SynchronousLoaderClient.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/SynchronousLoaderClient.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/SynchronousLoaderClient.cpp
@@ -31,10 +31,13 @@
 #include "ResourceRequest.h"
 #include <wtf/CompletionHandler.h>
 
 namespace WebCore {
 
+SynchronousLoaderClient::SynchronousLoaderClient()
+    : m_messageQueue(SynchronousLoaderMessageQueue::create()) { }
+
 SynchronousLoaderClient::~SynchronousLoaderClient() = default;
 
 void SynchronousLoaderClient::willSendRequestAsync(ResourceHandle* handle, ResourceRequest&& request, ResourceResponse&&, CompletionHandler<void(ResourceRequest&&)>&& completionHandler)
 {
     // FIXME: This needs to be fixed to follow the redirect correctly even for cross-domain requests.
@@ -71,20 +74,32 @@
 void SynchronousLoaderClient::didReceiveData(ResourceHandle*, const char* data, unsigned length, int /*encodedDataLength*/)
 {
     m_data.append(data, length);
 }
 
-void SynchronousLoaderClient::didFinishLoading(ResourceHandle*)
+void SynchronousLoaderClient::didFinishLoading(ResourceHandle* handle)
 {
-    m_messageQueue.kill();
+    m_messageQueue->kill();
+#if PLATFORM(COCOA)
+    if (handle)
+        handle->releaseDelegate();
+#else
+    UNUSED_PARAM(handle);
+#endif
 }
 
-void SynchronousLoaderClient::didFail(ResourceHandle*, const ResourceError& error)
+void SynchronousLoaderClient::didFail(ResourceHandle* handle, const ResourceError& error)
 {
     ASSERT(m_error.isNull());
 
     m_error = error;
 
-    m_messageQueue.kill();
+    m_messageQueue->kill();
+#if PLATFORM(COCOA)
+    if (handle)
+        handle->releaseDelegate();
+#else
+    UNUSED_PARAM(handle);
+#endif
 }
 
 }
