diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuffer.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuffer.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuffer.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuffer.h
@@ -29,28 +29,32 @@
 #pragma once
 
 #include <limits>
 #include <unicode/utypes.h>
 #include <wtf/Assertions.h>
+#include <wtf/DebugHeap.h>
 #include <wtf/MallocPtr.h>
+#include <wtf/Noncopyable.h>
 
 namespace WTF {
 
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(StringBuffer);
+
 template <typename CharType>
 class StringBuffer {
     WTF_MAKE_NONCOPYABLE(StringBuffer);
     WTF_MAKE_FAST_ALLOCATED;
 public:
     explicit StringBuffer(unsigned length)
         : m_length(length)
-        , m_data(m_length ? static_cast<CharType*>(fastMalloc((Checked<size_t>(m_length) * sizeof(CharType)).unsafeGet())) : nullptr)
+        , m_data(m_length ? static_cast<CharType*>(StringBufferMalloc::malloc((Checked<size_t>(m_length) * sizeof(CharType)).unsafeGet())) : nullptr)
     {
     }
 
     ~StringBuffer()
     {
-        fastFree(m_data);
+        StringBufferMalloc::free(m_data);
     }
 
     void shrink(unsigned newLength)
     {
         ASSERT(newLength <= m_length);
@@ -60,25 +64,25 @@
     void resize(unsigned newLength)
     {
         if (newLength > m_length) {
             if (newLength > std::numeric_limits<unsigned>::max() / sizeof(UChar))
                 CRASH();
-            m_data = static_cast<UChar*>(fastRealloc(m_data, newLength * sizeof(UChar)));
+            m_data = static_cast<UChar*>(StringBufferMalloc::realloc(m_data, newLength * sizeof(UChar)));
         }
         m_length = newLength;
     }
 
     unsigned length() const { return m_length; }
     CharType* characters() { return m_data; }
 
     CharType& operator[](unsigned i) { ASSERT_WITH_SECURITY_IMPLICATION(i < m_length); return m_data[i]; }
 
-    MallocPtr<CharType> release()
+    MallocPtr<CharType, StringBufferMalloc> release()
     {
         CharType* data = m_data;
         m_data = 0;
-        return adoptMallocPtr(data);
+        return adoptMallocPtr<CharType, StringBufferMalloc>(data);
     }
 
 private:
     unsigned m_length;
     CharType* m_data;
