diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/EditorClientJava.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/EditorClientJava.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/EditorClientJava.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/EditorClientJava.cpp
@@ -457,11 +457,11 @@
         // later through a setInputMethodState() call. The
         // endComposition call will generate an InputMethodEvent with
         // committed text which will be ignored in
         // JWebPane.processInputMethodEvent().
         frame->editor().cancelComposition();
-        setInputMethodState(false);
+        setInputMethodState(nullptr);
     }
 }
 
 void EditorClientJava::updateEditorStateAfterLayoutIfEditabilityChanged() {
     notImplemented();
@@ -594,11 +594,11 @@
 {
     notImplemented();
     return true;
 }
 
-void EditorClientJava::setInputMethodState(bool enabled)
+void EditorClientJava::setInputMethodState(Element* element)
 {
     JNIEnv* env = WTF::GetJavaEnv();
 
     static jmethodID midSetInputMethodState = env->GetMethodID(
         PG_GetWebPageClass(env),
@@ -607,11 +607,11 @@
     ASSERT(midSetInputMethodState);
 
     env->CallVoidMethod(
         m_webPage,
         midSetInputMethodState,
-        bool_to_jbool(enabled));
+        bool_to_jbool(element && element->shouldUseInputMethod()));
     WTF::CheckAndClearException(env);
 }
 
 void EditorClientJava::handleInputMethodKeydown(KeyboardEvent&)
 {
