diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/ApplePaySession.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/ApplePaySession.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/ApplePaySession.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/ApplePaySession.cpp
@@ -26,10 +26,11 @@
 #include "config.h"
 #include "ApplePaySession.h"
 
 #if ENABLE(APPLE_PAY)
 
+#include "ApplePayCancelEvent.h"
 #include "ApplePayLineItem.h"
 #include "ApplePayPaymentAuthorizationResult.h"
 #include "ApplePayPaymentAuthorizedEvent.h"
 #include "ApplePayPaymentMethodSelectedEvent.h"
 #include "ApplePayPaymentMethodUpdate.h"
@@ -54,16 +55,25 @@
 #include "PaymentAuthorizationStatus.h"
 #include "PaymentContact.h"
 #include "PaymentCoordinator.h"
 #include "PaymentMerchantSession.h"
 #include "PaymentMethod.h"
+#include "PaymentMethodUpdate.h"
 #include "PaymentRequestValidator.h"
 #include "SecurityOrigin.h"
 #include "Settings.h"
 #include "UserGestureIndicator.h"
 #include <wtf/IsoMallocInlines.h>
 
+#if USE(APPLE_INTERNAL_SDK)
+#include <WebKitAdditions/ApplePaySessionAdditions.cpp>
+#else
+namespace WebCore {
+static void finishConverting(PaymentMethodUpdate&, ApplePayPaymentMethodUpdate&&) { }
+}
+#endif
+
 namespace WebCore {
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(ApplePaySession);
 
 // The amount follows the regular expression -?[0-9]+(\.[0-9][0-9])?.
@@ -136,16 +146,17 @@
 static ExceptionOr<ApplePaySessionPaymentRequest::LineItem> convertAndValidateTotal(ApplePayLineItem&& lineItem)
 {
     if (!validateAmount(lineItem.amount))
         return Exception { TypeError, makeString("\"" + lineItem.amount, "\" is not a valid amount.") };
 
-    ApplePaySessionPaymentRequest::LineItem result;
-    result.amount = lineItem.amount;
-    result.type = lineItem.type;
-    result.label = lineItem.label;
+    ApplePaySessionPaymentRequest::LineItem total { lineItem.type, lineItem.amount, lineItem.label };
 
-    return WTFMove(result);
+    auto validatedTotal = PaymentRequestValidator::validateTotal(total);
+    if (validatedTotal.hasException())
+        return validatedTotal.releaseException();
+
+    return WTFMove(total);
 }
 
 static ExceptionOr<ApplePaySessionPaymentRequest::LineItem> convertAndValidate(ApplePayLineItem&& lineItem)
 {
     ApplePaySessionPaymentRequest::LineItem result;
@@ -315,27 +326,20 @@
     return WTFMove(convertedResult);
 }
 
 static ExceptionOr<PaymentMethodUpdate> convertAndValidate(ApplePayPaymentMethodUpdate&& update)
 {
-    PaymentMethodUpdate convertedUpdate;
-
     auto convertedNewTotal = convertAndValidateTotal(WTFMove(update.newTotal));
     if (convertedNewTotal.hasException())
         return convertedNewTotal.releaseException();
-    convertedUpdate.newTotalAndLineItems.total = convertedNewTotal.releaseReturnValue();
-
-    // FIXME: Merge this validation into the validation we are doing above.
-    auto validatedTotal = PaymentRequestValidator::validateTotal(convertedUpdate.newTotalAndLineItems.total);
-    if (validatedTotal.hasException())
-        return validatedTotal.releaseException();
 
     auto convertedNewLineItems = convertAndValidate(WTFMove(update.newLineItems));
     if (convertedNewLineItems.hasException())
         return convertedNewLineItems.releaseException();
 
-    convertedUpdate.newTotalAndLineItems.lineItems = convertedNewLineItems.releaseReturnValue();
+    PaymentMethodUpdate convertedUpdate { convertedNewTotal.releaseReturnValue(), convertedNewLineItems.releaseReturnValue() };
+    finishConverting(convertedUpdate, WTFMove(update));
 
     return WTFMove(convertedUpdate);
 }
 
 static ExceptionOr<ShippingContactUpdate> convertAndValidate(ApplePayShippingContactUpdate&& update)
@@ -352,15 +356,10 @@
     auto convertedNewTotal = convertAndValidateTotal(WTFMove(update.newTotal));
     if (convertedNewTotal.hasException())
         return convertedNewTotal.releaseException();
     convertedUpdate.newTotalAndLineItems.total = convertedNewTotal.releaseReturnValue();
 
-    // FIXME: Merge this validation into the validation we are doing above.
-    auto validatedTotal = PaymentRequestValidator::validateTotal(convertedUpdate.newTotalAndLineItems.total);
-    if (validatedTotal.hasException())
-        return validatedTotal.releaseException();
-
     auto convertedNewLineItems = convertAndValidate(WTFMove(update.newLineItems));
     if (convertedNewLineItems.hasException())
         return convertedNewLineItems.releaseException();
     convertedUpdate.newTotalAndLineItems.lineItems = convertedNewLineItems.releaseReturnValue();
 
@@ -375,15 +374,10 @@
     if (convertedNewTotal.hasException())
         return convertedNewTotal.releaseException();
 
     convertedUpdate.newTotalAndLineItems.total = convertedNewTotal.releaseReturnValue();
 
-    // FIXME: Merge this validation into the validation we are doing above.
-    auto validatedTotal = PaymentRequestValidator::validateTotal(convertedUpdate.newTotalAndLineItems.total);
-    if (validatedTotal.hasException())
-        return validatedTotal.releaseException();
-
     auto convertedNewLineItems = convertAndValidate(WTFMove(update.newLineItems));
     if (convertedNewLineItems.hasException())
         return convertedNewLineItems.releaseException();
 
     convertedUpdate.newTotalAndLineItems.lineItems = convertedNewLineItems.releaseReturnValue();
@@ -544,11 +538,11 @@
     didReachFinalState();
 
     return { };
 }
 
-ExceptionOr<void> ApplePaySession::completeMerchantValidation(JSC::ExecState& state, JSC::JSValue merchantSessionValue)
+ExceptionOr<void> ApplePaySession::completeMerchantValidation(JSC::JSGlobalObject& state, JSC::JSValue merchantSessionValue)
 {
     if (!canCompleteMerchantValidation())
         return Exception { InvalidAccessError };
 
     if (!merchantSessionValue.isObject())
@@ -810,28 +804,28 @@
     m_state = State::PaymentMethodSelected;
     auto event = ApplePayPaymentMethodSelectedEvent::create(eventNames().paymentmethodselectedEvent, paymentMethod);
     dispatchEvent(event.get());
 }
 
-void ApplePaySession::didCancelPaymentSession()
+void ApplePaySession::didCancelPaymentSession(PaymentSessionError&& error)
 {
     ASSERT(canCancel());
 
     m_state = State::Canceled;
 
-    auto event = Event::create(eventNames().cancelEvent, Event::CanBubble::No, Event::IsCancelable::No);
+    auto event = ApplePayCancelEvent::create(eventNames().cancelEvent, WTFMove(error));
     dispatchEvent(event.get());
 
     didReachFinalState();
 }
 
 const char* ApplePaySession::activeDOMObjectName() const
 {
     return "ApplePaySession";
 }
 
-bool ApplePaySession::canSuspendForDocumentSuspension() const
+bool ApplePaySession::canSuspendWithoutCanceling() const
 {
     switch (m_state) {
     case State::Idle:
     case State::Aborted:
     case State::Completed:
@@ -857,10 +851,25 @@
     paymentCoordinator().abortPaymentSession();
 
     didReachFinalState();
 }
 
+void ApplePaySession::suspend(ReasonForSuspension reason)
+{
+    if (reason != ReasonForSuspension::BackForwardCache)
+        return;
+
+    if (canSuspendWithoutCanceling())
+        return;
+
+    m_state = State::Canceled;
+    paymentCoordinator().abortPaymentSession();
+    queueTaskToDispatchEvent(*this, TaskSource::UserInteraction, ApplePayCancelEvent::create(eventNames().cancelEvent, { }));
+
+    didReachFinalState();
+}
+
 PaymentCoordinator& ApplePaySession::paymentCoordinator() const
 {
     return downcast<Document>(*scriptExecutionContext()).page()->paymentCoordinator();
 }
 
