diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSScope.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSScope.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSScope.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSScope.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2012-2016 Apple Inc. All Rights Reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All Rights Reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -36,22 +36,28 @@
 class WatchpointSet;
 
 class JSScope : public JSNonFinalObject {
 public:
     using Base = JSNonFinalObject;
-    static const unsigned StructureFlags = Base::StructureFlags | OverridesToThis;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | OverridesToThis;
+
+    template<typename, SubspaceAccess>
+    static void subspaceFor(VM&)
+    {
+        RELEASE_ASSERT_NOT_REACHED();
+    }
 
     DECLARE_EXPORT_INFO;
 
     friend class LLIntOffsetsExtractor;
     static size_t offsetOfNext();
 
     static JSObject* objectAtScope(JSScope*);
 
-    static JSObject* resolve(ExecState*, JSScope*, const Identifier&);
-    static JSValue resolveScopeForHoistingFuncDeclInEval(ExecState*, JSScope*, const Identifier&);
-    static ResolveOp abstractResolve(ExecState*, size_t depthOffset, JSScope*, const Identifier&, GetOrPut, ResolveType, InitializationMode);
+    static JSObject* resolve(JSGlobalObject*, JSScope*, const Identifier&);
+    static JSValue resolveScopeForHoistingFuncDeclInEval(JSGlobalObject*, JSScope*, const Identifier&);
+    static ResolveOp abstractResolve(JSGlobalObject*, size_t depthOffset, JSScope*, const Identifier&, GetOrPut, ResolveType, InitializationMode);
 
     static bool hasConstantScope(ResolveType);
     static JSScope* constantScopeForCodeBlock(ResolveType, CodeBlock*);
 
     static void collectClosureVariablesUnderTDZ(JSScope*, VariableEnvironment& result);
@@ -72,17 +78,17 @@
 
     JSObject* globalThis();
 
     SymbolTable* symbolTable(VM&);
 
-    JS_EXPORT_PRIVATE static JSValue toThis(JSCell*, ExecState*, ECMAMode);
+    JS_EXPORT_PRIVATE static JSValue toThis(JSCell*, JSGlobalObject*, ECMAMode);
 
 protected:
     JSScope(VM&, Structure*, JSScope* next);
 
     template<typename ReturnPredicateFunctor, typename SkipPredicateFunctor>
-    static JSObject* resolve(ExecState*, JSScope*, const Identifier&, ReturnPredicateFunctor, SkipPredicateFunctor);
+    static JSObject* resolve(JSGlobalObject*, JSScope*, const Identifier&, ReturnPredicateFunctor, SkipPredicateFunctor);
 
 private:
     WriteBarrier<JSScope> m_next;
 };
 
@@ -127,26 +133,10 @@
 inline JSScope* JSScope::next()
 {
     return m_next.get();
 }
 
-inline Register& Register::operator=(JSScope* scope)
-{
-    *this = JSValue(scope);
-    return *this;
-}
-
-inline JSScope* Register::scope() const
-{
-    return jsCast<JSScope*>(unboxedCell());
-}
-
-inline JSGlobalObject* ExecState::lexicalGlobalObject() const
-{
-    return jsCallee()->globalObject();
-}
-
 inline size_t JSScope::offsetOfNext()
 {
     return OBJECT_OFFSETOF(JSScope, m_next);
 }
 
