diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Watchdog.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Watchdog.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Watchdog.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Watchdog.h
@@ -35,31 +35,32 @@
 #include <wtf/java/JavaRef.h>
 #endif
 
 namespace JSC {
 
-class ExecState;
+class CallFrame;
+class JSGlobalObject;
 class VM;
 
 class Watchdog : public WTF::ThreadSafeRefCounted<Watchdog> {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     class Scope;
 
     Watchdog(VM*);
     void willDestroyVM(VM*);
 
-    typedef bool (*ShouldTerminateCallback)(ExecState*, void* data1, void* data2);
+    typedef bool (*ShouldTerminateCallback)(JSGlobalObject*, void* data1, void* data2);
     void setTimeLimit(Seconds limit, ShouldTerminateCallback = 0, void* data1 = 0, void* data2 = 0);
 
-    bool shouldTerminate(ExecState*);
+    bool shouldTerminate(JSGlobalObject*);
 
     bool hasTimeLimit();
     void enteredVM();
     void exitedVM();
 
-    static const Seconds noTimeLimit;
+    static constexpr Seconds noTimeLimit = Seconds::infinity();
 
 private:
     void startTimer(Seconds timeLimit);
     void stopTimer();
 
@@ -74,11 +75,11 @@
     MonotonicTime m_deadline;
 
     ShouldTerminateCallback m_callback;
     void* m_callbackData1;
     void* m_callbackData2;
-
+    friend class Watchdog::Scope;
     Ref<WorkQueue> m_timerQueue;
 
     friend class LLIntOffsetsExtractor;
 };
 
