diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ErrorPrototype.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ErrorPrototype.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ErrorPrototype.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ErrorPrototype.h
@@ -1,8 +1,8 @@
 /*
  *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
- *  Copyright (C) 2008, 2016 Apple Inc. All rights reserved.
+ *  Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Lesser General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -24,25 +24,39 @@
 
 namespace JSC {
 
 class ObjectPrototype;
 
-class ErrorPrototype : public JSNonFinalObject {
+// Superclass for ErrorPrototype and NativeErrorPrototype.
+class ErrorPrototypeBase : public JSNonFinalObject {
 public:
     typedef JSNonFinalObject Base;
-    static const unsigned StructureFlags = Base::StructureFlags | HasStaticPropertyTable;
 
-    static ErrorPrototype* create(VM&, JSGlobalObject*, Structure*);
+protected:
+    ErrorPrototypeBase(VM&, Structure*);
+    void finishCreation(VM&, const String&);
+};
+
+class ErrorPrototype final : public ErrorPrototypeBase {
+public:
+    typedef ErrorPrototypeBase Base;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | HasStaticPropertyTable;
 
     DECLARE_INFO;
 
     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
     {
         return Structure::create(vm, globalObject, prototype, TypeInfo(ErrorInstanceType, StructureFlags), info());
     }
 
+    static ErrorPrototype* create(VM& vm, JSGlobalObject*, Structure* structure)
+    {
+        ErrorPrototype* prototype = new (NotNull, allocateCell<ErrorPrototype>(vm.heap)) ErrorPrototype(vm, structure);
+        prototype->finishCreation(vm, "Error"_s);
+        return prototype;
+    }
+
 protected:
     ErrorPrototype(VM&, Structure*);
-    void finishCreation(VM&, const String&);
 };
 
 } // namespace JSC
