diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/FetchEvent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/FetchEvent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/FetchEvent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/FetchEvent.cpp
@@ -26,15 +26,18 @@
 #include "config.h"
 #include "FetchEvent.h"
 
 #include "JSDOMPromise.h"
 #include "JSFetchResponse.h"
+#include <wtf/IsoMallocInlines.h>
 
 #if ENABLE(SERVICE_WORKER)
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(FetchEvent);
+
 Ref<FetchEvent> FetchEvent::createForTesting(ScriptExecutionContext& context)
 {
     FetchEvent::Init init;
     init.request = FetchRequest::create(context, { }, FetchHeaders::create(FetchHeaders::Guard::Immutable, { }), { }, { }, { });
     return FetchEvent::create("fetch", WTFMove(init), Event::IsTrusted::Yes);
@@ -108,17 +111,17 @@
 }
 
 void FetchEvent::promiseIsSettled()
 {
     if (m_respondPromise->status() == DOMPromise::Status::Rejected) {
-        auto reason = m_respondPromise->result().toWTFString(m_respondPromise->globalObject()->globalExec());
+        auto reason = m_respondPromise->result().toWTFString(m_respondPromise->globalObject());
         respondWithError(createResponseError(m_request->url(), reason));
         return;
     }
 
     ASSERT(m_respondPromise->status() == DOMPromise::Status::Fulfilled);
-    auto response = JSFetchResponse::toWrapped(m_respondPromise->globalObject()->globalExec()->vm(), m_respondPromise->result());
+    auto response = JSFetchResponse::toWrapped(m_respondPromise->globalObject()->vm(), m_respondPromise->result());
     if (!response) {
         respondWithError(createResponseError(m_request->url(), "Returned response is null."_s));
         return;
     }
 
