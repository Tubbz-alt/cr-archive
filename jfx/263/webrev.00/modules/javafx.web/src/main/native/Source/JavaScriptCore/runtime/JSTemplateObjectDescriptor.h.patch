diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSTemplateObjectDescriptor.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSTemplateObjectDescriptor.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSTemplateObjectDescriptor.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSTemplateObjectDescriptor.h
@@ -1,7 +1,8 @@
 /*
  * Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>.
+ * Copyright (C) 2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -32,12 +33,17 @@
 
 class JSTemplateObjectDescriptor final : public JSCell {
 public:
     using Base = JSCell;
 
-    static const unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
-    static const bool needsDestruction = true;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
+    static constexpr bool needsDestruction = true;
+    template<typename CellType, SubspaceAccess mode>
+    static IsoSubspace* subspaceFor(VM& vm)
+    {
+        return vm.templateObjectDescriptorSpace<mode>();
+    }
     DECLARE_INFO;
 
     static JSTemplateObjectDescriptor* create(VM&, Ref<TemplateObjectDescriptor>&&, int);
 
     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
@@ -45,11 +51,11 @@
         return Structure::create(vm, globalObject, prototype, TypeInfo(CellType, StructureFlags), info());
     }
 
     const TemplateObjectDescriptor& descriptor() const { return m_descriptor.get(); }
 
-    JSArray* createTemplateObject(ExecState*);
+    JSArray* createTemplateObject(JSGlobalObject*);
 
     int endOffset() const { return m_endOffset; }
 
 protected:
     static void destroy(JSCell*);
