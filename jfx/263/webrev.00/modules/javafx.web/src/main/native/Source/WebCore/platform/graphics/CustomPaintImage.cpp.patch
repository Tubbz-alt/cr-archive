diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/CustomPaintImage.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/CustomPaintImage.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/CustomPaintImage.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/CustomPaintImage.cpp
@@ -35,10 +35,11 @@
 #include "CustomPaintCanvas.h"
 #include "GraphicsContext.h"
 #include "ImageBitmap.h"
 #include "ImageBuffer.h"
 #include "JSCSSPaintCallback.h"
+#include "JSDOMExceptionHandling.h"
 #include "PaintRenderingContext2D.h"
 #include "RenderElement.h"
 #include "StylePropertyMap.h"
 #include "TypedOMCSSImageValue.h"
 #include "TypedOMCSSUnitValue.h"
@@ -150,16 +151,16 @@
     auto& vm = paintConstructor.getObject()->vm();
     JSC::JSLockHolder lock(vm);
     auto scope = DECLARE_THROW_SCOPE(vm);
     auto& globalObject = *paintConstructor.getObject()->globalObject();
 
-    auto& state = *globalObject.globalExec();
+    auto& lexicalGlobalObject = globalObject;
     JSC::ArgList noArgs;
-    JSC::JSValue thisObject = { JSC::construct(&state, paintConstructor, noArgs, "Failed to construct paint class") };
+    JSC::JSValue thisObject = { JSC::construct(&lexicalGlobalObject, paintConstructor, noArgs, "Failed to construct paint class") };
 
     if (UNLIKELY(scope.exception())) {
-        reportException(&state, scope.exception());
+        reportException(&lexicalGlobalObject, scope.exception());
         return ImageDrawResult::DidNothing;
     }
 
     auto result = callback.handleEvent(WTFMove(thisObject), *context, size, propertyMap, m_arguments);
     if (result.type() != CallbackResultType::Success)
@@ -195,11 +196,11 @@
     double yScale = fabs(destContextCTM.yScale());
     AffineTransform adjustedPatternCTM = patternTransform;
     adjustedPatternCTM.scale(1.0 / xScale, 1.0 / yScale);
     adjustedSrcRect.scale(xScale, yScale);
 
-    auto buffer = ImageBuffer::createCompatibleBuffer(adjustedSize, ColorSpaceSRGB, destContext);
+    auto buffer = ImageBuffer::createCompatibleBuffer(adjustedSize, ColorSpace::SRGB, destContext);
     if (!buffer)
         return;
     doCustomPaint(buffer->context(), adjustedSize);
 
     if (destContext.drawLuminanceMask())
