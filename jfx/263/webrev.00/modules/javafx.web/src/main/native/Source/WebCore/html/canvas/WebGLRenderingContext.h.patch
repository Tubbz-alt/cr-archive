diff a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLRenderingContext.h b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLRenderingContext.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLRenderingContext.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLRenderingContext.h
@@ -33,35 +33,35 @@
 namespace WebCore {
 
 class WebGLRenderingContext final : public WebGLRenderingContextBase {
     WTF_MAKE_ISO_ALLOCATED(WebGLRenderingContext);
 public:
-    static std::unique_ptr<WebGLRenderingContext> create(CanvasBase&, GraphicsContext3DAttributes);
-    static std::unique_ptr<WebGLRenderingContext> create(CanvasBase&, Ref<GraphicsContext3D>&&, GraphicsContext3DAttributes);
+    static std::unique_ptr<WebGLRenderingContext> create(CanvasBase&, GraphicsContextGLAttributes);
+    static std::unique_ptr<WebGLRenderingContext> create(CanvasBase&, Ref<GraphicsContextGLOpenGL>&&, GraphicsContextGLAttributes);
 
     bool isWebGL1() const final { return true; }
 
     WebGLExtension* getExtension(const String&) final;
-    WebGLAny getParameter(GC3Denum pname) final;
+    WebGLAny getParameter(GCGLenum pname) final;
     Optional<Vector<String>> getSupportedExtensions() final;
 
-    WebGLAny getFramebufferAttachmentParameter(GC3Denum target, GC3Denum attachment, GC3Denum pname) final;
-    void renderbufferStorage(GC3Denum target, GC3Denum internalformat, GC3Dsizei width, GC3Dsizei height) final;
-    bool validateFramebufferFuncParameters(const char* functionName, GC3Denum target, GC3Denum attachment) final;
-    void hint(GC3Denum target, GC3Denum mode) final;
-    void clear(GC3Dbitfield mask) final;
+    WebGLAny getFramebufferAttachmentParameter(GCGLenum target, GCGLenum attachment, GCGLenum pname) final;
+    void renderbufferStorage(GCGLenum target, GCGLenum internalformat, GCGLsizei width, GCGLsizei height) final;
+    bool validateFramebufferFuncParameters(const char* functionName, GCGLenum target, GCGLenum attachment) final;
+    void hint(GCGLenum target, GCGLenum mode) final;
+    void clear(GCGLbitfield mask) final;
 
-    GC3Dint getMaxDrawBuffers() final;
-    GC3Dint getMaxColorAttachments() final;
+    GCGLint getMaxDrawBuffers() final;
+    GCGLint getMaxColorAttachments() final;
     void initializeVertexArrayObjects() final;
-    bool validateIndexArrayConservative(GC3Denum type, unsigned& numElementsRequired) final;
-    bool validateBlendEquation(const char* functionName, GC3Denum mode) final;
-    bool validateCapability(const char* functionName, GC3Denum cap) final;
+    bool validateIndexArrayConservative(GCGLenum type, unsigned& numElementsRequired) final;
+    bool validateBlendEquation(const char* functionName, GCGLenum mode) final;
+    bool validateCapability(const char* functionName, GCGLenum cap) final;
 
 private:
-    WebGLRenderingContext(CanvasBase&, GraphicsContext3DAttributes);
-    WebGLRenderingContext(CanvasBase&, Ref<GraphicsContext3D>&&, GraphicsContext3DAttributes);
+    WebGLRenderingContext(CanvasBase&, GraphicsContextGLAttributes);
+    WebGLRenderingContext(CanvasBase&, Ref<GraphicsContextGLOpenGL>&&, GraphicsContextGLAttributes);
 };
 
 } // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_CANVASRENDERINGCONTEXT(WebCore::WebGLRenderingContext, isWebGL1())
