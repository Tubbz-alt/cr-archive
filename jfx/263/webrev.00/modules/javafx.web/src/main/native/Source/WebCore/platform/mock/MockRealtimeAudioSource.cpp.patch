diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MockRealtimeAudioSource.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MockRealtimeAudioSource.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MockRealtimeAudioSource.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MockRealtimeAudioSource.cpp
@@ -30,15 +30,17 @@
 
 #include "config.h"
 #include "MockRealtimeAudioSource.h"
 
 #if ENABLE(MEDIA_STREAM)
+#include "AudioSession.h"
 #include "CaptureDevice.h"
 #include "Logging.h"
 #include "MediaConstraints.h"
 #include "MockRealtimeMediaSourceCenter.h"
 #include "NotImplemented.h"
+#include "PlatformMediaSessionManager.h"
 #include "RealtimeMediaSourceSettings.h"
 #include <wtf/UUID.h>
 
 namespace WebCore {
 
@@ -47,11 +49,11 @@
 {
 #ifndef NDEBUG
     auto device = MockRealtimeMediaSourceCenter::mockDeviceWithPersistentID(deviceID);
     ASSERT(device);
     if (!device)
-        return { };
+        return { "No mock microphone device"_s };
 #endif
 
     auto source = adoptRef(*new MockRealtimeAudioSource(WTFMove(deviceID), WTFMove(name), WTFMove(hashSalt)));
     if (constraints && source->applyConstraints(*constraints))
         return { };
@@ -66,10 +68,13 @@
     , m_timer(RunLoop::current(), this, &MockRealtimeAudioSource::tick)
 {
     auto device = MockRealtimeMediaSourceCenter::mockDeviceWithPersistentID(persistentID());
     ASSERT(device);
     m_device = *device;
+
+    setSampleRate(WTF::get<MockMicrophoneProperties>(m_device.properties).defaultSampleRate);
+    initializeEchoCancellation(true);
 }
 
 MockRealtimeAudioSource::~MockRealtimeAudioSource()
 {
 #if PLATFORM(IOS_FAMILY)
@@ -129,10 +134,12 @@
 
 void MockRealtimeAudioSource::startProducingData()
 {
 #if PLATFORM(IOS_FAMILY)
     RealtimeMediaSourceCenter::singleton().audioCaptureFactory().setActiveSource(*this);
+    PlatformMediaSessionManager::sharedManager().sessionCanProduceAudioChanged();
+    ASSERT(AudioSession::sharedSession().category() == AudioSession::PlayAndRecord);
 #endif
 
     if (!sampleRate())
         setSampleRate(WTF::get<MockMicrophoneProperties>(m_device.properties).defaultSampleRate);
 
