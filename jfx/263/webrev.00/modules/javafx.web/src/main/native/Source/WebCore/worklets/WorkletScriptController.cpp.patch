diff a/modules/javafx.web/src/main/native/Source/WebCore/worklets/WorkletScriptController.cpp b/modules/javafx.web/src/main/native/Source/WebCore/worklets/WorkletScriptController.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/worklets/WorkletScriptController.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/worklets/WorkletScriptController.cpp
@@ -39,11 +39,11 @@
 #include <JavaScriptCore/Completion.h>
 #include <JavaScriptCore/Exception.h>
 #include <JavaScriptCore/ExceptionHelpers.h>
 #include <JavaScriptCore/GCActivityCallback.h>
 #include <JavaScriptCore/JSLock.h>
-#include <JavaScriptCore/PromiseDeferredTimer.h>
+#include <JavaScriptCore/PromiseTimer.h>
 #include <JavaScriptCore/StrongInlines.h>
 
 namespace WebCore {
 using namespace JSC;
 
@@ -160,11 +160,11 @@
 
     NakedPtr<JSC::Exception> exception;
     evaluate(sourceCode, exception, returnedExceptionMessage);
     if (exception) {
         JSLockHolder lock(vm());
-        reportException(m_workletGlobalScopeWrapper->globalExec(), exception);
+        reportException(m_workletGlobalScopeWrapper->globalObject(), exception);
     }
 }
 
 // Important: The caller of this function must verify that the returned exception message does not violate CORS if it is going to be passed back to JS.
 void WorkletScriptController::evaluate(const ScriptSourceCode& sourceCode, NakedPtr<JSC::Exception>& returnedException, String* returnedExceptionMessage)
@@ -172,29 +172,29 @@
     if (isExecutionForbidden())
         return;
 
     initScriptIfNeeded();
 
-    auto& state = *m_workletGlobalScopeWrapper->globalExec();
-    VM& vm = state.vm();
+    auto& globalObject = *m_workletGlobalScopeWrapper->globalObject();
+    VM& vm = globalObject.vm();
     JSLockHolder lock { vm };
 
-    JSExecState::profiledEvaluate(&state, JSC::ProfilingReason::Other, sourceCode.jsSourceCode(), m_workletGlobalScopeWrapper->globalThis(), returnedException);
+    JSExecState::profiledEvaluate(&globalObject, JSC::ProfilingReason::Other, sourceCode.jsSourceCode(), m_workletGlobalScopeWrapper->globalThis(), returnedException);
 
     if (returnedException && returnedExceptionMessage) {
         // This FIXME is from WorkerScriptController.
         // FIXME: It's not great that this can run arbitrary code to string-ify the value of the exception.
         // Do we need to do anything to handle that properly, if it, say, raises another exception?
-        *returnedExceptionMessage = returnedException->value().toWTFString(&state);
+        *returnedExceptionMessage = returnedException->value().toWTFString(&globalObject);
     }
 }
 
 void WorkletScriptController::setException(JSC::Exception* exception)
 {
-    auto* exec = m_workletGlobalScopeWrapper->globalExec();
-    VM& vm = exec->vm();
+    auto* lexicalGlobalObject = m_workletGlobalScopeWrapper->globalObject();
+    VM& vm = lexicalGlobalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
-    throwException(exec, scope, exception);
+    throwException(lexicalGlobalObject, scope, exception);
 }
 
 } // namespace WebCore
 #endif
