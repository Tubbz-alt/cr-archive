diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBDatabaseInfo.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBDatabaseInfo.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBDatabaseInfo.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBDatabaseInfo.h
@@ -33,11 +33,11 @@
 namespace WebCore {
 
 class IDBDatabaseInfo {
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    explicit IDBDatabaseInfo(const String& name, uint64_t version);
+    explicit IDBDatabaseInfo(const String& name, uint64_t version, uint64_t maxIndexID);
 
     enum IsolatedCopyTag { IsolatedCopy };
     IDBDatabaseInfo(const IDBDatabaseInfo&, IsolatedCopyTag);
 
     IDBDatabaseInfo isolatedCopy() const;
@@ -56,19 +56,23 @@
     const IDBObjectStoreInfo* infoForExistingObjectStore(const String& objectStoreName) const;
 
     void renameObjectStore(uint64_t objectStoreIdentifier, const String& newName);
 
     Vector<String> objectStoreNames() const;
+    const HashMap<uint64_t, IDBObjectStoreInfo>& objectStoreMap() const { return m_objectStoreMap; }
 
     void deleteObjectStore(const String& objectStoreName);
     void deleteObjectStore(uint64_t objectStoreIdentifier);
 
     WEBCORE_EXPORT IDBDatabaseInfo();
 
     template<class Encoder> void encode(Encoder&) const;
     template<class Decoder> static bool decode(Decoder&, IDBDatabaseInfo&);
 
+    void setMaxIndexID(uint64_t maxIndexID);
+    uint64_t generateNextIndexID() { return ++m_maxIndexID; }
+
 #if !LOG_DISABLED
     String loggingString() const;
 #endif
 
 private:
@@ -76,19 +80,20 @@
     IDBObjectStoreInfo* getInfoForExistingObjectStore(uint64_t objectStoreIdentifier);
 
     String m_name;
     uint64_t m_version { 0 };
     uint64_t m_maxObjectStoreID { 0 };
+    uint64_t m_maxIndexID { 0 };
 
     HashMap<uint64_t, IDBObjectStoreInfo> m_objectStoreMap;
 
 };
 
 template<class Encoder>
 void IDBDatabaseInfo::encode(Encoder& encoder) const
 {
-    encoder << m_name << m_version << m_maxObjectStoreID << m_objectStoreMap;
+    encoder << m_name << m_version << m_maxObjectStoreID << m_maxIndexID << m_objectStoreMap;
 }
 
 template<class Decoder>
 bool IDBDatabaseInfo::decode(Decoder& decoder, IDBDatabaseInfo& info)
 {
@@ -99,10 +104,13 @@
         return false;
 
     if (!decoder.decode(info.m_maxObjectStoreID))
         return false;
 
+    if (!decoder.decode(info.m_maxIndexID))
+        return false;
+
     if (!decoder.decode(info.m_objectStoreMap))
         return false;
 
     return true;
 }
