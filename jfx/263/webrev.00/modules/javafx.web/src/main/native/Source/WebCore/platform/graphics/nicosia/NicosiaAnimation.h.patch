diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/nicosia/NicosiaAnimation.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/nicosia/NicosiaAnimation.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/nicosia/NicosiaAnimation.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/nicosia/NicosiaAnimation.h
@@ -17,10 +17,11 @@
  Boston, MA 02110-1301, USA.
  */
 
 #pragma once
 
+#include "Animation.h"
 #include "GraphicsLayer.h"
 
 namespace WebCore {
 class TransformationMatrix;
 }
@@ -40,17 +41,20 @@
 
     Animation()
         : m_keyframes(WebCore::AnimatedPropertyInvalid)
     { }
     Animation(const String&, const WebCore::KeyframeValueList&, const WebCore::FloatSize&, const WebCore::Animation&, bool, MonotonicTime, Seconds, AnimationState);
+
     WEBCORE_EXPORT Animation(const Animation&);
+    Animation& operator=(const Animation&);
+    Animation(Animation&&) = default;
+    Animation& operator=(Animation&&) = default;
 
     void apply(ApplicationResult&, MonotonicTime);
     void applyKeepingInternalState(ApplicationResult&, MonotonicTime);
     void pause(Seconds);
     void resume();
-    bool isActive() const;
 
     const String& name() const { return m_name; }
     const WebCore::KeyframeValueList& keyframes() const { return m_keyframes; }
     AnimationState state() const { return m_state; }
     WebCore::TimingFunction* timingFunction() const { return m_timingFunction.get(); }
@@ -94,11 +98,10 @@
     const Vector<Animation>& animations() const { return m_animations; }
     Vector<Animation>& animations() { return m_animations; }
 
     bool hasRunningAnimations() const;
     bool hasActiveAnimationsOfType(WebCore::AnimatedPropertyID type) const;
-    Animations getActiveAnimations() const;
 
 private:
     Vector<Animation> m_animations;
 };
 
