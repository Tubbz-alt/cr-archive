diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBActiveDOMObject.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBActiveDOMObject.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBActiveDOMObject.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBActiveDOMObject.h
@@ -36,22 +36,22 @@
 class IDBActiveDOMObject : public ActiveDOMObject {
 public:
     Thread& originThread() const { return m_originThread.get(); }
 
     void contextDestroyed() final {
-        ASSERT(m_originThread.ptr() == &Thread::current());
+        ASSERT(canCurrentThreadAccessThreadLocalData(originThread()));
 
         Locker<Lock> lock(m_scriptExecutionContextLock);
         ActiveDOMObject::contextDestroyed();
     }
 
     template<typename T, typename... Parameters, typename... Arguments>
     void performCallbackOnOriginThread(T& object, void (T::*method)(Parameters...), Arguments&&... arguments)
     {
         ASSERT(&originThread() == &object.originThread());
 
-        if (&object.originThread() == &Thread::current()) {
+        if (canCurrentThreadAccessThreadLocalData(object.originThread())) {
             (object.*method)(arguments...);
             return;
         }
 
         Locker<Lock> lock(m_scriptExecutionContextLock);
@@ -63,11 +63,11 @@
         context->postCrossThreadTask(object, method, arguments...);
     }
 
     void callFunctionOnOriginThread(WTF::Function<void ()>&& function)
     {
-        if (&originThread() == &Thread::current()) {
+        if (canCurrentThreadAccessThreadLocalData(originThread())) {
             function();
             return;
         }
 
         Locker<Lock> lock(m_scriptExecutionContextLock);
