diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/PlatformTimeRanges.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/PlatformTimeRanges.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/PlatformTimeRanges.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/PlatformTimeRanges.h
@@ -34,19 +34,19 @@
 class PrintStream;
 }
 
 namespace WebCore {
 
-class PlatformTimeRanges {
+class WEBCORE_EXPORT PlatformTimeRanges {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     explicit PlatformTimeRanges() { }
     PlatformTimeRanges(const MediaTime& start, const MediaTime& end);
 
-    WEBCORE_EXPORT MediaTime start(unsigned index) const;
+    MediaTime start(unsigned index) const;
     MediaTime start(unsigned index, bool& valid) const;
-    WEBCORE_EXPORT MediaTime end(unsigned index) const;
+    MediaTime end(unsigned index) const;
     MediaTime end(unsigned index, bool& valid) const;
     MediaTime duration(unsigned index) const;
     MediaTime maximumBufferedTime() const;
 
     void invert();
@@ -54,10 +54,11 @@
     void unionWith(const PlatformTimeRanges&);
 
     unsigned length() const { return m_ranges.size(); }
 
     void add(const MediaTime& start, const MediaTime& end);
+    void clear();
 
     bool contain(const MediaTime&) const;
 
     size_t find(const MediaTime&) const;
 
@@ -65,10 +66,13 @@
 
     MediaTime totalDuration() const;
 
     void dump(WTF::PrintStream&) const;
 
+    template<class Encoder> void encode(Encoder&) const;
+    template<class Decoder> static Optional<PlatformTimeRanges> decode(Decoder&);
+
 private:
     // We consider all the Ranges to be semi-bounded as follow: [start, end[
     struct Range {
         Range() { }
         Range(const MediaTime& start, const MediaTime& end)
@@ -78,10 +82,33 @@
         }
 
         MediaTime m_start;
         MediaTime m_end;
 
+        template<class Encoder>
+        void encode(Encoder& encoder) const
+        {
+            encoder << m_start;
+            encoder << m_end;
+        }
+
+        template <class Decoder>
+        static Optional<Range> decode(Decoder& decoder)
+        {
+            Optional<MediaTime> start;
+            decoder >> start;
+            if (!start)
+                return WTF::nullopt;
+
+            Optional<MediaTime> end;
+            decoder >> end;
+            if (!end)
+                return WTF::nullopt;
+
+            return {{ WTFMove(*start), WTFMove(*end) }};
+        }
+
         inline bool isPointInRange(const MediaTime& point) const
         {
             return m_start <= point && point < m_end;
         }
 
@@ -109,11 +136,30 @@
         {
             return range.m_start >= m_end;
         }
     };
 
+    PlatformTimeRanges(Vector<Range>&&);
+
     Vector<Range> m_ranges;
 };
 
+template<class Encoder>
+void PlatformTimeRanges::encode(Encoder& encoder) const
+{
+    encoder << m_ranges;
+}
+
+template <class Decoder>
+Optional<PlatformTimeRanges> PlatformTimeRanges::decode(Decoder& decoder)
+{
+    Optional<Vector<Range>> buffered;
+    decoder >> buffered;
+    if (!buffered)
+        return WTF::nullopt;
+
+    return {{ WTFMove(*buffered) }};
+}
+
 } // namespace WebCore
 
 #endif
