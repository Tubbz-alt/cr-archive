diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMWrapper.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMWrapper.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMWrapper.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMWrapper.h
@@ -27,31 +27,31 @@
 
 namespace WebCore {
 
 class ScriptExecutionContext;
 
-// JSC allows us to extend JSType. If the highest bit is set, we can add any Object types and they are
+// JSC allows us to extend JSType. If the highest 3 bits are set, we can add any Object types and they are
 // recognized as OtherObj in JSC. And we encode Node type into JSType if the given JSType is subclass of Node.
-// offset | 7 | 6 | 5   4 | 3   2   1   0  |
-// value  | 1 | 0 |  Non-node DOM types    |
+// offset | 7 | 6 | 5 | 4   3   2   1   0  |
+// value  | 1 | 1 | 1 | Non-node DOM types |
 // If the given JSType is a subclass of Node, the format is the following.
-// offset | 7 | 6 | 5   4 | 3   2   1   0  |
-// value  | 1 | 1 |  Kind |       NodeType |
-static const uint8_t JSNodeTypeMask                  = 0b00001111;
+// offset | 7 | 6 | 5 | 4 | 3   2   1   0  |
+// value  | 1 | 1 | 1 | 1 |    NodeType    |
 
-static const uint8_t JSDOMWrapperType                = 0b10000000;
-static const uint8_t JSEventType                     = 0b10000001;
-static const uint8_t JSNodeType                      = 0b11000000;
+static const uint8_t JSDOMWrapperType                = 0b11101110;
+static const uint8_t JSEventType                     = 0b11101111;
+static const uint8_t JSNodeType                      = 0b11110000;
+static const uint8_t JSNodeTypeMask                  = 0b00001111;
 static const uint8_t JSTextNodeType                  = JSNodeType | NodeConstants::TEXT_NODE;
 static const uint8_t JSProcessingInstructionNodeType = JSNodeType | NodeConstants::PROCESSING_INSTRUCTION_NODE;
 static const uint8_t JSDocumentTypeNodeType          = JSNodeType | NodeConstants::DOCUMENT_TYPE_NODE;
 static const uint8_t JSDocumentFragmentNodeType      = JSNodeType | NodeConstants::DOCUMENT_FRAGMENT_NODE;
 static const uint8_t JSDocumentWrapperType           = JSNodeType | NodeConstants::DOCUMENT_NODE;
 static const uint8_t JSCommentNodeType               = JSNodeType | NodeConstants::COMMENT_NODE;
 static const uint8_t JSCDATASectionNodeType          = JSNodeType | NodeConstants::CDATA_SECTION_NODE;
 static const uint8_t JSAttrNodeType                  = JSNodeType | NodeConstants::ATTRIBUTE_NODE;
-static const uint8_t JSElementType                   = 0b11010000 | NodeConstants::ELEMENT_NODE;
+static const uint8_t JSElementType                   = 0b11110000 | NodeConstants::ELEMENT_NODE;
 
 static_assert(JSDOMWrapperType > JSC::LastJSCObjectType, "JSC::JSType offers the highest bit.");
 static_assert(NodeConstants::LastNodeType <= JSNodeTypeMask, "NodeType should be represented in 4bit.");
 
 class JSDOMObject : public JSC::JSDestructibleObject {
@@ -65,11 +65,10 @@
 protected:
     WEBCORE_EXPORT JSDOMObject(JSC::Structure*, JSC::JSGlobalObject&);
 };
 
 WEBCORE_EXPORT JSC::CompleteSubspace* outputConstraintSubspaceFor(JSC::VM&);
-WEBCORE_EXPORT JSC::CompleteSubspace* globalObjectOutputConstraintSubspaceFor(JSC::VM&);
 
 template<typename ImplementationClass> class JSDOMWrapper : public JSDOMObject {
 public:
     typedef JSDOMObject Base;
     typedef ImplementationClass DOMWrapped;
@@ -107,8 +106,8 @@
     static constexpr bool isSimpleWrapper = test<typename JSClass::DOMWrapped>(0);
     static constexpr bool isComplexWrapper = !isSimpleWrapper;
     static constexpr bool isBuiltin = false;
 };
 
-JSC::JSValue cloneAcrossWorlds(JSC::ExecState&, const JSDOMObject& owner, JSC::JSValue);
+JSC::JSValue cloneAcrossWorlds(JSC::JSGlobalObject&, const JSDOMObject& owner, JSC::JSValue);
 
 } // namespace WebCore
