diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3EliminateCommonSubexpressions.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3EliminateCommonSubexpressions.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3EliminateCommonSubexpressions.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3EliminateCommonSubexpressions.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -41,22 +41,21 @@
 #include "B3StackSlot.h"
 #include "B3ValueKey.h"
 #include "B3ValueInlines.h"
 #include "B3Variable.h"
 #include "B3VariableValue.h"
-#include "DFGGraph.h"
 #include <wtf/CommaPrinter.h>
 #include <wtf/HashMap.h>
 #include <wtf/ListDump.h>
 #include <wtf/RangeSet.h>
 
 namespace JSC { namespace B3 {
 
 namespace {
 
 namespace B3EliminateCommonSubexpressionsInternal {
-static const bool verbose = false;
+static constexpr bool verbose = false;
 }
 
 // FIXME: We could treat Patchpoints with a non-empty set of reads as a "memory value" and somehow
 // eliminate redundant ones. We would need some way of determining if two patchpoints are replacable.
 // It doesn't seem right to use the reads set for this. We could use the generator, but that feels
