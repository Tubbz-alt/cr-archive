diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/IsoCellSet.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/IsoCellSet.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/IsoCellSet.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/IsoCellSet.cpp
@@ -41,11 +41,11 @@
 }
 
 IsoCellSet::~IsoCellSet()
 {
     if (isOnList())
-        BasicRawSentinelNode<IsoCellSet>::remove();
+        PackedRawSentinelNode<IsoCellSet>::remove();
 }
 
 Ref<SharedTask<MarkedBlock::Handle*()>> IsoCellSet::parallelNotEmptyMarkedBlockSource()
 {
     class Task : public SharedTask<MarkedBlock::Handle*()> {
@@ -59,11 +59,11 @@
         MarkedBlock::Handle* run() override
         {
             if (m_done)
                 return nullptr;
             auto locker = holdLock(m_lock);
-            auto bits = m_directory.m_markingNotEmpty & m_set.m_blocksWithBits;
+            auto bits = m_directory.m_bits.markingNotEmpty() & m_set.m_blocksWithBits;
             m_index = bits.findBit(m_index, true);
             if (m_index >= m_directory.m_blocks.size()) {
                 m_done = true;
                 return nullptr;
             }
@@ -79,11 +79,11 @@
     };
 
     return adoptRef(*new Task(*this));
 }
 
-NEVER_INLINE Bitmap<MarkedBlock::atomsPerBlock>* IsoCellSet::addSlow(size_t blockIndex)
+NEVER_INLINE Bitmap<MarkedBlock::atomsPerBlock>* IsoCellSet::addSlow(unsigned blockIndex)
 {
     auto locker = holdLock(m_subspace.m_directory.m_bitvectorLock);
     auto& bitsPtrRef = m_bits[blockIndex];
     auto* bits = bitsPtrRef.get();
     if (!bits) {
@@ -93,17 +93,17 @@
         m_blocksWithBits[blockIndex] = true;
     }
     return bits;
 }
 
-void IsoCellSet::didResizeBits(size_t newSize)
+void IsoCellSet::didResizeBits(unsigned newSize)
 {
     m_blocksWithBits.resize(newSize);
     m_bits.grow(newSize);
 }
 
-void IsoCellSet::didRemoveBlock(size_t blockIndex)
+void IsoCellSet::didRemoveBlock(unsigned blockIndex)
 {
     {
         auto locker = holdLock(m_subspace.m_directory.m_bitvectorLock);
         m_blocksWithBits[blockIndex] = false;
     }
