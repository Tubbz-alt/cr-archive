diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/IntrinsicGetterAccessCase.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/IntrinsicGetterAccessCase.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/IntrinsicGetterAccessCase.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/IntrinsicGetterAccessCase.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -40,18 +40,18 @@
     Intrinsic intrinsic() const { return m_intrinsicFunction->intrinsic(); }
 
     static bool canEmitIntrinsicGetter(JSFunction*, Structure*);
     void emitIntrinsicGetter(AccessGenerationState&);
 
-    static std::unique_ptr<AccessCase> create(VM&, JSCell*, PropertyOffset, Structure*, const ObjectPropertyConditionSet&, JSFunction* intrinsicFunction, std::unique_ptr<PolyProtoAccessChain>);
+    static std::unique_ptr<AccessCase> create(VM&, JSCell*, CacheableIdentifier, PropertyOffset, Structure*, const ObjectPropertyConditionSet&, JSFunction* intrinsicFunction, std::unique_ptr<PolyProtoAccessChain>);
 
     std::unique_ptr<AccessCase> clone() const override;
 
     ~IntrinsicGetterAccessCase();
 
 private:
-    IntrinsicGetterAccessCase(VM&, JSCell*, PropertyOffset, Structure*, const ObjectPropertyConditionSet&, JSFunction* intrinsicFunction, std::unique_ptr<PolyProtoAccessChain>);
+    IntrinsicGetterAccessCase(VM&, JSCell*, CacheableIdentifier, PropertyOffset, Structure*, const ObjectPropertyConditionSet&, JSFunction* intrinsicFunction, std::unique_ptr<PolyProtoAccessChain>);
 
     WriteBarrier<JSFunction> m_intrinsicFunction;
 };
 
 } // namespace JSC
