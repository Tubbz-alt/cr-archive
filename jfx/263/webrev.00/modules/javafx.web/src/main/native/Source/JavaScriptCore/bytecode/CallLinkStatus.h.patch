diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallLinkStatus.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallLinkStatus.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallLinkStatus.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/CallLinkStatus.h
@@ -39,11 +39,11 @@
 class InternalFunction;
 class JSFunction;
 class Structure;
 class CallLinkInfo;
 
-class CallLinkStatus {
+class CallLinkStatus final {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     CallLinkStatus()
     {
     }
@@ -64,14 +64,14 @@
 
     struct ExitSiteData {
         ExitFlag takesSlowPath;
         ExitFlag badFunction;
     };
-    static ExitSiteData computeExitSiteData(CodeBlock*, unsigned bytecodeIndex);
+    static ExitSiteData computeExitSiteData(CodeBlock*, BytecodeIndex);
 
-    static CallLinkStatus computeFor(CodeBlock*, unsigned bytecodeIndex, const ICStatusMap&, ExitSiteData);
-    static CallLinkStatus computeFor(CodeBlock*, unsigned bytecodeIndex, const ICStatusMap&);
+    static CallLinkStatus computeFor(CodeBlock*, BytecodeIndex, const ICStatusMap&, ExitSiteData);
+    static CallLinkStatus computeFor(CodeBlock*, BytecodeIndex, const ICStatusMap&);
 
 #if ENABLE(JIT)
     // Computes the status assuming that we never took slow path and never previously
     // exited.
     static CallLinkStatus computeFor(const ConcurrentJSLocker&, CodeBlock*, CallLinkInfo&);
@@ -102,11 +102,11 @@
     bool isBasedOnStub() const { return m_isBasedOnStub; }
     bool canOptimize() const { return !m_variants.isEmpty(); }
 
     bool isClosureCall() const; // Returns true if any callee is a closure call.
 
-    unsigned maxNumArguments() const { return m_maxNumArguments; }
+    unsigned maxArgumentCountIncludingThis() const { return m_maxArgumentCountIncludingThis; }
 
     bool finalize(VM&);
 
     void merge(const CallLinkStatus&);
 
@@ -115,11 +115,11 @@
     void dump(PrintStream&) const;
 
 private:
     void makeClosureCall();
 
-    static CallLinkStatus computeFromLLInt(const ConcurrentJSLocker&, CodeBlock*, unsigned bytecodeIndex);
+    static CallLinkStatus computeFromLLInt(const ConcurrentJSLocker&, CodeBlock*, BytecodeIndex);
 #if ENABLE(JIT)
     static CallLinkStatus computeFromCallLinkInfo(
         const ConcurrentJSLocker&, CallLinkInfo&);
 #endif
 
@@ -127,9 +127,9 @@
 
     CallVariantList m_variants;
     bool m_couldTakeSlowPath { false };
     bool m_isProved { false };
     bool m_isBasedOnStub { false };
-    unsigned m_maxNumArguments { 0 };
+    unsigned m_maxArgumentCountIncludingThis { 0 };
 };
 
 } // namespace JSC
