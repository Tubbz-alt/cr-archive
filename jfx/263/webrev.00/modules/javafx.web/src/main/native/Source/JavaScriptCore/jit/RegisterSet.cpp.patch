diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/RegisterSet.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/RegisterSet.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/RegisterSet.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/RegisterSet.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -59,11 +59,11 @@
 }
 
 RegisterSet RegisterSet::runtimeTagRegisters()
 {
 #if USE(JSVALUE64)
-    return RegisterSet(GPRInfo::tagTypeNumberRegister, GPRInfo::tagMaskRegister);
+    return RegisterSet(GPRInfo::numberTagRegister, GPRInfo::notCellMaskRegister);
 #else
     return { };
 #endif
 }
 
@@ -154,10 +154,11 @@
     result.set(FPRInfo::fpRegCS5);
     result.set(FPRInfo::fpRegCS6);
     result.set(FPRInfo::fpRegCS7);
 #elif CPU(ARM_THUMB2) || CPU(MIPS)
     result.set(GPRInfo::regCS0);
+    result.set(GPRInfo::regCS1);
 #endif
     return result;
 }
 
 RegisterAtOffsetList* RegisterSet::vmCalleeSaveRegisterOffsets()
@@ -176,33 +177,35 @@
 #if CPU(X86)
 #elif CPU(X86_64)
 #if !OS(WINDOWS)
     result.set(GPRInfo::regCS1);
     result.set(GPRInfo::regCS2);
-    ASSERT(GPRInfo::regCS3 == GPRInfo::tagTypeNumberRegister);
-    ASSERT(GPRInfo::regCS4 == GPRInfo::tagMaskRegister);
+    static_assert(GPRInfo::regCS3 == GPRInfo::numberTagRegister, "");
+    static_assert(GPRInfo::regCS4 == GPRInfo::notCellMaskRegister, "");
     result.set(GPRInfo::regCS3);
     result.set(GPRInfo::regCS4);
 #else
     result.set(GPRInfo::regCS3);
     result.set(GPRInfo::regCS4);
-    ASSERT(GPRInfo::regCS5 == GPRInfo::tagTypeNumberRegister);
-    ASSERT(GPRInfo::regCS6 == GPRInfo::tagMaskRegister);
+    static_assert(GPRInfo::regCS5 == GPRInfo::numberTagRegister, "");
+    static_assert(GPRInfo::regCS6 == GPRInfo::notCellMaskRegister, "");
     result.set(GPRInfo::regCS5);
     result.set(GPRInfo::regCS6);
 #endif
 #elif CPU(ARM_THUMB2)
     result.set(GPRInfo::regCS0);
+    result.set(GPRInfo::regCS1);
 #elif CPU(ARM64)
     result.set(GPRInfo::regCS6);
     result.set(GPRInfo::regCS7);
-    ASSERT(GPRInfo::regCS8 == GPRInfo::tagTypeNumberRegister);
-    ASSERT(GPRInfo::regCS9 == GPRInfo::tagMaskRegister);
+    static_assert(GPRInfo::regCS8 == GPRInfo::numberTagRegister, "");
+    static_assert(GPRInfo::regCS9 == GPRInfo::notCellMaskRegister, "");
     result.set(GPRInfo::regCS8);
     result.set(GPRInfo::regCS9);
 #elif CPU(MIPS)
     result.set(GPRInfo::regCS0);
+    result.set(GPRInfo::regCS1);
 #else
     UNREACHABLE_FOR_PLATFORM();
 #endif
     return result;
 }
@@ -214,26 +217,27 @@
 #elif CPU(X86_64)
     result.set(GPRInfo::regCS0);
     result.set(GPRInfo::regCS1);
     result.set(GPRInfo::regCS2);
 #if !OS(WINDOWS)
-    ASSERT(GPRInfo::regCS3 == GPRInfo::tagTypeNumberRegister);
-    ASSERT(GPRInfo::regCS4 == GPRInfo::tagMaskRegister);
+    static_assert(GPRInfo::regCS3 == GPRInfo::numberTagRegister, "");
+    static_assert(GPRInfo::regCS4 == GPRInfo::notCellMaskRegister, "");
     result.set(GPRInfo::regCS3);
     result.set(GPRInfo::regCS4);
 #else
     result.set(GPRInfo::regCS3);
     result.set(GPRInfo::regCS4);
-    ASSERT(GPRInfo::regCS5 == GPRInfo::tagTypeNumberRegister);
-    ASSERT(GPRInfo::regCS6 == GPRInfo::tagMaskRegister);
+    static_assert(GPRInfo::regCS5 == GPRInfo::numberTagRegister, "");
+    static_assert(GPRInfo::regCS6 == GPRInfo::notCellMaskRegister, "");
     result.set(GPRInfo::regCS5);
     result.set(GPRInfo::regCS6);
 #endif
 #elif CPU(ARM_THUMB2)
+    result.set(GPRInfo::regCS1);
 #elif CPU(ARM64)
-    ASSERT(GPRInfo::regCS8 == GPRInfo::tagTypeNumberRegister);
-    ASSERT(GPRInfo::regCS9 == GPRInfo::tagMaskRegister);
+    static_assert(GPRInfo::regCS8 == GPRInfo::numberTagRegister, "");
+    static_assert(GPRInfo::regCS9 == GPRInfo::notCellMaskRegister, "");
     result.set(GPRInfo::regCS8);
     result.set(GPRInfo::regCS9);
 #elif CPU(MIPS)
 #else
     UNREACHABLE_FOR_PLATFORM();
@@ -247,12 +251,12 @@
 #if ENABLE(FTL_JIT)
 #if CPU(X86_64) && !OS(WINDOWS)
     result.set(GPRInfo::regCS0);
     result.set(GPRInfo::regCS1);
     result.set(GPRInfo::regCS2);
-    ASSERT(GPRInfo::regCS3 == GPRInfo::tagTypeNumberRegister);
-    ASSERT(GPRInfo::regCS4 == GPRInfo::tagMaskRegister);
+    static_assert(GPRInfo::regCS3 == GPRInfo::numberTagRegister, "");
+    static_assert(GPRInfo::regCS4 == GPRInfo::notCellMaskRegister, "");
     result.set(GPRInfo::regCS3);
     result.set(GPRInfo::regCS4);
 #elif CPU(ARM64)
     // B3 might save and use all ARM64 callee saves specified in the ABI.
     result.set(GPRInfo::regCS0);
@@ -261,12 +265,12 @@
     result.set(GPRInfo::regCS3);
     result.set(GPRInfo::regCS4);
     result.set(GPRInfo::regCS5);
     result.set(GPRInfo::regCS6);
     result.set(GPRInfo::regCS7);
-    ASSERT(GPRInfo::regCS8 == GPRInfo::tagTypeNumberRegister);
-    ASSERT(GPRInfo::regCS9 == GPRInfo::tagMaskRegister);
+    static_assert(GPRInfo::regCS8 == GPRInfo::numberTagRegister, "");
+    static_assert(GPRInfo::regCS9 == GPRInfo::notCellMaskRegister, "");
     result.set(GPRInfo::regCS8);
     result.set(GPRInfo::regCS9);
     result.set(FPRInfo::fpRegCS0);
     result.set(FPRInfo::fpRegCS1);
     result.set(FPRInfo::fpRegCS2);
