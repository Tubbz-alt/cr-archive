diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceRequestBase.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceRequestBase.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceRequestBase.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceRequestBase.h
@@ -27,10 +27,11 @@
 
 #ifndef ResourceRequestBase_h
 #define ResourceRequestBase_h
 
 #include "FormData.h"
+#include "FrameLoaderTypes.h"
 #include "HTTPHeaderMap.h"
 #include "IntRect.h"
 #include "ResourceLoadPriority.h"
 #include <wtf/URL.h>
 
@@ -71,11 +72,11 @@
     WEBCORE_EXPORT void removeCredentials();
 
     WEBCORE_EXPORT ResourceRequestCachePolicy cachePolicy() const;
     WEBCORE_EXPORT void setCachePolicy(ResourceRequestCachePolicy cachePolicy);
 
-    double timeoutInterval() const; // May return 0 when using platform default.
+    WEBCORE_EXPORT double timeoutInterval() const; // May return 0 when using platform default.
     void setTimeoutInterval(double timeoutInterval);
 
     WEBCORE_EXPORT const URL& firstPartyForCookies() const;
     WEBCORE_EXPORT void setFirstPartyForCookies(const URL&);
 
@@ -179,14 +180,13 @@
     const Optional<int>& inspectorInitiatorNodeIdentifier() const { return m_inspectorInitiatorNodeIdentifier; }
     void setInspectorInitiatorNodeIdentifier(int inspectorInitiatorNodeIdentifier) { m_inspectorInitiatorNodeIdentifier = inspectorInitiatorNodeIdentifier; }
 
 #if USE(SYSTEM_PREVIEW)
     WEBCORE_EXPORT bool isSystemPreview() const;
-    WEBCORE_EXPORT void setSystemPreview(bool);
 
-    WEBCORE_EXPORT const IntRect& systemPreviewRect() const;
-    WEBCORE_EXPORT void setSystemPreviewRect(const IntRect&);
+    WEBCORE_EXPORT SystemPreviewInfo systemPreviewInfo() const;
+    WEBCORE_EXPORT void setSystemPreviewInfo(const SystemPreviewInfo&);
 #endif
 
 #if !PLATFORM(COCOA)
     bool encodingRequiresPlatformData() const { return true; }
 #endif
@@ -199,23 +199,32 @@
     WEBCORE_EXPORT static bool equal(const ResourceRequest&, const ResourceRequest&);
 
 protected:
     // Used when ResourceRequest is initialized from a platform representation of the request
     ResourceRequestBase()
-        : m_platformRequestUpdated(true)
+        : m_allowCookies(false)
+        , m_resourceRequestUpdated(false)
+        , m_platformRequestUpdated(true)
+        , m_resourceRequestBodyUpdated(false)
         , m_platformRequestBodyUpdated(true)
+        , m_hiddenFromInspector(false)
+        , m_isTopSite(false)
     {
     }
 
     ResourceRequestBase(const URL& url, ResourceRequestCachePolicy policy)
         : m_url(url)
         , m_timeoutInterval(s_defaultTimeoutInterval)
         , m_httpMethod("GET"_s)
         , m_cachePolicy(policy)
         , m_allowCookies(true)
         , m_resourceRequestUpdated(true)
+        , m_platformRequestUpdated(false)
         , m_resourceRequestBodyUpdated(true)
+        , m_platformRequestBodyUpdated(false)
+        , m_hiddenFromInspector(false)
+        , m_isTopSite(false)
     {
     }
 
     void updatePlatformRequest(HTTPBodyUpdatePolicy = HTTPBodyUpdatePolicy::DoNotUpdateHTTPBody) const;
     void updateResourceRequest(HTTPBodyUpdatePolicy = HTTPBodyUpdatePolicy::DoNotUpdateHTTPBody) const;
@@ -238,20 +247,19 @@
     ResourceRequestCachePolicy m_cachePolicy { ResourceRequestCachePolicy::UseProtocolCachePolicy };
     SameSiteDisposition m_sameSiteDisposition { SameSiteDisposition::Unspecified };
     ResourceLoadPriority m_priority { ResourceLoadPriority::Low };
     Requester m_requester { Requester::Unspecified };
     Optional<int> m_inspectorInitiatorNodeIdentifier;
-    bool m_allowCookies { false };
-    mutable bool m_resourceRequestUpdated { false };
-    mutable bool m_platformRequestUpdated { false };
-    mutable bool m_resourceRequestBodyUpdated { false };
-    mutable bool m_platformRequestBodyUpdated { false };
-    bool m_hiddenFromInspector { false };
-    bool m_isTopSite { false };
+    bool m_allowCookies : 1;
+    mutable bool m_resourceRequestUpdated : 1;
+    mutable bool m_platformRequestUpdated : 1;
+    mutable bool m_resourceRequestBodyUpdated : 1;
+    mutable bool m_platformRequestBodyUpdated : 1;
+    bool m_hiddenFromInspector : 1;
+    bool m_isTopSite : 1;
 #if USE(SYSTEM_PREVIEW)
-    bool m_isSystemPreview { false };
-    IntRect m_systemPreviewRect;
+    Optional<SystemPreviewInfo> m_systemPreviewInfo;
 #endif
 
 private:
     const ResourceRequest& asResourceRequest() const;
 
