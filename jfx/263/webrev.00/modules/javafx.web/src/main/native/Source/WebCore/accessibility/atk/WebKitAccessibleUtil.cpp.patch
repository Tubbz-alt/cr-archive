diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessibleUtil.cpp b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessibleUtil.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessibleUtil.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/atk/WebKitAccessibleUtil.cpp
@@ -174,11 +174,11 @@
         && intersectsResult.releaseReturnValue()
         && (&range->endContainer() != &node || range->endOffset())
         && (&range->startContainer() != lastDescendant || range->startOffset() != lastOffset);
 }
 
-AccessibilityObject* objectFocusedAndCaretOffsetUnignored(AccessibilityObject* referenceObject, int& offset)
+AXCoreObject* objectFocusedAndCaretOffsetUnignored(AXCoreObject* referenceObject, int& offset)
 {
     // Indication that something bogus has transpired.
     offset = -1;
 
     Document* document = referenceObject->document();
@@ -196,11 +196,11 @@
     AccessibilityObject* focusedObject = document->axObjectCache()->getOrCreate(focusedRenderer);
     if (!focusedObject)
         return nullptr;
 
     // Look for the actual (not ignoring accessibility) selected object.
-    AccessibilityObject* firstUnignoredParent = focusedObject;
+    AXCoreObject* firstUnignoredParent = focusedObject;
     if (firstUnignoredParent->accessibilityIsIgnored())
         firstUnignoredParent = firstUnignoredParent->parentObjectUnignored();
     if (!firstUnignoredParent)
         return nullptr;
 
@@ -222,11 +222,11 @@
         // We need to use the first child's node of the reference
         // object as the start point to calculate the caret offset
         // because we want it to be relative to the object of
         // reference, not just to the focused object (which could have
         // previous siblings which should be taken into account too).
-        AccessibilityObject* axFirstChild = referenceObject->firstChild();
+        AXCoreObject* axFirstChild = referenceObject->firstChild();
         if (axFirstChild)
             startNode = axFirstChild->node();
     }
     // Getting the Position of a PseudoElement now triggers an assertion.
     // This can occur when clicking on empty space in a render block.
