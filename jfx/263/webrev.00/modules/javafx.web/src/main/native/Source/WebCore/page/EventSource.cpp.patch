diff a/modules/javafx.web/src/main/native/Source/WebCore/page/EventSource.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/EventSource.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/EventSource.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/EventSource.cpp
@@ -43,10 +43,11 @@
 #include "ScriptExecutionContext.h"
 #include "SecurityOrigin.h"
 #include "TextResourceDecoder.h"
 #include "ThreadableLoader.h"
 #include <wtf/IsoMallocInlines.h>
+#include <wtf/SetForScope.h>
 
 namespace WebCore {
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(EventSource);
 
@@ -55,12 +56,13 @@
 inline EventSource::EventSource(ScriptExecutionContext& context, const URL& url, const Init& eventSourceInit)
     : ActiveDOMObject(&context)
     , m_url(url)
     , m_withCredentials(eventSourceInit.withCredentials)
     , m_decoder(TextResourceDecoder::create("text/plain"_s, "UTF-8"))
-    , m_connectTimer(*this, &EventSource::connect)
+    , m_connectTimer(&context, *this, &EventSource::connect)
 {
+    m_connectTimer.suspendIfNeeded();
 }
 
 ExceptionOr<Ref<EventSource>> EventSource::create(ScriptExecutionContext& context, const String& url, const Init& eventSourceInit)
 {
     if (url.isEmpty())
@@ -139,13 +141,14 @@
     m_connectTimer.startOneShot(0_s);
 }
 
 void EventSource::scheduleReconnect()
 {
+    RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(!m_isSuspendedForBackForwardCache);
     m_state = CONNECTING;
     m_connectTimer.startOneShot(1_ms * m_reconnectDelay);
-    dispatchEvent(Event::create(eventNames().errorEvent, Event::CanBubble::No, Event::IsCancelable::No));
+    dispatchErrorEvent();
 }
 
 void EventSource::close()
 {
     if (m_state == CLOSED) {
@@ -153,14 +156,14 @@
         return;
     }
 
     // Stop trying to connect/reconnect if EventSource was explicitly closed or if ActiveDOMObject::stop() was called.
     if (m_connectTimer.isActive())
-        m_connectTimer.stop();
+        m_connectTimer.cancel();
 
     if (m_requestInFlight)
-        m_loader->cancel();
+        doExplicitLoadCancellation();
     else {
         m_state = CLOSED;
         unsetPendingActivity(*this);
     }
 }
@@ -194,35 +197,43 @@
 
 void EventSource::didReceiveResponse(unsigned long, const ResourceResponse& response)
 {
     ASSERT(m_state == CONNECTING);
     ASSERT(m_requestInFlight);
+    RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(!m_isSuspendedForBackForwardCache);
 
     if (!responseIsValid(response)) {
-        m_loader->cancel();
-        dispatchEvent(Event::create(eventNames().errorEvent, Event::CanBubble::No, Event::IsCancelable::No));
+        doExplicitLoadCancellation();
+        dispatchErrorEvent();
         return;
     }
 
     m_eventStreamOrigin = SecurityOriginData::fromURL(response.url()).toString();
     m_state = OPEN;
     dispatchEvent(Event::create(eventNames().openEvent, Event::CanBubble::No, Event::IsCancelable::No));
 }
 
+void EventSource::dispatchErrorEvent()
+{
+    dispatchEvent(Event::create(eventNames().errorEvent, Event::CanBubble::No, Event::IsCancelable::No));
+}
+
 void EventSource::didReceiveData(const char* data, int length)
 {
     ASSERT(m_state == OPEN);
     ASSERT(m_requestInFlight);
+    RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(!m_isSuspendedForBackForwardCache);
 
     append(m_receiveBuffer, m_decoder->decode(data, length));
     parseEventStream();
 }
 
 void EventSource::didFinishLoading(unsigned long)
 {
     ASSERT(m_state == OPEN);
     ASSERT(m_requestInFlight);
+    RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(!m_isSuspendedForBackForwardCache);
 
     append(m_receiveBuffer, m_decoder->flush());
     parseEventStream();
 
     // Discard everything that has not been dispatched by now.
@@ -245,10 +256,18 @@
         return;
     }
 
     ASSERT(m_requestInFlight);
 
+    // This is the case where the load gets cancelled on navigating away. We only fire an error event and attempt to reconnect
+    // if we end up getting resumed from back/forward cache.
+    if (error.isCancellation() && !m_isDoingExplicitCancellation) {
+        m_shouldReconnectOnResume = true;
+        m_requestInFlight = false;
+        return;
+    }
+
     if (error.isCancellation())
         m_state = CLOSED;
 
     // FIXME: Why don't we need to clear data members here as in didFinishLoading?
 
@@ -256,22 +275,30 @@
 }
 
 void EventSource::abortConnectionAttempt()
 {
     ASSERT(m_state == CONNECTING);
+    RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(!m_isSuspendedForBackForwardCache);
 
     if (m_requestInFlight)
-        m_loader->cancel();
+        doExplicitLoadCancellation();
     else {
         m_state = CLOSED;
         unsetPendingActivity(*this);
     }
 
     ASSERT(m_state == CLOSED);
     dispatchEvent(Event::create(eventNames().errorEvent, Event::CanBubble::No, Event::IsCancelable::No));
 }
 
+void EventSource::doExplicitLoadCancellation()
+{
+    ASSERT(m_requestInFlight);
+    SetForScope<bool> explicitLoadCancellation(m_isDoingExplicitCancellation, true);
+    m_loader->cancel();
+}
+
 void EventSource::parseEventStream()
 {
     unsigned position = 0;
     unsigned size = m_receiveBuffer.size();
     while (position < size) {
@@ -374,18 +401,37 @@
 const char* EventSource::activeDOMObjectName() const
 {
     return "EventSource";
 }
 
-bool EventSource::canSuspendForDocumentSuspension() const
+void EventSource::suspend(ReasonForSuspension reason)
+{
+    if (reason != ReasonForSuspension::BackForwardCache)
+        return;
+
+    m_isSuspendedForBackForwardCache = true;
+    RELEASE_ASSERT_WITH_MESSAGE(!m_requestInFlight, "Loads get cancelled before entering the BackForwardCache.");
+}
+
+void EventSource::resume()
 {
-    // FIXME: We should return true here when we can because this object is not actually currently active.
-    return false;
+    if (!m_isSuspendedForBackForwardCache)
+        return;
+
+    m_isSuspendedForBackForwardCache = false;
+    if (std::exchange(m_shouldReconnectOnResume, false)) {
+        scriptExecutionContext()->postTask([this, pendingActivity = makePendingActivity(*this)](ScriptExecutionContext&) {
+            if (!isContextStopped())
+                scheduleReconnect();
+        });
+    }
 }
 
 void EventSource::dispatchMessageEvent()
 {
+    RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(!m_isSuspendedForBackForwardCache);
+
     if (!m_currentlyParsedEventId.isNull())
         m_lastEventId = WTFMove(m_currentlyParsedEventId);
 
     auto& name = m_eventName.isEmpty() ? eventNames().messageEvent : m_eventName;
 
