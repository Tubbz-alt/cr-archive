diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/texmap/BitmapTextureGL.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/texmap/BitmapTextureGL.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/texmap/BitmapTextureGL.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/texmap/BitmapTextureGL.cpp
@@ -22,13 +22,12 @@
 #include "config.h"
 #include "BitmapTextureGL.h"
 
 #if USE(TEXTURE_MAPPER_GL)
 
-#include "Extensions3D.h"
+#include "ExtensionsGL.h"
 #include "FilterOperations.h"
-#include "Image.h"
 #include "LengthFunctions.h"
 #include "NativeImage.h"
 #include "NotImplemented.h"
 #include "TextureMapperShaderProgram.h"
 #include "Timer.h"
@@ -62,17 +61,18 @@
     return static_cast<BitmapTextureGL*>(texture);
 }
 
 BitmapTextureGL::BitmapTextureGL(const TextureMapperContextAttributes& contextAttributes, const Flags, GLint internalFormat)
     : m_contextAttributes(contextAttributes)
+    , m_format(GL_RGBA)
 {
     if (internalFormat != GL_DONT_CARE) {
-        m_internalFormat = m_format = internalFormat;
+        m_internalFormat = internalFormat;
         return;
     }
 
-    m_internalFormat = m_format = GL_RGBA;
+    m_internalFormat = GL_RGBA;
 }
 
 void BitmapTextureGL::didReset()
 {
     if (!m_id)
@@ -167,10 +167,29 @@
 #endif
 
     updateContents(imageData, targetRect, offset, bytesPerLine);
 }
 
+#if USE(ANGLE)
+void BitmapTextureGL::setPendingContents(RefPtr<Image>&& image)
+{
+    m_pendingContents = image;
+}
+
+void BitmapTextureGL::updatePendingContents(const IntRect& targetRect, const IntPoint& offset)
+{
+    if (!m_pendingContents)
+        return;
+
+    if (!isValid()) {
+        IntSize textureSize(m_pendingContents->size());
+        reset(textureSize);
+    }
+    updateContents(m_pendingContents.get(), targetRect, offset);
+}
+#endif
+
 static unsigned getPassesRequiredForFilter(FilterOperation::OperationType type)
 {
     switch (type) {
     case FilterOperation::GRAYSCALE:
     case FilterOperation::SEPIA:
