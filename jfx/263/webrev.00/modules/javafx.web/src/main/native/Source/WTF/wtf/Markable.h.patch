diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Markable.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/Markable.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Markable.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Markable.h
@@ -140,14 +140,34 @@
         if (bool(*this))
             return m_value;
         return WTF::nullopt;
     }
 
+    Optional<T> asOptional() const
+    {
+        return Optional<T>(*this);
+    }
+
 private:
     T m_value;
 };
 
+template <typename T, typename Traits> constexpr bool operator==(const Markable<T, Traits>& x, const Markable<T, Traits>& y)
+{
+    if (bool(x) != bool(y))
+        return false;
+    if (!bool(x))
+        return true;
+    return x.value() == y.value();
+}
+template <typename T, typename Traits> constexpr bool operator==(const Markable<T, Traits>& x, const T& v) { return bool(x) && x.value() == v; }
+template <typename T, typename Traits> constexpr bool operator==(const T& v, const Markable<T, Traits>& x) { return bool(x) && v == x.value(); }
+
+template <typename T, typename Traits> constexpr bool operator!=(const Markable<T, Traits>& x, const Markable<T, Traits>& y) { return !(x == y); }
+template <typename T, typename Traits> constexpr bool operator!=(const Markable<T, Traits>& x, const T& v) { return !(x == v); }
+template <typename T, typename Traits> constexpr bool operator!=(const T& v, const Markable<T, Traits>& x) { return !(v == x); }
+
 } // namespace WTF
 
 using WTF::Markable;
 using WTF::IntegralMarkableTraits;
 using WTF::EnumMarkableTraits;
