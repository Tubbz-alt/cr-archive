diff a/modules/javafx.web/src/main/native/Source/WebCore/html/OffscreenCanvas.idl b/modules/javafx.web/src/main/native/Source/WebCore/html/OffscreenCanvas.idl
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/OffscreenCanvas.idl
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/OffscreenCanvas.idl
@@ -21,11 +21,15 @@
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
 
-// typedef (OffscreenCanvasRenderingContext2D or WebGLRenderingContext) OffscreenRenderingContext;
+#if defined(ENABLE_WEBGL) && ENABLE_WEBGL
+typedef (OffscreenCanvasRenderingContext2D or WebGLRenderingContext) OffscreenRenderingContext;
+#else
+typedef (OffscreenCanvasRenderingContext2D) OffscreenRenderingContext;
+#endif
 
 dictionary ImageEncodeOptions
 {
    DOMString type = "image/png";
    unrestricted double quality = 1.0;
@@ -39,16 +43,17 @@
 
 [
     ConstructorCallWith=ScriptExecutionContext,
     Constructor([EnforceRange] unsigned long width, [EnforceRange] unsigned long height),
     GenerateIsReachable=Impl,
-    EnabledAtRuntime=ImageBitmapOffscreenCanvas,
-    Exposed=(Window)
+    EnabledAtRuntime=OffscreenCanvas,
+    Conditional=OFFSCREEN_CANVAS,
+    Exposed=(Window,Worker)
 ] interface OffscreenCanvas : EventTarget {
     attribute [EnforceRange] unsigned long width;
     attribute [EnforceRange] unsigned long height;
 
-    [CallWith=ExecState, MayThrowException, Conditional=WEBGL] WebGLRenderingContext? getContext(OffscreenRenderingContextType contextType, any... arguments);
-    ImageBitmap transferToImageBitmap();
-    // Promise<Blob> convertToBlob(optional ImageEncodeOptions options);
+    [CallWith=GlobalObject, MayThrowException] OffscreenRenderingContext? getContext(OffscreenRenderingContextType contextType, any... arguments);
+    [MayThrowException] ImageBitmap transferToImageBitmap();
+    Promise<Blob> convertToBlob(optional ImageEncodeOptions options);
 
 };
