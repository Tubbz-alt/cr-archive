diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityMathMLElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityMathMLElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityMathMLElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityMathMLElement.cpp
@@ -200,20 +200,20 @@
     return node() && node()->hasTagName(MathMLNames::mtdTag);
 }
 
 bool AccessibilityMathMLElement::isMathScriptObject(AccessibilityMathScriptObjectType type) const
 {
-    AccessibilityObject* parent = parentObjectUnignored();
+    AXCoreObject* parent = parentObjectUnignored();
     if (!parent)
         return false;
 
     return type == AccessibilityMathScriptObjectType::Subscript ? this == parent->mathSubscriptObject() : this == parent->mathSuperscriptObject();
 }
 
 bool AccessibilityMathMLElement::isMathMultiscriptObject(AccessibilityMathMultiscriptObjectType type) const
 {
-    AccessibilityObject* parent = parentObjectUnignored();
+    AXCoreObject* parent = parentObjectUnignored();
     if (!parent || !parent->isMathMultiscript())
         return false;
 
     // The scripts in a MathML <mmultiscripts> element consist of one or more
     // subscript, superscript pairs. In order to determine if this object is
@@ -234,11 +234,11 @@
     }
 
     return false;
 }
 
-AccessibilityObject* AccessibilityMathMLElement::mathRadicandObject()
+AXCoreObject* AccessibilityMathMLElement::mathRadicandObject()
 {
     if (!isMathRoot())
         return nullptr;
 
     // For MathSquareRoot, we actually return the first child of the base.
@@ -248,11 +248,11 @@
         return nullptr;
 
     return children[0].get();
 }
 
-AccessibilityObject* AccessibilityMathMLElement::mathRootIndexObject()
+AXCoreObject* AccessibilityMathMLElement::mathRootIndexObject()
 {
     if (!isMathRoot() || isMathSquareRoot())
         return nullptr;
 
     const auto& children = this->children();
@@ -260,11 +260,11 @@
         return nullptr;
 
     return children[1].get();
 }
 
-AccessibilityObject* AccessibilityMathMLElement::mathNumeratorObject()
+AXCoreObject* AccessibilityMathMLElement::mathNumeratorObject()
 {
     if (!isMathFraction())
         return nullptr;
 
     const auto& children = this->children();
@@ -272,11 +272,11 @@
         return nullptr;
 
     return children[0].get();
 }
 
-AccessibilityObject* AccessibilityMathMLElement::mathDenominatorObject()
+AXCoreObject* AccessibilityMathMLElement::mathDenominatorObject()
 {
     if (!isMathFraction())
         return nullptr;
 
     const auto& children = this->children();
@@ -284,11 +284,11 @@
         return nullptr;
 
     return children[1].get();
 }
 
-AccessibilityObject* AccessibilityMathMLElement::mathUnderObject()
+AXCoreObject* AccessibilityMathMLElement::mathUnderObject()
 {
     if (!isMathUnderOver() || !node())
         return nullptr;
 
     const auto& children = this->children();
@@ -299,11 +299,11 @@
         return children[1].get();
 
     return nullptr;
 }
 
-AccessibilityObject* AccessibilityMathMLElement::mathOverObject()
+AXCoreObject* AccessibilityMathMLElement::mathOverObject()
 {
     if (!isMathUnderOver() || !node())
         return nullptr;
 
     const auto& children = this->children();
@@ -316,11 +316,11 @@
         return children[2].get();
 
     return nullptr;
 }
 
-AccessibilityObject* AccessibilityMathMLElement::mathBaseObject()
+AXCoreObject* AccessibilityMathMLElement::mathBaseObject()
 {
     if (!isMathSubscriptSuperscript() && !isMathUnderOver() && !isMathMultiscript())
         return nullptr;
 
     const auto& children = this->children();
@@ -329,11 +329,11 @@
         return children[0].get();
 
     return nullptr;
 }
 
-AccessibilityObject* AccessibilityMathMLElement::mathSubscriptObject()
+AXCoreObject* AccessibilityMathMLElement::mathSubscriptObject()
 {
     if (!isMathSubscriptSuperscript() || !node())
         return nullptr;
 
     const auto& children = this->children();
@@ -344,11 +344,11 @@
         return children[1].get();
 
     return nullptr;
 }
 
-AccessibilityObject* AccessibilityMathMLElement::mathSuperscriptObject()
+AXCoreObject* AccessibilityMathMLElement::mathSuperscriptObject()
 {
     if (!isMathSubscriptSuperscript() || !node())
         return nullptr;
 
     const auto& children = this->children();
