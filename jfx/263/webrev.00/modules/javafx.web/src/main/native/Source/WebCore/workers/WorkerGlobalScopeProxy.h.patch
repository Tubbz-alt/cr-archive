diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerGlobalScopeProxy.h b/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerGlobalScopeProxy.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerGlobalScopeProxy.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerGlobalScopeProxy.h
@@ -33,31 +33,31 @@
 
 #include "MessageWithMessagePorts.h"
 #include <JavaScriptCore/RuntimeFlags.h>
 #include <wtf/MonotonicTime.h>
 
-namespace PAL {
-class SessionID;
-}
-
 namespace WebCore {
 
 class ContentSecurityPolicyResponseHeaders;
 class Worker;
+enum class ReferrerPolicy : uint8_t;
 
 // A proxy to talk to the worker context.
 class WorkerGlobalScopeProxy {
 public:
     static WorkerGlobalScopeProxy& create(Worker&);
 
-    virtual void startWorkerGlobalScope(const URL& scriptURL, const String& name, const String& userAgent, bool isOnline, const String& sourceCode, const ContentSecurityPolicyResponseHeaders&, bool shouldBypassMainWorldContentSecurityPolicy, MonotonicTime timeOrigin, JSC::RuntimeFlags, PAL::SessionID) = 0;
+    virtual void startWorkerGlobalScope(const URL& scriptURL, const String& name, const String& userAgent, bool isOnline, const String& sourceCode, const ContentSecurityPolicyResponseHeaders&, bool shouldBypassMainWorldContentSecurityPolicy, MonotonicTime timeOrigin, ReferrerPolicy, JSC::RuntimeFlags) = 0;
     virtual void terminateWorkerGlobalScope() = 0;
     virtual void postMessageToWorkerGlobalScope(MessageWithMessagePorts&&) = 0;
     virtual bool hasPendingActivity() const = 0;
     virtual void workerObjectDestroyed() = 0;
     virtual void notifyNetworkStateChange(bool isOnline) = 0;
 
+    virtual void suspendForBackForwardCache() = 0;
+    virtual void resumeForBackForwardCache() = 0;
+
 protected:
     virtual ~WorkerGlobalScopeProxy() = default;
 };
 
 } // namespace WebCore
