diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimationAdditiveValueFunctionImpl.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimationAdditiveValueFunctionImpl.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimationAdditiveValueFunctionImpl.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimationAdditiveValueFunctionImpl.h
@@ -27,14 +27,19 @@
 
 #include "Color.h"
 #include "FloatRect.h"
 #include "SVGAngleValue.h"
 #include "SVGAnimationAdditiveValueFunction.h"
+#include "SVGLengthContext.h"
 #include "SVGLengthValue.h"
 #include "SVGPathByteStream.h"
 #include "SVGPropertyTraits.h"
 
+#if PLATFORM(JAVA)
+#include <wtf/java/JavaMath.h>
+#endif
+
 namespace WebCore {
 
 class SVGAnimationAngleFunction : public SVGAnimationAdditiveValueFunction<SVGAngleValue> {
 public:
     using Base = SVGAnimationAdditiveValueFunction<SVGAngleValue>;
@@ -99,11 +104,15 @@
         if (!toColor.isValid())
             return { };
         float red = fromColor.red() - toColor.red();
         float green = fromColor.green() - toColor.green();
         float blue = fromColor.blue() - toColor.blue();
-        return sqrtf(red * red + green * green + blue * blue);
+#if PLATFORM(JAVA)
+        return javamath::hypot(red, green, blue);
+#else
+        return std::hypot(red, green, blue);
+#endif
     }
 
 private:
     void addFromAndToValues(SVGElement*) override
     {
@@ -175,19 +184,19 @@
     }
 
     void animate(SVGElement* targetElement, float progress, unsigned repeatCount, SVGLengthValue& animated)
     {
         SVGLengthContext lengthContext(targetElement);
-        SVGLengthType unitType = progress < 0.5 ? m_from.unitType() : m_to.unitType();
+        SVGLengthType lengthType = progress < 0.5 ? m_from.lengthType() : m_to.lengthType();
 
         float from = (m_animationMode == AnimationMode::To ? animated : m_from).value(lengthContext);
         float to = m_to.value(lengthContext);
         float toAtEndOfDuration = this->toAtEndOfDuration().value(lengthContext);
         float value = animated.value(lengthContext);
 
         value = Base::animate(progress, repeatCount, from, to, toAtEndOfDuration, value);
-        animated = { lengthContext, value, m_lengthMode, unitType };
+        animated = { lengthContext, value, lengthType, m_lengthMode };
     }
 
     Optional<float> calculateDistance(SVGElement* targetElement, const String& from, const String& to) const override
     {
         SVGLengthContext lengthContext(targetElement);
@@ -198,11 +207,11 @@
 
 private:
     void addFromAndToValues(SVGElement* targetElement) override
     {
         SVGLengthContext lengthContext(targetElement);
-        m_to.setValue(m_to.value(lengthContext) + m_from.value(lengthContext), lengthContext);
+        m_to.setValue(lengthContext, m_to.value(lengthContext) + m_from.value(lengthContext));
     }
 
     SVGLengthMode m_lengthMode;
 };
 
