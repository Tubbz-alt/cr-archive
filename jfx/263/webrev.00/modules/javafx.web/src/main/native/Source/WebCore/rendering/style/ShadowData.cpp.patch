diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/ShadowData.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/ShadowData.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/ShadowData.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/ShadowData.cpp
@@ -21,17 +21,18 @@
 
 #include "config.h"
 #include "ShadowData.h"
 
 #include <wtf/PointerComparison.h>
+#include <wtf/text/TextStream.h>
 
 namespace WebCore {
 
 ShadowData::ShadowData(const ShadowData& o)
     : m_location(o.m_location)
-    , m_radius(o.m_radius)
     , m_spread(o.m_spread)
+    , m_radius(o.m_radius)
     , m_color(o.m_color)
     , m_style(o.m_style)
     , m_isWebkitBoxShadow(o.m_isWebkitBoxShadow)
     , m_next(o.m_next ? makeUnique<ShadowData>(*o.m_next) : nullptr)
 {
@@ -55,15 +56,15 @@
         && m_style == o.m_style
         && m_color == o.m_color
         && m_isWebkitBoxShadow == o.m_isWebkitBoxShadow;
 }
 
-static inline void calculateShadowExtent(const ShadowData* shadow, int additionalOutlineSize, int& shadowLeft, int& shadowRight, int& shadowTop, int& shadowBottom)
+static inline void calculateShadowExtent(const ShadowData* shadow, LayoutUnit additionalOutlineSize, LayoutUnit& shadowLeft, LayoutUnit& shadowRight, LayoutUnit& shadowTop, LayoutUnit& shadowBottom)
 {
     do {
-        int extentAndSpread = shadow->paintingExtent() + shadow->spread() + additionalOutlineSize;
-        if (shadow->style() == Normal) {
+        LayoutUnit extentAndSpread = shadow->paintingExtent() + shadow->spread() + additionalOutlineSize;
+        if (shadow->style() == ShadowStyle::Normal) {
             shadowLeft = std::min(shadow->x() - extentAndSpread, shadowLeft);
             shadowRight = std::max(shadow->x() + extentAndSpread, shadowRight);
             shadowTop = std::min(shadow->y() - extentAndSpread, shadowTop);
             shadowBottom = std::max(shadow->y() + extentAndSpread, shadowBottom);
         }
@@ -72,30 +73,40 @@
     } while (shadow);
 }
 
 void ShadowData::adjustRectForShadow(LayoutRect& rect, int additionalOutlineSize) const
 {
-    int shadowLeft = 0;
-    int shadowRight = 0;
-    int shadowTop = 0;
-    int shadowBottom = 0;
+    LayoutUnit shadowLeft;
+    LayoutUnit shadowRight;
+    LayoutUnit shadowTop;
+    LayoutUnit shadowBottom;
     calculateShadowExtent(this, additionalOutlineSize, shadowLeft, shadowRight, shadowTop, shadowBottom);
 
     rect.move(shadowLeft, shadowTop);
     rect.setWidth(rect.width() - shadowLeft + shadowRight);
     rect.setHeight(rect.height() - shadowTop + shadowBottom);
 }
 
 void ShadowData::adjustRectForShadow(FloatRect& rect, int additionalOutlineSize) const
 {
-    int shadowLeft = 0;
-    int shadowRight = 0;
-    int shadowTop = 0;
-    int shadowBottom = 0;
+    LayoutUnit shadowLeft = 0;
+    LayoutUnit shadowRight = 0;
+    LayoutUnit shadowTop = 0;
+    LayoutUnit shadowBottom = 0;
     calculateShadowExtent(this, additionalOutlineSize, shadowLeft, shadowRight, shadowTop, shadowBottom);
 
     rect.move(shadowLeft, shadowTop);
     rect.setWidth(rect.width() - shadowLeft + shadowRight);
     rect.setHeight(rect.height() - shadowTop + shadowBottom);
 }
 
+TextStream& operator<<(TextStream& ts, const ShadowData& data)
+{
+    ts.dumpProperty("location", data.location());
+    ts.dumpProperty("radius", data.radius());
+    ts.dumpProperty("spread", data.spread());
+    ts.dumpProperty("color", data.color());
+
+    return ts;
+}
+
 } // namespace WebCore
