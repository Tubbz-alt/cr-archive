diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/tableformatting/TableFormattingContext.h b/modules/javafx.web/src/main/native/Source/WebCore/layout/tableformatting/TableFormattingContext.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/tableformatting/TableFormattingContext.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/tableformatting/TableFormattingContext.h
@@ -26,38 +26,64 @@
 #pragma once
 
 #if ENABLE(LAYOUT_FORMATTING_CONTEXT)
 
 #include "FormattingContext.h"
-#include "TableFormattingState.h"
+#include "TableGrid.h"
 #include <wtf/IsoMalloc.h>
 
 namespace WebCore {
 namespace Layout {
 
+class InvalidationState;
+class TableFormattingState;
 // This class implements the layout logic for table formatting contexts.
 // https://www.w3.org/TR/CSS22/tables.html
-class TableFormattingContext : public FormattingContext {
+class TableFormattingContext final : public FormattingContext {
     WTF_MAKE_ISO_ALLOCATED(TableFormattingContext);
 public:
-    TableFormattingContext(const Box& formattingContextRoot, TableFormattingState&);
-    void layout() const override;
+    TableFormattingContext(const Container& formattingContextRoot, TableFormattingState&);
+    void layoutInFlowContent(InvalidationState&, const HorizontalConstraints&, const VerticalConstraints&) override;
 
 private:
     class Geometry : public FormattingContext::Geometry {
     public:
-        static HeightAndMargin tableCellHeightAndMargin(const LayoutState&, const Box&);
+        ContentHeightAndMargin tableCellHeightAndMargin(const Box&) const;
+        Optional<LayoutUnit> computedColumnWidth(const Box& columnBox) const;
+
+    private:
+        friend class TableFormattingContext;
+        Geometry(const TableFormattingContext&);
+
+        const TableFormattingContext& formattingContext() const { return downcast<TableFormattingContext>(FormattingContext::Geometry::formattingContext()); }
     };
+    TableFormattingContext::Geometry geometry() const { return Geometry(*this); }
 
-    IntrinsicWidthConstraints computedIntrinsicWidthConstraints() const override;
-    LayoutUnit computedTableWidth() const;
+    IntrinsicWidthConstraints computedIntrinsicWidthConstraints() override;
+    void layoutTableCellBox(const Box& cellLayoutBox, const TableGrid::Column&, InvalidationState&, const HorizontalConstraints&);
+    void positionTableCells();
+    void setComputedGeometryForRows();
+    void setComputedGeometryForSections();
 
-    void ensureTableGrid() const;
-    void computePreferredWidthForColumns() const;
-    void distributeAvailableWidth(LayoutUnit extraHorizontalSpace) const;
+    void ensureTableGrid();
+    void computePreferredWidthForColumns();
+    void computeAndDistributeExtraHorizontalSpace();
+    enum class WidthConstraintsType { Minimum, Maximum };
+    void useAsContentLogicalWidth(WidthConstraintsType);
 
-    TableFormattingState& formattingState() const { return downcast<TableFormattingState>(FormattingContext::formattingState()); }
+    void initializeDisplayBoxToBlank(Display::Box&) const;
+
+    const TableFormattingState& formattingState() const { return downcast<TableFormattingState>(FormattingContext::formattingState()); }
+    TableFormattingState& formattingState() { return downcast<TableFormattingState>(FormattingContext::formattingState()); }
 };
 
+inline TableFormattingContext::Geometry::Geometry(const TableFormattingContext& tableFormattingContext)
+    : FormattingContext::Geometry(tableFormattingContext)
+{
 }
+
 }
+}
+
+SPECIALIZE_TYPE_TRAITS_LAYOUT_FORMATTING_CONTEXT(TableFormattingContext, isTableFormattingContext())
+
 #endif
