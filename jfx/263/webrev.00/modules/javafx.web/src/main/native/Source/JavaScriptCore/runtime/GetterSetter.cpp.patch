diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GetterSetter.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GetterSetter.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GetterSetter.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GetterSetter.cpp
@@ -31,11 +31,11 @@
 
 namespace JSC {
 
 STATIC_ASSERT_IS_TRIVIALLY_DESTRUCTIBLE(GetterSetter);
 
-const ClassInfo GetterSetter::s_info = { "GetterSetter", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(GetterSetter) };
+const ClassInfo GetterSetter::s_info = { "GetterSetter", nullptr, nullptr, nullptr, CREATE_METHOD_TABLE(GetterSetter) };
 
 void GetterSetter::visitChildren(JSCell* cell, SlotVisitor& visitor)
 {
     GetterSetter* thisObject = jsCast<GetterSetter*>(cell);
     ASSERT_GC_OBJECT_INHERITS(thisObject, info());
@@ -43,44 +43,44 @@
 
     visitor.append(thisObject->m_getter);
     visitor.append(thisObject->m_setter);
 }
 
-JSValue callGetter(ExecState* exec, JSValue base, JSValue getterSetter)
+JSValue callGetter(JSGlobalObject* globalObject, JSValue base, JSValue getterSetter)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
     // FIXME: Some callers may invoke get() without checking for an exception first.
     // We work around that by checking here.
     RETURN_IF_EXCEPTION(scope, scope.exception()->value());
 
     JSObject* getter = jsCast<GetterSetter*>(getterSetter)->getter();
 
     CallData callData;
     CallType callType = getter->methodTable(vm)->getCallData(getter, callData);
-    RELEASE_AND_RETURN(scope, call(exec, getter, callType, callData, base, ArgList()));
+    RELEASE_AND_RETURN(scope, call(globalObject, getter, callType, callData, base, ArgList()));
 }
 
-bool callSetter(ExecState* exec, JSValue base, JSValue getterSetter, JSValue value, ECMAMode ecmaMode)
+bool callSetter(JSGlobalObject* globalObject, JSValue base, JSValue getterSetter, JSValue value, ECMAMode ecmaMode)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     GetterSetter* getterSetterObj = jsCast<GetterSetter*>(getterSetter);
 
     if (getterSetterObj->isSetterNull())
-        return typeError(exec, scope, ecmaMode == StrictMode, ReadonlyPropertyWriteError);
+        return typeError(globalObject, scope, ecmaMode == StrictMode, ReadonlyPropertyWriteError);
 
     JSObject* setter = getterSetterObj->setter();
 
     MarkedArgumentBuffer args;
     args.append(value);
     ASSERT(!args.hasOverflowed());
 
     CallData callData;
     CallType callType = setter->methodTable(vm)->getCallData(setter, callData);
     scope.release();
-    call(exec, setter, callType, callData, base, args);
+    call(globalObject, setter, callType, callData, base, args);
     return true;
 }
 
 } // namespace JSC
