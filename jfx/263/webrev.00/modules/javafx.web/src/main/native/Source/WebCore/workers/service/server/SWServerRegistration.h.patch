diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/SWServerRegistration.h b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/SWServerRegistration.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/SWServerRegistration.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/server/SWServerRegistration.h
@@ -29,13 +29,15 @@
 
 #include "SWServer.h"
 #include "ServiceWorkerClientIdentifier.h"
 #include "ServiceWorkerRegistrationData.h"
 #include "ServiceWorkerTypes.h"
+#include "Timer.h"
 #include <wtf/HashCountedSet.h>
 #include <wtf/MonotonicTime.h>
 #include <wtf/WallTime.h>
+#include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
 class SWServer;
 class SWServerWorker;
@@ -43,11 +45,11 @@
 enum class ServiceWorkerState : uint8_t;
 struct ExceptionData;
 struct ServiceWorkerContextData;
 struct ServiceWorkerFetchResult;
 
-class SWServerRegistration {
+class SWServerRegistration : public CanMakeWeakPtr<SWServerRegistration> {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     SWServerRegistration(SWServer&, const ServiceWorkerRegistrationKey&, ServiceWorkerUpdateViaCache, const URL& scopeURL, const URL& scriptURL);
     ~SWServerRegistration();
 
@@ -55,15 +57,13 @@
     ServiceWorkerRegistrationIdentifier identifier() const { return m_identifier; }
 
     SWServerWorker* getNewestWorker();
     WEBCORE_EXPORT ServiceWorkerRegistrationData data() const;
 
-    bool isUninstalling() const { return m_uninstalling; }
-    void setIsUninstalling(bool);
-
     void setLastUpdateTime(WallTime);
     WallTime lastUpdateTime() const { return m_lastUpdateTime; }
+    bool isStale() const { return m_lastUpdateTime && (WallTime::now() - m_lastUpdateTime) > 86400_s; }
 
     void setUpdateViaCache(ServiceWorkerUpdateViaCache);
     ServiceWorkerUpdateViaCache updateViaCache() const { return m_updateViaCache; }
 
     void updateRegistrationState(ServiceWorkerRegistrationState, SWServerWorker*);
@@ -92,23 +92,32 @@
     void clear();
     bool tryClear();
     void tryActivate();
     void didFinishActivation(ServiceWorkerIdentifier);
 
+    bool isUnregistered() const;
+
     void forEachConnection(const WTF::Function<void(SWServer::Connection&)>&);
 
+    WEBCORE_EXPORT bool shouldSoftUpdate(const FetchOptions&) const;
+    WEBCORE_EXPORT void scheduleSoftUpdate();
+    static constexpr Seconds softUpdateDelay { 1_s };
+
+    URL scopeURLWithoutFragment() const { return m_scopeURL; }
+    URL scriptURL() const { return m_scriptURL; }
+
 private:
     void activate();
     void handleClientUnload();
+    void softUpdate();
 
     ServiceWorkerRegistrationIdentifier m_identifier;
     ServiceWorkerRegistrationKey m_registrationKey;
     ServiceWorkerUpdateViaCache m_updateViaCache;
     URL m_scopeURL;
     URL m_scriptURL;
 
-    bool m_uninstalling { false };
     RefPtr<SWServerWorker> m_preInstallationWorker; // Implementation detail, not part of the specification.
     RefPtr<SWServerWorker> m_installingWorker;
     RefPtr<SWServerWorker> m_waitingWorker;
     RefPtr<SWServerWorker> m_activeWorker;
 
@@ -117,10 +126,12 @@
     HashCountedSet<SWServerConnectionIdentifier> m_connectionsWithClientRegistrations;
     SWServer& m_server;
 
     MonotonicTime m_creationTime;
     HashMap<SWServerConnectionIdentifier, HashSet<DocumentIdentifier>> m_clientsUsingRegistration;
+
+    WebCore::Timer m_softUpdateTimer;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(SERVICE_WORKER)
