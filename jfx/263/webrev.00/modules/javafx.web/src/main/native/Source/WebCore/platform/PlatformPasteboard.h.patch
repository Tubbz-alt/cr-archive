diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformPasteboard.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformPasteboard.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformPasteboard.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformPasteboard.h
@@ -31,10 +31,11 @@
 #include <wtf/RetainPtr.h>
 #include <wtf/Vector.h>
 
 #if PLATFORM(MAC)
 OBJC_CLASS NSPasteboard;
+OBJC_CLASS NSPasteboardItem;
 #endif
 
 #if PLATFORM(IOS_FAMILY)
 OBJC_CLASS UIPasteboard;
 #endif
@@ -44,61 +45,62 @@
 #endif
 
 namespace WebCore {
 
 class Color;
+class PasteboardCustomData;
 class SelectionData;
 class SharedBuffer;
-struct PasteboardCustomData;
 struct PasteboardImage;
 struct PasteboardItemInfo;
 struct PasteboardURL;
 struct PasteboardWebContent;
 
 class PlatformPasteboard {
 public:
     WEBCORE_EXPORT explicit PlatformPasteboard(const String& pasteboardName);
 #if PLATFORM(IOS_FAMILY) || USE(LIBWPE)
     WEBCORE_EXPORT PlatformPasteboard();
-    WEBCORE_EXPORT Vector<PasteboardItemInfo> allPasteboardItemInfo();
-    WEBCORE_EXPORT PasteboardItemInfo informationForItemAtIndex(int index);
     WEBCORE_EXPORT void updateSupportedTypeIdentifiers(const Vector<String>& types);
 #endif
+    WEBCORE_EXPORT Optional<PasteboardItemInfo> informationForItemAtIndex(size_t index, int64_t changeCount);
+    WEBCORE_EXPORT Optional<Vector<PasteboardItemInfo>> allPasteboardItemInfo(int64_t changeCount);
     WEBCORE_EXPORT static String uniqueName();
 
-    WEBCORE_EXPORT static String platformPasteboardTypeForSafeTypeForDOMToReadAndWrite(const String& domType);
+    enum class IncludeImageTypes : bool { No, Yes };
+    static String platformPasteboardTypeForSafeTypeForDOMToReadAndWrite(const String& domType, IncludeImageTypes = IncludeImageTypes::No);
 
     WEBCORE_EXPORT void getTypes(Vector<String>& types);
     WEBCORE_EXPORT RefPtr<SharedBuffer> bufferForType(const String& pasteboardType);
     WEBCORE_EXPORT void getPathnamesForType(Vector<String>& pathnames, const String& pasteboardType) const;
     WEBCORE_EXPORT String stringForType(const String& pasteboardType) const;
     WEBCORE_EXPORT Vector<String> allStringsForType(const String& pasteboardType) const;
-    WEBCORE_EXPORT long changeCount() const;
+    WEBCORE_EXPORT int64_t changeCount() const;
     WEBCORE_EXPORT Color color();
     WEBCORE_EXPORT URL url();
 
     // Take ownership of the pasteboard, and return new change count.
-    WEBCORE_EXPORT long addTypes(const Vector<String>& pasteboardTypes);
-    WEBCORE_EXPORT long setTypes(const Vector<String>& pasteboardTypes);
+    WEBCORE_EXPORT int64_t addTypes(const Vector<String>& pasteboardTypes);
+    WEBCORE_EXPORT int64_t setTypes(const Vector<String>& pasteboardTypes);
 
     // These methods will return 0 if pasteboard ownership has been taken from us.
-    WEBCORE_EXPORT long copy(const String& fromPasteboard);
-    WEBCORE_EXPORT long setBufferForType(SharedBuffer*, const String& pasteboardType);
-    WEBCORE_EXPORT long setURL(const PasteboardURL&);
-    WEBCORE_EXPORT long setColor(const Color&);
-    WEBCORE_EXPORT long setStringForType(const String&, const String& pasteboardType);
+    WEBCORE_EXPORT int64_t copy(const String& fromPasteboard);
+    WEBCORE_EXPORT int64_t setBufferForType(SharedBuffer*, const String& pasteboardType);
+    WEBCORE_EXPORT int64_t setURL(const PasteboardURL&);
+    WEBCORE_EXPORT int64_t setColor(const Color&);
+    WEBCORE_EXPORT int64_t setStringForType(const String&, const String& pasteboardType);
     WEBCORE_EXPORT void write(const PasteboardWebContent&);
     WEBCORE_EXPORT void write(const PasteboardImage&);
     WEBCORE_EXPORT void write(const String& pasteboardType, const String&);
     WEBCORE_EXPORT void write(const PasteboardURL&);
-    WEBCORE_EXPORT RefPtr<SharedBuffer> readBuffer(int index, const String& pasteboardType) const;
-    WEBCORE_EXPORT String readString(int index, const String& pasteboardType) const;
-    WEBCORE_EXPORT URL readURL(int index, String& title) const;
+    WEBCORE_EXPORT RefPtr<SharedBuffer> readBuffer(size_t index, const String& pasteboardType) const;
+    WEBCORE_EXPORT String readString(size_t index, const String& pasteboardType) const;
+    WEBCORE_EXPORT URL readURL(size_t index, String& title) const;
     WEBCORE_EXPORT int count() const;
     WEBCORE_EXPORT int numberOfFiles() const;
-
-    WEBCORE_EXPORT long write(const PasteboardCustomData&);
+    WEBCORE_EXPORT int64_t write(const Vector<PasteboardCustomData>&);
+    WEBCORE_EXPORT int64_t write(const PasteboardCustomData&);
     WEBCORE_EXPORT Vector<String> typesSafeForDOMToReadAndWrite(const String& origin) const;
 
 #if PLATFORM(GTK)
     WEBCORE_EXPORT void writeToClipboard(const SelectionData&, WTF::Function<void()>&& primarySelectionCleared);
     WEBCORE_EXPORT Ref<SelectionData> readFromClipboard();
@@ -107,10 +109,14 @@
 private:
 #if PLATFORM(IOS_FAMILY)
     bool allowReadingURLAtIndex(const URL&, int index) const;
 #endif
 
+#if PLATFORM(MAC)
+    NSPasteboardItem *itemAtIndex(size_t index) const;
+#endif
+
 #if PLATFORM(MAC)
     RetainPtr<NSPasteboard> m_pasteboard;
 #endif
 #if PLATFORM(IOS_FAMILY)
     RetainPtr<id> m_pasteboard;
