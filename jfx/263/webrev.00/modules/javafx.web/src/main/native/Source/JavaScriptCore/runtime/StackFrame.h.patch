diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StackFrame.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StackFrame.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StackFrame.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/StackFrame.h
@@ -38,36 +38,36 @@
 class SlotVisitor;
 
 class StackFrame {
 public:
     StackFrame(VM&, JSCell* owner, JSCell* callee);
-    StackFrame(VM&, JSCell* owner, JSCell* callee, CodeBlock*, unsigned bytecodeOffset);
+    StackFrame(VM&, JSCell* owner, JSCell* callee, CodeBlock*, BytecodeIndex);
     StackFrame(Wasm::IndexOrName);
 
     bool hasLineAndColumnInfo() const { return !!m_codeBlock; }
 
     void computeLineAndColumn(unsigned& line, unsigned& column) const;
     String functionName(VM&) const;
     intptr_t sourceID() const;
     String sourceURL() const;
     String toString(VM&) const;
 
-    bool hasBytecodeOffset() const { return m_bytecodeOffset != UINT_MAX && !m_isWasmFrame; }
-    unsigned bytecodeOffset()
+    bool hasBytecodeIndex() const { return m_bytecodeIndex && !m_isWasmFrame; }
+    BytecodeIndex bytecodeIndex()
     {
-        ASSERT(hasBytecodeOffset());
-        return m_bytecodeOffset;
+        ASSERT(hasBytecodeIndex());
+        return m_bytecodeIndex;
     }
 
     void visitChildren(SlotVisitor&);
     bool isMarked(VM& vm) const { return (!m_callee || vm.heap.isMarked(m_callee.get())) && (!m_codeBlock || vm.heap.isMarked(m_codeBlock.get())); }
 
 private:
     WriteBarrier<JSCell> m_callee { };
     WriteBarrier<CodeBlock> m_codeBlock { };
     Wasm::IndexOrName m_wasmFunctionIndexOrName;
-    unsigned m_bytecodeOffset { UINT_MAX };
+    BytecodeIndex m_bytecodeIndex;
     bool m_isWasmFrame { false };
 };
 
 } // namespace JSC
 
