diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/legacy/LegacyCDMSessionClearKey.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/legacy/LegacyCDMSessionClearKey.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/legacy/LegacyCDMSessionClearKey.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/legacy/LegacyCDMSessionClearKey.cpp
@@ -28,11 +28,11 @@
 
 #include "JSExecState.h"
 #include "Logging.h"
 #include "TextEncoding.h"
 #include "WebKitMediaKeyError.h"
-#include <JavaScriptCore/JSGlobalObject.h>
+#include <JavaScriptCore/JSGlobalObjectInlines.h>
 #include <JavaScriptCore/JSLock.h>
 #include <JavaScriptCore/JSONObject.h>
 #include <JavaScriptCore/VM.h>
 #include <wtf/UUID.h>
 #include <wtf/text/Base64.h>
@@ -99,19 +99,19 @@
 
         auto& vm = clearKeyVM();
         JSLockHolder lock(vm);
         auto scope = DECLARE_THROW_SCOPE(vm);
         auto* globalObject = JSGlobalObject::create(vm, JSGlobalObject::createStructure(vm, jsNull()));
-        auto& state = *globalObject->globalExec();
+        auto& lexicalGlobalObject = *globalObject;
 
-        auto keysDataValue = JSONParse(&state, rawKeysString);
+        auto keysDataValue = JSONParse(&lexicalGlobalObject, rawKeysString);
         if (scope.exception() || !keysDataValue.isObject()) {
             LOG(Media, "CDMSessionClearKey::update(%p) - failed: invalid JSON", this);
             break;
         }
 
-        auto keysArrayValue = asObject(keysDataValue)->get(&state, Identifier::fromString(vm, "keys"));
+        auto keysArrayValue = asObject(keysDataValue)->get(&lexicalGlobalObject, Identifier::fromString(vm, "keys"));
         if (scope.exception() || !isJSArray(keysArrayValue)) {
             LOG(Media, "CDMSessionClearKey::update(%p) - failed: keys array missing or empty", this);
             break;
         }
 
@@ -122,25 +122,25 @@
             break;
         }
 
         bool foundValidKey = false;
         for (unsigned i = 0; i < length; ++i) {
-            auto keyValue = keysArray->getIndex(&state, i);
+            auto keyValue = keysArray->getIndex(&lexicalGlobalObject, i);
 
             if (scope.exception() || !keyValue.isObject()) {
                 LOG(Media, "CDMSessionClearKey::update(%p) - failed: null keyDictionary", this);
                 continue;
             }
 
             auto keyObject = asObject(keyValue);
 
-            auto getStringProperty = [&scope, &state, &keyObject, &vm](const char* name) -> String {
-                auto value = keyObject->get(&state, Identifier::fromString(vm, name));
+            auto getStringProperty = [&scope, &lexicalGlobalObject, &keyObject, &vm](const char* name) -> String {
+                auto value = keyObject->get(&lexicalGlobalObject, Identifier::fromString(vm, name));
                 if (scope.exception() || !value.isString())
                     return { };
 
-                auto string = asString(value)->value(&state);
+                auto string = asString(value)->value(&lexicalGlobalObject);
                 if (scope.exception())
                     return { };
 
                 return string;
             };
