diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/TextTrackLoader.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/TextTrackLoader.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/TextTrackLoader.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/TextTrackLoader.cpp
@@ -150,18 +150,19 @@
 
     ASSERT(is<Document>(m_scriptExecutionContext));
     Document& document = downcast<Document>(*m_scriptExecutionContext);
 
     ResourceLoaderOptions options = CachedResourceLoader::defaultCachedResourceOptions();
+    options.sameOriginDataURLFlag = SameOriginDataURLFlag::Set;
     options.contentSecurityPolicyImposition = element.isInUserAgentShadowTree() ? ContentSecurityPolicyImposition::SkipPolicyCheck : ContentSecurityPolicyImposition::DoPolicyCheck;
 
     ResourceRequest resourceRequest(document.completeURL(url));
 
     if (auto mediaElement = element.mediaElement())
         resourceRequest.setInspectorInitiatorNodeIdentifier(InspectorInstrumentation::identifierForNode(*mediaElement));
 
-    auto cueRequest = createPotentialAccessControlRequest(WTFMove(resourceRequest), document, element.mediaElementCrossOriginAttribute(), WTFMove(options));
+    auto cueRequest = createPotentialAccessControlRequest(WTFMove(resourceRequest), WTFMove(options), document, element.mediaElementCrossOriginAttribute(), SameOriginFlag::Yes);
     m_resource = document.cachedResourceLoader().requestTextTrack(WTFMove(cueRequest)).value_or(nullptr);
     if (!m_resource)
         return false;
     m_resource->addClient(*this);
     return true;
