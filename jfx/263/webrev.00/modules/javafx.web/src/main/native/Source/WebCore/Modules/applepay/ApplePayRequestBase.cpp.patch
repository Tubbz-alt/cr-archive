diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/ApplePayRequestBase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/ApplePayRequestBase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/ApplePayRequestBase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/applepay/ApplePayRequestBase.cpp
@@ -34,20 +34,18 @@
 #if USE(APPLE_INTERNAL_SDK)
 #include <WebKitAdditions/ApplePayRequestBaseAdditions.cpp>
 #else
 namespace WebCore {
 static void finishConverting(ApplePaySessionPaymentRequest&, ApplePayRequestBase&) { }
+static bool requiresSupportedNetworks(unsigned, const ApplePayRequestBase&) { return true; }
 }
 #endif
 
 namespace WebCore {
 
 static ExceptionOr<Vector<String>> convertAndValidate(Document& document, unsigned version, const Vector<String>& supportedNetworks, const PaymentCoordinator& paymentCoordinator)
 {
-    if (supportedNetworks.isEmpty())
-        return Exception { TypeError, "At least one supported network must be provided." };
-
     Vector<String> result;
     result.reserveInitialCapacity(supportedNetworks.size());
     for (auto& supportedNetwork : supportedNetworks) {
         auto validatedNetwork = paymentCoordinator.validatedPaymentNetwork(document, version, supportedNetwork);
         if (!validatedNetwork)
@@ -70,10 +68,13 @@
     auto merchantCapabilities = convertAndValidate(request.merchantCapabilities);
     if (merchantCapabilities.hasException())
         return merchantCapabilities.releaseException();
     result.setMerchantCapabilities(merchantCapabilities.releaseReturnValue());
 
+    if (requiresSupportedNetworks(version, request) && request.supportedNetworks.isEmpty())
+        return Exception { TypeError, "At least one supported network must be provided." };
+
     auto supportedNetworks = convertAndValidate(document, version, request.supportedNetworks, paymentCoordinator);
     if (supportedNetworks.hasException())
         return supportedNetworks.releaseException();
     result.setSupportedNetworks(supportedNetworks.releaseReturnValue());
 
