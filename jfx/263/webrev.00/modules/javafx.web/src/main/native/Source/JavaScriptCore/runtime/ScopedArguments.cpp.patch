diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArguments.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArguments.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArguments.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArguments.cpp
@@ -33,15 +33,16 @@
 
 STATIC_ASSERT_IS_TRIVIALLY_DESTRUCTIBLE(ScopedArguments);
 
 const ClassInfo ScopedArguments::s_info = { "Arguments", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(ScopedArguments) };
 
-ScopedArguments::ScopedArguments(VM& vm, Structure* structure, WriteBarrier<Unknown>* storage)
+ScopedArguments::ScopedArguments(VM& vm, Structure* structure, WriteBarrier<Unknown>* storage, unsigned totalLength)
     : GenericArguments(vm, structure)
-    , m_storage(vm, this, storage)
+    , m_totalLength(totalLength)
 {
-    ASSERT(!storageHeader(storage).overrodeThings);
+    if (storage)
+        m_storage.set(vm, this, storage);
 }
 
 void ScopedArguments::finishCreation(VM& vm, JSFunction* callee, ScopedArgumentsTable* table, JSLexicalEnvironment* scope)
 {
     Base::finishCreation(vm);
@@ -50,26 +51,20 @@
     m_scope.set(vm, this, scope);
 }
 
 ScopedArguments* ScopedArguments::createUninitialized(VM& vm, Structure* structure, JSFunction* callee, ScopedArgumentsTable* table, JSLexicalEnvironment* scope, unsigned totalLength)
 {
-    unsigned overflowLength;
-    if (totalLength > table->length())
-        overflowLength = totalLength - table->length();
-    else
-        overflowLength = 0;
-
-    void* rawStoragePtr = vm.jsValueGigacageAuxiliarySpace.allocateNonVirtual(
-        vm, storageSize(overflowLength), nullptr, AllocationFailureMode::Assert);
-    WriteBarrier<Unknown>* storage = static_cast<WriteBarrier<Unknown>*>(rawStoragePtr) + 1;
-    storageHeader(storage).overrodeThings = false;
-    storageHeader(storage).totalLength = totalLength;
+    WriteBarrier<Unknown>* storage = nullptr;
+    if (totalLength > table->length()) {
+        Checked<unsigned> overflowLength = totalLength - table->length();
+        storage = static_cast<WriteBarrier<Unknown>*>(vm.jsValueGigacageAuxiliarySpace.allocateNonVirtual(vm, (overflowLength * sizeof(WriteBarrier<Unknown>)).unsafeGet(), nullptr, AllocationFailureMode::Assert));
+    }
 
     ScopedArguments* result = new (
         NotNull,
         allocateCell<ScopedArguments>(vm.heap))
-        ScopedArguments(vm, structure, storage);
+        ScopedArguments(vm, structure, storage, totalLength);
     result->finishCreation(vm, callee, table, scope);
     return result;
 }
 
 ScopedArguments* ScopedArguments::create(VM& vm, Structure* structure, JSFunction* callee, ScopedArgumentsTable* table, JSLexicalEnvironment* scope, unsigned totalLength)
@@ -77,31 +72,31 @@
     ScopedArguments* result =
         createUninitialized(vm, structure, callee, table, scope, totalLength);
 
     unsigned namedLength = table->length();
     for (unsigned i = namedLength; i < totalLength; ++i)
-        result->overflowStorage()[i - namedLength].clear();
+        result->storage()[i - namedLength].clear();
 
     return result;
 }
 
-ScopedArguments* ScopedArguments::createByCopying(ExecState* exec, ScopedArgumentsTable* table, JSLexicalEnvironment* scope)
+ScopedArguments* ScopedArguments::createByCopying(JSGlobalObject* globalObject, CallFrame* callFrame, ScopedArgumentsTable* table, JSLexicalEnvironment* scope)
 {
     return createByCopyingFrom(
-        exec->vm(), exec->lexicalGlobalObject()->scopedArgumentsStructure(),
-        exec->registers() + CallFrame::argumentOffset(0), exec->argumentCount(),
-        jsCast<JSFunction*>(exec->jsCallee()), table, scope);
+        globalObject->vm(), globalObject->scopedArgumentsStructure(),
+        callFrame->registers() + CallFrame::argumentOffset(0), callFrame->argumentCount(),
+        jsCast<JSFunction*>(callFrame->jsCallee()), table, scope);
 }
 
 ScopedArguments* ScopedArguments::createByCopyingFrom(VM& vm, Structure* structure, Register* argumentsStart, unsigned totalLength, JSFunction* callee, ScopedArgumentsTable* table, JSLexicalEnvironment* scope)
 {
     ScopedArguments* result =
         createUninitialized(vm, structure, callee, table, scope, totalLength);
 
     unsigned namedLength = table->length();
     for (unsigned i = namedLength; i < totalLength; ++i)
-        result->overflowStorage()[i - namedLength].set(vm, result, argumentsStart[i].jsValue());
+        result->storage()[i - namedLength].set(vm, result, argumentsStart[i].jsValue());
 
     return result;
 }
 
 void ScopedArguments::visitChildren(JSCell* cell, SlotVisitor& visitor)
@@ -112,52 +107,54 @@
 
     visitor.append(thisObject->m_callee);
     visitor.append(thisObject->m_table);
     visitor.append(thisObject->m_scope);
 
-    visitor.markAuxiliary(&thisObject->storageHeader());
-
-    if (thisObject->storageHeader().totalLength > thisObject->m_table->length()) {
-        visitor.appendValues(
-            thisObject->overflowStorage(), thisObject->storageHeader().totalLength - thisObject->m_table->length());
+    if (WriteBarrier<Unknown>* storage = thisObject->m_storage.get()) {
+        visitor.markAuxiliary(storage);
+        if (thisObject->m_totalLength > thisObject->m_table->length())
+            visitor.appendValues(storage, thisObject->m_totalLength - thisObject->m_table->length());
     }
 }
 
 Structure* ScopedArguments::createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
 {
     return Structure::create(vm, globalObject, prototype, TypeInfo(ScopedArgumentsType, StructureFlags), info());
 }
 
-void ScopedArguments::overrideThings(VM& vm)
+void ScopedArguments::overrideThings(JSGlobalObject* globalObject)
 {
-    RELEASE_ASSERT(!storageHeader().overrodeThings);
+    VM& vm = globalObject->vm();
+
+    RELEASE_ASSERT(!m_overrodeThings);
 
     putDirect(vm, vm.propertyNames->length, jsNumber(m_table->length()), static_cast<unsigned>(PropertyAttribute::DontEnum));
     putDirect(vm, vm.propertyNames->callee, m_callee.get(), static_cast<unsigned>(PropertyAttribute::DontEnum));
-    putDirect(vm, vm.propertyNames->iteratorSymbol, globalObject(vm)->arrayProtoValuesFunction(), static_cast<unsigned>(PropertyAttribute::DontEnum));
+    putDirect(vm, vm.propertyNames->iteratorSymbol, globalObject->arrayProtoValuesFunction(), static_cast<unsigned>(PropertyAttribute::DontEnum));
 
-    storageHeader().overrodeThings = true;
+    m_overrodeThings = true;
 }
 
-void ScopedArguments::overrideThingsIfNecessary(VM& vm)
+void ScopedArguments::overrideThingsIfNecessary(JSGlobalObject* globalObject)
 {
-    if (!storageHeader().overrodeThings)
-        overrideThings(vm);
+    if (!m_overrodeThings)
+        overrideThings(globalObject);
 }
 
-void ScopedArguments::unmapArgument(VM& vm, uint32_t i)
+void ScopedArguments::unmapArgument(JSGlobalObject* globalObject, uint32_t i)
 {
-    ASSERT_WITH_SECURITY_IMPLICATION(i < storageHeader().totalLength);
+    VM& vm = globalObject->vm();
+    ASSERT_WITH_SECURITY_IMPLICATION(i < m_totalLength);
     unsigned namedLength = m_table->length();
     if (i < namedLength)
         m_table.set(vm, this, m_table->set(vm, i, ScopeOffset()));
     else
-        overflowStorage()[i - namedLength].clear();
+        storage()[i - namedLength].clear();
 }
 
-void ScopedArguments::copyToArguments(ExecState* exec, VirtualRegister firstElementDest, unsigned offset, unsigned length)
+void ScopedArguments::copyToArguments(JSGlobalObject* globalObject, JSValue* firstElementDest, unsigned offset, unsigned length)
 {
-    GenericArguments::copyToArguments(exec, firstElementDest, offset, length);
+    GenericArguments::copyToArguments(globalObject, firstElementDest, offset, length);
 }
 
 } // namespace JSC
 
