diff a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/nicosia/ScrollingCoordinatorNicosia.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/nicosia/ScrollingCoordinatorNicosia.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/nicosia/ScrollingCoordinatorNicosia.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/scrolling/nicosia/ScrollingCoordinatorNicosia.cpp
@@ -56,36 +56,48 @@
 {
     AsyncScrollingCoordinator::pageDestroyed();
 
     m_scrollingStateTreeCommitterTimer.stop();
 
-    releaseScrollingTree();
+    // Invalidating the scrolling tree will break the reference cycle between the ScrollingCoordinator and ScrollingTree objects.
+    RefPtr<ThreadedScrollingTree> scrollingTree = static_pointer_cast<ThreadedScrollingTree>(releaseScrollingTree());
+    ScrollingThread::dispatch([scrollingTree] { scrollingTree->invalidate(); });
 }
 
 void ScrollingCoordinatorNicosia::commitTreeStateIfNeeded()
 {
     commitTreeState();
     m_scrollingStateTreeCommitterTimer.stop();
 }
 
-ScrollingEventResult ScrollingCoordinatorNicosia::handleWheelEvent(FrameView&, const PlatformWheelEvent&)
+ScrollingEventResult ScrollingCoordinatorNicosia::handleWheelEvent(FrameView&, const PlatformWheelEvent& wheelEvent)
 {
-    return ScrollingEventResult::DidNotHandleEvent;
+    ASSERT(isMainThread());
+    ASSERT(m_page);
+    ASSERT(scrollingTree());
+
+    ScrollingThread::dispatch([threadedScrollingTree = makeRef(downcast<ThreadedScrollingTree>(*scrollingTree())), wheelEvent] {
+        threadedScrollingTree->handleWheelEvent(wheelEvent);
+    });
+    return ScrollingEventResult::DidHandleEvent;
 }
 
 void ScrollingCoordinatorNicosia::scheduleTreeStateCommit()
 {
     if (!m_scrollingStateTreeCommitterTimer.isActive())
         m_scrollingStateTreeCommitterTimer.startOneShot(0_s);
 }
 
 void ScrollingCoordinatorNicosia::commitTreeState()
 {
+    willCommitTree();
+
     if (!scrollingStateTree()->hasChangedProperties())
         return;
 
     RefPtr<ThreadedScrollingTree> threadedScrollingTree = downcast<ThreadedScrollingTree>(scrollingTree());
+    threadedScrollingTree->incrementPendingCommitCount();
 
     auto treeState = scrollingStateTree()->commit(LayerRepresentation::PlatformLayerRepresentation);
     ScrollingThread::dispatch([threadedScrollingTree, treeState = WTFMove(treeState)]() mutable {
         threadedScrollingTree->commitTreeState(WTFMove(treeState));
     });
