diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/MessagePort.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/MessagePort.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/MessagePort.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/MessagePort.h
@@ -30,14 +30,15 @@
 #include "EventTarget.h"
 #include "ExceptionOr.h"
 #include "MessagePortChannel.h"
 #include "MessagePortIdentifier.h"
 #include "MessageWithMessagePorts.h"
+#include "PostMessageOptions.h"
 #include <wtf/WeakPtr.h>
 
 namespace JSC {
-class ExecState;
+class CallFrame;
 class JSObject;
 class JSValue;
 }
 
 namespace WebCore {
@@ -49,11 +50,11 @@
     WTF_MAKE_ISO_ALLOCATED(MessagePort);
 public:
     static Ref<MessagePort> create(ScriptExecutionContext&, const MessagePortIdentifier& local, const MessagePortIdentifier& remote);
     virtual ~MessagePort();
 
-    ExceptionOr<void> postMessage(JSC::ExecState&, JSC::JSValue message, Vector<JSC::Strong<JSC::JSObject>>&&);
+    ExceptionOr<void> postMessage(JSC::JSGlobalObject&, JSC::JSValue message, PostMessageOptions&&);
 
     void start();
     void close();
     void entangle();
 
@@ -81,11 +82,10 @@
     WEBCORE_EXPORT void ref() const;
     WEBCORE_EXPORT void deref() const;
 
     // ActiveDOMObject
     const char* activeDOMObjectName() const final;
-    bool canSuspendForDocumentSuspension() const final;
     void contextDestroyed() final;
     void stop() final { close(); }
     bool hasPendingActivity() const final;
 
     WEBCORE_EXPORT bool isLocallyReachable() const;
@@ -94,10 +94,12 @@
     EventTargetInterface eventTargetInterface() const final { return MessagePortEventTargetInterfaceType; }
     ScriptExecutionContext* scriptExecutionContext() const final { return ActiveDOMObject::scriptExecutionContext(); }
     void refEventTarget() final { ref(); }
     void derefEventTarget() final { deref(); }
 
+    void dispatchEvent(Event&) final;
+
 private:
     explicit MessagePort(ScriptExecutionContext&, const MessagePortIdentifier& local, const MessagePortIdentifier& remote);
 
     bool addEventListener(const AtomString& eventType, Ref<EventListener>&&, const AddEventListenerOptions&) final;
     bool removeEventListener(const AtomString& eventType, EventListener&, const ListenerOptions&) final;
