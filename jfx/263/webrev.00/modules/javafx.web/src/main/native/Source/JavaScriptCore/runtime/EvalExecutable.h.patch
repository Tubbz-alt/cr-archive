diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/EvalExecutable.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/EvalExecutable.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/EvalExecutable.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/EvalExecutable.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2009-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2009-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -33,11 +33,11 @@
 
 class EvalExecutable : public GlobalExecutable {
     friend class LLIntOffsetsExtractor;
 public:
     using Base = GlobalExecutable;
-    static const unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
 
     static void destroy(JSCell*);
 
     EvalCodeBlock* codeBlock()
     {
@@ -60,28 +60,30 @@
         return vm.evalExecutableSpace<mode>();
     }
 
     DECLARE_INFO;
 
-    ExecutableInfo executableInfo() const { return ExecutableInfo(usesEval(), isStrictMode(), false, false, ConstructorKind::None, JSParserScriptMode::Classic, SuperBinding::NotNeeded, SourceParseMode::ProgramMode, derivedContextType(), isArrowFunctionContext(), false, evalContextType()); }
+    ExecutableInfo executableInfo() const { return ExecutableInfo(usesEval(), isStrictMode(), false, false, ConstructorKind::None, JSParserScriptMode::Classic, SuperBinding::NotNeeded, SourceParseMode::ProgramMode, derivedContextType(), needsClassFieldInitializer(), isArrowFunctionContext(), false, evalContextType()); }
 
     unsigned numVariables() { return m_unlinkedEvalCodeBlock->numVariables(); }
     unsigned numFunctionHoistingCandidates() { return m_unlinkedEvalCodeBlock->numFunctionHoistingCandidates(); }
     unsigned numTopLevelFunctionDecls() { return m_unlinkedEvalCodeBlock->numberOfFunctionDecls(); }
     bool allowDirectEvalCache() const { return m_unlinkedEvalCodeBlock->allowDirectEvalCache(); }
-
+    NeedsClassFieldInitializer needsClassFieldInitializer() const { return static_cast<NeedsClassFieldInitializer>(m_needsClassFieldInitializer); }
     TemplateObjectMap& ensureTemplateObjectMap(VM&);
 
 protected:
     friend class ExecutableBase;
     friend class ScriptExecutable;
 
     using Base::finishCreation;
-    EvalExecutable(ExecState*, const SourceCode&, bool inStrictContext, DerivedContextType, bool isArrowFunctionContext, EvalContextType);
+    EvalExecutable(JSGlobalObject*, const SourceCode&, bool inStrictContext, DerivedContextType, bool isArrowFunctionContext, EvalContextType, NeedsClassFieldInitializer);
 
     static void visitChildren(JSCell*, SlotVisitor&);
 
+    unsigned m_needsClassFieldInitializer : 1;
+
     WriteBarrier<ExecutableToCodeBlockEdge> m_evalCodeBlock;
     WriteBarrier<UnlinkedEvalCodeBlock> m_unlinkedEvalCodeBlock;
     std::unique_ptr<TemplateObjectMap> m_templateObjectMap;
 };
 
