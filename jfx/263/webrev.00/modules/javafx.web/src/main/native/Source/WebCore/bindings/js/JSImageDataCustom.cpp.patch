diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSImageDataCustom.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSImageDataCustom.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSImageDataCustom.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSImageDataCustom.cpp
@@ -24,37 +24,36 @@
  */
 
 #include "config.h"
 #include "JSImageData.h"
 
-#include "JSDOMConvertBufferSource.h"
+#include "JSDOMConvert.h"
 #include "JSDOMWrapperCache.h"
 #include <JavaScriptCore/HeapInlines.h>
 #include <JavaScriptCore/IdentifierInlines.h>
 #include <JavaScriptCore/JSObjectInlines.h>
 #include <wtf/StdLibExtras.h>
 #include <wtf/text/WTFString.h>
 
-
 namespace WebCore {
 using namespace JSC;
 
-JSValue toJSNewlyCreated(ExecState* state, JSDOMGlobalObject* globalObject, Ref<ImageData>&& imageData)
+JSValue toJSNewlyCreated(JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, Ref<ImageData>&& imageData)
 {
-    VM& vm = state->vm();
+    VM& vm = lexicalGlobalObject->vm();
     auto* data = imageData->data();
     auto* wrapper = createWrapper<ImageData>(globalObject, WTFMove(imageData));
     Identifier dataName = Identifier::fromString(vm, "data");
-    wrapper->putDirect(vm, dataName, toJS(state, globalObject, data), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly);
+    wrapper->putDirect(vm, dataName, toJS(lexicalGlobalObject, globalObject, data), PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly);
     // FIXME: Adopt reportExtraMemoryVisited, and switch to reportExtraMemoryAllocated.
     // https://bugs.webkit.org/show_bug.cgi?id=142595
     vm.heap.deprecatedReportExtraMemory(data->length());
 
     return wrapper;
 }
 
-JSValue toJS(ExecState* state, JSDOMGlobalObject* globalObject, ImageData& imageData)
+JSValue toJS(JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, ImageData& imageData)
 {
-    return wrap(state, globalObject, imageData);
+    return wrap(lexicalGlobalObject, globalObject, imageData);
 }
 
 }
