diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/TreeScope.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/TreeScope.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/TreeScope.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/TreeScope.cpp
@@ -42,20 +42,20 @@
 #include "IdTargetObserverRegistry.h"
 #include "NodeRareData.h"
 #include "Page.h"
 #include "PointerLockController.h"
 #include "PseudoElement.h"
+#include "RadioButtonGroups.h"
 #include "RenderView.h"
-#include "RuntimeEnabledFeatures.h"
 #include "Settings.h"
 #include "ShadowRoot.h"
 #include <wtf/text/CString.h>
 
 namespace WebCore {
 
 struct SameSizeAsTreeScope {
-    void* pointers[9];
+    void* pointers[10];
 };
 
 COMPILE_ASSERT(sizeof(TreeScope) == sizeof(SameSizeAsTreeScope), treescope_should_stay_small);
 
 using namespace HTMLNames;
@@ -110,23 +110,23 @@
 Element* TreeScope::getElementById(const String& elementId) const
 {
     if (!m_elementsById)
         return nullptr;
 
-    if (RefPtr<AtomStringImpl> atomicElementId = AtomStringImpl::lookUp(elementId.impl()))
-        return m_elementsById->getElementById(*atomicElementId, *this);
+    if (auto atomElementId = AtomStringImpl::lookUp(elementId.impl()))
+        return m_elementsById->getElementById(*atomElementId, *this);
 
     return nullptr;
 }
 
 Element* TreeScope::getElementById(StringView elementId) const
 {
     if (!m_elementsById)
         return nullptr;
 
-    if (auto atomicElementId = elementId.toExistingAtomString())
-        return m_elementsById->getElementById(*atomicElementId, *this);
+    if (auto atomElementId = elementId.toExistingAtomString())
+        return m_elementsById->getElementById(*atomElementId, *this);
 
     return nullptr;
 }
 
 const Vector<Element*>* TreeScope::getAllElementsById(const AtomString& elementId) const
@@ -537,6 +537,13 @@
         return nullptr;
 
     return treeScopesA[indexA] == treeScopesB[indexB] ? treeScopesA[indexA] : nullptr;
 }
 
+RadioButtonGroups& TreeScope::radioButtonGroups()
+{
+    if (!m_radioButtonGroups)
+        m_radioButtonGroups = makeUnique<RadioButtonGroups>();
+    return *m_radioButtonGroups;
+}
+
 } // namespace WebCore
