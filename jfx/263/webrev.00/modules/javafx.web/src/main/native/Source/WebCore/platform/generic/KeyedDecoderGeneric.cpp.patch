diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/generic/KeyedDecoderGeneric.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/generic/KeyedDecoderGeneric.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/generic/KeyedDecoderGeneric.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/generic/KeyedDecoderGeneric.cpp
@@ -40,25 +40,33 @@
 public:
     using Node = Variant<Vector<uint8_t>, bool, uint32_t, uint64_t, int32_t, int64_t, float, double, String, std::unique_ptr<Dictionary>, std::unique_ptr<Array>>;
 
     template <typename T>
     void add(const String& key, T&& value) { m_map.add(key, makeUnique<Node>(std::forward<T>(value))); }
-    Node& get(const String& key) { return *m_map.get(key); }
+    Node* get(const String& key) { return m_map.get(key); }
 
 private:
     HashMap<String, std::unique_ptr<Node>> m_map;
 };
 
 static bool readString(WTF::Persistence::Decoder& decoder, String& result)
 {
     size_t size;
     if (!decoder.decode(size))
         return false;
+    if (!size) {
+        result = emptyString();
+        return true;
+    }
+
     Vector<uint8_t> buffer(size);
     if (!decoder.decodeFixedLengthData(buffer.data(), size))
         return false;
     result = String::fromUTF8(buffer.data(), size);
+    if (result.isNull())
+        return false;
+
     return true;
 }
 
 template<typename T>
 static bool readSimpleValue(WTF::Persistence::Decoder& decoder, KeyedDecoderGeneric::Dictionary& dictionary)
@@ -179,97 +187,90 @@
         m_dictionaryStack.removeLast();
     while (!m_arrayStack.isEmpty())
         m_arrayStack.removeLast();
 }
 
+template<typename T>
+const T* KeyedDecoderGeneric::getPointerFromDictionaryStack(const String& key)
+{
+    auto& dictionary = m_dictionaryStack.last();
+
+    auto node = dictionary->get(key);
+    if (!node)
+        return nullptr;
+
+    return WTF::get_if<T>(*node);
+}
+
+template<typename T>
+bool KeyedDecoderGeneric::decodeSimpleValue(const String& key, T& result)
+{
+    auto value = getPointerFromDictionaryStack<T>(key);
+    if (!value)
+        return false;
+
+    result = *value;
+    return true;
+}
+
 bool KeyedDecoderGeneric::decodeBytes(const String& key, const uint8_t*& data, size_t& size)
 {
-    auto* value = WTF::get_if<Vector<uint8_t>>(m_dictionaryStack.last()->get(key));
+    auto value = getPointerFromDictionaryStack<Vector<uint8_t>>(key);
     if (!value)
         return false;
+
     data = value->data();
     size = value->size();
     return true;
 }
 
 bool KeyedDecoderGeneric::decodeBool(const String& key, bool& result)
 {
-    auto* value = WTF::get_if<bool>(m_dictionaryStack.last()->get(key));
-    if (!value)
-        return false;
-    result = *value;
-    return true;
+    return decodeSimpleValue(key, result);
 }
 
 bool KeyedDecoderGeneric::decodeUInt32(const String& key, uint32_t& result)
 {
-    auto* value = WTF::get_if<uint32_t>(m_dictionaryStack.last()->get(key));
-    if (!value)
-        return false;
-    result = *value;
-    return true;
+    return decodeSimpleValue(key, result);
 }
 
 bool KeyedDecoderGeneric::decodeUInt64(const String& key, uint64_t& result)
 {
-    auto* value = WTF::get_if<uint64_t>(m_dictionaryStack.last()->get(key));
-    if (!value)
-        return false;
-    result = *value;
-    return true;
+    return decodeSimpleValue(key, result);
 }
 
 bool KeyedDecoderGeneric::decodeInt32(const String& key, int32_t& result)
 {
-    auto* value = WTF::get_if<int32_t>(m_dictionaryStack.last()->get(key));
-    if (!value)
-        return false;
-    result = *value;
-    return true;
+    return decodeSimpleValue(key, result);
 }
 
 bool KeyedDecoderGeneric::decodeInt64(const String& key, int64_t& result)
 {
-    auto* value = WTF::get_if<int64_t>(m_dictionaryStack.last()->get(key));
-    if (!value)
-        return false;
-    result = *value;
-    return true;
+    return decodeSimpleValue(key, result);
 }
 
 bool KeyedDecoderGeneric::decodeFloat(const String& key, float& result)
 {
-    auto* value = WTF::get_if<float>(m_dictionaryStack.last()->get(key));
-    if (!value)
-        return false;
-    result = *value;
-    return true;
+    return decodeSimpleValue(key, result);
 }
 
 bool KeyedDecoderGeneric::decodeDouble(const String& key, double& result)
 {
-    auto* value = WTF::get_if<double>(m_dictionaryStack.last()->get(key));
-    if (!value)
-        return false;
-    result = *value;
-    return true;
+    return decodeSimpleValue(key, result);
 }
 
 bool KeyedDecoderGeneric::decodeString(const String& key, String& result)
 {
-    auto* value = WTF::get_if<String>(m_dictionaryStack.last()->get(key));
-    if (!value)
-        return false;
-    result = *value;
-    return true;
+    return decodeSimpleValue(key, result);
 }
 
 bool KeyedDecoderGeneric::beginObject(const String& key)
 {
-    auto* value = WTF::get_if<std::unique_ptr<Dictionary>>(m_dictionaryStack.last()->get(key));
+    auto value = getPointerFromDictionaryStack<std::unique_ptr<Dictionary>>(key);
     if (!value)
         return false;
+
     m_dictionaryStack.append(value->get());
     return true;
 }
 
 void KeyedDecoderGeneric::endObject()
@@ -277,13 +278,14 @@
     m_dictionaryStack.removeLast();
 }
 
 bool KeyedDecoderGeneric::beginArray(const String& key)
 {
-    auto* value = WTF::get_if<std::unique_ptr<Array>>(m_dictionaryStack.last()->get(key));
+    auto value = getPointerFromDictionaryStack<std::unique_ptr<Array>>(key);
     if (!value)
         return false;
+
     m_arrayStack.append(value->get());
     m_arrayIndexStack.append(0);
     return true;
 }
 
