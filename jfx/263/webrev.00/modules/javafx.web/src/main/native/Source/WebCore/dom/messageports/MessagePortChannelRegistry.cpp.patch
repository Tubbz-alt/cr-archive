diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/messageports/MessagePortChannelRegistry.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/messageports/MessagePortChannelRegistry.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/messageports/MessagePortChannelRegistry.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/messageports/MessagePortChannelRegistry.cpp
@@ -30,12 +30,12 @@
 #include <wtf/CompletionHandler.h>
 #include <wtf/MainThread.h>
 
 namespace WebCore {
 
-MessagePortChannelRegistry::MessagePortChannelRegistry(MessagePortChannelProvider& provider)
-    : m_provider(provider)
+MessagePortChannelRegistry::MessagePortChannelRegistry(CheckProcessLocalPortForActivityCallback&& checkProcessLocalPortForActivityCallback)
+    : m_checkProcessLocalPortForActivityCallback(WTFMove(checkProcessLocalPortForActivityCallback))
 {
 }
 
 MessagePortChannelRegistry::~MessagePortChannelRegistry()
 {
@@ -139,11 +139,11 @@
     }
 
     return channel->postMessageToRemote(WTFMove(message), remoteTarget);
 }
 
-void MessagePortChannelRegistry::takeAllMessagesForPort(const MessagePortIdentifier& port, Function<void(Vector<MessageWithMessagePorts>&&, Function<void()>&&)>&& callback)
+void MessagePortChannelRegistry::takeAllMessagesForPort(const MessagePortIdentifier& port, CompletionHandler<void(Vector<MessageWithMessagePorts>&&, Function<void()>&&)>&& callback)
 {
     ASSERT(isMainThread());
 
     LOG(MessagePorts, "Registry: Taking all messages for MessagePort %s", port.logString().utf8().data());
 
@@ -155,11 +155,11 @@
     }
 
     channel->takeAllMessagesForPort(port, WTFMove(callback));
 }
 
-void MessagePortChannelRegistry::checkRemotePortForActivity(const MessagePortIdentifier& remoteTarget, Function<void(MessagePortChannelProvider::HasActivity)>&& callback)
+void MessagePortChannelRegistry::checkRemotePortForActivity(const MessagePortIdentifier& remoteTarget, CompletionHandler<void(MessagePortChannelProvider::HasActivity)>&& callback)
 {
     ASSERT(isMainThread());
 
     // The channel might be gone if the remote side was closed.
     auto* channel = m_openChannels.get(remoteTarget);
@@ -176,6 +176,11 @@
     ASSERT(isMainThread());
 
     return m_openChannels.get(port);
 }
 
+void MessagePortChannelRegistry::checkProcessLocalPortForActivity(const MessagePortIdentifier& messagePortIdentifier, ProcessIdentifier processIdentifier, CompletionHandler<void(MessagePortChannelProvider::HasActivity)>&& callback)
+{
+    m_checkProcessLocalPortForActivityCallback(messagePortIdentifier, processIdentifier, WTFMove(callback));
+}
+
 } // namespace WebCore
