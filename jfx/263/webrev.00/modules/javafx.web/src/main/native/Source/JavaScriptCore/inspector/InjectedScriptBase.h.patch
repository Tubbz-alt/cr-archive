diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptBase.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptBase.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptBase.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptBase.h
@@ -29,15 +29,18 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include "Exception.h"
 #include "InspectorEnvironment.h"
 #include "InspectorProtocolObjects.h"
 #include "ScriptObject.h"
+#include <wtf/Expected.h>
 #include <wtf/Forward.h>
 #include <wtf/Function.h>
+#include <wtf/NakedPtr.h>
 #include <wtf/RefPtr.h>
 
 namespace Deprecated {
 class ScriptFunctionCall;
 }
@@ -51,22 +54,22 @@
 public:
     virtual ~InjectedScriptBase();
 
     const String& name() const { return m_name; }
     bool hasNoValue() const { return m_injectedScriptObject.hasNoValue(); }
-    JSC::ExecState* scriptState() const { return m_injectedScriptObject.scriptState(); }
+    JSC::JSGlobalObject* globalObject() const { return m_injectedScriptObject.globalObject(); }
 
 protected:
     InjectedScriptBase(const String& name);
     InjectedScriptBase(const String& name, Deprecated::ScriptObject, InspectorEnvironment*);
 
     InspectorEnvironment* inspectorEnvironment() const { return m_environment; }
 
     bool hasAccessToInspectedScriptState() const;
 
     const Deprecated::ScriptObject& injectedScriptObject() const;
-    JSC::JSValue callFunctionWithEvalEnabled(Deprecated::ScriptFunctionCall&, bool& hadException) const;
+    Expected<JSC::JSValue, NakedPtr<JSC::Exception>> callFunctionWithEvalEnabled(Deprecated::ScriptFunctionCall&) const;
     Ref<JSON::Value> makeCall(Deprecated::ScriptFunctionCall&);
     void makeEvalCall(ErrorString&, Deprecated::ScriptFunctionCall&, RefPtr<Protocol::Runtime::RemoteObject>& resultObject, Optional<bool>& wasThrown, Optional<int>& savedResultIndex);
     void makeAsyncCall(Deprecated::ScriptFunctionCall&, AsyncCallCallback&&);
 
 private:
