diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/MediaTime.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/MediaTime.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/MediaTime.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/MediaTime.cpp
@@ -35,13 +35,16 @@
 #include <wtf/CheckedArithmetic.h>
 #include <wtf/JSONValues.h>
 #include <wtf/MathExtras.h>
 #include <wtf/PrintStream.h>
 #include <wtf/text/StringBuilder.h>
+#include <wtf/text/TextStream.h>
 
 namespace WTF {
 
+static_assert(std::is_trivially_destructible_v<MediaTime>, "MediaTime should be trivially destructible.");
+
 static uint32_t greatestCommonDivisor(uint32_t a, uint32_t b)
 {
     ASSERT(a);
     ASSERT(b);
 
@@ -67,32 +70,10 @@
     return (0 < val) - (val < 0);
 }
 
 const uint32_t MediaTime::MaximumTimeScale = 1000000000;
 
-MediaTime::MediaTime()
-    : m_timeValue(0)
-    , m_timeScale(DefaultTimeScale)
-    , m_timeFlags(Valid)
-{
-}
-
-MediaTime::MediaTime(int64_t value, uint32_t scale, uint8_t flags)
-    : m_timeValue(value)
-    , m_timeScale(scale)
-    , m_timeFlags(flags)
-{
-    if (scale || isInvalid())
-        return;
-
-    *this = value < 0 ? negativeInfiniteTime() : positiveInfiniteTime();
-}
-
-MediaTime::~MediaTime()
-{
-}
-
 MediaTime::MediaTime(const MediaTime& rhs)
 {
     *this = rhs;
 }
 
@@ -454,36 +435,36 @@
     return *this > a && *this < b;
 }
 
 const MediaTime& MediaTime::zeroTime()
 {
-    static const MediaTime* time = new MediaTime(0, 1, Valid);
-    return *time;
+    static const MediaTime time(0, 1, Valid);
+    return time;
 }
 
 const MediaTime& MediaTime::invalidTime()
 {
-    static const MediaTime* time = new MediaTime(-1, 1, 0);
-    return *time;
+    static const MediaTime time(-1, 1, 0);
+    return time;
 }
 
 const MediaTime& MediaTime::positiveInfiniteTime()
 {
-    static const MediaTime* time = new MediaTime(0, 1, PositiveInfinite | Valid);
-    return *time;
+    static const MediaTime time(0, 1, PositiveInfinite | Valid);
+    return time;
 }
 
 const MediaTime& MediaTime::negativeInfiniteTime()
 {
-    static const MediaTime* time = new MediaTime(-1, 1, NegativeInfinite | Valid);
-    return *time;
+    static const MediaTime time(-1, 1, NegativeInfinite | Valid);
+    return time;
 }
 
 const MediaTime& MediaTime::indefiniteTime()
 {
-    static const MediaTime* time = new MediaTime(0, 1, Indefinite | Valid);
-    return *time;
+    static const MediaTime time(0, 1, Indefinite | Valid);
+    return time;
 }
 
 MediaTime MediaTime::toTimeScale(uint32_t timeScale, RoundingFlags flags) const
 {
     MediaTime result = *this;
@@ -583,19 +564,16 @@
 }
 
 String MediaTime::toString() const
 {
     StringBuilder builder;
-
     builder.append('{');
-    if (!hasDoubleValue()) {
-        builder.appendNumber(m_timeValue);
-        builder.append('/');
-        builder.appendNumber(m_timeScale);
-        builder.appendLiteral(" = ");
-    }
-    builder.appendFixedPrecisionNumber(toDouble());
+    if (!hasDoubleValue())
+        builder.append(m_timeValue, '/', m_timeScale, " = ");
+    builder.append(toDouble());
+    if (isInvalid())
+        builder.appendLiteral(", invalid");
     builder.append('}');
     return builder.toString();
 }
 
 Ref<JSON::Object> MediaTime::toJSONObject() const
@@ -605,11 +583,13 @@
     if (hasDoubleValue()) {
         object->setDouble("value"_s, toDouble());
         return object;
     }
 
-    if (isInvalid() || isIndefinite())
+    if (isInvalid())
+        object->setBoolean("invalid"_s, true);
+    else if (isIndefinite())
         object->setString("value"_s, "NaN"_s);
     else if (isPositiveInfinite())
         object->setString("value"_s, "POSITIVE_INFINITY"_s);
     else if (isNegativeInfinite())
         object->setString("value"_s, "NEGATIVE_INFINITY"_s);
@@ -650,6 +630,15 @@
     object->setObject("end"_s, end.toJSONObject());
 
     return object->toJSONString();
 }
 
+#ifndef NDEBUG
+
+TextStream& operator<<(TextStream& stream, const MediaTime& time)
+{
+    return stream << time.toJSONString();
+}
+
+#endif
+
 }
