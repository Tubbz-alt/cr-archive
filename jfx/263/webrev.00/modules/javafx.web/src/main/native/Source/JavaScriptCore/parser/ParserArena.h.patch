diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/ParserArena.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/ParserArena.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/ParserArena.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/ParserArena.h
@@ -33,12 +33,13 @@
 
 namespace JSC {
 
     class ParserArenaDeletable;
 
+    DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(IdentifierArena);
     class IdentifierArena {
-        WTF_MAKE_FAST_ALLOCATED;
+        WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(IdentifierArena);
     public:
         IdentifierArena()
         {
             clear();
         }
@@ -47,10 +48,11 @@
         ALWAYS_INLINE const Identifier& makeIdentifier(VM&, const T* characters, size_t length);
         ALWAYS_INLINE const Identifier& makeEmptyIdentifier(VM&);
         ALWAYS_INLINE const Identifier& makeIdentifierLCharFromUChar(VM&, const UChar* characters, size_t length);
         ALWAYS_INLINE const Identifier& makeIdentifier(VM&, SymbolImpl*);
 
+        const Identifier& makeBigIntDecimalIdentifier(VM&, const Identifier&, uint8_t radix);
         const Identifier& makeNumericIdentifier(VM&, double number);
 
     public:
         static const int MaximumCachableCharacter = 128;
         typedef SegmentedVector<Identifier, 64> IdentifierVector;
@@ -134,10 +136,12 @@
         // Seems we are missing out on multiple optimizations by not using it.
         m_identifiers.append(Identifier::fromString(vm, String::number(number)));
         return m_identifiers.last();
     }
 
+    DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(ParserArena);
+
     class ParserArena {
         WTF_MAKE_NONCOPYABLE(ParserArena);
     public:
         ParserArena();
         ~ParserArena();
