diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerContextData.h b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerContextData.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerContextData.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerContextData.h
@@ -28,11 +28,10 @@
 #include "ContentSecurityPolicyResponseHeaders.h"
 #include "ServiceWorkerIdentifier.h"
 #include "ServiceWorkerJobDataIdentifier.h"
 #include "ServiceWorkerRegistrationData.h"
 #include "WorkerType.h"
-#include <pal/SessionID.h>
 #include <wtf/HashMap.h>
 #include <wtf/URL.h>
 #include <wtf/URLHash.h>
 
 #if ENABLE(SERVICE_WORKER)
@@ -75,11 +74,10 @@
     String script;
     ContentSecurityPolicyResponseHeaders contentSecurityPolicy;
     String referrerPolicy;
     URL scriptURL;
     WorkerType workerType;
-    PAL::SessionID sessionID;
     bool loadedFromDisk;
     HashMap<URL, ImportedScript> scriptResourceMap;
 
     template<class Encoder> void encode(Encoder&) const;
     template<class Decoder> static Optional<ServiceWorkerContextData> decode(Decoder&);
@@ -88,11 +86,11 @@
 };
 
 template<class Encoder>
 void ServiceWorkerContextData::encode(Encoder& encoder) const
 {
-    encoder << jobDataIdentifier << registration << serviceWorkerIdentifier << script << contentSecurityPolicy << referrerPolicy << scriptURL << workerType << sessionID << loadedFromDisk;
+    encoder << jobDataIdentifier << registration << serviceWorkerIdentifier << script << contentSecurityPolicy << referrerPolicy << scriptURL << workerType << loadedFromDisk;
     encoder << scriptResourceMap;
 }
 
 template<class Decoder>
 Optional<ServiceWorkerContextData> ServiceWorkerContextData::decode(Decoder& decoder)
@@ -129,24 +127,19 @@
 
     WorkerType workerType;
     if (!decoder.decodeEnum(workerType))
         return WTF::nullopt;
 
-    Optional<PAL::SessionID> sessionID;
-    decoder >> sessionID;
-    if (!sessionID)
-        return WTF::nullopt;
-
     bool loadedFromDisk;
     if (!decoder.decode(loadedFromDisk))
         return WTF::nullopt;
 
     HashMap<URL, ImportedScript> scriptResourceMap;
     if (!decoder.decode(scriptResourceMap))
         return WTF::nullopt;
 
-    return {{ WTFMove(*jobDataIdentifier), WTFMove(*registration), WTFMove(*serviceWorkerIdentifier), WTFMove(script), WTFMove(contentSecurityPolicy), WTFMove(referrerPolicy), WTFMove(scriptURL), workerType, *sessionID, loadedFromDisk, WTFMove(scriptResourceMap) }};
+    return {{ WTFMove(*jobDataIdentifier), WTFMove(*registration), WTFMove(*serviceWorkerIdentifier), WTFMove(script), WTFMove(contentSecurityPolicy), WTFMove(referrerPolicy), WTFMove(scriptURL), workerType, loadedFromDisk, WTFMove(scriptResourceMap) }};
 }
 
 } // namespace WebCore
 
 #endif // ENABLE(SERVICE_WORKER)
