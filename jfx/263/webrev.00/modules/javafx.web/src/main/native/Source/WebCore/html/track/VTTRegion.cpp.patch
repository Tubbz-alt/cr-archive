diff a/modules/javafx.web/src/main/native/Source/WebCore/html/track/VTTRegion.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/track/VTTRegion.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/track/VTTRegion.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/track/VTTRegion.cpp
@@ -279,11 +279,11 @@
     static NeverDestroyed<const AtomString> trackRegionShadowPseudoId("-webkit-media-text-track-region", AtomString::ConstructFromLiteral);
 
     return trackRegionShadowPseudoId;
 }
 
-void VTTRegion::appendTextTrackCueBox(Ref<VTTCueBox>&& displayBox)
+void VTTRegion::appendTextTrackCueBox(Ref<TextTrackCueBox>&& displayBox)
 {
     ASSERT(m_cueContainer);
 
     if (m_cueContainer->contains(displayBox.ptr()))
         return;
@@ -316,11 +316,11 @@
             continue;
 
         float height = childBottom - childTop;
 
         m_currentTop -= std::min(height, childBottom - regionBottom);
-        m_cueContainer->setInlineStyleProperty(CSSPropertyTop, m_currentTop, CSSPrimitiveValue::CSS_PX);
+        m_cueContainer->setInlineStyleProperty(CSSPropertyTop, m_currentTop, CSSUnitType::CSS_PX);
 
         startTimer();
         break;
     }
 }
@@ -333,20 +333,24 @@
     double boxHeight = box->getBoundingClientRect()->bottom() - box->getBoundingClientRect()->top();
 
     m_cueContainer->classList().remove(textTrackCueContainerScrollingClass());
 
     m_currentTop += boxHeight;
-    m_cueContainer->setInlineStyleProperty(CSSPropertyTop, m_currentTop, CSSPrimitiveValue::CSS_PX);
+    m_cueContainer->setInlineStyleProperty(CSSPropertyTop, m_currentTop, CSSUnitType::CSS_PX);
 }
 
 HTMLDivElement& VTTRegion::getDisplayTree()
 {
     if (!m_regionDisplayTree) {
         m_regionDisplayTree = HTMLDivElement::create(downcast<Document>(*m_scriptExecutionContext));
-        prepareRegionDisplayTree();
+        m_regionDisplayTree->setPseudo(textTrackRegionShadowPseudoId());
+        m_recalculateStyles = true;
     }
 
+    if (m_recalculateStyles)
+        prepareRegionDisplayTree();
+
     return *m_regionDisplayTree;
 }
 
 void VTTRegion::prepareRegionDisplayTree()
 {
@@ -357,42 +361,44 @@
     // FIXME: Change the code below to use viewport units when
     // http://crbug/244618 is fixed.
 
     // Let regionWidth be the text track region width.
     // Let width be 'regionWidth vw' ('vw' is a CSS unit)
-    m_regionDisplayTree->setInlineStyleProperty(CSSPropertyWidth, m_width, CSSPrimitiveValue::CSS_PERCENTAGE);
+    m_regionDisplayTree->setInlineStyleProperty(CSSPropertyWidth, m_width, CSSUnitType::CSS_PERCENTAGE);
 
     // Let lineHeight be '0.0533vh' ('vh' is a CSS unit) and regionHeight be
     // the text track region height. Let height be 'lineHeight' multiplied
     // by regionHeight.
     double height = lineHeight * m_lines;
-    m_regionDisplayTree->setInlineStyleProperty(CSSPropertyHeight, height, CSSPrimitiveValue::CSS_VH);
+    m_regionDisplayTree->setInlineStyleProperty(CSSPropertyHeight, height, CSSUnitType::CSS_VH);
 
     // Let viewportAnchorX be the x dimension of the text track region viewport
     // anchor and regionAnchorX be the x dimension of the text track region
     // anchor. Let leftOffset be regionAnchorX multiplied by width divided by
     // 100.0. Let left be leftOffset subtracted from 'viewportAnchorX vw'.
     double leftOffset = m_regionAnchor.x() * m_width / 100;
-    m_regionDisplayTree->setInlineStyleProperty(CSSPropertyLeft, m_viewportAnchor.x() - leftOffset, CSSPrimitiveValue::CSS_PERCENTAGE);
+    m_regionDisplayTree->setInlineStyleProperty(CSSPropertyLeft, m_viewportAnchor.x() - leftOffset, CSSUnitType::CSS_PERCENTAGE);
 
     // Let viewportAnchorY be the y dimension of the text track region viewport
     // anchor and regionAnchorY be the y dimension of the text track region
     // anchor. Let topOffset be regionAnchorY multiplied by height divided by
     // 100.0. Let top be topOffset subtracted from 'viewportAnchorY vh'.
     double topOffset = m_regionAnchor.y() * height / 100;
-    m_regionDisplayTree->setInlineStyleProperty(CSSPropertyTop, m_viewportAnchor.y() - topOffset, CSSPrimitiveValue::CSS_PERCENTAGE);
+    m_regionDisplayTree->setInlineStyleProperty(CSSPropertyTop, m_viewportAnchor.y() - topOffset, CSSUnitType::CSS_PERCENTAGE);
 
     // The cue container is used to wrap the cues and it is the object which is
     // gradually scrolled out as multiple cues are appended to the region.
-    m_cueContainer = HTMLDivElement::create(downcast<Document>(*m_scriptExecutionContext));
-    m_cueContainer->setInlineStyleProperty(CSSPropertyTop, 0.0f, CSSPrimitiveValue::CSS_PX);
-
-    m_cueContainer->setPseudo(textTrackCueContainerShadowPseudoId());
-    m_regionDisplayTree->appendChild(*m_cueContainer);
+    if (!m_cueContainer) {
+        m_cueContainer = HTMLDivElement::create(downcast<Document>(*m_scriptExecutionContext));
+        m_cueContainer->setPseudo(textTrackCueContainerShadowPseudoId());
+        m_regionDisplayTree->appendChild(*m_cueContainer);
+    }
+    m_cueContainer->setInlineStyleProperty(CSSPropertyTop, 0.0f, CSSUnitType::CSS_PX);
 
     // 7.5 Every WebVTT region object is initialised with the following CSS
-    m_regionDisplayTree->setPseudo(textTrackRegionShadowPseudoId());
+
+    m_recalculateStyles = false;
 }
 
 void VTTRegion::startTimer()
 {
     LOG(Media, "VTTRegion::startTimer");
