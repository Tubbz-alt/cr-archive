diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatBox.cpp b/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatBox.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatBox.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatBox.cpp
@@ -33,14 +33,14 @@
 namespace WebCore {
 namespace Layout {
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(FloatBox);
 
-FloatBox::FloatBox(const Box& layoutBox, const FloatingState& floatingState, const LayoutState& layoutState)
-    : FloatAvoider(layoutBox, floatingState, layoutState)
+FloatBox::FloatBox(const Box& layoutBox, Display::Box absoluteDisplayBox, LayoutPoint containingBlockAbsoluteTopLeft, HorizontalEdges containingBlockAbsoluteContentBox, Optional<LayoutUnit> previousFloatAbsoluteTop)
+    : FloatAvoider(layoutBox, absoluteDisplayBox, containingBlockAbsoluteTopLeft, containingBlockAbsoluteContentBox)
 {
-    displayBox().setTopLeft({ initialHorizontalPosition(), initialVerticalPosition() });
+    displayBox().setTopLeft({ initialHorizontalPosition(), initialVerticalPosition(previousFloatAbsoluteTop) });
 }
 
 Display::Rect FloatBox::rect() const
 {
     auto rect = displayBox().rect();
@@ -58,17 +58,17 @@
 PositionInContextRoot FloatBox::verticalPositionCandidate(PositionInContextRoot verticalConstraint)
 {
     return { verticalConstraint + marginBefore() };
 }
 
-PositionInContextRoot FloatBox::initialVerticalPosition() const
+PositionInContextRoot FloatBox::initialVerticalPosition(Optional<LayoutUnit> previousFloatAbsoluteTop) const
 {
     // Incoming float cannot be placed higher than existing floats (margin box of the last float).
     // Take the static position (where the box would go if it wasn't floating) and adjust it with the last float.
     auto top = displayBox().top() - marginBefore();
-    if (auto lastFloat = floatingState().last())
-        top = std::max(top, lastFloat->rectWithMargin().top());
+    if (previousFloatAbsoluteTop)
+        top = std::max(top, *previousFloatAbsoluteTop);
     top += marginBefore();
 
     return { top };
 }
 
