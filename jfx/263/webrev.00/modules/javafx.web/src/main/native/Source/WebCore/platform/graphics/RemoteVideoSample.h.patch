diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/RemoteVideoSample.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/RemoteVideoSample.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/RemoteVideoSample.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/RemoteVideoSample.h
@@ -34,27 +34,31 @@
 
 #if HAVE(IOSURFACE)
 #include "IOSurface.h"
 #endif
 
+typedef struct __CVBuffer* CVPixelBufferRef;
+
 namespace WebCore {
 
 class RemoteVideoSample {
 public:
     RemoteVideoSample() = default;
     RemoteVideoSample(RemoteVideoSample&&) = default;
     RemoteVideoSample& operator=(RemoteVideoSample&&) = default;
     ~RemoteVideoSample() = default;
 
 #if HAVE(IOSURFACE)
-    WEBCORE_EXPORT static std::unique_ptr<RemoteVideoSample> create(MediaSample&&);
+    WEBCORE_EXPORT static std::unique_ptr<RemoteVideoSample> create(MediaSample&);
+    WEBCORE_EXPORT static std::unique_ptr<RemoteVideoSample> create(CVPixelBufferRef, MediaTime&& presentationTime, MediaSample::VideoRotation = MediaSample::VideoRotation::None);
     WEBCORE_EXPORT IOSurfaceRef surface();
 #endif
 
     const MediaTime& time() const { return m_time; }
     uint32_t videoFormat() const { return m_videoFormat; }
     IntSize size() const { return m_size; }
+    MediaSample::VideoRotation rotation() const { return m_rotation; }
 
     template<class Encoder> void encode(Encoder& encoder) const
     {
 #if HAVE(IOSURFACE)
         if (m_ioSurface)
