diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/notifications/Notification.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/notifications/Notification.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/notifications/Notification.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/notifications/Notification.h
@@ -35,21 +35,21 @@
 
 #include "ActiveDOMObject.h"
 #include "EventTarget.h"
 #include "NotificationDirection.h"
 #include "NotificationPermission.h"
-#include "Timer.h"
+#include "SuspendableTimer.h"
 #include <wtf/URL.h>
 #include "WritingMode.h"
 
 namespace WebCore {
 
 class Document;
 class NotificationPermissionCallback;
 
 class Notification final : public RefCounted<Notification>, public ActiveDOMObject, public EventTargetWithInlineData {
-    WTF_MAKE_ISO_ALLOCATED(Notification);
+    WTF_MAKE_ISO_ALLOCATED_EXPORT(Notification, WEBCORE_EXPORT);
 public:
     using Permission = NotificationPermission;
     using Direction = NotificationDirection;
 
     struct Options {
@@ -59,11 +59,11 @@
         String tag;
         String icon;
     };
     static Ref<Notification> create(Document&, const String& title, const Options&);
 
-    virtual ~Notification();
+    WEBCORE_EXPORT virtual ~Notification();
 
     void show();
     void close();
 
     const String& title() const { return m_title; }
@@ -91,15 +91,18 @@
     using RefCounted::deref;
 
 private:
     Notification(Document&, const String& title, const Options&);
 
+    Document* document() const;
     EventTargetInterface eventTargetInterface() const final { return NotificationEventTargetInterfaceType; }
 
+    void queueTask(Function<void()>&&);
+
     // ActiveDOMObject
     const char* activeDOMObjectName() const final;
-    bool canSuspendForDocumentSuspension() const final;
+    void suspend(ReasonForSuspension);
     void stop() final;
 
     void refEventTarget() final { ref(); }
     void derefEventTarget() final { deref(); }
 
@@ -111,11 +114,11 @@
     URL m_icon;
 
     enum State { Idle, Showing, Closed };
     State m_state { Idle };
 
-    std::unique_ptr<Timer> m_taskTimer;
+    SuspendableTimer m_showNotificationTimer;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(NOTIFICATIONS)
