diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBResourceIdentifier.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBResourceIdentifier.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBResourceIdentifier.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBResourceIdentifier.h
@@ -25,10 +25,11 @@
 
 #pragma once
 
 #if ENABLE(INDEXED_DATABASE)
 
+#include "ProcessIdentifier.h"
 #include <wtf/text/StringHash.h>
 
 namespace WebCore {
 
 class IDBRequest;
@@ -39,10 +40,12 @@
 
 namespace IDBServer {
 class IDBConnectionToClient;
 }
 
+using IDBConnectionIdentifier = ProcessIdentifier;
+
 class IDBResourceIdentifier {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     explicit IDBResourceIdentifier(const IDBClient::IDBConnectionProxy&);
     IDBResourceIdentifier(const IDBClient::IDBConnectionProxy&, const IDBRequest&);
@@ -57,23 +60,23 @@
         return !m_resourceNumber && !m_idbConnectionIdentifier;
     }
 
     unsigned hash() const
     {
-        uint64_t hashCodes[2] = { m_idbConnectionIdentifier, m_resourceNumber };
+        uint64_t hashCodes[2] = { m_idbConnectionIdentifier.toUInt64(), m_resourceNumber };
         return StringHasher::hashMemory<sizeof(hashCodes)>(hashCodes);
     }
 
     bool operator==(const IDBResourceIdentifier& other) const
     {
         return m_idbConnectionIdentifier == other.m_idbConnectionIdentifier
             && m_resourceNumber == other.m_resourceNumber;
     }
 
-    uint64_t connectionIdentifier() const { return m_idbConnectionIdentifier; }
+    IDBConnectionIdentifier connectionIdentifier() const { return m_idbConnectionIdentifier; }
 
-    IDBResourceIdentifier isolatedCopy() const;
+    WEBCORE_EXPORT IDBResourceIdentifier isolatedCopy() const;
 
 #if !LOG_DISABLED
     String loggingString() const;
 #endif
 
@@ -81,12 +84,12 @@
 
     template<class Encoder> void encode(Encoder&) const;
     template<class Decoder> static bool decode(Decoder&, IDBResourceIdentifier&);
 
 private:
-    IDBResourceIdentifier(uint64_t connectionIdentifier, uint64_t resourceIdentifier);
-    uint64_t m_idbConnectionIdentifier { 0 };
+    IDBResourceIdentifier(IDBConnectionIdentifier, uint64_t resourceIdentifier);
+    IDBConnectionIdentifier m_idbConnectionIdentifier;
     uint64_t m_resourceNumber { 0 };
 };
 
 struct IDBResourceIdentifierHash {
     static unsigned hash(const IDBResourceIdentifier& a) { return a.hash(); }
@@ -144,8 +147,13 @@
 template<> struct HashTraits<WebCore::IDBResourceIdentifier> : WebCore::IDBResourceIdentifierHashTraits { };
 template<> struct DefaultHash<WebCore::IDBResourceIdentifier> {
     typedef WebCore::IDBResourceIdentifierHash Hash;
 };
 
+inline WebCore::IDBConnectionIdentifier crossThreadCopy(WebCore::IDBConnectionIdentifier identifier)
+{
+    return identifier;
+}
+
 } // namespace WTF
 
 #endif // ENABLE(INDEXED_DATABASE)
