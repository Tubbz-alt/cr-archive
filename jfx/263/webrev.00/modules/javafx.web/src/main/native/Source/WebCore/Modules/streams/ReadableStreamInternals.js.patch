diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamInternals.js b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamInternals.js
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamInternals.js
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/streams/ReadableStreamInternals.js
@@ -295,11 +295,12 @@
             requests[index].@reject.@call(@undefined, error);
         @putByIdDirectPrivate(reader, "readIntoRequests", []);
     }
 
     @getByIdDirectPrivate(reader, "closedPromiseCapability").@reject.@call(@undefined, error);
-    @putByIdDirectPrivate(@getByIdDirectPrivate(reader, "closedPromiseCapability").@promise, "promiseIsHandled", true);
+    const promise = @getByIdDirectPrivate(reader, "closedPromiseCapability").@promise;
+    @putPromiseInternalField(promise, @promiseFieldFlags, @getPromiseInternalField(promise, @promiseFieldFlags) | @promiseFlagsIsHandled);
 }
 
 function readableStreamDefaultControllerCallPullIfNeeded(controller)
 {
     "use strict";
@@ -518,11 +519,12 @@
     if (@getByIdDirectPrivate(@getByIdDirectPrivate(reader, "ownerReadableStream"), "state") === @streamReadable)
         @getByIdDirectPrivate(reader, "closedPromiseCapability").@reject.@call(@undefined, @makeTypeError("releasing lock of reader whose stream is still in readable state"));
     else
         @putByIdDirectPrivate(reader, "closedPromiseCapability", { @promise: @newHandledRejectedPromise(@makeTypeError("reader released lock")) });
 
-    @putByIdDirectPrivate(@getByIdDirectPrivate(reader, "closedPromiseCapability").@promise, "promiseIsHandled", true);
+    const promise = @getByIdDirectPrivate(reader, "closedPromiseCapability").@promise;
+    @putPromiseInternalField(promise, @promiseFieldFlags, @getPromiseInternalField(promise, @promiseFieldFlags) | @promiseFlagsIsHandled);
     @putByIdDirectPrivate(@getByIdDirectPrivate(reader, "ownerReadableStream"), "reader", @undefined);
     @putByIdDirectPrivate(reader, "ownerReadableStream", @undefined);
 }
 
 function readableStreamDefaultControllerCanCloseOrEnqueue(controller)
