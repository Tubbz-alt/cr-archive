diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.cpp
@@ -222,11 +222,11 @@
 
     setState(Playing);
     return true;
 }
 
-bool PlatformMediaSession::clientWillPausePlayback()
+bool PlatformMediaSession::processClientWillPausePlayback(DelayCallingUpdateNowPlaying shouldDelayCallingUpdateNowPlaying)
 {
     if (m_notifyingClient)
         return true;
 
     INFO_LOG(LOGIDENTIFIER, "state = ", m_state);
@@ -235,14 +235,24 @@
         INFO_LOG(LOGIDENTIFIER, "      setting stateToRestore to \"Paused\"");
         return false;
     }
 
     setState(Paused);
-    PlatformMediaSessionManager::sharedManager().sessionWillEndPlayback(*this);
+    PlatformMediaSessionManager::sharedManager().sessionWillEndPlayback(*this, shouldDelayCallingUpdateNowPlaying);
     return true;
 }
 
+bool PlatformMediaSession::clientWillPausePlayback()
+{
+    return processClientWillPausePlayback(DelayCallingUpdateNowPlaying::No);
+}
+
+void PlatformMediaSession::clientWillBeDOMSuspended()
+{
+    processClientWillPausePlayback(DelayCallingUpdateNowPlaying::Yes);
+}
+
 void PlatformMediaSession::pauseSession()
 {
     INFO_LOG(LOGIDENTIFIER);
     m_client.suspendPlayback();
 }
@@ -356,11 +366,11 @@
     return m_client.canProduceAudio();
 }
 
 void PlatformMediaSession::canProduceAudioChanged()
 {
-    PlatformMediaSessionManager::sharedManager().sessionCanProduceAudioChanged(*this);
+    PlatformMediaSessionManager::sharedManager().sessionCanProduceAudioChanged();
 }
 
 #if ENABLE(VIDEO)
 uint64_t PlatformMediaSessionClient::mediaSessionUniqueIdentifier() const
 {
