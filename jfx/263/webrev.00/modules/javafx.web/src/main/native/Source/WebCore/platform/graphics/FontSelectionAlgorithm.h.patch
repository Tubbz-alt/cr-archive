diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontSelectionAlgorithm.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontSelectionAlgorithm.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontSelectionAlgorithm.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontSelectionAlgorithm.h
@@ -64,18 +64,43 @@
     friend constexpr FontSelectionValue operator/(FontSelectionValue, FontSelectionValue);
     friend constexpr FontSelectionValue operator-(FontSelectionValue);
 
     constexpr BackingType rawValue() const { return m_backing; }
 
+    template<class Encoder>
+    void encode(Encoder&) const;
+
+    template<class Decoder>
+    static Optional<FontSelectionValue> decode(Decoder&);
+
 private:
     enum class RawTag { RawTag };
     constexpr FontSelectionValue(int, RawTag);
 
     static constexpr int fractionalEntropy = 4;
     BackingType m_backing { 0 };
 };
 
+template<class Encoder>
+void FontSelectionValue::encode(Encoder& encoder) const
+{
+    encoder << m_backing;
+}
+
+template<class Decoder>
+Optional<FontSelectionValue> FontSelectionValue::decode(Decoder& decoder)
+{
+    Optional<FontSelectionValue::BackingType> backing;
+    decoder >> backing;
+    if (!backing)
+        return WTF::nullopt;
+
+    FontSelectionValue result;
+    result.m_backing = *backing;
+    return result;
+}
+
 constexpr FontSelectionValue::FontSelectionValue(int x)
     : m_backing(x * fractionalEntropy)
 {
     // FIXME: Should we assert the passed in value was in range?
 }
@@ -315,14 +340,43 @@
     constexpr uint32_t uniqueValue() const
     {
         return minimum.rawValue() << 16 | maximum.rawValue();
     }
 
+    template<class Encoder>
+    void encode(Encoder&) const;
+
+    template<class Decoder>
+    static Optional<FontSelectionRange> decode(Decoder&);
+
     Value minimum { 1 };
     Value maximum { 0 };
 };
 
+template<class Encoder>
+void FontSelectionRange::encode(Encoder& encoder) const
+{
+    encoder << minimum;
+    encoder << maximum;
+}
+
+template<class Decoder>
+Optional<FontSelectionRange> FontSelectionRange::decode(Decoder& decoder)
+{
+    Optional<FontSelectionRange::Value> minimum;
+    decoder >> minimum;
+    if (!minimum)
+        return WTF::nullopt;
+
+    Optional<FontSelectionRange::Value> maximum;
+    decoder >> maximum;
+    if (!maximum)
+        return WTF::nullopt;
+
+    return {{ *minimum, *maximum }};
+}
+
 inline void add(Hasher& hasher, const FontSelectionRange& range)
 {
     add(hasher, range.uniqueValue());
 }
 
@@ -443,15 +497,50 @@
     constexpr Range computeSlope() const
     {
         return slope.valueOr(Range { normalItalicValue() });
     }
 
+    template<class Encoder>
+    void encode(Encoder&) const;
+
+    template<class Decoder>
+    static Optional<FontSelectionSpecifiedCapabilities> decode(Decoder&);
+
     OptionalRange weight;
     OptionalRange width;
     OptionalRange slope;
 };
 
+template<class Encoder>
+void FontSelectionSpecifiedCapabilities::encode(Encoder& encoder) const
+{
+    encoder << weight;
+    encoder << width;
+    encoder << slope;
+}
+
+template<class Decoder>
+Optional<FontSelectionSpecifiedCapabilities> FontSelectionSpecifiedCapabilities::decode(Decoder& decoder)
+{
+    Optional<OptionalRange> weight;
+    decoder >> weight;
+    if (!weight)
+        return WTF::nullopt;
+
+    Optional<OptionalRange> width;
+    decoder >> width;
+    if (!width)
+        return WTF::nullopt;
+
+    Optional<OptionalRange> slope;
+    decoder >> slope;
+    if (!slope)
+        return WTF::nullopt;
+
+    return {{ *weight, *width, *slope }};
+}
+
 constexpr bool operator==(const FontSelectionSpecifiedCapabilities& a, const FontSelectionSpecifiedCapabilities& b)
 {
     return a.tied() == b.tied();
 }
 
