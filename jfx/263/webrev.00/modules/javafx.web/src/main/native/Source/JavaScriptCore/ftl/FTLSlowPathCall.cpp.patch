diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLSlowPathCall.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLSlowPathCall.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLSlowPathCall.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLSlowPathCall.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -35,11 +35,11 @@
 #include "JSCInlines.h"
 
 namespace JSC { namespace FTL {
 
 // This code relies on us being 64-bit. FTL is currently always 64-bit.
-static const size_t wordSize = 8;
+static constexpr size_t wordSize = 8;
 
 SlowPathCallContext::SlowPathCallContext(
     RegisterSet usedRegisters, CCallHelpers& jit, unsigned numArgs, GPRReg returnRegister)
     : m_jit(jit)
     , m_numArgs(numArgs)
@@ -124,11 +124,11 @@
     SlowPathCall result = SlowPathCall(m_jit.call(OperationPtrTag), key);
 
     m_jit.addLinkTask(
         [result, &vm] (LinkBuffer& linkBuffer) {
             MacroAssemblerCodeRef<JITThunkPtrTag> thunk =
-                vm.ftlThunks->getSlowPathCallThunk(result.key());
+                vm.ftlThunks->getSlowPathCallThunk(vm, result.key());
 
             linkBuffer.link(result.call(), CodeLocationLabel<OperationPtrTag>(thunk.retaggedCode<OperationPtrTag>()));
         });
 
     return result;
