diff a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasStyle.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasStyle.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasStyle.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasStyle.cpp
@@ -33,47 +33,62 @@
 #include "CSSPropertyNames.h"
 #include "CanvasGradient.h"
 #include "CanvasPattern.h"
 #include "GraphicsContext.h"
 #include "HTMLCanvasElement.h"
+#if ENABLE(OFFSCREEN_CANVAS)
+#include "OffscreenCanvas.h"
+#endif
 #include "StyleProperties.h"
 
 #if USE(CG)
 #include <CoreGraphics/CGContext.h>
 #endif
 
 namespace WebCore {
 
-static bool isCurrentColorString(const String& colorString)
+bool isCurrentColorString(const String& colorString)
 {
     return equalLettersIgnoringASCIICase(colorString, "currentcolor");
 }
 
-static Color parseColor(const String& colorString)
+Color parseColor(const String& colorString, CanvasBase& canvasBase)
 {
+#if ENABLE(OFFSCREEN_CANVAS)
+    if (canvasBase.isOffscreenCanvas()) {
+        auto& canvas = downcast<OffscreenCanvas>(canvasBase);
+        return CSSParser::parseColorWorkerSafe(colorString, canvas.cssValuePool());
+    }
+#else
+    UNUSED_PARAM(canvasBase);
+#endif
     Color color = CSSParser::parseColor(colorString);
     if (color.isValid())
         return color;
     return CSSParser::parseSystemColor(colorString, nullptr);
 }
 
-Color currentColor(HTMLCanvasElement* canvas)
+Color currentColor(CanvasBase& canvasBase)
 {
-    if (!canvas || !canvas->isConnected() || !canvas->inlineStyle())
+    if (!is<HTMLCanvasElement>(canvasBase))
+        return Color::black;
+
+    auto& canvas = downcast<HTMLCanvasElement>(canvasBase);
+    if (!canvas.isConnected() || !canvas.inlineStyle())
         return Color::black;
-    Color color = CSSParser::parseColor(canvas->inlineStyle()->getPropertyValue(CSSPropertyColor));
+    Color color = CSSParser::parseColor(canvas.inlineStyle()->getPropertyValue(CSSPropertyColor));
     if (!color.isValid())
         return Color::black;
     return color;
 }
 
-Color parseColorOrCurrentColor(const String& colorString, HTMLCanvasElement* canvas)
+Color parseColorOrCurrentColor(const String& colorString, CanvasBase& canvasBase)
 {
     if (isCurrentColorString(colorString))
-        return currentColor(canvas);
+        return currentColor(canvasBase);
 
-    return parseColor(colorString);
+    return parseColor(colorString, canvasBase);
 }
 
 CanvasStyle::CanvasStyle(Color color)
     : m_style(color)
 {
@@ -107,28 +122,28 @@
 inline CanvasStyle::CanvasStyle(CurrentColor color)
     : m_style(color)
 {
 }
 
-CanvasStyle CanvasStyle::createFromString(const String& colorString)
+CanvasStyle CanvasStyle::createFromString(const String& colorString, CanvasBase& canvasBase)
 {
     if (isCurrentColorString(colorString))
         return CurrentColor { WTF::nullopt };
 
-    Color color = parseColor(colorString);
+    Color color = parseColor(colorString, canvasBase);
     if (!color.isValid())
         return { };
 
     return color;
 }
 
-CanvasStyle CanvasStyle::createFromStringWithOverrideAlpha(const String& colorString, float alpha)
+CanvasStyle CanvasStyle::createFromStringWithOverrideAlpha(const String& colorString, float alpha, CanvasBase& canvasBase)
 {
     if (isCurrentColorString(colorString))
         return CurrentColor { alpha };
 
-    Color color = parseColor(colorString);
+    Color color = parseColor(colorString, canvasBase);
     if (!color.isValid())
         return { };
 
     return Color { colorWithOverrideAlpha(color.rgb(), alpha) };
 }
