diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeolocationController.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeolocationController.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeolocationController.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/geolocation/GeolocationController.cpp
@@ -62,11 +62,11 @@
         m_highAccuracyObservers.add(observer);
 
     if (enableHighAccuracy)
         m_client.setEnableHighAccuracy(true);
     if (wasEmpty && m_page.isVisible())
-        m_client.startUpdating();
+        m_client.startUpdating(observer.authorizationToken());
 }
 
 void GeolocationController::removeObserver(Geolocation& observer)
 {
     if (!m_observers.contains(observer))
@@ -79,10 +79,15 @@
         m_client.stopUpdating();
     else if (m_highAccuracyObservers.isEmpty())
         m_client.setEnableHighAccuracy(false);
 }
 
+void GeolocationController::revokeAuthorizationToken(const String& authorizationToken)
+{
+    m_client.revokeAuthorizationToken(authorizationToken);
+}
+
 void GeolocationController::requestPermission(Geolocation& geolocation)
 {
     if (!m_page.isVisible()) {
         m_pendingPermissionRequest.add(geolocation);
         return;
@@ -132,11 +137,11 @@
 {
     // Toggle GPS based on page visibility to save battery.
     auto changed = oldActivityState ^ newActivityState;
     if (changed & ActivityState::IsVisible && !m_observers.isEmpty()) {
         if (newActivityState & ActivityState::IsVisible)
-            m_client.startUpdating();
+            m_client.startUpdating((*m_observers.random())->authorizationToken());
         else
             m_client.stopUpdating();
     }
 
     if (!m_page.isVisible())
