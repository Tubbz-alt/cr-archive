diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/OfflineAudioContext.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/OfflineAudioContext.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/OfflineAudioContext.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/OfflineAudioContext.cpp
@@ -26,30 +26,35 @@
 
 #if ENABLE(WEB_AUDIO)
 
 #include "OfflineAudioContext.h"
 
+#include "AudioBuffer.h"
 #include "Document.h"
 #include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(OfflineAudioContext);
 
-inline OfflineAudioContext::OfflineAudioContext(Document& document, unsigned numberOfChannels, size_t numberOfFrames, float sampleRate)
-    : AudioContext(document, numberOfChannels, numberOfFrames, sampleRate)
+inline OfflineAudioContext::OfflineAudioContext(Document& document, AudioBuffer* renderTarget)
+    : AudioContext(document, renderTarget)
 {
 }
 
 ExceptionOr<Ref<OfflineAudioContext>> OfflineAudioContext::create(ScriptExecutionContext& context, unsigned numberOfChannels, size_t numberOfFrames, float sampleRate)
 {
     // FIXME: Add support for workers.
     if (!is<Document>(context))
         return Exception { NotSupportedError };
     if (!numberOfChannels || numberOfChannels > 10 || !numberOfFrames || !isSampleRateRangeGood(sampleRate))
         return Exception { SyntaxError };
-    auto audioContext = adoptRef(*new OfflineAudioContext(downcast<Document>(context), numberOfChannels, numberOfFrames, sampleRate));
+    auto renderTarget = AudioBuffer::create(numberOfChannels, numberOfFrames, sampleRate);
+    if (!renderTarget)
+        return Exception { SyntaxError };
+
+    auto audioContext = adoptRef(*new OfflineAudioContext(downcast<Document>(context), renderTarget.get()));
     audioContext->suspendIfNeeded();
     return audioContext;
 }
 
 } // namespace WebCore
