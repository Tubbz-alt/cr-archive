diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/BitVector.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/BitVector.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/BitVector.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/BitVector.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2011, 2014, 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2011-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -245,11 +245,11 @@
     }
 
     size_t findBit(size_t index, bool value) const
     {
         size_t result = findBitFast(index, value);
-        if (!ASSERT_DISABLED) {
+        if (ASSERT_ENABLED) {
             size_t expectedResult = findBitSimple(index, value);
             if (result != expectedResult) {
                 dataLog("findBit(", index, ", ", value, ") on ", *this, " should have gotten ", expectedResult, " but got ", result, "\n");
                 ASSERT_NOT_REACHED();
             }
@@ -487,11 +487,11 @@
 };
 
 struct BitVectorHash {
     static unsigned hash(const BitVector& vector) { return vector.hash(); }
     static bool equal(const BitVector& a, const BitVector& b) { return a == b; }
-    static const bool safeToCompareToEmptyOrDeleted = false;
+    static constexpr bool safeToCompareToEmptyOrDeleted = false;
 };
 
 template<typename T> struct DefaultHash;
 template<> struct DefaultHash<BitVector> {
     typedef BitVectorHash Hash;
