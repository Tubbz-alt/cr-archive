diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/FastBitVector.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/FastBitVector.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/FastBitVector.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/FastBitVector.cpp
@@ -24,19 +24,23 @@
  */
 
 #include "config.h"
 #include <wtf/FastBitVector.h>
 
+#include <wtf/NeverDestroyed.h>
+
 namespace WTF {
 
+DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(FastBitVector);
+
 void FastBitVectorWordOwner::setEqualsSlow(const FastBitVectorWordOwner& other)
 {
     uint32_t* newArray = static_cast<uint32_t*>(
-        fastCalloc(other.arrayLength(), sizeof(uint32_t)));
+        FastBitVectorMalloc::zeroedMalloc(other.arrayLength() * sizeof(uint32_t)));
     memcpy(newArray, other.m_words, other.arrayLength() * sizeof(uint32_t));
     if (m_words)
-        fastFree(m_words);
+        FastBitVectorMalloc::free(m_words);
     m_words = newArray;
     m_numBits = other.m_numBits;
 }
 
 void FastBitVectorWordOwner::resizeSlow(size_t numBits)
@@ -46,14 +50,14 @@
     RELEASE_ASSERT(newLength >= arrayLength());
 
     // Use fastCalloc instead of fastRealloc because we expect the common
     // use case for this method to be initializing the size of the bitvector.
 
-    uint32_t* newArray = static_cast<uint32_t*>(fastCalloc(newLength, sizeof(uint32_t)));
+    uint32_t* newArray = static_cast<uint32_t*>(FastBitVectorMalloc::zeroedMalloc(newLength * sizeof(uint32_t)));
     memcpy(newArray, m_words, arrayLength() * sizeof(uint32_t));
     if (m_words)
-        fastFree(m_words);
+        FastBitVectorMalloc::free(m_words);
     m_words = newArray;
 }
 
 void FastBitVector::clearRange(size_t begin, size_t end)
 {
