diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDOMDebuggerAgent.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDOMDebuggerAgent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDOMDebuggerAgent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorDOMDebuggerAgent.h
@@ -42,80 +42,65 @@
 class InjectedScriptManager;
 }
 
 namespace WebCore {
 
-class Element;
 class Event;
-class Frame;
-class Node;
 class RegisteredEventListener;
 
 typedef String ErrorString;
 
-class InspectorDOMDebuggerAgent final : public InspectorAgentBase, public Inspector::DOMDebuggerBackendDispatcherHandler, public Inspector::InspectorDebuggerAgent::Listener {
+class InspectorDOMDebuggerAgent : public InspectorAgentBase, public Inspector::DOMDebuggerBackendDispatcherHandler, public Inspector::InspectorDebuggerAgent::Listener {
     WTF_MAKE_NONCOPYABLE(InspectorDOMDebuggerAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    InspectorDOMDebuggerAgent(WebAgentContext&, Inspector::InspectorDebuggerAgent*);
-    virtual ~InspectorDOMDebuggerAgent();
+    ~InspectorDOMDebuggerAgent() override;
 
     // InspectorAgentBase
-    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*);
-    void willDestroyFrontendAndBackend(Inspector::DisconnectReason);
-    void discardAgent();
+    void didCreateFrontendAndBackend(Inspector::FrontendRouter*, Inspector::BackendDispatcher*) override;
+    void willDestroyFrontendAndBackend(Inspector::DisconnectReason) override;
+    void discardAgent() override;
+    virtual bool enabled() const;
 
     // DOMDebuggerBackendDispatcherHandler
-    void setURLBreakpoint(ErrorString&, const String& url, const bool* optionalIsRegex);
-    void removeURLBreakpoint(ErrorString&, const String& url);
-    void setEventBreakpoint(ErrorString&, const String& breakpointType, const String* eventName);
-    void removeEventBreakpoint(ErrorString&, const String& breakpointType, const String* eventName);
-    void setDOMBreakpoint(ErrorString&, int nodeId, const String& type);
-    void removeDOMBreakpoint(ErrorString&, int nodeId, const String& type);
+    void setURLBreakpoint(ErrorString&, const String& url, const bool* optionalIsRegex) final;
+    void removeURLBreakpoint(ErrorString&, const String& url) final;
+    void setEventBreakpoint(ErrorString&, const String& breakpointType, const String* eventName) final;
+    void removeEventBreakpoint(ErrorString&, const String& breakpointType, const String* eventName) final;
 
     // InspectorDebuggerAgent::Listener
-    void debuggerWasEnabled();
-    void debuggerWasDisabled();
+    void debuggerWasEnabled() override;
+    void debuggerWasDisabled() override;
 
     // InspectorInstrumentation
-    void willInsertDOMNode(Node& parent);
-    void willInvalidateStyleAttr(Element&);
-    void didInsertDOMNode(Node&);
-    void willRemoveDOMNode(Node&);
-    void didRemoveDOMNode(Node&);
-    void willModifyDOMAttr(Element&);
     void willSendXMLHttpRequest(const String& url);
     void willFetch(const String& url);
-    void frameDocumentUpdated(Frame&);
     void willHandleEvent(Event&, const RegisteredEventListener&);
     void didHandleEvent();
     void willFireTimer(bool oneShot);
-    void willFireAnimationFrame();
-    void mainFrameDOMContentLoaded();
 
-    void disable();
+protected:
+    InspectorDOMDebuggerAgent(WebAgentContext&, Inspector::InspectorDebuggerAgent*);
+    virtual void enable();
+    virtual void disable();
+
+    virtual void setAnimationFrameBreakpoint(ErrorString&, bool enabled) = 0;
+
+    Inspector::InspectorDebuggerAgent* m_debuggerAgent { nullptr };
 
 private:
     enum class URLBreakpointSource { Fetch, XHR };
     void breakOnURLIfNeeded(const String& url, URLBreakpointSource);
 
-    void descriptionForDOMEvent(Node& target, int breakpointType, bool insertion, JSON::Object& description);
-    void updateSubtreeBreakpoints(Node*, uint32_t rootMask, bool set);
-    bool hasBreakpoint(Node*, int type);
-
     RefPtr<Inspector::DOMDebuggerBackendDispatcher> m_backendDispatcher;
     Inspector::InjectedScriptManager& m_injectedScriptManager;
 
-    Inspector::InspectorDebuggerAgent* m_debuggerAgent { nullptr };
-
-    HashMap<Node*, uint32_t> m_domBreakpoints;
     HashSet<String> m_listenerBreakpoints;
 
     enum class URLBreakpointType { RegularExpression, Text };
     HashMap<String, URLBreakpointType> m_urlBreakpoints;
 
-    bool m_pauseOnAllAnimationFramesEnabled { false };
     bool m_pauseOnAllIntervalsEnabled { false };
     bool m_pauseOnAllListenersEnabled { false };
     bool m_pauseOnAllTimeoutsEnabled { false };
     bool m_pauseOnAllURLsEnabled { false };
 };
