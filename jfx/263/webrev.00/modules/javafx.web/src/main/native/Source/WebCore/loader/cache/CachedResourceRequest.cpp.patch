diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResourceRequest.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResourceRequest.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResourceRequest.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResourceRequest.cpp
@@ -83,29 +83,10 @@
 
     static NeverDestroyed<AtomString> defaultName("other", AtomString::ConstructFromLiteral);
     return defaultName;
 }
 
-void CachedResourceRequest::deprecatedSetAsPotentiallyCrossOrigin(const String& mode, Document& document)
-{
-    ASSERT(m_options.mode == FetchOptions::Mode::NoCors);
-
-    m_origin = &document.securityOrigin();
-
-    if (mode.isNull())
-        return;
-
-    m_options.mode = FetchOptions::Mode::Cors;
-
-    FetchOptions::Credentials credentials = equalLettersIgnoringASCIICase(mode, "omit")
-        ? FetchOptions::Credentials::Omit : equalLettersIgnoringASCIICase(mode, "use-credentials")
-        ? FetchOptions::Credentials::Include : FetchOptions::Credentials::SameOrigin;
-    m_options.credentials = credentials;
-    m_options.storedCredentialsPolicy = credentials == FetchOptions::Credentials::Include ? StoredCredentialsPolicy::Use : StoredCredentialsPolicy::DoNotUse;
-    updateRequestForAccessControl(m_resourceRequest, document.securityOrigin(), m_options.storedCredentialsPolicy);
-}
-
 void CachedResourceRequest::updateForAccessControl(Document& document)
 {
     ASSERT(m_options.mode == FetchOptions::Mode::Cors);
 
     m_origin = &document.securityOrigin();
