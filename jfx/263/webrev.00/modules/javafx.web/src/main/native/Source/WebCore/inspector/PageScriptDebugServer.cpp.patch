diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/PageScriptDebugServer.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/PageScriptDebugServer.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/PageScriptDebugServer.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/PageScriptDebugServer.cpp
@@ -27,11 +27,10 @@
 #include "config.h"
 #include "PageScriptDebugServer.h"
 
 #include "CommonVM.h"
 #include "Document.h"
-#include "EventLoop.h"
 #include "Frame.h"
 #include "FrameView.h"
 #include "InspectorController.h"
 #include "InspectorFrontendClient.h"
 #include "JSDOMExceptionHandling.h"
@@ -114,23 +113,24 @@
 {
     TimerBase::fireTimersInNestedEventLoop();
 
     m_page.incrementNestedRunLoopCount();
 
-    EventLoop loop;
-    while (!m_doneProcessingDebuggerEvents && !loop.ended())
-        loop.cycle();
+    while (!m_doneProcessingDebuggerEvents) {
+        if (RunLoop::cycle() == RunLoop::CycleResult::Stop)
+            break;
+    }
 
     m_page.decrementNestedRunLoopCount();
 }
 
-bool PageScriptDebugServer::isContentScript(ExecState* state) const
+bool PageScriptDebugServer::isContentScript(JSGlobalObject* state) const
 {
     return &currentWorld(*state) != &mainThreadNormalWorld();
 }
 
-void PageScriptDebugServer::reportException(ExecState* state, JSC::Exception* exception) const
+void PageScriptDebugServer::reportException(JSGlobalObject* state, JSC::Exception* exception) const
 {
     WebCore::reportException(state, exception);
 }
 
 void PageScriptDebugServer::setJavaScriptPaused(const PageGroup& pageGroup, bool paused)
