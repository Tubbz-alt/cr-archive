diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCallbackData.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCallbackData.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCallbackData.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCallbackData.cpp
@@ -40,12 +40,12 @@
 
 JSValue JSCallbackData::invokeCallback(JSDOMGlobalObject& globalObject, JSObject* callback, JSValue thisValue, MarkedArgumentBuffer& args, CallbackType method, PropertyName functionName, NakedPtr<JSC::Exception>& returnedException)
 {
     ASSERT(callback);
 
-    ExecState* exec = globalObject.globalExec();
-    VM& vm = exec->vm();
+    JSGlobalObject* lexicalGlobalObject = &globalObject;
+    VM& vm = lexicalGlobalObject->vm();
     auto scope = DECLARE_CATCH_SCOPE(vm);
 
     JSValue function;
     CallData callData;
     CallType callType = CallType::None;
@@ -54,25 +54,25 @@
         function = callback;
         callType = callback->methodTable(vm)->getCallData(callback, callData);
     }
     if (callType == CallType::None) {
         if (method == CallbackType::Function) {
-            returnedException = JSC::Exception::create(vm, createTypeError(exec));
+            returnedException = JSC::Exception::create(vm, createTypeError(lexicalGlobalObject));
             return JSValue();
         }
 
         ASSERT(!functionName.isNull());
-        function = callback->get(exec, functionName);
+        function = callback->get(lexicalGlobalObject, functionName);
         if (UNLIKELY(scope.exception())) {
             returnedException = scope.exception();
             scope.clearException();
             return JSValue();
         }
 
         callType = getCallData(vm, function, callData);
         if (callType == CallType::None) {
-            returnedException = JSC::Exception::create(vm, createTypeError(exec));
+            returnedException = JSC::Exception::create(vm, createTypeError(lexicalGlobalObject));
             return JSValue();
         }
     }
 
     ASSERT(!function.isEmpty());
@@ -81,16 +81,16 @@
     ScriptExecutionContext* context = globalObject.scriptExecutionContext();
     // We will fail to get the context if the frame has been detached.
     if (!context)
         return JSValue();
 
-    InspectorInstrumentationCookie cookie = JSExecState::instrumentFunctionCall(context, callType, callData);
+    JSExecState::instrumentFunctionCall(context, callType, callData);
 
     returnedException = nullptr;
-    JSValue result = JSExecState::profiledCall(exec, JSC::ProfilingReason::Other, function, callType, callData, thisValue, args, returnedException);
+    JSValue result = JSExecState::profiledCall(lexicalGlobalObject, JSC::ProfilingReason::Other, function, callType, callData, thisValue, args, returnedException);
 
-    InspectorInstrumentation::didCallFunction(cookie, context);
+    InspectorInstrumentation::didCallFunction(context);
 
     return result;
 }
 
 void JSCallbackDataWeak::visitJSFunction(JSC::SlotVisitor& vistor)
