diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/UserGestureIndicator.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/UserGestureIndicator.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/UserGestureIndicator.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/UserGestureIndicator.cpp
@@ -24,10 +24,11 @@
  */
 
 #include "config.h"
 #include "UserGestureIndicator.h"
 
+#include "DOMWindow.h"
 #include "Document.h"
 #include "Frame.h"
 #include "ResourceLoadObserver.h"
 #include <wtf/MainThread.h>
 #include <wtf/NeverDestroyed.h>
@@ -54,21 +55,24 @@
     ASSERT(isMainThread());
 
     if (state)
         currentToken() = UserGestureToken::create(state.value(), gestureType);
 
-    if (document && currentToken()->processingUserGesture()) {
-        document->updateLastHandledUserGestureTimestamp(MonotonicTime::now());
+    if (document && currentToken()->processingUserGesture() && state) {
+        document->updateLastHandledUserGestureTimestamp(currentToken()->startTime());
         if (processInteractionStyle == ProcessInteractionStyle::Immediate)
             ResourceLoadObserver::shared().logUserInteractionWithReducedTimeResolution(document->topDocument());
         document->topDocument().setUserDidInteractWithPage(true);
         if (auto* frame = document->frame()) {
             if (!frame->hasHadUserInteraction()) {
                 for (; frame; frame = frame->tree().parent())
                     frame->setHasHadUserInteraction();
             }
         }
+
+        if (auto* window = document->domWindow())
+            window->notifyActivated(currentToken()->startTime());
     }
 }
 
 UserGestureIndicator::UserGestureIndicator(RefPtr<UserGestureToken> token, UserGestureToken::GestureScope scope)
 {
