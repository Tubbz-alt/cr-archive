diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FormatConverter.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FormatConverter.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FormatConverter.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FormatConverter.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2010 Apple Inc. All rights reserved.
+ * Copyright (C) 2010-2020 Apple Inc. All rights reserved.
  * Copyright (C) 2010 Google Inc. All rights reserved.
  * Copyright (C) 2010 Mozilla Corporation. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
@@ -23,13 +23,15 @@
  * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-#if ENABLE(GRAPHICS_CONTEXT_3D)
+#pragma once
 
-#include "GraphicsContext3D.h"
+#if ENABLE(GRAPHICS_CONTEXT_GL)
+
+#include "GraphicsContextGLOpenGL.h"
 #include <wtf/StdLibExtras.h>
 #include <wtf/UniqueArray.h>
 
 namespace WebCore {
 
@@ -49,21 +51,21 @@
         m_unpackedIntermediateSrcData = makeUniqueArray<uint8_t>((Checked<size_t>(m_width) * MaxNumberOfComponents * MaxBytesPerComponent).unsafeGet());
 
         ASSERT(m_unpackedIntermediateSrcData.get());
     }
 
-    void convert(GraphicsContext3D::DataFormat srcFormat, GraphicsContext3D::DataFormat dstFormat, GraphicsContext3D::AlphaOp);
+    void convert(GraphicsContextGL::DataFormat srcFormat, GraphicsContextGL::DataFormat dstFormat, GraphicsContextGL::AlphaOp);
     bool success() const { return m_success; }
 
 private:
-    template<GraphicsContext3D::DataFormat SrcFormat>
-    ALWAYS_INLINE void convert(GraphicsContext3D::DataFormat dstFormat, GraphicsContext3D::AlphaOp);
+    template<GraphicsContextGL::DataFormat SrcFormat>
+    ALWAYS_INLINE void convert(GraphicsContextGL::DataFormat dstFormat, GraphicsContextGL::AlphaOp);
 
-    template<GraphicsContext3D::DataFormat SrcFormat, GraphicsContext3D::DataFormat DstFormat>
-    ALWAYS_INLINE void convert(GraphicsContext3D::AlphaOp);
+    template<GraphicsContextGL::DataFormat SrcFormat, GraphicsContextGL::DataFormat DstFormat>
+    ALWAYS_INLINE void convert(GraphicsContextGL::AlphaOp);
 
-    template<GraphicsContext3D::DataFormat SrcFormat, GraphicsContext3D::DataFormat DstFormat, GraphicsContext3D::AlphaOp alphaOp>
+    template<GraphicsContextGL::DataFormat SrcFormat, GraphicsContextGL::DataFormat DstFormat, GraphicsContextGL::AlphaOp alphaOp>
     ALWAYS_INLINE void convert();
 
     const unsigned m_width, m_height;
     const void* const m_srcStart;
     void* const m_dstStart;
@@ -72,6 +74,6 @@
     UniqueArray<uint8_t> m_unpackedIntermediateSrcData;
 };
 
 } // namespace WebCore
 
-#endif // ENABLE(GRAPHICS_CONTEXT_3D)
+#endif // ENABLE(GRAPHICS_CONTEXT_GL)
