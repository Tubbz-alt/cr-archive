diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorker.h b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorker.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorker.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorker.h
@@ -28,22 +28,25 @@
 #if ENABLE(SERVICE_WORKER)
 
 #include "ActiveDOMObject.h"
 #include "ContextDestructionObserver.h"
 #include "EventTarget.h"
+#include "PostMessageOptions.h"
 #include "ServiceWorkerData.h"
 #include <JavaScriptCore/Strong.h>
 #include <wtf/RefCounted.h>
 #include <wtf/URL.h>
 
 namespace JSC {
+class JSGlobalObject;
 class JSValue;
 }
 
 namespace WebCore {
 
 class Frame;
+class SWClientConnection;
 
 class ServiceWorker final : public RefCounted<ServiceWorker>, public EventTargetWithInlineData, public ActiveDOMObject {
     WTF_MAKE_ISO_ALLOCATED(ServiceWorker);
 public:
     using State = ServiceWorkerState;
@@ -55,11 +58,11 @@
 
     State state() const { return m_data.state; }
 
     void updateState(State);
 
-    ExceptionOr<void> postMessage(ScriptExecutionContext&, JSC::JSValue message, Vector<JSC::Strong<JSC::JSObject>>&&);
+    ExceptionOr<void> postMessage(JSC::JSGlobalObject&, JSC::JSValue message, PostMessageOptions&&);
 
     ServiceWorkerIdentifier identifier() const { return m_data.identifier; }
     ServiceWorkerRegistrationIdentifier registrationIdentifier() const { return m_data.registrationIdentifier; }
 
     using RefCounted::ref;
@@ -74,15 +77,16 @@
     void refEventTarget() final { ref(); }
     void derefEventTarget() final { deref(); }
 
     // ActiveDOMObject.
     const char* activeDOMObjectName() const final;
-    bool canSuspendForDocumentSuspension() const final;
     void stop() final;
 
     bool isAlwaysOnLoggingAllowed() const;
 
+    SWClientConnection& swConnection();
+
     ServiceWorkerData m_data;
     bool m_isStopped { false };
     RefPtr<PendingActivity<ServiceWorker>> m_pendingActivityForEventDispatch;
 };
 
