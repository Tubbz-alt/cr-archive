diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBDatabase.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBDatabase.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBDatabase.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBDatabase.h
@@ -80,14 +80,13 @@
 
     using ThreadSafeRefCounted<IDBDatabase>::ref;
     using ThreadSafeRefCounted<IDBDatabase>::deref;
 
     const char* activeDOMObjectName() const final;
-    bool canSuspendForDocumentSuspension() const final;
     void stop() final;
 
-    const IDBDatabaseInfo& info() const { return m_info; }
+    IDBDatabaseInfo& info() { return m_info; }
     uint64_t databaseConnectionIdentifier() const { return m_databaseConnectionIdentifier; }
 
     Ref<IDBTransaction> startVersionChangeTransaction(const IDBTransactionInfo&, IDBOpenDBRequest&);
     void didStartTransaction(IDBTransaction&);
 
@@ -109,10 +108,13 @@
 
     void dispatchEvent(Event&) final;
 
     bool hasPendingActivity() const final;
 
+    void setIsContextSuspended(bool isContextSuspended) { m_isContextSuspended = isContextSuspended; }
+    bool isContextSuspended() const { return m_isContextSuspended; }
+
 private:
     IDBDatabase(ScriptExecutionContext&, IDBClient::IDBConnectionProxy&, const IDBResultData&);
 
     void didCommitOrAbortTransaction(IDBTransaction&);
 
@@ -129,10 +131,12 @@
     HashMap<IDBResourceIdentifier, RefPtr<IDBTransaction>> m_activeTransactions;
     HashMap<IDBResourceIdentifier, RefPtr<IDBTransaction>> m_committingTransactions;
     HashMap<IDBResourceIdentifier, RefPtr<IDBTransaction>> m_abortingTransactions;
 
     const EventNames& m_eventNames; // Need to cache this so we can use it from GC threads.
+
+    bool m_isContextSuspended { false };
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(INDEXED_DATABASE)
