diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediarecorder/MediaRecorderPrivateMock.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediarecorder/MediaRecorderPrivateMock.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediarecorder/MediaRecorderPrivateMock.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediarecorder/MediaRecorderPrivateMock.cpp
@@ -31,21 +31,21 @@
 #include "MediaStreamTrackPrivate.h"
 #include "SharedBuffer.h"
 
 namespace WebCore {
 
-void MediaRecorderPrivateMock::sampleBufferUpdated(MediaStreamTrackPrivate& track, MediaSample&)
+void MediaRecorderPrivateMock::sampleBufferUpdated(const MediaStreamTrackPrivate& track, MediaSample&)
 {
     generateMockString(track);
 }
 
-void MediaRecorderPrivateMock::audioSamplesAvailable(MediaStreamTrackPrivate& track, const WTF::MediaTime&, const PlatformAudioData&, const AudioStreamDescription&, size_t)
+void MediaRecorderPrivateMock::audioSamplesAvailable(const MediaStreamTrackPrivate& track, const WTF::MediaTime&, const PlatformAudioData&, const AudioStreamDescription&, size_t)
 {
     generateMockString(track);
 }
 
-void MediaRecorderPrivateMock::generateMockString(MediaStreamTrackPrivate& track)
+void MediaRecorderPrivateMock::generateMockString(const MediaStreamTrackPrivate& track)
 {
     auto locker = holdLock(m_bufferLock);
     if (track.type() == RealtimeMediaSource::Type::Audio)
         m_buffer.append("Audio Track ID: ");
     else
@@ -54,17 +54,17 @@
     m_buffer.append(" Counter: ");
     m_buffer.appendNumber(++m_counter);
     m_buffer.append("\r\n---------\r\n");
 }
 
-RefPtr<SharedBuffer> MediaRecorderPrivateMock::fetchData()
+void MediaRecorderPrivateMock::fetchData(CompletionHandler<void(RefPtr<SharedBuffer>&&, const String&)>&& completionHandler)
 {
     auto locker = holdLock(m_bufferLock);
     Vector<uint8_t> value(m_buffer.length());
     memcpy(value.data(), m_buffer.characters8(), m_buffer.length());
     m_buffer.clear();
-    return SharedBuffer::create(WTFMove(value));
+    completionHandler(SharedBuffer::create(WTFMove(value)), mimeType());
 }
 
 const String& MediaRecorderPrivateMock::mimeType()
 {
     static NeverDestroyed<const String> textPlainMimeType(MAKE_STATIC_STRING_IMPL("text/plain"));
