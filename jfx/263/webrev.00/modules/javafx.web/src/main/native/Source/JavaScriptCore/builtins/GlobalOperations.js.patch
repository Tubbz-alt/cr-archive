diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/GlobalOperations.js b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/GlobalOperations.js
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/GlobalOperations.js
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/GlobalOperations.js
@@ -93,18 +93,18 @@
         @throwTypeError("target needs to be an object");
 
     if (@isUndefinedOrNull(source))
         return target;
 
-    let from = @toObject(source);
-    let keys = @ownKeys(from);
-    let keysLength = keys.length;
-    for (let i = 0; i < keysLength; i++) {
-        let nextKey = keys[i];
+    var from = @toObject(source);
+    var keys = @ownKeys(from);
+    var keysLength = keys.length;
+    for (var i = 0; i < keysLength; i++) {
+        var nextKey = keys[i];
         if (!excludedSet.@has(nextKey)) {
             if (@propertyIsEnumerable(from, nextKey)) {
-                let propValue = from[nextKey];
+                var propValue = from[nextKey];
                 @defineEnumerableWritableConfigurableDataProperty(target, nextKey, propValue);
             }
         }
     }
 
@@ -120,17 +120,17 @@
         @throwTypeError("target needs to be an object");
 
     if (@isUndefinedOrNull(source))
         return target;
 
-    let from = @toObject(source);
-    let keys = @ownKeys(from);
-    let keysLength = keys.length;
-    for (let i = 0; i < keysLength; i++) {
-        let nextKey = keys[i];
+    var from = @toObject(source);
+    var keys = @ownKeys(from);
+    var keysLength = keys.length;
+    for (var i = 0; i < keysLength; i++) {
+        var nextKey = keys[i];
         if (@propertyIsEnumerable(from, nextKey)) {
-            let propValue = from[nextKey];
+            var propValue = from[nextKey];
             @defineEnumerableWritableConfigurableDataProperty(target, nextKey, propValue);
         }
     }
 
     return target;
