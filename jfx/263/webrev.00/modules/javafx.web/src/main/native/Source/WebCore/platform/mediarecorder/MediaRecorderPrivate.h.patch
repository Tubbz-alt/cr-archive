diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediarecorder/MediaRecorderPrivate.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediarecorder/MediaRecorderPrivate.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediarecorder/MediaRecorderPrivate.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediarecorder/MediaRecorderPrivate.h
@@ -22,11 +22,13 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include <wtf/CompletionHandler.h>
 #include <wtf/Forward.h>
+#include "Exception.h"
 
 #if ENABLE(MEDIA_STREAM)
 
 namespace WTF {
 class MediaTime;
@@ -40,17 +42,23 @@
 class PlatformAudioData;
 class SharedBuffer;
 
 class MediaRecorderPrivate {
 public:
-    virtual void sampleBufferUpdated(MediaStreamTrackPrivate&, MediaSample&) = 0;
-    virtual void audioSamplesAvailable(MediaStreamTrackPrivate&, const WTF::MediaTime&, const PlatformAudioData&, const AudioStreamDescription&, size_t) = 0;
-
-    virtual RefPtr<SharedBuffer> fetchData() = 0;
-    virtual const String& mimeType() = 0;
     virtual ~MediaRecorderPrivate() = default;
-    virtual void stopRecording() { }
+
+    virtual void sampleBufferUpdated(const MediaStreamTrackPrivate&, MediaSample&) = 0;
+    virtual void audioSamplesAvailable(const MediaStreamTrackPrivate&, const WTF::MediaTime&, const PlatformAudioData&, const AudioStreamDescription&, size_t) = 0;
+
+    virtual void fetchData(CompletionHandler<void(RefPtr<SharedBuffer>&&, const String& mimeType)>&&) = 0;
+    virtual void stopRecording() { };
+
+    using ErrorCallback = Function<void(Optional<Exception>&&)>;
+    void setErrorCallback(ErrorCallback&& errorCallback) { m_errorCallback = WTFMove(errorCallback); }
+
+protected:
+    ErrorCallback m_errorCallback;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(MEDIA_STREAM)
