diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ExceptionFuzz.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ExceptionFuzz.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ExceptionFuzz.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ExceptionFuzz.cpp
@@ -34,33 +34,33 @@
 
 static unsigned s_numberOfExceptionFuzzChecks;
 unsigned numberOfExceptionFuzzChecks() { return s_numberOfExceptionFuzzChecks; }
 
 // Call this only if you know that exception fuzzing is enabled.
-void doExceptionFuzzing(ExecState* exec, ThrowScope& scope, const char* where, const void* returnPC)
+void doExceptionFuzzing(JSGlobalObject* globalObject, ThrowScope& scope, const char* where, const void* returnPC)
 {
     VM& vm = scope.vm();
     ASSERT(Options::useExceptionFuzz());
 
     DeferGCForAWhile deferGC(vm.heap);
 
     s_numberOfExceptionFuzzChecks++;
 
     unsigned fireTarget = Options::fireExceptionFuzzAt();
     if (fireTarget == s_numberOfExceptionFuzzChecks) {
-        printf("JSC EXCEPTION FUZZ: Throwing fuzz exception with call frame %p, seen in %s and return address %p.\n", exec, where, returnPC);
+        printf("JSC EXCEPTION FUZZ: Throwing fuzz exception with call frame %p, seen in %s and return address %p.\n", globalObject, where, returnPC);
         fflush(stdout);
 
         // The ThrowScope also checks for unchecked simulated exceptions before throwing a
         // new exception. This ensures that we don't quietly overwrite a pending exception
         // (which should never happen with the only exception being to rethrow the same
         // exception). However, ExceptionFuzz works by intentionally throwing its own exception
         // even when one may already exist. This is ok for ExceptionFuzz testing, but we need
         // to placate the exception check verifier here.
         EXCEPTION_ASSERT(scope.exception() || !scope.exception());
 
-        throwException(exec, scope, createError(exec, "Exception Fuzz"_s));
+        throwException(globalObject, scope, createError(globalObject, "Exception Fuzz"_s));
     }
 }
 
 } // namespace JSC
 
