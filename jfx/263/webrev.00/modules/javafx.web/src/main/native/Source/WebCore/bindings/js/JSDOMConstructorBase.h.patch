diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConstructorBase.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConstructorBase.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConstructorBase.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConstructorBase.h
@@ -1,8 +1,8 @@
 /*
  *  Copyright (C) 2015, 2016 Canon Inc. All rights reserved.
- *  Copyright (C) 2016 Apple Inc. All rights reserved.
+ *  Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Lesser General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -26,21 +26,33 @@
 // Base class for all constructor objects in the JSC bindings.
 class JSDOMConstructorBase : public JSDOMObject {
 public:
     using Base = JSDOMObject;
 
-    static const unsigned StructureFlags = Base::StructureFlags | JSC::ImplementsHasInstance | JSC::ImplementsDefaultHasInstance | JSC::OverridesGetCallData;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | JSC::ImplementsHasInstance | JSC::ImplementsDefaultHasInstance | JSC::OverridesGetCallData;
+    static constexpr bool needsDestruction = false;
     static JSC::Structure* createStructure(JSC::VM&, JSC::JSGlobalObject*, JSC::JSValue);
 
+    template<typename CellType, JSC::SubspaceAccess>
+    static JSC::IsoSubspace* subspaceFor(JSC::VM& vm)
+    {
+        static_assert(sizeof(CellType) == sizeof(JSDOMConstructorBase));
+        STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(CellType, JSDOMConstructorBase);
+        static_assert(CellType::destroy == JSC::JSCell::destroy, "JSDOMConstructor<JSClass> is not destructible actually");
+        return subspaceForImpl(vm);
+    }
+
+    static JSC::IsoSubspace* subspaceForImpl(JSC::VM&);
+
 protected:
     JSDOMConstructorBase(JSC::Structure* structure, JSDOMGlobalObject& globalObject)
         : JSDOMObject(structure, globalObject)
     {
     }
 
     static String className(const JSObject*, JSC::VM&);
-    static String toStringName(const JSObject*, JSC::ExecState*);
+    static String toStringName(const JSObject*, JSC::JSGlobalObject*);
     static JSC::CallType getCallData(JSCell*, JSC::CallData&);
 };
 
 inline JSC::Structure* JSDOMConstructorBase::createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
 {
