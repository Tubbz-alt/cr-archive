diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/ScreenProperties.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/ScreenProperties.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/ScreenProperties.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/ScreenProperties.h
@@ -43,10 +43,11 @@
     int screenDepth { 0 };
     int screenDepthPerComponent { 0 };
     bool screenSupportsExtendedColor { false };
     bool screenHasInvertedColors { false };
     bool screenIsMonochrome { false };
+    bool screenSupportsHighDynamicRange { false };
     uint32_t displayMask { 0 };
     IORegistryGPUID gpuID { 0 };
 
     enum EncodedColorSpaceDataType {
         Null,
@@ -92,11 +93,11 @@
 }
 
 template<class Encoder>
 void ScreenData::encode(Encoder& encoder) const
 {
-    encoder << screenAvailableRect << screenRect << screenDepth << screenDepthPerComponent << screenSupportsExtendedColor << screenHasInvertedColors << screenIsMonochrome << displayMask << gpuID;
+    encoder << screenAvailableRect << screenRect << screenDepth << screenDepthPerComponent << screenSupportsExtendedColor << screenHasInvertedColors << screenIsMonochrome << screenSupportsHighDynamicRange << displayMask << gpuID;
 
     if (colorSpace) {
         // Try to encode the name.
         if (auto name = adoptCF(CGColorSpaceCopyName(colorSpace.get()))) {
             encoder.encodeEnum(ColorSpaceName);
@@ -156,10 +157,15 @@
     Optional<bool> screenIsMonochrome;
     decoder >> screenIsMonochrome;
     if (!screenIsMonochrome)
         return WTF::nullopt;
 
+    Optional<bool> screenSupportsHighDynamicRange;
+    decoder >> screenSupportsHighDynamicRange;
+    if (!screenSupportsHighDynamicRange)
+        return WTF::nullopt;
+
     Optional<uint32_t> displayMask;
     decoder >> displayMask;
     if (!displayMask)
         return WTF::nullopt;
 
@@ -197,11 +203,11 @@
         cgColorSpace = adoptCF(CGColorSpaceCreateWithICCData(colorSpaceData.get()));
         break;
     }
     }
 
-    return { { WTFMove(*screenAvailableRect), WTFMove(*screenRect), WTFMove(cgColorSpace), WTFMove(*screenDepth), WTFMove(*screenDepthPerComponent), WTFMove(*screenSupportsExtendedColor), WTFMove(*screenHasInvertedColors), WTFMove(*screenIsMonochrome), WTFMove(*displayMask), WTFMove(*gpuID) } };
+    return { { WTFMove(*screenAvailableRect), WTFMove(*screenRect), WTFMove(cgColorSpace), WTFMove(*screenDepth), WTFMove(*screenDepthPerComponent), WTFMove(*screenSupportsExtendedColor), WTFMove(*screenHasInvertedColors), WTFMove(*screenIsMonochrome), WTFMove(*screenSupportsHighDynamicRange), WTFMove(*displayMask), WTFMove(*gpuID) } };
 }
 
 } // namespace WebCore
 
 #endif // PLATFORM(MAC)
