diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DisallowVMReentry.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DisallowVMReentry.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DisallowVMReentry.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DisallowVMReentry.h
@@ -24,10 +24,11 @@
  */
 
 #pragma once
 
 #include "DisallowScope.h"
+#include <wtf/NeverDestroyed.h>
 #include <wtf/ThreadSpecific.h>
 
 namespace JSC {
 
 class DisallowVMReentry : public DisallowScope<DisallowVMReentry> {
@@ -45,24 +46,24 @@
         : Base(enabled)
     { }
 
     static void initialize()
     {
-        WTF::threadSpecificKeyCreate(&s_scopeReentryCount, 0);
+        s_scopeReentryCount.construct();
     }
 
 private:
-    static uintptr_t scopeReentryCount()
+    static unsigned scopeReentryCount()
     {
-        return reinterpret_cast<uintptr_t>(WTF::threadSpecificGet(s_scopeReentryCount));
+        return *s_scopeReentryCount.get();
     }
-    static void setScopeReentryCount(uintptr_t value)
+    static void setScopeReentryCount(unsigned value)
     {
-        WTF::threadSpecificSet(s_scopeReentryCount, reinterpret_cast<void*>(value));
+        *s_scopeReentryCount.get() = value;
     }
 
-    JS_EXPORT_PRIVATE static WTF::ThreadSpecificKey s_scopeReentryCount;
+    JS_EXPORT_PRIVATE static LazyNeverDestroyed<ThreadSpecific<unsigned, WTF::CanBeGCThread::True>> s_scopeReentryCount;
 
 #endif // NDEBUG
 
     friend class DisallowScope<DisallowVMReentry>;
 };
