diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/client/IDBConnectionProxy.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/client/IDBConnectionProxy.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/client/IDBConnectionProxy.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/client/IDBConnectionProxy.cpp
@@ -113,10 +113,23 @@
     }
 
     if (!request)
         return;
 
+    if (request->isContextSuspended()) {
+        switch (resultData.type()) {
+        case IDBResultType::OpenDatabaseUpgradeNeeded: {
+            abortOpenAndUpgradeNeeded(resultData.databaseConnectionIdentifier(), resultData.transactionInfo().identifier());
+            auto result = IDBResultData::error(resultData.requestIdentifier(), IDBError { UnknownError, "Version change transaction on cached page is aborted to unblock other connections"_s });
+            request->performCallbackOnOriginThread(*request, &IDBOpenDBRequest::requestCompleted, result);
+            return;
+        }
+        default:
+            break;
+        }
+    }
+
     request->performCallbackOnOriginThread(*request, &IDBOpenDBRequest::requestCompleted, resultData);
 }
 
 void IDBConnectionProxy::createObjectStore(TransactionOperation& operation, const IDBObjectStoreInfo& info)
 {
@@ -223,11 +236,12 @@
 }
 
 void IDBConnectionProxy::iterateCursor(TransactionOperation& operation, const IDBIterateCursorData& data)
 {
     const IDBRequestData requestData { operation };
-    saveOperation(operation);
+    if (data.option != IndexedDB::CursorIterateOption::DoNotReply)
+        saveOperation(operation);
 
     callConnectionOnMainThread(&IDBConnectionToServer::iterateCursor, requestData, data);
 }
 
 void IDBConnectionProxy::saveOperation(TransactionOperation& operation)
@@ -266,16 +280,22 @@
     }
 
     if (!database)
         return;
 
+    if (database->isContextSuspended()) {
+        didFireVersionChangeEvent(databaseConnectionIdentifier, requestIdentifier, IndexedDB::ConnectionClosedOnBehalfOfServer::Yes);
+        database->performCallbackOnOriginThread(*database, &IDBDatabase::connectionToServerLost, IDBError { UnknownError, "Connection on cached page closed to unblock other connections"_s});
+        return;
+    }
+
     database->performCallbackOnOriginThread(*database, &IDBDatabase::fireVersionChangeEvent, requestIdentifier, requestedVersion);
 }
 
-void IDBConnectionProxy::didFireVersionChangeEvent(uint64_t databaseConnectionIdentifier, const IDBResourceIdentifier& requestIdentifier)
+void IDBConnectionProxy::didFireVersionChangeEvent(uint64_t databaseConnectionIdentifier, const IDBResourceIdentifier& requestIdentifier, IndexedDB::ConnectionClosedOnBehalfOfServer connectionClosed)
 {
-    callConnectionOnMainThread(&IDBConnectionToServer::didFireVersionChangeEvent, databaseConnectionIdentifier, requestIdentifier);
+    callConnectionOnMainThread(&IDBConnectionToServer::didFireVersionChangeEvent, databaseConnectionIdentifier, requestIdentifier, connectionClosed);
 }
 
 void IDBConnectionProxy::notifyOpenDBRequestBlocked(const IDBResourceIdentifier& requestIdentifier, uint64_t oldVersion, uint64_t newVersion)
 {
     ASSERT(isMainThread());
@@ -401,25 +421,16 @@
     {
         Locker<Lock> locker(m_databaseConnectionMapLock);
         database = m_databaseConnectionMap.get(databaseConnectionIdentifier);
     }
 
-    // If the IDBDatabase object is gone, message back to the server so it doesn't hang
-    // waiting for a reply that will never come.
-    if (!database) {
-        m_connectionToServer.confirmDidCloseFromServer(databaseConnectionIdentifier);
+    if (!database)
         return;
-    }
 
     database->performCallbackOnOriginThread(*database, &IDBDatabase::didCloseFromServer, error);
 }
 
-void IDBConnectionProxy::confirmDidCloseFromServer(IDBDatabase& database)
-{
-    callConnectionOnMainThread(&IDBConnectionToServer::confirmDidCloseFromServer, database.databaseConnectionIdentifier());
-}
-
 void IDBConnectionProxy::connectionToServerLost(const IDBError& error)
 {
     Vector<uint64_t> databaseConnectionIdentifiers;
     {
         Locker<Lock> locker(m_databaseConnectionMapLock);
@@ -527,10 +538,12 @@
 }
 
 template<typename KeyType, typename ValueType>
 void removeItemsMatchingCurrentThread(HashMap<KeyType, ValueType>& map)
 {
+    // FIXME: Revisit when introducing WebThread aware thread comparison.
+    // https://bugs.webkit.org/show_bug.cgi?id=204345
     auto& currentThread = Thread::current();
 
     Vector<KeyType> keys;
     keys.reserveInitialCapacity(map.size());
     for (auto& iterator : map) {
@@ -540,10 +553,29 @@
 
     for (auto& key : keys)
         map.remove(key);
 }
 
+template<typename KeyType, typename ValueType>
+void setMatchingItemsContextSuspended(ScriptExecutionContext& currentContext, HashMap<KeyType, ValueType>& map, bool isContextSuspended)
+{
+    // FIXME: Revisit when introducing WebThread aware thread comparison.
+    // https://bugs.webkit.org/show_bug.cgi?id=204345
+    auto& currentThread = Thread::current();
+    for (auto& iterator : map) {
+        if (&iterator.value->originThread() != &currentThread)
+            continue;
+
+        auto* context = iterator.value->scriptExecutionContext();
+        if (!context)
+            continue;
+
+        if (context == &currentContext)
+            iterator.value->setIsContextSuspended(isContextSuspended);
+    }
+}
+
 void IDBConnectionProxy::forgetActivityForCurrentThread()
 {
     ASSERT(!isMainThread());
 
     {
@@ -564,9 +596,21 @@
         Locker<Lock> lock(m_transactionOperationLock);
         removeItemsMatchingCurrentThread(m_activeOperations);
     }
 }
 
+void IDBConnectionProxy::setContextSuspended(ScriptExecutionContext& currentContext, bool isContextSuspended)
+{
+    {
+        Locker<Lock> lock(m_databaseConnectionMapLock);
+        setMatchingItemsContextSuspended(currentContext, m_databaseConnectionMap, isContextSuspended);
+    }
+    {
+        Locker<Lock> lock(m_openDBRequestMapLock);
+        setMatchingItemsContextSuspended(currentContext, m_openDBRequestMap, isContextSuspended);
+    }
+}
+
 } // namesapce IDBClient
 } // namespace WebCore
 
 #endif // ENABLE(INDEXED_DATABASE)
