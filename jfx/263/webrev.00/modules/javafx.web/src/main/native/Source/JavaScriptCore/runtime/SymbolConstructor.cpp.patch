diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolConstructor.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolConstructor.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolConstructor.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolConstructor.cpp
@@ -34,12 +34,12 @@
 #include "SymbolPrototype.h"
 #include <wtf/text/SymbolRegistry.h>
 
 namespace JSC {
 
-static EncodedJSValue JSC_HOST_CALL symbolConstructorFor(ExecState*);
-static EncodedJSValue JSC_HOST_CALL symbolConstructorKeyFor(ExecState*);
+static EncodedJSValue JSC_HOST_CALL symbolConstructorFor(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL symbolConstructorKeyFor(JSGlobalObject*, CallFrame*);
 
 }
 
 #include "SymbolConstructor.lut.h"
 
@@ -54,11 +54,11 @@
   for       symbolConstructorFor       DontEnum|Function 1
   keyFor    symbolConstructorKeyFor    DontEnum|Function 1
 @end
 */
 
-static EncodedJSValue JSC_HOST_CALL callSymbol(ExecState*);
+static EncodedJSValue JSC_HOST_CALL callSymbol(JSGlobalObject*, CallFrame*);
 
 SymbolConstructor::SymbolConstructor(VM& vm, Structure* structure)
     : InternalFunction(vm, structure, callSymbol, nullptr)
 {
 }
@@ -66,56 +66,56 @@
 #define INITIALIZE_WELL_KNOWN_SYMBOLS(name) \
 putDirectWithoutTransition(vm, Identifier::fromString(vm, #name), Symbol::create(vm, static_cast<SymbolImpl&>(*vm.propertyNames->name##Symbol.impl())), PropertyAttribute::DontEnum | PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly);
 
 void SymbolConstructor::finishCreation(VM& vm, SymbolPrototype* prototype)
 {
-    Base::finishCreation(vm, vm.propertyNames->Symbol.string(), NameVisibility::Visible, NameAdditionMode::WithoutStructureTransition);
+    Base::finishCreation(vm, vm.propertyNames->Symbol.string(), NameAdditionMode::WithoutStructureTransition);
     putDirectWithoutTransition(vm, vm.propertyNames->prototype, prototype, PropertyAttribute::DontEnum | PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly);
     putDirectWithoutTransition(vm, vm.propertyNames->length, jsNumber(0), PropertyAttribute::ReadOnly | PropertyAttribute::DontEnum);
 
     JSC_COMMON_PRIVATE_IDENTIFIERS_EACH_WELL_KNOWN_SYMBOL(INITIALIZE_WELL_KNOWN_SYMBOLS)
 }
 
 // ------------------------------ Functions ---------------------------
 
-static EncodedJSValue JSC_HOST_CALL callSymbol(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL callSymbol(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    JSValue description = exec->argument(0);
+    JSValue description = callFrame->argument(0);
     if (description.isUndefined())
         return JSValue::encode(Symbol::create(vm));
 
-    String string = description.toWTFString(exec);
+    String string = description.toWTFString(globalObject);
     RETURN_IF_EXCEPTION(scope, { });
     return JSValue::encode(Symbol::createWithDescription(vm, string));
 }
 
-EncodedJSValue JSC_HOST_CALL symbolConstructorFor(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL symbolConstructorFor(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    JSString* stringKey = exec->argument(0).toString(exec);
+    JSString* stringKey = callFrame->argument(0).toString(globalObject);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
-    String string = stringKey->value(exec);
+    String string = stringKey->value(globalObject);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
-    return JSValue::encode(Symbol::create(exec->vm(), exec->vm().symbolRegistry().symbolForKey(string)));
+    return JSValue::encode(Symbol::create(vm, vm.symbolRegistry().symbolForKey(string)));
 }
 
 const ASCIILiteral SymbolKeyForTypeError { "Symbol.keyFor requires that the first argument be a symbol"_s };
 
-EncodedJSValue JSC_HOST_CALL symbolConstructorKeyFor(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL symbolConstructorKeyFor(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    JSValue symbolValue = exec->argument(0);
+    JSValue symbolValue = callFrame->argument(0);
     if (!symbolValue.isSymbol())
-        return JSValue::encode(throwTypeError(exec, scope, SymbolKeyForTypeError));
+        return JSValue::encode(throwTypeError(globalObject, scope, SymbolKeyForTypeError));
 
     PrivateName privateName = asSymbol(symbolValue)->privateName();
     SymbolImpl& uid = privateName.uid();
     if (!uid.symbolRegistry())
         return JSValue::encode(jsUndefined());
