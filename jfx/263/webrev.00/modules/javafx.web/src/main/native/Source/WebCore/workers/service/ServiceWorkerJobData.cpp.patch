diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerJobData.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerJobData.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerJobData.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerJobData.cpp
@@ -28,15 +28,10 @@
 
 #if ENABLE(SERVICE_WORKER)
 
 namespace WebCore {
 
-ServiceWorkerJobData::ServiceWorkerJobData(const Identifier& identifier)
-    : m_identifier(identifier)
-{
-}
-
 ServiceWorkerJobData::ServiceWorkerJobData(SWServerConnectionIdentifier connectionIdentifier, const DocumentOrWorkerIdentifier& localSourceContext)
     : m_identifier { connectionIdentifier, ServiceWorkerJobIdentifier::generateThreadSafe() }
 {
     WTF::switchOn(localSourceContext, [&](DocumentIdentifier documentIdentifier) {
         sourceContext = ServiceWorkerClientIdentifier { connectionIdentifier, documentIdentifier };
@@ -52,11 +47,12 @@
     return { SecurityOriginData { topOrigin }, WTFMove(scope) };
 }
 
 ServiceWorkerJobData ServiceWorkerJobData::isolatedCopy() const
 {
-    ServiceWorkerJobData result { identifier() };
+    ServiceWorkerJobData result;
+    result.m_identifier = identifier();
     result.sourceContext = sourceContext;
     result.type = type;
 
     result.scriptURL = scriptURL.isolatedCopy();
     result.clientCreationURL = clientCreationURL.isolatedCopy();
@@ -65,8 +61,27 @@
     result.registrationOptions = registrationOptions.isolatedCopy();
 
     return result;
 }
 
+// https://w3c.github.io/ServiceWorker/#dfn-job-equivalent
+bool ServiceWorkerJobData::isEquivalent(const ServiceWorkerJobData& job) const
+{
+    if (type != job.type)
+        return false;
+
+    switch (type) {
+    case ServiceWorkerJobType::Register:
+    case ServiceWorkerJobType::Update:
+        return scopeURL == job.scopeURL
+            && scriptURL == job.scriptURL
+            && registrationOptions.type == job.registrationOptions.type
+            && registrationOptions.updateViaCache == job.registrationOptions.updateViaCache;
+    case ServiceWorkerJobType::Unregister:
+        return scopeURL == job.scopeURL;
+    }
+    return false;
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(SERVICE_WORKER)
