diff a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserSelector.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserSelector.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserSelector.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserSelector.cpp
@@ -51,19 +51,12 @@
 }
 
 std::unique_ptr<CSSParserSelector> CSSParserSelector::parsePseudoElementSelector(StringView pseudoTypeString)
 {
     auto pseudoType = CSSSelector::parsePseudoElementType(pseudoTypeString);
-    if (pseudoType == CSSSelector::PseudoElementUnknown) {
-        // FIXME-NEWPARSER: We can't add "slotted" to the map without breaking the old
-        // parser, so this hack ensures the new parser still recognizes it. When the new
-        // parser turns on, we can add "slotted" to the map and remove this code.
-        if (pseudoTypeString.startsWithIgnoringASCIICase("slotted"))
-            pseudoType = CSSSelector::PseudoElementSlotted;
-        else
-            return nullptr;
-    }
+    if (pseudoType == CSSSelector::PseudoElementUnknown)
+        return nullptr;
 
     auto selector = makeUnique<CSSParserSelector>();
     selector->m_selector->setMatch(CSSSelector::PseudoElement);
     selector->m_selector->setPseudoElementType(pseudoType);
     AtomString name;
@@ -127,14 +120,14 @@
 void CSSParserSelector::adoptSelectorVector(Vector<std::unique_ptr<CSSParserSelector>>&& selectorVector)
 {
     m_selector->setSelectorList(makeUnique<CSSSelectorList>(WTFMove(selectorVector)));
 }
 
-void CSSParserSelector::setLangArgumentList(std::unique_ptr<Vector<AtomString>> argumentList)
+void CSSParserSelector::setArgumentList(std::unique_ptr<Vector<AtomString>> argumentList)
 {
     ASSERT_WITH_MESSAGE(!argumentList->isEmpty(), "No CSS Selector takes an empty argument list.");
-    m_selector->setLangArgumentList(WTFMove(argumentList));
+    m_selector->setArgumentList(WTFMove(argumentList));
 }
 
 void CSSParserSelector::setSelectorList(std::unique_ptr<CSSSelectorList> selectorList)
 {
     m_selector->setSelectorList(WTFMove(selectorList));
