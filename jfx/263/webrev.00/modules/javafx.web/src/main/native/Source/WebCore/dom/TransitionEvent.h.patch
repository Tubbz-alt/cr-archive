diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/TransitionEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/TransitionEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/TransitionEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/TransitionEvent.h
@@ -24,19 +24,20 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "Event.h"
+#include "AnimationEventBase.h"
 
 namespace WebCore {
 
-class TransitionEvent final : public Event {
+class TransitionEvent final : public AnimationEventBase {
+    WTF_MAKE_ISO_ALLOCATED(TransitionEvent);
 public:
-    static Ref<TransitionEvent> create(const AtomString& type, const String& propertyName, double elapsedTime, const String& pseudoElement)
+    static Ref<TransitionEvent> create(const AtomString& type, const String& propertyName, double elapsedTime, const String& pseudoElement, Optional<Seconds> timelineTime, WebAnimation* animation)
     {
-        return adoptRef(*new TransitionEvent(type, propertyName, elapsedTime, pseudoElement));
+        return adoptRef(*new TransitionEvent(type, propertyName, elapsedTime, pseudoElement, timelineTime, animation));
     }
 
     struct Init : EventInit {
         String propertyName;
         double elapsedTime { 0 };
@@ -48,21 +49,25 @@
         return adoptRef(*new TransitionEvent(type, initializer, isTrusted));
     }
 
     virtual ~TransitionEvent();
 
+    bool isTransitionEvent() const final { return true; }
+
     const String& propertyName() const;
     double elapsedTime() const;
     const String& pseudoElement() const;
 
     EventInterface eventInterface() const override;
 
 private:
-    TransitionEvent(const AtomString& type, const String& propertyName, double elapsedTime, const String& pseudoElement);
+    TransitionEvent(const AtomString& type, const String& propertyName, double elapsedTime, const String& pseudoElement, Optional<Seconds> timelineTime, WebAnimation*);
     TransitionEvent(const AtomString& type, const Init& initializer, IsTrusted);
 
     String m_propertyName;
     double m_elapsedTime;
     String m_pseudoElement;
 };
 
 } // namespace WebCore
+
+SPECIALIZE_TYPE_TRAITS_ANIMATION_EVENT_BASE(TransitionEvent, isTransitionEvent())
