diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/filters/FEGaussianBlur.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/filters/FEGaussianBlur.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/filters/FEGaussianBlur.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/filters/FEGaussianBlur.cpp
@@ -486,10 +486,18 @@
 IntSize FEGaussianBlur::calculateKernelSize(const Filter& filter, FloatSize stdDeviation)
 {
     return calculateUnscaledKernelSize(filter.scaledByFilterResolution(stdDeviation));
 }
 
+IntSize FEGaussianBlur::calculateOutsetSize(FloatSize stdDeviation)
+{
+    auto kernelSize = calculateUnscaledKernelSize(stdDeviation);
+
+    // We take the half kernel size and multiply it with three, because we run box blur three times.
+    return { 3 * kernelSize.width() / 2, 3 * kernelSize.height() / 2 };
+}
+
 void FEGaussianBlur::determineAbsolutePaintRect()
 {
     IntSize kernelSize = calculateKernelSize(filter(), { m_stdX, m_stdY });
 
     FloatRect absolutePaintRect = inputEffect(0)->absolutePaintRect();
@@ -537,10 +545,16 @@
         return;
 
     platformApply(*resultPixelArray, *tmpImageData, kernelSize.width(), kernelSize.height(), paintSize);
 }
 
+IntOutsets FEGaussianBlur::outsets() const
+{
+    IntSize outsetSize = calculateOutsetSize({ m_stdX, m_stdY });
+    return { outsetSize.height(), outsetSize.width(), outsetSize.height(), outsetSize.width() };
+}
+
 TextStream& FEGaussianBlur::externalRepresentation(TextStream& ts, RepresentationType representation) const
 {
     ts << indent << "[feGaussianBlur";
     FilterEffect::externalRepresentation(ts, representation);
     ts << " stdDeviation=\"" << m_stdX << ", " << m_stdY << "\"]\n";
