diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/NetworkLoadMetrics.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/NetworkLoadMetrics.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/NetworkLoadMetrics.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/NetworkLoadMetrics.h
@@ -68,13 +68,13 @@
         copy.complete = complete;
         copy.protocol = protocol.isolatedCopy();
 
         copy.remoteAddress = remoteAddress.isolatedCopy();
         copy.connectionIdentifier = connectionIdentifier.isolatedCopy();
-        copy.priority = priority;
         copy.tlsProtocol = tlsProtocol.isolatedCopy();
         copy.tlsCipher = tlsCipher.isolatedCopy();
+        copy.priority = priority;
         copy.requestHeaders = requestHeaders.isolatedCopy();
 
         copy.requestHeaderBytesSent = requestHeaderBytesSent;
         copy.requestBodyBytesSent = requestBodyBytesSent;
         copy.responseHeaderBytesReceived = responseHeaderBytesReceived;
@@ -101,13 +101,13 @@
 
     void clearNonTimingData()
     {
         remoteAddress = String();
         connectionIdentifier = String();
-        priority = NetworkLoadPriority::Unknown;
         tlsProtocol = String();
         tlsCipher = String();
+        priority = NetworkLoadPriority::Unknown;
         requestHeaders.clear();
         requestHeaderBytesSent = std::numeric_limits<uint32_t>::max();
         requestBodyBytesSent = std::numeric_limits<uint64_t>::max();
         responseHeaderBytesReceived = std::numeric_limits<uint32_t>::max();
         responseBodyBytesReceived = std::numeric_limits<uint64_t>::max();
@@ -126,13 +126,13 @@
             && responseEnd == other.responseEnd
             && complete == other.complete
             && protocol == other.protocol
             && remoteAddress == other.remoteAddress
             && connectionIdentifier == other.connectionIdentifier
-            && priority == other.priority
             && tlsProtocol == other.tlsProtocol
             && tlsCipher == other.tlsCipher
+            && priority == other.priority
             && requestHeaders == other.requestHeaders
             && requestHeaderBytesSent == other.requestHeaderBytesSent
             && requestBodyBytesSent == other.requestBodyBytesSent
             && responseHeaderBytesReceived == other.responseHeaderBytesReceived
             && responseBodyBytesReceived == other.responseBodyBytesReceived
@@ -164,35 +164,31 @@
     // ALPN Protocol ID: https://w3c.github.io/resource-timing/#bib-RFC7301
     String protocol;
 
     String remoteAddress;
     String connectionIdentifier;
-    NetworkLoadPriority priority;
 
     String tlsProtocol;
     String tlsCipher;
 
     // Whether or not all of the properties (0 or otherwise) have been set.
+    NetworkLoadPriority priority;
     bool complete { false };
 
     HTTPHeaderMap requestHeaders;
 
-    uint32_t requestHeaderBytesSent;
-    uint32_t responseHeaderBytesReceived;
+    uint64_t requestHeaderBytesSent;
+    uint64_t responseHeaderBytesReceived;
     uint64_t requestBodyBytesSent;
     uint64_t responseBodyBytesReceived;
     uint64_t responseBodyDecodedSize;
 };
 
 #if PLATFORM(COCOA)
 WEBCORE_EXPORT void copyTimingData(NSDictionary *timingData, NetworkLoadMetrics&);
 #endif
 
-#if PLATFORM(COCOA) && !HAVE(TIMINGDATAOPTIONS)
-WEBCORE_EXPORT void setCollectsTimingData();
-#endif
-
 template<class Encoder>
 void NetworkLoadMetrics::encode(Encoder& encoder) const
 {
     encoder << domainLookupStart;
     encoder << domainLookupEnd;
@@ -204,13 +200,13 @@
     encoder << responseEnd;
     encoder << complete;
     encoder << protocol;
     encoder << remoteAddress;
     encoder << connectionIdentifier;
-    encoder << priority;
     encoder << tlsProtocol;
     encoder << tlsCipher;
+    encoder << priority;
     encoder << requestHeaders;
     encoder << requestHeaderBytesSent;
     encoder << requestBodyBytesSent;
     encoder << responseHeaderBytesReceived;
     encoder << responseBodyBytesReceived;
@@ -230,13 +226,13 @@
         && decoder.decode(metrics.responseEnd)
         && decoder.decode(metrics.complete)
         && decoder.decode(metrics.protocol)
         && decoder.decode(metrics.remoteAddress)
         && decoder.decode(metrics.connectionIdentifier)
-        && decoder.decode(metrics.priority)
         && decoder.decode(metrics.tlsProtocol)
         && decoder.decode(metrics.tlsCipher)
+        && decoder.decode(metrics.priority)
         && decoder.decode(metrics.requestHeaders)
         && decoder.decode(metrics.requestHeaderBytesSent)
         && decoder.decode(metrics.requestBodyBytesSent)
         && decoder.decode(metrics.responseHeaderBytesReceived)
         && decoder.decode(metrics.responseBodyBytesReceived)
