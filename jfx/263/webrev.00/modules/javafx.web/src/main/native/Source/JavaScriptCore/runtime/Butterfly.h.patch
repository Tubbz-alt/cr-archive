diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Butterfly.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Butterfly.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Butterfly.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Butterfly.h
@@ -41,21 +41,21 @@
 template <typename T>
 struct ContiguousData {
     ContiguousData() = default;
     ContiguousData(T* data, size_t length)
         : m_data(data)
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         , m_length(length)
 #endif
     {
         UNUSED_PARAM(length);
     }
 
     struct Data {
         Data(T& location, IndexingType indexingMode)
             : m_data(location)
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
             , m_isWritable(!isCopyOnWrite(indexingMode))
 #endif
         {
             UNUSED_PARAM(indexingMode);
         }
@@ -101,28 +101,28 @@
             return m_data.get();
         }
 
 
         T& m_data;
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         bool m_isWritable;
 #endif
     };
 
     const Data at(const JSCell* owner, size_t index) const;
     Data at(const JSCell* owner, size_t index);
 
     T& atUnsafe(size_t index) { ASSERT(index < m_length); return m_data[index]; }
 
     T* data() const { return m_data; }
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     size_t length() const { return m_length; }
 #endif
 
 private:
     T* m_data { nullptr };
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     size_t m_length { 0 };
 #endif
 };
 
 using ContiguousDoubles = ContiguousData<double>;
