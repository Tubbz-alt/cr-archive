diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSessionManager.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSessionManager.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSessionManager.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSessionManager.h
@@ -111,15 +111,16 @@
     WEBCORE_EXPORT void removeRestriction(PlatformMediaSession::MediaType, SessionRestrictions);
     WEBCORE_EXPORT SessionRestrictions restrictions(PlatformMediaSession::MediaType);
     virtual void resetRestrictions();
 
     virtual bool sessionWillBeginPlayback(PlatformMediaSession&);
-    virtual void sessionWillEndPlayback(PlatformMediaSession&);
+
+    virtual void sessionWillEndPlayback(PlatformMediaSession&, DelayCallingUpdateNowPlaying);
     virtual void sessionStateChanged(PlatformMediaSession&);
     virtual void sessionDidEndRemoteScrubbing(const PlatformMediaSession&) { };
     virtual void clientCharacteristicsChanged(PlatformMediaSession&) { }
-    virtual void sessionCanProduceAudioChanged(PlatformMediaSession&);
+    virtual void sessionCanProduceAudioChanged();
 
 #if PLATFORM(IOS_FAMILY)
     virtual void configureWireLessTargetMonitoring() { }
 #endif
     virtual bool hasWirelessTargetsAvailable() { return false; }
@@ -147,10 +148,15 @@
     void forEachDocumentSession(const Document&, const Function<void(PlatformMediaSession&)>&);
     bool anyOfSessions(const Function<bool(const PlatformMediaSession&)>&) const;
 
     AudioHardwareListener* audioHardwareListener() { return m_audioHardwareListener.get(); }
 
+    bool isApplicationInBackground() const { return m_isApplicationInBackground; }
+#if USE(AUDIO_SESSION)
+    void maybeDeactivateAudioSession();
+#endif
+
 #if !RELEASE_LOG_DISABLED
     const Logger& logger() const final { return m_logger; }
     const void* logIdentifier() const final { return nullptr; }
     const char* logClassName() const override { return "PlatformMediaSessionManager"; }
     WTFLogChannel& logChannel() const final;
