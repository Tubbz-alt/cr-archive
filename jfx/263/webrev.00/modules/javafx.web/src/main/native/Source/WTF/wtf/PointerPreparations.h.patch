diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/PointerPreparations.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/PointerPreparations.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/PointerPreparations.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/PointerPreparations.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2018-2019 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -23,20 +23,31 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-namespace WTF {
-
 #if CPU(ARM64E)
 #include <ptrauth.h>
+#endif
 
-#define WTF_PREPARE_VTBL_POINTER_FOR_INSPECTION(vtblPtr) \
-    (reinterpret_cast<void*>(ptrauth_sign_unauthenticated(vtblPtr, ptrauth_key_cxx_vtable_pointer, 0)))
+namespace WTF {
 
-#else // not CPU(ARM64E)
+#if COMPILER_HAS_CLANG_BUILTIN(__builtin_get_vtable_pointer)
+
+template<typename T>
+ALWAYS_INLINE void* getVTablePointer(T* o) { return __builtin_get_vtable_pointer(o); }
 
-#define WTF_PREPARE_VTBL_POINTER_FOR_INSPECTION(vtblPtr) (reinterpret_cast<void*>(vtblPtr))
+#else // not COMPILER_HAS_CLANG_BUILTIN(__builtin_get_vtable_pointer)
 
+#if CPU(ARM64E)
+template<typename T>
+ALWAYS_INLINE void* getVTablePointer(T* o) { return __builtin_ptrauth_auth(*(reinterpret_cast<void**>(o)), ptrauth_key_cxx_vtable_pointer, 0); }
+#else // not CPU(ARM64E)
+template<typename T>
+ALWAYS_INLINE void* getVTablePointer(T* o) { return (*(reinterpret_cast<void**>(o))); }
 #endif // not CPU(ARM64E)
 
+#endif // not COMPILER_HAS_CLANG_BUILTIN(__builtin_get_vtable_pointer)
+
 } // namespace WTF
+
+using WTF::getVTablePointer;
