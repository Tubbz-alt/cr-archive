diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/Handle.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/Handle.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/Handle.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/Handle.h
@@ -35,18 +35,20 @@
 
     The base Handle class represents a temporary reference to a pointer whose
     lifetime is guaranteed by something else.
 */
 
+enum class ShouldStrongDestructorGrabLock : bool { No, Yes };
+
 template <class T> class Handle;
 
 // Creating a JSValue Handle is invalid
 template <> class Handle<JSValue>;
 
 class HandleBase {
     template <typename T> friend class Weak;
-    template <typename T> friend class Strong;
+    template <typename T, ShouldStrongDestructorGrabLock shouldStrongDestructorGrabLock> friend class Strong;
     friend class HandleSet;
     friend struct JSCallbackObjectData;
 
 public:
     bool operator!() const { return !m_slot || !*m_slot; }
@@ -94,11 +96,11 @@
 
 template <typename Base> struct HandleConverter<Base, Unknown> {
     Handle<JSObject> asObject() const;
     bool isObject() const { return jsValue().isObject(); }
     bool getNumber(double number) const { return jsValue().getNumber(number); }
-    WTF::String getString(ExecState*) const;
+    WTF::String getString(JSGlobalObject*) const;
     bool isUndefinedOrNull() const { return jsValue().isUndefinedOrNull(); }
 
 private:
     JSValue jsValue() const
     {
