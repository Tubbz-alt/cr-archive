diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/ErrorEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/ErrorEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/ErrorEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/ErrorEvent.h
@@ -38,10 +38,11 @@
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 class ErrorEvent final : public Event {
+    WTF_MAKE_ISO_ALLOCATED(ErrorEvent);
 public:
     static Ref<ErrorEvent> create(const String& message, const String& fileName, unsigned lineNumber, unsigned columnNumber, JSC::Strong<JSC::Unknown> error)
     {
         return adoptRef(*new ErrorEvent(message, fileName, lineNumber, columnNumber, error));
     }
@@ -63,18 +64,18 @@
 
     const String& message() const { return m_message; }
     const String& filename() const { return m_fileName; }
     unsigned lineno() const { return m_lineNumber; }
     unsigned colno() const { return m_columnNumber; }
-    JSC::JSValue error(JSC::ExecState&, JSC::JSGlobalObject&);
+    JSC::JSValue error(JSC::JSGlobalObject&);
 
     const JSValueInWrappedObject& originalError() const { return m_error; }
     SerializedScriptValue* serializedError() const { return m_serializedError.get(); }
 
     EventInterface eventInterface() const override;
 
-    RefPtr<SerializedScriptValue> trySerializeError(JSC::ExecState&);
+    RefPtr<SerializedScriptValue> trySerializeError(JSC::JSGlobalObject&);
 
 private:
     ErrorEvent(const String& message, const String& fileName, unsigned lineNumber, unsigned columnNumber, JSC::Strong<JSC::Unknown> error);
     ErrorEvent(const AtomString&, const Init&, IsTrusted);
 
