diff a/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java b/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java
--- a/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java
+++ b/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java
@@ -49,103 +49,103 @@
 import javafx.scene.Scene;
 import javafx.scene.layout.Region;
 import junit.framework.AssertionFailedError;
 
 public class JFXPanelScaledTest {
-	static CountDownLatch launchLatch;
-
-	private static MyApp myApp;
-
-	private static Timer t;
-	static int cnt;
-
-	@BeforeClass
-	public static void setupOnce() throws Exception {
-		System.setProperty("sun.java2d.uiScale.enabled", "true");
-		System.setProperty("sun.java2d.uiScale", "125%");
-		System.setProperty("glass.win.uiScale", "1.25");
-		System.setProperty("glass.gtk.uiScale", "1.25");
-		launchLatch = new CountDownLatch(1);
-
-		// Start the Application
-		SwingUtilities.invokeLater(() -> {
-			myApp = new MyApp();
-		});
-		if (!launchLatch.await(5 * TIMEOUT, TimeUnit.MILLISECONDS)) {
-			throw new AssertionFailedError("Timeout waiting for Application to launch (" + (5 * TIMEOUT) + " seconds)");
-		}
-	}
-
-	@AfterClass
-	public static void teardownOnce() {
-		if (myApp != null) {
-			SwingUtilities.invokeLater(myApp::dispose);
-		}
-	}
-
-	@Test
-	public void testScale() throws Exception {
-		// Get the Swing-side BackBuffer
-		BufferedImage pixelsIm = JFXPanelShim.getPixelsIm(myApp.jfxPanel);
-		assertEquals(127, pixelsIm.getWidth());
-		assertEquals(127, pixelsIm.getHeight());
-
-		// if all is ok, there is a black border on the right side
-		// if the buffer is off, there is a black diagonal which should be the right
-		// border
-		Color c = new Color(0, 0, 0);
-		int colorOfDiagonal = c.getRGB();
-		for (int x = 10; x < 45; x++) {
-			for (int y = 90; y < 115; y++) {
-				if (colorOfDiagonal == pixelsIm.getRGB(x, y)) {
-					fail("image is skewed");
-				}
-			}
-		}
-	}
-
-	public static class MyApp extends JFrame {
-		private static final long serialVersionUID = 1L;
-		private final JFXPanel jfxPanel;
-
-		public MyApp() {
-			super("JFXPanel Scaling");
-			jfxPanel = new JFXPanel();
-			setLayout(null);
-			jfxPanel.setSize(new Dimension(100, 100));
-			add(jfxPanel);
-			setSize(500, 500);
-			setVisible(true);
-
-			Platform.runLater(() -> initFX(jfxPanel));
-
-			// Give it time to paint and resize the buffers
-			// the issues only appears if the buffer has been resized, not on the initial
-			// creation.
-			cnt = 0;
-			t = new Timer(500, (e) -> {
-				switch (cnt) {
-				case 0:
-					jfxPanel.setSize(new Dimension(201, 201));
-					break;
-				case 1:
-					jfxPanel.setSize(new Dimension(101, 101));
-					break;
-				case 2:
-					t.stop();
-					launchLatch.countDown();
-					break;
-				}
-				cnt++;
-			});
-			t.start();
-		}
-
-		private static void initFX(JFXPanel fxPanel) {
-			Region region = new Region();
-			region.setStyle("-fx-background-color: #FFFFFF;" + "-fx-border-color: #000000;"
-					+ "-fx-border-width: 0 5px 0 0;" + "-fx-border-style: solid");
-			Scene scene = new Scene(region);
-			fxPanel.setScene(scene);
-		}
-	}
+    static CountDownLatch launchLatch;
+
+    private static MyApp myApp;
+
+    private static Timer t;
+    static int cnt;
+
+    @BeforeClass
+    public static void setupOnce() throws Exception {
+        System.setProperty("sun.java2d.uiScale.enabled", "true");
+        System.setProperty("sun.java2d.uiScale", "125%");
+        System.setProperty("glass.win.uiScale", "1.25");
+        System.setProperty("glass.gtk.uiScale", "1.25");
+        launchLatch = new CountDownLatch(1);
+
+        // Start the Application
+        SwingUtilities.invokeLater(() -> {
+            myApp = new MyApp();
+        });
+        if (!launchLatch.await(5 * TIMEOUT, TimeUnit.MILLISECONDS)) {
+            throw new AssertionFailedError("Timeout waiting for Application to launch (" + (5 * TIMEOUT) + " seconds)");
+        }
+    }
+
+    @AfterClass
+    public static void teardownOnce() {
+        if (myApp != null) {
+            SwingUtilities.invokeLater(myApp::dispose);
+        }
+    }
+
+    @Test
+    public void testScale() throws Exception {
+        // Get the Swing-side BackBuffer
+        BufferedImage pixelsIm = JFXPanelShim.getPixelsIm(myApp.jfxPanel);
+        assertEquals(127, pixelsIm.getWidth());
+        assertEquals(127, pixelsIm.getHeight());
+
+        // if all is ok, there is a black border on the right side
+        // if the buffer is off, there is a black diagonal which should be the right
+        // border
+        Color c = new Color(0, 0, 0);
+        int colorOfDiagonal = c.getRGB();
+        for (int x = 10; x < 45; x++) {
+            for (int y = 90; y < 115; y++) {
+                if (colorOfDiagonal == pixelsIm.getRGB(x, y)) {
+                    fail("image is skewed");
+                }
+            }
+        }
+    }
+
+    public static class MyApp extends JFrame {
+        private static final long serialVersionUID = 1L;
+        private final JFXPanel jfxPanel;
+
+        public MyApp() {
+            super("JFXPanel Scaling");
+            jfxPanel = new JFXPanel();
+            setLayout(null);
+            jfxPanel.setSize(new Dimension(100, 100));
+            add(jfxPanel);
+            setSize(500, 500);
+            setVisible(true);
+
+            Platform.runLater(() -> initFX(jfxPanel));
+
+            // Give it time to paint and resize the buffers
+            // the issues only appears if the buffer has been resized, not on the initial
+            // creation.
+            cnt = 0;
+            t = new Timer(500, (e) -> {
+                switch (cnt) {
+                case 0:
+                    jfxPanel.setSize(new Dimension(201, 201));
+                    break;
+                case 1:
+                    jfxPanel.setSize(new Dimension(101, 101));
+                    break;
+                case 2:
+                    t.stop();
+                    launchLatch.countDown();
+                    break;
+                }
+                cnt++;
+            });
+            t.start();
+        }
+
+        private static void initFX(JFXPanel fxPanel) {
+            Region region = new Region();
+            region.setStyle("-fx-background-color: #FFFFFF;" + "-fx-border-color: #000000;"
+                    + "-fx-border-width: 0 5px 0 0;" + "-fx-border-style: solid");
+            Scene scene = new Scene(region);
+            fxPanel.setScene(scene);
+        }
+    }
 }
