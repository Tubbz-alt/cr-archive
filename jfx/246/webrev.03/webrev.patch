diff a/build.gradle b/build.gradle
--- a/build.gradle
+++ b/build.gradle
@@ -2564,12 +2564,22 @@
     project.ext.moduleRuntime = true
     project.ext.moduleName = "javafx.swing"
 
     sourceSets {
         main
-        //shims // no test shims needed
-        test
+        shims {
+            java {
+                compileClasspath += sourceSets.main.output
+                runtimeClasspath += sourceSets.main.output
+            }
+        }
+        test {
+            java {
+                compileClasspath += sourceSets.shims.output
+                runtimeClasspath += sourceSets.shims.output
+            }
+        }
     }
 
     project.ext.moduleSourcePath = defaultModuleSourcePath
     project.ext.moduleSourcePathShim = defaultModuleSourcePathShim
 
diff a/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/EmbeddedScene.java b/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/EmbeddedScene.java
--- a/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/EmbeddedScene.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/javafx/tk/quantum/EmbeddedScene.java
@@ -229,12 +229,12 @@
                 getRenderScaleY() != texScaleFactorY ||
                 texBits == null)
             {
                 return false;
             }
-            scaledWidth = Math.round(scaledWidth * texScaleFactorX);
-            scaledHeight = Math.round(scaledHeight * texScaleFactorY);
+            scaledWidth = (int) Math.ceil(scaledWidth * texScaleFactorX);
+            scaledHeight = (int) Math.ceil(scaledHeight * texScaleFactorY);
 
             dest.rewind();
             texBits.rewind();
             if (dest.capacity() != texBits.capacity()) {
                 // Calculate the intersection of the dest & src images.
diff a/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java b/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
--- a/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
+++ b/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
@@ -683,12 +683,12 @@
                                              scenePeer.getPixelFormat(), null, false));
             if (oldIm != null) {
                 double ratioX = newScaleFactorX / scaleFactorX;
                 double ratioY = newScaleFactorY / scaleFactorY;
                 // Transform old size to the new coordinate space.
-                int oldW = (int)Math.round(oldIm.getWidth() * ratioX);
-                int oldH = (int)Math.round(oldIm.getHeight() * ratioY);
+                int oldW = (int)Math.ceil(oldIm.getWidth() * ratioX);
+                int oldH = (int)Math.ceil(oldIm.getHeight() * ratioY);
 
                 Graphics g = pixelsIm.getGraphics();
                 try {
                     g.drawImage(oldIm, 0, 0, oldW, oldH, null);
                 } finally {
@@ -928,10 +928,15 @@
 
     private void invokeOnClientEDT(Runnable r) {
         jfxPanelIOP.postEvent(this, new InvocationEvent(this, r));
     }
 
+    // Package scope method for testing
+    final BufferedImage test_getPixelsIm(){
+        return pixelsIm;
+    }
+
     private class HostContainer implements HostInterface {
 
         @Override
         public void setEmbeddedStage(EmbeddedStageInterface embeddedStage) {
             stagePeer = embeddedStage;
diff a/modules/javafx.swing/src/shims/java/javafx/embed/swing/JFXPanelShim.java b/modules/javafx.swing/src/shims/java/javafx/embed/swing/JFXPanelShim.java
--- /dev/null
+++ b/modules/javafx.swing/src/shims/java/javafx/embed/swing/JFXPanelShim.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+package javafx.embed.swing;
+
+import java.awt.image.BufferedImage;
+
+public class JFXPanelShim {
+
+    public static BufferedImage getPixelsIm(JFXPanel panel) {
+        return panel.test_getPixelsIm();
+    }
+
+}
diff a/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java b/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java
--- /dev/null
+++ b/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java
@@ -0,0 +1,151 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.robot.javafx.embed.swing;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+import static test.util.Util.TIMEOUT;
+
+import java.awt.Color;
+import java.awt.Dimension;
+import java.awt.image.BufferedImage;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import javax.swing.JFrame;
+import javax.swing.SwingUtilities;
+import javax.swing.Timer;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import javafx.application.Platform;
+import javafx.embed.swing.JFXPanel;
+import javafx.embed.swing.JFXPanelShim;
+import javafx.scene.Scene;
+import javafx.scene.layout.Region;
+import junit.framework.AssertionFailedError;
+
+public class JFXPanelScaledTest {
+	static CountDownLatch launchLatch;
+
+	private static MyApp myApp;
+
+	private static Timer t;
+	static int cnt;
+
+	@BeforeClass
+	public static void setupOnce() throws Exception {
+		System.setProperty("sun.java2d.uiScale.enabled", "true");
+		System.setProperty("sun.java2d.uiScale", "125%");
+		System.setProperty("glass.win.uiScale", "1.25");
+		System.setProperty("glass.gtk.uiScale", "1.25");
+		launchLatch = new CountDownLatch(1);
+
+		// Start the Application
+		SwingUtilities.invokeLater(() -> {
+			myApp = new MyApp();
+		});
+		if (!launchLatch.await(5 * TIMEOUT, TimeUnit.MILLISECONDS)) {
+			throw new AssertionFailedError("Timeout waiting for Application to launch (" + (5 * TIMEOUT) + " seconds)");
+		}
+	}
+
+	@AfterClass
+	public static void teardownOnce() {
+		if (myApp != null) {
+			SwingUtilities.invokeLater(myApp::dispose);
+		}
+	}
+
+	@Test
+	public void testScale() throws Exception {
+		// Get the Swing-side BackBuffer
+		BufferedImage pixelsIm = JFXPanelShim.getPixelsIm(myApp.jfxPanel);
+		assertEquals(127, pixelsIm.getWidth());
+		assertEquals(127, pixelsIm.getHeight());
+
+		// if all is ok, there is a black border on the right side
+		// if the buffer is off, there is a black diagonal which should be the right
+		// border
+		Color c = new Color(0, 0, 0);
+		int colorOfDiagonal = c.getRGB();
+		for (int x = 10; x < 45; x++) {
+			for (int y = 90; y < 115; y++) {
+				if (colorOfDiagonal == pixelsIm.getRGB(x, y)) {
+					fail("image is skewed");
+				}
+			}
+		}
+	}
+
+	public static class MyApp extends JFrame {
+		private static final long serialVersionUID = 1L;
+		private final JFXPanel jfxPanel;
+
+		public MyApp() {
+			super("JFXPanel Scaling");
+			jfxPanel = new JFXPanel();
+			setLayout(null);
+			jfxPanel.setSize(new Dimension(100, 100));
+			add(jfxPanel);
+			setSize(500, 500);
+			setVisible(true);
+
+			Platform.runLater(() -> initFX(jfxPanel));
+
+			// Give it time to paint and resize the buffers
+			// the issues only appears if the buffer has been resized, not on the initial
+			// creation.
+			cnt = 0;
+			t = new Timer(500, (e) -> {
+				switch (cnt) {
+				case 0:
+					jfxPanel.setSize(new Dimension(201, 201));
+					break;
+				case 1:
+					jfxPanel.setSize(new Dimension(101, 101));
+					break;
+				case 2:
+					t.stop();
+					launchLatch.countDown();
+					break;
+				}
+				cnt++;
+			});
+			t.start();
+		}
+
+		private static void initFX(JFXPanel fxPanel) {
+			Region region = new Region();
+			region.setStyle("-fx-background-color: #FFFFFF;" + "-fx-border-color: #000000;"
+					+ "-fx-border-width: 0 5px 0 0;" + "-fx-border-style: solid");
+			Scene scene = new Scene(region);
+			fxPanel.setScene(scene);
+		}
+	}
+}
