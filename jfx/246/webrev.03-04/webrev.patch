diff a/build.gradle b/build.gradle
--- a/build.gradle
+++ b/build.gradle
@@ -3605,15 +3605,13 @@
     dependencies {
         testCompile project(":graphics").sourceSets.test.output
         testCompile project(":base").sourceSets.test.output
         testCompile project(":controls").sourceSets.test.output
         testCompile project(":swing").sourceSets.test.output
-        testCompile project(":swt")
-        testCompile name: SWT_FILE_NAME
     }
 
-    def dependentProjects = [ 'base', 'graphics', 'controls', 'media', 'web', 'swing', 'fxml', 'swt' ]
+    def dependentProjects = [ 'base', 'graphics', 'controls', 'media', 'web', 'swing', 'fxml' ]
     commonModuleSetup(project, dependentProjects)
 
     File testJavaPolicyFile = new File(rootProject.buildDir, TESTJAVAPOLICYFILE);
     File testRunArgsFile = new File(rootProject.buildDir,TESTRUNARGSFILE);
 
diff a/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java b/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
--- a/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
+++ b/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
@@ -929,11 +929,11 @@
     private void invokeOnClientEDT(Runnable r) {
         jfxPanelIOP.postEvent(this, new InvocationEvent(this, r));
     }
 
     // Package scope method for testing
-    final BufferedImage test_getPixelsIm(){
+    final BufferedImage test_getPixelsIm() {
         return pixelsIm;
     }
 
     private class HostContainer implements HostInterface {
 
diff a/modules/javafx.swt/src/test/java/test/javafx/embed/swt/FXCanvasScaledTest.java b/modules/javafx.swt/src/test/java/test/javafx/embed/swt/FXCanvasScaledTest.java
--- /dev/null
+++ b/modules/javafx.swt/src/test/java/test/javafx/embed/swt/FXCanvasScaledTest.java
@@ -0,0 +1,131 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.  Oracle designates this
+ * particular file as subject to the "Classpath" exception as provided
+ * by Oracle in the LICENSE file that accompanied this code.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+package test.javafx.embed.swt;
+
+import static org.junit.Assert.fail;
+
+import java.util.Timer;
+import java.util.TimerTask;
+
+import org.eclipse.swt.SWT;
+import org.eclipse.swt.graphics.GC;
+import org.eclipse.swt.graphics.Image;
+import org.eclipse.swt.graphics.PaletteData;
+import org.eclipse.swt.graphics.RGB;
+import org.eclipse.swt.layout.FillLayout;
+import org.eclipse.swt.widgets.Display;
+import org.eclipse.swt.widgets.Shell;
+import org.junit.Test;
+
+import javafx.embed.swt.FXCanvas;
+import javafx.scene.Scene;
+import javafx.scene.layout.Region;
+
+public class FXCanvasScaledTest {
+
+    private int cnt;
+
+    static Shell shell;
+
+    static Display display;
+
+    /* Base size, so that with a scaling of 125% there are different results for Math.round and Math.ceil */
+    final static int TAGET_BASE_SIZE = 101;
+
+    @Test(timeout = 10000)
+    public void testScale() throws Throwable {
+        System.setProperty("sun.java2d.uiScale.enabled", "true");
+        System.setProperty("sun.java2d.uiScale", "125%");
+        System.setProperty("glass.win.uiScale", "125%");
+        System.setProperty("glass.win.renderScale", "125%");
+        System.setProperty("glass.gtk.uiScale", "1.25");
+        System.setProperty("swt.autoScale", "125");
+
+        // Start the Application
+        display = new Display();
+        shell = new Shell(display);
+        shell.setLayout(new FillLayout());
+        final FXCanvas canvas = new FXCanvas(shell, SWT.NONE);
+        initFX(canvas);
+
+        Timer t = new Timer();
+        TimerTask task = new TimerTask() {
+            @Override
+            public void run() {
+                switch (cnt) {
+                    case 0:
+                        display.asyncExec(() -> canvas.setBounds(0, 0, 201, 201));
+                        break;
+                    case 1:
+                        display.asyncExec(() -> canvas.setBounds(0, 0, TAGET_BASE_SIZE, TAGET_BASE_SIZE));
+                        break;
+                    case 2:
+                        t.cancel();
+                        display.asyncExec(() -> {
+                            // Capture painted component. Bounds are in pt, so size is 101 and not 127
+                            GC gc = new GC(canvas);
+                            final Image image = new Image(display, canvas.getBounds());
+                            gc.copyArea(image, canvas.getBounds().x, canvas.getBounds().y);
+                            gc.dispose();
+                            PaletteData palette = image.getImageData().palette;
+                            int referenceWhitePixel = image.getImageData().getPixel(0, 0);
+                            RGB referenceRGB = palette.getRGB(referenceWhitePixel);
+                            // check if there is a diagonal, which should be the right border
+                            for (int x = 10; x < 30; x++) {
+                                for (int y = 80; y < 100; y++) {
+                                    int pixel = image.getImageData().getPixel(x, y);
+                                    RGB rgb = palette.getRGB(pixel);
+                                    if (!referenceRGB.equals(rgb)) {
+                                        fail("image is skewed");
+                                    }
+                                }
+                            }
+                            shell.close();
+                        });
+                        break;
+                }
+                cnt++;
+            }
+        };
+        t.schedule(task, 500, 500);
+
+        shell.open();
+        while (!shell.isDisposed()) {
+            if (!display.readAndDispatch())
+                display.sleep();
+        }
+        display.dispose();
+    }
+
+    private static void initFX(FXCanvas canvas) {
+        Region region = new Region();
+        region.setStyle("-fx-background-color: #FFFFFF;" + "-fx-border-color: #000000;" + "-fx-border-width: 0 5px 0 0;"
+                + "-fx-border-style: solid");
+        Scene scene = new Scene(region);
+        canvas.setScene(scene);
+        canvas.setBounds(0, 0, 100, 100);
+    }
+}
diff a/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java b/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java
--- a/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java
+++ b/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java
@@ -24,10 +24,11 @@
  */
 
 package test.robot.javafx.embed.swing;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static test.util.Util.TIMEOUT;
 
 import java.awt.Color;
 import java.awt.Dimension;
@@ -56,10 +57,15 @@
     private static MyApp myApp;
 
     private static Timer t;
     static int cnt;
 
+    /* Base size, so that with a scaling of 125% there are different results for Math.round and Math.ceil */
+    final static int TAGET_BASE_SIZE = 101;
+
+    final static int TARGET_SCALED_SIZE = (int) Math.ceil(TAGET_BASE_SIZE *1.25);
+
     @BeforeClass
     public static void setupOnce() throws Exception {
         System.setProperty("sun.java2d.uiScale.enabled", "true");
         System.setProperty("sun.java2d.uiScale", "125%");
         System.setProperty("glass.win.uiScale", "1.25");
@@ -68,13 +74,12 @@
 
         // Start the Application
         SwingUtilities.invokeLater(() -> {
             myApp = new MyApp();
         });
-        if (!launchLatch.await(5 * TIMEOUT, TimeUnit.MILLISECONDS)) {
-            throw new AssertionFailedError("Timeout waiting for Application to launch (" + (5 * TIMEOUT) + " seconds)");
-        }
+        assertTrue("Timeout waiting for Application to launch",
+                launchLatch.await(5 * TIMEOUT, TimeUnit.MILLISECONDS));
     }
 
     @AfterClass
     public static void teardownOnce() {
         if (myApp != null) {
@@ -84,12 +89,12 @@
 
     @Test
     public void testScale() throws Exception {
         // Get the Swing-side BackBuffer
         BufferedImage pixelsIm = JFXPanelShim.getPixelsIm(myApp.jfxPanel);
-        assertEquals(127, pixelsIm.getWidth());
-        assertEquals(127, pixelsIm.getHeight());
+        assertEquals(TARGET_SCALED_SIZE, pixelsIm.getWidth());
+        assertEquals(TARGET_SCALED_SIZE, pixelsIm.getHeight());
 
         // if all is ok, there is a black border on the right side
         // if the buffer is off, there is a black diagonal which should be the right
         // border
         Color c = new Color(0, 0, 0);
@@ -126,11 +131,11 @@
                 switch (cnt) {
                 case 0:
                     jfxPanel.setSize(new Dimension(201, 201));
                     break;
                 case 1:
-                    jfxPanel.setSize(new Dimension(101, 101));
+                    jfxPanel.setSize(new Dimension(TAGET_BASE_SIZE, TAGET_BASE_SIZE));
                     break;
                 case 2:
                     t.stop();
                     launchLatch.countDown();
                     break;
diff a/tests/system/src/test/java/test/robot/javafx/embed/swt/FXCanvasScaledTest.java b/tests/system/src/test/java/test/robot/javafx/embed/swt/FXCanvasScaledTest.java
--- a/tests/system/src/test/java/test/robot/javafx/embed/swt/FXCanvasScaledTest.java
+++ /dev/null
@@ -1,128 +0,0 @@
-/*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * This code is free software; you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 2 only, as
- * published by the Free Software Foundation.  Oracle designates this
- * particular file as subject to the "Classpath" exception as provided
- * by Oracle in the LICENSE file that accompanied this code.
- *
- * This code is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
- * version 2 for more details (a copy is included in the LICENSE file that
- * accompanied this code).
- *
- * You should have received a copy of the GNU General Public License version
- * 2 along with this work; if not, write to the Free Software Foundation,
- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
- * or visit www.oracle.com if you need additional information or have any
- * questions.
- */
-
-package test.robot.javafx.embed.swt;
-
-import static org.junit.Assert.fail;
-
-import java.util.Timer;
-import java.util.TimerTask;
-
-import org.eclipse.swt.SWT;
-import org.eclipse.swt.graphics.GC;
-import org.eclipse.swt.graphics.Image;
-import org.eclipse.swt.graphics.PaletteData;
-import org.eclipse.swt.graphics.RGB;
-import org.eclipse.swt.layout.FillLayout;
-import org.eclipse.swt.widgets.Display;
-import org.eclipse.swt.widgets.Shell;
-import org.junit.Test;
-
-import javafx.embed.swt.FXCanvas;
-import javafx.scene.Scene;
-import javafx.scene.layout.Region;
-
-public class FXCanvasScaledTest {
-
-    private int cnt;
-
-    static Shell shell;
-
-    static Display display;
-
-    @Test(timeout = 10000)
-    public void testScale() throws Throwable {
-        System.setProperty("sun.java2d.uiScale.enabled", "true");
-        System.setProperty("sun.java2d.uiScale", "125%");
-        System.setProperty("glass.win.uiScale", "125%");
-        System.setProperty("glass.win.renderScale", "125%");
-        System.setProperty("glass.gtk.uiScale", "1.25");
-        System.setProperty("swt.autoScale", "125");
-
-        // Start the Application
-        display = new Display();
-        shell = new Shell(display);
-        shell.setLayout(new FillLayout());
-        final FXCanvas canvas = new FXCanvas(shell, SWT.NONE);
-        initFX(canvas);
-
-        Timer t = new Timer();
-        TimerTask task = new TimerTask() {
-            @Override
-            public void run() {
-                switch (cnt) {
-                    case 0:
-                        display.asyncExec(() -> canvas.setBounds(0, 0, 201, 201));
-                        break;
-                    case 1:
-                        display.asyncExec(() -> canvas.setBounds(0, 0, 101, 101));
-                        break;
-                    case 2:
-                        t.cancel();
-                        display.asyncExec(() -> {
-                            // Capture painted component. Bounds are in pt, so size is 101 and not 127
-                            GC gc = new GC(canvas);
-                            final Image image = new Image(display, canvas.getBounds());
-                            gc.copyArea(image, canvas.getBounds().x, canvas.getBounds().y);
-                            gc.dispose();
-                            PaletteData palette = image.getImageData().palette;
-                            int referenceWhitePixel = image.getImageData().getPixel(0, 0);
-                            RGB referenceRGB = palette.getRGB(referenceWhitePixel);
-                            // check if there is a diagonal, which should be the right border
-                            for (int x = 10; x < 30; x++) {
-                                for (int y = 80; y < 100; y++) {
-                                    int pixel = image.getImageData().getPixel(x, y);
-                                    RGB rgb = palette.getRGB(pixel);
-                                    if (!referenceRGB.equals(rgb)) {
-                                        fail("image is skewed");
-                                    }
-                                }
-                            }
-                            shell.close();
-                        });
-                        break;
-                }
-                cnt++;
-            }
-        };
-        t.schedule(task, 500, 500);
-
-        shell.open();
-        while (!shell.isDisposed()) {
-            if (!display.readAndDispatch())
-                display.sleep();
-        }
-        display.dispose();
-    }
-
-    private static void initFX(FXCanvas canvas) {
-        Region region = new Region();
-        region.setStyle("-fx-background-color: #FFFFFF;" + "-fx-border-color: #000000;" + "-fx-border-width: 0 5px 0 0;"
-                + "-fx-border-style: solid");
-        Scene scene = new Scene(region);
-        canvas.setScene(scene);
-        canvas.setBounds(0, 0, 100, 100);
-    }
-}
