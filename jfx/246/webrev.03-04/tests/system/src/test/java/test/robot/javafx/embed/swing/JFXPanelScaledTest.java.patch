diff a/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java b/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java
--- a/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java
+++ b/tests/system/src/test/java/test/robot/javafx/embed/swing/JFXPanelScaledTest.java
@@ -24,10 +24,11 @@
  */
 
 package test.robot.javafx.embed.swing;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static test.util.Util.TIMEOUT;
 
 import java.awt.Color;
 import java.awt.Dimension;
@@ -56,10 +57,15 @@
     private static MyApp myApp;
 
     private static Timer t;
     static int cnt;
 
+    /* Base size, so that with a scaling of 125% there are different results for Math.round and Math.ceil */
+    final static int TAGET_BASE_SIZE = 101;
+
+    final static int TARGET_SCALED_SIZE = (int) Math.ceil(TAGET_BASE_SIZE *1.25);
+
     @BeforeClass
     public static void setupOnce() throws Exception {
         System.setProperty("sun.java2d.uiScale.enabled", "true");
         System.setProperty("sun.java2d.uiScale", "125%");
         System.setProperty("glass.win.uiScale", "1.25");
@@ -68,13 +74,12 @@
 
         // Start the Application
         SwingUtilities.invokeLater(() -> {
             myApp = new MyApp();
         });
-        if (!launchLatch.await(5 * TIMEOUT, TimeUnit.MILLISECONDS)) {
-            throw new AssertionFailedError("Timeout waiting for Application to launch (" + (5 * TIMEOUT) + " seconds)");
-        }
+        assertTrue("Timeout waiting for Application to launch",
+                launchLatch.await(5 * TIMEOUT, TimeUnit.MILLISECONDS));
     }
 
     @AfterClass
     public static void teardownOnce() {
         if (myApp != null) {
@@ -84,12 +89,12 @@
 
     @Test
     public void testScale() throws Exception {
         // Get the Swing-side BackBuffer
         BufferedImage pixelsIm = JFXPanelShim.getPixelsIm(myApp.jfxPanel);
-        assertEquals(127, pixelsIm.getWidth());
-        assertEquals(127, pixelsIm.getHeight());
+        assertEquals(TARGET_SCALED_SIZE, pixelsIm.getWidth());
+        assertEquals(TARGET_SCALED_SIZE, pixelsIm.getHeight());
 
         // if all is ok, there is a black border on the right side
         // if the buffer is off, there is a black diagonal which should be the right
         // border
         Color c = new Color(0, 0, 0);
@@ -126,11 +131,11 @@
                 switch (cnt) {
                 case 0:
                     jfxPanel.setSize(new Dimension(201, 201));
                     break;
                 case 1:
-                    jfxPanel.setSize(new Dimension(101, 101));
+                    jfxPanel.setSize(new Dimension(TAGET_BASE_SIZE, TAGET_BASE_SIZE));
                     break;
                 case 2:
                     t.stop();
                     launchLatch.countDown();
                     break;
