diff a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/MouseInput.java b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/MouseInput.java
--- a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/MouseInput.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/MouseInput.java
@@ -103,11 +103,13 @@
 
             } else {
                 MonocleView oldView = (MonocleView) oldWindow.getView();
                 if (oldView != null) {
                     // send exit event
-                    int modifiers = state.getModifiers(); // TODO: include key modifiers
+                    KeyState keyState = new KeyState();
+                    KeyInput.getInstance().getState(keyState);
+                    int modifiers = state.getModifiers() | keyState.getModifiers();
                     int button = state.getButton();
                     boolean isPopupTrigger = false; // TODO
                     int oldX = state.getX();
                     int oldY = state.getY();
                     int oldRelX = oldX - oldWindow.getX();
@@ -143,22 +145,26 @@
 
         int relX = x - window.getX();
         int relY = y - window.getY();
         // send enter event
         if (oldWindow != window && view != null) {
-            int modifiers = state.getModifiers(); // TODO: include key modifiers
+            KeyState keyState = new KeyState();
+            KeyInput.getInstance().getState(keyState);
+            int modifiers = state.getModifiers() | keyState.getModifiers();
             int button = state.getButton();
             boolean isPopupTrigger = false; // TODO
             postMouseEvent(view, MouseEvent.ENTER, button,
                            relX, relY, x, y,
                            modifiers, isPopupTrigger, synthesized);
         }
         // send motion events
         if (oldWindow != window | newAbsoluteLocation) {
             boolean isDrag = !state.getButtonsPressed().isEmpty();
             int eventType = isDrag ? MouseEvent.DRAG : MouseEvent.MOVE;
-            int modifiers = state.getModifiers(); // TODO: include key modifiers
+            KeyState keyState = new KeyState();
+            KeyInput.getInstance().getState(keyState);
+            int modifiers = state.getModifiers() | keyState.getModifiers();
             int button = state.getButton();
             boolean isPopupTrigger = false; // TODO
             postMouseEvent(view, eventType, button,
                            relX, relY, x, y,
                            modifiers, isPopupTrigger, synthesized);
@@ -170,15 +176,18 @@
             MouseState pressState = new MouseState();
             state.copyTo(pressState);
             for (int i = 0; i < buttons.size(); i++) {
                 int button = buttons.get(i);
                 pressState.pressButton(button);
+                KeyState keyState = new KeyState();
+                KeyInput.getInstance().getState(keyState);
+                int modifiers = pressState.getModifiers() | keyState.getModifiers();
                 // send press event
                 boolean isPopupTrigger = false; // TODO
                 postMouseEvent(view, MouseEvent.DOWN, button,
                                relX, relY, x, y,
-                               pressState.getModifiers(), isPopupTrigger,
+                               modifiers, isPopupTrigger,
                                synthesized);
             }
         }
         buttons.clear();
         // send release events
@@ -188,15 +197,18 @@
             MouseState releaseState = new MouseState();
             state.copyTo(releaseState);
             for (int i = 0; i < buttons.size(); i++) {
                 int button = buttons.get(i);
                 releaseState.releaseButton(button);
+                KeyState keyState = new KeyState();
+                KeyInput.getInstance().getState(keyState);
+                int modifiers = releaseState.getModifiers() | keyState.getModifiers();
                 // send release event
                 boolean isPopupTrigger = false; // TODO
                 postMouseEvent(view, MouseEvent.UP, button,
                                relX, relY, x, y,
-                               releaseState.getModifiers(), isPopupTrigger,
+                               modifiers, isPopupTrigger,
                                synthesized);
             }
         }
         buttons.clear();
         // send scroll events
@@ -206,11 +218,13 @@
                 case MouseState.WHEEL_DOWN: dY = -1.0; break;
                 case MouseState.WHEEL_UP: dY = 1.0; break;
                 default: dY = 0.0; break;
             }
             if (dY != 0.0) {
-                int modifiers = newState.getModifiers();
+                KeyState keyState = new KeyState();
+                KeyInput.getInstance().getState(keyState);
+                int modifiers = newState.getModifiers() | keyState.getModifiers();
                 RunnableProcessor.runLater(() -> {
                     view.notifyScroll(relX, relY, x, y, 0.0, dY,
                                       modifiers, 1, 0, 0, 0, 1.0, 1.0);
 
                 });
diff a/tests/system/src/test/java/test/robot/com/sun/glass/ui/monocle/RobotTest.java b/tests/system/src/test/java/test/robot/com/sun/glass/ui/monocle/RobotTest.java
--- a/tests/system/src/test/java/test/robot/com/sun/glass/ui/monocle/RobotTest.java
+++ b/tests/system/src/test/java/test/robot/com/sun/glass/ui/monocle/RobotTest.java
@@ -28,18 +28,26 @@
 import com.sun.glass.ui.monocle.TestLogShim;
 import javafx.application.Platform;
 import javafx.geometry.Point2D;
 import javafx.scene.input.KeyCode;
 import javafx.scene.input.MouseButton;
+import javafx.scene.input.MouseEvent;
 import javafx.scene.robot.Robot;
 
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.TestName;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.function.Consumer;
+import java.util.stream.Collectors;
 
 /**
  * This is a generic test for Glass robot. It is in the monocle.input package
  * because it uses the same test infrastructure as the Monocle input tests.
  */
@@ -52,10 +60,56 @@
         TestLogShim.reset();
         TestLogShim.log(name.getMethodName());
         TestApplication.showFullScreenScene();
     }
 
+    @Test
+    public void clickKeyModifierTest() throws Exception {
+        runWithKeyPress(KeyCode.CONTROL, MouseButton.PRIMARY, "Clicked at 300, 400 with modifier 'CTRL'", evt -> {
+            assertTrue("Ctrl should be down",evt.isControlDown());
+        });
+        runWithKeyPress(KeyCode.SHIFT, MouseButton.PRIMARY, "Clicked at 300, 400 with modifier 'SHIFT'", evt -> {
+            assertTrue("Shift should be down",evt.isShiftDown());
+        });
+        runWithKeyPress(KeyCode.ALT, MouseButton.PRIMARY, "Clicked at 300, 400 with modifier 'ALT'", evt -> {
+            assertTrue("Alt should be down",evt.isAltDown());
+        });
+    }
+
+    private void runWithKeyPress(KeyCode code, MouseButton button, String message, Consumer<MouseEvent> test) throws Exception {
+        TestApplication.getStage().getScene().setOnMouseClicked(
+                (e) -> {
+                    test.accept(e);
+                    TestLogShim.format("Clicked at %.0f, %.0f with modifier '%s'", e.getScreenX(), e.getScreenY(), modifierString(e));
+                }
+        );
+
+        Platform.runLater(() -> {
+            Robot robot = new Robot();
+            robot.mouseMove(300, 400);
+            robot.keyPress(code);
+            robot.mousePress(button);
+            robot.mouseRelease(button);
+            robot.keyRelease(code);
+        });
+        TestLogShim.waitForLog(message);
+    }
+
+    private static String modifierString(MouseEvent evt) {
+    	List<String> modifiers = new ArrayList<>();
+    	if(evt.isAltDown()) {
+    		modifiers.add("ALT");
+    	}
+    	if(evt.isControlDown()) {
+    		modifiers.add("CTRL");
+    	}
+    	if(evt.isShiftDown()) {
+    		modifiers.add("SHIFT");
+    	}
+    	return modifiers.stream().collect(Collectors.joining(", "));
+    }
+
     @Test
     public void clickTest() throws Exception {
         TestApplication.getStage().getScene().setOnMouseClicked(
                 (e) -> TestLogShim.format("Clicked at %.0f, %.0f",
                                       e.getScreenX(), e.getScreenY()));
