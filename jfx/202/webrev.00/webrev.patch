diff a/WEBKIT-MEDIA-STUBS.md b/WEBKIT-MEDIA-STUBS.md
--- /dev/null
+++ b/WEBKIT-MEDIA-STUBS.md
@@ -0,0 +1,51 @@
+# Web Testing
+
+The web project needs WebKit and Media shared libraries to run tests.
+
+These can be supplied in a number of ways. See sections below.
+
+## Compiled from source
+
+Specify these Gradle properties to enable building of WebKit and Media libraries from source:
+
+    -PCOMPILE_WEBKIT=true -PCOMPILE_MEDIA=true
+
+Note that these require additional build tooling and take some time to build.
+
+If you are not actively working on these sources, you may want to cache the output by copying it to one of the folders mentioned below.
+
+
+## Cached libraries
+
+You can manually place WebKit and Media shared libraries in these folders:
+
+* Unix libraries (*.so or *.dylib files)
+````
+    $projectDir/../caches/sdk/lib
+````
+
+* Windows libraries (*.dll files)
+````
+    $projectDir/../caches/sdk/bin
+````
+
+## Officially released libraries
+
+Gradle has a task to automate downloading officially released libraries from MavenCentral.
+
+You can enable the task by specifying this Gradle property:
+
+    -PSTUB_RUNTIME_OPENJFX="15-ea+4"
+
+Note that these libraries may not be compatible with the source tree you are working with. Always use the [latest version](https://search.maven.org/search?q=g:org.openjfx%20AND%20a:javafx); this may improve your chances of compatibility.
+
+
+## Skip Web tests
+
+You can also skip the web module tests.
+
+Specify these options to Gradle
+
+    -x :web:test
+
+Note that this is fine for local work. But a full test *is* required before submitting a PR, see [CONTRIBUTING.md](https://github.com/openjdk/jfx/blob/master/CONTRIBUTING.md).
diff a/build.gradle b/build.gradle
--- a/build.gradle
+++ b/build.gradle
@@ -1247,21 +1247,29 @@
     logger.warn("*****************************************************************");
 }
 
 // Look for stub runtime in bundled sdk, standalone sdk, or boot JDK
 
+// Allows automatic provisioning of webkit+media shared libraries
+// from official OpenJFX releases, downloaded from MavenCentral
+defineProperty("STUB_RUNTIME_OPENJFX", "")
+ext.IS_STUB_RUNTIME_OPENJFX = !STUB_RUNTIME_OPENJFX.isBlank()
+
 def String cachedBundledRuntime = cygpath("$projectDir") + "/../caches/modular-sdk"
 def String cachedStandaloneRuntime = cygpath("$projectDir") + "/../caches/sdk"
 def String jdkStubRuntime = cygpath("$JDK_HOME")
+def String openjfxStubRuntime = cygpath("$projectDir") + "/buildSrc/build/openjfxStub"
 
 def defaultStubRuntime = ""
 if (file(cachedBundledRuntime).exists()) {
     defaultStubRuntime = cachedBundledRuntime
 } else if (file(cachedStandaloneRuntime).exists()) {
     defaultStubRuntime = cachedStandaloneRuntime
 } else if (BUILD_CLOSED) {
     defaultStubRuntime = cachedBundledRuntime
+} else if (IS_STUB_RUNTIME_OPENJFX) {
+    defaultStubRuntime = openjfxStubRuntime
 } else {
     defaultStubRuntime = jdkStubRuntime
 }
 
 defineProperty("STUB_RUNTIME", defaultStubRuntime)
@@ -3379,20 +3387,25 @@
 
     compileJava.dependsOn(copyWrappers);
 
     test {
         doFirst {
-            if (!IS_COMPILE_WEBKIT) {
-                println "*****************************************************"
+            if (IS_STUB_RUNTIME_OPENJFX) {
+                println "********************************************************"
+                println "WARNING: running web tests with officially built webkit."
+                println "The webkit native library may not be compatible with the"
+                println "source tree you are using."
+                println "If tests fail, try compiling webkit instead."
+                println "See WEBKIT-MEDIA-STUBS.md"
+                println "********************************************************"
+            } else if (!IS_COMPILE_WEBKIT) {
+                println "******************************************************"
                 println "WARNING: running web tests without building webkit."
                 println "The webkit native library will be copied from the JDK,"
                 println "which might lead to failures in some web tests."
-                println "To avoid these failures, you should either build"
-                println "webkit locally, copy the native webkit library from a"
-                println "recent build, or skip execution of web test cases with"
-                println "'-x :web:test'"
-                println "*****************************************************"
+                println "See WEBKIT-MEDIA-STUBS.md"
+                println "******************************************************"
             }
         }
         // Run web tests in headless mode
         systemProperty 'glass.platform', 'Monocle'
         systemProperty 'monocle.platform', 'Headless'
@@ -4319,10 +4332,40 @@
         zipsTask.dependsOn(zipJmodsTask)
     }
 }
 
 
+/******************************************************************************
+ *                                                                            *
+ *                             OpenJFX Stubs                                  *
+ *                                                                            *
+ *****************************************************************************/
+
+configurations {
+    openjfxStubs
+}
+
+if (IS_STUB_RUNTIME_OPENJFX) {
+    def String platform = IS_MAC ? "mac" : IS_WINDOWS ? "win" : IS_LINUX ? "linux" : ""
+    dependencies {
+        openjfxStubs "org.openjfx:javafx-media:$STUB_RUNTIME_OPENJFX:$platform@jar"
+        openjfxStubs "org.openjfx:javafx-web:$STUB_RUNTIME_OPENJFX:$platform@jar"
+    }
+}
+
+// Extract binary libraries from OpenJFX artifacts for use as stubs
+task prepOpenJfxStubs(type: Copy) {
+    enabled = IS_STUB_RUNTIME_OPENJFX
+
+    from configurations.openjfxStubs.files.collect { zipTree(it) }
+    include("*.dll")
+    include("*.dylib")
+    include("*.so")
+    into IS_WINDOWS ? file("$openjfxStubRuntime/bin") : file("$openjfxStubRuntime/lib")
+}
+
+
 /******************************************************************************
  *                                                                            *
  *                               Modules                                      *
  *                                                                            *
  *****************************************************************************/
@@ -4913,11 +4956,11 @@
                     from ("$winsdklib");
                 }
             }
         }
 
-        def buildModuleMediaTask = task("buildModuleMedia$t.capital", type: Copy, dependsOn: mediaProject.assemble) {
+        def buildModuleMediaTask = task("buildModuleMedia$t.capital", type: Copy, dependsOn: [mediaProject.assemble, prepOpenJfxStubs]) {
             group = "Basic"
             description = "copies javafx.media native libraries"
 
             into "${mediaProject.buildDir}/${moduleNativeDirName}"
 
@@ -4950,11 +4993,11 @@
                     from ("$MEDIA_STUB/${library("glib-lite")}")
                 }
             }
         }
 
-        def buildModuleWeb = task("buildModuleWeb$t.capital", type: Copy, dependsOn: webProject.assemble) {
+        def buildModuleWeb = task("buildModuleWeb$t.capital", type: Copy, dependsOn: [webProject.assemble, prepOpenJfxStubs]) {
             group = "Basic"
             description = "copies javafx.web native libraries"
 
             into "${webProject.buildDir}/${moduleNativeDirName}"
 
