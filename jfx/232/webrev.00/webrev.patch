diff a/modules/javafx.graphics/src/main/native-glass/ios/GlassApplication.m b/modules/javafx.graphics/src/main/native-glass/ios/GlassApplication.m
--- a/modules/javafx.graphics/src/main/native-glass/ios/GlassApplication.m
+++ b/modules/javafx.graphics/src/main/native-glass/ios/GlassApplication.m
@@ -60,10 +60,11 @@
 
 jmethodID mat_jViewNotifyResize = 0;
 jmethodID mat_jViewNotifyRepaint = 0;
 jmethodID mat_jViewNotifyKey = 0;
 jmethodID mat_jViewNotifyMouse = 0;
+jmethodID mat_jViewNotifyMenu = 0;
 jmethodID mat_jViewNotifyInputMethod = 0;
 jmethodID mat_jViewNotifyView = 0;
 
 jmethodID mat_jMapGetMethod = 0;
 jmethodID mat_jBooleanValueMethod = 0;
@@ -669,10 +670,11 @@
     GLASS_CHECK_EXCEPTION(env);
 
     mat_jViewNotifyResize = (*env)->GetMethodID(env, mat_jViewBaseClass, "notifyResize", "(II)V");
     mat_jViewNotifyRepaint = (*env)->GetMethodID(env, mat_jViewBaseClass, "notifyRepaint", "(IIII)V");
     mat_jViewNotifyMouse = (*env)->GetMethodID(env, mat_jViewBaseClass, "notifyMouse", "(IIIIIIIZZ)V");
+    mat_jViewNotifyMenu = (*env)->GetMethodID(env, mat_jViewBaseClass, "notifyMenu", "(IIIIZ)V");
     mat_jViewNotifyInputMethod = (*env)->GetMethodID(env, mat_jViewBaseClass, "notifyInputMethod", "(Ljava/lang/String;[I[I[BIII)V");
     mat_jViewNotifyView = (*env)->GetMethodID(env, mat_jViewBaseClass, "notifyView", "(I)V");
     GLASS_CHECK_EXCEPTION(env);
 
 
diff a/modules/javafx.graphics/src/main/native-glass/ios/GlassViewDelegate.m b/modules/javafx.graphics/src/main/native-glass/ios/GlassViewDelegate.m
--- a/modules/javafx.graphics/src/main/native-glass/ios/GlassViewDelegate.m
+++ b/modules/javafx.graphics/src/main/native-glass/ios/GlassViewDelegate.m
@@ -373,10 +373,23 @@
 
     GLASS_CHECK_EXCEPTION(env);
 }
 
 
+- (void)handleLongPressGesture:(UILongPressGestureRecognizer*)sender {
+    if (sender.state == UIGestureRecognizerStateBegan) {
+        // Simulate right-click
+        CGPoint viewPoint = [sender locationInView:self.uiView.superview];
+        [self sendJavaMouseEvent:viewPoint type:com_sun_glass_events_MouseEvent_ENTER button:com_sun_glass_events_MouseEvent_BUTTON_NONE];
+        [self sendJavaMouseEvent:viewPoint type:com_sun_glass_events_MouseEvent_DOWN button:com_sun_glass_events_MouseEvent_BUTTON_RIGHT];
+    } else if (sender.state == UIGestureRecognizerStateEnded) {
+        // Prevent touch ended event
+        self.mouseTouch = nil;
+    }
+}
+
+
 - (id)initWithView:(UIScrollView*)view withJview:(jobject)jview
 {
     self = [super init];
     if (self != nil)
     {
@@ -420,10 +433,19 @@
         //Scrolling
         UIPanGestureRecognizer * panGestureRecognizer = self.uiView.panGestureRecognizer;
         [panGestureRecognizer setCancelsTouchesInView:NO];
         [panGestureRecognizer setDelaysTouchesBegan:NO];
         [panGestureRecognizer setDelaysTouchesEnded:NO];
+        //LongPress
+        UILongPressGestureRecognizer *longPressGesture =
+            [[UILongPressGestureRecognizer alloc] initWithTarget:self action:@selector(handleLongPressGesture:)];
+        [longPressGesture setCancelsTouchesInView:NO];
+        [longPressGesture setDelaysTouchesEnded:NO];
+        [longPressGesture setDelaysTouchesBegan:NO];
+        [self.uiView addGestureRecognizer:longPressGesture];
+        [longPressGesture setDelegate:ggDelegate];
+        [longPressGesture release];
     }
     return self;
 }
 
 
@@ -549,10 +571,17 @@
     GET_MAIN_JENV;
     (*env)->CallVoidMethod(env, self.jView, mat_jViewNotifyMouse, type, button,
                            (jint)viewPoint.x, (jint)viewPoint.y, (jint)viewPoint.x, (jint)viewPoint.y,
                            modifiers, isPopupTrigger, isSynthesized);
     GLASS_CHECK_EXCEPTION(env);
+
+    if (isPopupTrigger) {
+        jboolean isKeyboardTrigger = JNI_FALSE;
+        (*env)->CallVoidMethod(env, self.jView, mat_jViewNotifyMenu,
+                               (jint)viewPoint.x, (jint)viewPoint.y, (jint)viewPoint.x, (jint)viewPoint.y, isKeyboardTrigger);
+        GLASS_CHECK_EXCEPTION(env);
+    }
 }
 
 
 - (void)sendJavaKeyEventWithType:(int)type keyCode:(int)code unicode:(int)unicode modifiers:(int)modif
 {
diff a/modules/javafx.graphics/src/main/native-glass/ios/common.h b/modules/javafx.graphics/src/main/native-glass/ios/common.h
--- a/modules/javafx.graphics/src/main/native-glass/ios/common.h
+++ b/modules/javafx.graphics/src/main/native-glass/ios/common.h
@@ -51,10 +51,11 @@
 
 extern jmethodID mat_jViewNotifyResize;
 extern jmethodID mat_jViewNotifyRepaint;
 extern jmethodID mat_jViewNotifyKey;
 extern jmethodID mat_jViewNotifyMouse;
+extern jmethodID mat_jViewNotifyMenu;
 extern jmethodID mat_jViewNotifyInputMethod;
 extern jmethodID mat_jViewNotifyView;
 
 extern jmethodID mat_jMapGetMethod;
 extern jmethodID mat_jBooleanValueMethod;
