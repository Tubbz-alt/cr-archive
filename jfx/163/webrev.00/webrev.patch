diff a/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/events/AudioSpectrumEvent.java b/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/events/AudioSpectrumEvent.java
--- a/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/events/AudioSpectrumEvent.java
+++ b/modules/javafx.media/src/main/java/com/sun/media/jfxmedia/events/AudioSpectrumEvent.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -29,24 +29,44 @@
 
 public class AudioSpectrumEvent extends PlayerEvent {
     private AudioSpectrum source;
     private double        timestamp;
     private double        duration;
+    private boolean       queryTimestamp;
 
-    public AudioSpectrumEvent(AudioSpectrum source, double timestamp, double duration) {
+    /*
+     * Value of timestamp will be ignored if queryTimestamp is set true and
+     * timestamp will be requested from EventQueueThread when spectrum event is
+     * received instead. We do not use -1.0 (GST_CLOCK_TIME_NONE), since
+     * GStreamer might send us such events in case if something fails, so we using
+     * queryTimestamp to know for sure that we need to ask for timestamp from
+     * event queue. Note: Only OSX platfrom sets it true. GStreamer platfrom
+     * should not use it unless such usage is tested.
+     */
+    public AudioSpectrumEvent(AudioSpectrum source, double timestamp,
+                              double duration, boolean queryTimestamp) {
         this.source = source;
         this.timestamp = timestamp;
         this.duration = duration;
+        this.queryTimestamp = queryTimestamp;
     }
 
     public final AudioSpectrum getSource() {
         return source;
     }
 
+    public final void setTimestamp(double timestamp) {
+        this.timestamp = timestamp;
+    }
+
     public final double getTimestamp() {
         return timestamp;
     }
 
     public final double getDuration() {
         return duration;
     }
+
+    public final boolean queryTimestamp() {
+        return queryTimestamp;
+    }
 }
diff a/modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/NativeMediaPlayer.java b/modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/NativeMediaPlayer.java
--- a/modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/NativeMediaPlayer.java
+++ b/modules/javafx.media/src/main/java/com/sun/media/jfxmediaimpl/NativeMediaPlayer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -717,10 +717,15 @@
 
         private void HandleAudioSpectrumEvents(AudioSpectrumEvent evt) {
             for (ListIterator<WeakReference<AudioSpectrumListener>> it = audioSpectrumListeners.listIterator(); it.hasNext();) {
                 AudioSpectrumListener listener = it.next().get();
                 if (listener != null) {
+                    if (evt.queryTimestamp()) {
+                        double timestamp = playerGetPresentationTime();
+                        evt.setTimestamp(timestamp);
+                    }
+
                     listener.onAudioSpectrumEvent(evt);
                 } else {
                     it.remove();
                 }
             }
@@ -1549,12 +1554,12 @@
 
     protected void sendBufferProgressEvent(double clipDuration, long bufferStart, long bufferStop, long bufferPosition) {
         sendPlayerEvent(new BufferProgressEvent(clipDuration, bufferStart, bufferStop, bufferPosition));
     }
 
-    protected void sendAudioSpectrumEvent(double timestamp, double duration) {
-        sendPlayerEvent(new AudioSpectrumEvent(getAudioSpectrum(), timestamp, duration));
+    protected void sendAudioSpectrumEvent(double timestamp, double duration, boolean queryTimestamp) {
+        sendPlayerEvent(new AudioSpectrumEvent(getAudioSpectrum(), timestamp, duration, queryTimestamp));
     }
 
     @Override
     public void markerStateChanged(boolean hasMarkers) {
         if (hasMarkers) {
diff a/modules/javafx.media/src/main/native/jfxmedia/PipelineManagement/PlayerEventDispatcher.h b/modules/javafx.media/src/main/native/jfxmedia/PipelineManagement/PlayerEventDispatcher.h
--- a/modules/javafx.media/src/main/native/jfxmedia/PipelineManagement/PlayerEventDispatcher.h
+++ b/modules/javafx.media/src/main/native/jfxmedia/PipelineManagement/PlayerEventDispatcher.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -49,9 +49,9 @@
     virtual bool SendAudioTrackEvent(CAudioTrack* pTrack) = 0;
     virtual bool SendVideoTrackEvent(CVideoTrack* pTrack) = 0;
     virtual bool SendMarkerEvent(string name, double time) = 0;
     virtual bool SendBufferProgressEvent(double clipDuration, int64_t start, int64_t stop, int64_t position) = 0;
     virtual bool SendDurationUpdateEvent(double time) = 0;
-    virtual bool SendAudioSpectrumEvent(double time, double duration) = 0;
+    virtual bool SendAudioSpectrumEvent(double time, double duration, bool queryTimestamp) = 0;
     virtual void Warning(int warningCode, const char* warningMessage) = 0;
 };
 #endif // _PLAYER_EVENT_DISPATCHER_H_
diff a/modules/javafx.media/src/main/native/jfxmedia/jni/JavaPlayerEventDispatcher.cpp b/modules/javafx.media/src/main/native/jfxmedia/jni/JavaPlayerEventDispatcher.cpp
--- a/modules/javafx.media/src/main/native/jfxmedia/jni/JavaPlayerEventDispatcher.cpp
+++ b/modules/javafx.media/src/main/native/jfxmedia/jni/JavaPlayerEventDispatcher.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -153,11 +153,11 @@
             hasException = javaEnv.reportException();
         }
 
         if (!hasException)
         {
-            m_SendAudioSpectrumEventMethod  = env->GetMethodID(klass, "sendAudioSpectrumEvent", "(DD)V");
+            m_SendAudioSpectrumEventMethod  = env->GetMethodID(klass, "sendAudioSpectrumEvent", "(DDZ)V");
             hasException = javaEnv.reportException();
         }
 
         env->DeleteLocalRef(klass);
 
@@ -539,19 +539,21 @@
     }
 
     return bSucceeded;
 }
 
-bool CJavaPlayerEventDispatcher::SendAudioSpectrumEvent(double time, double duration)
+bool CJavaPlayerEventDispatcher::SendAudioSpectrumEvent(double time, double duration,
+                                                        bool queryTimestamp)
 {
     bool bSucceeded = false;
     CJavaEnvironment jenv(m_PlayerVM);
     JNIEnv *pEnv = jenv.getEnvironment();
     if (pEnv) {
         jobject localPlayer = pEnv->NewLocalRef(m_PlayerInstance);
         if (localPlayer) {
-            pEnv->CallVoidMethod(localPlayer, m_SendAudioSpectrumEventMethod, time, duration);
+            pEnv->CallVoidMethod(localPlayer, m_SendAudioSpectrumEventMethod, time,
+                                              duration, queryTimestamp);
             pEnv->DeleteLocalRef(localPlayer);
 
             bSucceeded = !jenv.reportException();
         }
     }
diff a/modules/javafx.media/src/main/native/jfxmedia/jni/JavaPlayerEventDispatcher.h b/modules/javafx.media/src/main/native/jfxmedia/jni/JavaPlayerEventDispatcher.h
--- a/modules/javafx.media/src/main/native/jfxmedia/jni/JavaPlayerEventDispatcher.h
+++ b/modules/javafx.media/src/main/native/jfxmedia/jni/JavaPlayerEventDispatcher.h
@@ -57,11 +57,11 @@
     virtual bool SendVideoTrackEvent(CVideoTrack* pTrack);
     virtual bool SendSubtitleTrackEvent(CSubtitleTrack* pTrack);
     virtual bool SendMarkerEvent(string name, double time);
     virtual bool SendBufferProgressEvent(double clipDuration, int64_t start, int64_t stop, int64_t position);
     virtual bool SendDurationUpdateEvent(double time);
-    virtual bool SendAudioSpectrumEvent(double time, double duration);
+    virtual bool SendAudioSpectrumEvent(double time, double duration, bool queryTimestamp);
     virtual void Warning(int warningCode, const char* warningMessage);
 
 private:
     JavaVM *m_PlayerVM;
     jobject m_PlayerInstance;
diff a/modules/javafx.media/src/main/native/jfxmedia/platform/gstreamer/GstAudioPlaybackPipeline.cpp b/modules/javafx.media/src/main/native/jfxmedia/platform/gstreamer/GstAudioPlaybackPipeline.cpp
--- a/modules/javafx.media/src/main/native/jfxmedia/platform/gstreamer/GstAudioPlaybackPipeline.cpp
+++ b/modules/javafx.media/src/main/native/jfxmedia/platform/gstreamer/GstAudioPlaybackPipeline.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -1449,11 +1449,13 @@
                     delete [] magnitudes;
                     delete [] phases;
                 }
 
                 if (!pPipeline->m_pEventDispatcher->SendAudioSpectrumEvent(GST_TIME_AS_SECONDS((double)timestamp),
-                    GST_TIME_AS_SECONDS((double)duration)))
+                    GST_TIME_AS_SECONDS((double)duration), false)) // Always false, since GStreamer does not need it,
+                                                                   // but if it will be required such case needs to be
+                                                                   // tested.
                 {
                     if(!pPipeline->m_pEventDispatcher->SendPlayerMediaErrorEvent(ERROR_JNI_SEND_AUDIO_SPECTRUM_EVENT))
                     {
                         LOGGER_LOGMSG(LOGGER_ERROR, "Cannot send media error event.\n");
                     }
diff a/modules/javafx.media/src/main/native/jfxmedia/platform/ios/EventDispatcher.m b/modules/javafx.media/src/main/native/jfxmedia/platform/ios/EventDispatcher.m
--- a/modules/javafx.media/src/main/native/jfxmedia/platform/ios/EventDispatcher.m
+++ b/modules/javafx.media/src/main/native/jfxmedia/platform/ios/EventDispatcher.m
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -101,11 +101,11 @@
                                                      "(D)V");
 
     midSendAudioSpectrumEvent = (*env)->GetMethodID(env,
                                                     klass,
                                                     "sendAudioSpectrumEvent",
-                                                    "(DD)V");
+                                                    "(DDZ)V");
 
 }
 
 - (id) initWithJavaEnv: (JNIEnv *) env
         playerInstance: (jobject) playerInstance {
diff a/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFAudioProcessor.mm b/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFAudioProcessor.mm
--- a/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFAudioProcessor.mm
+++ b/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFAudioProcessor.mm
@@ -277,10 +277,6 @@
         if (!context->audioSLU.get()->ProcessBufferLists(*bufferListInOut, numberFrames)) {
             NSLog(@"audioSLU ProcessBufferLists() failed");
             return;
         }
     }
-
-    if (context->audioSpectrum != nullptr) {
-        context->audioSpectrum.get()->SetFirstBufferDelivered(true);
-    }
 }
diff a/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFAudioSpectrumUnit.cpp b/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFAudioSpectrumUnit.cpp
--- a/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFAudioSpectrumUnit.cpp
+++ b/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFAudioSpectrumUnit.cpp
@@ -39,11 +39,10 @@
                                                mSampleRate(0),
                                                mChannels(0),
                                                mMaxFrames(0),
                                                mSamplesPerInterval(0),
                                                mRebuildCrunch(true),
-                                               mFirstBufferDelivered(false),
                                                mSpectrumElement(NULL),
                                                mSpectrum(NULL) {
     mMixBuffer.mNumberBuffers = 1;
     mMixBuffer.mBuffers[0].mData = NULL;
 
@@ -190,12 +189,12 @@
     mBands->UpdateBands(size, magnitudes, magnitudes);
 
     // Call our listener to dispatch the spectrum event
     if (mSpectrumCallbackProc) {
         double duration = (double) mSamplesPerInterval / (double) 44100;
-        double timestamp = mFirstBufferDelivered ? -1.0 : 0.0;
-        mSpectrumCallbackProc(mSpectrumCallbackContext, duration, timestamp);
+        // Timestamp is ignored and it will be queried from event loop
+        mSpectrumCallbackProc(mSpectrumCallbackContext, duration, -1.0);
     }
 
     unlockBands();
 }
 
@@ -214,14 +213,10 @@
 void AVFAudioSpectrumUnit::SetSpectrumCallbackProc(AVFSpectrumUnitCallbackProc proc, void *context) {
     mSpectrumCallbackProc = proc;
     mSpectrumCallbackContext = context;
 }
 
-void AVFAudioSpectrumUnit::SetFirstBufferDelivered(bool isFirstBufferDelivered) {
-    mFirstBufferDelivered = isFirstBufferDelivered;
-}
-
 static gboolean PostMessageCallback(GstElement * element, GstMessage * message) {
     if (message == NULL) {
         return FALSE;
     }
 
diff a/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFAudioSpectrumUnit.h b/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFAudioSpectrumUnit.h
--- a/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFAudioSpectrumUnit.h
+++ b/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFAudioSpectrumUnit.h
@@ -79,11 +79,10 @@
 
     void SetSampleRate(UInt32 rate);
     void SetChannels(UInt32 count);
     void SetMaxFrames(UInt32 maxFrames);
     void SetSpectrumCallbackProc(AVFSpectrumUnitCallbackProc proc, void *context);
-    void SetFirstBufferDelivered(bool isFirstBufferDelivered);
 
 private:
     AVFSpectrumUnitCallbackProc mSpectrumCallbackProc;
     void *mSpectrumCallbackContext;
     bool mEnabled;
@@ -102,11 +101,10 @@
     UInt32 mChannels;
     UInt32 mMaxFrames;
     UInt32 mSamplesPerInterval;
 
     bool mRebuildCrunch;
-    bool mFirstBufferDelivered;
 
     // GStreamer
     GstElement *mSpectrumElement;
     GstSpectrum *mSpectrum;
 
diff a/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFMediaPlayer.mm b/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFMediaPlayer.mm
--- a/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFMediaPlayer.mm
+++ b/modules/javafx.media/src/main/native/jfxmedia/platform/osx/avf/AVFMediaPlayer.mm
@@ -651,14 +651,12 @@
     eventHandler->SendNewFrameEvent(frame);
 }
 
 - (void) sendSpectrumEventDuration:(double)duration timestamp:(double)timestamp {
     if (eventHandler) {
-        if (timestamp < 0) {
-            timestamp = self.currentTime;
-        }
-        eventHandler->SendAudioSpectrumEvent(timestamp, duration);
+        // Always true for queryTimestamp do to JDK-8240694
+        eventHandler->SendAudioSpectrumEvent(timestamp, duration, true);
     }
 }
 
 @end
 
