diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/LabelSkinTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/LabelSkinTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/LabelSkinTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/LabelSkinTest.java
@@ -134,10 +134,16 @@
         skin.addWatchedProperty(label.alignmentProperty());
         label.setAlignment(Pos.TOP_CENTER);
         assertTrue(skin.propertyChanged);
     }
 
+    @Test public void lineSpacingChangesOnLabelShouldInvoke_handleControlPropertyChanged() {
+        skin.addWatchedProperty(label.lineSpacingProperty());
+        label.setLineSpacing(1.0);
+        assertTrue(skin.propertyChanged);
+    }
+
     @Test public void textChangesOnLabelShouldInvoke_handleControlPropertyChanged() {
         skin.addWatchedProperty(label.textProperty());
         label.setText("Bust my buffers!");
         assertTrue(skin.propertyChanged);
     }
@@ -277,10 +283,19 @@
         label.setAlignment(Pos.TOP_CENTER);
         assertTrue(label.isNeedsLayout());
         assertFalse(skin.get_invalidText());
     }
 
+    @Test public void lineSpacingChangesOnLabelShouldInvalidateLayoutAndDisplayText() {
+        label.layout();
+        skin.updateDisplayedText();
+
+        label.setLineSpacing(1.0);
+        assertTrue(label.isNeedsLayout());
+        assertTrue(skin.get_invalidText());
+    }
+
     @Test public void textChangesOnLabelShouldInvalidateLayoutAndDisplayTextAndTextWidth() {
         label.layout();
         skin.updateDisplayedText();
 
         label.setText("Apples and Oranges");
@@ -1143,10 +1158,30 @@
         final double singleLineHeight = Utils.computeTextHeight(label.getFont(), " ", 0, text.getBoundsType());
         final double height = label.prefHeight(-1);
         assertTrue(height >= singleLineHeight * 5);
     }
 
+    @Test public void whenTextHasNewlinesAndPositiveLineSpacing_computePrefHeight_IncludesTheMultipleLinesAndLineSpacingInThePrefHeight() {
+        label.setLineSpacing(2);
+        label.setText("This\nis a test\nof the emergency\nbroadcast system.\nThis is only a test");
+        label.setPadding(new Insets(0, 0, 0, 0));
+        final double singleLineHeight = Utils.computeTextHeight(label.getFont(), " ", 0, text.getBoundsType());
+        final double expectedHeight = singleLineHeight * 5 + label.getLineSpacing() * 5 - label.getLineSpacing();
+        final double height = label.prefHeight(-1);
+        assertEquals(expectedHeight, height, 0);
+    }
+
+    @Test public void whenTextHasNewlinesAndNegativeLineSpacing_computePrefHeight_IncludesTheMultipleLinesAndLineSpacingInThePrefHeight() {
+        label.setLineSpacing(-2);
+        label.setText("This\nis a test\nof the emergency\nbroadcast system.\nThis is only a test");
+        label.setPadding(new Insets(0, 0, 0, 0));
+        final double singleLineHeight = Utils.computeTextHeight(label.getFont(), " ", 0, text.getBoundsType());
+        final double expectedHeight = singleLineHeight * 5 + label.getLineSpacing() * 5 - label.getLineSpacing();
+        final double height = label.prefHeight(-1);
+        assertEquals(expectedHeight, height, 0);
+    }
+
     @Test public void whenTextHasNewlinesAfterPreviousComputationOf_computePrefHeight_IncludesTheMultipleLinesInThePrefHeight() {
         label.setText("This is a test");
         final double oldPrefHeight = label.prefHeight(-1);
         label.setText("This\nis a test\nof the emergency\nbroadcast system.\nThis is only a test");
         final double newPrefHeight = label.prefHeight(-1);
