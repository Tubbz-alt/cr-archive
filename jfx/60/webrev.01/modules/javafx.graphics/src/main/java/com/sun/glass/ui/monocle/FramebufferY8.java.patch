diff a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/FramebufferY8.java b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/FramebufferY8.java
--- a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/FramebufferY8.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/FramebufferY8.java
@@ -91,28 +91,29 @@
      * pixels. Luma Y' can be calculated from gamma-corrected R'G'B' using the
      * following coefficients. This method uses the coefficients from Rec. 709,
      * which defines the same primaries and white point as the sRGB color space.
      * <pre>{@code
      * Simple average:  Y' = (R' + G' + B') / 3
-     * Rec. 601 (SDTV): Y' = 0.299  × R' + 0.587  × G' + 0.114  × B'
-     * Rec. 709 (HDTV): Y' = 0.2126 × R' + 0.7152 × G' + 0.0722 × B'
-     * Rec. 2100 (HDR): Y' = 0.2627 × R' + 0.6780 × G' + 0.0593 × B'
+     * Rec. 601 (SDTV): Y' = 0.299  * R' + 0.587  * G' + 0.114  * B'
+     * Rec. 709 (HDTV): Y' = 0.2126 * R' + 0.7152 * G' + 0.0722 * B'
+     * Rec. 2100 (HDR): Y' = 0.2627 * R' + 0.6780 * G' + 0.0593 * B'
      * }</pre>
      *
      * @implNote Java rounds toward zero when converting a {@code float} to an
-     * {@code int}, so this method adds 0.5 before the type conversion to round
-     * to the nearest integer.
+     * {@code int}. The calculation of luma could be rounded to the nearest
+     * integer by adding 0.5 before the type conversion, but the extra operation
+     * seems unnecessary for a display with only 16 levels of gray.
      *
      * @param source the source integer buffer in ARGB32 format
      * @param target the target byte buffer in Y8 format
      */
     private void copyNextPixel(IntBuffer source, ByteBuffer target) {
         int pixel32 = source.get();
         int r = (pixel32 >> 16) & 0xFF;
         int g = (pixel32 >> 8) & 0xFF;
         int b = pixel32 & 0xFF;
-        int y = (int) (0.2126f * r + 0.7152f * g + 0.0722f * b + 0.5f);
+        int y = (int) (0.2126f * r + 0.7152f * g + 0.0722f * b);
         target.put((byte) y);
     }
 
     /**
      * Copies the next 32-bit ARGB32 pixel to a short buffer with 16-bit RGB565
@@ -185,11 +186,10 @@
             }
             default:
                 String msg = MessageFormat.format("byteDepth={0}", byteDepth);
                 logger.severe(msg);
                 throw new IllegalStateException(msg);
-
         }
     }
 
     /**
      * Copies the contents of the composition buffer to the output buffer,
@@ -245,11 +245,10 @@
             }
             default:
                 String msg = MessageFormat.format("byteDepth={0}", byteDepth);
                 logger.severe(msg);
                 throw new IllegalStateException(msg);
-
         }
     }
 
     @Override
     public String toString() {
