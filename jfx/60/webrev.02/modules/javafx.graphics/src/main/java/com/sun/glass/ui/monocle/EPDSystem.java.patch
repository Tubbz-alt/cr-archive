diff a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/EPDSystem.java b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/EPDSystem.java
--- a/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/EPDSystem.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/glass/ui/monocle/EPDSystem.java
@@ -175,11 +175,11 @@
      * display power supplies.
      */
     static final int FB_POWERDOWN_DISABLE = -1;
 
     /**
-     * Initialization waveform (0x0...0xF → 0xF in ~4000 ms). Clears the screen
+     * Initialization waveform (0x0...0xF to 0xF in ~4000 ms). Clears the screen
      * to all white.
      * <p>
      * "A first exemplary drive scheme provides waveforms that may be used to
      * change the display state of a pixel from any initial display state to a
      * new display state of white. The first drive scheme may be referred to as
@@ -187,11 +187,11 @@
      * 9,280,955</cite>]</p>
      */
     static final int WAVEFORM_MODE_INIT = 0;
 
     /**
-     * Direct update waveform (0x0...0xF → 0x0 or 0xF in ~260 ms). Changes gray
+     * Direct update waveform (0x0...0xF to 0x0 or 0xF in ~260 ms). Changes gray
      * pixels to black or white.
      * <p>
      * "A second exemplary drive scheme provides waveforms that may be used to
      * change the display state of a pixel from any initial display state to a
      * new display state of either white or black. The second drive scheme may
@@ -199,11 +199,11 @@
      * 9,280,955</cite>]</p>
      */
     static final int WAVEFORM_MODE_DU = 1;
 
     /**
-     * Gray 4-level waveform (0x0...0xF → 0x0, 0x5, 0xA, or 0xF in ~500 ms).
+     * Gray 4-level waveform (0x0...0xF to 0x0, 0x5, 0xA, or 0xF in ~500 ms).
      * Supports 2-bit grayscale images and text with lower quality.
      * <p>
      * "A third exemplary drive scheme provides waveforms that may be used to
      * change the display state of a pixel from any initial display state to a
      * new display state. The initial state may be any four-bit (16 gray states)
@@ -212,12 +212,12 @@
      * [<cite>United States Patent 9,280,955</cite>]</p>
      */
     static final int WAVEFORM_MODE_GC4 = 3;
 
     /**
-     * Gray 16-level waveform (0x0...0xF → 0x0...0xF in ~760 ms). Supports 4-bit
-     * grayscale images and text with high quality.
+     * Gray 16-level waveform (0x0...0xF to 0x0...0xF in ~760 ms). Supports
+     * 4-bit grayscale images and text with high quality.
      * <p>
      * "A fourth exemplary drive scheme provides waveforms that may be used to
      * change the display state of a pixel from any initial display state to a
      * new display state. The initial state may be any four-bit (16 gray states)
      * value. The new display state may be any four-bit (16 gray states) value.
@@ -225,11 +225,11 @@
      * [<cite>United States Patent 9,280,955</cite>]</p>
      */
     static final int WAVEFORM_MODE_GC16 = 2;
 
     /**
-     * Animation waveform (0x0 or 0xF → 0x0 or 0xF in ~120 ms). Provides a fast
+     * Animation waveform (0x0 or 0xF to 0x0 or 0xF in ~120 ms). Provides a fast
      * 1-bit black-and-white animation mode of up to eight frames per second.
      * <p>
      * "A fifth exemplary drive scheme provides waveforms that may be used to
      * change the display state of a pixel from an initial display state to a
      * new display state. The initial state must be white or black. The new
@@ -343,24 +343,26 @@
     void loadLibrary() {
         NativeLibLoader.loadLibrary("glass_monocle_epd");
     }
 
     /**
-     * Passes an integer parameter by value to the device driver through the
-     * IOCTL interface. ({@link LinuxSystem#ioctl}, instead, takes a pointer as
-     * its third parameter, passing its data by reference.)
+     * Calls the {@code ioctl} system function, passing a <i>write</i> integer
+     * parameter. This method is more convenient than passing the pointer to an
+     * {@code IntStructure} with {@link LinuxSystem#ioctl} and can be used when
+     * the request code is created by {@link LinuxSystem#IOW} for setting an
+     * integer value.
      *
      * @param fd an open file descriptor
      * @param request a device-dependent request code
      * @param value the integer value
      * @return 0 if successful; otherwise -1 with {@code errno} set
      * appropriately
      */
     native int ioctl(long fd, int request, int value);
 
     /**
-     * A structure for passing an integer by value in an IOCTL call.
+     * A structure for passing the pointer to an integer in an IOCTL call.
      */
     static class IntStructure extends C.Structure {
 
         private static final int VALUE = 0;
 
@@ -377,15 +379,15 @@
         @Override
         int sizeof() {
             return BYTES;
         }
 
-        int getInteger(long p) {
+        int get(long p) {
             return data.get(VALUE);
         }
 
-        void setInteger(long p, int value) {
+        void set(long p, int value) {
             data.put(VALUE, value);
         }
     }
 
     /**
