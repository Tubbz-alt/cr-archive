diff a/modules/javafx.base/src/test/java/test/util/memory/JMemoryBuddy.java b/modules/javafx.base/src/test/java/test/util/memory/JMemoryBuddy.java
--- a/modules/javafx.base/src/test/java/test/util/memory/JMemoryBuddy.java
+++ b/modules/javafx.base/src/test/java/test/util/memory/JMemoryBuddy.java
@@ -35,10 +35,14 @@
 import java.util.Date;
 import java.util.LinkedList;
 import java.util.function.Consumer;
 import java.util.function.Function;
 
+
+/**
+ * Checkout <a href="https://github.com/Sandec/JMemoryBuddy">https://github.com/Sandec/JMemoryBuddy</a> for more documentation.
+ */
 public class JMemoryBuddy {
 
     private static int steps = 10;
     private static int overallTime = 1000;
     private static int sleepTime = overallTime / steps;
@@ -53,35 +57,34 @@
         steps = Integer.parseInt(System.getProperty("jmemorybuddy.steps", "10"));
         createHeapdump = Boolean.parseBoolean(System.getProperty("jmemorybuddy.createHeapdump", "false"));
         garbageAmount = Integer.parseInt(System.getProperty("jmemorybuddy.garbageAmount", "10"));
     }
 
-    private static void createGarbage() {
+    static void createGarbage() {
         LinkedList list = new LinkedList<Integer>();
         int counter = 0;
         while(counter < garbageAmount) {
             counter += 1;
             list.add(1);
         }
     }
 
     /**
-     * Checks whethr the content of the WeakReference can be collected.
-     * @param weakReference
-     * @return It throws an excpetion when the weakReference was not collectable.
+     * Checks whether the content of the WeakReference can be collected.
+     * @param weakReference The WeakReference to check.
      */
     public static void assertCollectable(WeakReference weakReference) {
         if(!checkCollectable(weakReference)) {
             AssertCollectable assertCollectable = new AssertCollectable(weakReference);
             createHeapDump();
             throw new AssertionError("Content of WeakReference was not collected. content: " + weakReference.get());
         }
     }
 
     /**
-     * Checks whethr the content of the WeakReference can be collected.
-     * @param weakReference
+     * Checks whether the content of the WeakReference can be collected.
+     * @param weakReference The WeakReference to check.
      * @return Returns true, when the provided WeakReference can be collected.
      */
     public static boolean checkCollectable(WeakReference weakReference) {
         return checkCollectable(steps, weakReference) > 0;
     }
@@ -112,23 +115,22 @@
 
         return counter;
     }
 
     /**
-     * Checks whethr the content of the WeakReference can not be collected.
-     * @param weakReference
-     * @return It throws an excpetion when the weakReference was collectable.
+     * Checks whether the content of the WeakReference can not be collected.
+     * @param weakReference The WeakReference to check.
      */
     public static void assertNotCollectable(WeakReference weakReference) {
         if(!checkNotCollectable(weakReference)) {
             throw new AssertionError("Content of WeakReference was collected!");
         }
     }
 
     /**
-     * Checks whethr the content of the WeakReference can not be collected.
-     * @param weakReference
+     * Checks whether the content of the WeakReference can not be collected.
+     * @param weakReference The WeakReference to check.
      * @return Returns true, when the provided WeakReference can be collected.
      */
     public static boolean checkNotCollectable(WeakReference weakReference) {
         createGarbage();
         System.gc();
@@ -136,11 +138,11 @@
     }
 
     /**
      * A standard method to define a test which checks code for specific memory semantic.
      * The parameter of the lambda provides an API to define the required memory semantic.
-     * @param f
+     * @param f A function which get's executed with the API to define the required memory semantic.
      */
     public static void memoryTest(Consumer<MemoryTestAPI> f) {
         LinkedList<WeakReference> toBeCollected = new LinkedList<WeakReference>();
         LinkedList<AssertNotCollectable> toBeNotCollected = new LinkedList<AssertNotCollectable>();
         LinkedList<SetAsReferenced> toBeReferenced = new LinkedList<SetAsReferenced>();
@@ -199,11 +201,11 @@
 
 
     }
 
 
-    private static void createHeapDump() {
+    static void createHeapDump() {
         if(createHeapdump) {
             try {
                 String dateString = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date());
                 String fileName = "heapdump_jmemb_" + dateString + ".hprof";
                 File outputFolder = new File(outputFolderString);
@@ -231,22 +233,22 @@
     }
 
     public static interface MemoryTestAPI {
         /**
          * After executing the lambda, the provided ref must be collectable. Otherwise an Exception is thrown.
-         * @param ref
+         * @param ref The reference which should be collectable.
          */
         public void assertCollectable(Object ref);
         /**
          * After executing the lambda, the provided ref must be not collectable. Otherwise an Exception is thrown.
-         * @param ref
+         * @param ref The reference which should not be collectable.
          */
         public void assertNotCollectable(Object ref);
 
         /**
-         * The provided reference won't be collected, until memoryTest finishes all it's tests.
-         * @param ref
+         * The provided reference will be reference hard, so it won't be collected, until memoryTest finishes.
+         * @param ref The reference which should get a hard reference for this test.
          */
         public void setAsReferenced(Object ref);
     }
 
     static class AssertCollectable {
@@ -292,6 +294,6 @@
         SetAsReferenced(Object ref) {
             this.setAsReferenced = ref;
         }
     }
 
-}
+}
