diff a/modules/javafx.base/src/test/java/test/util/memory/JMemoryBuddy.java b/modules/javafx.base/src/test/java/test/util/memory/JMemoryBuddy.java
--- a/modules/javafx.base/src/test/java/test/util/memory/JMemoryBuddy.java
+++ b/modules/javafx.base/src/test/java/test/util/memory/JMemoryBuddy.java
@@ -37,44 +37,53 @@
 import java.util.function.Consumer;
 import java.util.function.Function;
 
 public class JMemoryBuddy {
 
-    static int steps = 10;
-    static int overallTime = 1000;
-    static int sleepTime = overallTime / steps;
-    static boolean createHeapdump = false;
-    static int garbageAmount = 999999;
+    private static int steps = 10;
+    private static int overallTime = 1000;
+    private static int sleepTime = overallTime / steps;
+    private static boolean createHeapdump = false;
+    private static int garbageAmount = 999999;
     private static String MX_BEAN_PROXY_TYPE = "com.sun.management:type=HotSpotDiagnostic";
-
-    static String outputFolderString = ".";
+    private static String outputFolderString = ".";
 
     static {
         outputFolderString = System.getProperty("jmemorybuddy.output",".");
         overallTime = Integer.parseInt(System.getProperty("jmemorybuddy.checktime","1000"));
         steps = Integer.parseInt(System.getProperty("jmemorybuddy.steps", "10"));
         createHeapdump = Boolean.parseBoolean(System.getProperty("jmemorybuddy.createHeapdump", "false"));
         garbageAmount = Integer.parseInt(System.getProperty("jmemorybuddy.garbageAmount", "10"));
     }
 
-    public static void createGarbage() {
+    private static void createGarbage() {
         LinkedList list = new LinkedList<Integer>();
         int counter = 0;
         while(counter < garbageAmount) {
             counter += 1;
             list.add(1);
         }
     }
 
+    /**
+     * Checks whethr the content of the WeakReference can be collected.
+     * @param weakReference
+     * @return It throws an excpetion when the weakReference was not collectable.
+     */
     public static void assertCollectable(WeakReference weakReference) {
         if(!checkCollectable(weakReference)) {
             AssertCollectable assertCollectable = new AssertCollectable(weakReference);
             createHeapDump();
             throw new AssertionError("Content of WeakReference was not collected. content: " + weakReference.get());
         }
     }
 
+    /**
+     * Checks whethr the content of the WeakReference can be collected.
+     * @param weakReference
+     * @return Returns true, when the provided WeakReference can be collected.
+     */
     public static boolean checkCollectable(WeakReference weakReference) {
         return checkCollectable(steps, weakReference) > 0;
     }
 
     private static int checkCollectable(int stepsLeft, WeakReference weakReference) {
@@ -102,21 +111,37 @@
         }
 
         return counter;
     }
 
+    /**
+     * Checks whethr the content of the WeakReference can not be collected.
+     * @param weakReference
+     * @return It throws an excpetion when the weakReference was collectable.
+     */
     public static void assertNotCollectable(WeakReference weakReference) {
         if(!checkNotCollectable(weakReference)) {
             throw new AssertionError("Content of WeakReference was collected!");
         }
     }
+
+    /**
+     * Checks whethr the content of the WeakReference can not be collected.
+     * @param weakReference
+     * @return Returns true, when the provided WeakReference can be collected.
+     */
     public static boolean checkNotCollectable(WeakReference weakReference) {
         createGarbage();
         System.gc();
         return weakReference.get() != null;
     }
 
+    /**
+     * A standard method to define a test which checks code for specific memory semantic.
+     * The parameter of the lambda provides an API to define the required memory semantic.
+     * @param f
+     */
     public static void memoryTest(Consumer<MemoryTestAPI> f) {
         LinkedList<WeakReference> toBeCollected = new LinkedList<WeakReference>();
         LinkedList<AssertNotCollectable> toBeNotCollected = new LinkedList<AssertNotCollectable>();
         LinkedList<SetAsReferenced> toBeReferenced = new LinkedList<SetAsReferenced>();
 
@@ -174,11 +199,11 @@
 
 
     }
 
 
-    public static void createHeapDump() {
+    private static void createHeapDump() {
         if(createHeapdump) {
             try {
                 String dateString = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date());
                 String fileName = "heapdump_jmemb_" + dateString + ".hprof";
                 File outputFolder = new File(outputFolderString);
@@ -204,12 +229,25 @@
                         MX_BEAN_PROXY_TYPE, HotSpotDiagnosticMXBean.class);
         return bean;
     }
 
     public static interface MemoryTestAPI {
+        /**
+         * After executing the lambda, the provided ref must be collectable. Otherwise an Exception is thrown.
+         * @param ref
+         */
         public void assertCollectable(Object ref);
+        /**
+         * After executing the lambda, the provided ref must be not collectable. Otherwise an Exception is thrown.
+         * @param ref
+         */
         public void assertNotCollectable(Object ref);
+
+        /**
+         * The provided reference won't be collected, until memoryTest finishes all it's tests.
+         * @param ref
+         */
         public void setAsReferenced(Object ref);
     }
 
     static class AssertCollectable {
         WeakReference<Object> assertCollectable;
@@ -227,11 +265,11 @@
             Object el = assertCollectable.get();
             return el != null ? el.toString() : "null";
         }
     }
 
-    static class AssertNotCollectable {
+    private static class AssertNotCollectable {
         WeakReference<Object> assertNotCollectable;
         String originalResultOfToString;
 
         AssertNotCollectable(Object ref) {
             this.assertNotCollectable = new WeakReference<>(ref);
@@ -246,11 +284,11 @@
         public String toString() {
             return originalResultOfToString;
         }
     }
 
-    static class SetAsReferenced {
+    private static class SetAsReferenced {
         Object setAsReferenced;
 
         SetAsReferenced(Object ref) {
             this.setAsReferenced = ref;
         }
