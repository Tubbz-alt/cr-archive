diff a/modules/javafx.graphics/src/main/native-prism-es2/ios/IOSGLContext.c b/modules/javafx.graphics/src/main/native-prism-es2/ios/IOSGLContext.c
--- a/modules/javafx.graphics/src/main/native-prism-es2/ios/IOSGLContext.c
+++ b/modules/javafx.graphics/src/main/native-prism-es2/ios/IOSGLContext.c
@@ -32,10 +32,30 @@
 
 #include "PrismES2Defs.h"
 #include "com_sun_prism_es2_IOSGLContext.h"
 
 extern void printAndReleaseResources(jlong pf, jlong ctx, const char *message);
+jboolean pulseLoggingRequested;
+
+jboolean isPulseLoggingRequested(JNIEnv *env) {
+    jclass loggerCls = (*env)->FindClass(env, "com/sun/javafx/logging/PulseLogger");
+    if ((*env)->ExceptionCheck(env) || loggerCls == NULL) {
+        (*env)->ExceptionClear(env);
+        return JNI_FALSE;
+    }
+    jmethodID loggerMID = (*env)->GetStaticMethodID(env, loggerCls, "isPulseLoggingRequested", "()Z");
+    if ((*env)->ExceptionCheck(env) || loggerMID == NULL) {
+        (*env)->ExceptionClear(env);
+        return JNI_FALSE;
+    }
+    jboolean result = (*env)->CallStaticBooleanMethod(env, loggerCls, loggerMID);
+    if ((*env)->ExceptionCheck(env)) {
+        (*env)->ExceptionClear(env);
+        return JNI_FALSE;
+    }
+    return result;
+}
 
 /*
  * Class:     com_sun_prism_es2_IOSGLContext
  * Method:    nInitialize
  * Signature: (JJJ)J
@@ -49,10 +69,11 @@
     const char *glRenderer;
     char *tmpVersionStr;
     int  versionNumbers[2];
     const char *glExtensions;
 
+    pulseLoggingRequested = isPulseLoggingRequested(env);
     jlong pixelFormat = 0;
     jlong win = 0;
     jlong context = 0;
     int viewNotReady;
     jboolean result;
@@ -287,7 +308,9 @@
         return;
     }
     interval = (vSyncNeeded) ? 1 : 0;
     ctxInfo->state.vSyncEnabled = vSyncNeeded;
     setSwapInterval(ctxInfo->context, interval);
-    fprintf(stderr, "setSwapInterval(%d)\n", interval);
+    if (pulseLoggingRequested) {
+        fprintf(stderr, "setSwapInterval(%d)\n", interval);
+    }
 }
diff a/modules/javafx.graphics/src/main/native-prism-es2/ios/IOSWindowSystemInterface.m b/modules/javafx.graphics/src/main/native-prism-es2/ios/IOSWindowSystemInterface.m
--- a/modules/javafx.graphics/src/main/native-prism-es2/ios/IOSWindowSystemInterface.m
+++ b/modules/javafx.graphics/src/main/native-prism-es2/ios/IOSWindowSystemInterface.m
@@ -90,11 +90,13 @@
     [[EAGLContext currentContext] presentRenderbuffer:GL_RENDERBUFFER];
     return JNI_FALSE;
 }
 
 void setSwapInterval(void *context, int interval) {
-    fprintf(stderr, "IOSWindowSystemInterface : setSwapInterval unimp\n");
+    if (pulseLoggingRequested) {
+        fprintf(stderr, "IOSWindowSystemInterface : setSwapInterval unimp\n");
+    }
 }
 
 
 #import <mach-o/dyld.h>
 #import <stdlib.h>
diff a/modules/javafx.graphics/src/main/native-prism-es2/ios/ios-window-system.h b/modules/javafx.graphics/src/main/native-prism-es2/ios/ios-window-system.h
--- a/modules/javafx.graphics/src/main/native-prism-es2/ios/ios-window-system.h
+++ b/modules/javafx.graphics/src/main/native-prism-es2/ios/ios-window-system.h
@@ -48,5 +48,6 @@
 void* createDummyWindow();
 void* getProcAddress(const char *procName);
 
 void setSwapInterval(void* nsContext, int interval);
 
+extern jboolean pulseLoggingRequested;
