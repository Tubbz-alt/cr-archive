diff a/modules/javafx.controls/src/ios/resources/com/sun/javafx/scene/control/skin/caspian/ios.css b/modules/javafx.controls/src/ios/resources/com/sun/javafx/scene/control/skin/caspian/ios.css
--- a/modules/javafx.controls/src/ios/resources/com/sun/javafx/scene/control/skin/caspian/ios.css
+++ b/modules/javafx.controls/src/ios/resources/com/sun/javafx/scene/control/skin/caspian/ios.css
@@ -49,5 +49,10 @@
 
 .text-area {
     -fx-skin: "javafx.scene.control.skin.TextAreaSkinIos";
 }
 
+.selection-handle {
+    -fx-shape: "M100,100m-75,0a75,75,0,1,0,150,0a75,75,0,1,0,-150,0";
+    -fx-pref-width: 12;
+    -fx-pref-height: 12;
+}
diff a/modules/javafx.controls/src/ios/resources/com/sun/javafx/scene/control/skin/modena/ios.css b/modules/javafx.controls/src/ios/resources/com/sun/javafx/scene/control/skin/modena/ios.css
--- a/modules/javafx.controls/src/ios/resources/com/sun/javafx/scene/control/skin/modena/ios.css
+++ b/modules/javafx.controls/src/ios/resources/com/sun/javafx/scene/control/skin/modena/ios.css
@@ -49,5 +49,10 @@
 
 .text-area {
     -fx-skin: "javafx.scene.control.skin.TextAreaSkinIos";
 }
 
+.selection-handle {
+    -fx-shape: "M100,100m-75,0a75,75,0,1,0,150,0a75,75,0,1,0,-150,0";
+    -fx-pref-width: 12;
+    -fx-pref-height: 12;
+}
diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TextInputControlBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TextInputControlBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TextInputControlBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/TextInputControlBehavior.java
@@ -75,14 +75,13 @@
  *
  */
 public abstract class TextInputControlBehavior<T extends TextInputControl> extends BehaviorBase<T> {
 
     /**
-     * Specifies whether we ought to show handles. We should do it on touch platforms, but not
-     * iOS (and maybe not Android either?)
+     * Specifies whether we ought to show handles. We should do it on touch platforms
      */
-    static final boolean SHOW_HANDLES = Properties.IS_TOUCH_SUPPORTED && !PlatformUtil.isIOS();
+    static final boolean SHOW_HANDLES = Properties.IS_TOUCH_SUPPORTED;
 
     public static final String DISABLE_FORWARD_TO_PARENT = "TextInputControlBehavior.disableForwardToParent";
 
     /**************************************************************************
      * Fields                                                                 *
diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TextInputControlSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TextInputControlSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TextInputControlSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/TextInputControlSkin.java
@@ -127,14 +127,13 @@
             return null;
         });
     }
 
     /**
-     * Specifies whether we ought to show handles. We should do it on touch platforms, but not
-     * iOS (and maybe not Android either?)
+     * Specifies whether we ought to show handles. We should do it on touch platforms
      */
-    static final boolean SHOW_HANDLES = Properties.IS_TOUCH_SUPPORTED && !PlatformUtil.isIOS();
+    static final boolean SHOW_HANDLES = Properties.IS_TOUCH_SUPPORTED;
 
     private final static boolean IS_FXVK_SUPPORTED = Platform.isSupported(ConditionalFeature.VIRTUAL_KEYBOARD);
 
     /**************************************************************************
      *
@@ -217,21 +216,29 @@
 
             caretHandle.setManaged(false);
             selectionHandle1.setManaged(false);
             selectionHandle2.setManaged(false);
 
-            caretHandle.visibleProperty().bind(new BooleanBinding() {
-                { bind(control.focusedProperty(), control.anchorProperty(),
-                        control.caretPositionProperty(), control.disabledProperty(),
-                        control.editableProperty(), control.lengthProperty(), displayCaret);}
-                @Override protected boolean computeValue() {
-                    return (displayCaret.get() && control.isFocused() &&
-                            control.getCaretPosition() == control.getAnchor() &&
-                            !control.isDisabled() && control.isEditable() &&
-                            control.getLength() > 0);
-                }
-            });
+            if (PlatformUtil.isIOS()) {
+                caretHandle.setVisible(false);
+            } else {
+                caretHandle.visibleProperty().bind(new BooleanBinding() {
+                    {
+                        bind(control.focusedProperty(), control.anchorProperty(),
+                                control.caretPositionProperty(), control.disabledProperty(),
+                                control.editableProperty(), control.lengthProperty(), displayCaret);
+                    }
+
+                    @Override
+                    protected boolean computeValue() {
+                        return (displayCaret.get() && control.isFocused() &&
+                                control.getCaretPosition() == control.getAnchor() &&
+                                !control.isDisabled() && control.isEditable() &&
+                                control.getLength() > 0);
+                    }
+                });
+            }
 
 
             selectionHandle1.visibleProperty().bind(new BooleanBinding() {
                 { bind(control.focusedProperty(), control.anchorProperty(), control.caretPositionProperty(),
                         control.disabledProperty(), displayCaret);}
