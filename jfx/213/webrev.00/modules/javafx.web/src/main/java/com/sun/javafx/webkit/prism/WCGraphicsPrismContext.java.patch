diff a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java
--- a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java
+++ b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/prism/WCGraphicsPrismContext.java
@@ -440,10 +440,15 @@
     public void setClip(WCRectangle c) {
         setClip(new Rectangle((int)c.getX(), (int)c.getY(),
                               (int)c.getWidth(), (int)c.getHeight()));
     }
 
+    public void setClip(int cx, int cy, int cw, int ch, WCImage maskImage) {
+        setClip(new Rectangle(cx, cy, cw, ch));
+        state.setClipMaskImage(maskImage);
+    }
+
     public WCRectangle getClip() {
         Rectangle r = state.getClipNoClone();
         return r == null ? null : new WCRectangle(r.x, r.y, r.width, r.height);
     }
 
@@ -521,10 +526,56 @@
                 // projection.
                 if (shadow != null || !state.getPerspectiveTransformNoClone().isIdentity()) {
                     final NGRectangle node = new NGRectangle();
                     node.updateRectangle(x, y, w, h, 0, 0);
                     render(g, shadow, paint, null, node);
+                } else if(state.getClipMaskImageNoClone() != null) {
+                    Rectangle rect = new Rectangle((int) x, (int) y, (int) w, (int) h);
+                    Rectangle transformedRect = new Rectangle();
+                    state.getTransformNoClone().transform(rect, transformedRect);
+                    RTTexture paintRtTexture = g.getResourceFactory().createRTTexture(
+                            (int) Math.ceil(transformedRect.width),
+                            (int) Math.ceil(transformedRect.height),
+                            Texture.WrapMode.CLAMP_NOT_NEEDED);
+                    Graphics g1 = paintRtTexture.createGraphics();
+                    g1.setPaint(paint);
+                    g1.setTransform(PrismGraphicsManager.getPixelScaleTransform());
+                    g1.fillRect(0, 0, paintRtTexture.getContentWidth(), paintRtTexture.getContentHeight());
+
+                    RTImage maskImage = (RTImage) (state.getClipMaskImageNoClone());
+                    Image nativeMaskImage = Image.fromByteBgraPreData(maskImage.getPixelBuffer(), maskImage.getWidth(),
+                            maskImage.getHeight(), 0, maskImage.getPixelScale());
+                    Texture maskTexture = g.getResourceFactory().createTexture(nativeMaskImage, Texture.Usage.STATIC,
+                            Texture.WrapMode.CLAMP_NOT_NEEDED);
+                    RTTexture maskRtTexture = g.getResourceFactory().createRTTexture(nativeMaskImage.getWidth(),
+                            nativeMaskImage.getHeight(), Texture.WrapMode.CLAMP_NOT_NEEDED);
+                    Graphics g2 = maskRtTexture.createGraphics();
+                    g2.setTransform(PrismGraphicsManager.getPixelScaleTransform());
+                    g2.drawTexture(maskTexture, 0, 0, nativeMaskImage.getWidth(), nativeMaskImage.getHeight());
+                    if(g instanceof MaskTextureGraphics) {
+                        MaskTextureGraphics mg = (MaskTextureGraphics) (g);
+                        mg.drawPixelsMasked(paintRtTexture, maskRtTexture, transformedRect.x, transformedRect.y,
+                                transformedRect.width, transformedRect.height, 0, 0, 0, 0);
+                    } else {
+                        Screen screen = g.getAssociatedScreen();
+                        FilterContext filterContext;
+                        if (screen == null) {
+                            ResourceFactory factory = g.getResourceFactory();
+                            filterContext = PrFilterContext.getPrinterContext(factory);
+                        } else {
+                            filterContext = PrFilterContext.getInstance(screen);
+                        }
+                        PrDrawable imagePrDrawable = PrDrawable.create(filterContext, paintRtTexture);
+                        PrDrawable maskPrDrawable = PrDrawable.create(filterContext, maskRtTexture);
+                        Blend blend = new Blend(Blend.Mode.SRC_IN,
+                                new PassThrough(maskPrDrawable, transformedRect.width, transformedRect.height),
+                                new PassThrough(imagePrDrawable, transformedRect.width, transformedRect.height));
+                        Affine3D tx = new Affine3D(g.getTransformNoClone());
+                        g.setTransform(BaseTransform.IDENTITY_TRANSFORM);
+                        PrEffectHelper.render(blend, g, transformedRect.x, transformedRect.y, null);
+                        g.setTransform(tx);
+                    }
                 } else {
                     g.setPaint(paint);
                     g.fillRect(x, y, w, h);
                 }
             }
@@ -1185,10 +1236,11 @@
         private DropShadow shadow;
         private Affine3D xform;
         private GeneralTransform3D perspectiveTransform;
         private Layer layer;
         private int compositeOperation;
+        private WCImage clipMaskImage;
 
         private ContextState() {
             clip = null;
             paint = Color.BLACK;
             stroke.setPaint(Color.BLACK);
@@ -1210,10 +1262,11 @@
             setShadow(state.getShadowNoClone());
             setLayer(state.getLayerNoClone());
             setAlpha(state.getAlpha());
             setTextMode(state.isTextFill(), state.isTextStroke(), state.isTextClip());
             setCompositeOperation(state.getCompositeOperation());
+            setClipMaskImage(state.getClipMaskImageNoClone());
         }
 
         @Override
         protected ContextState clone() {
             return new ContextState(this);
@@ -1244,10 +1297,18 @@
 
         private void setPaint(Paint paint) {
             this.paint = paint;
         }
 
+        private void setClipMaskImage(WCImage image) {
+            this.clipMaskImage = image;
+        }
+
+        private WCImage getClipMaskImageNoClone() {
+            return clipMaskImage;
+        }
+
         private Rectangle getClipNoClone() {
             return clip;
         }
 
         private Layer getLayerNoClone() {
