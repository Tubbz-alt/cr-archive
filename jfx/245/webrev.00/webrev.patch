diff a/build.gradle b/build.gradle
--- a/build.gradle
+++ b/build.gradle
@@ -3428,10 +3428,13 @@
                 }
 
                 exec {
                     workingDir("$webkitOutputDir")
                     def cmakeArgs = "-DENABLE_TOOLS=1"
+                    if (IS_STATIC_BUILD) {
+                        cmakeArgs = " $cmakeArgs -DSTATIC_BUILD=1 -DUSE_THIN_ARCHIVES=OFF";
+                    }
                     cmakeArgs = " $cmakeArgs -DCMAKE_C_COMPILER='${webkitProperties.compiler}'"
                     if (t.name == "win") {
                         // To enable ninja build on Windows
                         environment(WINDOWS_NATIVE_COMPILE_ENVIRONMENT)
                     } else if (t.name == "mac") {
@@ -3444,10 +3447,13 @@
                             cmakeArgs = "$cmakeArgs -DCMAKE_SYSTEM_PROCESSOR=i586"
                         }
                         // TODO: Use cflags and ldflags from all platforms
                         def cFlags = webkitProperties.ccFlags?.join(' ') ?: ''
                         def lFlags = webkitProperties.linkFlags?.join(' ') ?: ''
+                        if (IS_STATIC_BUILD) {
+                            cFlags = " $cFlags -DSTATIC_BUILD=1";
+                        }
                         // -shared flag should be omitted while creating executable.
                         def exeFlags = webkitProperties.linkFlags?.join(' ')?.replace('-shared', '') ?: ''
                         cmakeArgs = "$cmakeArgs -DCMAKE_C_FLAGS='${cFlags}' -DCMAKE_CXX_FLAGS='${cFlags}'"
                         cmakeArgs = "$cmakeArgs -DCMAKE_SHARED_LINKER_FLAGS='${lFlags}' -DCMAKE_EXE_LINKER_FLAGS='${exeFlags}'"
                     } else if (t.name.startsWith("arm")) {
diff a/modules/javafx.web/src/main/native/CMakeLists.txt b/modules/javafx.web/src/main/native/CMakeLists.txt
--- a/modules/javafx.web/src/main/native/CMakeLists.txt
+++ b/modules/javafx.web/src/main/native/CMakeLists.txt
@@ -144,12 +144,17 @@
 set(bmalloc_LIBRARY_TYPE STATIC)
 set(WTF_LIBRARY_TYPE STATIC)
 set(JavaScriptCore_LIBRARY_TYPE STATIC)
 set(PAL_LIBRARY_TYPE STATIC)
 set(WebCore_LIBRARY_TYPE STATIC)
-set(WebKitLegacy_LIBRARY_TYPE SHARED)
-set(WebKit_LIBRARY_TYPE SHARED)
+if (DEFINED STATIC_BUILD)
+    set(WebKitLegacy_LIBRARY_TYPE STATIC)
+    set(WebKit_LIBRARY_TYPE STATIC)
+else ()
+    set(WebKitLegacy_LIBRARY_TYPE SHARED)
+    set(WebKit_LIBRARY_TYPE SHARED)
+endif ()
 set(WebCoreTestSupport_LIBRARY_TYPE STATIC)
 
 set(CMAKE_POSITION_INDEPENDENT_CODE True)
 
 # -----------------------------------------------------------------------------
diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/java/JavaEnv.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/java/JavaEnv.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/java/JavaEnv.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/java/JavaEnv.cpp
@@ -109,11 +109,15 @@
 extern "C" {
 
 #if PLATFORM(JAVA_WIN) && !defined(NDEBUG)
 #include <crtdbg.h>
 #endif
+#ifdef STATIC_BUILD
+JNIEXPORT jint JNICALL JNI_OnLoad_jfxwebkit(JavaVM* vm, void*)
+#else
 JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void*)
+#endif
 {
 #if PLATFORM(JAVA_WIN) && !defined(NDEBUG)
     _CrtSetReportMode( _CRT_ERROR, _CRTDBG_MODE_FILE );
     _CrtSetReportFile( _CRT_ERROR, _CRTDBG_FILE_STDERR );
 
diff a/modules/javafx.web/src/main/native/Tools/CMakeLists.txt b/modules/javafx.web/src/main/native/Tools/CMakeLists.txt
--- a/modules/javafx.web/src/main/native/Tools/CMakeLists.txt
+++ b/modules/javafx.web/src/main/native/Tools/CMakeLists.txt
@@ -6,7 +6,9 @@
 if (ENABLE_API_TESTS)
     add_subdirectory(TestWebKitAPI)
 endif ()
 
 if (PORT STREQUAL "Java")
-    add_subdirectory(DumpRenderTree/java)
+    if (NOT DEFINED STATIC_BUILD)
+        add_subdirectory(DumpRenderTree/java)
+    endif ()
 endif ()
