diff a/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextAreaSkinAndroid.java b/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextAreaSkinAndroid.java
--- a/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextAreaSkinAndroid.java
+++ b/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextAreaSkinAndroid.java
@@ -23,33 +23,64 @@
  * questions.
  */
 
 package javafx.scene.control.skin;
 
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.WeakChangeListener;
+import javafx.event.EventHandler;
 import javafx.scene.control.TextArea;
 import javafx.scene.input.MouseEvent;
 
 public class TextAreaSkinAndroid extends TextAreaSkin {
 
-    public TextAreaSkinAndroid(final TextArea textArea) {
-        super(textArea);
+    /**************************************************************************
+     *
+     * Private fields
+     *
+     **************************************************************************/
+
+    private final EventHandler<MouseEvent> mouseEventListener = e -> {
+        if (getSkinnable().isEditable() && getSkinnable().isFocused()) {
+            showSoftwareKeyboard();
+        }
+    };
 
-        textArea.addEventHandler(MouseEvent.MOUSE_CLICKED, e -> {
-            if (textArea.isEditable() && textArea.isFocused()) {
+    private final ChangeListener<Boolean> focusChangeListener = (observable, wasFocused, isFocused) -> {
+        if (getSkinnable().isEditable()) {
+            if (isFocused) {
                 showSoftwareKeyboard();
+            } else {
+                hideSoftwareKeyboard();
             }
-        });
-
-        textArea.focusedProperty().addListener((observable, wasFocused, isFocused) -> {
-            if (textArea.isEditable()) {
-                if (isFocused) {
-                    showSoftwareKeyboard();
-                } else {
-                    hideSoftwareKeyboard();
-                }
-            }
-        });
+        }
+    };
+    private final WeakChangeListener<Boolean> weakFocusChangeListener = new WeakChangeListener<>(focusChangeListener);
+
+    /**************************************************************************
+     *
+     * Constructors
+     *
+     **************************************************************************/
+
+    public TextAreaSkinAndroid(final TextArea textArea) {
+        super(textArea);
+        textArea.addEventHandler(MouseEvent.MOUSE_CLICKED, mouseEventListener);
+        textArea.focusedProperty().addListener(weakFocusChangeListener);
+    }
+
+    /***************************************************************************
+     *                                                                         *
+     * Public API                                                              *
+     *                                                                         *
+     **************************************************************************/
+
+    /** {@inheritDoc} */
+    @Override public void dispose() {
+        getSkinnable().removeEventHandler(MouseEvent.MOUSE_CLICKED, mouseEventListener);
+        getSkinnable().focusedProperty().removeListener(weakFocusChangeListener);
+        super.dispose();
     }
 
     native void showSoftwareKeyboard();
     native void hideSoftwareKeyboard();
 
diff a/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextFieldSkinAndroid.java b/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextFieldSkinAndroid.java
--- a/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextFieldSkinAndroid.java
+++ b/modules/javafx.controls/src/android/java/javafx/scene/control/skin/TextFieldSkinAndroid.java
@@ -23,33 +23,65 @@
  * questions.
  */
 
 package javafx.scene.control.skin;
 
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.WeakChangeListener;
+import javafx.event.EventHandler;
 import javafx.scene.control.TextField;
 import javafx.scene.input.MouseEvent;
 
 public class TextFieldSkinAndroid extends TextFieldSkin {
 
-    public TextFieldSkinAndroid(final TextField textField) {
-        super(textField);
+    /**************************************************************************
+     *
+     * Private fields
+     *
+     **************************************************************************/
+
+    private final EventHandler<MouseEvent> mouseEventListener = e -> {
+        if (getSkinnable().isEditable() && getSkinnable().isFocused()) {
+            showSoftwareKeyboard();
+        }
+    };
 
-        textField.addEventHandler(MouseEvent.MOUSE_CLICKED, e -> {
-            if (textField.isEditable() && textField.isFocused()) {
+    private final ChangeListener<Boolean> focusChangeListener = (observable, wasFocused, isFocused) -> {
+        if (getSkinnable().isEditable()) {
+            if (isFocused) {
                 showSoftwareKeyboard();
+            } else {
+                hideSoftwareKeyboard();
             }
-        });
-
-        textField.focusedProperty().addListener((observable, wasFocused, isFocused) -> {
-            if (textField.isEditable()) {
-                if (isFocused) {
-                    showSoftwareKeyboard();
-                } else {
-                    hideSoftwareKeyboard();
-                }
-            }
-        });
+        }
+    };
+    private final WeakChangeListener<Boolean> weakFocusChangeListener = new WeakChangeListener<>(focusChangeListener);
+
+    /**************************************************************************
+     *
+     * Constructors
+     *
+     **************************************************************************/
+
+    public TextFieldSkinAndroid(final TextField textField) {
+        super(textField);
+
+        textField.addEventHandler(MouseEvent.MOUSE_CLICKED, mouseEventListener);
+        textField.focusedProperty().addListener(weakFocusChangeListener);
+    }
+
+    /***************************************************************************
+     *                                                                         *
+     * Public API                                                              *
+     *                                                                         *
+     **************************************************************************/
+
+    /** {@inheritDoc} */
+    @Override public void dispose() {
+        getSkinnable().addEventHandler(MouseEvent.MOUSE_CLICKED, mouseEventListener);
+        getSkinnable().focusedProperty().removeListener(weakFocusChangeListener);
+        super.dispose();
     }
 
     native void showSoftwareKeyboard();
     native void hideSoftwareKeyboard();
 
