diff a/modules/javafx.graphics/src/main/java/com/sun/prism/sw/SWPaint.java b/modules/javafx.graphics/src/main/java/com/sun/prism/sw/SWPaint.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/sw/SWPaint.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/sw/SWPaint.java
@@ -284,10 +284,11 @@
             System.out.println("imagePattern: x: " + ip.getX() + ", y: " + ip.getY() +
                     ", w: " + ip.getWidth() + ", h: " + ip.getHeight() + ", proportional: " + ip.isProportional());
         }
 
         paintTx.setTransform(tx);
+        paintTx.deriveWithConcatenation(ip.getPatternTransformNoClone());
         if (ip.isProportional()) {
             paintTx.deriveWithConcatenation(width / image.getWidth() * ip.getWidth(), 0,
                     0, height / image.getHeight() * ip.getHeight(),
                     x + width * ip.getX(), y + height * ip.getY());
         } else {
diff a/modules/javafx.web/src/test/java/test/javafx/scene/web/CanvasTest.java b/modules/javafx.web/src/test/java/test/javafx/scene/web/CanvasTest.java
--- a/modules/javafx.web/src/test/java/test/javafx/scene/web/CanvasTest.java
+++ b/modules/javafx.web/src/test/java/test/javafx/scene/web/CanvasTest.java
@@ -123,10 +123,42 @@
             assertEquals("Arc endAngle", redColor,
                     (int) getEngine().executeScript("document.getElementById('canvas').getContext('2d').getImageData(300,75,1,1).data[0]"));
         });
     }
 
+    // JDK-8234471
+    @Test public void testCanvasPattern() throws Exception {
+        final String htmlCanvasContent = "\n"
+            + "<canvas id='canvaspattern' width='100' height='100'></canvas>\n"
+            + "<svg id='svgpattern'></svg>\n"
+            + "<script>\n"
+            + "var patternCanvas = document.createElement('canvas');\n"
+            + "var patternCtx = patternCanvas.getContext('2d');\n"
+            + "patternCanvas.width = patternCanvas.height = 30;\n"
+            + "patternCtx.fillStyle = 'red';\n"
+            + "patternCtx.fillRect(0, 0, 20, 20);\n"
+            + "\n"
+            + "var ctx = document.getElementById('canvaspattern').getContext('2d');\n"
+            + "var pattern = ctx.createPattern(patternCanvas, 'repeat');\n"
+            + "var matrix = document.getElementById('svgpattern').createSVGMatrix();\n"
+            + "pattern.setTransform(matrix.translate(10, 10));\n"
+            + "ctx.fillStyle = pattern;\n"
+            + "ctx.fillRect(0, 0, 100, 100);\n"
+            + "</script>\n";
+
+        loadContent(htmlCanvasContent);
+        submit(() -> {
+            int redColor = 255;
+            assertEquals("Pattern top-left corner", 0, (int) getEngine().executeScript(
+                "document.getElementById('canvaspattern').getContext('2d').getImageData(1, 1, 1, 1).data[0]"));
+            assertEquals("First rect top-left", redColor, (int) getEngine().executeScript(
+                "document.getElementById('canvaspattern').getContext('2d').getImageData(11, 11, 1, 1).data[0]"));
+            assertEquals("First rect center", redColor, (int) getEngine().executeScript(
+                "document.getElementById('canvaspattern').getContext('2d').getImageData(21, 21, 1, 1).data[0]"));
+        });
+    }
+
     private BufferedImage htmlCanvasToBufferedImage(final String mime) throws Exception {
         ByteArrayOutputStream errStream = new ByteArrayOutputStream();
         System.setErr(new PrintStream(errStream));
 
         final String html = String.format(""
diff a/tests/system/src/test/java/test/javafx/scene/web/CanvasTest.java b/tests/system/src/test/java/test/javafx/scene/web/CanvasTest.java
--- a/tests/system/src/test/java/test/javafx/scene/web/CanvasTest.java
+++ b/tests/system/src/test/java/test/javafx/scene/web/CanvasTest.java
@@ -131,64 +131,6 @@
                 "document.getElementById('canvas').getContext('2d').getImageData(1, 1, 1, 1).data[0]"));
             assertEquals("Rect bottom-right corner", redColor, (int) webView.getEngine().executeScript(
                 "document.getElementById('canvas').getContext('2d').getImageData(99, 99, 1, 1).data[0]"));
         });
     }
-
-    /**
-     * @test
-     * @bug 8242861
-     * Summary Check if canvas applies transforms on patterns
-     */
-    @Test
-    public void testCanvasPattern() throws Exception {
-        final CountDownLatch webViewStateLatch = new CountDownLatch(1);
-        final String htmlCanvasContent = "\n"
-            + "<canvas id='canvaspattern' width='100' height='100'></canvas>\n"
-            + "<svg id='svgpattern'></svg>\n"
-            + "<script>\n"
-            + "var patternCanvas = document.createElement('canvas');\n"
-            + "var patternCtx = patternCanvas.getContext('2d');\n"
-            + "patternCanvas.width = patternCanvas.height = 30;\n"
-            + "patternCtx.fillStyle = 'red';\n"
-            + "patternCtx.fillRect(0, 0, 20, 20);\n"
-            + "\n"
-            + "var ctx = document.getElementById('canvaspattern').getContext('2d');\n"
-            + "var pattern = ctx.createPattern(patternCanvas, 'repeat');\n"
-            + "var matrix = document.getElementById('svgpattern').createSVGMatrix();\n"
-            + "pattern.setTransform(matrix.translate(10, 10));\n"
-            + "ctx.fillStyle = pattern;\n"
-            + "ctx.fillRect(0, 0, 100, 100);\n"
-            + "</script>\n";
-
-        Util.runAndWait(() -> {
-            webView.getEngine().getLoadWorker().stateProperty().
-                addListener((observable, oldValue, newValue) -> {
-                if (newValue == SUCCEEDED) {
-                    webView.requestFocus();
-                }
-            });
-
-            assertNotNull(webView);
-            webView.getEngine().loadContent(htmlCanvasContent);
-
-            webView.focusedProperty().
-                addListener((observable, oldValue, newValue) -> {
-                if (newValue) {
-                    webViewStateLatch.countDown();
-                }
-            });
-        });
-
-        assertTrue("Timeout when waiting for focus change ", Util.await(webViewStateLatch));
-
-        Util.runAndWait(() -> {
-            int redColor = 255;
-            assertEquals("Pattern top-left corner", 0, (int) webView.getEngine().executeScript(
-                "document.getElementById('canvaspattern').getContext('2d').getImageData(1, 1, 1, 1).data[0]"));
-            assertEquals("First rect top-left", redColor, (int) webView.getEngine().executeScript(
-                "document.getElementById('canvaspattern').getContext('2d').getImageData(11, 11, 1, 1).data[0]"));
-            assertEquals("First rect center", redColor, (int) webView.getEngine().executeScript(
-                "document.getElementById('canvaspattern').getContext('2d').getImageData(21, 21, 1, 1).data[0]"));
-        });
-    }
 }
