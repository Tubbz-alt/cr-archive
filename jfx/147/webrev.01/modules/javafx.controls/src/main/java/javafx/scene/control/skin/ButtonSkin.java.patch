diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,10 +26,12 @@
 package javafx.scene.control.skin;
 
 import com.sun.javafx.scene.NodeHelper;
 import com.sun.javafx.scene.control.behavior.BehaviorBase;
 import com.sun.javafx.scene.control.skin.Utils;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.WeakChangeListener;
 import javafx.scene.Scene;
 import javafx.scene.control.Button;
 import javafx.scene.control.ContextMenu;
 import com.sun.javafx.scene.control.behavior.ButtonBehavior;
 import javafx.scene.control.Control;
@@ -76,10 +78,29 @@
                 && !getSkinnable().isDisabled()) {
             getSkinnable().fire();
         }
     };
 
+    ChangeListener<Scene> sceneChangeListener = (ov, oldScene, newScene) -> {
+        if (oldScene != null) {
+            if (getSkinnable().isDefaultButton()) {
+                setDefaultButton(oldScene, false);
+            }
+            if (getSkinnable().isCancelButton()) {
+                setCancelButton(oldScene, false);
+            }
+        }
+        if (newScene != null) {
+            if (getSkinnable().isDefaultButton()) {
+                setDefaultButton(newScene, true);
+            }
+            if (getSkinnable().isCancelButton()) {
+                setCancelButton(newScene, true);
+            }
+        }
+    };
+    WeakChangeListener<Scene> weakChangeListener = new WeakChangeListener<>(sceneChangeListener);
 
 
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
@@ -122,28 +143,11 @@
                 if (getSkinnable().isCancelButton()) {
                     getSkinnable().getScene().getAccelerators().remove(cancelAcceleratorKeyCodeCombination);
                 }
             }
         });
-        control.sceneProperty().addListener((ov, oldScene, newScene) -> {
-            if (oldScene != null) {
-                if (getSkinnable().isDefaultButton()) {
-                    setDefaultButton(oldScene, false);
-                }
-                if (getSkinnable().isCancelButton()) {
-                    setCancelButton(oldScene, false);
-                }
-            }
-            if (newScene != null) {
-                if (getSkinnable().isDefaultButton()) {
-                    setDefaultButton(newScene, true);
-                }
-                if (getSkinnable().isCancelButton()) {
-                    setCancelButton(newScene, true);
-                }
-            }
-        });
+        control.sceneProperty().addListener(weakChangeListener);
 
         // set visuals
         if (getSkinnable().isDefaultButton()) {
             /*
             ** were we already the defaultButton, before the listener was added?
@@ -169,10 +173,11 @@
      *                                                                         *
      **************************************************************************/
 
     /** {@inheritDoc} */
     @Override public void dispose() {
+        getSkinnable().sceneProperty().removeListener(weakChangeListener);
         super.dispose();
 
         if (behavior != null) {
             behavior.dispose();
         }
