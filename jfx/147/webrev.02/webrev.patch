diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -26,10 +26,12 @@
 package javafx.scene.control.skin;
 
 import com.sun.javafx.scene.NodeHelper;
 import com.sun.javafx.scene.control.behavior.BehaviorBase;
 import com.sun.javafx.scene.control.skin.Utils;
+import javafx.beans.value.ChangeListener;
+import javafx.beans.value.WeakChangeListener;
 import javafx.scene.Scene;
 import javafx.scene.control.Button;
 import javafx.scene.control.ContextMenu;
 import com.sun.javafx.scene.control.behavior.ButtonBehavior;
 import javafx.scene.control.Control;
@@ -76,10 +78,29 @@
                 && !getSkinnable().isDisabled()) {
             getSkinnable().fire();
         }
     };
 
+    ChangeListener<Scene> sceneChangeListener = (ov, oldScene, newScene) -> {
+        if (oldScene != null) {
+            if (getSkinnable().isDefaultButton()) {
+                setDefaultButton(oldScene, false);
+            }
+            if (getSkinnable().isCancelButton()) {
+                setCancelButton(oldScene, false);
+            }
+        }
+        if (newScene != null) {
+            if (getSkinnable().isDefaultButton()) {
+                setDefaultButton(newScene, true);
+            }
+            if (getSkinnable().isCancelButton()) {
+                setCancelButton(newScene, true);
+            }
+        }
+    };
+    WeakChangeListener<Scene> weakSceneChangeListener = new WeakChangeListener<>(sceneChangeListener);
 
 
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
@@ -122,28 +143,11 @@
                 if (getSkinnable().isCancelButton()) {
                     getSkinnable().getScene().getAccelerators().remove(cancelAcceleratorKeyCodeCombination);
                 }
             }
         });
-        control.sceneProperty().addListener((ov, oldScene, newScene) -> {
-            if (oldScene != null) {
-                if (getSkinnable().isDefaultButton()) {
-                    setDefaultButton(oldScene, false);
-                }
-                if (getSkinnable().isCancelButton()) {
-                    setCancelButton(oldScene, false);
-                }
-            }
-            if (newScene != null) {
-                if (getSkinnable().isDefaultButton()) {
-                    setDefaultButton(newScene, true);
-                }
-                if (getSkinnable().isCancelButton()) {
-                    setCancelButton(newScene, true);
-                }
-            }
-        });
+        control.sceneProperty().addListener(weakSceneChangeListener);
 
         // set visuals
         if (getSkinnable().isDefaultButton()) {
             /*
             ** were we already the defaultButton, before the listener was added?
@@ -169,10 +173,11 @@
      *                                                                         *
      **************************************************************************/
 
     /** {@inheritDoc} */
     @Override public void dispose() {
+        getSkinnable().sceneProperty().removeListener(weakSceneChangeListener);
         super.dispose();
 
         if (behavior != null) {
             behavior.dispose();
         }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -24,10 +24,13 @@
  */
 
 package test.javafx.scene.control.skin;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.fail;
 
 import javafx.beans.value.ObservableValue;
 import javafx.geometry.Insets;
 import javafx.scene.control.Button;
 
@@ -42,12 +45,15 @@
 import javafx.scene.Node;
 import javafx.scene.control.skin.ButtonSkin;
 import javafx.scene.shape.Rectangle;
 
 import org.junit.Before;
+import org.junit.After;
 import org.junit.Test;
 
+import java.lang.ref.WeakReference;
+
 /**
  */
 public class ButtonSkinTest {
     private Button button;
     private ButtonSkinMock skin;
@@ -57,11 +63,21 @@
         skin = new ButtonSkinMock(button);
         // Set some padding so that any places where padding was being
         // computed but wasn't expected will be caught.
         button.setPadding(new Insets(10, 10, 10, 10));
         button.setSkin(skin);
+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {
+            if (throwable instanceof RuntimeException) {
+                throw (RuntimeException)throwable;
+            } else {
+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);
+            }
+        });
+    }
 
+    @After public void cleanup() {
+        Thread.currentThread().setUncaughtExceptionHandler(null);
     }
 
     @Test public void maxWidthTracksPreferred() {
         button.setPrefWidth(500);
         assertEquals(500, button.maxWidth(-1), 0);
@@ -150,10 +166,112 @@
 
             assertEquals(1, countMnemonicNodes(scene, mnemonicKeyCombo, button));
         }
     }
 
+    class ButtonSkin1 extends ButtonSkin {
+        ButtonSkin1(Button btn) {
+            super(btn);
+        }
+    }
+
+    class ButtonSkin2 extends ButtonSkin {
+        ButtonSkin2(Button btn) {
+            super(btn);
+        }
+    }
+
+    @Test
+    public void testOldSkinShouldGC() {
+        Button button = new Button();
+        Group root = new Group(button);
+        Scene scene = new Scene(root);
+        Stage stage = new Stage();
+        stage.setScene(scene);
+        stage.show();
+
+        WeakReference<ButtonSkin> defSkinRef = new WeakReference<>((ButtonSkin)button.getSkin());
+        ButtonSkin skin = new ButtonSkin1(button);
+        WeakReference<ButtonSkin> oldSkinRef = new WeakReference<>(skin);
+        button.setSkin(skin);
+        skin = new ButtonSkin2(button);
+        WeakReference<ButtonSkin> currSkinRef = new WeakReference<>(skin);
+        button.setSkin(skin);
+        skin = null;
+
+        attemptGC(oldSkinRef);
+        assertNull("Old ButtonSkin should be GCed.", oldSkinRef.get());
+        assertNull("Default ButtonSkin should be GCed.", defSkinRef.get());
+        assertNotNull("Current ButtonSkin should NOT be GCed.", currSkinRef.get());
+    }
+
+    @Test
+    public void testUnusedSkinShouldGC() {
+        Button button = new Button();
+        Group root = new Group(button);
+        Scene scene = new Scene(root);
+        Stage stage = new Stage();
+        stage.setScene(scene);
+        stage.show();
+
+        WeakReference<ButtonSkin> defSkinRef = new WeakReference<>((ButtonSkin)button.getSkin());
+        ButtonSkin skin = new ButtonSkin1(button);
+        WeakReference<ButtonSkin> skinRef1 = new WeakReference<>(skin);
+        skin = new ButtonSkin2(button);
+        WeakReference<ButtonSkin> skinRef2 = new WeakReference<>(skin);
+        skin = null;
+
+        attemptGC(skinRef1);
+        assertNull("Unused ButtonSkin should be GCed.", skinRef1.get());
+        assertNull("Unused ButtonSkin should be GCed.", skinRef2.get());
+        assertNotNull("Default ButtonSkin should NOT be GCed.", defSkinRef.get());
+    }
+
+    @Test
+    public void testButtonAndSkinShouldGC() {
+        Button button = new Button();
+        ButtonSkin skin = new ButtonSkin1(button);
+        WeakReference<Button> buttonRef = new WeakReference<>(button);
+        WeakReference<ButtonSkin> skinRef = new WeakReference<>(skin);
+        button.setSkin(skin);
+        button = null;
+        skin = null;
+
+        attemptGC(skinRef);
+        assertNull("Button should be GCed.", buttonRef.get());
+        assertNull("ButtonSkin should be GCed.", skinRef.get());
+    }
+
+    @Test
+    public void testNPEOnSwitchSkinAndRemoveButton() {
+        Button button = new Button();
+        Group root = new Group(button);
+        Scene scene = new Scene(root);
+        Stage stage = new Stage();
+        stage.setScene(scene);
+        stage.show();
+
+        button.setSkin(new ButtonSkin1(button));
+        root.getChildren().remove(button);
+    }
+
+    private void attemptGC(WeakReference<ButtonSkin> weakRef) {
+        for (int i = 0; i < 10; i++) {
+            System.gc();
+            System.runFinalization();
+
+            if (weakRef.get() == null) {
+                break;
+            }
+            try {
+                Thread.sleep(50);
+            } catch (InterruptedException e) {
+                fail("InterruptedException occurred during Thread.sleep()");
+            }
+        }
+    }
+
     public static final class ButtonSkinMock extends ButtonSkin {
         boolean propertyChanged = false;
         int propertyChangeCount = 0;
         public ButtonSkinMock(Button button) {
             super(button);
