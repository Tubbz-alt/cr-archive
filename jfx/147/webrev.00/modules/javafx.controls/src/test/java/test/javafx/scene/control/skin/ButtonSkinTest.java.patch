diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -24,10 +24,12 @@
  */
 
 package test.javafx.scene.control.skin;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.fail;
 
 import javafx.beans.value.ObservableValue;
 import javafx.geometry.Insets;
 import javafx.scene.control.Button;
 
@@ -44,10 +46,12 @@
 import javafx.scene.shape.Rectangle;
 
 import org.junit.Before;
 import org.junit.Test;
 
+import java.lang.ref.WeakReference;
+
 /**
  */
 public class ButtonSkinTest {
     private Button button;
     private ButtonSkinMock skin;
@@ -150,10 +154,50 @@
 
             assertEquals(1, countMnemonicNodes(scene, mnemonicKeyCombo, button));
         }
     }
 
+    class ButtonSkin1 extends ButtonSkin {
+        ButtonSkin1(Button btn) {
+            super(btn);
+        }
+    }
+
+    class ButtonSkin2 extends ButtonSkin {
+        ButtonSkin2(Button btn) {
+            super(btn);
+        }
+    }
+
+    @Test
+    public void testSkinLeakOnSwitch() {
+        Button button = new Button();
+        ButtonSkin skin = new ButtonSkin1(button);
+        WeakReference<ButtonSkin> skinRef = new WeakReference<>(skin);
+        button.setSkin(skin);
+        skin = null;
+        button.setSkin(new ButtonSkin2(button));
+        attemptGC(skinRef);
+        assertNull("Button skin should be GCed.", skinRef.get());
+    }
+
+    private void attemptGC(WeakReference<ButtonSkin> weakRef) {
+        for (int i = 0; i < 10; i++) {
+            System.gc();
+            System.runFinalization();
+
+            if (weakRef.get() == null) {
+                break;
+            }
+            try {
+                Thread.sleep(50);
+            } catch (InterruptedException e) {
+                fail("InterruptedException occurred during Thread.sleep()");
+            }
+        }
+    }
+
     public static final class ButtonSkinMock extends ButtonSkin {
         boolean propertyChanged = false;
         int propertyChangeCount = 0;
         public ButtonSkinMock(Button button) {
             super(button);
