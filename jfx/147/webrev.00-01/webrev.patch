diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java
@@ -96,10 +96,11 @@
             if (getSkinnable().isCancelButton()) {
                 setCancelButton(newScene, true);
             }
         }
     };
+    WeakChangeListener<Scene> weakChangeListener = new WeakChangeListener<>(sceneChangeListener);
 
 
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
@@ -142,11 +143,11 @@
                 if (getSkinnable().isCancelButton()) {
                     getSkinnable().getScene().getAccelerators().remove(cancelAcceleratorKeyCodeCombination);
                 }
             }
         });
-        control.sceneProperty().addListener(new WeakChangeListener<>(sceneChangeListener));
+        control.sceneProperty().addListener(weakChangeListener);
 
         // set visuals
         if (getSkinnable().isDefaultButton()) {
             /*
             ** were we already the defaultButton, before the listener was added?
@@ -172,10 +173,11 @@
      *                                                                         *
      **************************************************************************/
 
     /** {@inheritDoc} */
     @Override public void dispose() {
+        getSkinnable().sceneProperty().removeListener(weakChangeListener);
         super.dispose();
 
         if (behavior != null) {
             behavior.dispose();
         }
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
@@ -24,10 +24,11 @@
  */
 
 package test.javafx.scene.control.skin;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
 
 import javafx.beans.value.ObservableValue;
 import javafx.geometry.Insets;
@@ -167,19 +168,68 @@
             super(btn);
         }
     }
 
     @Test
-    public void testSkinLeakOnSwitch() {
+    public void testOldSkinShouldGC() {
         Button button = new Button();
+        Group root = new Group(button);
+        Scene scene = new Scene(root);
+        Stage stage = new Stage();
+        stage.setScene(scene);
+        stage.show();
+
+        WeakReference<ButtonSkin> defSkinRef = new WeakReference<>((ButtonSkin)button.getSkin());
         ButtonSkin skin = new ButtonSkin1(button);
+        WeakReference<ButtonSkin> oldSkinRef = new WeakReference<>(skin);
+        button.setSkin(skin);
+        skin = new ButtonSkin2(button);
+        WeakReference<ButtonSkin> currSkinRef = new WeakReference<>(skin);
+        button.setSkin(skin);
+        skin = null;
+
+        attemptGC(oldSkinRef);
+        assertNull("Old ButtonSkin should be GCed.", oldSkinRef.get());
+        assertNull("Default ButtonSkin should be GCed.", defSkinRef.get());
+        assertNotNull("Current ButtonSkin should NOT be GCed.", currSkinRef.get());
+    }
+
+    @Test
+    public void testUnusedSkinShouldGC() {
+        Button button = new Button();
+        Group root = new Group(button);
+        Scene scene = new Scene(root);
+        Stage stage = new Stage();
+        stage.setScene(scene);
+        stage.show();
+
+        WeakReference<ButtonSkin> defSkinRef = new WeakReference<>((ButtonSkin)button.getSkin());
+        ButtonSkin skin = new ButtonSkin1(button);
+        WeakReference<ButtonSkin> skinRef1 = new WeakReference<>(skin);
+        skin = new ButtonSkin2(button);
+        WeakReference<ButtonSkin> skinRef2 = new WeakReference<>(skin);
+        skin = null;
+
+        attemptGC(skinRef1);
+        assertNull("Unused ButtonSkin should be GCed.", skinRef1.get());
+        assertNull("Unused ButtonSkin should be GCed.", skinRef2.get());
+        assertNotNull("Default ButtonSkin should NOT be GCed.", defSkinRef.get());
+    }
+
+    @Test
+    public void testButtonAndSkinShouldGC() {
+        Button button = new Button();
+        ButtonSkin skin = new ButtonSkin1(button);
+        WeakReference<Button> buttonRef = new WeakReference<>(button);
         WeakReference<ButtonSkin> skinRef = new WeakReference<>(skin);
         button.setSkin(skin);
+        button = null;
         skin = null;
-        button.setSkin(new ButtonSkin2(button));
+
         attemptGC(skinRef);
-        assertNull("Button skin should be GCed.", skinRef.get());
+        assertNull("Button should be GCed.", buttonRef.get());
+        assertNull("ButtonSkin should be GCed.", skinRef.get());
     }
 
     private void attemptGC(WeakReference<ButtonSkin> weakRef) {
         for (int i = 0; i < 10; i++) {
             System.gc();
