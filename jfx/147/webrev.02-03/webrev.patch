diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ButtonSkin.java
@@ -173,10 +173,16 @@
      *                                                                         *
      **************************************************************************/
 
     /** {@inheritDoc} */
     @Override public void dispose() {
+        if (getSkinnable().isDefaultButton()) {
+            setDefaultButton(false);
+        }
+        if (getSkinnable().isCancelButton()) {
+            setCancelButton(false);
+        }
         getSkinnable().sceneProperty().removeListener(weakSceneChangeListener);
         super.dispose();
 
         if (behavior != null) {
             behavior.dispose();
diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/skin/ButtonSkinTest.java
@@ -35,10 +35,12 @@
 import javafx.scene.control.Button;
 
 import javafx.scene.Group;
 import javafx.scene.Scene;
 import javafx.stage.Stage;
+import javafx.scene.input.KeyCode;
+import javafx.scene.input.KeyCodeCombination;
 import javafx.scene.input.Mnemonic;
 import javafx.collections.ObservableList;
 import javafx.scene.input.KeyCombination;
 
 import com.sun.javafx.scene.control.behavior.TextBinding.MnemonicKeyCombination;
@@ -197,13 +199,13 @@
         WeakReference<ButtonSkin> currSkinRef = new WeakReference<>(skin);
         button.setSkin(skin);
         skin = null;
 
         attemptGC(oldSkinRef);
-        assertNull("Old ButtonSkin should be GCed.", oldSkinRef.get());
-        assertNull("Default ButtonSkin should be GCed.", defSkinRef.get());
-        assertNotNull("Current ButtonSkin should NOT be GCed.", currSkinRef.get());
+        assertNull("Old ButtonSkin must be GCed.", oldSkinRef.get());
+        assertNull("Default ButtonSkin must be GCed.", defSkinRef.get());
+        assertNotNull("Current ButtonSkin must NOT be GCed.", currSkinRef.get());
     }
 
     @Test
     public void testUnusedSkinShouldGC() {
         Button button = new Button();
@@ -219,13 +221,13 @@
         skin = new ButtonSkin2(button);
         WeakReference<ButtonSkin> skinRef2 = new WeakReference<>(skin);
         skin = null;
 
         attemptGC(skinRef1);
-        assertNull("Unused ButtonSkin should be GCed.", skinRef1.get());
-        assertNull("Unused ButtonSkin should be GCed.", skinRef2.get());
-        assertNotNull("Default ButtonSkin should NOT be GCed.", defSkinRef.get());
+        assertNull("Unused ButtonSkin must be GCed.", skinRef1.get());
+        assertNull("Unused ButtonSkin must be GCed.", skinRef2.get());
+        assertNotNull("Default ButtonSkin must NOT be GCed.", defSkinRef.get());
     }
 
     @Test
     public void testButtonAndSkinShouldGC() {
         Button button = new Button();
@@ -235,12 +237,12 @@
         button.setSkin(skin);
         button = null;
         skin = null;
 
         attemptGC(skinRef);
-        assertNull("Button should be GCed.", buttonRef.get());
-        assertNull("ButtonSkin should be GCed.", skinRef.get());
+        assertNull("Button must be GCed.", buttonRef.get());
+        assertNull("ButtonSkin must be GCed.", skinRef.get());
     }
 
     @Test
     public void testNPEOnSwitchSkinAndRemoveButton() {
         Button button = new Button();
@@ -252,10 +254,48 @@
 
         button.setSkin(new ButtonSkin1(button));
         root.getChildren().remove(button);
     }
 
+    @Test
+    public void testDefaultButtonNullSkinReleased() {
+        Button button = new Button();
+        button.setDefaultButton(true);
+        Group root = new Group(button);
+        Scene scene = new Scene(root);
+        Stage stage = new Stage();
+        stage.setScene(scene);
+        stage.show();
+        WeakReference<ButtonSkin> defSkinRef = new WeakReference<>((ButtonSkin)button.getSkin());
+        KeyCodeCombination key = new KeyCodeCombination(KeyCode.ENTER);
+        assertNotNull(scene.getAccelerators().get(key));
+        button.setSkin(null);
+        assertNull(scene.getAccelerators().get(key));
+
+        attemptGC(defSkinRef);
+        assertNull("ButtonSkin must be GCed", defSkinRef.get());
+    }
+
+    @Test
+    public void testCancelButtonNullSkinReleased() {
+        Button button = new Button();
+        button.setCancelButton(true);
+        Group root = new Group(button);
+        Scene scene = new Scene(root);
+        Stage stage = new Stage();
+        stage.setScene(scene);
+        stage.show();
+        WeakReference<ButtonSkin> defSkinRef = new WeakReference<>((ButtonSkin)button.getSkin());
+        KeyCodeCombination key = new KeyCodeCombination(KeyCode.ESCAPE);
+        assertNotNull(scene.getAccelerators().get(key));
+        button.setSkin(null);
+        assertNull(scene.getAccelerators().get(key));
+
+        attemptGC(defSkinRef);
+        assertNull("ButtonSkin must be GCed", defSkinRef.get());
+    }
+
     private void attemptGC(WeakReference<ButtonSkin> weakRef) {
         for (int i = 0; i < 10; i++) {
             System.gc();
             System.runFinalization();
 
