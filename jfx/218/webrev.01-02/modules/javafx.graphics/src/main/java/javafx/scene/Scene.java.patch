diff a/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java b/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
--- a/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
+++ b/modules/javafx.graphics/src/main/java/javafx/scene/Scene.java
@@ -1283,10 +1283,13 @@
     static WritableImage doSnapshot(Scene scene,
             double x, double y, double w, double h,
             Node root, BaseTransform transform, boolean depthBuffer,
             Paint fill, Camera camera, WritableImage wimg) {
 
+        Toolkit tk = Toolkit.getToolkit();
+        Toolkit.ImageRenderingContext context = new Toolkit.ImageRenderingContext();
+
         int xMin = (int)Math.floor(x);
         int yMin = (int)Math.floor(y);
         int width;
         int height;
         if (wimg == null) {
@@ -1298,72 +1301,27 @@
         } else {
             width = (int)wimg.getWidth();
             height = (int)wimg.getHeight();
         }
 
-        // Attempt to capture snapshot
-        try {
-            wimg = doSnapshotTile(scene, xMin, yMin, width, height, root, transform, depthBuffer, fill, camera, wimg);
-        } catch (Exception e) {
-            // A first attempt to capture a snapshot failed, most likely because it is larger than
-            // maxTextureSize: retry by taking several snapshot tiles and merge them into single image
-            // (Addresses JDK-8088198)
-            int maxTextureSize = PrismSettings.maxTextureSize;
-            int numVerticalTiles = (int) Math.ceil(height / (double) maxTextureSize);
-            int numHorizontalTiles = (int) Math.ceil(width / (double) maxTextureSize);
-            for (int i = 0; i < numHorizontalTiles; i++) {
-                int xOffset = i * maxTextureSize;
-                int tileWidth = Math.min(maxTextureSize, width - xOffset);
-                for (int j = 0; j < numVerticalTiles; j++) {
-                    int yOffset = j * maxTextureSize;
-                    int tileHeight = Math.min(maxTextureSize, height - yOffset);
-                    WritableImage tile = doSnapshotTile(scene, xMin + xOffset, yMin + yOffset, tileWidth,
-                            tileHeight, root, transform, depthBuffer, fill, camera, null);
-                    wimg.getPixelWriter().setPixels(xOffset, yOffset, tileWidth, tileHeight, tile.getPixelReader(), 0, 0);
-                }
-            }
-        }
-
-        // if this scene belongs to some stage
-        // we need to mark the entire scene as dirty
-        // because dirty logic is buggy
-        if (scene != null && scene.peer != null) {
-            scene.setNeedsRepaint();
-        }
-
-        return wimg;
-    }
-
-    /**
-     * Capture a single snapshot tile
-     */
-    private static WritableImage doSnapshotTile(Scene scene,
-                    int x, int y, int w, int h,
-                    Node root, BaseTransform transform, boolean depthBuffer,
-                    Paint fill, Camera camera, WritableImage tileImg) {
-        Toolkit tk = Toolkit.getToolkit();
-        Toolkit.ImageRenderingContext context = new Toolkit.ImageRenderingContext();
-        if (tileImg == null) {
-            tileImg = new WritableImage(w, h);
-        }
         setAllowPGAccess(true);
-        context.x = x;
-        context.y = y;
-        context.width = w;
-        context.height = h;
+        context.x = xMin;
+        context.y = yMin;
+        context.width = width;
+        context.height = height;
         context.transform = transform;
         context.depthBuffer = depthBuffer;
         context.root = root.getPeer();
         context.platformPaint = fill == null ? null : tk.getPaint(fill);
         double cameraViewWidth = 1.0;
         double cameraViewHeight = 1.0;
         if (camera != null) {
             // temporarily adjust camera viewport to the snapshot size
             cameraViewWidth = camera.getViewWidth();
             cameraViewHeight = camera.getViewHeight();
-            camera.setViewWidth(w);
-            camera.setViewHeight(h);
+            camera.setViewWidth(width);
+            camera.setViewHeight(height);
             NodeHelper.updatePeer(camera);
             context.camera = camera.getPeer();
         } else {
             context.camera = null;
         }
@@ -1376,23 +1334,31 @@
                 context.lights[i] = scene.lights.get(i).getPeer();
             }
         }
 
         Toolkit.WritableImageAccessor accessor = Toolkit.getWritableImageAccessor();
-        context.platformImage = accessor.getTkImageLoader(tileImg);
+        context.platformImage = accessor.getTkImageLoader(wimg);
         setAllowPGAccess(false);
         Object tkImage = tk.renderToImage(context);
-        accessor.loadTkImage(tileImg, tkImage);
+        accessor.loadTkImage(wimg, tkImage);
 
         if (camera != null) {
             setAllowPGAccess(true);
             camera.setViewWidth(cameraViewWidth);
             camera.setViewHeight(cameraViewHeight);
             NodeHelper.updatePeer(camera);
             setAllowPGAccess(false);
         }
-        return tileImg;
+
+        // if this scene belongs to some stage
+        // we need to mark the entire scene as dirty
+        // because dirty logic is buggy
+        if (scene != null && scene.peer != null) {
+            scene.setNeedsRepaint();
+        }
+
+        return wimg;
     }
 
     /**
      * Implementation method for snapshot
      */
