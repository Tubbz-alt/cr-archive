diff a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/shape/NativePiscesRasterizer.java b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/shape/NativePiscesRasterizer.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/shape/NativePiscesRasterizer.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/shape/NativePiscesRasterizer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -29,10 +29,11 @@
 import com.sun.javafx.geom.Path2D;
 import com.sun.javafx.geom.PathIterator;
 import com.sun.javafx.geom.RectBounds;
 import com.sun.javafx.geom.Shape;
 import com.sun.javafx.geom.transform.BaseTransform;
+import com.sun.javafx.util.Logging;
 import com.sun.prism.BasicStroke;
 import com.sun.prism.impl.PrismSettings;
 import java.nio.ByteBuffer;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
@@ -151,25 +152,34 @@
             cachedData = new MaskData();
             int csize = (w * h + 0xfff) & (~0xfff);
             cachedMask = new byte[csize];
             cachedBuffer = ByteBuffer.wrap(cachedMask);
         }
-        if (stroke != null) {
-            produceStrokeAlphas(p2d.getFloatCoordsNoClone(),
-                                p2d.getCommandsNoClone(),
-                                p2d.getNumCommands(),
-                                stroke.getLineWidth(), stroke.getEndCap(),
-                                stroke.getLineJoin(), stroke.getMiterLimit(),
-                                stroke.getDashArray(), stroke.getDashPhase(),
-                                mxx, mxy, mxt, myx, myy, myt,
-                                bounds, cachedMask);
-        } else {
-            produceFillAlphas(p2d.getFloatCoordsNoClone(),
-                              p2d.getCommandsNoClone(),
-                              p2d.getNumCommands(), p2d.getWindingRule() == Path2D.WIND_NON_ZERO,
-                              mxx, mxy, mxt, myx, myy, myt,
-                              bounds, cachedMask);
+        try {
+            if (stroke != null) {
+                produceStrokeAlphas(p2d.getFloatCoordsNoClone(),
+                                    p2d.getCommandsNoClone(),
+                                    p2d.getNumCommands(),
+                                    stroke.getLineWidth(), stroke.getEndCap(),
+                                    stroke.getLineJoin(), stroke.getMiterLimit(),
+                                    stroke.getDashArray(), stroke.getDashPhase(),
+                                    mxx, mxy, mxt, myx, myy, myt,
+                                    bounds, cachedMask);
+            } else {
+                produceFillAlphas(p2d.getFloatCoordsNoClone(),
+                                  p2d.getCommandsNoClone(),
+                                  p2d.getNumCommands(), p2d.getWindingRule() == Path2D.WIND_NON_ZERO,
+                                  mxx, mxy, mxt, myx, myy, myt,
+                                  bounds, cachedMask);
+            }
+        } catch (Throwable ex) {
+            if (PrismSettings.verbose) {
+                ex.printStackTrace();
+            }
+            Logging.getJavaFXLogger().warning("Cannot rasterize Shape: "
+                    + ex.toString());
+            return emptyData;
         }
         x = bounds[0];
         y = bounds[1];
         w = bounds[2] - x;
         h = bounds[3] - y;
