diff a/modules/javafx.fxml/src/test/java/test/javafx/fxml/FXMLLoader_ScriptTest.java b/modules/javafx.fxml/src/test/java/test/javafx/fxml/FXMLLoader_ScriptTest.java
--- a/modules/javafx.fxml/src/test/java/test/javafx/fxml/FXMLLoader_ScriptTest.java
+++ b/modules/javafx.fxml/src/test/java/test/javafx/fxml/FXMLLoader_ScriptTest.java
@@ -1,8 +1,8 @@
 package test.javafx.fxml;
 /*
- * Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -29,12 +29,15 @@
 
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicBoolean;
 import javafx.fxml.FXMLLoader;
 import javafx.fxml.LoadListener;
+import javax.script.ScriptEngineManager;
+import javax.script.ScriptEngine;
 
 import static org.junit.Assert.*;
+import static org.junit.Assume.assumeTrue;
 
 public class FXMLLoader_ScriptTest {
     @Test
     @SuppressWarnings("deprecation")
     public void testStaticScriptLoad() throws IOException {
@@ -128,10 +131,14 @@
     }
 
     @Test
     public void testScriptHandler() throws IOException {
 
+        // This test needs Nashorn script engine.
+        // Test will be rewritten under - JDK-8245568
+        assumeTrue(isNashornEngineAvailable());
+
         FXMLLoader loader = new FXMLLoader(getClass().getResource("script_handler.fxml"));
         loader.load();
 
         Widget w = (Widget) loader.getNamespace().get("w");
         assertNotNull(w);
@@ -141,15 +148,26 @@
     }
 
     @Test
     public void testExternalScriptHandler() throws IOException {
 
+        // This test needs Nashorn script engine.
+        // Test will be rewritten under - JDK-8245568
+        assumeTrue(isNashornEngineAvailable());
+
         FXMLLoader loader = new FXMLLoader(getClass().getResource("script_handler_external.fxml"));
         loader.load();
 
         Widget w = (Widget) loader.getNamespace().get("w");
         assertNotNull(w);
         loader.getNamespace().put("actionDone", new AtomicBoolean(false));
         w.fire();
         assertTrue(((AtomicBoolean)loader.getNamespace().get("actionDone")).get());
     }
+
+    private boolean isNashornEngineAvailable() {
+        ScriptEngineManager factory = new ScriptEngineManager();
+        ScriptEngine engine = factory.getEngineByName("nashorn");
+
+        return (engine != null);
+    }
 }
