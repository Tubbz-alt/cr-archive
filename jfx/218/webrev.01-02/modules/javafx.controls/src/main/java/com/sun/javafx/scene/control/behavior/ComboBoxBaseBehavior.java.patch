diff a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ComboBoxBaseBehavior.java b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ComboBoxBaseBehavior.java
--- a/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ComboBoxBaseBehavior.java
+++ b/modules/javafx.controls/src/main/java/com/sun/javafx/scene/control/behavior/ComboBoxBaseBehavior.java
@@ -24,10 +24,12 @@
  */
 
 package com.sun.javafx.scene.control.behavior;
 
 import com.sun.javafx.scene.control.inputmap.InputMap;
+
+import javafx.beans.InvalidationListener;
 import javafx.beans.Observable;
 import javafx.event.EventHandler;
 import javafx.event.EventTarget;
 import javafx.scene.Node;
 import javafx.scene.control.ComboBox;
@@ -45,10 +47,11 @@
 import static com.sun.javafx.scene.control.inputmap.InputMap.MouseMapping;
 
 public class ComboBoxBaseBehavior<T> extends BehaviorBase<ComboBoxBase<T>> {
 
     private final InputMap<ComboBoxBase<T>> inputMap;
+    private InvalidationListener focusListener = this::focusChanged;
 
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
      *                                                                         *
@@ -100,21 +103,21 @@
         // we don't want to consume events on enter press - let them carry on through
         enterPressed.setAutoConsume(false);
         enterReleased.setAutoConsume(false);
 
         // ComboBoxBase also cares about focus
-        comboBox.focusedProperty().addListener(this::focusChanged);
+        comboBox.focusedProperty().addListener(focusListener);
 
         // Only add this if we're on an embedded platform that supports 5-button navigation
         if (Utils.isTwoLevelFocus()) {
             tlFocus = new TwoLevelFocusComboBehavior(comboBox); // needs to be last.
         }
     }
 
     @Override public void dispose() {
         if (tlFocus != null) tlFocus.dispose();
-        getNode().focusedProperty().removeListener(this::focusChanged);
+        getNode().focusedProperty().removeListener(focusListener);
         super.dispose();
     }
 
     @Override public InputMap<ComboBoxBase<T>> getInputMap() {
         return inputMap;
