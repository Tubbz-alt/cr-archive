diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/VirtualContainerBase.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/VirtualContainerBase.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/VirtualContainerBase.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/VirtualContainerBase.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,10 +23,11 @@
  * questions.
  */
 
 package javafx.scene.control.skin;
 
+import javafx.event.EventHandler;
 import javafx.scene.control.Control;
 import javafx.scene.control.IndexedCell;
 import javafx.scene.control.ScrollToEvent;
 import javafx.scene.control.SkinBase;
 
@@ -51,10 +52,11 @@
      * The virtualized container which handles the layout and scrolling of
      * all the cells.
      */
     private final VirtualFlow<I> flow;
 
+    private EventHandler<? super ScrollToEvent<Integer>> scrollToEventHandler;
 
 
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
@@ -67,20 +69,21 @@
      */
     public VirtualContainerBase(final C control) {
         super(control);
         flow = createVirtualFlow();
 
-        control.addEventHandler(ScrollToEvent.scrollToTopIndex(), event -> {
+        scrollToEventHandler = event -> {
             // Fix for RT-24630: The row count in VirtualFlow was incorrect
             // (normally zero), so the scrollTo call was misbehaving.
             if (itemCountDirty) {
                 // update row count before we do a scroll
                 updateItemCount();
                 itemCountDirty = false;
             }
             flow.scrollToTop(event.getScrollTarget());
-        });
+        };
+        control.addEventHandler(ScrollToEvent.scrollToTopIndex(), scrollToEventHandler);
     }
 
 
 
     /***************************************************************************
@@ -121,10 +124,21 @@
      */
     protected VirtualFlow<I> createVirtualFlow() {
         return new VirtualFlow<>();
     }
 
+    /**
+     * {@inheritDoc} <p>
+     * Overridden to remove EventHandler.
+     */
+    @Override
+    public void dispose() {
+        if (getSkinnable() == null) return;
+        getSkinnable().removeEventHandler(ScrollToEvent.scrollToTopIndex(), scrollToEventHandler);
+        super.dispose();
+    }
+
     /**
      * Get the virtualized container.
      * Subclasses can invoke this method to get the VirtualFlow instance.
      * @return the virtualized container
      * @since 10
