diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertStrings.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertStrings.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertStrings.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertStrings.cpp
@@ -30,38 +30,38 @@
 
 
 namespace WebCore {
 using namespace JSC;
 
-static inline String stringToByteString(ExecState& state, JSC::ThrowScope& scope, String&& string)
+static inline String stringToByteString(JSGlobalObject& lexicalGlobalObject, JSC::ThrowScope& scope, String&& string)
 {
     if (!string.isAllLatin1()) {
-        throwTypeError(&state, scope);
+        throwTypeError(&lexicalGlobalObject, scope);
         return { };
     }
 
     return WTFMove(string);
 }
 
-String identifierToByteString(ExecState& state, const Identifier& identifier)
+String identifierToByteString(JSGlobalObject& lexicalGlobalObject, const Identifier& identifier)
 {
-    VM& vm = state.vm();
+    VM& vm = lexicalGlobalObject.vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     auto string = identifier.string();
-    return stringToByteString(state, scope, WTFMove(string));
+    return stringToByteString(lexicalGlobalObject, scope, WTFMove(string));
 }
 
-String valueToByteString(ExecState& state, JSValue value)
+String valueToByteString(JSGlobalObject& lexicalGlobalObject, JSValue value)
 {
-    VM& vm = state.vm();
+    VM& vm = lexicalGlobalObject.vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    auto string = value.toWTFString(&state);
+    auto string = value.toWTFString(&lexicalGlobalObject);
     RETURN_IF_EXCEPTION(scope, { });
 
-    return stringToByteString(state, scope, WTFMove(string));
+    return stringToByteString(lexicalGlobalObject, scope, WTFMove(string));
 }
 
 static inline bool hasUnpairedSurrogate(StringView string)
 {
     // Fast path for 8-bit strings; they can't have any surrogates.
@@ -92,22 +92,22 @@
             result.appendCharacter(codePoint);
     }
     return result.toString();
 }
 
-String identifierToUSVString(ExecState&, const Identifier& identifier)
+String identifierToUSVString(JSGlobalObject&, const Identifier& identifier)
 {
     auto string = identifier.string();
     return stringToUSVString(WTFMove(string));
 }
 
-String valueToUSVString(ExecState& state, JSValue value)
+String valueToUSVString(JSGlobalObject& lexicalGlobalObject, JSValue value)
 {
-    VM& vm = state.vm();
+    VM& vm = lexicalGlobalObject.vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    auto string = value.toWTFString(&state);
+    auto string = value.toWTFString(&lexicalGlobalObject);
     RETURN_IF_EXCEPTION(scope, { });
 
     return stringToUSVString(WTFMove(string));
 }
 
