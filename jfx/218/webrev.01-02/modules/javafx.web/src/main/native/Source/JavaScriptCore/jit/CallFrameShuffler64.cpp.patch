diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/CallFrameShuffler64.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/CallFrameShuffler64.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/CallFrameShuffler64.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/CallFrameShuffler64.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -86,15 +86,15 @@
                 dataLog("   * Boxing ", cachedRecovery.recovery());
             m_jit.zeroExtend32ToPtr(
                 cachedRecovery.recovery().gpr(),
                 cachedRecovery.recovery().gpr());
             m_lockedRegisters.set(cachedRecovery.recovery().gpr());
-            if (tryAcquireTagTypeNumber())
-                m_jit.or64(m_tagTypeNumber, cachedRecovery.recovery().gpr());
+            if (tryAcquireNumberTagRegister())
+                m_jit.or64(m_numberTagRegister, cachedRecovery.recovery().gpr());
             else {
                 // We have to do this the hard way
-                m_jit.or64(MacroAssembler::TrustedImm64(TagTypeNumber),
+                m_jit.or64(MacroAssembler::TrustedImm64(JSValue::NumberTag),
                     cachedRecovery.recovery().gpr());
             }
             m_lockedRegisters.clear(cachedRecovery.recovery().gpr());
             cachedRecovery.setRecovery(
                 ValueRecovery::inGPR(cachedRecovery.recovery().gpr(), DataFormatJS));
@@ -123,11 +123,11 @@
             break;
         }
         case DataFormatBoolean:
             if (verbose)
                 dataLog("   * Boxing ", cachedRecovery.recovery());
-            m_jit.add32(MacroAssembler::TrustedImm32(ValueFalse),
+            m_jit.add32(MacroAssembler::TrustedImm32(JSValue::ValueFalse),
                 cachedRecovery.recovery().gpr());
             cachedRecovery.setRecovery(
                 ValueRecovery::inGPR(cachedRecovery.recovery().gpr(), DataFormatJS));
             if (verbose)
                 dataLog(" into ", cachedRecovery.recovery(), "\n");
@@ -146,14 +146,14 @@
                 resultGPR = getFreeGPR();
             ASSERT(resultGPR != InvalidGPRReg);
             m_jit.purifyNaN(cachedRecovery.recovery().fpr());
             m_jit.moveDoubleTo64(cachedRecovery.recovery().fpr(), resultGPR);
             m_lockedRegisters.set(resultGPR);
-            if (tryAcquireTagTypeNumber())
-                m_jit.sub64(m_tagTypeNumber, resultGPR);
+            if (tryAcquireNumberTagRegister())
+                m_jit.sub64(m_numberTagRegister, resultGPR);
             else
-                m_jit.sub64(MacroAssembler::TrustedImm64(TagTypeNumber), resultGPR);
+                m_jit.sub64(MacroAssembler::TrustedImm64(JSValue::NumberTag), resultGPR);
             m_lockedRegisters.clear(resultGPR);
             updateRecovery(cachedRecovery, ValueRecovery::inGPR(resultGPR, DataFormatJS));
             if (verbose)
                 dataLog(" into ", cachedRecovery.recovery(), "\n");
             return;
@@ -347,22 +347,22 @@
     }
 
     ASSERT(m_registers[wantedReg] == &cachedRecovery);
 }
 
-bool CallFrameShuffler::tryAcquireTagTypeNumber()
+bool CallFrameShuffler::tryAcquireNumberTagRegister()
 {
-    if (m_tagTypeNumber != InvalidGPRReg)
+    if (m_numberTagRegister != InvalidGPRReg)
         return true;
 
-    m_tagTypeNumber = getFreeGPR();
+    m_numberTagRegister = getFreeGPR();
 
-    if (m_tagTypeNumber == InvalidGPRReg)
+    if (m_numberTagRegister == InvalidGPRReg)
         return false;
 
-    m_lockedRegisters.set(m_tagTypeNumber);
-    m_jit.move(MacroAssembler::TrustedImm64(TagTypeNumber), m_tagTypeNumber);
+    m_lockedRegisters.set(m_numberTagRegister);
+    m_jit.move(MacroAssembler::TrustedImm64(JSValue::NumberTag), m_numberTagRegister);
     return true;
 }
 
 } // namespace JSC
 
