diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCStatsReport.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCStatsReport.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCStatsReport.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCStatsReport.h
@@ -23,23 +23,22 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "JSDOMMapLike.h"
+#include "LibWebRTCStatsCollector.h"
 
 namespace WebCore {
 
+class DOMMapAdapter;
+
 class RTCStatsReport : public RefCounted<RTCStatsReport> {
 public:
-    static Ref<RTCStatsReport> create() { return adoptRef(*new RTCStatsReport); }
-
-    void synchronizeBackingMap(Ref<DOMMapLike>&& mapLike) { m_mapLike = WTFMove(mapLike); }
-    DOMMapLike* backingMap() { return m_mapLike.get(); }
-
-    template<typename Value> void addStats(typename Value::ParameterType&& value) { m_mapLike->set<IDLDOMString, Value>(value.id, std::forward<typename Value::ParameterType>(value)); }
+    using MapInitializer = Function<void(DOMMapAdapter&)>;
+    static Ref<RTCStatsReport> create(MapInitializer&& mapInitializer) { return adoptRef(*new RTCStatsReport(WTFMove(mapInitializer))); }
 
+    void initializeMapLike(DOMMapAdapter& adapter) { m_mapInitializer(adapter); }
 
     enum class Type {
         Codec,
         InboundRtp,
         OutboundRtp,
@@ -234,12 +233,16 @@
         Optional<uint32_t> dataChannelsOpened;
         Optional<uint32_t> dataChannelsClosed;
     };
 
 private:
-    RTCStatsReport() = default;
+    explicit RTCStatsReport(MapInitializer&&);
 
-private:
-    RefPtr<DOMMapLike> m_mapLike;
+    MapInitializer m_mapInitializer;
 };
 
+inline RTCStatsReport::RTCStatsReport(MapInitializer&& mapInitializer)
+    : m_mapInitializer(WTFMove(mapInitializer))
+{
+}
+
 } // namespace WebCore
