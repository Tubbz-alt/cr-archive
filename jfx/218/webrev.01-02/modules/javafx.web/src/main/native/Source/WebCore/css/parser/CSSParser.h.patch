diff a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParser.h b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParser.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParser.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParser.h
@@ -28,22 +28,26 @@
 #include "WritingMode.h"
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
-struct ApplyCascadedPropertyState;
 class CSSParserObserver;
 class CSSSelectorList;
+class CSSValuePool;
 class Color;
 class Element;
 class ImmutableStyleProperties;
 class MutableStyleProperties;
 class StyleRuleBase;
 class StyleRuleKeyframe;
 class StyleSheetContents;
 class RenderStyle;
 
+namespace Style {
+class BuilderState;
+}
+
 class CSSParser {
 public:
     enum class ParseResult {
         Changed,
         Unchanged,
@@ -76,13 +80,14 @@
     WEBCORE_EXPORT bool parseDeclaration(MutableStyleProperties&, const String&);
     static Ref<ImmutableStyleProperties> parseInlineStyleDeclaration(const String&, const Element*);
 
     void parseSelector(const String&, CSSSelectorList&);
 
-    RefPtr<CSSValue> parseValueWithVariableReferences(CSSPropertyID, const CSSValue&, ApplyCascadedPropertyState&);
+    RefPtr<CSSValue> parseValueWithVariableReferences(CSSPropertyID, const CSSValue&, Style::BuilderState&);
 
     static Color parseColor(const String&, bool strict = false);
+    static Color parseColorWorkerSafe(const String&, CSSValuePool&, bool strict = false);
     static Color parseSystemColor(const String&, const CSSParserContext*);
 
 private:
     ParseResult parseValue(MutableStyleProperties&, CSSPropertyID, const String&, bool important);
 
