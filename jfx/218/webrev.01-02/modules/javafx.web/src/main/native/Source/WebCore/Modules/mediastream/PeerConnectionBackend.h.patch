diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/PeerConnectionBackend.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/PeerConnectionBackend.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/PeerConnectionBackend.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/PeerConnectionBackend.h
@@ -31,20 +31,21 @@
 
 #pragma once
 
 #if ENABLE(WEB_RTC)
 
-#include "JSDOMPromiseDeferred.h"
+#include "IDLTypes.h"
 #include "LibWebRTCProvider.h"
 #include "RTCRtpSendParameters.h"
 #include "RTCSessionDescription.h"
 #include "RTCSignalingState.h"
 #include <wtf/LoggerHelper.h>
 #include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
+class DeferredPromise;
 class Document;
 class MediaStream;
 class MediaStreamTrack;
 class PeerConnectionBackend;
 class RTCCertificate;
@@ -54,17 +55,20 @@
 class RTCRtpReceiver;
 class RTCRtpSender;
 class RTCRtpTransceiver;
 class RTCSessionDescription;
 class RTCStatsReport;
+class ScriptExecutionContext;
 
 struct MediaEndpointConfiguration;
 struct RTCAnswerOptions;
 struct RTCDataChannelInit;
 struct RTCOfferOptions;
 struct RTCRtpTransceiverInit;
 
+template<typename IDLType> class DOMPromiseDeferred;
+
 namespace PeerConnection {
 using SessionDescriptionPromise = DOMPromiseDeferred<IDLDictionary<RTCSessionDescription::Init>>;
 using StatsPromise = DOMPromiseDeferred<IDLInterface<RTCStatsReport>>;
 }
 
@@ -81,11 +85,11 @@
 
     static Optional<RTCRtpCapabilities> receiverCapabilities(ScriptExecutionContext&, const String& kind);
     static Optional<RTCRtpCapabilities> senderCapabilities(ScriptExecutionContext&, const String& kind);
 
     explicit PeerConnectionBackend(RTCPeerConnection&);
-    virtual ~PeerConnectionBackend() = default;
+    virtual ~PeerConnectionBackend();
 
     void createOffer(RTCOfferOptions&&, PeerConnection::SessionDescriptionPromise&&);
     void createAnswer(RTCAnswerOptions&&, PeerConnection::SessionDescriptionPromise&&);
     void setLocalDescription(RTCSessionDescription&, DOMPromiseDeferred<void>&&);
     void setRemoteDescription(RTCSessionDescription&, DOMPromiseDeferred<void>&&);
@@ -93,10 +97,12 @@
 
     virtual std::unique_ptr<RTCDataChannelHandler> createDataChannelHandler(const String&, const RTCDataChannelInit&) = 0;
 
     void stop();
 
+    virtual void close() = 0;
+
     virtual RefPtr<RTCSessionDescription> localDescription() const = 0;
     virtual RefPtr<RTCSessionDescription> currentLocalDescription() const = 0;
     virtual RefPtr<RTCSessionDescription> pendingLocalDescription() const = 0;
 
     virtual RefPtr<RTCSessionDescription> remoteDescription() const = 0;
@@ -170,10 +176,13 @@
     virtual void collectTransceivers() { };
 
     ScriptExecutionContext* context() const;
     RTCRtpTransceiver* transceiverFromSender(const RTCRtpSender&);
 
+    virtual void suspend() { }
+    virtual void resume() { }
+
 protected:
     void fireICECandidateEvent(RefPtr<RTCIceCandidate>&&, String&& url);
     void doneGatheringCandidates();
 
     void updateSignalingState(RTCSignalingState);
@@ -207,22 +216,22 @@
     virtual void doCreateOffer(RTCOfferOptions&&) = 0;
     virtual void doCreateAnswer(RTCAnswerOptions&&) = 0;
     virtual void doSetLocalDescription(RTCSessionDescription&) = 0;
     virtual void doSetRemoteDescription(RTCSessionDescription&) = 0;
     virtual void doAddIceCandidate(RTCIceCandidate&) = 0;
-    virtual void endOfIceCandidates(DOMPromiseDeferred<void>&& promise) { promise.resolve(); }
+    virtual void endOfIceCandidates(DOMPromiseDeferred<void>&&);
     virtual void doStop() = 0;
 
     void registerMDNSName(const String& ipAddress);
 
 protected:
     RTCPeerConnection& m_peerConnection;
 
 private:
-    Optional<PeerConnection::SessionDescriptionPromise> m_offerAnswerPromise;
-    Optional<DOMPromiseDeferred<void>> m_setDescriptionPromise;
-    Optional<DOMPromiseDeferred<void>> m_addIceCandidatePromise;
+    std::unique_ptr<PeerConnection::SessionDescriptionPromise> m_offerAnswerPromise;
+    std::unique_ptr<DOMPromiseDeferred<void>> m_setDescriptionPromise;
+    std::unique_ptr<DOMPromiseDeferred<void>> m_addIceCandidatePromise;
 
     bool m_shouldFilterICECandidates { true };
     struct PendingICECandidate {
         // Fields described in https://www.w3.org/TR/webrtc/#idl-def-rtcicecandidateinit.
         String sdp;
