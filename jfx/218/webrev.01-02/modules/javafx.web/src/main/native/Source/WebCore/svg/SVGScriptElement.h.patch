diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGScriptElement.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGScriptElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGScriptElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGScriptElement.h
@@ -20,44 +20,44 @@
  */
 
 #pragma once
 
 #include "SVGElement.h"
-#include "SVGExternalResourcesRequired.h"
 #include "SVGURIReference.h"
 #include "ScriptElement.h"
 #include "XLinkNames.h"
 
 namespace WebCore {
 
-class SVGScriptElement final : public SVGElement, public SVGExternalResourcesRequired, public SVGURIReference, public ScriptElement {
+class SVGScriptElement final : public SVGElement, public SVGURIReference, public ScriptElement {
     WTF_MAKE_ISO_ALLOCATED(SVGScriptElement);
 public:
     static Ref<SVGScriptElement> create(const QualifiedName&, Document&, bool wasInsertedByParser);
 
     using SVGElement::ref;
     using SVGElement::deref;
 
 private:
     SVGScriptElement(const QualifiedName&, Document&, bool wasInsertedByParser, bool alreadyStarted);
 
-    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGScriptElement, SVGElement, SVGExternalResourcesRequired, SVGURIReference>;
+    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGScriptElement, SVGElement, SVGURIReference>;
     const SVGPropertyRegistry& propertyRegistry() const final { return m_propertyRegistry; }
 
     void parseAttribute(const QualifiedName&, const AtomString&) final;
     void svgAttributeChanged(const QualifiedName&) final;
 
     InsertedIntoAncestorResult insertedIntoAncestor(InsertionType, ContainerNode&) final;
     void didFinishInsertingNode() final;
     void childrenChanged(const ChildChange&) final;
 
     bool isURLAttribute(const Attribute& attribute) const final { return attribute.name() == sourceAttributeValue(); }
-    void finishParsingChildren() final;
     void addSubresourceAttributeURLs(ListHashSet<URL>&) const final;
 
-    bool haveLoadedRequiredResources() final { return SVGExternalResourcesRequired::haveLoadedRequiredResources(); }
+    Ref<Element> cloneElementWithoutAttributesAndChildren(Document&) final;
+    bool rendererIsNeeded(const RenderStyle&) final { return false; }
 
+    // ScriptElement
     String sourceAttributeValue() const final { return href(); }
     String charsetAttributeValue() const final { return String(); }
     String typeAttributeValue() const final { return getAttribute(SVGNames::typeAttr).string(); }
     String languageAttributeValue() const final { return String(); }
     String forAttributeValue() const final { return String(); }
@@ -65,26 +65,27 @@
     bool hasAsyncAttribute() const final { return false; }
     bool hasDeferAttribute() const final { return false; }
     bool hasNoModuleAttribute() const final { return false; }
     ReferrerPolicy referrerPolicy() const final { return ReferrerPolicy::EmptyString; }
     bool hasSourceAttribute() const final { return hasAttribute(SVGNames::hrefAttr) || hasAttribute(XLinkNames::hrefAttr); }
+    void dispatchLoadEvent() final { SVGURIReference::dispatchLoadEvent(); }
+    void dispatchErrorEvent() final;
 
-    void dispatchLoadEvent() final { SVGExternalResourcesRequired::dispatchLoadEvent(); }
+    // SVGElement
+    bool haveLoadedRequiredResources() final { return SVGURIReference::haveLoadedRequiredResources(); }
+    Timer* loadEventTimer() final { return &m_loadEventTimer; }
 
-    Ref<Element> cloneElementWithoutAttributesAndChildren(Document&) final;
-    bool rendererIsNeeded(const RenderStyle&) final { return false; }
-
-    // SVGExternalResourcesRequired
-    void setHaveFiredLoadEvent(bool haveFiredLoadEvent) final { ScriptElement::setHaveFiredLoadEvent(haveFiredLoadEvent); }
-    bool isParserInserted() const final { return ScriptElement::isParserInserted(); }
+    // SVGURIReference
     bool haveFiredLoadEvent() const final { return ScriptElement::haveFiredLoadEvent(); }
-    Timer* svgLoadEventTimer() final { return &m_svgLoadEventTimer; }
+    void setHaveFiredLoadEvent(bool haveFiredLoadEvent) final { ScriptElement::setHaveFiredLoadEvent(haveFiredLoadEvent); }
+    bool errorOccurred() const final { return ScriptElement::errorOccurred(); }
+    void setErrorOccurred(bool errorOccurred) final { ScriptElement::setErrorOccurred(errorOccurred); }
 
 #ifndef NDEBUG
     bool filterOutAnimatableAttribute(const QualifiedName& name) const final { return name == SVGNames::typeAttr; }
 #endif
 
     PropertyRegistry m_propertyRegistry { *this };
-    Timer m_svgLoadEventTimer;
+    Timer m_loadEventTimer;
 };
 
 } // namespace WebCore
