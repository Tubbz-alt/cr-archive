diff a/modules/javafx.web/src/main/native/Source/WTF/Scripts/generate-unified-source-bundles.rb b/modules/javafx.web/src/main/native/Source/WTF/Scripts/generate-unified-source-bundles.rb
--- a/modules/javafx.web/src/main/native/Source/WTF/Scripts/generate-unified-source-bundles.rb
+++ b/modules/javafx.web/src/main/native/Source/WTF/Scripts/generate-unified-source-bundles.rb
@@ -53,24 +53,27 @@
     puts "--feature-flags                 (-f) Space or semicolon separated list of enabled feature flags"
     puts
     puts "Generation options:"
     puts "--max-cpp-bundle-count               Use global sequential numbers for cpp bundle filenames and set the limit on the number"
     puts "--max-obj-c-bundle-count             Use global sequential numbers for Obj-C bundle filenames and set the limit on the number"
+    puts "--dense-bundle-filter                Densely bundle files matching the given path glob"
     exit 1
 end
 
 MAX_BUNDLE_SIZE = 8
+MAX_DENSE_BUNDLE_SIZE = 64
 $derivedSourcesPath = nil
 $unifiedSourceOutputPath = nil
 $sourceTreePath = nil
 $featureFlags = {}
 $verbose = false
 $mode = :GenerateBundles
 $inputXCFilelistPath = nil
 $outputXCFilelistPath = nil
 $maxCppBundleCount = nil
 $maxObjCBundleCount = nil
+$denseBundleFilters = []
 
 def log(text)
     $stderr.puts text if $verbose
 end
 
@@ -83,11 +86,12 @@
                ['--print-all-sources', GetoptLong::NO_ARGUMENT],
                ['--generate-xcfilelists', GetoptLong::NO_ARGUMENT],
                ['--input-xcfilelist-path', GetoptLong::REQUIRED_ARGUMENT],
                ['--output-xcfilelist-path', GetoptLong::REQUIRED_ARGUMENT],
                ['--max-cpp-bundle-count', GetoptLong::REQUIRED_ARGUMENT],
-               ['--max-obj-c-bundle-count', GetoptLong::REQUIRED_ARGUMENT]).each {
+               ['--max-obj-c-bundle-count', GetoptLong::REQUIRED_ARGUMENT],
+               ['--dense-bundle-filter', GetoptLong::REQUIRED_ARGUMENT]).each {
     | opt, arg |
     case opt
     when '--help'
         usage(nil)
     when '--verbose'
@@ -111,10 +115,12 @@
         $outputXCFilelistPath = arg
     when '--max-cpp-bundle-count'
         $maxCppBundleCount = arg.to_i
     when '--max-obj-c-bundle-count'
         $maxObjCBundleCount = arg.to_i
+    when '--dense-bundle-filter'
+        $denseBundleFilters.push(arg)
     end
 }
 
 $unifiedSourceOutputPath = $derivedSourcesPath + Pathname.new("unified-sources")
 FileUtils.mkpath($unifiedSourceOutputPath) if !$unifiedSourceOutputPath.exist? && $mode != :GenerateXCFilelists
@@ -192,10 +198,11 @@
         @bundleCount = 0
         @currentBundleText = ""
         @maxCount = max
         @extraFiles = []
         @currentDirectory = nil
+        @lastBundlingPrefix = nil
     end
 
     def writeFile(file, text)
         bundleFile = $unifiedSourceOutputPath + file
         if $mode == :GenerateXCFilelists
@@ -239,25 +246,37 @@
     end
 
     def addFile(sourceFile)
         path = sourceFile.path
         raise "wrong extension: #{path.extname} expected #{@extension}" unless path.extname == ".#{@extension}"
-        if (TopLevelDirectoryForPath(@currentDirectory) != TopLevelDirectoryForPath(path.dirname))
+        bundlePrefix, bundleSize = BundlePrefixAndSizeForPath(path)
+        if (@lastBundlingPrefix != bundlePrefix)
             log("Flushing because new top level directory; old: #{@currentDirectory}, new: #{path.dirname}")
             flush
+            @lastBundlingPrefix = bundlePrefix
             @currentDirectory = path.dirname
             @bundleCount = 0 unless @maxCount
         end
-        if @fileCount == MAX_BUNDLE_SIZE
+        if @fileCount >= bundleSize
             log("Flushing because new bundle is full (#{@fileCount} sources)")
             flush
         end
         @currentBundleText += "#include \"#{sourceFile}\"\n"
         @fileCount += 1
     end
 end
 
+def BundlePrefixAndSizeForPath(path)
+    topLevelDirectory = TopLevelDirectoryForPath(path.dirname)
+    $denseBundleFilters.each { |filter|
+        if path.fnmatch(filter)
+            return filter, MAX_DENSE_BUNDLE_SIZE
+        end
+    }
+    return topLevelDirectory, MAX_BUNDLE_SIZE
+end
+
 def TopLevelDirectoryForPath(path)
     if !path
         return nil
     end
     while path.dirname != path.dirname.dirname
