diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/PublicKeyCredential.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/PublicKeyCredential.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/PublicKeyCredential.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/PublicKeyCredential.h
@@ -26,44 +26,38 @@
 #pragma once
 
 #if ENABLE(WEB_AUTHN)
 
 #include "BasicCredential.h"
-#include "ExceptionOr.h"
-#include "JSDOMPromiseDeferred.h"
-#include <JavaScriptCore/ArrayBuffer.h>
+#include "IDLTypes.h"
 #include <wtf/Forward.h>
 
 namespace WebCore {
 
 class AuthenticatorResponse;
 class Document;
 
-struct PublicKeyCredentialData;
+struct AuthenticationExtensionsClientOutputs;
+
+template<typename IDLType> class DOMPromiseDeferred;
 
 class PublicKeyCredential final : public BasicCredential {
 public:
-    struct AuthenticationExtensionsClientOutputs {
-        Optional<bool> appid;
-    };
-
-    static RefPtr<PublicKeyCredential> tryCreate(const PublicKeyCredentialData&);
+    static Ref<PublicKeyCredential> create(Ref<AuthenticatorResponse>&&);
 
-    ArrayBuffer* rawId() const { return m_rawId.ptr(); }
+    ArrayBuffer* rawId() const;
     AuthenticatorResponse* response() const { return m_response.ptr(); }
     AuthenticationExtensionsClientOutputs getClientExtensionResults() const;
 
     static void isUserVerifyingPlatformAuthenticatorAvailable(Document&, DOMPromiseDeferred<IDLBoolean>&&);
 
 private:
-    PublicKeyCredential(Ref<ArrayBuffer>&& id, Ref<AuthenticatorResponse>&&, AuthenticationExtensionsClientOutputs&&);
+    PublicKeyCredential(Ref<AuthenticatorResponse>&&);
 
     Type credentialType() const final { return Type::PublicKey; }
 
-    Ref<ArrayBuffer> m_rawId;
     Ref<AuthenticatorResponse> m_response;
-    AuthenticationExtensionsClientOutputs m_extensions;
 };
 
 } // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_BASIC_CREDENTIAL(PublicKeyCredential, BasicCredential::Type::PublicKey)
