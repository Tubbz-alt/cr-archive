diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ConsoleMessage.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ConsoleMessage.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ConsoleMessage.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ConsoleMessage.cpp
@@ -50,21 +50,21 @@
     , m_url()
     , m_requestId(IdentifiersFactory::requestId(requestIdentifier))
 {
 }
 
-ConsoleMessage::ConsoleMessage(MessageSource source, MessageType type, MessageLevel level, const String& message, const String& url, unsigned line, unsigned column, JSC::ExecState* state, unsigned long requestIdentifier)
+ConsoleMessage::ConsoleMessage(MessageSource source, MessageType type, MessageLevel level, const String& message, const String& url, unsigned line, unsigned column, JSC::JSGlobalObject* globalObject, unsigned long requestIdentifier)
     : m_source(source)
     , m_type(type)
     , m_level(level)
     , m_message(message)
     , m_url(url)
     , m_line(line)
     , m_column(column)
     , m_requestId(IdentifiersFactory::requestId(requestIdentifier))
 {
-    autogenerateMetadata(state);
+    autogenerateMetadata(globalObject);
 }
 
 ConsoleMessage::ConsoleMessage(MessageSource source, MessageType type, MessageLevel level, const String& message, Ref<ScriptCallStack>&& callStack, unsigned long requestIdentifier)
     : m_source(source)
     , m_type(type)
@@ -98,30 +98,32 @@
         m_line = frame->lineNumber();
         m_column = frame->columnNumber();
     }
 }
 
-ConsoleMessage::ConsoleMessage(MessageSource source, MessageType type, MessageLevel level, const String& message, Ref<ScriptArguments>&& arguments, JSC::ExecState* state, unsigned long requestIdentifier)
+ConsoleMessage::ConsoleMessage(MessageSource source, MessageType type, MessageLevel level, const String& message, Ref<ScriptArguments>&& arguments, JSC::JSGlobalObject* globalObject, unsigned long requestIdentifier)
     : m_source(source)
     , m_type(type)
     , m_level(level)
     , m_message(message)
     , m_arguments(WTFMove(arguments))
     , m_url()
     , m_requestId(IdentifiersFactory::requestId(requestIdentifier))
 {
-    autogenerateMetadata(state);
+    autogenerateMetadata(globalObject);
 }
 
-ConsoleMessage::ConsoleMessage(MessageSource source, MessageType type, MessageLevel level, Vector<JSONLogValue>&& messages, JSC::ExecState* state, unsigned long requestIdentifier)
+ConsoleMessage::ConsoleMessage(MessageSource source, MessageType type, MessageLevel level, Vector<JSONLogValue>&& messages, JSC::JSGlobalObject* globalObject, unsigned long requestIdentifier)
     : m_source(source)
     , m_type(type)
     , m_level(level)
     , m_url()
-    , m_scriptState(state)
     , m_requestId(IdentifiersFactory::requestId(requestIdentifier))
 {
+    if (globalObject)
+        m_globalObject = { globalObject->vm(), globalObject };
+
     if (!messages.size())
         return;
 
     m_jsonLogValues.reserveInitialCapacity(messages.size());
 
@@ -151,20 +153,20 @@
 
 ConsoleMessage::~ConsoleMessage()
 {
 }
 
-void ConsoleMessage::autogenerateMetadata(JSC::ExecState* state)
+void ConsoleMessage::autogenerateMetadata(JSC::JSGlobalObject* globalObject)
 {
-    if (!state)
+    if (!globalObject)
         return;
 
     if (m_type == MessageType::EndGroup)
         return;
 
     // FIXME: Should this really be using "for console" in the generic ConsoleMessage autogeneration? This can skip the first frame.
-    m_callStack = createScriptCallStackForConsole(state);
+    m_callStack = createScriptCallStackForConsole(globalObject);
 
     if (const ScriptCallFrame* frame = m_callStack->firstNonNativeCallFrame()) {
         m_url = frame->sourceURL();
         m_line = frame->lineNumber();
         m_column = frame->columnNumber();
@@ -243,11 +245,11 @@
 
     if (m_source == MessageSource::Network && !m_requestId.isEmpty())
         messageObject->setNetworkRequestId(m_requestId);
 
     if ((m_arguments && m_arguments->argumentCount()) || m_jsonLogValues.size()) {
-        InjectedScript injectedScript = injectedScriptManager.injectedScriptFor(scriptState());
+        InjectedScript injectedScript = injectedScriptManager.injectedScriptFor(globalObject());
         if (!injectedScript.hasNoValue()) {
             auto argumentsObject = JSON::ArrayOf<Protocol::Runtime::RemoteObject>::create();
             if (m_arguments && m_arguments->argumentCount()) {
                 if (m_type == MessageType::Table && generatePreview && m_arguments->argumentCount()) {
                     auto table = m_arguments->argumentAt(0);
@@ -338,19 +340,22 @@
     if (!m_message)
         m_message = "<message collected>"_s;
 
     if (m_arguments)
         m_arguments = nullptr;
+
+    if (m_globalObject)
+        m_globalObject.clear();
 }
 
-JSC::ExecState* ConsoleMessage::scriptState() const
+JSC::JSGlobalObject* ConsoleMessage::globalObject() const
 {
     if (m_arguments)
-        return m_arguments->globalState();
+        return m_arguments->globalObject();
 
-    if (m_scriptState)
-        return m_scriptState;
+    if (m_globalObject)
+        return m_globalObject.get();
 
     return nullptr;
 }
 
 unsigned ConsoleMessage::argumentCount() const
