diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/VMTraps.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/VMTraps.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/VMTraps.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/VMTraps.cpp
@@ -25,10 +25,11 @@
 
 #include "config.h"
 #include "VMTraps.h"
 
 #include "CallFrame.h"
+#include "CallFrameInlines.h"
 #include "CodeBlock.h"
 #include "CodeBlockSet.h"
 #include "DFGCommonData.h"
 #include "ExceptionHelpers.h"
 #include "HeapInlines.h"
@@ -162,17 +163,17 @@
 void VMTraps::invalidateCodeBlocksOnStack()
 {
     invalidateCodeBlocksOnStack(vm().topCallFrame);
 }
 
-void VMTraps::invalidateCodeBlocksOnStack(ExecState* topCallFrame)
+void VMTraps::invalidateCodeBlocksOnStack(CallFrame* topCallFrame)
 {
     auto codeBlockSetLocker = holdLock(vm().heap.codeBlockSet().getLock());
     invalidateCodeBlocksOnStack(codeBlockSetLocker, topCallFrame);
 }
 
-void VMTraps::invalidateCodeBlocksOnStack(Locker<Lock>&, ExecState* topCallFrame)
+void VMTraps::invalidateCodeBlocksOnStack(Locker<Lock>&, CallFrame* topCallFrame)
 {
     if (!m_needToInvalidatedCodeBlocks)
         return;
 
     m_needToInvalidatedCodeBlocks = false;
@@ -332,11 +333,11 @@
         m_condition->notifyAll(locker);
     }
 #endif
 }
 
-void VMTraps::handleTraps(ExecState* exec, VMTraps::Mask mask)
+void VMTraps::handleTraps(JSGlobalObject* globalObject, CallFrame* callFrame, VMTraps::Mask mask)
 {
     VM& vm = this->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     {
@@ -352,21 +353,26 @@
     while (needTrapHandling(mask)) {
         auto eventType = takeTopPriorityTrap(mask);
         switch (eventType) {
         case NeedDebuggerBreak:
             dataLog("VM ", RawPointer(&vm), " on pid ", getCurrentProcessID(), " received NeedDebuggerBreak trap\n");
-            invalidateCodeBlocksOnStack(exec);
+            invalidateCodeBlocksOnStack(callFrame);
+            break;
+
+        case NeedShellTimeoutCheck:
+            RELEASE_ASSERT(g_jscConfig.shellTimeoutCheckCallback);
+            g_jscConfig.shellTimeoutCheckCallback(vm);
             break;
 
         case NeedWatchdogCheck:
             ASSERT(vm.watchdog());
-            if (LIKELY(!vm.watchdog()->shouldTerminate(exec)))
+            if (LIKELY(!vm.watchdog()->shouldTerminate(globalObject)))
                 continue;
             FALLTHROUGH;
 
         case NeedTermination:
-            throwException(exec, scope, createTerminatedExecutionException(&vm));
+            throwException(globalObject, scope, createTerminatedExecutionException(&vm));
             return;
 
         default:
             RELEASE_ASSERT_NOT_REACHED();
         }
