diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/MediaKeys.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/MediaKeys.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/MediaKeys.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/MediaKeys.cpp
@@ -32,12 +32,15 @@
 #if ENABLE(ENCRYPTED_MEDIA)
 
 #include "CDM.h"
 #include "CDMClient.h"
 #include "CDMInstance.h"
+#include "EventLoop.h"
+#include "JSDOMPromiseDeferred.h"
 #include "Logging.h"
 #include "MediaKeySession.h"
+#include "ScriptExecutionContext.h"
 #include "SharedBuffer.h"
 
 namespace WebCore {
 
 MediaKeys::MediaKeys(bool useDistinctiveIdentifier, bool persistentStateAllowed, const Vector<MediaKeySessionType>& supportedSessionTypes, Ref<CDM>&& implementation, Ref<CDMInstance>&& instance)
@@ -76,11 +79,11 @@
     auto session = MediaKeySession::create(context, makeWeakPtr(*this), sessionType, m_useDistinctiveIdentifier, m_implementation.copyRef(), instanceSession.releaseNonNull());
     m_sessions.append(session.copyRef());
     return session;
 }
 
-void MediaKeys::setServerCertificate(const BufferSource& serverCertificate, Ref<DeferredPromise>&& promise)
+void MediaKeys::setServerCertificate(ScriptExecutionContext& context, const BufferSource& serverCertificate, Ref<DeferredPromise>&& promise)
 {
     // https://w3c.github.io/encrypted-media/#dom-mediakeys-setservercertificate
     // W3C Editor's Draft 09 November 2016
 
     // When this method is invoked, the user agent must run the following steps:
@@ -101,11 +104,11 @@
     auto certificate = SharedBuffer::create(serverCertificate.data(), serverCertificate.length());
 
     // 4. Let promise be a new promise.
     // 5. Run the following steps in parallel:
 
-    m_taskQueue.enqueueTask([this, certificate = WTFMove(certificate), promise = WTFMove(promise)] () mutable {
+    context.eventLoop().queueTask(TaskSource::Networking, [this, certificate = WTFMove(certificate), promise = WTFMove(promise)] () mutable {
         // 5.1. Use this object's cdm instance to process certificate.
         if (m_instance->setServerCertificate(WTFMove(certificate)) == CDMInstance::Failed) {
             // 5.2. If the preceding step failed, resolve promise with a new DOMException whose name is the appropriate error name.
             promise->reject(InvalidStateError);
             return;
