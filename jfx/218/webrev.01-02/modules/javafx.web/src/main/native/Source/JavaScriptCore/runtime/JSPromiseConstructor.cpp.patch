diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSPromiseConstructor.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSPromiseConstructor.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSPromiseConstructor.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSPromiseConstructor.cpp
@@ -28,11 +28,10 @@
 
 #include "BuiltinNames.h"
 #include "Error.h"
 #include "Exception.h"
 #include "GetterSetter.h"
-#include "IteratorOperations.h"
 #include "JSCBuiltins.h"
 #include "JSCInlines.h"
 #include "JSFunction.h"
 #include "JSPromise.h"
 #include "JSPromisePrototype.h"
@@ -61,38 +60,31 @@
 @end
 */
 
 JSPromiseConstructor* JSPromiseConstructor::create(VM& vm, Structure* structure, JSPromisePrototype* promisePrototype, GetterSetter* speciesSymbol)
 {
-    JSPromiseConstructor* constructor = new (NotNull, allocateCell<JSPromiseConstructor>(vm.heap)) JSPromiseConstructor(vm, structure);
+    JSGlobalObject* globalObject = structure->globalObject();
+    FunctionExecutable* executable = promiseConstructorPromiseConstructorCodeGenerator(vm);
+    JSPromiseConstructor* constructor = new (NotNull, allocateCell<JSPromiseConstructor>(vm.heap)) JSPromiseConstructor(vm, executable, globalObject, structure);
     constructor->finishCreation(vm, promisePrototype, speciesSymbol);
-    constructor->addOwnInternalSlots(vm, structure->globalObject());
+    constructor->addOwnInternalSlots(vm, globalObject);
     return constructor;
 }
 
 Structure* JSPromiseConstructor::createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
 {
-    return Structure::create(vm, globalObject, prototype, TypeInfo(InternalFunctionType, StructureFlags), info());
+    return Structure::create(vm, globalObject, prototype, TypeInfo(JSFunctionType, StructureFlags), info());
 }
 
-
-static EncodedJSValue JSC_HOST_CALL callPromise(ExecState*);
-static EncodedJSValue JSC_HOST_CALL constructPromise(ExecState*);
-
-JSPromiseConstructor::JSPromiseConstructor(VM& vm, Structure* structure)
-    : Base(vm, structure, callPromise, constructPromise)
-{
-}
-
-JSPromiseConstructor::JSPromiseConstructor(VM& vm, Structure* structure, NativeFunction functionForCall, NativeFunction functionForConstruct)
-    : Base(vm, structure, functionForCall, functionForConstruct)
+JSPromiseConstructor::JSPromiseConstructor(VM& vm, FunctionExecutable* executable, JSGlobalObject* globalObject, Structure* structure)
+    : Base(vm, executable, globalObject, structure)
 {
 }
 
 void JSPromiseConstructor::finishCreation(VM& vm, JSPromisePrototype* promisePrototype, GetterSetter* speciesSymbol)
 {
-    Base::finishCreation(vm, vm.propertyNames->Promise.string(), NameVisibility::Visible, NameAdditionMode::WithoutStructureTransition);
+    Base::finishCreation(vm);
     putDirectWithoutTransition(vm, vm.propertyNames->prototype, promisePrototype, PropertyAttribute::DontEnum | PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly);
     putDirectWithoutTransition(vm, vm.propertyNames->length, jsNumber(1), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
     putDirectNonIndexAccessorWithoutTransition(vm, vm.propertyNames->speciesSymbol, speciesSymbol, PropertyAttribute::Accessor | PropertyAttribute::ReadOnly | PropertyAttribute::DontEnum);
 }
 
@@ -100,36 +92,6 @@
 {
     JSC_BUILTIN_FUNCTION_WITHOUT_TRANSITION(vm.propertyNames->builtinNames().resolvePrivateName(), promiseConstructorResolveCodeGenerator, PropertyAttribute::DontEnum | PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly);
     JSC_BUILTIN_FUNCTION_WITHOUT_TRANSITION(vm.propertyNames->builtinNames().rejectPrivateName(), promiseConstructorRejectCodeGenerator, PropertyAttribute::DontEnum | PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly);
 }
 
-static EncodedJSValue JSC_HOST_CALL constructPromise(ExecState* exec)
-{
-    VM& vm = exec->vm();
-    auto scope = DECLARE_THROW_SCOPE(vm);
-    JSGlobalObject* globalObject = exec->jsCallee()->globalObject(vm);
-
-    JSValue newTarget = exec->newTarget();
-    if (newTarget.isUndefined())
-        return throwVMTypeError(exec, scope);
-
-    JSValue executor = exec->argument(0);
-    if (!executor.isFunction(vm))
-        return throwVMTypeError(exec, scope, "Promise constructor takes a function argument"_s);
-
-    Structure* promiseStructure = InternalFunction::createSubclassStructure(exec, exec->newTarget(), globalObject->promiseStructure());
-    RETURN_IF_EXCEPTION(scope, encodedJSValue());
-    JSPromise* promise = JSPromise::create(vm, promiseStructure);
-    promise->initialize(exec, globalObject, executor);
-    RETURN_IF_EXCEPTION(scope, encodedJSValue());
-
-    return JSValue::encode(promise);
-}
-
-static EncodedJSValue JSC_HOST_CALL callPromise(ExecState* exec)
-{
-    VM& vm = exec->vm();
-    auto scope = DECLARE_THROW_SCOPE(vm);
-    return JSValue::encode(throwConstructorCannotBeCalledAsFunctionTypeError(exec, scope, "Promise"));
-}
-
 } // namespace JSC
