diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayoutResolver.h b/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayoutResolver.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayoutResolver.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayoutResolver.h
@@ -56,15 +56,17 @@
 
         FloatRect rect() const;
         float expansion() const;
         ExpansionBehavior expansionBehavior() const;
         int baselinePosition() const;
+        int baselineOffset() const { return m_iterator.resolver().m_baseline; }
         StringView text() const;
         String textWithHyphen() const;
         const RenderObject& renderer() const;
         bool isEndOfLine() const;
         bool hasHyphen() const { return m_iterator.simpleRun().hasHyphen; }
+        bool isLineBreak() const { return m_iterator.simpleRun().isLineBreak; }
         const SimpleLineLayout::Run& simpleRun() const { return m_iterator.simpleRun(); }
 
         unsigned lineIndex() const;
 
     private:
@@ -87,19 +89,22 @@
         bool operator==(const Iterator&) const;
         bool operator!=(const Iterator&) const;
 
         Run operator*() const;
 
+        bool atBegin() const;
+
     private:
         const SimpleLineLayout::Run& simpleRun() const;
         unsigned lineIndex() const { return m_lineIndex; }
         Iterator& advance();
         Iterator& advanceLines(unsigned);
-        const RunResolver& resolver() const { return m_resolver; }
-        bool inQuirksMode() const { return m_resolver.m_inQuirksMode; }
+        const RunResolver& resolver() const { return *m_resolver; }
+        const Layout& layout() const { return *m_layout; }
 
-        const RunResolver& m_resolver;
+        RefPtr<const Layout> m_layout;
+        const RunResolver* m_resolver;
         unsigned m_runIndex;
         unsigned m_lineIndex;
     };
 
     RunResolver(const RenderBlockFlow&, const Layout&);
@@ -127,11 +132,10 @@
     const LayoutUnit m_baseline;
     const LayoutUnit m_borderAndPaddingBefore;
     const float m_ascent;
     const float m_descent;
     const float m_visualOverflowOffset;
-    const bool m_inQuirksMode;
 };
 
 class LineResolver {
 public:
     class Iterator {
@@ -216,11 +220,11 @@
 
 inline float RunResolver::Run::computeBaselinePosition() const
 {
     auto& resolver = m_iterator.resolver();
     auto offset = resolver.m_borderAndPaddingBefore + resolver.m_lineHeight * lineIndex();
-    if (!resolver.m_layout.hasLineStruts())
+    if (!m_iterator.layout().hasLineStruts())
         return offset + resolver.m_baseline;
     for (auto& strutEntry : resolver.m_layout.struts()) {
         if (strutEntry.lineBreak > lineIndex())
             break;
         offset += strutEntry.offset;
@@ -236,11 +240,11 @@
     return *this;
 }
 
 inline bool RunResolver::Iterator::operator==(const Iterator& other) const
 {
-    ASSERT(&m_resolver == &other.m_resolver);
+    ASSERT(m_resolver == other.m_resolver);
     return m_runIndex == other.m_runIndex;
 }
 
 inline bool RunResolver::Iterator::operator!=(const Iterator& other) const
 {
@@ -250,13 +254,18 @@
 inline RunResolver::Run RunResolver::Iterator::operator*() const
 {
     return Run(*this);
 }
 
+inline bool RunResolver::Iterator::atBegin() const
+{
+    return *this == resolver().begin();
+}
+
 inline const SimpleLineLayout::Run& RunResolver::Iterator::simpleRun() const
 {
-    return m_resolver.m_layout.runAt(m_runIndex);
+    return layout().runAt(m_runIndex);
 }
 
 inline RunResolver::Iterator RunResolver::begin() const
 {
     return Iterator(*this, 0, 0);
@@ -297,15 +306,10 @@
 {
     auto runRange = m_runResolver.rangeForRect(rect);
     return { Iterator(runRange.begin()), Iterator(runRange.end()) };
 }
 
-inline RunResolver runResolver(const RenderBlockFlow& flow, const Layout& layout)
-{
-    return RunResolver(flow, layout);
-}
-
 inline LineResolver lineResolver(const RunResolver& runResolver)
 {
     return LineResolver(runResolver);
 }
 
