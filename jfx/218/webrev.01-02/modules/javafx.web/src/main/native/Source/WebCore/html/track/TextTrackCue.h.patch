diff a/modules/javafx.web/src/main/native/Source/WebCore/html/track/TextTrackCue.h b/modules/javafx.web/src/main/native/Source/WebCore/html/track/TextTrackCue.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/track/TextTrackCue.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/track/TextTrackCue.h
@@ -1,8 +1,8 @@
 /*
  * Copyright (C) 2011 Google Inc. All rights reserved.
- * Copyright (C) 2012-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2012-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
  * met:
  *
@@ -32,21 +32,48 @@
 #pragma once
 
 #if ENABLE(VIDEO_TRACK)
 
 #include "Document.h"
+#include "DocumentFragment.h"
+#include "HTMLElement.h"
 #include <wtf/JSONValues.h>
 #include <wtf/MediaTime.h>
 
 namespace WebCore {
 
 class TextTrack;
+class TextTrackCue;
 
-class TextTrackCue : public RefCounted<TextTrackCue>, public EventTargetWithInlineData {
+class TextTrackCueBox : public HTMLElement {
+    WTF_MAKE_ISO_ALLOCATED(TextTrackCueBox);
+public:
+    static Ref<TextTrackCueBox> create(Document& document, TextTrackCue& cue)
+    {
+        return adoptRef(*new TextTrackCueBox(document, cue));
+    }
+
+    TextTrackCue* getCue() const;
+    virtual void applyCSSProperties(const IntSize&) { }
+
+protected:
+    TextTrackCueBox(Document&, TextTrackCue&);
+    ~TextTrackCueBox() { }
+
+private:
+
+    WeakPtr<TextTrackCue> m_cue;
+};
+
+class TextTrackCue : public RefCounted<TextTrackCue>, public EventTargetWithInlineData, public CanMakeWeakPtr<TextTrackCue> {
     WTF_MAKE_ISO_ALLOCATED(TextTrackCue);
 public:
     static const AtomString& cueShadowPseudoId();
+    static const AtomString& cueBackdropShadowPseudoId();
+    static const AtomString& cueBoxShadowPseudoId();
+
+    static ExceptionOr<Ref<TextTrackCue>> create(ScriptExecutionContext&, double start, double end, DocumentFragment&);
 
     TextTrack* track() const;
     void setTrack(TextTrack*);
 
     const String& id() const { return m_id; }
@@ -73,28 +100,39 @@
     virtual bool isOrderedBefore(const TextTrackCue*) const;
     virtual bool isPositionedAbove(const TextTrackCue* cue) const { return isOrderedBefore(cue); }
 
     bool hasEquivalentStartTime(const TextTrackCue&) const;
 
-    enum CueType { Data, Generic, WebVTT };
-    virtual CueType cueType() const = 0;
-    virtual bool isRenderable() const { return false; }
+    enum CueType { Generic, Data, ConvertedToWebVTT, WebVTT };
+    virtual CueType cueType() const { return CueType::Generic; }
+    virtual bool isRenderable() const;
 
     enum CueMatchRules { MatchAllFields, IgnoreDuration };
     virtual bool isEqual(const TextTrackCue&, CueMatchRules) const;
     virtual bool doesExtendCue(const TextTrackCue&) const;
 
     void willChange();
     virtual void didChange();
 
+    virtual RefPtr<TextTrackCueBox> getDisplayTree(const IntSize&, int);
+    virtual void removeDisplayTree();
+
+    virtual RefPtr<DocumentFragment> getCueAsHTML();
+
     String toJSONString() const;
-    String debugString() const;
 
     using RefCounted::ref;
     using RefCounted::deref;
 
+    virtual void recalculateStyles() { m_displayTreeNeedsUpdate = true; }
+    virtual void setFontSize(int, const IntSize&, bool important);
+    virtual void updateDisplayTree(const MediaTime&) { };
+
+    unsigned cueIndex() const;
+
 protected:
+    TextTrackCue(ScriptExecutionContext&, const MediaTime& start, const MediaTime& end, DocumentFragment&&);
     TextTrackCue(ScriptExecutionContext&, const MediaTime& start, const MediaTime& end);
 
     Document& ownerDocument() { return downcast<Document>(m_scriptExecutionContext); }
 
     virtual void toJSON(JSON::Object&) const;
@@ -109,23 +147,36 @@
     EventTargetInterface eventTargetInterface() const final { return TextTrackCueEventTargetInterfaceType; }
     ScriptExecutionContext* scriptExecutionContext() const final { return &m_scriptExecutionContext; }
 
     virtual bool cueContentsMatch(const TextTrackCue&) const;
 
+    void rebuildDisplayTree();
+
     String m_id;
     MediaTime m_startTime;
     MediaTime m_endTime;
     int m_processingCueChanges { 0 };
 
     TextTrack* m_track { nullptr };
 
     ScriptExecutionContext& m_scriptExecutionContext;
 
-    bool m_isActive : 1;
-    bool m_pauseOnExit : 1;
+    RefPtr<DocumentFragment> m_cueNode;
+    RefPtr<TextTrackCueBox> m_displayTree;
+
+    int m_fontSize { 0 };
+    bool m_fontSizeIsImportant { false };
+
+    bool m_isActive { false };
+    bool m_pauseOnExit { false };
+    bool m_displayTreeNeedsUpdate { true };
 };
 
+#ifndef NDEBUG
+TextStream& operator<<(TextStream&, const TextTrackCue&);
+#endif
+
 } // namespace WebCore
 
 namespace WTF {
 
 template<typename> struct LogArgument;
