diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSegmentedFontFace.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSegmentedFontFace.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSegmentedFontFace.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSSegmentedFontFace.cpp
@@ -116,19 +116,26 @@
     if (addResult.isNewEntry) {
         for (auto& face : m_fontFaces) {
             if (face->computeFailureState())
                 continue;
 
-            auto selectionCapabilities = face->fontSelectionCapabilities();
+            auto selectionCapabilitiesWrapped = face->fontSelectionCapabilities();
+            ASSERT(selectionCapabilitiesWrapped.hasValue());
+            auto selectionCapabilities = selectionCapabilitiesWrapped.value();
+
             bool syntheticBold = (fontDescription.fontSynthesis() & FontSynthesisWeight) && !isFontWeightBold(selectionCapabilities.weight.maximum) && isFontWeightBold(desiredRequest.weight);
             bool syntheticItalic = (fontDescription.fontSynthesis() & FontSynthesisStyle) && !isItalic(selectionCapabilities.slope.maximum) && isItalic(desiredRequest.slope);
 
             // Metrics used for layout come from FontRanges::fontForFirstRange(), which assumes that the first font is non-null.
             auto fontAccessor = CSSFontAccessor::create(face, fontDescription, syntheticBold, syntheticItalic);
             if (result.isNull() && !fontAccessor->font(ExternalResourceDownloadPolicy::Forbid))
                 continue;
-            appendFont(result, WTFMove(fontAccessor), face->ranges());
+
+            auto faceRangesWrapped = face->ranges();
+            ASSERT(faceRangesWrapped.hasValue());
+            auto faceRanges = faceRangesWrapped.value();
+            appendFont(result, WTFMove(fontAccessor), faceRanges);
         }
     }
     return result;
 }
 
