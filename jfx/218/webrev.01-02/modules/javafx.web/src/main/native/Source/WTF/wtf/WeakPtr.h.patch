diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/WeakPtr.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/WeakPtr.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/WeakPtr.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/WeakPtr.h
@@ -66,26 +66,26 @@
     }
 
     explicit operator bool() const { return m_ptr; }
     void clear() { m_ptr = nullptr; }
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     bool wasConstructedOnMainThread() const { return m_wasConstructedOnMainThread; }
 #endif
 
 private:
     template<typename T> explicit WeakPtrImpl(T* ptr)
         : m_ptr(static_cast<typename T::WeakValueType*>(ptr))
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         , m_wasConstructedOnMainThread(isMainThread())
 #endif
     {
         DID_CREATE_WEAK_PTR_IMPL(ptr);
     }
 
     void* m_ptr;
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     bool m_wasConstructedOnMainThread;
 #endif
 };
 
 template<typename T>
@@ -139,11 +139,11 @@
 class WeakPtrFactory {
     WTF_MAKE_NONCOPYABLE(WeakPtrFactory<T>);
     WTF_MAKE_FAST_ALLOCATED;
 public:
     WeakPtrFactory()
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         : m_wasConstructedOnMainThread(isMainThread())
 #endif
     {
     }
 
@@ -190,11 +190,11 @@
 
 private:
     template<typename> friend class WeakHashSet;
 
     mutable RefPtr<WeakPtrImpl> m_impl;
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     bool m_wasConstructedOnMainThread;
 #endif
 };
 
 // We use lazy initialization of the WeakPtrFactory by default to avoid unnecessary initialization. Eager
