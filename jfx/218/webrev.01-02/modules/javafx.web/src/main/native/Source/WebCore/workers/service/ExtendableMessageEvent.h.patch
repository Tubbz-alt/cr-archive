diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableMessageEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableMessageEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableMessageEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableMessageEvent.h
@@ -33,11 +33,11 @@
 #include "ServiceWorker.h"
 #include "ServiceWorkerClient.h"
 #include <wtf/Variant.h>
 
 namespace JSC {
-class ExecState;
+class CallFrame;
 class JSValue;
 }
 
 namespace WebCore {
 
@@ -46,20 +46,21 @@
 class ServiceWorkerClient;
 
 using ExtendableMessageEventSource = Variant<RefPtr<ServiceWorkerClient>, RefPtr<ServiceWorker>, RefPtr<MessagePort>>;
 
 class ExtendableMessageEvent final : public ExtendableEvent {
+    WTF_MAKE_ISO_ALLOCATED(ExtendableMessageEvent);
 public:
     struct Init : ExtendableEventInit {
         JSC::JSValue data;
         String origin;
         String lastEventId;
         Optional<ExtendableMessageEventSource> source;
         Vector<RefPtr<MessagePort>> ports;
     };
 
-    static Ref<ExtendableMessageEvent> create(JSC::ExecState& state, const AtomString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
+    static Ref<ExtendableMessageEvent> create(JSC::JSGlobalObject& state, const AtomString& type, const Init& initializer, IsTrusted isTrusted = IsTrusted::No)
     {
         return adoptRef(*new ExtendableMessageEvent(state, type, initializer, isTrusted));
     }
 
     static Ref<ExtendableMessageEvent> create(Vector<RefPtr<MessagePort>>&&, RefPtr<SerializedScriptValue>&&, const String& origin = { }, const String& lastEventId = { }, Optional<ExtendableMessageEventSource>&& source = WTF::nullopt);
@@ -73,11 +74,11 @@
     const Vector<RefPtr<MessagePort>>& ports() const { return m_ports; }
 
     EventInterface eventInterface() const final { return ExtendableMessageEventInterfaceType; }
 
 private:
-    ExtendableMessageEvent(JSC::ExecState&, const AtomString&, const Init&, IsTrusted);
+    ExtendableMessageEvent(JSC::JSGlobalObject&, const AtomString&, const Init&, IsTrusted);
     ExtendableMessageEvent(RefPtr<SerializedScriptValue>&& data, const String& origin, const String& lastEventId, Optional<ExtendableMessageEventSource>&&, Vector<RefPtr<MessagePort>>&&);
 
     RefPtr<SerializedScriptValue> m_data;
     String m_origin;
     String m_lastEventId;
