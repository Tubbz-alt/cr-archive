diff a/modules/javafx.web/src/main/native/Source/WebCore/style/StyleSharingResolver.cpp b/modules/javafx.web/src/main/native/Source/WebCore/style/StyleSharingResolver.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/style/StyleSharingResolver.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/style/StyleSharingResolver.cpp
@@ -24,20 +24,21 @@
  */
 
 #include "config.h"
 #include "StyleSharingResolver.h"
 
-#include "DocumentRuleSets.h"
 #include "ElementRuleCollector.h"
 #include "FullscreenManager.h"
 #include "HTMLInputElement.h"
 #include "HTMLNames.h"
 #include "NodeRenderStyle.h"
 #include "RenderStyle.h"
 #include "SVGElement.h"
 #include "ShadowRoot.h"
+#include "StyleResolver.h"
 #include "StyleScope.h"
+#include "StyleScopeRuleSets.h"
 #include "StyleUpdate.h"
 #include "StyledElement.h"
 #include "VisitedLinkState.h"
 #include "WebVTTElement.h"
 #include "XMLNames.h"
@@ -52,11 +53,11 @@
     const StyledElement& element;
     bool elementAffectedByClassRules;
     InsideLink elementLinkState;
 };
 
-SharingResolver::SharingResolver(const Document& document, const DocumentRuleSets& ruleSets, const SelectorFilter& selectorFilter)
+SharingResolver::SharingResolver(const Document& document, const ScopeRuleSets& ruleSets, const SelectorFilter& selectorFilter)
     : m_document(document)
     , m_ruleSets(ruleSets)
     , m_selectorFilter(selectorFilter)
 {
 }
@@ -66,11 +67,10 @@
     return parentElement.hasFlagsSetDuringStylingOfChildren();
 }
 
 static inline bool elementHasDirectionAuto(const Element& element)
 {
-    // FIXME: This line is surprisingly hot, we may wish to inline hasDirectionAuto into StyleResolver.
     return is<HTMLElement>(element) && downcast<HTMLElement>(element).hasDirectionAuto();
 }
 
 std::unique_ptr<RenderStyle> SharingResolver::resolve(const Element& searchElement, const Update& update)
 {
