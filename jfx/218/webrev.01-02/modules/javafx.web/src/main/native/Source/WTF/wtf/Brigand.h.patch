diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Brigand.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/Brigand.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Brigand.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Brigand.h
@@ -280,11 +280,11 @@
         struct dummy {};
         template <typename C, typename P>
         static auto test(P * p) -> decltype(C::at(*p), std::true_type());
         template <typename, typename>
         static std::false_type test(...);
-        static const bool value = std::is_same<std::true_type, decltype(test<T, dummy>(nullptr))>::value;
+        static constexpr bool value = std::is_same<std::true_type, decltype(test<T, dummy>(nullptr))>::value;
     };
     template <class L, typename Index, bool>
     struct at_dispatch
     {
         using type = at_c<L, Index::value>;
@@ -2284,11 +2284,11 @@
         struct dummy {};
         template <typename C, typename P>
         static auto test(P * p) -> decltype(C::erase(type_<P>{}), std::true_type());
         template <typename, typename>
         static std::false_type test(...);
-        static const bool value = std::is_same<std::true_type, decltype(test<T, dummy>(nullptr))>::value;
+        static constexpr bool value = std::is_same<std::true_type, decltype(test<T, dummy>(nullptr))>::value;
     };
     template<class L, class I, bool>
     struct erase_dispatch
     {
         using type = erase_c<L, I::value>;
