diff a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserContext.h b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserContext.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserContext.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserContext.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -24,12 +24,14 @@
  */
 
 #pragma once
 
 #include "CSSParserMode.h"
+#include "StyleRuleType.h"
 #include "TextEncoding.h"
 #include <wtf/HashFunctions.h>
+#include <wtf/Optional.h>
 #include <wtf/URL.h>
 #include <wtf/URLHash.h>
 #include <wtf/text/StringHash.h>
 
 namespace WebCore {
@@ -37,16 +39,18 @@
 class Document;
 
 struct CSSParserContext {
     WTF_MAKE_FAST_ALLOCATED;
 public:
+
     CSSParserContext(CSSParserMode, const URL& baseURL = URL());
     WEBCORE_EXPORT CSSParserContext(const Document&, const URL& baseURL = URL(), const String& charset = emptyString());
 
     URL baseURL;
     String charset;
     CSSParserMode mode { HTMLStandardMode };
+    Optional<StyleRuleType> enclosingRuleType;
     bool isHTMLDocument { false };
 #if ENABLE(TEXT_AUTOSIZING)
     bool textAutosizingEnabled { false };
 #endif
 #if ENABLE(OVERFLOW_SCROLLING_TOUCH)
@@ -59,26 +63,18 @@
     bool colorFilterEnabled { false };
 #if ENABLE(ATTACHMENT_ELEMENT)
     bool attachmentEnabled { false };
 #endif
     bool deferredCSSParserEnabled { false };
+    bool scrollBehaviorEnabled { false };
 
     // This is only needed to support getMatchedCSSRules.
     bool hasDocumentSecurityOrigin { false };
 
     bool useSystemAppearance { false };
 
-    URL completeURL(const String& url) const
-    {
-        if (url.isNull())
-            return URL();
-        if (charset.isEmpty())
-            return URL(baseURL, url);
-        TextEncoding encoding(charset);
-        auto& encodingForURLParsing = encoding.encodingForFormSubmissionOrURLParsing();
-        return URL(baseURL, url, encodingForURLParsing == UTF8Encoding() ? nullptr : &encodingForURLParsing);
-    }
+    URL completeURL(const String& url) const;
 
     bool isContentOpaque { false };
 };
 
 bool operator==(const CSSParserContext&, const CSSParserContext&);
@@ -110,11 +106,12 @@
             & key.hasDocumentSecurityOrigin                 << 9
             & key.useSystemAppearance                       << 10
 #if ENABLE(ATTACHMENT_ELEMENT)
             & key.attachmentEnabled                         << 11
 #endif
-            & key.mode                                      << 12; // Keep this last.
+            & key.scrollBehaviorEnabled                     << 12
+            & key.mode                                      << 13; // Keep this last.
         hash ^= WTF::intHash(bits);
         return hash;
     }
     static bool equal(const CSSParserContext& a, const CSSParserContext& b)
     {
