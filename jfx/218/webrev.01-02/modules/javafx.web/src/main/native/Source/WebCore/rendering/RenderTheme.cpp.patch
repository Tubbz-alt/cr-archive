diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTheme.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTheme.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTheme.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderTheme.cpp
@@ -76,30 +76,30 @@
 
 RenderTheme::RenderTheme()
 {
 }
 
-void RenderTheme::adjustStyle(StyleResolver& styleResolver, RenderStyle& style, const Element* element, bool UAHasAppearance, const BorderData& border, const FillLayer& background, const Color& backgroundColor)
+void RenderTheme::adjustStyle(RenderStyle& style, const Element* element, const RenderStyle* userAgentAppearanceStyle)
 {
     // Force inline and table display styles to be inline-block (except for table- which is block)
     ControlPart part = style.appearance();
     if (style.display() == DisplayType::Inline || style.display() == DisplayType::InlineTable || style.display() == DisplayType::TableRowGroup
         || style.display() == DisplayType::TableHeaderGroup || style.display() == DisplayType::TableFooterGroup
         || style.display() == DisplayType::TableRow || style.display() == DisplayType::TableColumnGroup || style.display() == DisplayType::TableColumn
         || style.display() == DisplayType::TableCell || style.display() == DisplayType::TableCaption)
         style.setDisplay(DisplayType::InlineBlock);
-    else if (style.display() == DisplayType::Compact || style.display() == DisplayType::ListItem || style.display() == DisplayType::Table)
+    else if (style.display() == DisplayType::ListItem || style.display() == DisplayType::Table)
         style.setDisplay(DisplayType::Block);
 
-    if (UAHasAppearance && isControlStyled(style, border, background, backgroundColor)) {
+    if (userAgentAppearanceStyle && isControlStyled(style, *userAgentAppearanceStyle)) {
         switch (part) {
         case MenulistPart:
             style.setAppearance(MenulistButtonPart);
             part = MenulistButtonPart;
             break;
         case TextFieldPart:
-            adjustTextFieldStyle(styleResolver, style, element);
+            adjustTextFieldStyle(style, element);
             FALLTHROUGH;
         default:
             style.setAppearance(NoControlPart);
             break;
         }
@@ -198,87 +198,87 @@
 
     // Call the appropriate style adjustment method based off the appearance value.
     switch (style.appearance()) {
 #if !USE(NEW_THEME)
     case CheckboxPart:
-        return adjustCheckboxStyle(styleResolver, style, element);
+        return adjustCheckboxStyle(style, element);
     case RadioPart:
-        return adjustRadioStyle(styleResolver, style, element);
+        return adjustRadioStyle(style, element);
     case PushButtonPart:
     case SquareButtonPart:
 #if ENABLE(INPUT_TYPE_COLOR)
     case ColorWellPart:
 #endif
     case DefaultButtonPart:
     case ButtonPart:
-        return adjustButtonStyle(styleResolver, style, element);
+        return adjustButtonStyle(style, element);
     case InnerSpinButtonPart:
-        return adjustInnerSpinButtonStyle(styleResolver, style, element);
+        return adjustInnerSpinButtonStyle(style, element);
 #endif
     case TextFieldPart:
-        return adjustTextFieldStyle(styleResolver, style, element);
+        return adjustTextFieldStyle(style, element);
     case TextAreaPart:
-        return adjustTextAreaStyle(styleResolver, style, element);
+        return adjustTextAreaStyle(style, element);
     case MenulistPart:
-        return adjustMenuListStyle(styleResolver, style, element);
+        return adjustMenuListStyle(style, element);
     case MenulistButtonPart:
-        return adjustMenuListButtonStyle(styleResolver, style, element);
+        return adjustMenuListButtonStyle(style, element);
     case MediaPlayButtonPart:
     case MediaCurrentTimePart:
     case MediaTimeRemainingPart:
     case MediaEnterFullscreenButtonPart:
     case MediaExitFullscreenButtonPart:
     case MediaMuteButtonPart:
     case MediaVolumeSliderContainerPart:
-        return adjustMediaControlStyle(styleResolver, style, element);
+        return adjustMediaControlStyle(style, element);
     case MediaSliderPart:
     case MediaVolumeSliderPart:
     case MediaFullScreenVolumeSliderPart:
     case SliderHorizontalPart:
     case SliderVerticalPart:
-        return adjustSliderTrackStyle(styleResolver, style, element);
+        return adjustSliderTrackStyle(style, element);
     case SliderThumbHorizontalPart:
     case SliderThumbVerticalPart:
-        return adjustSliderThumbStyle(styleResolver, style, element);
+        return adjustSliderThumbStyle(style, element);
     case SearchFieldPart:
-        return adjustSearchFieldStyle(styleResolver, style, element);
+        return adjustSearchFieldStyle(style, element);
     case SearchFieldCancelButtonPart:
-        return adjustSearchFieldCancelButtonStyle(styleResolver, style, element);
+        return adjustSearchFieldCancelButtonStyle(style, element);
     case SearchFieldDecorationPart:
-        return adjustSearchFieldDecorationPartStyle(styleResolver, style, element);
+        return adjustSearchFieldDecorationPartStyle(style, element);
     case SearchFieldResultsDecorationPart:
-        return adjustSearchFieldResultsDecorationPartStyle(styleResolver, style, element);
+        return adjustSearchFieldResultsDecorationPartStyle(style, element);
     case SearchFieldResultsButtonPart:
-        return adjustSearchFieldResultsButtonStyle(styleResolver, style, element);
+        return adjustSearchFieldResultsButtonStyle(style, element);
     case ProgressBarPart:
-        return adjustProgressBarStyle(styleResolver, style, element);
+        return adjustProgressBarStyle(style, element);
 #if ENABLE(METER_ELEMENT)
     case MeterPart:
     case RelevancyLevelIndicatorPart:
     case ContinuousCapacityLevelIndicatorPart:
     case DiscreteCapacityLevelIndicatorPart:
     case RatingLevelIndicatorPart:
-        return adjustMeterStyle(styleResolver, style, element);
+        return adjustMeterStyle(style, element);
 #endif
 #if ENABLE(SERVICE_CONTROLS)
     case ImageControlsButtonPart:
         break;
 #endif
     case CapsLockIndicatorPart:
-        return adjustCapsLockIndicatorStyle(styleResolver, style, element);
+        return adjustCapsLockIndicatorStyle(style, element);
 #if ENABLE(APPLE_PAY)
     case ApplePayButtonPart:
-        return adjustApplePayButtonStyle(styleResolver, style, element);
+        return adjustApplePayButtonStyle(style, element);
 #endif
 #if ENABLE(ATTACHMENT_ELEMENT)
     case AttachmentPart:
     case BorderlessAttachmentPart:
-        return adjustAttachmentStyle(styleResolver, style, element);
+        return adjustAttachmentStyle(style, element);
 #endif
 #if ENABLE(DATALIST_ELEMENT)
     case ListButtonPart:
-        return adjustListButtonStyle(styleResolver, style, element);
+        return adjustListButtonStyle(style, element);
 #endif
     default:
         break;
     }
 }
@@ -728,11 +728,11 @@
     // There are more leaves than this, but we'll patch this function as we add support for
     // more controls.
     return appearance != CheckboxPart && appearance != RadioPart;
 }
 
-bool RenderTheme::isControlStyled(const RenderStyle& style, const BorderData& border, const FillLayer& background, const Color& backgroundColor) const
+bool RenderTheme::isControlStyled(const RenderStyle& style, const RenderStyle& userAgentStyle) const
 {
     switch (style.appearance()) {
     case PushButtonPart:
     case SquareButtonPart:
 #if ENABLE(INPUT_TYPE_COLOR)
@@ -750,13 +750,13 @@
     case RatingLevelIndicatorPart:
     // FIXME: SearchFieldPart should be included here when making search fields style-able.
     case TextFieldPart:
     case TextAreaPart:
         // Test the style to see if the UA border and background match.
-        return style.border() != border
-            || style.backgroundLayers() != background
-            || !style.backgroundColorEqualsToColorIgnoringVisited(backgroundColor);
+        return style.border() != userAgentStyle.border()
+            || style.backgroundLayers() != userAgentStyle.backgroundLayers()
+            || !style.backgroundColorEqualsToColorIgnoringVisited(userAgentStyle.backgroundColor());
     default:
         return false;
     }
 }
 
@@ -924,11 +924,11 @@
     return o.style().appearance() == DefaultButtonPart;
 }
 
 #if !USE(NEW_THEME)
 
-void RenderTheme::adjustCheckboxStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderTheme::adjustCheckboxStyle(RenderStyle& style, const Element*) const
 {
     // A summary of the rules for checkbox designed to match WinIE:
     // width/height - honored (WinIE actually scales its control for small widths, but lets it overflow for small heights.)
     // font-size - not honored (control has no text), but we use it to decide which control size to use.
     setCheckboxSize(style);
@@ -941,11 +941,11 @@
     style.resetBorder();
 
     style.setBoxShadow(nullptr);
 }
 
-void RenderTheme::adjustRadioStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderTheme::adjustRadioStyle(RenderStyle& style, const Element*) const
 {
     // A summary of the rules for checkbox designed to match WinIE:
     // width/height - honored (WinIE actually scales its control for small widths, but lets it overflow for small heights.)
     // font-size - not honored (control has no text), but we use it to decide which control size to use.
     setRadioSize(style);
@@ -958,38 +958,38 @@
     style.resetBorder();
 
     style.setBoxShadow(nullptr);
 }
 
-void RenderTheme::adjustButtonStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderTheme::adjustButtonStyle(RenderStyle& style, const Element*) const
 {
     // Most platforms will completely honor all CSS, and so we have no need to
     // adjust the style at all by default. We will still allow the theme a crack
     // at setting up a desired vertical size.
     setButtonSize(style);
 }
 
-void RenderTheme::adjustInnerSpinButtonStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustInnerSpinButtonStyle(RenderStyle&, const Element*) const
 {
 }
 #endif
 
-void RenderTheme::adjustTextFieldStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustTextFieldStyle(RenderStyle&, const Element*) const
 {
 }
 
-void RenderTheme::adjustTextAreaStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustTextAreaStyle(RenderStyle&, const Element*) const
 {
 }
 
-void RenderTheme::adjustMenuListStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustMenuListStyle(RenderStyle&, const Element*) const
 {
 }
 
 #if ENABLE(METER_ELEMENT)
 
-void RenderTheme::adjustMeterStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderTheme::adjustMeterStyle(RenderStyle& style, const Element*) const
 {
     style.setBoxShadow(nullptr);
 }
 
 IntSize RenderTheme::meterSizeForBounds(const RenderMeter&, const IntRect& bounds) const
@@ -1007,22 +1007,22 @@
     return true;
 }
 
 #endif // METER_ELEMENT
 
-void RenderTheme::adjustCapsLockIndicatorStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustCapsLockIndicatorStyle(RenderStyle&, const Element*) const
 {
 }
 
 bool RenderTheme::paintCapsLockIndicator(const RenderObject&, const PaintInfo&, const IntRect&)
 {
     return false;
 }
 
 #if ENABLE(ATTACHMENT_ELEMENT)
 
-void RenderTheme::adjustAttachmentStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustAttachmentStyle(RenderStyle&, const Element*) const
 {
 }
 
 bool RenderTheme::paintAttachment(const RenderObject&, const PaintInfo&, const IntRect&)
 {
@@ -1047,11 +1047,11 @@
 {
     ASSERT(RuntimeEnabledFeatures::sharedFeatures().dataListElementEnabled());
     return "datalist { display: none; }"_s;
 }
 
-void RenderTheme::adjustListButtonStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustListButtonStyle(RenderStyle&, const Element*) const
 {
 }
 
 LayoutUnit RenderTheme::sliderTickSnappingThreshold() const
 {
@@ -1148,11 +1148,11 @@
 Seconds RenderTheme::animationDurationForProgressBar(RenderProgress&) const
 {
     return 0_s;
 }
 
-void RenderTheme::adjustProgressBarStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustProgressBarStyle(RenderStyle&, const Element*) const
 {
 }
 
 IntRect RenderTheme::progressBarRectForBounds(const RenderObject&, const IntRect& bounds) const
 {
@@ -1167,48 +1167,48 @@
 bool RenderTheme::shouldHaveCapsLockIndicator(const HTMLInputElement&) const
 {
     return false;
 }
 
-void RenderTheme::adjustMenuListButtonStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustMenuListButtonStyle(RenderStyle&, const Element*) const
 {
 }
 
-void RenderTheme::adjustMediaControlStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustMediaControlStyle(RenderStyle&, const Element*) const
 {
 }
 
-void RenderTheme::adjustSliderTrackStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustSliderTrackStyle(RenderStyle&, const Element*) const
 {
 }
 
-void RenderTheme::adjustSliderThumbStyle(StyleResolver&, RenderStyle& style, const Element* element) const
+void RenderTheme::adjustSliderThumbStyle(RenderStyle& style, const Element* element) const
 {
     adjustSliderThumbSize(style, element);
 }
 
 void RenderTheme::adjustSliderThumbSize(RenderStyle&, const Element*) const
 {
 }
 
-void RenderTheme::adjustSearchFieldStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustSearchFieldStyle(RenderStyle&, const Element*) const
 {
 }
 
-void RenderTheme::adjustSearchFieldCancelButtonStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustSearchFieldCancelButtonStyle(RenderStyle&, const Element*) const
 {
 }
 
-void RenderTheme::adjustSearchFieldDecorationPartStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustSearchFieldDecorationPartStyle(RenderStyle&, const Element*) const
 {
 }
 
-void RenderTheme::adjustSearchFieldResultsDecorationPartStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustSearchFieldResultsDecorationPartStyle(RenderStyle&, const Element*) const
 {
 }
 
-void RenderTheme::adjustSearchFieldResultsButtonStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderTheme::adjustSearchFieldResultsButtonStyle(RenderStyle&, const Element*) const
 {
 }
 
 void RenderTheme::purgeCaches()
 {
@@ -1283,77 +1283,76 @@
 
 Color RenderTheme::systemColor(CSSValueID cssValueId, OptionSet<StyleColor::Options> options) const
 {
     switch (cssValueId) {
     case CSSValueWebkitLink:
-        return options.contains(StyleColor::Options::ForVisitedLink) ? 0xFF551A8B : 0xFF0000EE;
+        return options.contains(StyleColor::Options::ForVisitedLink) ? SimpleColor { 0xFF551A8B } : SimpleColor { 0xFF0000EE };
     case CSSValueWebkitActivelink:
-        return 0xFFFF0000;
+        return SimpleColor { 0xFFFF0000 };
     case CSSValueActiveborder:
-        return 0xFFFFFFFF;
+        return Color::white;
     case CSSValueActivebuttontext:
-        return 0xFF000000;
+        return Color::black;
     case CSSValueActivecaption:
-        return 0xFFCCCCCC;
+        return SimpleColor { 0xFFCCCCCC };
     case CSSValueAppworkspace:
-        return 0xFFFFFFFF;
+        return Color::white;
     case CSSValueBackground:
-        return 0xFF6363CE;
+        return SimpleColor { 0xFF6363CE };
     case CSSValueButtonface:
-        return 0xFFC0C0C0;
+        return Color::lightGray;
     case CSSValueButtonhighlight:
-        return 0xFFDDDDDD;
+        return SimpleColor { 0xFFDDDDDD };
     case CSSValueButtonshadow:
-        return 0xFF888888;
+        return SimpleColor { 0xFF888888 };
     case CSSValueButtontext:
-        return 0xFF000000;
+        return Color::black;
     case CSSValueCaptiontext:
-        return 0xFF000000;
+        return Color::black;
     case CSSValueGraytext:
-        return 0xFF808080;
+        return SimpleColor { 0xFF808080 };
     case CSSValueHighlight:
-        return 0xFFB5D5FF;
+        return SimpleColor { 0xFFB5D5FF };
     case CSSValueHighlighttext:
-        return 0xFF000000;
+        return Color::black;
     case CSSValueInactiveborder:
-        return 0xFFFFFFFF;
+        return Color::white;
     case CSSValueInactivecaption:
-        return 0xFFFFFFFF;
+        return Color::white;
     case CSSValueInactivecaptiontext:
-        return 0xFF7F7F7F;
+        return SimpleColor { 0xFF7F7F7F };
     case CSSValueInfobackground:
-        return 0xFFFBFCC5;
+        return SimpleColor { 0xFFFBFCC5 };
     case CSSValueInfotext:
-        return 0xFF000000;
+        return Color::black;
     case CSSValueMenu:
-        return 0xFFC0C0C0;
+        return Color::lightGray;
     case CSSValueMenutext:
-        return 0xFF000000;
+        return Color::black;
     case CSSValueScrollbar:
-        return 0xFFFFFFFF;
+        return Color::white;
     case CSSValueText:
-        return 0xFF000000;
+        return Color::black;
     case CSSValueThreeddarkshadow:
-        return 0xFF666666;
+        return SimpleColor { 0xFF666666 };
     case CSSValueThreedface:
-        return 0xFFC0C0C0;
+        return Color::lightGray;
     case CSSValueThreedhighlight:
-        return 0xFFDDDDDD;
+        return SimpleColor { 0xFFDDDDDD };
     case CSSValueThreedlightshadow:
-        return 0xFFC0C0C0;
+        return Color::lightGray;
     case CSSValueThreedshadow:
-        return 0xFF888888;
+        return SimpleColor { 0xFF888888 };
     case CSSValueWindow:
-        return 0xFFFFFFFF;
+        return Color::white;
     case CSSValueWindowframe:
-        return 0xFFCCCCCC;
+        return SimpleColor { 0xFFCCCCCC };
     case CSSValueWindowtext:
-        return 0xFF000000;
+        return Color::black;
     default:
-        break;
+        return { };
     }
-    return Color();
 }
 
 Color RenderTheme::activeTextSearchHighlightColor(OptionSet<StyleColor::Options> options) const
 {
     auto& cache = colorCache(options);
