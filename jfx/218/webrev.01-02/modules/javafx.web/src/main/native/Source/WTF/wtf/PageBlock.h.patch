diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/PageBlock.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/PageBlock.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/PageBlock.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/PageBlock.h
@@ -23,12 +23,42 @@
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include <wtf/StdLibExtras.h>
+
 namespace WTF {
 
+// We attempt to guess a value that is *AT LEAST* as large as the system's actual page size.
+// This is impossible to do correctly at build time, but JSC really needs it at build time, so
+// we have a RELEASE_ASSERT() inside WTF::pageSize to make sure it is set properly at runtime.
+// All of these values are going to be incorrect on systems configured to use larger than normal
+// page size, so on such systems it is expected that WebKit will crash until this value is changed
+// and recompiled. Sorry.
+//
+// macOS x86_64 uses 4 KiB, but Apple's aarch64 systems use 16 KiB. Use 16 KiB on all Apple systems
+// for consistency.
+//
+// Most Linux and Windows systems use a page size of 4 KiB.
+//
+// On Linux, Power systems normally use 64 KiB pages.
+//
+// aarch64 systems seem to be all over the place. Most Linux distros use 4 KiB, but RHEL uses
+// 64 KiB. (Apple uses 16 KiB.)
+//
+// Use 64 KiB for any unknown CPUs to be conservative.
+#if OS(DARWIN)
+constexpr size_t CeilingOnPageSize = 16 * KB;
+#elif OS(WINDOWS) || CPU(MIPS) || CPU(MIPS64) || CPU(X86) || CPU(X86_64) || CPU(ARM) || CPU(ARM64)
+constexpr size_t CeilingOnPageSize = 4 * KB;
+#elif CPU(UNKNOWN) || CPU(PPC) || CPU(PPC64) || CPU(PPC64LE)
+constexpr size_t CeilingOnPageSize = 64 * KB;
+#else
+#error Must set CeilingOnPageSize in PageBlock.h when adding a new CPU architecture!
+#endif
+
 WTF_EXPORT_PRIVATE size_t pageSize();
 WTF_EXPORT_PRIVATE size_t pageMask();
 inline bool isPageAligned(void* address) { return !(reinterpret_cast<intptr_t>(address) & (pageSize() - 1)); }
 inline bool isPageAligned(size_t size) { return !(size & (pageSize() - 1)); }
 inline bool isPowerOfTwo(size_t size) { return !(size & (size - 1)); }
@@ -78,8 +108,9 @@
 {
 }
 
 } // namespace WTF
 
+using WTF::CeilingOnPageSize;
 using WTF::pageSize;
 using WTF::isPageAligned;
 using WTF::isPowerOfTwo;
