diff a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLScriptRunner.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLScriptRunner.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLScriptRunner.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/parser/HTMLScriptRunner.cpp
@@ -27,18 +27,18 @@
 #include "config.h"
 #include "HTMLScriptRunner.h"
 
 #include "Element.h"
 #include "Event.h"
+#include "EventLoop.h"
 #include "EventNames.h"
 #include "Frame.h"
 #include "HTMLInputStream.h"
 #include "HTMLNames.h"
 #include "HTMLScriptRunnerHost.h"
 #include "IgnoreDestructiveWriteCountIncrementer.h"
 #include "InlineClassicScript.h"
-#include "Microtasks.h"
 #include "MutationObserver.h"
 #include "NestingLevelIncrementer.h"
 #include "ScriptElement.h"
 #include "ScriptSourceCode.h"
 
@@ -104,12 +104,12 @@
 {
     // Stop watching loads before executeScript to prevent recursion if the script reloads itself.
     if (pendingScript.watchingForLoad())
         stopWatchingForLoad(pendingScript);
 
-    if (!isExecutingScript())
-        MicrotaskQueue::mainThreadQueue().performMicrotaskCheckpoint();
+    if (!isExecutingScript() && m_document)
+        m_document->eventLoop().performMicrotaskCheckpoint();
 
     {
         NestingLevelIncrementer nestingLevelIncrementer(m_scriptNestingLevel);
         pendingScript.element().executePendingScript(pendingScript);
     }
@@ -239,12 +239,12 @@
 
     // FIXME: This may be too agressive as we always deliver mutations at
     // every script element, even if it's not ready to execute yet. There's
     // unfortunately no obvious way to tell if prepareScript is going to
     // execute the script before calling it.
-    if (!isExecutingScript())
-        MicrotaskQueue::mainThreadQueue().performMicrotaskCheckpoint();
+    if (!isExecutingScript() && m_document)
+        m_document->eventLoop().performMicrotaskCheckpoint();
 
     InsertionPointRecord insertionPointRecord(m_host.inputStream());
     NestingLevelIncrementer nestingLevelIncrementer(m_scriptNestingLevel);
 
     scriptElement.prepareScript(scriptStartPosition);
