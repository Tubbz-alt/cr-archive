diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorAuditAccessibilityObject.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorAuditAccessibilityObject.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorAuditAccessibilityObject.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorAuditAccessibilityObject.cpp
@@ -27,11 +27,11 @@
 #include "config.h"
 #include "InspectorAuditAccessibilityObject.h"
 
 #include "AXObjectCache.h"
 #include "AccessibilityNodeObject.h"
-#include "AccessibilityObject.h"
+#include "AccessibilityObjectInterface.h"
 #include "ContainerNode.h"
 #include "Document.h"
 #include "Element.h"
 #include "ElementDescendantIterator.h"
 #include "HTMLNames.h"
@@ -51,11 +51,11 @@
 InspectorAuditAccessibilityObject::InspectorAuditAccessibilityObject(InspectorAuditAgent& auditAgent)
     : m_auditAgent(auditAgent)
 {
 }
 
-static AccessibilityObject* accessiblityObjectForNode(Node& node)
+static AXCoreObject* accessiblityObjectForNode(Node& node)
 {
     if (!AXObjectCache::accessibilityEnabled())
         AXObjectCache::enableAccessibility();
 
     if (AXObjectCache* axObjectCache = node.document().axObjectCache())
@@ -69,11 +69,11 @@
     ERROR_IF_NO_ACTIVE_AUDIT();
 
     Vector<Ref<Node>> nodes;
 
     for (Element& element : elementDescendants(is<ContainerNode>(container) ? downcast<ContainerNode>(*container) : document)) {
-        if (AccessibilityObject* axObject = accessiblityObjectForNode(element)) {
+        if (AXCoreObject* axObject = accessiblityObjectForNode(element)) {
             if (axObject->computedRoleString() == role)
                 nodes.append(element);
         }
     }
 
@@ -82,21 +82,21 @@
 
 ExceptionOr<RefPtr<Node>> InspectorAuditAccessibilityObject::getActiveDescendant(Node& node)
 {
     ERROR_IF_NO_ACTIVE_AUDIT();
 
-    if (AccessibilityObject* axObject = accessiblityObjectForNode(node)) {
-        if (AccessibilityObject* activeDescendant = axObject->activeDescendant())
+    if (AXCoreObject* axObject = accessiblityObjectForNode(node)) {
+        if (AXCoreObject* activeDescendant = axObject->activeDescendant())
             return activeDescendant->node();
     }
 
     return nullptr;
 }
 
-static void addChildren(AccessibilityObject& parentObject, Vector<RefPtr<Node>>& childNodes)
+static void addChildren(AXCoreObject& parentObject, Vector<RefPtr<Node>>& childNodes)
 {
-    for (const RefPtr<AccessibilityObject>& childObject : parentObject.children()) {
+    for (const auto& childObject : parentObject.children()) {
         if (Node* childNode = childObject->node())
             childNodes.append(childNode);
         else
             addChildren(*childObject, childNodes);
     }
@@ -106,11 +106,11 @@
 {
     ERROR_IF_NO_ACTIVE_AUDIT();
 
     Optional<Vector<RefPtr<Node>>> result;
 
-    if (AccessibilityObject* axObject = accessiblityObjectForNode(node)) {
+    if (AXCoreObject* axObject = accessiblityObjectForNode(node)) {
         Vector<RefPtr<Node>> childNodes;
         addChildren(*axObject, childNodes);
         result = WTFMove(childNodes);
     }
 
@@ -121,14 +121,14 @@
 {
     ERROR_IF_NO_ACTIVE_AUDIT();
 
     Optional<InspectorAuditAccessibilityObject::ComputedProperties> result;
 
-    if (AccessibilityObject* axObject = accessiblityObjectForNode(node)) {
+    if (AXCoreObject* axObject = accessiblityObjectForNode(node)) {
         ComputedProperties computedProperties;
 
-        AccessibilityObject* current = axObject;
+        AXCoreObject* current = axObject;
         while (current && (!computedProperties.busy || !computedProperties.busy.value())) {
             computedProperties.busy = current->isBusy();
             current = current->parentObject();
         }
 
@@ -245,11 +245,11 @@
 {
     ERROR_IF_NO_ACTIVE_AUDIT();
 
     Optional<Vector<RefPtr<Node>>> result;
 
-    if (AccessibilityObject* axObject = accessiblityObjectForNode(node)) {
+    if (AXCoreObject* axObject = accessiblityObjectForNode(node)) {
         Vector<RefPtr<Node>> controlledNodes;
 
         Vector<Element*> controlledElements;
         axObject->elementsFromAttribute(controlledElements, HTMLNames::aria_controlsAttr);
         for (Element* controlledElement : controlledElements) {
@@ -267,11 +267,11 @@
 {
     ERROR_IF_NO_ACTIVE_AUDIT();
 
     Optional<Vector<RefPtr<Node>>> result;
 
-    if (AccessibilityObject* axObject = accessiblityObjectForNode(node)) {
+    if (AXCoreObject* axObject = accessiblityObjectForNode(node)) {
         Vector<RefPtr<Node>> flowedNodes;
 
         Vector<Element*> flowedElements;
         axObject->elementsFromAttribute(flowedElements, HTMLNames::aria_flowtoAttr);
         for (Element* flowedElement : flowedElements) {
@@ -287,11 +287,11 @@
 
 ExceptionOr<RefPtr<Node>> InspectorAuditAccessibilityObject::getMouseEventNode(Node& node)
 {
     ERROR_IF_NO_ACTIVE_AUDIT();
 
-    if (AccessibilityObject* axObject = accessiblityObjectForNode(node)) {
+    if (AXCoreObject* axObject = accessiblityObjectForNode(node)) {
         if (is<AccessibilityNodeObject>(axObject))
             return downcast<AccessibilityNodeObject>(axObject)->mouseButtonListener(MouseButtonListenerResultFilter::IncludeBodyElement);
     }
 
     return nullptr;
@@ -301,11 +301,11 @@
 {
     ERROR_IF_NO_ACTIVE_AUDIT();
 
     Optional<Vector<RefPtr<Node>>> result;
 
-    if (AccessibilityObject* axObject = accessiblityObjectForNode(node)) {
+    if (AXCoreObject* axObject = accessiblityObjectForNode(node)) {
         if (axObject->supportsARIAOwns()) {
             Vector<RefPtr<Node>> ownedNodes;
 
             Vector<Element*> ownedElements;
             axObject->elementsFromAttribute(ownedElements, HTMLNames::aria_ownsAttr);
@@ -323,12 +323,12 @@
 
 ExceptionOr<RefPtr<Node>> InspectorAuditAccessibilityObject::getParentNode(Node& node)
 {
     ERROR_IF_NO_ACTIVE_AUDIT();
 
-    if (AccessibilityObject* axObject = accessiblityObjectForNode(node)) {
-        if (AccessibilityObject* parentObject = axObject->parentObjectUnignored())
+    if (AXCoreObject* axObject = accessiblityObjectForNode(node)) {
+        if (AXCoreObject* parentObject = axObject->parentObjectUnignored())
             return parentObject->node();
     }
 
     return nullptr;
 }
@@ -337,16 +337,16 @@
 {
     ERROR_IF_NO_ACTIVE_AUDIT();
 
     Optional<Vector<RefPtr<Node>>> result;
 
-    if (AccessibilityObject* axObject = accessiblityObjectForNode(node)) {
+    if (AXCoreObject* axObject = accessiblityObjectForNode(node)) {
         Vector<RefPtr<Node>> selectedChildNodes;
 
-        AccessibilityObject::AccessibilityChildrenVector selectedChildren;
+        AXCoreObject::AccessibilityChildrenVector selectedChildren;
         axObject->selectedChildren(selectedChildren);
-        for (RefPtr<AccessibilityObject>& selectedChildObject : selectedChildren) {
+        for (auto& selectedChildObject : selectedChildren) {
             if (Node* selectedChildNode = selectedChildObject->node())
                 selectedChildNodes.append(selectedChildNode);
         }
 
         result = WTFMove(selectedChildNodes);
