diff a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/ImageBitmapRenderingContext.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/ImageBitmapRenderingContext.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/ImageBitmapRenderingContext.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/ImageBitmapRenderingContext.cpp
@@ -34,13 +34,13 @@
 namespace WebCore {
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(ImageBitmapRenderingContext);
 
 #if USE(IOSURFACE_CANVAS_BACKING_STORE) || ENABLE(ACCELERATED_2D_CANVAS)
-static RenderingMode bufferRenderingMode = Accelerated;
+static RenderingMode bufferRenderingMode = RenderingMode::Accelerated;
 #else
-static RenderingMode bufferRenderingMode = Unaccelerated;
+static RenderingMode bufferRenderingMode = RenderingMode::Unaccelerated;
 #endif
 
 std::unique_ptr<ImageBitmapRenderingContext> ImageBitmapRenderingContext::create(CanvasBase& canvas, ImageBitmapRenderingContextSettings&& settings)
 {
     auto renderingContext = std::unique_ptr<ImageBitmapRenderingContext>(new ImageBitmapRenderingContext(canvas, WTFMove(settings)));
@@ -67,11 +67,11 @@
     return &downcast<HTMLCanvasElement>(base);
 }
 
 bool ImageBitmapRenderingContext::isAccelerated() const
 {
-    return bufferRenderingMode == Accelerated;
+    return bufferRenderingMode == RenderingMode::Accelerated;
 }
 
 void ImageBitmapRenderingContext::setOutputBitmap(RefPtr<ImageBitmap> imageBitmap)
 {
     // 1. If a bitmap argument was not provided, then:
