diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntPrototype.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntPrototype.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntPrototype.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntPrototype.cpp
@@ -39,13 +39,13 @@
 #include "NumberPrototype.h"
 #include <wtf/Assertions.h>
 
 namespace JSC {
 
-static EncodedJSValue JSC_HOST_CALL bigIntProtoFuncToString(ExecState*);
-static EncodedJSValue JSC_HOST_CALL bigIntProtoFuncToLocaleString(ExecState*);
-static EncodedJSValue JSC_HOST_CALL bigIntProtoFuncValueOf(ExecState*);
+static EncodedJSValue JSC_HOST_CALL bigIntProtoFuncToString(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL bigIntProtoFuncToLocaleString(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL bigIntProtoFuncValueOf(JSGlobalObject*, CallFrame*);
 
 }
 
 #include "BigIntPrototype.lut.h"
 
@@ -70,11 +70,11 @@
 
 void BigIntPrototype::finishCreation(VM& vm, JSGlobalObject*)
 {
     Base::finishCreation(vm);
     ASSERT(inherits(vm, info()));
-    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsString(vm, "BigInt"), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
+    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsNontrivialString(vm, "BigInt"_s), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
 }
 
 // ------------------------------ Functions ---------------------------
 
 static ALWAYS_INLINE JSBigInt* toThisBigIntValue(VM& vm, JSValue thisValue)
@@ -88,44 +88,49 @@
     }
 
     return nullptr;
 }
 
-EncodedJSValue JSC_HOST_CALL bigIntProtoFuncToString(ExecState* state)
+static JSValue bigIntProtoFuncToStringImpl(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = state->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    JSBigInt* value = toThisBigIntValue(vm, state->thisValue());
+    JSBigInt* value = toThisBigIntValue(vm, callFrame->thisValue());
     if (!value)
-        return throwVMTypeError(state, scope, "'this' value must be a BigInt or BigIntObject"_s);
+        return throwTypeError(globalObject, scope, "'this' value must be a BigInt or BigIntObject"_s);
 
     ASSERT(value);
 
-    int32_t radix = extractToStringRadixArgument(state, state->argument(0), scope);
-    RETURN_IF_EXCEPTION(scope, encodedJSValue());
+    int32_t radix = extractToStringRadixArgument(globalObject, callFrame->argument(0), scope);
+    RETURN_IF_EXCEPTION(scope, { });
 
-    String resultString = value->toString(state, radix);
-    RETURN_IF_EXCEPTION(scope, encodedJSValue());
+    String resultString = value->toString(globalObject, radix);
+    RETURN_IF_EXCEPTION(scope, { });
     scope.release();
     if (resultString.length() == 1)
-        return JSValue::encode(vm.smallStrings.singleCharacterString(resultString[0]));
+        return vm.smallStrings.singleCharacterString(resultString[0]);
 
-    return JSValue::encode(jsNontrivialString(vm, resultString));
+    return jsNontrivialString(vm, resultString);
 }
 
-EncodedJSValue JSC_HOST_CALL bigIntProtoFuncToLocaleString(ExecState* state)
+EncodedJSValue JSC_HOST_CALL bigIntProtoFuncToString(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return bigIntProtoFuncToString(state);
+    return JSValue::encode(bigIntProtoFuncToStringImpl(globalObject, callFrame));
 }
 
-EncodedJSValue JSC_HOST_CALL bigIntProtoFuncValueOf(ExecState* state)
+EncodedJSValue JSC_HOST_CALL bigIntProtoFuncToLocaleString(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = state->vm();
-    if (JSBigInt* value = toThisBigIntValue(vm, state->thisValue()))
+    return JSValue::encode(bigIntProtoFuncToStringImpl(globalObject, callFrame));
+}
+
+EncodedJSValue JSC_HOST_CALL bigIntProtoFuncValueOf(JSGlobalObject* globalObject, CallFrame* callFrame)
+{
+    VM& vm = globalObject->vm();
+    if (JSBigInt* value = toThisBigIntValue(vm, callFrame->thisValue()))
         return JSValue::encode(value);
 
     auto scope = DECLARE_THROW_SCOPE(vm);
-    return throwVMTypeError(state, scope, "'this' value must be a BigInt or BigIntObject"_s);
+    return throwVMTypeError(globalObject, scope, "'this' value must be a BigInt or BigIntObject"_s);
 }
 
 } // namespace JSC
