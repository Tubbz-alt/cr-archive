diff a/modules/javafx.web/src/main/native/Source/WebCore/style/ClassChangeInvalidation.cpp b/modules/javafx.web/src/main/native/Source/WebCore/style/ClassChangeInvalidation.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/style/ClassChangeInvalidation.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/style/ClassChangeInvalidation.cpp
@@ -27,13 +27,11 @@
 #include "ClassChangeInvalidation.h"
 
 #include "ElementChildIterator.h"
 #include "SpaceSplitString.h"
 #include "StyleInvalidationFunctions.h"
-#include "StyleInvalidator.h"
 #include <wtf/BitVector.h>
-#include <wtf/SetForScope.h>
 
 namespace WebCore {
 namespace Style {
 
 using ClassChangeVector = Vector<AtomStringImpl*, 4>;
@@ -111,22 +109,17 @@
     auto& ruleSets = m_element.styleResolver().ruleSets();
 
     for (auto* changedClass : changedClasses) {
         if (auto* invalidationRuleSets = ruleSets.classInvalidationRuleSets(changedClass)) {
             for (auto& invalidationRuleSet : *invalidationRuleSets)
-                m_invalidationRuleSets.append(&invalidationRuleSet);
+                Invalidator::addToMatchElementRuleSets(m_matchElementRuleSets, invalidationRuleSet);
         }
     }
 }
 
 void ClassChangeInvalidation::invalidateStyleWithRuleSets()
 {
-    SetForScope<bool> isInvalidating(DocumentRuleSets::s_isInvalidatingStyleWithRuleSets, true);
-
-    for (auto* invalidationRuleSet : m_invalidationRuleSets) {
-        Invalidator invalidator(*invalidationRuleSet->ruleSet);
-        invalidator.invalidateStyleWithMatchElement(m_element, invalidationRuleSet->matchElement);
-    }
+    Invalidator::invalidateWithMatchElementRuleSets(m_element, m_matchElementRuleSets);
 }
 
 }
 }
