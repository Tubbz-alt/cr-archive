diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityARIAGridRow.cpp b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityARIAGridRow.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityARIAGridRow.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityARIAGridRow.cpp
@@ -71,20 +71,20 @@
 
     unsigned level = hierarchicalLevel();
     auto& allRows = downcast<AccessibilityTable>(*parent).rows();
     int rowCount = allRows.size();
     for (int k = index + 1; k < rowCount; ++k) {
-        AccessibilityObject* row = allRows[k].get();
+        auto* row = allRows[k].get();
         // Stop at the first row that doesn't match the correct level.
         if (row->hierarchicalLevel() != level + 1)
             break;
 
         disclosedRows.append(row);
     }
 }
 
-AccessibilityObject* AccessibilityARIAGridRow::disclosedByRow() const
+AXCoreObject* AccessibilityARIAGridRow::disclosedByRow() const
 {
     // The row that discloses this one is the row in the table
     // that is aria-level subtract 1 from this row.
     AccessibilityObject* parent = parentObjectUnignored();
     if (!is<AccessibilityTable>(*parent) || !downcast<AccessibilityTable>(*parent).isExposableThroughAccessibility())
@@ -101,11 +101,11 @@
     int rowCount = allRows.size();
     if (index >= rowCount)
         return nullptr;
 
     for (int k = index - 1; k >= 0; --k) {
-        AccessibilityObject* row = allRows[k].get();
+        auto* row = allRows[k].get();
         if (row->hierarchicalLevel() == level - 1)
             return row;
     }
 
     return nullptr;
@@ -131,11 +131,11 @@
     }
 
     return nullptr;
 }
 
-AccessibilityObject* AccessibilityARIAGridRow::headerObject()
+AXCoreObject* AccessibilityARIAGridRow::headerObject()
 {
     for (const auto& child : children()) {
         if (child->ariaRoleAttribute() == AccessibilityRole::RowHeader)
             return child.get();
     }
