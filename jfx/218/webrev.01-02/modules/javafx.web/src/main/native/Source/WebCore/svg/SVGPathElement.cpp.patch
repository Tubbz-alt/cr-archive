diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGPathElement.cpp
@@ -35,11 +35,10 @@
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(SVGPathElement);
 
 inline SVGPathElement::SVGPathElement(const QualifiedName& tagName, Document& document)
     : SVGGeometryElement(tagName, document)
-    , SVGExternalResourcesRequired(this)
 {
     ASSERT(hasTagName(SVGNames::pathTag));
 
     static std::once_flag onceFlag;
     std::call_once(onceFlag, [] {
@@ -59,11 +58,10 @@
             document().accessSVGExtensions().reportError("Problem parsing d=\"" + value + "\"");
         return;
     }
 
     SVGGeometryElement::parseAttribute(name, value);
-    SVGExternalResourcesRequired::parseAttribute(name, value);
 }
 
 void SVGPathElement::svgAttributeChanged(const QualifiedName& attrName)
 {
     if (attrName == SVGNames::dAttr) {
@@ -77,11 +75,10 @@
 
         return;
     }
 
     SVGGeometryElement::svgAttributeChanged(attrName);
-    SVGExternalResourcesRequired::svgAttributeChanged(attrName);
 }
 
 void SVGPathElement::invalidateMPathDependencies()
 {
     // <mpath> can only reference <path> but this dependency is not handled in
@@ -107,27 +104,25 @@
     invalidateMPathDependencies();
 }
 
 float SVGPathElement::getTotalLength() const
 {
-    float totalLength = 0;
-    getTotalLengthOfSVGPathByteStream(pathByteStream(), totalLength);
-    return totalLength;
+    return getTotalLengthOfSVGPathByteStream(pathByteStream());
 }
 
-Ref<SVGPoint> SVGPathElement::getPointAtLength(float length) const
+ExceptionOr<Ref<SVGPoint>> SVGPathElement::getPointAtLength(float distance) const
 {
-    FloatPoint point;
-    getPointAtLengthOfSVGPathByteStream(pathByteStream(), length, point);
-    return SVGPoint::create(point);
+    // Spec: Clamp distance to [0, length].
+    distance = clampTo<float>(distance, 0, getTotalLength());
+
+    // Spec: Return a newly created, detached SVGPoint object.
+    return SVGPoint::create(getPointAtLengthOfSVGPathByteStream(pathByteStream(), distance));
 }
 
 unsigned SVGPathElement::getPathSegAtLength(float length) const
 {
-    unsigned pathSeg = 0;
-    getSVGPathSegAtLengthFromSVGPathByteStream(pathByteStream(), length, pathSeg);
-    return pathSeg;
+    return getSVGPathSegAtLengthFromSVGPathByteStream(pathByteStream(), length);
 }
 
 FloatRect SVGPathElement::getBBox(StyleUpdateStrategy styleUpdateStrategy)
 {
     if (styleUpdateStrategy == AllowStyleUpdate)
