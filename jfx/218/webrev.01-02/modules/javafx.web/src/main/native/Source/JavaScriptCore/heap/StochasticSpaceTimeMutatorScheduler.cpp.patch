diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/StochasticSpaceTimeMutatorScheduler.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/StochasticSpaceTimeMutatorScheduler.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/StochasticSpaceTimeMutatorScheduler.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/StochasticSpaceTimeMutatorScheduler.cpp
@@ -75,12 +75,11 @@
     m_bytesAllocatedThisCycleAtTheBeginning = m_heap.m_bytesAllocatedThisCycle;
     m_bytesAllocatedThisCycleAtTheEnd =
         Options::concurrentGCMaxHeadroom() *
         std::max<double>(m_bytesAllocatedThisCycleAtTheBeginning, m_heap.m_maxEdenSize);
 
-    if (Options::logGC())
-        dataLog("ca=", m_bytesAllocatedThisCycleAtTheBeginning / 1024, "kb h=", (m_bytesAllocatedThisCycleAtTheEnd - m_bytesAllocatedThisCycleAtTheBeginning) / 1024, "kb ");
+    dataLogIf(Options::logGC(), "ca=", m_bytesAllocatedThisCycleAtTheBeginning / 1024, "kb h=", (m_bytesAllocatedThisCycleAtTheEnd - m_bytesAllocatedThisCycleAtTheBeginning) / 1024, "kb ");
 
     m_beforeConstraints = MonotonicTime::now();
 }
 
 void StochasticSpaceTimeMutatorScheduler::didStop()
@@ -108,12 +107,11 @@
 
     m_targetPause = std::max(
         constraintExecutionDuration * m_pauseScale,
         m_minimumPause);
 
-    if (Options::logGC())
-        dataLog("tp=", m_targetPause.milliseconds(), "ms ");
+    dataLogIf(Options::logGC(), "tp=", m_targetPause.milliseconds(), "ms ");
 
     m_plannedResumeTime = snapshot.now() + m_targetPause;
 }
 
 void StochasticSpaceTimeMutatorScheduler::synchronousDrainingDidStall()
