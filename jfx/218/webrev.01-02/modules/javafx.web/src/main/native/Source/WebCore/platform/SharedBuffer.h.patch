diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/SharedBuffer.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/SharedBuffer.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/SharedBuffer.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/SharedBuffer.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2006-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2006-2019 Apple Inc. All rights reserved.
  * Copyright (C) Research In Motion Limited 2009-2010. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
@@ -55,10 +55,16 @@
 #if USE(FOUNDATION)
 OBJC_CLASS NSArray;
 OBJC_CLASS NSData;
 #endif
 
+namespace WTF {
+namespace Persistence {
+class Decoder;
+}
+}
+
 namespace WebCore {
 
 class SharedBufferDataView;
 
 class WEBCORE_EXPORT SharedBuffer : public RefCounted<SharedBuffer> {
@@ -121,11 +127,16 @@
     class DataSegment : public ThreadSafeRefCounted<DataSegment> {
     public:
         WEBCORE_EXPORT const char* data() const;
         WEBCORE_EXPORT size_t size() const;
 
-        static Ref<DataSegment> create(Vector<char>&& data) { return adoptRef(*new DataSegment(WTFMove(data))); }
+        static Ref<DataSegment> create(Vector<char>&& data)
+        {
+            data.shrinkToFit();
+            return adoptRef(*new DataSegment(WTFMove(data)));
+        }
+
 #if USE(CF)
         static Ref<DataSegment> create(RetainPtr<CFDataRef>&& data) { return adoptRef(*new DataSegment(WTFMove(data))); }
 #endif
 #if USE(SOUP)
         static Ref<DataSegment> create(GUniquePtr<SoupBuffer>&& data) { return adoptRef(*new DataSegment(WTFMove(data))); }
@@ -136,10 +147,14 @@
 #if USE(GSTREAMER)
         static Ref<DataSegment> create(RefPtr<GstMappedBuffer>&& data) { return adoptRef(*new DataSegment(WTFMove(data))); }
 #endif
         static Ref<DataSegment> create(FileSystem::MappedFileData&& data) { return adoptRef(*new DataSegment(WTFMove(data))); }
 
+#if USE(FOUNDATION)
+        RetainPtr<NSData> createNSData() const;
+#endif
+
     private:
         DataSegment(Vector<char>&& data)
             : m_immutableData(WTFMove(data)) { }
 #if USE(CF)
         DataSegment(RetainPtr<CFDataRef>&& data)
@@ -186,12 +201,16 @@
     DataSegmentVector::const_iterator end() const { return m_segments.end(); }
 
     // begin and end take O(1) time, this takes O(log(N)) time.
     SharedBufferDataView getSomeData(size_t position) const;
 
+    String toHexString() const;
+
     void hintMemoryNotNeededSoon() const;
 
+    WTF::Persistence::Decoder decoder() const;
+
     bool operator==(const SharedBuffer&) const;
     bool operator!=(const SharedBuffer& other) const { return !operator==(other); }
 
 private:
     explicit SharedBuffer() = default;
@@ -217,11 +236,11 @@
     static RefPtr<SharedBuffer> createFromReadingFile(const String& filePath);
 
     size_t m_size { 0 };
     mutable DataSegmentVector m_segments;
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     mutable bool m_hasBeenCombinedIntoOneSegment { false };
     bool internallyConsistent() const;
 #endif
 };
 
@@ -238,10 +257,13 @@
 class WEBCORE_EXPORT SharedBufferDataView {
 public:
     SharedBufferDataView(Ref<SharedBuffer::DataSegment>&&, size_t);
     size_t size() const;
     const char* data() const;
+#if USE(FOUNDATION)
+    RetainPtr<NSData> createNSData() const;
+#endif
 private:
     size_t m_positionWithinSegment;
     Ref<SharedBuffer::DataSegment> m_segment;
 };
 
