diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/ProgressTracker.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/ProgressTracker.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/ProgressTracker.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/ProgressTracker.cpp
@@ -75,20 +75,17 @@
     long long estimatedLength;
 };
 
 unsigned long ProgressTracker::s_uniqueIdentifier = 0;
 
-ProgressTracker::ProgressTracker(ProgressTrackerClient& client)
-    : m_client(client)
+ProgressTracker::ProgressTracker(UniqueRef<ProgressTrackerClient>&& client)
+    : m_client(WTFMove(client))
     , m_progressHeartbeatTimer(*this, &ProgressTracker::progressHeartbeatTimerFired)
 {
 }
 
-ProgressTracker::~ProgressTracker()
-{
-    m_client.progressTrackerDestroyed();
-}
+ProgressTracker::~ProgressTracker() = default;
 
 double ProgressTracker::estimatedProgress() const
 {
     return m_progressValue;
 }
@@ -115,11 +112,11 @@
 
 void ProgressTracker::progressStarted(Frame& frame)
 {
     LOG(Progress, "Progress started (%p) - frame %p(\"%s\"), value %f, tracked frames %d, originating frame %p", this, &frame, frame.tree().uniqueName().string().utf8().data(), m_progressValue, m_numProgressTrackedFrames, m_originatingProgressFrame.get());
 
-    m_client.willChangeEstimatedProgress();
+    m_client->willChangeEstimatedProgress();
 
     if (!m_numProgressTrackedFrames || m_originatingProgressFrame == &frame) {
         reset();
         m_progressValue = initialProgressValue;
         m_originatingProgressFrame = &frame;
@@ -131,17 +128,17 @@
         auto elapsedTimeSinceMainLoadComplete = MonotonicTime::now() - m_mainLoadCompletionTime;
 
         static const auto subframePartOfMainLoadThreshold = 1_s;
         m_isMainLoad = isMainFrame || elapsedTimeSinceMainLoadComplete < subframePartOfMainLoadThreshold;
 
-        m_client.progressStarted(*m_originatingProgressFrame);
+        m_client->progressStarted(*m_originatingProgressFrame);
     }
     m_numProgressTrackedFrames++;
 
     RELEASE_LOG_IF_ALLOWED("progressStarted: frame %p, value %f, tracked frames %d, originating frame %p, isMainLoad %d", &frame, m_progressValue, m_numProgressTrackedFrames, m_originatingProgressFrame.get(), m_isMainLoad);
 
-    m_client.didChangeEstimatedProgress();
+    m_client->didChangeEstimatedProgress();
     InspectorInstrumentation::frameStartedLoading(frame);
 }
 
 void ProgressTracker::progressCompleted(Frame& frame)
 {
@@ -149,17 +146,17 @@
     RELEASE_LOG_IF_ALLOWED("progressCompleted: frame %p, value %f, tracked frames %d, originating frame %p, isMainLoad %d", &frame, m_progressValue, m_numProgressTrackedFrames, m_originatingProgressFrame.get(), m_isMainLoad);
 
     if (m_numProgressTrackedFrames <= 0)
         return;
 
-    m_client.willChangeEstimatedProgress();
+    m_client->willChangeEstimatedProgress();
 
     m_numProgressTrackedFrames--;
     if (!m_numProgressTrackedFrames || m_originatingProgressFrame == &frame)
         finalProgressComplete();
 
-    m_client.didChangeEstimatedProgress();
+    m_client->didChangeEstimatedProgress();
 }
 
 void ProgressTracker::finalProgressComplete()
 {
     LOG(Progress, "Final progress complete (%p)", this);
@@ -169,20 +166,20 @@
 
     // Before resetting progress value be sure to send client a least one notification
     // with final progress value.
     if (!m_finalProgressChangedSent) {
         m_progressValue = 1;
-        m_client.progressEstimateChanged(*frame);
+        m_client->progressEstimateChanged(*frame);
     }
 
     reset();
 
     if (m_isMainLoad)
         m_mainLoadCompletionTime = MonotonicTime::now();
 
     frame->loader().client().setMainFrameDocumentReady(true);
-    m_client.progressFinished(*frame);
+    m_client->progressFinished(*frame);
     frame->loader().loadProgressingStatusChanged();
 
     InspectorInstrumentation::frameStoppedLoading(*frame);
 }
 
@@ -217,11 +214,11 @@
     if (!item)
         return;
 
     RefPtr<Frame> frame = m_originatingProgressFrame;
 
-    m_client.willChangeEstimatedProgress();
+    m_client->willChangeEstimatedProgress();
 
     double increment, percentOfRemainingBytes;
     long long remainingBytes, estimatedBytesForPendingRequests;
 
     item->bytesReceived += bytesReceived;
@@ -257,18 +254,18 @@
     if ((notifiedProgressTimeDelta >= progressNotificationTimeInterval || m_progressValue == 1) && m_numProgressTrackedFrames > 0) {
         if (!m_finalProgressChangedSent) {
             if (m_progressValue == 1)
                 m_finalProgressChangedSent = true;
 
-            m_client.progressEstimateChanged(*frame);
+            m_client->progressEstimateChanged(*frame);
 
             m_lastNotifiedProgressValue = m_progressValue;
             m_lastNotifiedProgressTime = now;
         }
     }
 
-    m_client.didChangeEstimatedProgress();
+    m_client->didChangeEstimatedProgress();
 }
 
 void ProgressTracker::completeProgress(unsigned long identifier)
 {
     auto it = m_progressItems.find(identifier);
