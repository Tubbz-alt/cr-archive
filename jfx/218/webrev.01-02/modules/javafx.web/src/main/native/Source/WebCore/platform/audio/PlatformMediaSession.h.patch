diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/audio/PlatformMediaSession.h
@@ -39,10 +39,11 @@
 namespace WebCore {
 
 class Document;
 class MediaPlaybackTarget;
 class PlatformMediaSessionClient;
+enum class DelayCallingUpdateNowPlaying { No, Yes };
 
 class PlatformMediaSession
     : public CanMakeWeakPtr<PlatformMediaSession>
 #if ENABLE(WIRELESS_PLAYBACK_TARGET)
     , public MediaPlaybackTargetClient
@@ -111,10 +112,12 @@
 
     virtual void clientWillBeginAutoplaying();
     virtual bool clientWillBeginPlayback();
     virtual bool clientWillPausePlayback();
 
+    void clientWillBeDOMSuspended();
+
     void pauseSession();
     void stopSession();
 
     virtual void suspendBuffering() { }
     virtual void resumeBuffering() { }
@@ -164,10 +167,11 @@
 #if ENABLE(WIRELESS_PLAYBACK_TARGET)
     // MediaPlaybackTargetClient
     void setPlaybackTarget(Ref<MediaPlaybackTarget>&&) override { }
     void externalOutputDeviceAvailableDidChange(bool) override { }
     void setShouldPlayToPlaybackTarget(bool) override { }
+    void playbackTargetPickerWasDismissed() override { }
 #endif
 
 #if PLATFORM(IOS_FAMILY)
     virtual bool requiresPlaybackTargetRouteMonitoring() const { return false; }
 #endif
@@ -196,10 +200,12 @@
 
 protected:
     PlatformMediaSessionClient& client() const { return m_client; }
 
 private:
+    bool processClientWillPausePlayback(DelayCallingUpdateNowPlaying);
+
     PlatformMediaSessionClient& m_client;
     State m_state;
     State m_stateToRestore;
     InterruptionType m_interruptionType { NoInterruption };
     int m_interruptionCount { 0 };
@@ -248,10 +254,11 @@
 
     virtual void wirelessRoutesAvailableDidChange() { }
     virtual void setWirelessPlaybackTarget(Ref<MediaPlaybackTarget>&&) { }
     virtual bool isPlayingToWirelessPlaybackTarget() const { return false; }
     virtual void setShouldPlayToPlaybackTarget(bool) { }
+    virtual void playbackTargetPickerWasDismissed() { }
 
     virtual bool isPlayingOnSecondScreen() const { return false; }
 
     virtual Document* hostingDocument() const = 0;
     virtual String sourceApplicationIdentifier() const = 0;
