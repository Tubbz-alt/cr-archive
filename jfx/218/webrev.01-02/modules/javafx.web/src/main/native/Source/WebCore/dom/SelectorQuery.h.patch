diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/SelectorQuery.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/SelectorQuery.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/SelectorQuery.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/SelectorQuery.h
@@ -48,32 +48,14 @@
     Ref<NodeList> queryAll(ContainerNode& rootNode) const;
     Element* queryFirst(ContainerNode& rootNode) const;
 
 private:
     struct SelectorData {
-        SelectorData(const CSSSelector* selector)
-            : selector(selector)
-#if ENABLE(CSS_SELECTOR_JIT) && CSS_SELECTOR_JIT_PROFILING
-            , m_compiledSelectorUseCount(0)
-#endif
-        {
-        }
-
         const CSSSelector* selector;
 #if ENABLE(CSS_SELECTOR_JIT)
-        mutable JSC::MacroAssemblerCodeRef<CSSSelectorPtrTag> compiledSelectorCodeRef;
-        mutable SelectorCompilationStatus compilationStatus;
-#if CSS_SELECTOR_JIT_PROFILING
-        ~SelectorData()
-        {
-            if (compiledSelectorCodeRef.code().executableAddress())
-                dataLogF("SelectorData compiled selector %d \"%s\"\n", m_compiledSelectorUseCount, selector->selectorText().utf8().data());
-        }
-        mutable unsigned m_compiledSelectorUseCount;
-        void compiledSelectorUsed() const { m_compiledSelectorUseCount++; }
+        mutable CompiledSelector compiledSelector { };
 #endif
-#endif // ENABLE(CSS_SELECTOR_JIT)
     };
 
     bool selectorMatches(const SelectorData&, Element&, const ContainerNode& rootNode) const;
     Element* selectorClosest(const SelectorData&, Element&, const ContainerNode& rootNode) const;
 
