diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/generator/Argument.rb b/modules/javafx.web/src/main/native/Source/JavaScriptCore/generator/Argument.rb
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/generator/Argument.rb
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/generator/Argument.rb
@@ -64,29 +64,29 @@
 
     def load_from_stream(index, size)
         "#{field_name}(#{Fits::convert(size, "stream[#{index}]", @type)})"
     end
 
-    def setter
+    def setter(traits)
         <<-EOF
     template<typename Functor>
     void set#{capitalized_name}(#{@type.to_s} value, Functor func)
     {
-        if (isWide32())
+        if (isWide32<#{traits}>())
             set#{capitalized_name}<OpcodeSize::Wide32>(value, func);
-        else if (isWide16())
+        else if (isWide16<#{traits}>())
             set#{capitalized_name}<OpcodeSize::Wide16>(value, func);
         else
             set#{capitalized_name}<OpcodeSize::Narrow>(value, func);
     }
 
     template <OpcodeSize size, typename Functor>
     void set#{capitalized_name}(#{@type.to_s} value, Functor func)
     {
         if (!#{Fits::check "size", "value", @type})
             value = func();
-        auto* stream = bitwise_cast<typename TypeBySize<size>::unsignedType*>(reinterpret_cast<uint8_t*>(this) + #{@index} * size + PaddingBySize<size>::value);
+        auto* stream = bitwise_cast<typename TypeBySize<size>::unsignedType*>(reinterpret_cast<uint8_t*>(this) + #{@index} * size + PaddingBySize<size>::value + /* Opcode size */ 1);
         *stream = #{Fits::convert "size", "value", @type};
     }
 EOF
     end
 
