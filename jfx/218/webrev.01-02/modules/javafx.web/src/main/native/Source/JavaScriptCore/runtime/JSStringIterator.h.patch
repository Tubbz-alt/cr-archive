diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringIterator.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringIterator.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringIterator.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringIterator.h
@@ -23,41 +23,71 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "JSObject.h"
+#include "JSInternalFieldObjectImpl.h"
 
 namespace JSC {
 
-class JSStringIterator final : public JSNonFinalObject {
+class JSStringIterator final : public JSInternalFieldObjectImpl<2> {
 public:
-    typedef JSNonFinalObject Base;
+    using Base = JSInternalFieldObjectImpl<2>;
+
+    enum class Field : uint8_t {
+        Index = 0,
+        IteratedString,
+    };
 
     DECLARE_EXPORT_INFO;
 
+    static size_t allocationSize(Checked<size_t> inlineCapacity)
+    {
+        ASSERT_UNUSED(inlineCapacity, inlineCapacity == 0U);
+        return sizeof(JSStringIterator);
+    }
+
+    template<typename CellType, SubspaceAccess mode>
+    static IsoSubspace* subspaceFor(VM& vm)
+    {
+        return vm.stringIteratorSpace<mode>();
+    }
+
+    static std::array<JSValue, numberOfInternalFields> initialValues()
+    {
+        return { {
+            jsNumber(0),
+            jsNull(),
+        } };
+    }
+
+    const WriteBarrier<Unknown>& internalField(Field field) const { return Base::internalField(static_cast<uint32_t>(field)); }
+    WriteBarrier<Unknown>& internalField(Field field) { return Base::internalField(static_cast<uint32_t>(field)); }
+
     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
     {
-        return Structure::create(vm, globalObject, prototype, TypeInfo(ObjectType, StructureFlags), info());
+        return Structure::create(vm, globalObject, prototype, TypeInfo(JSStringIteratorType, StructureFlags), info());
     }
 
-    static JSStringIterator* create(ExecState* exec, Structure* structure, JSString* iteratedString)
+    static JSStringIterator* create(VM& vm, Structure* structure, JSString* iteratedString)
     {
-        VM& vm = exec->vm();
         JSStringIterator* instance = new (NotNull, allocateCell<JSStringIterator>(vm.heap)) JSStringIterator(vm, structure);
-        instance->finishCreation(vm, structure->globalObject(), iteratedString);
+        instance->finishCreation(vm, iteratedString);
         return instance;
     }
 
-    JSValue iteratedValue(ExecState*) const;
-    JSStringIterator* clone(ExecState*);
+    JSValue iteratedString() const { return internalField(Field::IteratedString).get(); }
+    JSValue index() const { return internalField(Field::Index).get(); }
+    JSStringIterator* clone(JSGlobalObject*);
+
+    static void visitChildren(JSCell*, SlotVisitor&);
 
 private:
     JSStringIterator(VM& vm, Structure* structure)
         : Base(vm, structure)
     {
     }
 
-    void finishCreation(VM&, JSGlobalObject*, JSString* iteratedString);
+    void finishCreation(VM&, JSString* iteratedString);
 };
 
 } // namespace JSC
