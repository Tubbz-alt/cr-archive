diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemDirectoryEntry.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemDirectoryEntry.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemDirectoryEntry.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemDirectoryEntry.cpp
@@ -26,15 +26,17 @@
 #include "config.h"
 #include "FileSystemDirectoryEntry.h"
 
 #include "DOMException.h"
 #include "DOMFileSystem.h"
+#include "Document.h"
 #include "ErrorCallback.h"
 #include "FileSystemDirectoryReader.h"
 #include "FileSystemEntryCallback.h"
 #include "FileSystemFileEntry.h"
 #include "ScriptExecutionContext.h"
+#include "WindowEventLoop.h"
 
 namespace WebCore {
 
 FileSystemDirectoryEntry::FileSystemDirectoryEntry(ScriptExecutionContext& context, DOMFileSystem& filesystem, const String& virtualPath)
     : FileSystemEntry(context, filesystem, virtualPath)
@@ -49,24 +51,34 @@
 void FileSystemDirectoryEntry::getEntry(ScriptExecutionContext& context, const String& path, const Flags& flags, EntryMatchingFunction&& matches, RefPtr<FileSystemEntryCallback>&& successCallback, RefPtr<ErrorCallback>&& errorCallback)
 {
     if (!successCallback && !errorCallback)
         return;
 
-    filesystem().getEntry(context, *this, path, flags, [pendingActivity = makePendingActivity(*this), matches = WTFMove(matches), successCallback = WTFMove(successCallback), errorCallback = WTFMove(errorCallback)](auto&& result) {
+    filesystem().getEntry(context, *this, path, flags, [this, pendingActivity = makePendingActivity(*this), matches = WTFMove(matches), successCallback = WTFMove(successCallback), errorCallback = WTFMove(errorCallback)](auto&& result) mutable {
+        auto* document = this->document();
         if (result.hasException()) {
-            if (errorCallback)
-                errorCallback->handleEvent(DOMException::create(result.releaseException()));
+            if (errorCallback && document) {
+                document->eventLoop().queueTask(TaskSource::Networking, [errorCallback = WTFMove(errorCallback), exception = result.releaseException(), pendingActivity = WTFMove(pendingActivity)]() mutable {
+                    errorCallback->handleEvent(DOMException::create(WTFMove(exception)));
+                });
+            }
             return;
         }
         auto entry = result.releaseReturnValue();
         if (!matches(entry)) {
-            if (errorCallback)
-                errorCallback->handleEvent(DOMException::create(Exception { TypeMismatchError, "Entry at given path does not match expected type"_s }));
+            if (errorCallback && document) {
+                document->eventLoop().queueTask(TaskSource::Networking, [errorCallback = WTFMove(errorCallback), pendingActivity = WTFMove(pendingActivity)]() mutable {
+                    errorCallback->handleEvent(DOMException::create(Exception { TypeMismatchError, "Entry at given path does not match expected type"_s }));
+                });
+            }
             return;
         }
-        if (successCallback)
-            successCallback->handleEvent(WTFMove(entry));
+        if (successCallback && document) {
+            document->eventLoop().queueTask(TaskSource::Networking, [successCallback = WTFMove(successCallback), entry = WTFMove(entry), pendingActivity = WTFMove(pendingActivity)]() mutable {
+                successCallback->handleEvent(WTFMove(entry));
+            });
+        }
     });
 }
 
 void FileSystemDirectoryEntry::getFile(ScriptExecutionContext& context, const String& path, const Flags& flags, RefPtr<FileSystemEntryCallback>&& successCallback, RefPtr<ErrorCallback>&& errorCallback)
 {
