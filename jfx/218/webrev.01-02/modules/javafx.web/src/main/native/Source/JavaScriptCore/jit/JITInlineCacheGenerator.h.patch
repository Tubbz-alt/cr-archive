diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITInlineCacheGenerator.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITInlineCacheGenerator.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITInlineCacheGenerator.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITInlineCacheGenerator.h
@@ -118,11 +118,11 @@
 public:
     JITGetByIdWithThisGenerator() { }
 
     JITGetByIdWithThisGenerator(
         CodeBlock*, CodeOrigin, CallSiteIndex, const RegisterSet& usedRegisters, UniquedStringImpl* propertyName,
-        JSValueRegs value, JSValueRegs base, JSValueRegs thisRegs, AccessType);
+        JSValueRegs value, JSValueRegs base, JSValueRegs thisRegs);
 
     void generateFastPath(MacroAssembler&);
 };
 
 class JITPutByIdGenerator : public JITByIdGenerator {
@@ -133,11 +133,11 @@
         CodeBlock*, CodeOrigin, CallSiteIndex, const RegisterSet& usedRegisters, JSValueRegs base,
         JSValueRegs value, GPRReg scratch, ECMAMode, PutKind);
 
     void generateFastPath(MacroAssembler&);
 
-    V_JITOperation_ESsiJJI slowPathFunction();
+    V_JITOperation_GSsiJJI slowPathFunction();
 
 private:
     ECMAMode m_ecmaMode;
     PutKind m_putKind;
 };
@@ -168,10 +168,39 @@
 
 private:
     MacroAssembler::PatchableJump m_jump;
 };
 
+class JITGetByValGenerator : public JITInlineCacheGenerator {
+    using Base = JITInlineCacheGenerator;
+public:
+    JITGetByValGenerator() { }
+
+    JITGetByValGenerator(
+        CodeBlock*, CodeOrigin, CallSiteIndex, const RegisterSet& usedRegisters,
+        JSValueRegs base, JSValueRegs property, JSValueRegs result);
+
+    MacroAssembler::Jump slowPathJump() const
+    {
+        ASSERT(m_slowPathJump.m_jump.isSet());
+        return m_slowPathJump.m_jump;
+    }
+
+    void finalize(
+        LinkBuffer& fastPathLinkBuffer, LinkBuffer& slowPathLinkBuffer);
+
+    void generateFastPath(MacroAssembler&);
+
+private:
+    JSValueRegs m_base;
+    JSValueRegs m_result;
+    JSValueRegs m_;
+
+    MacroAssembler::Label m_start;
+    MacroAssembler::PatchableJump m_slowPathJump;
+};
+
 template<typename VectorType>
 void finalizeInlineCaches(VectorType& vector, LinkBuffer& fastPath, LinkBuffer& slowPath)
 {
     for (auto& entry : vector)
         entry.finalize(fastPath, slowPath);
