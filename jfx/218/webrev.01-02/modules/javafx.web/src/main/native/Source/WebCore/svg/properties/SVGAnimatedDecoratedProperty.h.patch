diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimatedDecoratedProperty.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimatedDecoratedProperty.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimatedDecoratedProperty.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimatedDecoratedProperty.h
@@ -34,20 +34,20 @@
 class SVGAnimatedDecoratedProperty : public SVGAnimatedProperty {
 public:
     template<typename PropertyType, typename AnimatedProperty = SVGAnimatedDecoratedProperty>
     static Ref<AnimatedProperty> create(SVGElement* contextElement)
     {
-        return adoptRef(*new AnimatedProperty(contextElement, makeUnique<DecoratedProperty<DecorationType, PropertyType>>()));
+        return adoptRef(*new AnimatedProperty(contextElement, adoptRef(*new DecoratedProperty<DecorationType, PropertyType>())));
     }
 
     template<typename PropertyType, typename AnimatedProperty = SVGAnimatedDecoratedProperty>
     static Ref<AnimatedProperty> create(SVGElement* contextElement, const PropertyType& value)
     {
         return adoptRef(*new AnimatedProperty(contextElement, DecoratedProperty<DecorationType, PropertyType>::create(value)));
     }
 
-    SVGAnimatedDecoratedProperty(SVGElement* contextElement, std::unique_ptr<SVGDecoratedProperty<DecorationType>>&& baseVal)
+    SVGAnimatedDecoratedProperty(SVGElement* contextElement, Ref<SVGDecoratedProperty<DecorationType>>&& baseVal)
         : SVGAnimatedProperty(contextElement)
         , m_baseVal(WTFMove(baseVal))
     {
     }
 
@@ -81,11 +81,11 @@
 
     template<typename PropertyType = DecorationType>
     PropertyType animVal() const
     {
         ASSERT_IMPLIES(isAnimating(), m_animVal);
-        return static_cast<PropertyType>((isAnimating() ? m_animVal : m_baseVal)->value());
+        return static_cast<PropertyType>((isAnimating() ? *m_animVal : m_baseVal.get()).value());
     }
 
     // Used when committing a change from the SVGAnimatedProperty to the attribute.
     String baseValAsString() const override { return m_baseVal->valueAsString(); }
 
@@ -109,11 +109,12 @@
 
     // Used by RenderSVGElements and DumpRenderTree.
     template<typename PropertyType>
     PropertyType currentValue() const
     {
-        return static_cast<PropertyType>((isAnimating() ? m_animVal : m_baseVal)->valueInternal());
+        ASSERT_IMPLIES(isAnimating(), m_animVal);
+        return static_cast<PropertyType>((isAnimating() ? *m_animVal : m_baseVal.get()).valueInternal());
     }
 
     // Controlling the animation.
     void startAnimation() override
     {
@@ -128,12 +129,25 @@
             return;
         m_animVal = nullptr;
         SVGAnimatedProperty::stopAnimation();
     }
 
+    // Controlling the instance animation.
+    void instanceStartAnimation(SVGAnimatedProperty& animated) override
+    {
+        m_animVal = static_cast<decltype(*this)>(animated).m_animVal;
+        SVGAnimatedProperty::instanceStartAnimation(animated);
+    }
+
+    void instanceStopAnimation() override
+    {
+        m_animVal = nullptr;
+        SVGAnimatedProperty::instanceStopAnimation();
+    }
+
 protected:
-    std::unique_ptr<SVGDecoratedProperty<DecorationType>> m_baseVal;
-    std::unique_ptr<SVGDecoratedProperty<DecorationType>> m_animVal;
+    Ref<SVGDecoratedProperty<DecorationType>> m_baseVal;
+    RefPtr<SVGDecoratedProperty<DecorationType>> m_animVal;
     SVGPropertyState m_state { SVGPropertyState::Clean };
 };
 
 }
