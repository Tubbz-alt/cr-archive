diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSWindowProxy.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSWindowProxy.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSWindowProxy.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSWindowProxy.cpp
@@ -35,15 +35,17 @@
 #include "JSDOMWindow.h"
 #include "JSDOMWindowProperties.h"
 #include "JSEventTarget.h"
 #include "JSRemoteDOMWindow.h"
 #include "ScriptController.h"
+#include "WebCoreJSClientData.h"
 #include <JavaScriptCore/Debugger.h>
 #include <JavaScriptCore/JSObject.h>
 #include <JavaScriptCore/StrongInlines.h>
 
 namespace WebCore {
+using namespace JSC;
 
 using namespace JSC;
 
 const ClassInfo JSWindowProxy::s_info = { "JSWindowProxy", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWindowProxy) };
 
@@ -73,11 +75,11 @@
     static_cast<JSWindowProxy*>(cell)->JSWindowProxy::~JSWindowProxy();
 }
 
 void JSWindowProxy::setWindow(VM& vm, JSDOMGlobalObject& window)
 {
-    ASSERT(window.classInfo() == JSDOMWindow::info() || window.classInfo() == JSRemoteDOMWindow::info());
+    ASSERT(window.classInfo(vm) == JSDOMWindow::info() || window.classInfo(vm) == JSRemoteDOMWindow::info());
     setTarget(vm, &window);
     structure(vm)->setGlobalObject(vm, &window);
     GCController::singleton().garbageCollectSoon();
 }
 
@@ -143,13 +145,13 @@
     if (auto* jsWindow = jsDynamicCast<JSRemoteDOMWindowBase*>(window->vm(), window))
         return jsWindow->wrapped();
     return jsCast<JSDOMWindowBase*>(window)->wrapped();
 }
 
-JSValue toJS(ExecState* state, WindowProxy& windowProxy)
+JSValue toJS(JSGlobalObject* lexicalGlobalObject, WindowProxy& windowProxy)
 {
-    auto* jsWindowProxy = windowProxy.jsWindowProxy(currentWorld(*state));
+    auto* jsWindowProxy = windowProxy.jsWindowProxy(currentWorld(*lexicalGlobalObject));
     return jsWindowProxy ? JSValue(jsWindowProxy) : jsNull();
 }
 
 JSWindowProxy* toJSWindowProxy(WindowProxy& windowProxy, DOMWrapperWorld& world)
 {
@@ -164,6 +166,11 @@
     if (object->inherits<JSWindowProxy>(vm))
         return jsCast<JSWindowProxy*>(object)->windowProxy();
     return nullptr;
 }
 
+JSC::IsoSubspace* JSWindowProxy::subspaceForImpl(JSC::VM& vm)
+{
+    return &static_cast<JSVMClientData*>(vm.clientData)->windowProxySpace();
+}
+
 } // namespace WebCore
