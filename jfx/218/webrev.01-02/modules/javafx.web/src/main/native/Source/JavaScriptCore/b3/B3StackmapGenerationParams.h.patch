diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapGenerationParams.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapGenerationParams.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapGenerationParams.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapGenerationParams.h
@@ -27,15 +27,19 @@
 
 #if ENABLE(B3_JIT)
 
 #include "AirGenerationContext.h"
 #include "B3ValueRep.h"
-#include "CCallHelpers.h"
+#include "MacroAssembler.h"
 #include "RegisterSet.h"
 #include <wtf/Box.h>
 
-namespace JSC { namespace B3 {
+namespace JSC {
+
+class CCallHelpers;
+
+namespace B3 {
 
 class CheckSpecial;
 class PatchpointSpecial;
 class Procedure;
 class StackmapValue;
@@ -87,19 +91,20 @@
     GPRReg gpScratch(unsigned index) const { return m_gpScratch[index]; }
     FPRReg fpScratch(unsigned index) const { return m_fpScratch[index]; }
 
     // This is computed lazily, so it won't work if you capture StackmapGenerationParams by value.
     // These labels will get populated before any late paths or link tasks execute.
-    JS_EXPORT_PRIVATE Vector<Box<CCallHelpers::Label>> successorLabels() const;
+    JS_EXPORT_PRIVATE Vector<Box<MacroAssembler::Label>> successorLabels() const;
 
     // This is computed lazily, so it won't work if you capture StackmapGenerationParams by value.
     // Returns true if the successor at the given index is going to be emitted right after the
     // patchpoint.
     JS_EXPORT_PRIVATE bool fallsThroughToSuccessor(unsigned successorIndex) const;
 
-    // This is provided for convenience; it means that you don't have to capture it if you don't want to.
+    // These are provided for convenience; they mean that you don't have to capture them if you don't want to.
     JS_EXPORT_PRIVATE Procedure& proc() const;
+    JS_EXPORT_PRIVATE Air::Code& code() const;
 
     // The Air::GenerationContext gives you even more power.
     Air::GenerationContext& context() const { return m_context; };
 
     template<typename Functor>
