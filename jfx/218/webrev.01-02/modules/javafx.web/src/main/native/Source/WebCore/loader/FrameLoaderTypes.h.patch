diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/FrameLoaderTypes.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/FrameLoaderTypes.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/FrameLoaderTypes.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/FrameLoaderTypes.h
@@ -26,10 +26,11 @@
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include "ElementContext.h"
 #include "IntRect.h"
 #include "ProcessIdentifier.h"
 
 namespace WebCore {
 
@@ -183,14 +184,46 @@
 enum class LockBackForwardList : bool { No, Yes };
 enum class AllowNavigationToInvalidURL : bool { No, Yes };
 enum class HasInsecureContent : bool { No, Yes };
 
 struct SystemPreviewInfo {
-    IntRect systemPreviewRect;
-    bool isSystemPreview { false };
+    ElementContext element;
+
+    IntRect previewRect;
+    bool isPreview { false };
+
+    template<class Encoder> void encode(Encoder&) const;
+    template<class Decoder> static Optional<SystemPreviewInfo> decode(Decoder&);
 };
 
+template<class Encoder>
+void SystemPreviewInfo::encode(Encoder& encoder) const
+{
+    encoder << element << previewRect << isPreview;
+}
+
+template<class Decoder>
+Optional<SystemPreviewInfo> SystemPreviewInfo::decode(Decoder& decoder)
+{
+    Optional<ElementContext> element;
+    decoder >> element;
+    if (!element)
+        return WTF::nullopt;
+
+    Optional<IntRect> previewRect;
+    decoder >> previewRect;
+    if (!previewRect)
+        return WTF::nullopt;
+
+    Optional<bool> isPreview;
+    decoder >> isPreview;
+    if (!isPreview)
+        return WTF::nullopt;
+
+    return { { WTFMove(*element), WTFMove(*previewRect), WTFMove(*isPreview) } };
+}
+
 enum class LoadCompletionType : uint8_t {
     Finish,
     Cancel
 };
 
