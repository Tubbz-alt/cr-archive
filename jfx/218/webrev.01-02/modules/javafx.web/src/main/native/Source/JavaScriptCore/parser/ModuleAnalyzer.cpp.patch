diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/ModuleAnalyzer.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/ModuleAnalyzer.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/ModuleAnalyzer.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/ModuleAnalyzer.cpp
@@ -33,13 +33,13 @@
 #include "StrongInlines.h"
 
 namespace JSC {
 
 
-ModuleAnalyzer::ModuleAnalyzer(ExecState* exec, const Identifier& moduleKey, const SourceCode& sourceCode, const VariableEnvironment& declaredVariables, const VariableEnvironment& lexicalVariables)
-    : m_vm(exec->vm())
-    , m_moduleRecord(m_vm, JSModuleRecord::create(exec, m_vm, exec->lexicalGlobalObject()->moduleRecordStructure(), moduleKey, sourceCode, declaredVariables, lexicalVariables))
+ModuleAnalyzer::ModuleAnalyzer(JSGlobalObject* globalObject, const Identifier& moduleKey, const SourceCode& sourceCode, const VariableEnvironment& declaredVariables, const VariableEnvironment& lexicalVariables)
+    : m_vm(globalObject->vm())
+    , m_moduleRecord(m_vm, JSModuleRecord::create(globalObject, m_vm, globalObject->moduleRecordStructure(), moduleKey, sourceCode, declaredVariables, lexicalVariables))
 {
 }
 
 void ModuleAnalyzer::exportVariable(ModuleProgramNode& moduleProgramNode, const RefPtr<UniquedStringImpl>& localName, const VariableEnvironmentEntry& variable)
 {
@@ -138,11 +138,11 @@
         exportVariable(moduleProgramNode, pair.key, pair.value);
 
     for (const auto& pair : m_moduleRecord->lexicalVariables())
         exportVariable(moduleProgramNode, pair.key, pair.value);
 
-    if (Options::dumpModuleRecord())
+    if (UNLIKELY(Options::dumpModuleRecord()))
         m_moduleRecord->dump();
 
     return m_moduleRecord.get();
 }
 
