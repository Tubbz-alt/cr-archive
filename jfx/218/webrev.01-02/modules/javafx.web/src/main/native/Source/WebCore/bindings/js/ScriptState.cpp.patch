diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScriptState.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScriptState.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScriptState.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScriptState.cpp
@@ -47,69 +47,69 @@
 #include <JavaScriptCore/JSGlobalObject.h>
 #include <JavaScriptCore/StrongInlines.h>
 
 namespace WebCore {
 
-DOMWindow* domWindowFromExecState(JSC::ExecState* scriptState)
+DOMWindow* domWindowFromExecState(JSC::JSGlobalObject* lexicalGlobalObject)
 {
-    JSC::JSGlobalObject* globalObject = scriptState->lexicalGlobalObject();
+    JSC::JSGlobalObject* globalObject = lexicalGlobalObject;
     JSC::VM& vm = globalObject->vm();
     if (!globalObject->inherits<JSDOMWindowBase>(vm))
         return nullptr;
     return &JSC::jsCast<JSDOMWindowBase*>(globalObject)->wrapped();
 }
 
-Frame* frameFromExecState(JSC::ExecState* scriptState)
+Frame* frameFromExecState(JSC::JSGlobalObject* lexicalGlobalObject)
 {
-    ScriptExecutionContext* context = scriptExecutionContextFromExecState(scriptState);
+    ScriptExecutionContext* context = scriptExecutionContextFromExecState(lexicalGlobalObject);
     Document* document = is<Document>(context) ? downcast<Document>(context) : nullptr;
     return document ? document->frame() : nullptr;
 }
 
-ScriptExecutionContext* scriptExecutionContextFromExecState(JSC::ExecState* scriptState)
+ScriptExecutionContext* scriptExecutionContextFromExecState(JSC::JSGlobalObject* lexicalGlobalObject)
 {
-    JSC::JSGlobalObject* globalObject = scriptState->lexicalGlobalObject();
+    JSC::JSGlobalObject* globalObject = lexicalGlobalObject;
     JSC::VM& vm = globalObject->vm();
     if (!globalObject->inherits<JSDOMGlobalObject>(vm))
         return nullptr;
     return JSC::jsCast<JSDOMGlobalObject*>(globalObject)->scriptExecutionContext();
 }
 
-JSC::ExecState* mainWorldExecState(Frame* frame)
+JSC::JSGlobalObject* mainWorldExecState(Frame* frame)
 {
     if (!frame)
         return nullptr;
-    return frame->windowProxy().jsWindowProxy(mainThreadNormalWorld())->window()->globalExec();
+    return frame->windowProxy().jsWindowProxy(mainThreadNormalWorld())->window();
 }
 
-JSC::ExecState* execStateFromNode(DOMWrapperWorld& world, Node* node)
+JSC::JSGlobalObject* execStateFromNode(DOMWrapperWorld& world, Node* node)
 {
     if (!node)
         return nullptr;
     Frame* frame = node->document().frame();
     if (!frame)
         return nullptr;
     if (!frame->script().canExecuteScripts(NotAboutToExecuteScript))
         return nullptr;
-    return frame->script().globalObject(world)->globalExec();
+    return frame->script().globalObject(world);
 }
 
-JSC::ExecState* execStateFromPage(DOMWrapperWorld& world, Page* page)
+JSC::JSGlobalObject* execStateFromPage(DOMWrapperWorld& world, Page* page)
 {
-    return page ? page->mainFrame().script().globalObject(world)->globalExec() : nullptr;
+    return page ? page->mainFrame().script().globalObject(world) : nullptr;
 }
 
-JSC::ExecState* execStateFromWorkerGlobalScope(WorkerGlobalScope& workerGlobalScope)
+JSC::JSGlobalObject* execStateFromWorkerGlobalScope(WorkerGlobalScope& workerGlobalScope)
 {
-    return workerGlobalScope.script()->workerGlobalScopeWrapper()->globalExec();
+    return workerGlobalScope.script()->workerGlobalScopeWrapper();
 }
 
 #if ENABLE(CSS_PAINTING_API)
-JSC::ExecState* execStateFromWorkletGlobalScope(WorkletGlobalScope& workletGlobalScope)
+JSC::JSGlobalObject* execStateFromWorkletGlobalScope(WorkletGlobalScope& workletGlobalScope)
 {
     if (!workletGlobalScope.script())
         return nullptr;
-    return workletGlobalScope.script()->workletGlobalScopeWrapper()->globalExec();
+    return workletGlobalScope.script()->workletGlobalScopeWrapper();
 }
 #endif
 
 }
