diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimationElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimationElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimationElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimationElement.cpp
@@ -47,11 +47,10 @@
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(SVGAnimationElement);
 
 SVGAnimationElement::SVGAnimationElement(const QualifiedName& tagName, Document& document)
     : SVGSMILElement(tagName, document)
-    , SVGExternalResourcesRequired(this)
     , SVGTests(this)
 {
 }
 
 static void parseKeyTimes(const String& parse, Vector<float>& result, bool verifyOrder)
@@ -134,11 +133,10 @@
 bool SVGAnimationElement::isSupportedAttribute(const QualifiedName& attrName)
 {
     static const auto supportedAttributes = makeNeverDestroyed([] {
         HashSet<QualifiedName> set;
         SVGTests::addSupportedAttributes(set);
-        SVGExternalResourcesRequired::addSupportedAttributes(set);
         set.add({
             SVGNames::valuesAttr.get(),
             SVGNames::keyTimesAttr.get(),
             SVGNames::keyPointsAttr.get(),
             SVGNames::keySplinesAttr.get(),
@@ -201,11 +199,10 @@
         return;
     }
 
     SVGSMILElement::parseAttribute(name, value);
     SVGTests::parseAttribute(name, value);
-    SVGExternalResourcesRequired::parseAttribute(name, value);
 }
 
 void SVGAnimationElement::svgAttributeChanged(const QualifiedName& attrName)
 {
     if (!isSupportedAttribute(attrName)) {
@@ -563,11 +560,11 @@
             calculateKeyTimesForCalcModePaced();
     } else if (animationMode == AnimationMode::Path)
         m_animationValid = calcMode == CalcMode::Paced || !hasAttributeWithoutSynchronization(SVGNames::keyPointsAttr) || (m_keyTimes.size() > 1 && m_keyTimes.size() == m_keyPoints.size());
 }
 
-void SVGAnimationElement::updateAnimation(float percent, unsigned repeatCount, SVGSMILElement* resultElement)
+void SVGAnimationElement::updateAnimation(float percent, unsigned repeatCount)
 {
     if (!m_animationValid)
         return;
 
     float effectivePercent;
@@ -591,11 +588,11 @@
     else if (animationMode == AnimationMode::FromTo || animationMode == AnimationMode::To)
         effectivePercent = calculatePercentForFromTo(percent);
     else
         effectivePercent = percent;
 
-    calculateAnimatedValue(effectivePercent, repeatCount, resultElement);
+    calculateAnimatedValue(effectivePercent, repeatCount);
 }
 
 void SVGAnimationElement::computeCSSPropertyValue(SVGElement* element, CSSPropertyID id, String& valueString)
 {
     ASSERT(element);
