diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapInlines.h
@@ -68,21 +68,21 @@
 }
 
 ALWAYS_INLINE bool Heap::isMarked(const void* rawCell)
 {
     HeapCell* cell = bitwise_cast<HeapCell*>(rawCell);
-    if (cell->isLargeAllocation())
-        return cell->largeAllocation().isMarked();
+    if (cell->isPreciseAllocation())
+        return cell->preciseAllocation().isMarked();
     MarkedBlock& block = cell->markedBlock();
     return block.isMarked(m_objectSpace.markingVersion(), cell);
 }
 
 ALWAYS_INLINE bool Heap::testAndSetMarked(HeapVersion markingVersion, const void* rawCell)
 {
     HeapCell* cell = bitwise_cast<HeapCell*>(rawCell);
-    if (cell->isLargeAllocation())
-        return cell->largeAllocation().testAndSetMarked();
+    if (cell->isPreciseAllocation())
+        return cell->preciseAllocation().testAndSetMarked();
     MarkedBlock& block = cell->markedBlock();
     Dependency dependency = block.aboutToMark(markingVersion);
     return block.testAndSetMarked(cell, dependency);
 }
 
@@ -186,11 +186,11 @@
 inline void Heap::decrementDeferralDepthAndGCIfNeeded()
 {
     ASSERT(!Thread::mayBeGCThread() || m_worldIsStopped);
     m_deferralDepth--;
 
-    if (UNLIKELY(m_didDeferGCWork)) {
+    if (UNLIKELY(m_didDeferGCWork) || Options::forceDidDeferGCWork()) {
         decrementDeferralDepthAndGCIfNeededSlow();
 
         // Here are the possible relationships between m_deferralDepth and m_didDeferGCWork.
         // Note that prior to the call to decrementDeferralDepthAndGCIfNeededSlow,
         // m_didDeferGCWork had to have been true. Now it can be either false or true. There is
