diff a/modules/javafx.web/src/main/native/Source/WebCore/page/csp/ContentSecurityPolicyResponseHeaders.h b/modules/javafx.web/src/main/native/Source/WebCore/page/csp/ContentSecurityPolicyResponseHeaders.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/csp/ContentSecurityPolicyResponseHeaders.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/csp/ContentSecurityPolicyResponseHeaders.h
@@ -48,15 +48,32 @@
     ContentSecurityPolicyResponseHeaders isolatedCopy() const;
 
     template <class Encoder> void encode(Encoder&) const;
     template <class Decoder> static bool decode(Decoder&, ContentSecurityPolicyResponseHeaders&);
 
+    enum EmptyTag { Empty };
+    struct MarkableTraits {
+        static bool isEmptyValue(const ContentSecurityPolicyResponseHeaders& identifier)
+        {
+            return identifier.m_emptyForMarkable;
+        }
+
+        static ContentSecurityPolicyResponseHeaders emptyValue()
+        {
+            return ContentSecurityPolicyResponseHeaders(Empty);
+        }
+    };
+
 private:
     friend class ContentSecurityPolicy;
+    ContentSecurityPolicyResponseHeaders(EmptyTag)
+        : m_emptyForMarkable(true)
+    { }
 
     Vector<std::pair<String, ContentSecurityPolicyHeaderType>> m_headers;
     int m_httpStatusCode { 0 };
+    bool m_emptyForMarkable { false };
 };
 
 template <class Encoder>
 void ContentSecurityPolicyResponseHeaders::encode(Encoder& encoder) const
 {
@@ -72,20 +89,20 @@
 bool ContentSecurityPolicyResponseHeaders::decode(Decoder& decoder, ContentSecurityPolicyResponseHeaders& headers)
 {
     uint64_t headersSize;
     if (!decoder.decode(headersSize))
         return false;
-    headers.m_headers.reserveCapacity(static_cast<size_t>(headersSize));
     for (size_t i = 0; i < headersSize; ++i) {
         String header;
         if (!decoder.decode(header))
             return false;
         ContentSecurityPolicyHeaderType headerType;
         if (!decoder.decodeEnum(headerType))
             return false;
         headers.m_headers.append(std::make_pair(header, headerType));
     }
+    headers.m_headers.shrinkToFit();
 
     if (!decoder.decode(headers.m_httpStatusCode))
         return false;
 
     return true;
