diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/persistence/PersistentEncoder.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/persistence/PersistentEncoder.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/persistence/PersistentEncoder.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/persistence/PersistentEncoder.h
@@ -75,18 +75,19 @@
     size_t bufferSize() const { return m_buffer.size(); }
 
     WTF_EXPORT_PRIVATE static void updateChecksumForData(SHA1&, const uint8_t*, size_t);
     template <typename Type> static void updateChecksumForNumber(SHA1&, Type);
 
-    static const bool isIPCEncoder = false;
+    static constexpr bool isIPCEncoder = false;
 
 private:
     WTF_EXPORT_PRIVATE void encode(bool);
     WTF_EXPORT_PRIVATE void encode(uint8_t);
     WTF_EXPORT_PRIVATE void encode(uint16_t);
     WTF_EXPORT_PRIVATE void encode(uint32_t);
     WTF_EXPORT_PRIVATE void encode(uint64_t);
+    WTF_EXPORT_PRIVATE void encode(int16_t);
     WTF_EXPORT_PRIVATE void encode(int32_t);
     WTF_EXPORT_PRIVATE void encode(int64_t);
     WTF_EXPORT_PRIVATE void encode(float);
     WTF_EXPORT_PRIVATE void encode(double);
 
@@ -98,20 +99,21 @@
 
     Vector<uint8_t, 4096> m_buffer;
     SHA1 m_sha1;
 };
 
-template <> struct Encoder::Salt<bool> { static const unsigned value = 3; };
-template <> struct Encoder::Salt<uint8_t> { static const  unsigned value = 5; };
-template <> struct Encoder::Salt<uint16_t> { static const unsigned value = 7; };
-template <> struct Encoder::Salt<uint32_t> { static const unsigned value = 11; };
-template <> struct Encoder::Salt<uint64_t> { static const unsigned value = 13; };
-template <> struct Encoder::Salt<int32_t> { static const unsigned value = 17; };
-template <> struct Encoder::Salt<int64_t> { static const unsigned value = 19; };
-template <> struct Encoder::Salt<float> { static const unsigned value = 23; };
-template <> struct Encoder::Salt<double> { static const unsigned value = 29; };
-template <> struct Encoder::Salt<uint8_t*> { static const unsigned value = 101; };
+template <> struct Encoder::Salt<bool> { static constexpr unsigned value = 3; };
+template <> struct Encoder::Salt<uint8_t> { static constexpr  unsigned value = 5; };
+template <> struct Encoder::Salt<uint16_t> { static constexpr unsigned value = 7; };
+template <> struct Encoder::Salt<uint32_t> { static constexpr unsigned value = 11; };
+template <> struct Encoder::Salt<uint64_t> { static constexpr unsigned value = 13; };
+template <> struct Encoder::Salt<int32_t> { static constexpr unsigned value = 17; };
+template <> struct Encoder::Salt<int64_t> { static constexpr unsigned value = 19; };
+template <> struct Encoder::Salt<float> { static constexpr unsigned value = 23; };
+template <> struct Encoder::Salt<double> { static constexpr unsigned value = 29; };
+template <> struct Encoder::Salt<uint8_t*> { static constexpr unsigned value = 101; };
+template <> struct Encoder::Salt<int16_t> { static constexpr unsigned value = 103; };
 
 template <typename Type>
 void Encoder::updateChecksumForNumber(SHA1& sha1, Type value)
 {
     auto typeSalt = Salt<Type>::value;
