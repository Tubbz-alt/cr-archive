diff a/modules/javafx.web/src/main/native/Source/WebCore/page/ViewportConfiguration.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/ViewportConfiguration.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/ViewportConfiguration.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/ViewportConfiguration.cpp
@@ -36,16 +36,16 @@
 #include "PlatformScreen.h"
 #endif
 
 namespace WebCore {
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
 static bool constraintsAreAllRelative(const ViewportConfiguration::Parameters& configuration)
 {
     return !configuration.widthIsSet && !configuration.heightIsSet && !configuration.initialScaleIsSet;
 }
-#endif
+#endif // ASSERT_ENABLED
 
 static float platformDeviceWidthOverride()
 {
 #if PLATFORM(WATCHOS)
     return 320;
@@ -264,12 +264,17 @@
         return m_configuration.initialScale;
 
     // If not, it is up to us to determine the initial scale.
     // We want a scale small enough to fit the document width-wise.
     double initialScale = 0;
-    if (width > 0 && !shouldIgnoreVerticalScalingConstraints())
-        initialScale = m_viewLayoutSize.width() / width;
+    if (!shouldIgnoreVerticalScalingConstraints()) {
+        static const double maximumContentWidthBeforePreferringExplicitWidthToAvoidExcessiveScaling = 1920;
+        if (width > maximumContentWidthBeforePreferringExplicitWidthToAvoidExcessiveScaling && m_configuration.widthIsSet && 0 < m_configuration.width && m_configuration.width < width)
+            initialScale = m_viewLayoutSize.width() / m_configuration.width;
+        else if (width > 0)
+            initialScale = m_viewLayoutSize.width() / width;
+    }
 
     // Prevent the initial scale from shrinking to a height smaller than our view's minimum height.
     if (height > 0 && height * initialScale < m_viewLayoutSize.height() && !shouldIgnoreHorizontalScalingConstraints())
         initialScale = m_viewLayoutSize.height() / height;
 
@@ -626,11 +631,11 @@
     updateMinimumLayoutSize();
     updateConfiguration();
     return true;
 }
 
-#ifndef NDEBUG
+#if !LOG_DISABLED
 
 TextStream& operator<<(TextStream& ts, const ViewportConfiguration::Parameters& parameters)
 {
     ts.startGroup();
     ts << "width " << parameters.width << ", set: " << (parameters.widthIsSet ? "true" : "false");
