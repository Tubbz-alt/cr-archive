diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/FastBitVector.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/FastBitVector.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/FastBitVector.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/FastBitVector.h
@@ -33,11 +33,13 @@
 
 namespace WTF {
 
 class PrintStream;
 
-inline size_t fastBitVectorArrayLength(size_t numBits) { return (numBits + 31) / 32; }
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(FastBitVector);
+
+inline constexpr size_t fastBitVectorArrayLength(size_t numBits) { return (numBits + 31) / 32; }
 
 class FastBitVectorWordView {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     typedef FastBitVectorWordView ViewType;
@@ -85,11 +87,11 @@
     }
 
     ~FastBitVectorWordOwner()
     {
         if (m_words)
-            fastFree(m_words);
+            FastBitVectorMalloc::free(m_words);
     }
 
     FastBitVectorWordView view() const { return FastBitVectorWordView(m_words, m_numBits); }
 
     FastBitVectorWordOwner& operator=(const FastBitVectorWordOwner& other)
@@ -420,10 +422,13 @@
             out.print((*this)[i] ? "1" : "-");
     }
 
     typename Words::ViewType wordView() const { return m_words.view(); }
 
+    Words& unsafeWords() { return m_words; }
+    const Words& unsafeWords() const { return m_words; }
+
 private:
     // You'd think that we could remove this friend if we used protected, but you'd be wrong,
     // because templates.
     friend class FastBitVector;
 
@@ -434,10 +439,45 @@
     }
 
     Words m_words;
 };
 
+class FastBitReference {
+    WTF_MAKE_FAST_ALLOCATED;
+public:
+    FastBitReference() = default;
+
+    FastBitReference(uint32_t* word, uint32_t mask)
+        : m_word(word)
+        , m_mask(mask)
+    {
+    }
+
+    operator bool() const
+    {
+        return !!(*m_word & m_mask);
+    }
+
+    FastBitReference& operator=(bool value)
+    {
+        if (value)
+            *m_word |= m_mask;
+        else
+            *m_word &= ~m_mask;
+        return *this;
+    }
+
+    FastBitReference& operator|=(bool value) { return value ? *this = value : *this; }
+    FastBitReference& operator&=(bool value) { return value ? *this : *this = value; }
+
+private:
+    uint32_t* m_word { nullptr };
+    uint32_t m_mask { 0 };
+};
+
+
+
 class FastBitVector : public FastBitVectorImpl<FastBitVectorWordOwner> {
 public:
     FastBitVector() { }
 
     FastBitVector(const FastBitVector&) = default;
@@ -473,10 +513,14 @@
     void clearAll()
     {
         m_words.clearAll();
     }
 
+    // For templating as Vector<bool>
+    void fill(bool value) { value ? setAll() : clearAll(); }
+    void grow(size_t newSize) { resize(newSize); }
+
     WTF_EXPORT_PRIVATE void clearRange(size_t begin, size_t end);
 
     // Returns true if the contents of this bitvector changed.
     template<typename OtherWords>
     bool setAndCheck(const FastBitVectorImpl<OtherWords>& other)
@@ -516,46 +560,17 @@
     bool operator[](size_t index) const
     {
         return atImpl(index);
     }
 
-    class BitReference {
-    public:
-        BitReference() { }
-
-        BitReference(uint32_t* word, uint32_t mask)
-            : m_word(word)
-            , m_mask(mask)
-        {
-        }
-
-        explicit operator bool() const
-        {
-            return !!(*m_word & m_mask);
-        }
-
-        BitReference& operator=(bool value)
-        {
-            if (value)
-                *m_word |= m_mask;
-            else
-                *m_word &= ~m_mask;
-            return *this;
-        }
-
-    private:
-        uint32_t* m_word { nullptr };
-        uint32_t m_mask { 0 };
-    };
-
-    BitReference at(size_t index)
+    FastBitReference at(size_t index)
     {
         ASSERT_WITH_SECURITY_IMPLICATION(index < numBits());
-        return BitReference(&m_words.word(index >> 5), 1 << (index & 31));
+        return FastBitReference(&m_words.word(index >> 5), 1 << (index & 31));
     }
 
-    BitReference operator[](size_t index)
+    FastBitReference operator[](size_t index)
     {
         return at(index);
     }
 
     // Returns true if the contents changed.
@@ -581,6 +596,7 @@
     }
 };
 
 } // namespace WTF
 
+using WTF::FastBitReference;
 using WTF::FastBitVector;
