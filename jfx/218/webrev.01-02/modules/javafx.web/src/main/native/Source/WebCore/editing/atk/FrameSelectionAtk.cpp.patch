diff a/modules/javafx.web/src/main/native/Source/WebCore/editing/atk/FrameSelectionAtk.cpp b/modules/javafx.web/src/main/native/Source/WebCore/editing/atk/FrameSelectionAtk.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/editing/atk/FrameSelectionAtk.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/editing/atk/FrameSelectionAtk.cpp
@@ -32,11 +32,11 @@
 #include <wtf/NeverDestroyed.h>
 #include <wtf/RefPtr.h>
 
 namespace WebCore {
 
-static void emitTextSelectionChange(AccessibilityObject* object, VisibleSelection selection, int offset)
+static void emitTextSelectionChange(AXCoreObject* object, VisibleSelection selection, int offset)
 {
     auto* axObject = object->wrapper();
     if (!axObject || !ATK_IS_TEXT(axObject))
         return;
 
@@ -50,16 +50,16 @@
     g_signal_emit_by_name(axObject, "text-caret-moved", offset);
     if (selection.isRange())
         g_signal_emit_by_name(axObject, "text-selection-changed");
 }
 
-static void maybeEmitTextFocusChange(RefPtr<AccessibilityObject>&& object)
+static void maybeEmitTextFocusChange(RefPtr<AXCoreObject>&& object)
 {
     // This static variable is needed to keep track of the old object
     // as per previous calls to this function, in order to properly
     // decide whether to emit some signals or not.
-    static NeverDestroyed<RefPtr<AccessibilityObject>> oldObject;
+    static NeverDestroyed<RefPtr<AXCoreObject>> oldObject;
 
     // Ensure the oldObject belongs to the same document that the
     // current object so further comparisons make sense. Otherwise,
     // just reset oldObject to 0 so it won't be taken into account in
     // the immediately following call to this function.
@@ -104,11 +104,11 @@
     AccessibilityObject* accessibilityObject = cache->getOrCreate(focusedNode->renderer());
     if (!accessibilityObject)
         return;
 
     int offset;
-    RefPtr<AccessibilityObject> object = objectFocusedAndCaretOffsetUnignored(accessibilityObject, offset);
+    RefPtr<AXCoreObject> object = objectFocusedAndCaretOffsetUnignored(accessibilityObject, offset);
     if (!object)
         return;
 
     emitTextSelectionChange(object.get(), m_selection, offset);
     maybeEmitTextFocusChange(WTFMove(object));
