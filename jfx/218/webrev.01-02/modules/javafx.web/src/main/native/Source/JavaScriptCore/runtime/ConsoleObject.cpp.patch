diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ConsoleObject.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ConsoleObject.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ConsoleObject.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ConsoleObject.cpp
@@ -32,50 +32,50 @@
 #include "ScriptArguments.h"
 #include "ScriptCallStackFactory.h"
 
 namespace JSC {
 
-static String valueOrDefaultLabelString(ExecState* exec)
+static String valueOrDefaultLabelString(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    if (exec->argumentCount() < 1)
+    if (callFrame->argumentCount() < 1)
         return "default"_s;
 
-    auto value = exec->argument(0);
+    auto value = callFrame->argument(0);
     if (value.isUndefined())
         return "default"_s;
 
-    return value.toWTFString(exec);
+    return value.toWTFString(globalObject);
 }
 
 STATIC_ASSERT_IS_TRIVIALLY_DESTRUCTIBLE(ConsoleObject);
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncDebug(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncError(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncLog(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncInfo(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncWarn(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncClear(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncDir(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncDirXML(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTable(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTrace(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncAssert(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncCount(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncCountReset(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncProfile(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncProfileEnd(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTakeHeapSnapshot(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTime(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTimeLog(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTimeEnd(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTimeStamp(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncGroup(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncGroupCollapsed(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncGroupEnd(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncRecord(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncRecordEnd(ExecState*);
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncScreenshot(ExecState*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncDebug(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncError(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncLog(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncInfo(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncWarn(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncClear(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncDir(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncDirXML(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTable(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTrace(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncAssert(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncCount(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncCountReset(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncProfile(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncProfileEnd(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTakeHeapSnapshot(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTime(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTimeLog(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTimeEnd(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTimeStamp(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncGroup(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncGroupCollapsed(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncGroupEnd(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncRecord(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncRecordEnd(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncScreenshot(JSGlobalObject*, CallFrame*);
 
 const ClassInfo ConsoleObject::s_info = { "Console", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(ConsoleObject) };
 
 ConsoleObject::ConsoleObject(VM& vm, Structure* structure)
     : JSNonFinalObject(vm, structure)
@@ -117,319 +117,319 @@
     JSC_NATIVE_FUNCTION_WITHOUT_TRANSITION("record", consoleProtoFuncRecord, static_cast<unsigned>(PropertyAttribute::None), 0);
     JSC_NATIVE_FUNCTION_WITHOUT_TRANSITION("recordEnd", consoleProtoFuncRecordEnd, static_cast<unsigned>(PropertyAttribute::None), 0);
     JSC_NATIVE_FUNCTION_WITHOUT_TRANSITION("screenshot", consoleProtoFuncScreenshot, static_cast<unsigned>(PropertyAttribute::None), 0);
 }
 
-static String valueToStringWithUndefinedOrNullCheck(ExecState* exec, JSValue value)
+static String valueToStringWithUndefinedOrNullCheck(JSGlobalObject* globalObject, JSValue value)
 {
     if (value.isUndefinedOrNull())
         return String();
-    return value.toWTFString(exec);
+    return value.toWTFString(globalObject);
 }
 
-static EncodedJSValue consoleLogWithLevel(ExecState* exec, MessageLevel level)
+static EncodedJSValue consoleLogWithLevel(JSGlobalObject* globalObject, CallFrame* callFrame, MessageLevel level)
 {
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    client->logWithLevel(exec, Inspector::createScriptArguments(exec, 0), level);
+    client->logWithLevel(globalObject, Inspector::createScriptArguments(globalObject, callFrame, 0), level);
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncDebug(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncDebug(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return consoleLogWithLevel(exec, MessageLevel::Debug);
+    return consoleLogWithLevel(globalObject, callFrame, MessageLevel::Debug);
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncError(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncError(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return consoleLogWithLevel(exec, MessageLevel::Error);
+    return consoleLogWithLevel(globalObject, callFrame, MessageLevel::Error);
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncLog(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncLog(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return consoleLogWithLevel(exec, MessageLevel::Log);
+    return consoleLogWithLevel(globalObject, callFrame, MessageLevel::Log);
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncInfo(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncInfo(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return consoleLogWithLevel(exec, MessageLevel::Info);
+    return consoleLogWithLevel(globalObject, callFrame, MessageLevel::Info);
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncWarn(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncWarn(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    return consoleLogWithLevel(exec, MessageLevel::Warning);
+    return consoleLogWithLevel(globalObject, callFrame, MessageLevel::Warning);
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncClear(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncClear(JSGlobalObject* globalObject, CallFrame*)
 {
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    client->clear(exec);
+    client->clear(globalObject);
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncDir(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncDir(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    client->dir(exec, Inspector::createScriptArguments(exec, 0));
+    client->dir(globalObject, Inspector::createScriptArguments(globalObject, callFrame, 0));
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncDirXML(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncDirXML(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    client->dirXML(exec, Inspector::createScriptArguments(exec, 0));
+    client->dirXML(globalObject, Inspector::createScriptArguments(globalObject, callFrame, 0));
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTable(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTable(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    client->table(exec, Inspector::createScriptArguments(exec, 0));
+    client->table(globalObject, Inspector::createScriptArguments(globalObject, callFrame, 0));
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTrace(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTrace(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    client->trace(exec, Inspector::createScriptArguments(exec, 0));
+    client->trace(globalObject, Inspector::createScriptArguments(globalObject, callFrame, 0));
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncAssert(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncAssert(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    bool condition = exec->argument(0).toBoolean(exec);
+    bool condition = callFrame->argument(0).toBoolean(globalObject);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
     if (condition)
         return JSValue::encode(jsUndefined());
 
-    client->assertion(exec, Inspector::createScriptArguments(exec, 1));
+    client->assertion(globalObject, Inspector::createScriptArguments(globalObject, callFrame, 1));
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncCount(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncCount(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    auto scope = DECLARE_THROW_SCOPE(exec->vm());
-    auto* client = exec->lexicalGlobalObject()->consoleClient();
+    auto scope = DECLARE_THROW_SCOPE(globalObject->vm());
+    auto* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    auto label = valueOrDefaultLabelString(exec);
+    auto label = valueOrDefaultLabelString(globalObject, callFrame);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
-    client->count(exec, label);
+    client->count(globalObject, label);
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncCountReset(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncCountReset(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    auto scope = DECLARE_THROW_SCOPE(exec->vm());
-    auto* client = exec->lexicalGlobalObject()->consoleClient();
+    auto scope = DECLARE_THROW_SCOPE(globalObject->vm());
+    auto* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    auto label = valueOrDefaultLabelString(exec);
+    auto label = valueOrDefaultLabelString(globalObject, callFrame);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
-    client->countReset(exec, label);
+    client->countReset(globalObject, label);
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncProfile(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncProfile(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    size_t argsCount = exec->argumentCount();
+    size_t argsCount = callFrame->argumentCount();
     if (!argsCount) {
-        client->profile(exec, String());
+        client->profile(globalObject, String());
         return JSValue::encode(jsUndefined());
     }
 
-    const String& title(valueToStringWithUndefinedOrNullCheck(exec, exec->argument(0)));
+    const String& title(valueToStringWithUndefinedOrNullCheck(globalObject, callFrame->argument(0)));
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
-    client->profile(exec, title);
+    client->profile(globalObject, title);
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncProfileEnd(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncProfileEnd(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    size_t argsCount = exec->argumentCount();
+    size_t argsCount = callFrame->argumentCount();
     if (!argsCount) {
-        client->profileEnd(exec, String());
+        client->profileEnd(globalObject, String());
         return JSValue::encode(jsUndefined());
     }
 
-    const String& title(valueToStringWithUndefinedOrNullCheck(exec, exec->argument(0)));
+    const String& title(valueToStringWithUndefinedOrNullCheck(globalObject, callFrame->argument(0)));
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
-    client->profileEnd(exec, title);
+    client->profileEnd(globalObject, title);
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTakeHeapSnapshot(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTakeHeapSnapshot(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    size_t argsCount = exec->argumentCount();
+    size_t argsCount = callFrame->argumentCount();
     if (!argsCount) {
-        client->takeHeapSnapshot(exec, String());
+        client->takeHeapSnapshot(globalObject, String());
         return JSValue::encode(jsUndefined());
     }
 
-    const String& title(valueToStringWithUndefinedOrNullCheck(exec, exec->argument(0)));
+    const String& title(valueToStringWithUndefinedOrNullCheck(globalObject, callFrame->argument(0)));
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
-    client->takeHeapSnapshot(exec, title);
+    client->takeHeapSnapshot(globalObject, title);
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTime(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTime(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    auto scope = DECLARE_THROW_SCOPE(exec->vm());
-    auto* client = exec->lexicalGlobalObject()->consoleClient();
+    auto scope = DECLARE_THROW_SCOPE(globalObject->vm());
+    auto* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    auto label = valueOrDefaultLabelString(exec);
+    auto label = valueOrDefaultLabelString(globalObject, callFrame);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
-    client->time(exec, label);
+    client->time(globalObject, label);
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTimeLog(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTimeLog(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    auto scope = DECLARE_THROW_SCOPE(exec->vm());
-    auto* client = exec->lexicalGlobalObject()->consoleClient();
+    auto scope = DECLARE_THROW_SCOPE(globalObject->vm());
+    auto* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    auto label = valueOrDefaultLabelString(exec);
+    auto label = valueOrDefaultLabelString(globalObject, callFrame);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
-    client->timeLog(exec, label, Inspector::createScriptArguments(exec, 1));
+    client->timeLog(globalObject, label, Inspector::createScriptArguments(globalObject, callFrame, 1));
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTimeEnd(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTimeEnd(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    auto scope = DECLARE_THROW_SCOPE(exec->vm());
-    auto* client = exec->lexicalGlobalObject()->consoleClient();
+    auto scope = DECLARE_THROW_SCOPE(globalObject->vm());
+    auto* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    auto label = valueOrDefaultLabelString(exec);
+    auto label = valueOrDefaultLabelString(globalObject, callFrame);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
-    client->timeEnd(exec, label);
+    client->timeEnd(globalObject, label);
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTimeStamp(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncTimeStamp(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    client->timeStamp(exec, Inspector::createScriptArguments(exec, 0));
+    client->timeStamp(globalObject, Inspector::createScriptArguments(globalObject, callFrame, 0));
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncGroup(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncGroup(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    client->group(exec, Inspector::createScriptArguments(exec, 0));
+    client->group(globalObject, Inspector::createScriptArguments(globalObject, callFrame, 0));
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncGroupCollapsed(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncGroupCollapsed(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    client->groupCollapsed(exec, Inspector::createScriptArguments(exec, 0));
+    client->groupCollapsed(globalObject, Inspector::createScriptArguments(globalObject, callFrame, 0));
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncGroupEnd(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncGroupEnd(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    client->groupEnd(exec, Inspector::createScriptArguments(exec, 0));
+    client->groupEnd(globalObject, Inspector::createScriptArguments(globalObject, callFrame, 0));
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncRecord(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncRecord(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    client->record(exec, Inspector::createScriptArguments(exec, 0));
+    client->record(globalObject, Inspector::createScriptArguments(globalObject, callFrame, 0));
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncRecordEnd(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncRecordEnd(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    client->recordEnd(exec, Inspector::createScriptArguments(exec, 0));
+    client->recordEnd(globalObject, Inspector::createScriptArguments(globalObject, callFrame, 0));
     return JSValue::encode(jsUndefined());
 }
 
-static EncodedJSValue JSC_HOST_CALL consoleProtoFuncScreenshot(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL consoleProtoFuncScreenshot(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    ConsoleClient* client = exec->lexicalGlobalObject()->consoleClient();
+    ConsoleClient* client = globalObject->consoleClient();
     if (!client)
         return JSValue::encode(jsUndefined());
 
-    client->screenshot(exec, Inspector::createScriptArguments(exec, 0));
+    client->screenshot(globalObject, Inspector::createScriptArguments(globalObject, callFrame, 0));
     return JSValue::encode(jsUndefined());
 }
 
 } // namespace JSC
