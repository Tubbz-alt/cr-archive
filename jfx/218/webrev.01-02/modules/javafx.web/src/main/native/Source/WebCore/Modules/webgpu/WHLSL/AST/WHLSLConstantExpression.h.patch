diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLConstantExpression.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLConstantExpression.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLConstantExpression.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLConstantExpression.h
@@ -29,11 +29,10 @@
 
 #include "WHLSLBooleanLiteral.h"
 #include "WHLSLEnumerationMemberLiteral.h"
 #include "WHLSLFloatLiteral.h"
 #include "WHLSLIntegerLiteral.h"
-#include "WHLSLNullLiteral.h"
 #include "WHLSLUnsignedIntegerLiteral.h"
 #include <wtf/FastMalloc.h>
 #include <wtf/Variant.h>
 
 namespace WebCore {
@@ -61,15 +60,10 @@
     ConstantExpression(FloatLiteral&& floatLiteral)
         : m_variant(WTFMove(floatLiteral))
     {
     }
 
-    ConstantExpression(NullLiteral&& nullLiteral)
-        : m_variant(WTFMove(nullLiteral))
-    {
-    }
-
     ConstantExpression(BooleanLiteral&& booleanLiteral)
         : m_variant(WTFMove(booleanLiteral))
     {
     }
 
@@ -88,16 +82,16 @@
     {
         ASSERT(WTF::holds_alternative<IntegerLiteral>(m_variant));
         return WTF::get<IntegerLiteral>(m_variant);
     }
 
-    template <typename Visitor> auto visit(const Visitor& visitor) -> decltype(WTF::visit(visitor, std::declval<Variant<IntegerLiteral, UnsignedIntegerLiteral, FloatLiteral, NullLiteral, BooleanLiteral, EnumerationMemberLiteral>&>()))
+    template <typename Visitor> auto visit(const Visitor& visitor) -> decltype(WTF::visit(visitor, std::declval<Variant<IntegerLiteral, UnsignedIntegerLiteral, FloatLiteral, BooleanLiteral, EnumerationMemberLiteral>&>()))
     {
         return WTF::visit(visitor, m_variant);
     }
 
-    template <typename Visitor> auto visit(const Visitor& visitor) const -> decltype(WTF::visit(visitor, std::declval<Variant<IntegerLiteral, UnsignedIntegerLiteral, FloatLiteral, NullLiteral, BooleanLiteral, EnumerationMemberLiteral>&>()))
+    template <typename Visitor> auto visit(const Visitor& visitor) const -> decltype(WTF::visit(visitor, std::declval<Variant<IntegerLiteral, UnsignedIntegerLiteral, FloatLiteral, BooleanLiteral, EnumerationMemberLiteral>&>()))
     {
         return WTF::visit(visitor, m_variant);
     }
 
     ConstantExpression clone() const
@@ -106,12 +100,10 @@
             return integerLiteral.clone();
         }, [&](const UnsignedIntegerLiteral& unsignedIntegerLiteral) -> ConstantExpression {
             return unsignedIntegerLiteral.clone();
         }, [&](const FloatLiteral& floatLiteral) -> ConstantExpression {
             return floatLiteral.clone();
-        }, [&](const NullLiteral& nullLiteral) -> ConstantExpression {
-            return nullLiteral.clone();
         }, [&](const BooleanLiteral& booleanLiteral) -> ConstantExpression {
             return booleanLiteral.clone();
         }, [&](const EnumerationMemberLiteral& enumerationMemberLiteral) -> ConstantExpression {
             return enumerationMemberLiteral.clone();
         }), m_variant);
@@ -125,12 +117,10 @@
             value = integerLiteral.value();
         }, [&](const UnsignedIntegerLiteral& unsignedIntegerLiteral) {
             value = unsignedIntegerLiteral.value();
         }, [&](const FloatLiteral& floatLiteral) {
             value = floatLiteral.value();
-        }, [&](const NullLiteral&) {
-            result = WTF::holds_alternative<NullLiteral>(other.m_variant);
         }, [&](const BooleanLiteral& booleanLiteral) {
             if (WTF::holds_alternative<BooleanLiteral>(other.m_variant)) {
                 const auto& otherBooleanLiteral = WTF::get<BooleanLiteral>(other.m_variant);
                 result = booleanLiteral.value() == otherBooleanLiteral.value();
             } else
@@ -150,12 +140,10 @@
             result = value == integerLiteral.value();
         }, [&](const UnsignedIntegerLiteral& unsignedIntegerLiteral) {
             result = value == unsignedIntegerLiteral.value();
         }, [&](const FloatLiteral& floatLiteral) {
             result = value == floatLiteral.value();
-        }, [&](const NullLiteral&) {
-            result = false;
         }, [&](const BooleanLiteral&) {
             result = false;
         }, [&](const EnumerationMemberLiteral&) {
             result = false;
         }));
@@ -167,11 +155,10 @@
 private:
     Variant<
         IntegerLiteral,
         UnsignedIntegerLiteral,
         FloatLiteral,
-        NullLiteral,
         BooleanLiteral,
         EnumerationMemberLiteral
         > m_variant;
 };
 
