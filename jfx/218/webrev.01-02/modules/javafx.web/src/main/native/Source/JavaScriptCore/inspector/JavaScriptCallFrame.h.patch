diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JavaScriptCallFrame.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JavaScriptCallFrame.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JavaScriptCallFrame.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JavaScriptCallFrame.h
@@ -47,14 +47,14 @@
     int column() const { return m_debuggerCallFrame->column(); }
 
     String functionName() const { return m_debuggerCallFrame->functionName(); }
     JSC::DebuggerCallFrame::Type type() const { return m_debuggerCallFrame->type(); }
     JSC::DebuggerScope* scopeChain() const { return m_debuggerCallFrame->scope(); }
-    JSC::JSGlobalObject* vmEntryGlobalObject() const { return m_debuggerCallFrame->vmEntryGlobalObject(); }
+    JSC::JSGlobalObject* deprecatedVMEntryGlobalObject() const { return m_debuggerCallFrame->deprecatedVMEntryGlobalObject(); }
     bool isTailDeleted() const { return m_debuggerCallFrame->isTailDeleted(); }
 
-    JSC::JSValue thisValue() const { return m_debuggerCallFrame->thisValue(); }
+    JSC::JSValue thisValue(JSC::VM& vm) const { return m_debuggerCallFrame->thisValue(vm); }
     JSC::JSValue evaluateWithScopeExtension(const String& script, JSC::JSObject* scopeExtension, NakedPtr<JSC::Exception>& exception) const { return m_debuggerCallFrame->evaluateWithScopeExtension(script, scopeExtension, exception); }
 
 private:
     JavaScriptCallFrame(Ref<JSC::DebuggerCallFrame>&&);
 
