diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITDisassembler.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITDisassembler.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITDisassembler.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITDisassembler.cpp
@@ -116,11 +116,11 @@
             i++;
             continue;
         }
         out.reset();
         result.append(DumpedOp());
-        result.last().index = i;
+        result.last().bytecodeIndex = BytecodeIndex(i);
         out.print(prefix);
         m_codeBlock->dumpBytecode(out, i);
         for (unsigned nextIndex = i + 1; ; nextIndex++) {
             if (nextIndex >= labels.size()) {
                 dumpDisassembly(out, linkBuffer, labels[i], endLabel);
@@ -152,11 +152,11 @@
     Vector<DumpedOp> dumpedOps = dumpVectorForInstructions(linkBuffer, prefix, labels, endLabel);
 
     for (unsigned i = 0; i < dumpedOps.size(); ++i) {
         compilation->addDescription(
             Profiler::CompiledBytecode(
-                Profiler::OriginStack(Profiler::Origin(compilation->bytecodes(), dumpedOps[i].index)),
+                Profiler::OriginStack(Profiler::Origin(compilation->bytecodes(), dumpedOps[i].bytecodeIndex)),
                 dumpedOps[i].disassembly));
     }
 }
 
 void JITDisassembler::dumpDisassembly(PrintStream& out, LinkBuffer& linkBuffer, MacroAssembler::Label from, MacroAssembler::Label to)
