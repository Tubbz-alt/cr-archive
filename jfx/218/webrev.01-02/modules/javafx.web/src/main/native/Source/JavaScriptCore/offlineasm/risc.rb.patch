diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/risc.rb b/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/risc.rb
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/risc.rb
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/risc.rb
@@ -360,11 +360,11 @@
             self
         end
     end
 end
 
-def riscLowerMalformedImmediates(list, validImmediates)
+def riscLowerMalformedImmediates(list, validImmediates, validLogicalImmediates)
     newList = []
     list.each {
         | node |
         if node.is_a? Instruction
             annotation = node.annotation
@@ -393,10 +393,12 @@
                     newList << Instruction.new(node.codeOrigin, "move", [node.operands[0], tmp], annotation)
                     newList << Instruction.new(node.codeOrigin, node.opcode, [tmp] + node.operands[1..-1])
                 else
                     newList << node.riscLowerMalformedImmediatesRecurse(newList, validImmediates)
                 end
+            when "ori", "orh", "orp", "oris", "xori", "xorp", "andi", "andp"
+                newList << node.riscLowerMalformedImmediatesRecurse(newList, validLogicalImmediates)
             else
                 newList << node.riscLowerMalformedImmediatesRecurse(newList, validImmediates)
             end
         else
             newList << node
@@ -458,11 +460,11 @@
             end
 
             postInstructions = []
             annotation = node.annotation
             case node.opcode
-            when "addi", "addis", "andi", "lshifti", "muli", "negi", "noti", "ori", "oris",
+            when "addi", "addis", "andi", "lshifti", "muli", "negi", "noti", "ori", "orh", "oris",
                 "rshifti", "urshifti", "subi", "subis", "xori", /^bi/, /^bti/, /^ci/, /^ti/
                 newList << Instruction.new(node.codeOrigin,
                                            node.opcode,
                                            riscAsRegisters(newList, postInstructions, node.operands, "i"),
                                            annotation)
