diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerBytecodeSequence.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerBytecodeSequence.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerBytecodeSequence.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerBytecodeSequence.cpp
@@ -74,26 +74,26 @@
 const Bytecode& BytecodeSequence::forBytecodeIndex(unsigned bytecodeIndex) const
 {
     return at(indexForBytecodeIndex(bytecodeIndex));
 }
 
-void BytecodeSequence::addSequenceProperties(ExecState* exec, JSObject* result) const
+void BytecodeSequence::addSequenceProperties(JSGlobalObject* globalObject, JSObject* result) const
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
-    JSArray* header = constructEmptyArray(exec, 0);
+    JSArray* header = constructEmptyArray(globalObject, 0);
     RETURN_IF_EXCEPTION(scope, void());
     for (unsigned i = 0; i < m_header.size(); ++i) {
-        header->putDirectIndex(exec, i, jsString(vm, String::fromUTF8(m_header[i])));
+        header->putDirectIndex(globalObject, i, jsString(vm, String::fromUTF8(m_header[i])));
         RETURN_IF_EXCEPTION(scope, void());
     }
     result->putDirect(vm, vm.propertyNames->header, header);
 
-    JSArray* sequence = constructEmptyArray(exec, 0);
+    JSArray* sequence = constructEmptyArray(globalObject, 0);
     RETURN_IF_EXCEPTION(scope, void());
     for (unsigned i = 0; i < m_sequence.size(); ++i) {
-        sequence->putDirectIndex(exec, i, m_sequence[i].toJS(exec));
+        sequence->putDirectIndex(globalObject, i, m_sequence[i].toJS(globalObject));
         RETURN_IF_EXCEPTION(scope, void());
     }
     result->putDirect(vm, vm.propertyNames->bytecode, sequence);
 }
 
