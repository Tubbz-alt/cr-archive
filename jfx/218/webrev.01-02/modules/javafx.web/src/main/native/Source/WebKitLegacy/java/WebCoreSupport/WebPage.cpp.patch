diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/WebPage.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/WebPage.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/WebPage.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/WebPage.cpp
@@ -55,10 +55,11 @@
 #include <JavaScriptCore/Options.h>
 #include <WebCore/BackForwardController.h>
 #include <WebCore/BridgeUtils.h>
 #include <WebCore/CharacterData.h>
 #include <WebCore/Chrome.h>
+#include <WebCore/CompositionHighlight.h>
 #include <WebCore/ContextMenu.h>
 #include <WebCore/ContextMenuController.h>
 #include <WebCore/CookieJar.h>
 #include <WebCore/DeprecatedGlobalSettings.h>
 #include <WebCore/Document.h>
@@ -246,11 +247,11 @@
 {
     if (m_rootLayer) {
         return;
     }
 
-    DBG_CHECKPOINTEX("twkUpdateContent", 15, 100);
+    // DBG_CHECKPOINTEX("twkUpdateContent", 15, 100);
 
     RefPtr<Frame> mainFrame((Frame*)&m_page->mainFrame());
     RefPtr<FrameView> frameView(mainFrame->view());
     if (!frameView) {
         return;
@@ -259,11 +260,11 @@
     // Will be deleted by GraphicsContext destructor
     PlatformContextJava* ppgc = new PlatformContextJava(rq, jRenderTheme());
     GraphicsContext gc(ppgc);
 
     // TODO: Following JS synchronization is not necessary for single thread model
-    JSGlobalContextRef globalContext = toGlobalRef(mainFrame->script().globalObject(mainThreadNormalWorld())->globalExec());
+    JSGlobalContextRef globalContext = toGlobalRef(mainFrame->script().globalObject(mainThreadNormalWorld()));
     JSC::JSLockHolder sw(toJS(globalContext)); // TODO-java: was JSC::APIEntryShim sw( toJS(globalContext) );
 
     frameView->paint(gc, IntRect(x, y, w, h));
     if (m_page->settings().showDebugBorders()) {
         drawDebugLed(gc, IntRect(x, y, w, h), Color(0, 0, 255, 128));
@@ -451,15 +452,11 @@
 void WebPage::notifyFlushRequired(const GraphicsLayer*)
 {
     markForSync();
 }
 
-void WebPage::paintContents(const GraphicsLayer*,
-                   GraphicsContext& context,
-                   OptionSet<GraphicsLayerPaintingPhase>,
-                   const FloatRect& inClip,
-                   GraphicsLayerPaintBehavior)
+void WebPage::paintContents(const GraphicsLayer*, GraphicsContext& context, const FloatRect& inClip, GraphicsLayerPaintBehavior)
 {
     context.save();
     context.clip(inClip);
     m_page->mainFrame().view()->paint(context, enclosingIntRect(inClip));
     if (m_page->settings().showDebugBorders()) {
@@ -868,24 +865,24 @@
 
     JLObject jlself(self, true);
 
     //utaTODO: history agent implementation
 
-    auto pc = pageConfigurationWithEmptyClients();
+    auto pc = pageConfigurationWithEmptyClients(PAL::SessionID::defaultSessionID());
     auto pageStorageSessionProvider = PageStorageSessionProvider::create();
     pc.cookieJar = CookieJar::create(pageStorageSessionProvider.copyRef());
     pc.chromeClient = new ChromeClientJava(jlself);
     pc.contextMenuClient = new ContextMenuClientJava(jlself);
     pc.editorClient = makeUniqueRef<EditorClientJava>(jlself);
-    pc.dragClient = new DragClientJava(jlself);
+    pc.dragClient = makeUnique<DragClientJava>(jlself);
     pc.inspectorClient = new InspectorClientJava(jlself);
     pc.databaseProvider = &WebDatabaseProvider::singleton();
     pc.storageNamespaceProvider = adoptRef(new WebStorageNamespaceProviderJava());
     pc.visitedLinkStore = VisitedLinkStoreJava::create();
 
     pc.loaderClientForMainFrame = new FrameLoaderClientJava(jlself);
-    pc.progressTrackerClient = new ProgressTrackerClientJava(jlself);
+    pc.progressTrackerClient = makeUniqueRef<ProgressTrackerClientJava>(jlself);
 
     pc.backForwardClient = BackForwardList::create();
     auto page = std::make_unique<Page>(WTFMove(pc));
     // Associate PageSupplementJava instance which has WebPage java object.
     page->provideSupplement(PageSupplementJava::supplementName(), std::make_unique<PageSupplementJava>(self));
@@ -1112,15 +1109,17 @@
         return;
     }
 
     static const URL emptyParent;
 
-    frame->loader().load(FrameLoadRequest(
+    FrameLoadRequest frameLoadRequest(
         *frame,
         ResourceRequest(URL(emptyParent, String(env, url))),
         ShouldOpenExternalURLsPolicy::ShouldNotAllow // TODO-java: recheck policy value
-    ));
+    );
+    frameLoadRequest.setIsRequestFromClientOrUserInput();
+    frame->loader().load(WTFMove(frameLoadRequest));
 }
 
 JNIEXPORT void JNICALL Java_com_sun_webkit_WebPage_twkLoad
     (JNIEnv* env, jobject self, jlong pFrame, jstring text, jstring contentType)
 {
@@ -1133,20 +1132,22 @@
     size_t stringLen = (size_t)env->GetStringUTFLength(text);
     RefPtr<SharedBuffer> buffer = SharedBuffer::create(stringChars, (int)stringLen);
 
     static const URL emptyUrl({ }, "");
     ResourceResponse response(URL(), String(env, contentType), stringLen, "UTF-8");
-    frame->loader().load(FrameLoadRequest(
+    FrameLoadRequest frameLoadRequest(
         *frame,
         ResourceRequest(emptyUrl),
         ShouldOpenExternalURLsPolicy::ShouldNotAllow, // TODO-java: recheck policy value
         SubstituteData(
             WTFMove(buffer),
             URL(),
             response,
             SubstituteData::SessionHistoryVisibility::Visible) // TODO-java: or Hidden?
-    ));
+    );
+    frameLoadRequest.setIsRequestFromClientOrUserInput();
+    frame->loader().load(WTFMove(frameLoadRequest));
 
     env->ReleaseStringUTFChars(text, stringChars);
 }
 
 JNIEXPORT jboolean JNICALL Java_com_sun_webkit_WebPage_twkIsLoading
@@ -1305,30 +1306,34 @@
         settings.setSansSerifFontFamily(nativePropertyValue);
     } else if (nativePropertyName == "WebKitFixedFontFamily") {
         settings.setFixedFontFamily(nativePropertyValue);
     } else if (nativePropertyName == "WebKitShowsURLsInToolTips") {
         settings.setShowsURLsInToolTips(nativePropertyValue.toInt());
-    } else if (nativePropertyName == "WebKitUsesPageCachePreferenceKey") {
-        settings.setUsesPageCache(nativePropertyValue.toInt() != 0);
     } else if (nativePropertyName == "WebKitJavaScriptCanAccessClipboardPreferenceKey") {
         settings.setJavaScriptCanAccessClipboard(nativePropertyValue.toInt() != 0);
+    } else if (nativePropertyName == "allowTopNavigationToDataURLs") {
+        settings.setAllowTopNavigationToDataURLs(nativePropertyValue == "true");
+    } else if (nativePropertyName == "enableBackForwardCache") {
+        settings.setUsesBackForwardCache(nativePropertyValue == "true");
     } else if (nativePropertyName == "enableColorFilter") {
         settings.setColorFilterEnabled(nativePropertyValue == "true");
     } else if (nativePropertyName == "enableKeygenElement") {
         // removed from Chrome, Firefox, and the HTML specification in 2017.
         // https://trac.webkit.org/changeset/248960/webkit
         RuntimeEnabledFeatures::sharedFeatures().setKeygenElementEnabled(nativePropertyValue == "true");
     } else if (nativePropertyName == "experimental:WebAnimationsCSSIntegrationEnabled") {
         RuntimeEnabledFeatures::sharedFeatures().setWebAnimationsCSSIntegrationEnabled(nativePropertyValue == "true");
+    } else if (nativePropertyName == "experimental:CSSCustomPropertiesAndValuesEnabled") {
+        RuntimeEnabledFeatures::sharedFeatures().setCSSCustomPropertiesAndValuesEnabled(nativePropertyValue == "true");
     } else if (nativePropertyName == "enableIntersectionObserver") {
 #if ENABLE(INTERSECTION_OBSERVER)
         RuntimeEnabledFeatures::sharedFeatures().setIntersectionObserverEnabled(nativePropertyValue == "true");
 #endif
-    } else if(nativePropertyName == "jscOptions" && !nativePropertyValue.isEmpty()) {
+    } else if (nativePropertyName == "experimental:RequestIdleCallbackEnabled") {
+        settings.setRequestIdleCallbackEnabled(nativePropertyValue == "true");
+    } else if (nativePropertyName == "jscOptions" && !nativePropertyValue.isEmpty()) {
         JSC::Options::setOptions(nativePropertyValue.utf8().data());
-    } else if(nativePropertyName == "experimental:CSSCustomPropertiesAndValuesEnabled") {
-        RuntimeEnabledFeatures::sharedFeatures().setCSSCustomPropertiesAndValuesEnabled(nativePropertyValue == "true");
     }
 }
 
 JNIEXPORT void JNICALL Java_com_sun_webkit_WebPage_twkResetToConsistentStateBeforeTesting
     (JNIEnv* env, jobject self, jlong pPage)
@@ -1363,14 +1368,16 @@
     // settings.setCacheModel(WebCacheModelDocumentBrowser);
     settings.setXSSAuditorEnabled(false);
     settings.setExperimentalNotificationsEnabled(false);
     settings.setPluginsEnabled(true);
     settings.setTextAreasAreResizable(true);
-    settings.setUsesPageCache(false);
+    settings.setUsesBackForwardCache(false);
     settings.setCSSOMViewScrollingAPIEnabled(true);
+    settings.setRequestIdleCallbackEnabled(true);
 
     // settings.setPrivateBrowsingEnabled(false);
+    settings.setAllowTopNavigationToDataURLs(true);
     settings.setAuthorAndUserStylesEnabled(true);
     // Shrinks standalone images to fit: YES
     settings.setJavaScriptCanOpenWindowsAutomatically(true);
     settings.setJavaScriptCanAccessClipboard(true);
     settings.setOfflineWebApplicationCacheEnabled(true);
@@ -1389,11 +1396,11 @@
     // settings.setCSSRegionsEnabled(true);
     // Set uses HTML5 parser quirks: NO
     // Async spellcheck: NO
     DeprecatedGlobalSettings::setMockScrollbarsEnabled(true);
 
-
+    RuntimeEnabledFeatures::sharedFeatures().setHighlightAPIEnabled(true);
     RuntimeEnabledFeatures::sharedFeatures().setFetchAPIEnabled(true);
     RuntimeEnabledFeatures::sharedFeatures().setShadowDOMEnabled(true);
     RuntimeEnabledFeatures::sharedFeatures().setCustomElementsEnabled(true);
     RuntimeEnabledFeatures::sharedFeatures().setModernMediaControlsEnabled(false);
     RuntimeEnabledFeatures::sharedFeatures().setResourceTimingEnabled(true);
@@ -1402,11 +1409,11 @@
     RuntimeEnabledFeatures::sharedFeatures().setInspectorAdditionsEnabled(true);
     RuntimeEnabledFeatures::sharedFeatures().setWebAnimationsEnabled(true);
     // RuntimeEnabledFeatures::sharedFeatures().clearNetworkLoaderSession();
 
     Frame& coreFrame = page->mainFrame();
-    auto globalContext = toGlobalRef(coreFrame.script().globalObject(mainThreadNormalWorld())->globalExec());
+    auto globalContext = toGlobalRef(coreFrame.script().globalObject(mainThreadNormalWorld()));
     WebCoreTestSupport::resetInternalsObject(globalContext);
 }
 
 JNIEXPORT jfloat JNICALL Java_com_sun_webkit_WebPage_twkGetZoomFactor
     (JNIEnv* env, jobject self, jlong pFrame, jboolean textOnly)
@@ -1635,10 +1642,16 @@
     (JNIEnv* env, jobject self, jlong pPage, jobject rq, jint x, jint y, jint w, jint h)
 {
     WebPage::webPageFromJLong(pPage)->paint(rq, x, y, w, h);
 }
 
+JNIEXPORT void JNICALL Java_com_sun_webkit_WebPage_twkUpdateRendering
+    (JNIEnv*, jobject, jlong pPage)
+{
+    WebPage::pageFromJLong(pPage)->updateRendering();
+}
+
 JNIEXPORT void JNICALL Java_com_sun_webkit_WebPage_twkPostPaint
   (JNIEnv*, jobject, jlong pPage, jobject rq, jint x, jint y, jint w, jint h)
 {
     WebPage::webPageFromJLong(pPage)->postPaint(rq, x, y, w, h);
 }
@@ -1870,11 +1883,11 @@
                 underlines[x].color = Color(0, 0, 0);
             }
             env->ReleaseIntArrayElements(jattributes, attrs, JNI_ABORT);
         }
         String composed = String(env, jcomposed);
-        frame->editor().setComposition(composed, underlines, caretPosition, 0);
+        frame->editor().setComposition(composed, underlines, { }, caretPosition, 0);
     }
     return JNI_TRUE;
 }
 
 JNIEXPORT jboolean JNICALL Java_com_sun_webkit_WebPage_twkProcessCaretPositionChange
@@ -2275,20 +2288,20 @@
     (JNIEnv*, jobject, jlong pPage)
 {
     ASSERT(pPage);
     Page* page = WebPage::pageFromJLong(pPage);
     ASSERT(page);
-    return bool_to_jbool(page->settings().usesPageCache());
+    return bool_to_jbool(page->settings().usesBackForwardCache());
 }
 
 JNIEXPORT void JNICALL Java_com_sun_webkit_WebPage_twkSetUsePageCache
     (JNIEnv*, jobject, jlong pPage, jboolean usePageCache)
 {
     ASSERT(pPage);
     Page* page = WebPage::pageFromJLong(pPage);
     ASSERT(page);
-    page->settings().setUsesPageCache(jbool_to_bool(usePageCache));
+    page->settings().setUsesBackForwardCache(jbool_to_bool(usePageCache));
 }
 
 JNIEXPORT jboolean JNICALL Java_com_sun_webkit_WebPage_twkIsJavaScriptEnabled
     (JNIEnv*, jobject, jlong pPage)
 {
