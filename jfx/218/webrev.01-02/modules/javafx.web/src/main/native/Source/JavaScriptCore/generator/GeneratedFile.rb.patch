diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/generator/GeneratedFile.rb b/modules/javafx.web/src/main/native/Source/JavaScriptCore/generator/GeneratedFile.rb
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/generator/GeneratedFile.rb
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/generator/GeneratedFile.rb
@@ -54,17 +54,17 @@
         def initialize
             super(["/*", " *", "*/"], "// ", nil, nil, nil)
         end
     end
 
-    def self.create(filename, dependency)
+    def self.create(filename, *dependencies)
         template = Template.new
         yield template
 
         file = File.open(filename, "w")
-        self.sha1(file, template, dependency)
-        self.license(file, template, dependency)
+        self.sha1(file, template, dependencies)
+        self.license(file, template, dependencies)
 
         unless template.prefix.nil?
             write(file, template.prefix.to_s, "\n")
         end
         unless template.body.nil?
@@ -73,22 +73,22 @@
         unless template.suffix.nil?
             write(file, template.suffix.to_s, "\n")
         end
     end
 
-    def self.sha1(file, template, dependency)
-        write(file, template.line_comment, " SHA1Hash: ", Digest::SHA1.hexdigest(dependency.read), "\n")
+    def self.sha1(file, template, dependencies)
+      write(file, template.line_comment, " SHA1Hash: ", Digest::SHA1.hexdigest(dependencies.join), "\n")
     end
 
-    def self.license(file, template, dependency)
+    def self.license(file, template, dependencies)
         unless template.multiline_comment.nil?
             write(file, template.multiline_comment[0], "\n")
         end
 
         comment = if template.multiline_comment.nil? then template.line_comment else template.multiline_comment[1] end
         write(file, $LICENSE.strip.split("\n").map { |line| "#{comment} #{line}" }.join("\n"), "\n\n")
-        write(file, comment, " Autogenerated from ", dependency.path, ", do not modify.\n")
+        write(file, comment, " Autogenerated, do not modify.\n")
 
         unless template.multiline_comment.nil?
             write(file, template.multiline_comment[2], "\n")
         end
 
