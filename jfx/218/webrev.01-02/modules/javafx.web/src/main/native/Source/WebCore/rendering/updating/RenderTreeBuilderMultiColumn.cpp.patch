diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/updating/RenderTreeBuilderMultiColumn.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/updating/RenderTreeBuilderMultiColumn.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/updating/RenderTreeBuilderMultiColumn.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/updating/RenderTreeBuilderMultiColumn.cpp
@@ -29,10 +29,11 @@
 #include "RenderMultiColumnFlow.h"
 #include "RenderMultiColumnSet.h"
 #include "RenderMultiColumnSpannerPlaceholder.h"
 #include "RenderTreeBuilder.h"
 #include "RenderTreeBuilderBlock.h"
+#include "RenderView.h"
 
 namespace WebCore {
 
 static RenderMultiColumnSet* findSetRendering(const RenderMultiColumnFlow& fragmentedFlow, const RenderObject& renderer)
 {
@@ -279,10 +280,13 @@
     RenderBlockFlow* multicolContainer = flow.multiColumnBlockFlow();
     RenderObject* nextRendererInFragmentedFlow = spannerPlacehoderCandidate(descendant, flow);
     RenderObject* insertBeforeMulticolChild = nullptr;
     RenderObject* nextDescendant = &descendant;
 
+    if (!multicolContainer)
+        return nullptr;
+
     if (isValidColumnSpanner(flow, descendant)) {
         // This is a spanner (column-span:all). Such renderers are moved from where they would
         // otherwise occur in the render tree to becoming a direct child of the multicol container,
         // so that they live among the column sets. This simplifies the layout implementation, and
         // basically just relies on regular block layout done by the RenderBlockFlow that
