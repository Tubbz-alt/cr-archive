diff a/modules/javafx.web/src/main/native/Source/WebCore/xml/parser/XMLDocumentParser.h b/modules/javafx.web/src/main/native/Source/WebCore/xml/parser/XMLDocumentParser.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/xml/parser/XMLDocumentParser.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/xml/parser/XMLDocumentParser.h
@@ -65,13 +65,13 @@
 public:
     static Ref<XMLDocumentParser> create(Document& document, FrameView* view)
     {
         return adoptRef(*new XMLDocumentParser(document, view));
     }
-    static Ref<XMLDocumentParser> create(DocumentFragment& fragment, Element* element, ParserContentPolicy parserContentPolicy)
+    static Ref<XMLDocumentParser> create(DocumentFragment& fragment, HashMap<AtomString, AtomString>&& prefixToNamespaceMap, const AtomString& defaultNamespaceURI, ParserContentPolicy parserContentPolicy)
     {
-        return adoptRef(*new XMLDocumentParser(fragment, element, parserContentPolicy));
+        return adoptRef(*new XMLDocumentParser(fragment, WTFMove(prefixToNamespaceMap), defaultNamespaceURI, parserContentPolicy));
     }
 
     ~XMLDocumentParser();
 
     // Exposed for callbacks:
@@ -87,11 +87,11 @@
 
     static bool supportsXMLVersion(const String&);
 
 private:
     explicit XMLDocumentParser(Document&, FrameView* = nullptr);
-    XMLDocumentParser(DocumentFragment&, Element*, ParserContentPolicy);
+    XMLDocumentParser(DocumentFragment&, HashMap<AtomString, AtomString>&&, const AtomString&, ParserContentPolicy);
 
     void insert(SegmentedString&&) final;
     void append(RefPtr<StringImpl>&&) final;
     void finish() final;
     bool isWaitingForScripts() const final;
@@ -178,13 +178,14 @@
 
     RefPtr<PendingScript> m_pendingScript;
     TextPosition m_scriptStartPosition;
 
     bool m_parsingFragment { false };
-    AtomString m_defaultNamespaceURI;
 
     HashMap<AtomString, AtomString> m_prefixToNamespaceMap;
+    AtomString m_defaultNamespaceURI;
+
     SegmentedString m_pendingSrc;
 };
 
 #if ENABLE(XSLT)
 xmlDocPtr xmlDocPtrForString(CachedResourceLoader&, const String& source, const String& url);
