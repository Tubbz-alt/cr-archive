diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/BitVector.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/BitVector.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/BitVector.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/BitVector.cpp
@@ -28,14 +28,19 @@
 
 #include <algorithm>
 #include <string.h>
 #include <wtf/Assertions.h>
 #include <wtf/FastMalloc.h>
+#include <wtf/NeverDestroyed.h>
 #include <wtf/StdLibExtras.h>
 
 namespace WTF {
 
+
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(BitVector);
+DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(BitVector);
+
 void BitVector::setSlow(const BitVector& other)
 {
     uintptr_t newBitsOrPointer;
     if (other.isInline() || other.isEmptyOrDeletedValue())
         newBitsOrPointer = other.m_bitsOrPointer;
@@ -74,17 +79,17 @@
 
 BitVector::OutOfLineBits* BitVector::OutOfLineBits::create(size_t numBits)
 {
     numBits = (numBits + bitsInPointer() - 1) & ~(static_cast<size_t>(bitsInPointer()) - 1);
     size_t size = sizeof(OutOfLineBits) + sizeof(uintptr_t) * (numBits / bitsInPointer());
-    OutOfLineBits* result = new (NotNull, fastMalloc(size)) OutOfLineBits(numBits);
+    OutOfLineBits* result = new (NotNull, BitVectorMalloc::malloc(size)) OutOfLineBits(numBits);
     return result;
 }
 
 void BitVector::OutOfLineBits::destroy(OutOfLineBits* outOfLineBits)
 {
-    fastFree(outOfLineBits);
+    BitVectorMalloc::free(outOfLineBits);
 }
 
 void BitVector::resizeOutOfLine(size_t numBits)
 {
     ASSERT(numBits > maxInlineBits());
