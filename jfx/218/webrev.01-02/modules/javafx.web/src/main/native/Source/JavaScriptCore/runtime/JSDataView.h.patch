diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSDataView.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSDataView.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSDataView.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSDataView.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -30,27 +30,33 @@
 
 namespace JSC {
 
 class JSDataView final : public JSArrayBufferView {
 public:
-    typedef JSArrayBufferView Base;
-    static const unsigned elementSize = 1;
+    using Base = JSArrayBufferView;
+    static constexpr unsigned elementSize = 1;
+
+    template<typename CellType, SubspaceAccess mode>
+    static IsoSubspace* subspaceFor(VM& vm)
+    {
+        return vm.dataViewSpace<mode>();
+    }
 
 protected:
     JSDataView(VM&, ConstructionContext&, ArrayBuffer*);
 
 public:
     JS_EXPORT_PRIVATE static JSDataView* create(
-        ExecState*, Structure*, RefPtr<ArrayBuffer>&&, unsigned byteOffset,
+        JSGlobalObject*, Structure*, RefPtr<ArrayBuffer>&&, unsigned byteOffset,
         unsigned byteLength);
 
     // Dummy methods, which don't actually work; these are just in place to
     // placate some template specialization we do elsewhere.
-    static JSDataView* createUninitialized(ExecState*, Structure*, unsigned length);
-    static JSDataView* create(ExecState*, Structure*, unsigned length);
-    bool set(ExecState*, unsigned, JSObject*, unsigned, unsigned length);
-    bool setIndex(ExecState*, unsigned, JSValue);
+    static JSDataView* createUninitialized(JSGlobalObject*, Structure*, unsigned length);
+    static JSDataView* create(JSGlobalObject*, Structure*, unsigned length);
+    bool set(JSGlobalObject*, unsigned, JSObject*, unsigned, unsigned length);
+    bool setIndex(JSGlobalObject*, unsigned, JSValue);
 
     ArrayBuffer* possiblySharedBuffer() const { return m_buffer; }
     ArrayBuffer* unsharedBuffer() const
     {
         RELEASE_ASSERT(!m_buffer->isShared());
@@ -61,16 +67,16 @@
     RefPtr<DataView> unsharedTypedImpl();
 
     static const TypedArrayType TypedArrayStorageType = TypeDataView;
 
 protected:
-    static bool getOwnPropertySlot(JSObject*, ExecState*, PropertyName, PropertySlot&);
-    static bool put(JSCell*, ExecState*, PropertyName, JSValue, PutPropertySlot&);
-    static bool defineOwnProperty(JSObject*, ExecState*, PropertyName, const PropertyDescriptor&, bool shouldThrow);
-    static bool deleteProperty(JSCell*, ExecState*, PropertyName);
+    static bool getOwnPropertySlot(JSObject*, JSGlobalObject*, PropertyName, PropertySlot&);
+    static bool put(JSCell*, JSGlobalObject*, PropertyName, JSValue, PutPropertySlot&);
+    static bool defineOwnProperty(JSObject*, JSGlobalObject*, PropertyName, const PropertyDescriptor&, bool shouldThrow);
+    static bool deleteProperty(JSCell*, JSGlobalObject*, PropertyName);
 
-    static void getOwnNonIndexPropertyNames(JSObject*, ExecState*, PropertyNameArray&, EnumerationMode);
+    static void getOwnNonIndexPropertyNames(JSObject*, JSGlobalObject*, PropertyNameArray&, EnumerationMode);
 
 public:
     static Structure* createStructure(VM&, JSGlobalObject*, JSValue prototype);
 
     DECLARE_EXPORT_INFO;
