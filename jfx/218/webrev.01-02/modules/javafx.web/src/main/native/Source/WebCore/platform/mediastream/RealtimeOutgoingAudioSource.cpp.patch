diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeOutgoingAudioSource.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeOutgoingAudioSource.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeOutgoingAudioSource.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/RealtimeOutgoingAudioSource.cpp
@@ -43,40 +43,38 @@
 {
 }
 
 RealtimeOutgoingAudioSource::~RealtimeOutgoingAudioSource()
 {
+ASSERT(!m_audioSource->hasObserver(*this));
+#if ASSERT_ENABLED
+    auto locker = holdLock(m_sinksLock);
+#endif
     ASSERT(m_sinks.isEmpty());
+
     stop();
 }
 
 void RealtimeOutgoingAudioSource::observeSource()
 {
+    ASSERT(!m_audioSource->hasObserver(*this));
     m_audioSource->addObserver(*this);
     initializeConverter();
 }
 
 void RealtimeOutgoingAudioSource::unobserveSource()
 {
     m_audioSource->removeObserver(*this);
 }
 
-bool RealtimeOutgoingAudioSource::setSource(Ref<MediaStreamTrackPrivate>&& newSource)
+void RealtimeOutgoingAudioSource::setSource(Ref<MediaStreamTrackPrivate>&& newSource)
 {
     ALWAYS_LOG("Changing source to ", newSource->logIdentifier());
-    auto locker = holdLock(m_sinksLock);
-    bool hasSinks = !m_sinks.isEmpty();
 
-    if (hasSinks)
-        unobserveSource();
+    ASSERT(!m_audioSource->hasObserver(*this));
     m_audioSource = WTFMove(newSource);
-    if (hasSinks)
-        observeSource();
-
     sourceUpdated();
-
-    return true;
 }
 
 void RealtimeOutgoingAudioSource::initializeConverter()
 {
     m_muted = m_audioSource->muted();
@@ -93,30 +91,18 @@
     m_enabled = m_audioSource->enabled();
 }
 
 void RealtimeOutgoingAudioSource::AddSink(webrtc::AudioTrackSinkInterface* sink)
 {
-    {
     auto locker = holdLock(m_sinksLock);
-    if (!m_sinks.add(sink) || m_sinks.size() != 1)
-        return;
-    }
-
-    callOnMainThread([protectedThis = makeRef(*this)]() {
-        protectedThis->observeSource();
-    });
+    m_sinks.add(sink);
 }
 
 void RealtimeOutgoingAudioSource::RemoveSink(webrtc::AudioTrackSinkInterface* sink)
 {
-    {
     auto locker = holdLock(m_sinksLock);
-    if (!m_sinks.remove(sink) || !m_sinks.isEmpty())
-        return;
-    }
-
-    unobserveSource();
+    m_sinks.remove(sink);
 }
 
 void RealtimeOutgoingAudioSource::sendAudioFrames(const void* audioData, int bitsPerSample, int sampleRate, size_t numberOfChannels, size_t numberOfFrames)
 {
 #if !RELEASE_LOG_DISABLED
