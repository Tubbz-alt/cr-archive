diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBodyConsumer.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBodyConsumer.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBodyConsumer.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBodyConsumer.cpp
@@ -33,15 +33,15 @@
 #include "ReadableStreamChunk.h"
 #include "TextResourceDecoder.h"
 
 namespace WebCore {
 
-static inline Ref<Blob> blobFromData(PAL::SessionID sessionID, const unsigned char* data, unsigned length, const String& contentType)
+static inline Ref<Blob> blobFromData(const unsigned char* data, unsigned length, const String& contentType)
 {
     Vector<uint8_t> value(length);
     memcpy(value.data(), data, length);
-    return Blob::create(sessionID, WTFMove(value), contentType);
+    return Blob::create(WTFMove(value), contentType);
 }
 
 static inline bool shouldPrependBOM(const unsigned char* data, unsigned length)
 {
     if (length < 3)
@@ -62,12 +62,12 @@
     switch (type) {
     case FetchBodyConsumer::Type::ArrayBuffer:
         fulfillPromiseWithArrayBuffer(WTFMove(promise), data, length);
         return;
     case FetchBodyConsumer::Type::Blob:
-        promise->resolveCallbackValueWithNewlyCreated<IDLInterface<Blob>>([&data, &length, &contentType](auto& context) {
-            return blobFromData(context.sessionID(), data, length, contentType);
+        promise->resolveCallbackValueWithNewlyCreated<IDLInterface<Blob>>([&data, &length, &contentType](auto&) {
+            return blobFromData(data, length, contentType);
         });
         return;
     case FetchBodyConsumer::Type::JSON:
         fulfillPromiseWithJSON(WTFMove(promise), textFromUTF8(data, length));
         return;
@@ -130,12 +130,12 @@
     switch (m_type) {
     case Type::ArrayBuffer:
         fulfillPromiseWithArrayBuffer(WTFMove(promise), takeAsArrayBuffer().get());
         return;
     case Type::Blob:
-        promise->resolveCallbackValueWithNewlyCreated<IDLInterface<Blob>>([this](auto& context) {
-            return takeAsBlob(context.sessionID());
+        promise->resolveCallbackValueWithNewlyCreated<IDLInterface<Blob>>([this](auto&) {
+            return takeAsBlob();
         });
         return;
     case Type::JSON:
         fulfillPromiseWithJSON(WTFMove(promise), takeAsText());
         return;
@@ -179,17 +179,17 @@
     auto arrayBuffer = m_buffer->tryCreateArrayBuffer();
     m_buffer = nullptr;
     return arrayBuffer;
 }
 
-Ref<Blob> FetchBodyConsumer::takeAsBlob(PAL::SessionID sessionID)
+Ref<Blob> FetchBodyConsumer::takeAsBlob()
 {
     if (!m_buffer)
-        return Blob::create(sessionID, Vector<uint8_t>(), m_contentType);
+        return Blob::create(Vector<uint8_t>(), m_contentType);
 
     // FIXME: We should try to move m_buffer to Blob without doing extra copy.
-    return blobFromData(sessionID, reinterpret_cast<const unsigned char*>(m_buffer->data()), m_buffer->size(), m_contentType);
+    return blobFromData(reinterpret_cast<const unsigned char*>(m_buffer->data()), m_buffer->size(), m_contentType);
 }
 
 String FetchBodyConsumer::takeAsText()
 {
     // FIXME: We could probably text decode on the fly as soon as m_type is set to JSON or Text.
