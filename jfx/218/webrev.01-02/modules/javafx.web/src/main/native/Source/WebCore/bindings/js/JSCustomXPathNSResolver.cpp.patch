diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCustomXPathNSResolver.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCustomXPathNSResolver.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCustomXPathNSResolver.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSCustomXPathNSResolver.cpp
@@ -41,21 +41,21 @@
 
 namespace WebCore {
 
 using namespace JSC;
 
-ExceptionOr<Ref<JSCustomXPathNSResolver>> JSCustomXPathNSResolver::create(ExecState& state, JSValue value)
+ExceptionOr<Ref<JSCustomXPathNSResolver>> JSCustomXPathNSResolver::create(JSGlobalObject& lexicalGlobalObject, JSValue value)
 {
     if (value.isUndefinedOrNull())
         return Exception { TypeError };
 
     auto* resolverObject = value.getObject();
     if (!resolverObject)
         return Exception { TypeMismatchError };
 
-    VM& vm = state.vm();
-    return adoptRef(*new JSCustomXPathNSResolver(vm, resolverObject, asJSDOMWindow(vm.vmEntryGlobalObject(&state))));
+    VM& vm = lexicalGlobalObject.vm();
+    return adoptRef(*new JSCustomXPathNSResolver(vm, resolverObject, asJSDOMWindow(&lexicalGlobalObject)));
 }
 
 JSCustomXPathNSResolver::JSCustomXPathNSResolver(VM& vm, JSObject* customResolver, JSDOMWindow* globalObject)
     : m_customResolver(vm, customResolver)
     , m_globalObject(vm, globalObject)
@@ -68,14 +68,14 @@
 {
     ASSERT(m_customResolver);
 
     JSLockHolder lock(commonVM());
 
-    ExecState* exec = m_globalObject->globalExec();
-    VM& vm = exec->vm();
+    JSGlobalObject* lexicalGlobalObject = m_globalObject.get();
+    VM& vm = lexicalGlobalObject->vm();
 
-    JSValue function = m_customResolver->get(exec, Identifier::fromString(vm, "lookupNamespaceURI"));
+    JSValue function = m_customResolver->get(lexicalGlobalObject, Identifier::fromString(vm, "lookupNamespaceURI"));
     CallData callData;
     CallType callType = getCallData(vm, function, callData);
     if (callType == CallType::None) {
         callType = m_customResolver->methodTable(vm)->getCallData(m_customResolver.get(), callData);
         if (callType == CallType::None) {
@@ -87,22 +87,22 @@
     }
 
     Ref<JSCustomXPathNSResolver> protectedThis(*this);
 
     MarkedArgumentBuffer args;
-    args.append(jsStringWithCache(exec, prefix));
+    args.append(jsStringWithCache(lexicalGlobalObject, prefix));
     ASSERT(!args.hasOverflowed());
 
     NakedPtr<JSC::Exception> exception;
-    JSValue retval = JSExecState::call(exec, function, callType, callData, m_customResolver.get(), args, exception);
+    JSValue retval = JSExecState::call(lexicalGlobalObject, function, callType, callData, m_customResolver.get(), args, exception);
 
     String result;
     if (exception)
-        reportException(exec, exception);
+        reportException(lexicalGlobalObject, exception);
     else {
         if (!retval.isUndefinedOrNull())
-            result = retval.toWTFString(exec);
+            result = retval.toWTFString(lexicalGlobalObject);
     }
 
     return result;
 }
 
