diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ModuleProgramExecutable.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ModuleProgramExecutable.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ModuleProgramExecutable.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ModuleProgramExecutable.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2009-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2009-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -32,19 +32,19 @@
 
 class ModuleProgramExecutable final : public GlobalExecutable {
     friend class LLIntOffsetsExtractor;
 public:
     using Base = GlobalExecutable;
-    static const unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
 
     template<typename CellType, SubspaceAccess mode>
     static IsoSubspace* subspaceFor(VM& vm)
     {
         return vm.moduleProgramExecutableSpace<mode>();
     }
 
-    static ModuleProgramExecutable* create(ExecState*, const SourceCode&);
+    static ModuleProgramExecutable* create(JSGlobalObject*, const SourceCode&);
 
     static void destroy(JSCell*);
 
     ModuleProgramCodeBlock* codeBlock()
     {
@@ -61,11 +61,11 @@
         return Structure::create(vm, globalObject, proto, TypeInfo(ModuleProgramExecutableType, StructureFlags), info());
     }
 
     DECLARE_INFO;
 
-    ExecutableInfo executableInfo() const { return ExecutableInfo(usesEval(), isStrictMode(), false, false, ConstructorKind::None, JSParserScriptMode::Module, SuperBinding::NotNeeded, SourceParseMode::ModuleEvaluateMode, derivedContextType(), isArrowFunctionContext(), false, EvalContextType::None); }
+    ExecutableInfo executableInfo() const { return ExecutableInfo(usesEval(), isStrictMode(), false, false, ConstructorKind::None, JSParserScriptMode::Module, SuperBinding::NotNeeded, SourceParseMode::ModuleEvaluateMode, derivedContextType(), NeedsClassFieldInitializer::No, isArrowFunctionContext(), false, EvalContextType::None); }
 
     UnlinkedModuleProgramCodeBlock* unlinkedModuleProgramCodeBlock() { return m_unlinkedModuleProgramCodeBlock.get(); }
 
     SymbolTable* moduleEnvironmentSymbolTable() { return m_moduleEnvironmentSymbolTable.get(); }
 
@@ -73,11 +73,11 @@
 
 private:
     friend class ExecutableBase;
     friend class ScriptExecutable;
 
-    ModuleProgramExecutable(ExecState*, const SourceCode&);
+    ModuleProgramExecutable(JSGlobalObject*, const SourceCode&);
 
     static void visitChildren(JSCell*, SlotVisitor&);
 
     WriteBarrier<UnlinkedModuleProgramCodeBlock> m_unlinkedModuleProgramCodeBlock;
     WriteBarrier<SymbolTable> m_moduleEnvironmentSymbolTable;
