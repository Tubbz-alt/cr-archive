diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSPropertyNameEnumerator.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSPropertyNameEnumerator.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSPropertyNameEnumerator.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSPropertyNameEnumerator.h
@@ -33,11 +33,17 @@
 namespace JSC {
 
 class JSPropertyNameEnumerator final : public JSCell {
 public:
     using Base = JSCell;
-    static const unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
+
+    template<typename CellType, SubspaceAccess mode>
+    static IsoSubspace* subspaceFor(VM& vm)
+    {
+        return &vm.propertyNameEnumeratorSpace;
+    }
 
     static JSPropertyNameEnumerator* create(VM&, Structure*, uint32_t, uint32_t, PropertyNameArray&&);
 
     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
     {
@@ -91,54 +97,54 @@
     uint32_t m_endStructurePropertyIndex;
     uint32_t m_endGenericPropertyIndex;
     uint32_t m_cachedInlineCapacity;
 };
 
-inline JSPropertyNameEnumerator* propertyNameEnumerator(ExecState* exec, JSObject* base)
+inline JSPropertyNameEnumerator* propertyNameEnumerator(JSGlobalObject* globalObject, JSObject* base)
 {
-    VM& vm = exec->vm();
+    VM& vm = getVM(globalObject);
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    uint32_t indexedLength = base->methodTable(vm)->getEnumerableLength(exec, base);
+    uint32_t indexedLength = base->methodTable(vm)->getEnumerableLength(globalObject, base);
 
     JSPropertyNameEnumerator* enumerator = nullptr;
 
     Structure* structure = base->structure(vm);
     if (!indexedLength
         && (enumerator = structure->cachedPropertyNameEnumerator())
-        && enumerator->cachedPrototypeChain() == structure->prototypeChain(exec, base))
+        && enumerator->cachedPrototypeChain() == structure->prototypeChain(globalObject, base))
         return enumerator;
 
     uint32_t numberStructureProperties = 0;
 
     PropertyNameArray propertyNames(vm, PropertyNameMode::Strings, PrivateSymbolMode::Exclude);
 
     if (structure->canAccessPropertiesQuicklyForEnumeration() && indexedLength == base->getArrayLength()) {
-        base->methodTable(vm)->getStructurePropertyNames(base, exec, propertyNames, EnumerationMode());
+        base->methodTable(vm)->getStructurePropertyNames(base, globalObject, propertyNames, EnumerationMode());
         scope.assertNoException();
 
         numberStructureProperties = propertyNames.size();
 
-        base->methodTable(vm)->getGenericPropertyNames(base, exec, propertyNames, EnumerationMode());
+        base->methodTable(vm)->getGenericPropertyNames(base, globalObject, propertyNames, EnumerationMode());
     } else {
         // Generic property names vector contains all indexed property names.
         // So disable indexed property enumeration phase by setting |indexedLength| to 0.
         indexedLength = 0;
-        base->methodTable(vm)->getPropertyNames(base, exec, propertyNames, EnumerationMode());
+        base->methodTable(vm)->getPropertyNames(base, globalObject, propertyNames, EnumerationMode());
     }
     RETURN_IF_EXCEPTION(scope, nullptr);
 
     ASSERT(propertyNames.size() < UINT32_MAX);
 
     bool sawPolyProto;
-    bool successfullyNormalizedChain = normalizePrototypeChain(exec, base, sawPolyProto) != InvalidPrototypeChain;
+    bool successfullyNormalizedChain = normalizePrototypeChain(globalObject, base, sawPolyProto) != InvalidPrototypeChain;
 
     Structure* structureAfterGettingPropertyNames = base->structure(vm);
     enumerator = JSPropertyNameEnumerator::create(vm, structureAfterGettingPropertyNames, indexedLength, numberStructureProperties, WTFMove(propertyNames));
     if (!indexedLength && successfullyNormalizedChain && structureAfterGettingPropertyNames == structure) {
-        enumerator->setCachedPrototypeChain(vm, structure->prototypeChain(exec, base));
-        if (structure->canCachePropertyNameEnumerator())
+        enumerator->setCachedPrototypeChain(vm, structure->prototypeChain(globalObject, base));
+        if (structure->canCachePropertyNameEnumerator(vm))
             structure->setCachedPropertyNameEnumerator(vm, enumerator);
     }
     return enumerator;
 }
 
