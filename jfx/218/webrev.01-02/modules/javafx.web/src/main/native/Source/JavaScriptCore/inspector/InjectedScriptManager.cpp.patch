diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptManager.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptManager.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptManager.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptManager.cpp
@@ -40,14 +40,14 @@
 #include "JSLock.h"
 #include "ScriptObject.h"
 #include "SourceCode.h"
 #include <wtf/JSONValues.h>
 
-using namespace JSC;
-
 namespace Inspector {
 
+using namespace JSC;
+
 InjectedScriptManager::InjectedScriptManager(InspectorEnvironment& environment, Ref<InjectedScriptHost>&& injectedScriptHost)
     : m_environment(environment)
     , m_injectedScriptHost(WTFMove(injectedScriptHost))
     , m_nextInjectedScriptId(1)
 {
@@ -90,18 +90,18 @@
     }
 
     return InjectedScript();
 }
 
-int InjectedScriptManager::injectedScriptIdFor(ExecState* scriptState)
+int InjectedScriptManager::injectedScriptIdFor(JSGlobalObject* globalObject)
 {
-    auto it = m_scriptStateToId.find(scriptState);
+    auto it = m_scriptStateToId.find(globalObject);
     if (it != m_scriptStateToId.end())
         return it->value;
 
     int id = m_nextInjectedScriptId++;
-    m_scriptStateToId.set(scriptState, id);
+    m_scriptStateToId.set(globalObject, id);
     return id;
 }
 
 InjectedScript InjectedScriptManager::injectedScriptForObjectId(const String& objectId)
 {
@@ -141,63 +141,75 @@
 String InjectedScriptManager::injectedScriptSource()
 {
     return StringImpl::createWithoutCopying(InjectedScriptSource_js, sizeof(InjectedScriptSource_js));
 }
 
-JSC::JSObject* InjectedScriptManager::createInjectedScript(const String& source, ExecState* scriptState, int id)
+Expected<JSObject*, NakedPtr<Exception>> InjectedScriptManager::createInjectedScript(const String& source, JSGlobalObject* globalObject, int id)
 {
-    VM& vm = scriptState->vm();
+    VM& vm = globalObject->vm();
     JSLockHolder lock(vm);
     auto scope = DECLARE_CATCH_SCOPE(vm);
 
     SourceCode sourceCode = makeSource(source, { });
-    JSGlobalObject* globalObject = scriptState->lexicalGlobalObject();
-    JSValue globalThisValue = scriptState->globalThisValue();
+    JSValue globalThisValue = globalObject->globalThis();
 
     NakedPtr<Exception> evaluationException;
     InspectorEvaluateHandler evaluateHandler = m_environment.evaluateHandler();
-    JSValue functionValue = evaluateHandler(scriptState, sourceCode, globalThisValue, evaluationException);
+    JSValue functionValue = evaluateHandler(globalObject, sourceCode, globalThisValue, evaluationException);
     if (evaluationException)
-        return nullptr;
+        return makeUnexpected(evaluationException);
 
     CallData callData;
     CallType callType = getCallData(vm, functionValue, callData);
     if (callType == CallType::None)
         return nullptr;
 
     MarkedArgumentBuffer args;
-    args.append(m_injectedScriptHost->wrapper(scriptState, globalObject));
+    args.append(m_injectedScriptHost->wrapper(globalObject));
     args.append(globalThisValue);
     args.append(jsNumber(id));
     ASSERT(!args.hasOverflowed());
 
-    JSValue result = JSC::call(scriptState, functionValue, callType, callData, globalThisValue, args);
+    JSValue result = JSC::call(globalObject, functionValue, callType, callData, globalThisValue, args);
     scope.clearException();
     return result.getObject();
 }
 
-InjectedScript InjectedScriptManager::injectedScriptFor(ExecState* inspectedExecState)
+InjectedScript InjectedScriptManager::injectedScriptFor(JSGlobalObject* globalObject)
 {
-    auto it = m_scriptStateToId.find(inspectedExecState);
+    auto it = m_scriptStateToId.find(globalObject);
     if (it != m_scriptStateToId.end()) {
         auto it1 = m_idToInjectedScript.find(it->value);
         if (it1 != m_idToInjectedScript.end())
             return it1->value;
     }
 
-    if (!m_environment.canAccessInspectedScriptState(inspectedExecState))
+    if (!m_environment.canAccessInspectedScriptState(globalObject))
         return InjectedScript();
 
-    int id = injectedScriptIdFor(inspectedExecState);
-    auto injectedScriptObject = createInjectedScript(injectedScriptSource(), inspectedExecState, id);
-    if (!injectedScriptObject) {
-        WTFLogAlways("Failed to parse/execute InjectedScriptSource.js!");
-        WTFLogAlways("%s\n", injectedScriptSource().ascii().data());
+    int id = injectedScriptIdFor(globalObject);
+    auto createResult = createInjectedScript(injectedScriptSource(), globalObject, id);
+    if (!createResult) {
+        auto& error = createResult.error();
+        ASSERT(error);
+
+        unsigned line = 0;
+        unsigned column = 0;
+        auto& stack = error->stack();
+        if (stack.size() > 0)
+            stack[0].computeLineAndColumn(line, column);
+        WTFLogAlways("Error when creating injected script: %s (%d:%d)\n", error->value().toWTFString(globalObject).utf8().data(), line, column);
+        WTFLogAlways("%s\n", injectedScriptSource().utf8().data());
+        RELEASE_ASSERT_NOT_REACHED();
+    }
+    if (!createResult.value()) {
+        WTFLogAlways("Missing injected script object");
+        WTFLogAlways("%s\n", injectedScriptSource().utf8().data());
         RELEASE_ASSERT_NOT_REACHED();
     }
 
-    InjectedScript result({ inspectedExecState, injectedScriptObject }, &m_environment);
+    InjectedScript result({ globalObject, createResult.value() }, &m_environment);
     m_idToInjectedScript.set(id, result);
     didCreateInjectedScript(result);
     return result;
 }
 
