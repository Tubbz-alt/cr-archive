diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGNode.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGNode.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGNode.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGNode.h
@@ -53,10 +53,11 @@
 #include "PutByIdVariant.h"
 #include "SpeculatedType.h"
 #include "TypeLocation.h"
 #include "ValueProfile.h"
 #include <type_traits>
+#include <wtf/FastMalloc.h>
 #include <wtf/ListDump.h>
 #include <wtf/LoggingHashSet.h>
 
 namespace JSC {
 
@@ -248,17 +249,17 @@
     StackAccessData()
         : format(DeadFlush)
     {
     }
 
-    StackAccessData(VirtualRegister local, FlushFormat format)
-        : local(local)
+    StackAccessData(Operand operand, FlushFormat format)
+        : operand(operand)
         , format(format)
     {
     }
 
-    VirtualRegister local;
+    Operand operand;
     VirtualRegister machineLocal;
     FlushFormat format;
 
     FlushedAt flushedAt() { return FlushedAt(format, machineLocal); }
 };
@@ -276,12 +277,13 @@
 };
 
 // === Node ===
 //
 // Node represents a single operation in the data flow graph.
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(DFGNode);
 struct Node {
-    WTF_MAKE_FAST_ALLOCATED;
+    WTF_MAKE_STRUCT_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(DFGNode);
 public:
     static const char HashSetTemplateInstantiationString[];
 
     enum VarArgTag { VarArg };
 
@@ -476,10 +478,16 @@
         ASSERT(op() == CheckStructure || op() == CheckStructureOrEmpty);
         m_op = CheckStructureImmediate;
         children.setChild1(Edge(structure, CellUse));
     }
 
+    void convertCheckArrayOrEmptyToCheckArray()
+    {
+        ASSERT(op() == CheckArrayOrEmpty);
+        setOpAndDefaultFlags(CheckArray);
+    }
+
     void replaceWith(Graph&, Node* other);
     void replaceWithWithoutChecks(Node* other);
 
     void convertToIdentity();
     void convertToIdentityOn(Node*);
@@ -610,11 +618,11 @@
         m_op = MultiPutByOffset;
     }
 
     void convertToPhantomNewObject()
     {
-        ASSERT(m_op == NewObject || m_op == MaterializeNewObject);
+        ASSERT(m_op == NewObject);
         m_op = PhantomNewObject;
         m_flags &= ~NodeHasVarArgs;
         m_flags |= NodeMustGenerate;
         m_opInfo = OpInfoWrapper();
         m_opInfo2 = OpInfoWrapper();
@@ -639,10 +647,21 @@
         m_opInfo = OpInfoWrapper();
         m_opInfo2 = OpInfoWrapper();
         children = AdjacencyList();
     }
 
+    void convertToPhantomNewArrayIterator()
+    {
+        ASSERT(m_op == NewArrayIterator);
+        m_op = PhantomNewArrayIterator;
+        m_flags &= ~NodeHasVarArgs;
+        m_flags |= NodeMustGenerate;
+        m_opInfo = OpInfoWrapper();
+        m_opInfo2 = OpInfoWrapper();
+        children = AdjacencyList();
+    }
+
     void convertToPhantomNewAsyncFunction()
     {
         ASSERT(m_op == NewAsyncFunction);
         m_op = PhantomNewAsyncFunction;
         m_flags |= NodeMustGenerate;
@@ -661,11 +680,11 @@
         children = AdjacencyList();
     }
 
     void convertToPhantomCreateActivation()
     {
-        ASSERT(m_op == CreateActivation || m_op == MaterializeCreateActivation);
+        ASSERT(m_op == CreateActivation);
         m_op = PhantomCreateActivation;
         m_flags &= ~NodeHasVarArgs;
         m_flags |= NodeMustGenerate;
         m_opInfo = OpInfoWrapper();
         m_opInfo2 = OpInfoWrapper();
@@ -696,11 +715,11 @@
         children = AdjacencyList();
     }
 
     void convertToToString()
     {
-        ASSERT(m_op == ToPrimitive || m_op == StringValueOf);
+        ASSERT(m_op == ToPrimitive || m_op == StringValueOf || m_op == ToPropertyKey);
         m_op = ToString;
     }
 
     void convertToArithNegate()
     {
@@ -755,10 +774,29 @@
         children.reset();
         m_opInfo = structure;
         m_opInfo2 = OpInfoWrapper();
     }
 
+    void convertToNewPromise(RegisteredStructure structure)
+    {
+        ASSERT(m_op == CreatePromise);
+        bool internal = isInternalPromise();
+        setOpAndDefaultFlags(NewPromise);
+        children.reset();
+        m_opInfo = structure;
+        m_opInfo2 = internal;
+    }
+
+    void convertToNewInternalFieldObject(NodeType newOp, RegisteredStructure structure)
+    {
+        ASSERT(m_op == CreateAsyncGenerator || m_op == CreateGenerator);
+        setOpAndDefaultFlags(newOp);
+        children.reset();
+        m_opInfo = structure;
+        m_opInfo2 = OpInfoWrapper();
+    }
+
     void convertToNewArrayBuffer(FrozenValue* immutableButterfly);
 
     void convertToDirectCall(FrozenValue*);
 
     void convertToCallDOM(Graph&);
@@ -881,10 +919,11 @@
     bool hasArgumentsChild()
     {
         switch (op()) {
         case GetMyArgumentByVal:
         case GetMyArgumentByValOutOfBounds:
+        case VarargsLength:
         case LoadVarargs:
         case ForwardVarargs:
         case CallVarargs:
         case CallForwardVarargs:
         case ConstructVarargs:
@@ -902,13 +941,15 @@
     Edge& argumentsChild()
     {
         switch (op()) {
         case GetMyArgumentByVal:
         case GetMyArgumentByValOutOfBounds:
+        case VarargsLength:
+            return child1();
         case LoadVarargs:
         case ForwardVarargs:
-            return child1();
+            return child2();
         case CallVarargs:
         case CallForwardVarargs:
         case ConstructVarargs:
         case ConstructForwardVarargs:
         case TailCallVarargs:
@@ -952,21 +993,21 @@
     VariableAccessData* variableAccessData()
     {
         return m_opInfo.as<VariableAccessData*>()->find();
     }
 
-    VirtualRegister local()
+    Operand operand()
     {
-        return variableAccessData()->local();
+        return variableAccessData()->operand();
     }
 
     VirtualRegister machineLocal()
     {
         return variableAccessData()->machineLocal();
     }
 
-    bool hasUnlinkedLocal()
+    bool hasUnlinkedOperand()
     {
         switch (op()) {
         case ExtractOSREntryLocal:
         case MovHint:
         case ZombieHint:
@@ -975,14 +1016,14 @@
         default:
             return false;
         }
     }
 
-    VirtualRegister unlinkedLocal()
+    Operand unlinkedOperand()
     {
-        ASSERT(hasUnlinkedLocal());
-        return VirtualRegister(m_opInfo.as<int32_t>());
+        ASSERT(hasUnlinkedOperand());
+        return Operand::fromBits(m_opInfo.as<uint64_t>());
     }
 
     bool hasStackAccessData()
     {
         switch (op()) {
@@ -1244,10 +1285,21 @@
     {
         ASSERT(hasInlineCapacity());
         return m_opInfo.as<unsigned>();
     }
 
+    bool hasIsInternalPromise()
+    {
+        return op() == CreatePromise || op() == NewPromise;
+    }
+
+    bool isInternalPromise()
+    {
+        ASSERT(hasIsInternalPromise());
+        return m_opInfo2.as<bool>();
+    }
+
     void setIndexingType(IndexingType indexingType)
     {
         ASSERT(hasIndexingType());
         m_opInfo = indexingType;
     }
@@ -1261,10 +1313,21 @@
     {
         ASSERT(hasScopeOffset());
         return ScopeOffset(m_opInfo.as<uint32_t>());
     }
 
+    unsigned hasInternalFieldIndex()
+    {
+        return op() == GetInternalField || op() == PutInternalField;
+    }
+
+    unsigned internalFieldIndex()
+    {
+        ASSERT(hasInternalFieldIndex());
+        return m_opInfo.as<uint32_t>();
+    }
+
     bool hasDirectArgumentsOffset()
     {
         return op() == GetFromArguments || op() == PutToArguments;
     }
 
@@ -1307,11 +1370,11 @@
         return m_opInfo.as<CallVarargsData*>();
     }
 
     bool hasLoadVarargsData()
     {
-        return op() == LoadVarargs || op() == ForwardVarargs;
+        return op() == LoadVarargs || op() == ForwardVarargs || op() == VarargsLength;
     }
 
     LoadVarargsData* loadVarargsData()
     {
         ASSERT(hasLoadVarargsData());
@@ -1338,11 +1401,11 @@
     bool hasSpeculatedTypeForQuery()
     {
         return op() == IsCellWithType;
     }
 
-    SpeculatedType speculatedTypeForQuery()
+    Optional<SpeculatedType> speculatedTypeForQuery()
     {
         return speculationFromJSType(queriedType());
     }
 
     bool hasResult()
@@ -1376,10 +1439,13 @@
         case ValueSub:
         case ValueMul:
         case ValueBitAnd:
         case ValueBitOr:
         case ValueBitXor:
+        case ValueBitNot:
+        case ValueBitLShift:
+        case ValueBitRShift:
         case ValueNegate:
             return true;
         default:
             return false;
         }
@@ -1508,13 +1574,25 @@
     {
         ASSERT(isEntrySwitch());
         return m_opInfo.as<EntrySwitchData*>();
     }
 
+    bool hasIntrinsic()
+    {
+        switch (op()) {
+        case CPUIntrinsic:
+        case DateGetTime:
+        case DateGetInt32OrNaN:
+            return true;
+        default:
+            return false;
+        }
+    }
+
     Intrinsic intrinsic()
     {
-        RELEASE_ASSERT(op() == CPUIntrinsic);
+        ASSERT(hasIntrinsic());
         return m_opInfo.as<Intrinsic>();
     }
 
     unsigned numSuccessors()
     {
@@ -1665,10 +1743,11 @@
         case CallForwardVarargs:
         case TailCallForwardVarargsInlinedCaller:
         case GetByOffset:
         case MultiGetByOffset:
         case GetClosureVar:
+        case GetInternalField:
         case GetFromArguments:
         case GetArgument:
         case ArrayPop:
         case ArrayPush:
         case RegExpExec:
@@ -1679,16 +1758,18 @@
         case GetGlobalVar:
         case GetGlobalLexicalVariable:
         case StringReplace:
         case StringReplaceRegExp:
         case ToNumber:
+        case ToNumeric:
         case ToObject:
         case ValueBitAnd:
         case ValueBitOr:
         case ValueBitXor:
         case ValueBitNot:
         case ValueBitLShift:
+        case ValueBitRShift:
         case CallObjectConstructor:
         case LoadKeyFromMapBucket:
         case LoadValueFromMapBucket:
         case CallDOMGetter:
         case CallDOM:
@@ -1705,10 +1786,11 @@
         case GetDynamicVar:
         case ExtractValueFromWeakMapGet:
         case ToThis:
         case DataViewGetInt:
         case DataViewGetFloat:
+        case DateGetInt32OrNaN:
             return true;
         default:
             return false;
         }
     }
@@ -1811,11 +1893,11 @@
         return m_opInfo.as<void*>();
     }
 
     bool hasUidOperand()
     {
-        return op() == CheckStringIdent;
+        return op() == CheckIdent;
     }
 
     UniquedStringImpl* uidOperand()
     {
         ASSERT(hasUidOperand());
@@ -1872,11 +1954,16 @@
 
     bool hasStructure()
     {
         switch (op()) {
         case ArrayifyToStructure:
+        case MaterializeNewInternalFieldObject:
         case NewObject:
+        case NewPromise:
+        case NewGenerator:
+        case NewAsyncGenerator:
+        case NewArrayIterator:
         case NewStringObject:
             return true;
         default:
             return false;
         }
@@ -1941,10 +2028,11 @@
 
     bool hasObjectMaterializationData()
     {
         switch (op()) {
         case MaterializeNewObject:
+        case MaterializeNewInternalFieldObject:
         case MaterializeCreateActivation:
             return true;
 
         default:
             return false;
@@ -2037,10 +2125,11 @@
         case PhantomClonedArguments:
         case PhantomNewFunction:
         case PhantomNewGeneratorFunction:
         case PhantomNewAsyncFunction:
         case PhantomNewAsyncGeneratorFunction:
+        case PhantomNewArrayIterator:
         case PhantomCreateActivation:
         case PhantomNewRegexp:
             return true;
         default:
             return false;
@@ -2058,11 +2147,13 @@
         case PutByVal:
         case PutByValAlias:
         case GetByVal:
         case StringCharAt:
         case StringCharCodeAt:
+        case StringCodePointAt:
         case CheckArray:
+        case CheckArrayOrEmpty:
         case Arrayify:
         case ArrayifyToStructure:
         case ArrayPush:
         case ArrayPop:
         case ArrayIndexOf:
@@ -2850,19 +2941,19 @@
     {
         ASSERT(hasCallLinkStatus());
         return m_opInfo.as<CallLinkStatus*>();
     }
 
-    bool hasGetByIdStatus()
+    bool hasGetByStatus()
     {
-        return op() == FilterGetByIdStatus;
+        return op() == FilterGetByStatus;
     }
 
-    GetByIdStatus* getByIdStatus()
+    GetByStatus* getByStatus()
     {
-        ASSERT(hasGetByIdStatus());
-        return m_opInfo.as<GetByIdStatus*>();
+        ASSERT(hasGetByStatus());
+        return m_opInfo.as<GetByStatus*>();
     }
 
     bool hasInByIdStatus()
     {
         return op() == FilterInByIdStatus;
