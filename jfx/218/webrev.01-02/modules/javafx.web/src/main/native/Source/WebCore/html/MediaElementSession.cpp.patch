diff a/modules/javafx.web/src/main/native/Source/WebCore/html/MediaElementSession.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/MediaElementSession.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/MediaElementSession.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/MediaElementSession.cpp
@@ -310,11 +310,11 @@
 }
 
 bool MediaElementSession::autoplayPermitted() const
 {
     const Document& document = m_element.document();
-    if (document.pageCacheState() != Document::NotInPageCache)
+    if (document.backForwardCacheState() != Document::NotInBackForwardCache)
         return false;
     if (document.activeDOMObjectsAreSuspended())
         return false;
 
     if (!hasBehaviorRestriction(MediaElementSession::InvisibleAutoplayNotPermitted))
@@ -434,11 +434,11 @@
     if (m_element.document().isMediaDocument() && (m_element.document().frame() && m_element.document().frame()->isMainFrame())) {
         INFO_LOG(LOGIDENTIFIER, "returning TRUE: is media document");
         return true;
     }
 
-    if (client().presentationType() == Audio) {
+    if (client().presentationType() == Audio && purpose == PlaybackControlsPurpose::ControlsManager) {
         if (!hasBehaviorRestriction(RequireUserGestureToControlControlsManager) || m_element.document().processingUserGestureForMedia()) {
             INFO_LOG(LOGIDENTIFIER, "returning TRUE: audio element with user gesture");
             return true;
         }
 
@@ -598,10 +598,15 @@
         INFO_LOG(LOGIDENTIFIER, "returning FALSE because of legacy attribute");
         return false;
     }
 #endif
 
+    if (m_element.document().settings().remotePlaybackEnabled() && m_element.hasAttributeWithoutSynchronization(HTMLNames::disableremoteplaybackAttr)) {
+        LOG(Media, "MediaElementSession::wirelessVideoPlaybackDisabled - returning TRUE because of RemotePlayback attribute");
+        return true;
+    }
+
     auto player = m_element.player();
     if (!player)
         return true;
 
     bool disabled = player->wirelessVideoPlaybackDisabled();
@@ -676,10 +681,16 @@
     m_shouldPlayToPlaybackTarget = shouldPlay;
     updateClientDataBuffering();
     client().setShouldPlayToPlaybackTarget(shouldPlay);
 }
 
+void MediaElementSession::playbackTargetPickerWasDismissed()
+{
+    INFO_LOG(LOGIDENTIFIER);
+    client().playbackTargetPickerWasDismissed();
+}
+
 void MediaElementSession::mediaStateDidChange(MediaProducer::MediaStateFlags state)
 {
     m_element.document().playbackTargetPickerClientStateDidChange(*this, state);
 }
 #endif
@@ -690,12 +701,12 @@
 
     if (pageExplicitlyAllowsElementToAutoplayInline(m_element))
         return preload;
 
     if (m_restrictions & AutoPreloadingNotPermitted) {
-        if (preload > MediaPlayer::MetaData)
-            return MediaPlayer::MetaData;
+        if (preload > MediaPlayer::Preload::MetaData)
+            return MediaPlayer::Preload::MetaData;
     }
 
     return preload;
 }
 
