diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityARIAGridCell.cpp b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityARIAGridCell.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityARIAGridCell.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityARIAGridCell.cpp
@@ -53,21 +53,21 @@
 AccessibilityTable* AccessibilityARIAGridCell::parentTable() const
 {
     // ARIA gridcells may have multiple levels of unignored ancestors that are not the parent table,
     // including rows and interactive rowgroups. In addition, poorly-formed grids may contain elements
     // which pass the tests for inclusion.
-    for (AccessibilityObject* parent = parentObjectUnignored(); parent; parent = parent->parentObjectUnignored()) {
+    for (auto* parent = parentObjectUnignored(); parent; parent = parent->parentObjectUnignored()) {
         if (is<AccessibilityTable>(*parent) && downcast<AccessibilityTable>(*parent).isExposableThroughAccessibility())
             return downcast<AccessibilityTable>(parent);
     }
 
     return nullptr;
 }
 
 void AccessibilityARIAGridCell::rowIndexRange(std::pair<unsigned, unsigned>& rowRange) const
 {
-    AccessibilityObject* parent = parentObjectUnignored();
+    AXCoreObject* parent = parentObjectUnignored();
     if (!parent)
         return;
 
     if (is<AccessibilityTableRow>(*parent)) {
         // We already got a table row, use its API.
@@ -101,11 +101,11 @@
         std::pair<unsigned, unsigned> range;
         AccessibilityTableCell::rowIndexRange(range);
         return std::max(static_cast<int>(range.second), 1);
     }
 
-    AccessibilityObject* parent = parentObjectUnignored();
+    AXCoreObject* parent = parentObjectUnignored();
     if (!parent)
         return 1;
 
     // Setting the value to 0 indicates that the cell or gridcell is to span all the remaining rows in the row group.
     if (!rowSpan) {
@@ -132,11 +132,11 @@
     return rowSpan;
 }
 
 void AccessibilityARIAGridCell::columnIndexRange(std::pair<unsigned, unsigned>& columnRange) const
 {
-    AccessibilityObject* parent = parentObjectUnignored();
+    AXCoreObject* parent = parentObjectUnignored();
     if (!parent)
         return;
 
     if (!is<AccessibilityTableRow>(*parent)
         && !(is<AccessibilityTable>(*parent) && downcast<AccessibilityTable>(*parent).isExposableThroughAccessibility()))
