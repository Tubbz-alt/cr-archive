diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/WebInjectedScriptHost.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/WebInjectedScriptHost.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/WebInjectedScriptHost.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/WebInjectedScriptHost.cpp
@@ -30,10 +30,12 @@
 #include "JSDOMException.h"
 #include "JSHTMLAllCollection.h"
 #include "JSHTMLCollection.h"
 #include "JSNode.h"
 #include "JSNodeList.h"
+#include "JSWorker.h"
+#include "Worker.h"
 
 #if ENABLE(PAYMENT_REQUEST)
 #include "JSPaymentRequest.h"
 #include "JSPaymentShippingType.h"
 #include "PaymentOptions.h"
@@ -42,11 +44,11 @@
 
 namespace WebCore {
 
 using namespace JSC;
 
-JSValue WebInjectedScriptHost::subtype(ExecState* exec, JSValue value)
+JSValue WebInjectedScriptHost::subtype(JSGlobalObject* exec, JSValue value)
 {
     VM& vm = exec->vm();
     if (value.inherits<JSNode>(vm))
         return jsNontrivialString(vm, "node"_s);
     if (value.inherits<JSNodeList>(vm))
@@ -57,58 +59,58 @@
         return jsNontrivialString(vm, "error"_s);
 
     return jsUndefined();
 }
 
-#if ENABLE(PAYMENT_REQUEST)
-static JSObject* constructInternalProperty(VM& vm, ExecState* exec, const String& name, JSValue value)
+static JSObject* constructInternalProperty(VM& vm, JSGlobalObject* exec, const String& name, JSValue value)
 {
     auto* object = constructEmptyObject(exec);
     object->putDirect(vm, Identifier::fromString(vm, "name"), jsString(vm, name));
     object->putDirect(vm, Identifier::fromString(vm, "value"), value);
     return object;
 }
 
-static JSObject* objectForPaymentOptions(VM& vm, ExecState* exec, const PaymentOptions& paymentOptions)
+#if ENABLE(PAYMENT_REQUEST)
+static JSObject* objectForPaymentOptions(VM& vm, JSGlobalObject* exec, const PaymentOptions& paymentOptions)
 {
     auto* object = constructEmptyObject(exec);
     object->putDirect(vm, Identifier::fromString(vm, "requestPayerName"), jsBoolean(paymentOptions.requestPayerName));
     object->putDirect(vm, Identifier::fromString(vm, "requestPayerEmail"), jsBoolean(paymentOptions.requestPayerEmail));
     object->putDirect(vm, Identifier::fromString(vm, "requestPayerPhone"), jsBoolean(paymentOptions.requestPayerPhone));
     object->putDirect(vm, Identifier::fromString(vm, "requestShipping"), jsBoolean(paymentOptions.requestShipping));
     object->putDirect(vm, Identifier::fromString(vm, "shippingType"), jsNontrivialString(vm, convertEnumerationToString(paymentOptions.shippingType)));
     return object;
 }
 
-static JSObject* objectForPaymentCurrencyAmount(VM& vm, ExecState* exec, const PaymentCurrencyAmount& paymentCurrencyAmount)
+static JSObject* objectForPaymentCurrencyAmount(VM& vm, JSGlobalObject* exec, const PaymentCurrencyAmount& paymentCurrencyAmount)
 {
     auto* object = constructEmptyObject(exec);
     object->putDirect(vm, Identifier::fromString(vm, "currency"), jsString(vm, paymentCurrencyAmount.currency));
     object->putDirect(vm, Identifier::fromString(vm, "value"), jsString(vm, paymentCurrencyAmount.value));
     return object;
 }
 
-static JSObject* objectForPaymentItem(VM& vm, ExecState* exec, const PaymentItem& paymentItem)
+static JSObject* objectForPaymentItem(VM& vm, JSGlobalObject* exec, const PaymentItem& paymentItem)
 {
     auto* object = constructEmptyObject(exec);
     object->putDirect(vm, Identifier::fromString(vm, "label"), jsString(vm, paymentItem.label));
     object->putDirect(vm, Identifier::fromString(vm, "amount"), objectForPaymentCurrencyAmount(vm, exec, paymentItem.amount));
     object->putDirect(vm, Identifier::fromString(vm, "pending"), jsBoolean(paymentItem.pending));
     return object;
 }
 
-static JSObject* objectForPaymentShippingOption(VM& vm, ExecState* exec, const PaymentShippingOption& paymentShippingOption)
+static JSObject* objectForPaymentShippingOption(VM& vm, JSGlobalObject* exec, const PaymentShippingOption& paymentShippingOption)
 {
     auto* object = constructEmptyObject(exec);
     object->putDirect(vm, Identifier::fromString(vm, "id"), jsString(vm, paymentShippingOption.id));
     object->putDirect(vm, Identifier::fromString(vm, "label"), jsString(vm, paymentShippingOption.label));
     object->putDirect(vm, Identifier::fromString(vm, "amount"), objectForPaymentCurrencyAmount(vm, exec, paymentShippingOption.amount));
     object->putDirect(vm, Identifier::fromString(vm, "selected"), jsBoolean(paymentShippingOption.selected));
     return object;
 }
 
-static JSObject* objectForPaymentDetailsModifier(VM& vm, ExecState* exec, const PaymentDetailsModifier& modifier)
+static JSObject* objectForPaymentDetailsModifier(VM& vm, JSGlobalObject* exec, const PaymentDetailsModifier& modifier)
 {
     auto* additionalDisplayItems = constructEmptyArray(exec, nullptr);
     for (unsigned i = 0; i < modifier.additionalDisplayItems.size(); ++i)
         additionalDisplayItems->putDirectIndex(exec, i, objectForPaymentItem(vm, exec, modifier.additionalDisplayItems[i]));
 
@@ -118,11 +120,11 @@
     object->putDirect(vm, Identifier::fromString(vm, "additionalDisplayItems"), additionalDisplayItems);
     object->putDirect(vm, Identifier::fromString(vm, "data"), !modifier.data ? jsNull() : modifier.data.get());
     return object;
 }
 
-static JSObject* objectForPaymentDetails(VM& vm, ExecState* exec, const PaymentDetailsInit& paymentDetails)
+static JSObject* objectForPaymentDetails(VM& vm, JSGlobalObject* exec, const PaymentDetailsInit& paymentDetails)
 {
     auto* displayItems = constructEmptyArray(exec, nullptr);
     for (unsigned i = 0; i < paymentDetails.displayItems.size(); ++i)
         displayItems->putDirectIndex(exec, i, objectForPaymentItem(vm, exec, paymentDetails.displayItems[i]));
 
@@ -157,28 +159,32 @@
     ASSERT_NOT_REACHED();
     return jsEmptyString(vm);
 }
 #endif
 
-JSValue WebInjectedScriptHost::getInternalProperties(VM& vm, ExecState* exec, JSC::JSValue value)
+JSValue WebInjectedScriptHost::getInternalProperties(VM& vm, JSGlobalObject* exec, JSC::JSValue value)
 {
-#if ENABLE(PAYMENT_REQUEST)
     auto scope = DECLARE_THROW_SCOPE(vm);
 
+    if (auto* worker = JSWorker::toWrapped(vm, value)) {
+        unsigned index = 0;
+        auto* array = constructEmptyArray(exec, nullptr);
+        array->putDirectIndex(exec, index++, constructInternalProperty(vm, exec, "terminated"_s, jsBoolean(worker->wasTerminated())));
+        RETURN_IF_EXCEPTION(scope, { });
+        return array;
+    }
+
+#if ENABLE(PAYMENT_REQUEST)
     if (PaymentRequest* paymentRequest = JSPaymentRequest::toWrapped(vm, value)) {
         unsigned index = 0;
         auto* array = constructEmptyArray(exec, nullptr);
         array->putDirectIndex(exec, index++, constructInternalProperty(vm, exec, "options"_s, objectForPaymentOptions(vm, exec, paymentRequest->paymentOptions())));
         array->putDirectIndex(exec, index++, constructInternalProperty(vm, exec, "details"_s, objectForPaymentDetails(vm, exec, paymentRequest->paymentDetails())));
         array->putDirectIndex(exec, index++, constructInternalProperty(vm, exec, "state"_s, jsStringForPaymentRequestState(vm, paymentRequest->state())));
         RETURN_IF_EXCEPTION(scope, { });
         return array;
     }
-#else
-    UNUSED_PARAM(vm);
-    UNUSED_PARAM(exec);
-    UNUSED_PARAM(value);
 #endif
 
     return { };
 }
 
