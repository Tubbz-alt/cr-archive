diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionConstructor.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionConstructor.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionConstructor.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionConstructor.h
@@ -50,22 +50,23 @@
 
 private:
     FunctionConstructor(VM&, Structure*);
     void finishCreation(VM&, FunctionPrototype*);
 };
+STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(FunctionConstructor, InternalFunction);
 
 enum class FunctionConstructionMode {
     Function,
     Generator,
     Async,
     AsyncGenerator,
 };
 
-JSObject* constructFunction(ExecState*, JSGlobalObject*, const ArgList&, const Identifier& functionName, const SourceOrigin&, const String& sourceURL, const WTF::TextPosition&, FunctionConstructionMode = FunctionConstructionMode::Function, JSValue newTarget = JSValue());
-JSObject* constructFunction(ExecState*, JSGlobalObject*, const ArgList&, FunctionConstructionMode = FunctionConstructionMode::Function, JSValue newTarget = JSValue());
+JSObject* constructFunction(JSGlobalObject*, const ArgList&, const Identifier& functionName, const SourceOrigin&, const String& sourceURL, const WTF::TextPosition&, FunctionConstructionMode = FunctionConstructionMode::Function, JSValue newTarget = JSValue());
+JSObject* constructFunction(JSGlobalObject*, CallFrame*, const ArgList&, FunctionConstructionMode = FunctionConstructionMode::Function, JSValue newTarget = JSValue());
 
 JS_EXPORT_PRIVATE JSObject* constructFunctionSkippingEvalEnabledCheck(
-    ExecState*, JSGlobalObject*, const ArgList&, const Identifier&, const SourceOrigin&,
+    JSGlobalObject*, const ArgList&, const Identifier&, const SourceOrigin&,
     const String&, const WTF::TextPosition&, int overrideLineNumber = -1,
     FunctionConstructionMode = FunctionConstructionMode::Function, JSValue newTarget = JSValue());
 
 } // namespace JSC
