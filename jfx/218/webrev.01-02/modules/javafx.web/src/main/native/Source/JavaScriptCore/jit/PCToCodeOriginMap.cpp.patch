diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/PCToCodeOriginMap.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/PCToCodeOriginMap.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/PCToCodeOriginMap.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/PCToCodeOriginMap.cpp
@@ -53,11 +53,11 @@
 
     template <typename T>
     void write(T item)
     {
         RELEASE_ASSERT(m_offset + sizeof(T) <= m_maxSize);
-        static const uint8_t mask = std::numeric_limits<uint8_t>::max();
+        static constexpr uint8_t mask = std::numeric_limits<uint8_t>::max();
         for (unsigned i = 0; i < sizeof(T); i++) {
             *(m_buffer + m_offset) = static_cast<uint8_t>(item & mask);
             item = item >> (sizeof(uint8_t) * 8);
             m_offset += 1;
         }
@@ -143,12 +143,12 @@
 
     m_codeRanges.append(CodeRange{label, label, codeOrigin});
 }
 
 
-static const uint8_t sentinelPCDelta = 0;
-static const int8_t sentinelBytecodeDelta = 0;
+static constexpr uint8_t sentinelPCDelta = 0;
+static constexpr int8_t sentinelBytecodeDelta = 0;
 
 PCToCodeOriginMap::PCToCodeOriginMap(PCToCodeOriginMapBuilder&& builder, LinkBuffer& linkBuffer)
 {
     RELEASE_ASSERT(builder.didBuildMapping());
 
@@ -187,13 +187,13 @@
 
         pcCompressor.write<uint8_t>(static_cast<uint8_t>(delta));
     };
 
     DeltaCompressionBuilder codeOriginCompressor((sizeof(intptr_t) + sizeof(int8_t) + sizeof(int8_t) + sizeof(InlineCallFrame*)) * builder.m_codeRanges.size());
-    CodeOrigin lastCodeOrigin(0, nullptr);
+    CodeOrigin lastCodeOrigin(BytecodeIndex(0));
     auto buildCodeOriginTable = [&] (const CodeOrigin& codeOrigin) {
-        intptr_t delta = static_cast<intptr_t>(codeOrigin.bytecodeIndex()) - static_cast<intptr_t>(lastCodeOrigin.bytecodeIndex());
+        intptr_t delta = static_cast<intptr_t>(codeOrigin.bytecodeIndex().offset()) - static_cast<intptr_t>(lastCodeOrigin.bytecodeIndex().offset());
         lastCodeOrigin = codeOrigin;
         if (delta > std::numeric_limits<int8_t>::max() || delta < std::numeric_limits<int8_t>::min() || delta == sentinelBytecodeDelta) {
             codeOriginCompressor.write<int8_t>(sentinelBytecodeDelta);
             codeOriginCompressor.write<intptr_t>(delta);
         } else
@@ -252,11 +252,11 @@
     uintptr_t pcAsInt = bitwise_cast<uintptr_t>(pc);
     if (!(m_pcRangeStart <= pcAsInt && pcAsInt <= m_pcRangeEnd))
         return WTF::nullopt;
 
     uintptr_t currentPC = 0;
-    unsigned currentBytecodeIndex = 0;
+    BytecodeIndex currentBytecodeIndex = BytecodeIndex(0);
     InlineCallFrame* currentInlineCallFrame = nullptr;
 
     DeltaCompresseionReader pcReader(m_compressedPCs, m_compressedPCBufferSize);
     DeltaCompresseionReader codeOriginReader(m_compressedCodeOrigins, m_compressedCodeOriginsSize);
     while (true) {
@@ -278,11 +278,11 @@
             if (value == sentinelBytecodeDelta)
                 delta = codeOriginReader.read<intptr_t>();
             else
                 delta = static_cast<intptr_t>(value);
 
-            currentBytecodeIndex = static_cast<unsigned>(static_cast<intptr_t>(currentBytecodeIndex) + delta);
+            currentBytecodeIndex = BytecodeIndex(static_cast<intptr_t>(currentBytecodeIndex.offset()) + delta);
 
             int8_t hasInlineFrame = codeOriginReader.read<int8_t>();
             ASSERT(hasInlineFrame == 0 || hasInlineFrame == 1);
             if (hasInlineFrame)
                 currentInlineCallFrame = bitwise_cast<InlineCallFrame*>(codeOriginReader.read<uintptr_t>());
