diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLVisitor.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLVisitor.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLVisitor.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLVisitor.cpp
@@ -190,12 +190,10 @@
         checkErrorAndVisit(integerLiteral);
     }, [&](AST::UnsignedIntegerLiteral& unsignedIntegerLiteral) {
         checkErrorAndVisit(unsignedIntegerLiteral);
     }, [&](AST::FloatLiteral& floatLiteral) {
         checkErrorAndVisit(floatLiteral);
-    }, [&](AST::NullLiteral& nullLiteral) {
-        checkErrorAndVisit(nullLiteral);
     }, [&](AST::BooleanLiteral& booleanLiteral) {
         checkErrorAndVisit(booleanLiteral);
     }, [&](AST::EnumerationMemberLiteral& enumerationMemberLiteral) {
         checkErrorAndVisit(enumerationMemberLiteral);
     }));
@@ -236,15 +234,10 @@
 void Visitor::visit(AST::FloatLiteral& floatLiteral)
 {
     checkErrorAndVisit(floatLiteral.type());
 }
 
-void Visitor::visit(AST::NullLiteral& nullLiteral)
-{
-    checkErrorAndVisit(nullLiteral.type());
-}
-
 void Visitor::visit(AST::BooleanLiteral&)
 {
 }
 
 void Visitor::visit(AST::IntegerLiteralType& integerLiteralType)
@@ -266,16 +259,10 @@
     if (floatLiteralType.maybeResolvedType())
         checkErrorAndVisit(floatLiteralType.resolvedType());
     checkErrorAndVisit(floatLiteralType.preferredType());
 }
 
-void Visitor::visit(AST::NullLiteralType& nullLiteralType)
-{
-    if (nullLiteralType.maybeResolvedType())
-        checkErrorAndVisit(nullLiteralType.resolvedType());
-}
-
 void Visitor::visit(AST::EnumerationMemberLiteral&)
 {
 }
 
 void Visitor::visit(AST::FunctionAttribute& functionAttribute)
@@ -397,13 +384,10 @@
         checkErrorAndVisit(downcast<AST::MakeArrayReferenceExpression>(expression));
         break;
     case AST::Expression::Kind::MakePointer:
         checkErrorAndVisit(downcast<AST::MakePointerExpression>(expression));
         break;
-    case AST::Expression::Kind::NullLiteral:
-        checkErrorAndVisit(downcast<AST::NullLiteral>(expression));
-        break;
     case AST::Expression::Kind::Dot:
         checkErrorAndVisit(downcast<AST::DotExpression>(expression));
         break;
     case AST::Expression::Kind::GlobalVariableReference:
         checkErrorAndVisit(downcast<AST::GlobalVariableReference>(expression));
