diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/InspectorInstrumentationObject.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/InspectorInstrumentationObject.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/InspectorInstrumentationObject.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/InspectorInstrumentationObject.cpp
@@ -30,11 +30,11 @@
 #include "Lookup.h"
 #include <wtf/DataLog.h>
 
 namespace JSC {
 
-EncodedJSValue JSC_HOST_CALL inspectorInstrumentationObjectLog(ExecState*);
+EncodedJSValue JSC_HOST_CALL inspectorInstrumentationObjectLog(JSGlobalObject*, CallFrame*);
 
 }
 
 #include "InspectorInstrumentationObject.lut.h"
 
@@ -79,16 +79,16 @@
     putDirect(vm, vm.propertyNames->isEnabled, jsBoolean(false));
 }
 
 // ------------------------------ Functions --------------------------------
 
-EncodedJSValue JSC_HOST_CALL inspectorInstrumentationObjectLog(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL inspectorInstrumentationObjectLog(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
-    JSValue target = exec->argument(0);
-    String value = target.toWTFString(exec);
+    JSValue target = callFrame->argument(0);
+    String value = target.toWTFString(globalObject);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
     dataLog(value, "\n");
     return JSValue::encode(jsUndefined());
 }
 
