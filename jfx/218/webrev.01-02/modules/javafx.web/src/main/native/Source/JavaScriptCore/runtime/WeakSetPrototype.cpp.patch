diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/WeakSetPrototype.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/WeakSetPrototype.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/WeakSetPrototype.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/WeakSetPrototype.cpp
@@ -31,74 +31,74 @@
 
 namespace JSC {
 
 const ClassInfo WeakSetPrototype::s_info = { "WeakSet", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(WeakSetPrototype) };
 
-static EncodedJSValue JSC_HOST_CALL protoFuncWeakSetDelete(ExecState*);
-static EncodedJSValue JSC_HOST_CALL protoFuncWeakSetHas(ExecState*);
-static EncodedJSValue JSC_HOST_CALL protoFuncWeakSetAdd(ExecState*);
+static EncodedJSValue JSC_HOST_CALL protoFuncWeakSetDelete(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL protoFuncWeakSetHas(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL protoFuncWeakSetAdd(JSGlobalObject*, CallFrame*);
 
 void WeakSetPrototype::finishCreation(VM& vm, JSGlobalObject* globalObject)
 {
     Base::finishCreation(vm);
     ASSERT(inherits(vm, info()));
 
     JSC_NATIVE_FUNCTION_WITHOUT_TRANSITION(vm.propertyNames->deleteKeyword, protoFuncWeakSetDelete, static_cast<unsigned>(PropertyAttribute::DontEnum), 1);
     JSC_NATIVE_INTRINSIC_FUNCTION_WITHOUT_TRANSITION(vm.propertyNames->has, protoFuncWeakSetHas, static_cast<unsigned>(PropertyAttribute::DontEnum), 1, JSWeakSetHasIntrinsic);
     JSC_NATIVE_INTRINSIC_FUNCTION_WITHOUT_TRANSITION(vm.propertyNames->add, protoFuncWeakSetAdd, static_cast<unsigned>(PropertyAttribute::DontEnum), 1, JSWeakSetAddIntrinsic);
 
-    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsString(vm, "WeakSet"), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
+    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsNontrivialString(vm, "WeakSet"_s), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
 }
 
-ALWAYS_INLINE static JSWeakSet* getWeakSet(CallFrame* callFrame, JSValue value)
+ALWAYS_INLINE static JSWeakSet* getWeakSet(JSGlobalObject* globalObject, JSValue value)
 {
-    VM& vm = callFrame->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     if (UNLIKELY(!value.isObject())) {
-        throwTypeError(callFrame, scope, "Called WeakSet function on non-object"_s);
+        throwTypeError(globalObject, scope, "Called WeakSet function on non-object"_s);
         return nullptr;
     }
 
     auto* set = jsDynamicCast<JSWeakSet*>(vm, asObject(value));
     if (LIKELY(set))
         return set;
 
-    throwTypeError(callFrame, scope, "Called WeakSet function on a non-WeakSet object"_s);
+    throwTypeError(globalObject, scope, "Called WeakSet function on a non-WeakSet object"_s);
     return nullptr;
 }
 
-EncodedJSValue JSC_HOST_CALL protoFuncWeakSetDelete(CallFrame* callFrame)
+EncodedJSValue JSC_HOST_CALL protoFuncWeakSetDelete(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    auto* set = getWeakSet(callFrame, callFrame->thisValue());
+    auto* set = getWeakSet(globalObject, callFrame->thisValue());
     if (!set)
         return JSValue::encode(jsUndefined());
     JSValue key = callFrame->argument(0);
     return JSValue::encode(jsBoolean(key.isObject() && set->remove(asObject(key))));
 }
 
-EncodedJSValue JSC_HOST_CALL protoFuncWeakSetHas(CallFrame* callFrame)
+EncodedJSValue JSC_HOST_CALL protoFuncWeakSetHas(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    auto* set = getWeakSet(callFrame, callFrame->thisValue());
+    auto* set = getWeakSet(globalObject, callFrame->thisValue());
     if (!set)
         return JSValue::encode(jsUndefined());
     JSValue key = callFrame->argument(0);
     return JSValue::encode(jsBoolean(key.isObject() && set->has(asObject(key))));
 }
 
-EncodedJSValue JSC_HOST_CALL protoFuncWeakSetAdd(CallFrame* callFrame)
+EncodedJSValue JSC_HOST_CALL protoFuncWeakSetAdd(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = callFrame->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    auto* set = getWeakSet(callFrame, callFrame->thisValue());
+    auto* set = getWeakSet(globalObject, callFrame->thisValue());
     EXCEPTION_ASSERT(!!scope.exception() == !set);
     if (!set)
         return JSValue::encode(jsUndefined());
     JSValue key = callFrame->argument(0);
     if (!key.isObject())
-        return JSValue::encode(throwTypeError(callFrame, scope, "Attempted to add a non-object key to a WeakSet"_s));
+        return JSValue::encode(throwTypeError(globalObject, scope, "Attempted to add a non-object key to a WeakSet"_s));
     set->add(vm, asObject(key));
     return JSValue::encode(callFrame->thisValue());
 }
 
 }
