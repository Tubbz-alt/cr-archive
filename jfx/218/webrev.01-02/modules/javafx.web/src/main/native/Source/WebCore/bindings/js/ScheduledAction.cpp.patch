diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScheduledAction.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScheduledAction.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScheduledAction.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScheduledAction.cpp
@@ -98,31 +98,31 @@
     CallData callData;
     CallType callType = getCallData(vm, m_function.get(), callData);
     if (callType == CallType::None)
         return;
 
-    ExecState* exec = globalObject->globalExec();
+    JSGlobalObject* lexicalGlobalObject = globalObject;
 
     MarkedArgumentBuffer arguments;
     for (auto& argument : m_arguments)
         arguments.append(argument.get());
     if (UNLIKELY(arguments.hasOverflowed())) {
-        throwOutOfMemoryError(exec, scope);
+        throwOutOfMemoryError(lexicalGlobalObject, scope);
         NakedPtr<JSC::Exception> exception = scope.exception();
-        reportException(exec, exception);
+        reportException(lexicalGlobalObject, exception);
         return;
     }
 
-    InspectorInstrumentationCookie cookie = JSExecState::instrumentFunctionCall(&context, callType, callData);
+    JSExecState::instrumentFunctionCall(&context, callType, callData);
 
     NakedPtr<JSC::Exception> exception;
-    JSExecState::profiledCall(exec, JSC::ProfilingReason::Other, m_function.get(), callType, callData, thisValue, arguments, exception);
+    JSExecState::profiledCall(lexicalGlobalObject, JSC::ProfilingReason::Other, m_function.get(), callType, callData, thisValue, arguments, exception);
 
-    InspectorInstrumentation::didCallFunction(cookie, &context);
+    InspectorInstrumentation::didCallFunction(&context);
 
     if (exception)
-        reportException(exec, exception);
+        reportException(lexicalGlobalObject, exception);
 }
 
 void ScheduledAction::execute(Document& document)
 {
     JSDOMWindow* window = toJSDOMWindow(document.frame(), m_isolatedWorld);
@@ -134,11 +134,11 @@
         return;
 
     if (m_function)
         executeFunctionInContext(window, window->proxy(), document);
     else
-        frame->script().executeScriptInWorld(m_isolatedWorld, m_code);
+        frame->script().executeScriptInWorldIgnoringException(m_isolatedWorld, m_code);
 }
 
 void ScheduledAction::execute(WorkerGlobalScope& workerGlobalScope)
 {
     // In a Worker, the execution should always happen on a worker thread.
