diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/FormData.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/FormData.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/FormData.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/FormData.h
@@ -18,11 +18,10 @@
  */
 
 #pragma once
 
 #include "BlobData.h"
-#include <pal/SessionID.h>
 #include <wtf/Forward.h>
 #include <wtf/RefCounted.h>
 #include <wtf/URL.h>
 #include <wtf/Variant.h>
 #include <wtf/Vector.h>
@@ -49,12 +48,12 @@
     FormDataElement(const String& filename, int64_t fileStart, int64_t fileLength, Optional<WallTime> expectedFileModificationTime)
         : data(EncodedFileData { filename, fileStart, fileLength, expectedFileModificationTime }) { }
     explicit FormDataElement(const URL& blobURL)
         : data(EncodedBlobData { blobURL }) { }
 
-    uint64_t lengthInBytes(BlobRegistryImpl*) const;
-    uint64_t lengthInBytes(PAL::SessionID) const;
+    uint64_t lengthInBytes(const Function<uint64_t(const URL&)>&) const;
+    uint64_t lengthInBytes() const;
 
     FormDataElement isolatedCopy() const;
 
     template<typename Encoder> void encode(Encoder& encoder) const
     {
@@ -219,11 +218,11 @@
     WEBCORE_EXPORT Vector<char> flatten() const; // omits files
     String flattenToString() const; // omits files
 
     // Resolve all blob references so we only have file and data.
     // If the FormData has no blob references to resolve, this is returned.
-    WEBCORE_EXPORT Ref<FormData> resolveBlobReferences(BlobRegistryImpl*);
+    WEBCORE_EXPORT Ref<FormData> resolveBlobReferences(BlobRegistryImpl* = nullptr);
 
     WEBCORE_EXPORT FormDataForUpload prepareForUpload();
 
     bool isEmpty() const { return m_elements.isEmpty(); }
     const Vector<FormDataElement>& elements() const { return m_elements; }
@@ -249,11 +248,11 @@
         if (equalLettersIgnoringASCIICase(type, "multipart/form-data"))
             return MultipartFormData;
         return FormURLEncoded;
     }
 
-    uint64_t lengthInBytes(PAL::SessionID) const;
+    uint64_t lengthInBytes() const;
 
     WEBCORE_EXPORT URL asBlobURL() const;
 
 private:
     FormData();
