diff a/modules/javafx.web/src/main/native/Source/WebCore/html/MediaDocument.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/MediaDocument.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/MediaDocument.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/MediaDocument.cpp
@@ -142,23 +142,21 @@
 
     createDocumentStructure();
     finish();
 }
 
-MediaDocument::MediaDocument(PAL::SessionID sessionID, Frame* frame, const URL& url)
-    : HTMLDocument(sessionID, frame, url, MediaDocumentClass)
-    , m_replaceMediaElementTimer(*this, &MediaDocument::replaceMediaElementTimerFired)
+MediaDocument::MediaDocument(Frame* frame, const URL& url)
+    : HTMLDocument(frame, url, MediaDocumentClass)
 {
     setCompatibilityMode(DocumentCompatibilityMode::QuirksMode);
     lockCompatibilityMode();
     if (frame)
         m_outgoingReferrer = frame->loader().outgoingReferrer();
 }
 
 MediaDocument::~MediaDocument()
 {
-    ASSERT(!m_replaceMediaElementTimer.isActive());
 }
 
 Ref<DocumentParser> MediaDocument::createParser()
 {
     return MediaDocumentParser::create(*this);
@@ -226,20 +224,10 @@
             keyboardEvent.setDefaultHandled();
         }
     }
 }
 
-void MediaDocument::mediaElementSawUnsupportedTracks()
-{
-    // The HTMLMediaElement was told it has something that the underlying
-    // MediaPlayer cannot handle so we should switch from <video> to <embed>
-    // and let the plugin handle this. Don't do it immediately as this
-    // function may be called directly from a media engine callback, and
-    // replaceChild will destroy the element, media player, and media engine.
-    m_replaceMediaElementTimer.startOneShot(0_s);
-}
-
 void MediaDocument::replaceMediaElementTimerFired()
 {
     auto htmlBody = makeRefPtr(bodyOrFrameset());
     if (!htmlBody)
         return;
