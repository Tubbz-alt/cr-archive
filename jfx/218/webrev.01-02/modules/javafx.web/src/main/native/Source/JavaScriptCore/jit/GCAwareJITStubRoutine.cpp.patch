diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/GCAwareJITStubRoutine.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/GCAwareJITStubRoutine.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/GCAwareJITStubRoutine.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/GCAwareJITStubRoutine.cpp
@@ -79,13 +79,14 @@
 {
 }
 
 MarkingGCAwareJITStubRoutine::MarkingGCAwareJITStubRoutine(
     const MacroAssemblerCodeRef<JITStubRoutinePtrTag>& code, VM& vm, const JSCell* owner,
-    const Vector<JSCell*>& cells)
+    const Vector<JSCell*>& cells, Bag<CallLinkInfo>&& callLinkInfos)
     : GCAwareJITStubRoutine(code, vm)
     , m_cells(cells.size())
+    , m_callLinkInfos(WTFMove(callLinkInfos))
 {
     for (unsigned i = cells.size(); i--;)
         m_cells[i].set(vm, owner, cells[i]);
 }
 
@@ -99,13 +100,13 @@
         visitor.append(entry);
 }
 
 
 GCAwareJITStubRoutineWithExceptionHandler::GCAwareJITStubRoutineWithExceptionHandler(
-    const MacroAssemblerCodeRef<JITStubRoutinePtrTag>& code, VM& vm,  const JSCell* owner, const Vector<JSCell*>& cells,
+    const MacroAssemblerCodeRef<JITStubRoutinePtrTag>& code, VM& vm,  const JSCell* owner, const Vector<JSCell*>& cells, Bag<CallLinkInfo>&& callLinkInfos,
     CodeBlock* codeBlockForExceptionHandlers, DisposableCallSiteIndex exceptionHandlerCallSiteIndex)
-    : MarkingGCAwareJITStubRoutine(code, vm, owner, cells)
+    : MarkingGCAwareJITStubRoutine(code, vm, owner, cells, WTFMove(callLinkInfos))
     , m_codeBlockWithExceptionHandler(codeBlockForExceptionHandlers)
     , m_exceptionHandlerCallSiteIndex(exceptionHandlerCallSiteIndex)
 {
     RELEASE_ASSERT(m_codeBlockWithExceptionHandler);
     ASSERT(!!m_codeBlockWithExceptionHandler->handlerForIndex(exceptionHandlerCallSiteIndex.bits()));
@@ -134,25 +135,29 @@
     const MacroAssemblerCodeRef<JITStubRoutinePtrTag>& code,
     VM& vm,
     const JSCell* owner,
     bool makesCalls,
     const Vector<JSCell*>& cells,
+    Bag<CallLinkInfo>&& callLinkInfos,
     CodeBlock* codeBlockForExceptionHandlers,
     DisposableCallSiteIndex exceptionHandlerCallSiteIndex)
 {
-    if (!makesCalls)
+    if (!makesCalls) {
+        // Allocating CallLinkInfos means we should have calls.
+        ASSERT(callLinkInfos.isEmpty());
         return adoptRef(*new JITStubRoutine(code));
+    }
 
     if (codeBlockForExceptionHandlers) {
         RELEASE_ASSERT(JITCode::isOptimizingJIT(codeBlockForExceptionHandlers->jitType()));
-        return adoptRef(*new GCAwareJITStubRoutineWithExceptionHandler(code, vm, owner, cells, codeBlockForExceptionHandlers, exceptionHandlerCallSiteIndex));
+        return adoptRef(*new GCAwareJITStubRoutineWithExceptionHandler(code, vm, owner, cells, WTFMove(callLinkInfos), codeBlockForExceptionHandlers, exceptionHandlerCallSiteIndex));
     }
 
-    if (cells.isEmpty())
-        return adoptRef(*new GCAwareJITStubRoutine(code, vm));
+    if (cells.isEmpty() && callLinkInfos.isEmpty())
+        return GCAwareJITStubRoutine::create(code, vm);
 
-    return adoptRef(*new MarkingGCAwareJITStubRoutine(code, vm, owner, cells));
+    return adoptRef(*new MarkingGCAwareJITStubRoutine(code, vm, owner, cells, WTFMove(callLinkInfos)));
 }
 
 } // namespace JSC
 
 #endif // ENABLE(JIT)
