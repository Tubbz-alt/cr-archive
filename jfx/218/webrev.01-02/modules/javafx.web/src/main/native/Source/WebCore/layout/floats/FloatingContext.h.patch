diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatingContext.h b/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatingContext.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatingContext.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/floats/FloatingContext.h
@@ -26,29 +26,28 @@
 #pragma once
 
 #if ENABLE(LAYOUT_FORMATTING_CONTEXT)
 
 #include "FloatingState.h"
-#include "LayoutUnits.h"
+#include "LayoutContainer.h"
 #include <wtf/IsoMalloc.h>
 
 namespace WebCore {
-
 namespace Layout {
 
 class FloatAvoider;
+class FloatBox;
+class FormattingContext;
 class Box;
-class Container;
-class FloatingPair;
 class LayoutState;
 
 // FloatingContext is responsible for adjusting the position of a box in the current formatting context
 // by taking the floating boxes into account.
 class FloatingContext {
     WTF_MAKE_ISO_ALLOCATED(FloatingContext);
 public:
-    FloatingContext(FloatingState&);
+    FloatingContext(const Container& floatingContextRoot, const FormattingContext&, FloatingState&);
 
     FloatingState& floatingState() const { return m_floatingState; }
 
     Point positionForFloat(const Box&) const;
     Optional<Point> positionForFormattingContextRoot(const Box&) const;
@@ -57,16 +56,35 @@
         Optional<Position> position;
         Optional<LayoutUnit> clearance;
     };
     ClearancePosition verticalPositionWithClearance(const Box&) const;
 
+    bool isEmpty() const { return m_floatingState.floats().isEmpty(); }
+
+    struct Constraints {
+        Optional<PointInContextRoot> left;
+        Optional<PointInContextRoot> right;
+    };
+    Constraints constraints(LayoutUnit logicalTop, LayoutUnit logicalBottom) const;
+    void append(const Box&);
+
 private:
     LayoutState& layoutState() const { return m_floatingState.layoutState(); }
+    const FormattingContext& formattingContext() const { return m_formattingContext; }
+    const Container& root() const { return *m_root; }
 
     void findPositionForFloatBox(FloatBox&) const;
     void findPositionForFormattingContextRoot(FloatAvoider&) const;
 
+    struct AbsoluteCoordinateValuesForFloatAvoider;
+    AbsoluteCoordinateValuesForFloatAvoider absoluteDisplayBoxCoordinates(const Box&) const;
+    Display::Box mapToFloatingStateRoot(const Box&) const;
+    LayoutUnit mapTopToFloatingStateRoot(const Box&) const;
+    Point mapPointFromFormattingContextRootToFloatingStateRoot(Point) const;
+
+    WeakPtr<const Container> m_root;
+    const FormattingContext& m_formattingContext;
     FloatingState& m_floatingState;
 };
 
 }
 }
