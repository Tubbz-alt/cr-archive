diff a/modules/javafx.web/src/main/native/Source/WebCore/fileapi/FileReader.h b/modules/javafx.web/src/main/native/Source/WebCore/fileapi/FileReader.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/fileapi/FileReader.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/fileapi/FileReader.h
@@ -34,10 +34,12 @@
 #include "EventTarget.h"
 #include "ExceptionOr.h"
 #include "FileError.h"
 #include "FileReaderLoader.h"
 #include "FileReaderLoaderClient.h"
+#include <wtf/HashMap.h>
+#include <wtf/UniqueRef.h>
 
 namespace JSC {
 class ArrayBuffer;
 }
 
@@ -72,22 +74,27 @@
     Optional<Variant<String, RefPtr<JSC::ArrayBuffer>>> result() const;
 
     using RefCounted::ref;
     using RefCounted::deref;
 
+    // ActiveDOMObject.
+    bool hasPendingActivity() const final;
+
 private:
     explicit FileReader(ScriptExecutionContext&);
 
+    // ActiveDOMObject.
     const char* activeDOMObjectName() const final;
-    bool canSuspendForDocumentSuspension() const final;
     void stop() final;
 
     EventTargetInterface eventTargetInterface() const final { return FileReaderEventTargetInterfaceType; }
     ScriptExecutionContext* scriptExecutionContext() const final { return ActiveDOMObject::scriptExecutionContext(); }
     void refEventTarget() final { ref(); }
     void derefEventTarget() final { deref(); }
 
+    void enqueueTask(Function<void()>&&);
+
     void didStartLoading() final;
     void didReceiveData() final;
     void didFinishLoading() final;
     void didFail(int errorCode) final;
 
@@ -101,9 +108,9 @@
     FileReaderLoader::ReadType m_readType { FileReaderLoader::ReadAsBinaryString };
     String m_encoding;
     std::unique_ptr<FileReaderLoader> m_loader;
     RefPtr<FileError> m_error;
     MonotonicTime m_lastProgressNotificationTime { MonotonicTime::nan() };
-    RefPtr<PendingActivity<FileReader>> m_loadingActivity;
+    HashMap<uint64_t, Function<void()>> m_pendingTasks;
 };
 
 } // namespace WebCore
