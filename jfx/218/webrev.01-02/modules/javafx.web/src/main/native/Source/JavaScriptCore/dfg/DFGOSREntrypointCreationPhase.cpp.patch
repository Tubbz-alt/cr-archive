diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGOSREntrypointCreationPhase.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGOSREntrypointCreationPhase.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGOSREntrypointCreationPhase.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGOSREntrypointCreationPhase.cpp
@@ -48,13 +48,13 @@
     bool run()
     {
         RELEASE_ASSERT(m_graph.m_plan.mode() == FTLForOSREntryMode);
         RELEASE_ASSERT(m_graph.m_form == ThreadedCPS);
 
-        unsigned bytecodeIndex = m_graph.m_plan.osrEntryBytecodeIndex();
+        BytecodeIndex bytecodeIndex = m_graph.m_plan.osrEntryBytecodeIndex();
         RELEASE_ASSERT(bytecodeIndex);
-        RELEASE_ASSERT(bytecodeIndex != UINT_MAX);
+        RELEASE_ASSERT(bytecodeIndex.offset());
 
         // Needed by createPreHeader().
         m_graph.ensureCPSDominators();
 
         CodeBlock* baseline = m_graph.m_profiledBlock;
@@ -90,24 +90,24 @@
         // executionCount to use best judgement - but that seems unnecessary since we know for
         // sure what the executionCount should be in this case.
         BasicBlock* newRoot = insertionSet.insert(0, 1);
 
         // We'd really like to use an unset origin, but ThreadedCPS won't allow that.
-        NodeOrigin origin = NodeOrigin(CodeOrigin(0), CodeOrigin(0), false);
+        NodeOrigin origin = NodeOrigin(CodeOrigin(BytecodeIndex(0)), CodeOrigin(BytecodeIndex(0)), false);
 
         Vector<Node*> locals(baseline->numCalleeLocals());
         for (int local = 0; local < baseline->numCalleeLocals(); ++local) {
             Node* previousHead = target->variablesAtHead.local(local);
             if (!previousHead)
                 continue;
             VariableAccessData* variable = previousHead->variableAccessData();
             locals[local] = newRoot->appendNode(
                 m_graph, variable->prediction(), ExtractOSREntryLocal, origin,
-                OpInfo(variable->local().offset()));
+                OpInfo(variable->operand().virtualRegister()));
 
             newRoot->appendNode(
-                m_graph, SpecNone, MovHint, origin, OpInfo(variable->local().offset()),
+                m_graph, SpecNone, MovHint, origin, OpInfo(variable->operand().virtualRegister()),
                 Edge(locals[local]));
         }
 
         // Now use the origin of the target, since it's not OK to exit, and we will probably hoist
         // type checks to here.
