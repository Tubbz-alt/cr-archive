diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSTypedOMCSSStyleValueCustom.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSTypedOMCSSStyleValueCustom.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSTypedOMCSSStyleValueCustom.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSTypedOMCSSStyleValueCustom.cpp
@@ -26,18 +26,19 @@
 #include "config.h"
 #include "JSTypedOMCSSStyleValue.h"
 
 #if ENABLE(CSS_TYPED_OM)
 
+#include "JSDOMWrapperCache.h"
 #include "JSTypedOMCSSImageValue.h"
 #include "JSTypedOMCSSUnitValue.h"
 #include "JSTypedOMCSSUnparsedValue.h"
 
 namespace WebCore {
 using namespace JSC;
 
-JSValue toJSNewlyCreated(ExecState*, JSDOMGlobalObject* globalObject, Ref<TypedOMCSSStyleValue>&& value)
+JSValue toJSNewlyCreated(JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<TypedOMCSSStyleValue>&& value)
 {
     if (value->isUnitValue())
         return createWrapper<TypedOMCSSUnitValue>(globalObject, WTFMove(value));
     if (value->isUnparsedValue())
         return createWrapper<TypedOMCSSUnparsedValue>(globalObject, WTFMove(value));
@@ -46,13 +47,13 @@
 
     ASSERT_NOT_REACHED();
     return createWrapper<TypedOMCSSStyleValue>(globalObject, WTFMove(value));
 }
 
-JSValue toJS(ExecState* state, JSDOMGlobalObject* globalObject, TypedOMCSSStyleValue& object)
+JSValue toJS(JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, TypedOMCSSStyleValue& object)
 {
-    return wrap(state, globalObject, object);
+    return wrap(lexicalGlobalObject, globalObject, object);
 }
 
 } // namespace WebCore
 
 #endif
