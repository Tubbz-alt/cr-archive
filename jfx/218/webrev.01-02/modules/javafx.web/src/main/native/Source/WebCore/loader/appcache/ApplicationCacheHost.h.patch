diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.h
@@ -88,10 +88,12 @@
     static URL createFileURL(const String&);
 
     void selectCacheWithoutManifest();
     void selectCacheWithManifest(const URL& manifestURL);
 
+    bool canLoadMainResource(const ResourceRequest&);
+
     void maybeLoadMainResource(const ResourceRequest&, SubstituteData&);
     void maybeLoadMainResourceForRedirect(const ResourceRequest&, SubstituteData&);
     bool maybeLoadFallbackForMainResponse(const ResourceRequest&, const ResourceResponse&);
     void mainResourceDataReceived(const char* data, int length, long long encodedDataLength, bool allAtOnce);
     void finishedLoadingMainResource();
@@ -103,11 +105,11 @@
     WEBCORE_EXPORT bool maybeLoadFallbackForError(ResourceLoader*, const ResourceError&);
 
     bool maybeLoadSynchronously(ResourceRequest&, ResourceError&, ResourceResponse&, RefPtr<SharedBuffer>&);
     void maybeLoadFallbackSynchronously(const ResourceRequest&, ResourceError&, ResourceResponse&, RefPtr<SharedBuffer>&);
 
-    bool canCacheInPageCache();
+    bool canCacheInBackForwardCache();
 
     Status status() const;
     bool update();
     bool swapCache();
     void abort();
@@ -139,11 +141,11 @@
 
     void dispatchDOMEvent(const AtomString& eventType, int progressTotal, int progressDone);
 
     bool scheduleLoadFallbackResourceFromApplicationCache(ResourceLoader*, ApplicationCache* = nullptr);
     void setCandidateApplicationCacheGroup(ApplicationCacheGroup*);
-    ApplicationCacheGroup* candidateApplicationCacheGroup() const { return m_candidateApplicationCacheGroup; }
+    ApplicationCacheGroup* candidateApplicationCacheGroup() const;
     void setApplicationCache(RefPtr<ApplicationCache>&&);
     ApplicationCache* applicationCache() const { return m_applicationCache.get(); }
     ApplicationCache* mainResourceApplicationCache() const { return m_mainResourceApplicationCache.get(); }
     bool maybeLoadFallbackForMainError(const ResourceRequest&, const ResourceError&);
 
@@ -156,11 +158,11 @@
     // The application cache that the document loader is associated with (if any).
     RefPtr<ApplicationCache> m_applicationCache;
 
     // Before an application cache has finished loading, this will be the candidate application
     // group that the document loader is associated with.
-    ApplicationCacheGroup* m_candidateApplicationCacheGroup { nullptr };
+    WeakPtr<ApplicationCacheGroup> m_candidateApplicationCacheGroup;
 
     // This is the application cache the main resource was loaded from (if any).
     RefPtr<ApplicationCache> m_mainResourceApplicationCache;
 };
 
