diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSExecState.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSExecState.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSExecState.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSExecState.cpp
@@ -24,33 +24,33 @@
  */
 
 #include "config.h"
 #include "JSExecState.h"
 
-#include "Microtasks.h"
+#include "EventLoop.h"
 #include "RejectedPromiseTracker.h"
 #include "ScriptExecutionContext.h"
 #include "ScriptState.h"
 #include "WorkerGlobalScope.h"
 
 namespace WebCore {
 
-void JSExecState::didLeaveScriptContext(JSC::ExecState* exec)
+void JSExecState::didLeaveScriptContext(JSC::JSGlobalObject* lexicalGlobalObject)
 {
-    ScriptExecutionContext* context = scriptExecutionContextFromExecState(exec);
+    ScriptExecutionContext* context = scriptExecutionContextFromExecState(lexicalGlobalObject);
     if (!context)
         return;
-    MicrotaskQueue::contextQueue(*context).performMicrotaskCheckpoint();
+    context->eventLoop().performMicrotaskCheckpoint();
     context->ensureRejectedPromiseTracker().processQueueSoon();
 }
 
-JSC::JSValue functionCallHandlerFromAnyThread(JSC::ExecState* exec, JSC::JSValue functionObject, JSC::CallType callType, const JSC::CallData& callData, JSC::JSValue thisValue, const JSC::ArgList& args, NakedPtr<JSC::Exception>& returnedException)
+JSC::JSValue functionCallHandlerFromAnyThread(JSC::JSGlobalObject* lexicalGlobalObject, JSC::JSValue functionObject, JSC::CallType callType, const JSC::CallData& callData, JSC::JSValue thisValue, const JSC::ArgList& args, NakedPtr<JSC::Exception>& returnedException)
 {
-    return JSExecState::call(exec, functionObject, callType, callData, thisValue, args, returnedException);
+    return JSExecState::call(lexicalGlobalObject, functionObject, callType, callData, thisValue, args, returnedException);
 }
 
-JSC::JSValue evaluateHandlerFromAnyThread(JSC::ExecState* exec, const JSC::SourceCode& source, JSC::JSValue thisValue, NakedPtr<JSC::Exception>& returnedException)
+JSC::JSValue evaluateHandlerFromAnyThread(JSC::JSGlobalObject* lexicalGlobalObject, const JSC::SourceCode& source, JSC::JSValue thisValue, NakedPtr<JSC::Exception>& returnedException)
 {
-    return JSExecState::evaluate(exec, source, thisValue, returnedException);
+    return JSExecState::evaluate(lexicalGlobalObject, source, thisValue, returnedException);
 }
 
 } // namespace WebCore
