diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/displaylists/DisplayList.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/displaylists/DisplayList.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/displaylists/DisplayList.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/displaylists/DisplayList.h
@@ -23,27 +23,135 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "DisplayListItems.h"
+#include "FloatRect.h"
+#include "GraphicsContext.h"
 #include <wtf/FastMalloc.h>
 #include <wtf/Noncopyable.h>
 #include <wtf/text/WTFString.h>
 
 namespace WTF {
 class TextStream;
 }
 
 namespace WebCore {
 
-class FloatRect;
-class GraphicsContext;
-
 namespace DisplayList {
 
-class Item;
+enum class ItemType : uint8_t {
+    Save,
+    Restore,
+    Translate,
+    Rotate,
+    Scale,
+    ConcatenateCTM,
+    SetCTM,
+    SetState,
+    SetLineCap,
+    SetLineDash,
+    SetLineJoin,
+    SetMiterLimit,
+    ClearShadow,
+    Clip,
+    ClipOut,
+    ClipOutToPath,
+    ClipPath,
+    DrawGlyphs,
+    DrawImage,
+    DrawTiledImage,
+    DrawTiledScaledImage,
+#if USE(CG) || USE(CAIRO) || USE(DIRECT2D)
+    DrawNativeImage,
+#endif
+    DrawPattern,
+    DrawRect,
+    DrawLine,
+    DrawLinesForText,
+    DrawDotsForDocumentMarker,
+    DrawEllipse,
+    DrawPath,
+    DrawFocusRingPath,
+    DrawFocusRingRects,
+    FillRect,
+    FillRectWithColor,
+    FillRectWithGradient,
+    FillCompositedRect,
+    FillRoundedRect,
+    FillRectWithRoundedHole,
+    FillPath,
+    FillEllipse,
+    StrokeRect,
+    StrokePath,
+    StrokeEllipse,
+    ClearRect,
+    BeginTransparencyLayer,
+    EndTransparencyLayer,
+#if USE(CG)
+    ApplyStrokePattern, // FIXME: should not be a recorded item.
+    ApplyFillPattern, // FIXME: should not be a recorded item.
+#endif
+    ApplyDeviceScaleFactor,
+};
+
+class Item : public RefCounted<Item> {
+public:
+    Item() = delete;
+
+    WEBCORE_EXPORT Item(ItemType);
+    WEBCORE_EXPORT virtual ~Item();
+
+    ItemType type() const
+    {
+        return m_type;
+    }
+
+    virtual void apply(GraphicsContext&) const = 0;
+
+    static constexpr bool isDisplayListItem = true;
+
+    virtual bool isDrawingItem() const { return false; }
+
+    // A state item is one preserved by Save/Restore.
+    bool isStateItem() const
+    {
+        return isStateItemType(m_type);
+    }
+
+    static bool isStateItemType(ItemType itemType)
+    {
+        switch (itemType) {
+        case ItemType::Translate:
+        case ItemType::Rotate:
+        case ItemType::Scale:
+        case ItemType::ConcatenateCTM:
+        case ItemType::SetCTM:
+        case ItemType::SetState:
+        case ItemType::SetLineCap:
+        case ItemType::SetLineDash:
+        case ItemType::SetLineJoin:
+        case ItemType::SetMiterLimit:
+        case ItemType::ClearShadow:
+            return true;
+        default:
+            return false;
+        }
+        return false;
+    }
+
+#if !defined(NDEBUG) || !LOG_DISABLED
+    WTF::CString description() const;
+#endif
+    static size_t sizeInBytes(const Item&);
+
+    template<class Encoder> void encode(Encoder&) const;
+    template<class Decoder> static Optional<Ref<Item>> decode(Decoder&);
+
+private:
+    ItemType m_type;
+};
 
 enum AsTextFlag {
     None                            = 0,
     IncludesPlatformOperations      = 1 << 0,
 };
@@ -77,13 +185,17 @@
 
     String asText(AsTextFlags) const;
 
 #if !defined(NDEBUG) || !LOG_DISABLED
     WTF::CString description() const;
-    void dump() const;
+    WEBCORE_EXPORT void dump() const;
 #endif
 
+    template<class Encoder> void encode(Encoder&) const;
+    template<class Decoder> static Optional<DisplayList> decode(Decoder&);
+
+
 private:
     Item& append(Ref<Item>&& item)
     {
         m_list.append(WTFMove(item));
         return m_list.last().get();
@@ -100,10 +212,42 @@
     Vector<Ref<Item>>& list() { return m_list; }
 
     Vector<Ref<Item>> m_list;
 };
 
+
+template<class Encoder>
+void DisplayList::encode(Encoder& encoder) const
+{
+    encoder << static_cast<uint64_t>(m_list.size());
+
+    for (auto& item : m_list)
+        encoder << item.get();
+}
+
+template<class Decoder>
+Optional<DisplayList> DisplayList::decode(Decoder& decoder)
+{
+    Optional<uint64_t> itemCount;
+    decoder >> itemCount;
+    if (!itemCount)
+        return WTF::nullopt;
+
+    DisplayList displayList;
+
+    for (uint64_t i = 0; i < *itemCount; i++) {
+        auto item = Item::decode(decoder);
+        // FIXME: Once we can decode all types, failing to decode an item should turn into a decode failure.
+        // For now, we just have to ignore it.
+        if (!item)
+            continue;
+        displayList.append(WTFMove(*item));
+    }
+
+    return displayList;
+}
+
 } // DisplayList
 
 WTF::TextStream& operator<<(WTF::TextStream&, const DisplayList::DisplayList&);
 
 } // WebCore
