diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUComputePipeline.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUComputePipeline.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUComputePipeline.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUComputePipeline.cpp
@@ -26,20 +26,56 @@
 #include "config.h"
 #include "WebGPUComputePipeline.h"
 
 #if ENABLE(WEBGPU)
 
+#include "GPUComputePipeline.h"
+#include "GPUErrorScopes.h"
+#include "GPUPipeline.h"
+#include "GPUProgrammableStageDescriptor.h"
+#include "GPUShaderModule.h"
+#include "GPUShaderModuleDescriptor.h"
+#include "WebGPUDevice.h"
+#include "WebGPUShaderModule.h"
+#include <wtf/Optional.h>
+#include <wtf/Ref.h>
+
 namespace WebCore {
 
-Ref<WebGPUComputePipeline> WebGPUComputePipeline::create(RefPtr<GPUComputePipeline>&& pipeline)
+Ref<WebGPUComputePipeline> WebGPUComputePipeline::create(WebGPUDevice& device, RefPtr<GPUComputePipeline>&& pipeline, GPUErrorScopes& errorScopes, WebGPUPipeline::ShaderData&& computeShader)
+{
+    return adoptRef(*new WebGPUComputePipeline(device, WTFMove(pipeline), errorScopes, WTFMove(computeShader)));
+}
+
+WebGPUComputePipeline::WebGPUComputePipeline(WebGPUDevice& device, RefPtr<GPUComputePipeline>&& pipeline, GPUErrorScopes& errorScopes, WebGPUPipeline::ShaderData&& computeShader)
+    : WebGPUPipeline(device, errorScopes)
+    , m_computePipeline(WTFMove(pipeline))
+    , m_computeShader(WTFMove(computeShader))
+{
+}
+
+WebGPUComputePipeline::~WebGPUComputePipeline() = default;
+
+bool WebGPUComputePipeline::cloneShaderModules(const WebGPUDevice& device)
 {
-    return adoptRef(*new WebGPUComputePipeline(WTFMove(pipeline)));
+    if (m_computeShader.module) {
+        const auto& computeSource = m_computeShader.module->source();
+        m_computeShader.module = WebGPUShaderModule::create(GPUShaderModule::tryCreate(device.device(), { computeSource }), computeSource);
+        return true;
+    }
+    return false;
 }
 
-WebGPUComputePipeline::WebGPUComputePipeline(RefPtr<GPUComputePipeline>&& pipeline)
-    : m_computePipeline { WTFMove(pipeline) }
+bool WebGPUComputePipeline::recompile(const WebGPUDevice& device)
 {
+    if (m_computePipeline && m_computeShader.module) {
+        if (auto* gpuComputeShaderModule = m_computeShader.module->module()) {
+            GPUProgrammableStageDescriptor computeStage(makeRef(*gpuComputeShaderModule), { m_computeShader.entryPoint });
+            return m_computePipeline->recompile(device.device(), WTFMove(computeStage));
+        }
+    }
+    return false;
 }
 
 } // namespace WebCore
 
 #endif // ENABLE(WEBGPU)
