diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGMovHintRemovalPhase.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGMovHintRemovalPhase.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGMovHintRemovalPhase.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGMovHintRemovalPhase.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -41,11 +41,11 @@
 namespace JSC { namespace DFG {
 
 namespace {
 
 namespace DFGMovHintRemovalPhaseInternal {
-static const bool verbose = false;
+static constexpr bool verbose = false;
 }
 
 class MovHintRemovalPhase : public Phase {
 public:
     MovHintRemovalPhase(Graph& graph)
@@ -83,11 +83,11 @@
         Epoch currentEpoch = Epoch::first();
 
         m_state.fill(Epoch());
         m_graph.forAllLiveInBytecode(
             block->terminal()->origin.forExit,
-            [&] (VirtualRegister reg) {
+            [&] (Operand reg) {
                 m_state.operand(reg) = currentEpoch;
             });
 
         if (DFGMovHintRemovalPhaseInternal::verbose)
             dataLog("    Locals: ", m_state, "\n");
@@ -97,36 +97,36 @@
 
         for (unsigned nodeIndex = block->size(); nodeIndex--;) {
             Node* node = block->at(nodeIndex);
 
             if (node->op() == MovHint) {
-                Epoch localEpoch = m_state.operand(node->unlinkedLocal());
+                Epoch localEpoch = m_state.operand(node->unlinkedOperand());
                 if (DFGMovHintRemovalPhaseInternal::verbose)
                     dataLog("    At ", node, ": current = ", currentEpoch, ", local = ", localEpoch, "\n");
                 if (!localEpoch || localEpoch == currentEpoch) {
                     node->setOpAndDefaultFlags(ZombieHint);
                     node->child1() = Edge();
                     m_changed = true;
                 }
-                m_state.operand(node->unlinkedLocal()) = Epoch();
+                m_state.operand(node->unlinkedOperand()) = Epoch();
             }
 
             if (mayExit(m_graph, node) != DoesNotExit)
                 currentEpoch.bump();
 
             if (nodeIndex) {
                 forAllKilledOperands(
                     m_graph, block->at(nodeIndex - 1), node,
-                    [&] (VirtualRegister reg) {
+                    [&] (Operand operand) {
                         // This function is a bit sloppy - it might claim to kill a local even if
                         // it's still live after. We need to protect against that.
-                        if (!!m_state.operand(reg))
+                        if (!!m_state.operand(operand))
                             return;
 
                         if (DFGMovHintRemovalPhaseInternal::verbose)
-                            dataLog("    Killed operand at ", node, ": ", reg, "\n");
-                        m_state.operand(reg) = currentEpoch;
+                            dataLog("    Killed operand at ", node, ": ", operand, "\n");
+                        m_state.operand(operand) = currentEpoch;
                     });
             }
         }
     }
 
