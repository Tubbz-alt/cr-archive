diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerJob.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerJob.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerJob.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerJob.cpp
@@ -32,10 +32,11 @@
 #include "JSDOMPromiseDeferred.h"
 #include "MIMETypeRegistry.h"
 #include "ResourceError.h"
 #include "ResourceResponse.h"
 #include "ScriptExecutionContext.h"
+#include "SecurityOrigin.h"
 #include "ServiceWorkerJobData.h"
 #include "ServiceWorkerRegistration.h"
 
 namespace WebCore {
 
@@ -50,10 +51,15 @@
 ServiceWorkerJob::~ServiceWorkerJob()
 {
     ASSERT(m_creationThread.ptr() == &Thread::current());
 }
 
+RefPtr<DeferredPromise> ServiceWorkerJob::takePromise()
+{
+    return WTFMove(m_promise);
+}
+
 void ServiceWorkerJob::failedWithException(const Exception& exception)
 {
     ASSERT(m_creationThread.ptr() == &Thread::current());
     ASSERT(!m_completed);
 
@@ -105,49 +111,49 @@
     options.redirect = FetchOptions::Redirect::Error;
     options.destination = FetchOptions::Destination::Serviceworker;
     m_scriptLoader->loadAsynchronously(context, WTFMove(request), WTFMove(options), ContentSecurityPolicyEnforcement::DoNotEnforce, ServiceWorkersMode::None, *this);
 }
 
-void ServiceWorkerJob::didReceiveResponse(unsigned long, const ResourceResponse& response)
+ResourceError ServiceWorkerJob::validateServiceWorkerResponse(const ServiceWorkerJobData& jobData, const ResourceResponse& response)
 {
-    ASSERT(m_creationThread.ptr() == &Thread::current());
-    ASSERT(!m_completed);
-    ASSERT(m_scriptLoader);
-
     // Extract a MIME type from the response's header list. If this MIME type (ignoring parameters) is not a JavaScript MIME type, then:
-    if (!MIMETypeRegistry::isSupportedJavaScriptMIMEType(response.mimeType())) {
-        m_scriptLoader->cancel();
-        m_scriptLoader = nullptr;
-
-        // Invoke Reject Job Promise with job and "SecurityError" DOMException.
-        Exception exception { SecurityError, "MIME Type is not a JavaScript MIME type"_s };
-        // Asynchronously complete these steps with a network error.
-        ResourceError error { errorDomainWebKitInternal, 0, response.url(), "Unexpected MIME type"_s };
-        m_client.jobFailedLoadingScript(*this, WTFMove(error), WTFMove(exception));
-        return;
-    }
+    if (!MIMETypeRegistry::isSupportedJavaScriptMIMEType(response.mimeType()))
+        return { errorDomainWebKitInternal, 0, response.url(), "MIME Type is not a JavaScript MIME type"_s };
 
     String serviceWorkerAllowed = response.httpHeaderField(HTTPHeaderName::ServiceWorkerAllowed);
     String maxScopeString;
     if (serviceWorkerAllowed.isNull()) {
-        String path = m_jobData.scriptURL.path();
+        String path = jobData.scriptURL.path();
         // Last part of the path is the script's filename.
         maxScopeString = path.substring(0, path.reverseFind('/') + 1);
     } else {
-        auto maxScope = URL(m_jobData.scriptURL, serviceWorkerAllowed);
-        maxScopeString = maxScope.path();
+        auto maxScope = URL(jobData.scriptURL, serviceWorkerAllowed);
+        if (SecurityOrigin::create(maxScope)->isSameOriginAs(SecurityOrigin::create(jobData.scriptURL)))
+            maxScopeString = maxScope.path();
     }
 
-    String scopeString = m_jobData.scopeURL.path();
-    if (scopeString.startsWith(maxScopeString))
+    String scopeString = jobData.scopeURL.path();
+    if (!scopeString.startsWith(maxScopeString))
+        return { errorDomainWebKitInternal, 0, response.url(), "Scope URL should start with the given script URL"_s };
+
+    return { };
+}
+
+void ServiceWorkerJob::didReceiveResponse(unsigned long, const ResourceResponse& response)
+{
+    ASSERT(m_creationThread.ptr() == &Thread::current());
+    ASSERT(!m_completed);
+    ASSERT(m_scriptLoader);
+
+    auto error = validateServiceWorkerResponse(m_jobData, response);
+    if (error.isNull())
         return;
 
     m_scriptLoader->cancel();
     m_scriptLoader = nullptr;
 
-    Exception exception { SecurityError, "Scope URL should start with the given script URL"_s };
-    ResourceError error { errorDomainWebKitInternal, 0, response.url(), "Scope URL should start with the given script URL"_s };
+    Exception exception { SecurityError, error.localizedDescription() };
     m_client.jobFailedLoadingScript(*this, WTFMove(error), WTFMove(exception));
 }
 
 void ServiceWorkerJob::notifyFinished()
 {
