diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/debugger/DebuggerScope.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/debugger/DebuggerScope.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/debugger/DebuggerScope.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/debugger/DebuggerScope.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2008-2009, 2014, 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -33,31 +33,36 @@
 class DebuggerCallFrame;
 class JSScope;
 
 class DebuggerScope final : public JSNonFinalObject {
 public:
-    typedef JSNonFinalObject Base;
-    static const unsigned StructureFlags = Base::StructureFlags | OverridesGetOwnPropertySlot | OverridesGetPropertyNames;
+    using Base = JSNonFinalObject;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | OverridesGetOwnPropertySlot | OverridesGetPropertyNames;
+
+    template<typename CellType, SubspaceAccess mode>
+    static IsoSubspace* subspaceFor(VM& vm)
+    {
+        return vm.debuggerScopeSpace<mode>();
+    }
 
     JS_EXPORT_PRIVATE static DebuggerScope* create(VM& vm, JSScope* scope);
 
     static void visitChildren(JSCell*, SlotVisitor&);
     static String className(const JSObject*, VM&);
-    static String toStringName(const JSObject*, ExecState*);
-    static bool getOwnPropertySlot(JSObject*, ExecState*, PropertyName, PropertySlot&);
-    static bool put(JSCell*, ExecState*, PropertyName, JSValue, PutPropertySlot&);
-    static bool deleteProperty(JSCell*, ExecState*, PropertyName);
-    static void getOwnPropertyNames(JSObject*, ExecState*, PropertyNameArray&, EnumerationMode);
-    static bool defineOwnProperty(JSObject*, ExecState*, PropertyName, const PropertyDescriptor&, bool shouldThrow);
+    static String toStringName(const JSObject*, JSGlobalObject*);
+    static bool getOwnPropertySlot(JSObject*, JSGlobalObject*, PropertyName, PropertySlot&);
+    static bool put(JSCell*, JSGlobalObject*, PropertyName, JSValue, PutPropertySlot&);
+    static bool deleteProperty(JSCell*, JSGlobalObject*, PropertyName);
+    static void getOwnPropertyNames(JSObject*, JSGlobalObject*, PropertyNameArray&, EnumerationMode);
+    static bool defineOwnProperty(JSObject*, JSGlobalObject*, PropertyName, const PropertyDescriptor&, bool shouldThrow);
 
     DECLARE_EXPORT_INFO;
 
     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject)
     {
         return Structure::create(vm, globalObject, jsNull(), TypeInfo(ObjectType, StructureFlags), info());
     }
-
     class iterator {
     public:
         iterator(DebuggerScope* node)
             : m_node(node)
         {
@@ -90,11 +95,11 @@
     bool isNestedLexicalScope() const;
 
     String name() const;
     DebuggerLocation location() const;
 
-    JSValue caughtValue(ExecState*) const;
+    JSValue caughtValue(JSGlobalObject*) const;
 
 private:
     DebuggerScope(VM&, Structure*, JSScope*);
     void finishCreation(VM&);
 
