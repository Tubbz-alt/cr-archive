diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCache.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCache.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCache.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCache.h
@@ -24,10 +24,11 @@
  */
 
 #pragma once
 
 #include <wtf/HashMap.h>
+#include <wtf/WeakPtr.h>
 #include <wtf/text/StringHash.h>
 
 namespace WebCore {
 
 class ApplicationCacheGroup;
@@ -43,14 +44,14 @@
     ~ApplicationCache();
 
     void addResource(Ref<ApplicationCacheResource>&&);
 
     void setManifestResource(Ref<ApplicationCacheResource>&&);
-    ApplicationCacheResource* manifestResource() const { return m_manifest; }
+    ApplicationCacheResource* manifestResource() const;
 
     void setGroup(ApplicationCacheGroup*);
-    ApplicationCacheGroup* group() const { return m_group; }
+    ApplicationCacheGroup* group() const;
 
     bool isComplete();
 
     ApplicationCacheResource* resourceForRequest(const ResourceRequest&);
     ApplicationCacheResource* resourceForURL(const String& url);
@@ -81,13 +82,13 @@
     int64_t estimatedSizeInStorage() const { return m_estimatedSizeInStorage; }
 
 private:
     ApplicationCache();
 
-    ApplicationCacheGroup* m_group { nullptr };
+    WeakPtr<ApplicationCacheGroup> m_group;
     ResourceMap m_resources;
-    ApplicationCacheResource* m_manifest { nullptr };
+    WeakPtr<ApplicationCacheResource> m_manifest;
 
     bool m_allowAllNetworkRequests { false };
     Vector<URL> m_onlineWhitelist;
     FallbackURLVector m_fallbackURLs;
 
