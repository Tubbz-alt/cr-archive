diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTransformDistance.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTransformDistance.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTransformDistance.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTransformDistance.cpp
@@ -25,10 +25,14 @@
 #include "FloatSize.h"
 #include "SVGTransformValue.h"
 
 #include <math.h>
 
+#if PLATFORM(JAVA)
+#include <wtf/java/JavaMath.h>
+#endif
+
 namespace WebCore {
 
 SVGTransformDistance::SVGTransformDistance()
     : m_type(SVGTransformValue::SVG_TRANSFORM_UNKNOWN)
     , m_angle(0)
@@ -55,11 +59,11 @@
     ASSERT(m_type == toSVGTransform.type());
 
     switch (m_type) {
     case SVGTransformValue::SVG_TRANSFORM_MATRIX:
         ASSERT_NOT_REACHED();
-#if ASSERT_DISABLED
+#if !ASSERT_ENABLED
         FALLTHROUGH;
 #endif
     case SVGTransformValue::SVG_TRANSFORM_UNKNOWN:
         break;
     case SVGTransformValue::SVG_TRANSFORM_ROTATE: {
@@ -90,11 +94,11 @@
 SVGTransformDistance SVGTransformDistance::scaledDistance(float scaleFactor) const
 {
     switch (m_type) {
     case SVGTransformValue::SVG_TRANSFORM_MATRIX:
         ASSERT_NOT_REACHED();
-#if ASSERT_DISABLED
+#if !ASSERT_ENABLED
         FALLTHROUGH;
 #endif
     case SVGTransformValue::SVG_TRANSFORM_UNKNOWN:
         return SVGTransformDistance();
     case SVGTransformValue::SVG_TRANSFORM_ROTATE:
@@ -123,11 +127,11 @@
     SVGTransformValue transform;
 
     switch (first.type()) {
     case SVGTransformValue::SVG_TRANSFORM_MATRIX:
         ASSERT_NOT_REACHED();
-#if ASSERT_DISABLED
+#if !ASSERT_ENABLED
         FALLTHROUGH;
 #endif
     case SVGTransformValue::SVG_TRANSFORM_UNKNOWN:
         return { };
     case SVGTransformValue::SVG_TRANSFORM_ROTATE: {
@@ -165,11 +169,11 @@
     SVGTransformValue newTransform(transform);
 
     switch (m_type) {
     case SVGTransformValue::SVG_TRANSFORM_MATRIX:
         ASSERT_NOT_REACHED();
-#if ASSERT_DISABLED
+#if !ASSERT_ENABLED
         FALLTHROUGH;
 #endif
     case SVGTransformValue::SVG_TRANSFORM_UNKNOWN:
         return { };
     case SVGTransformValue::SVG_TRANSFORM_TRANSLATE: {
@@ -209,21 +213,25 @@
 float SVGTransformDistance::distance() const
 {
     switch (m_type) {
     case SVGTransformValue::SVG_TRANSFORM_MATRIX:
         ASSERT_NOT_REACHED();
-#if ASSERT_DISABLED
+#if !ASSERT_ENABLED
         FALLTHROUGH;
 #endif
     case SVGTransformValue::SVG_TRANSFORM_UNKNOWN:
         return 0;
     case SVGTransformValue::SVG_TRANSFORM_ROTATE:
-        return sqrtf(m_angle * m_angle + m_cx * m_cx + m_cy * m_cy);
+#if PLATFORM(JAVA)
+        return javamath::hypot(m_angle, m_cx, m_cy);
+#else
+        return std::hypot(m_angle, m_cx, m_cy);
+#endif
     case SVGTransformValue::SVG_TRANSFORM_SCALE:
-        return static_cast<float>(sqrt(m_transform.a() * m_transform.a() + m_transform.d() * m_transform.d()));
+        return static_cast<float>(std::hypot(m_transform.a(), m_transform.d()));
     case SVGTransformValue::SVG_TRANSFORM_TRANSLATE:
-        return static_cast<float>(sqrt(m_transform.e() * m_transform.e() + m_transform.f() * m_transform.f()));
+        return static_cast<float>(std::hypot(m_transform.e(), m_transform.f()));
     case SVGTransformValue::SVG_TRANSFORM_SKEWX:
     case SVGTransformValue::SVG_TRANSFORM_SKEWY:
         return m_angle;
     }
     ASSERT_NOT_REACHED();
