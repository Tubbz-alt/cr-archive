diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/FullscreenManager.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/FullscreenManager.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/FullscreenManager.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/FullscreenManager.cpp
@@ -28,15 +28,13 @@
 
 #if ENABLE(FULLSCREEN_API)
 
 #include "Chrome.h"
 #include "ChromeClient.h"
-#include "Document.h"
-#include "Element.h"
 #include "EventNames.h"
 #include "Frame.h"
-#include "HTMLFrameOwnerElement.h"
+#include "HTMLIFrameElement.h"
 #include "HTMLMediaElement.h"
 #include "Page.h"
 #include "QualifiedName.h"
 #include "RenderFullScreen.h"
 #include "RenderTreeBuilder.h"
@@ -44,33 +42,17 @@
 
 namespace WebCore {
 
 using namespace HTMLNames;
 
-static bool isAttributeOnAllOwners(const QualifiedName& attribute, const QualifiedName& prefixedAttribute, const HTMLFrameOwnerElement* owner)
-{
-    if (!owner)
-        return true;
-    do {
-        if (!(owner->hasAttribute(attribute) || owner->hasAttribute(prefixedAttribute)))
-            return false;
-    } while ((owner = owner->document().ownerElement()));
-    return true;
-}
-
 FullscreenManager::FullscreenManager(Document& document)
     : m_document { document }
 {
 }
 
 FullscreenManager::~FullscreenManager() = default;
 
-bool FullscreenManager::fullscreenIsAllowedForElement(Element& element) const
-{
-    return isAttributeOnAllOwners(allowfullscreenAttr, webkitallowfullscreenAttr, element.document().ownerElement());
-}
-
 void FullscreenManager::requestFullscreenForElement(Element* element, FullscreenCheckType checkType)
 {
     if (!element)
         element = documentElement();
 
@@ -142,11 +124,11 @@
             return;
         }
 
         // The context object's node document, or an ancestor browsing context's document does not have
         // the fullscreen enabled flag set.
-        if (checkType == EnforceIFrameAllowFullscreenRequirement && !fullscreenIsAllowedForElement(*element)) {
+        if (checkType == EnforceIFrameAllowFullscreenRequirement && !isFeaturePolicyAllowedByDocumentAndAllOwners(FeaturePolicy::Type::Fullscreen, document())) {
             failedPreflights(WTFMove(element));
             return;
         }
 
         // The context object's node document fullscreen element stack is not empty and its top element
@@ -345,11 +327,11 @@
 {
     // 4. The fullscreenEnabled attribute must return true if the context object and all ancestor
     // browsing context's documents have their fullscreen enabled flag set, or false otherwise.
 
     // Top-level browsing contexts are implied to have their allowFullscreen attribute set.
-    return isAttributeOnAllOwners(allowfullscreenAttr, webkitallowfullscreenAttr, document().ownerElement());
+    return isFeaturePolicyAllowedByDocumentAndAllOwners(FeaturePolicy::Type::Fullscreen, document());
 }
 
 static void unwrapFullscreenRenderer(RenderFullScreen* fullscreenRenderer, Element* fullscreenElement)
 {
     if (!fullscreenRenderer)
@@ -361,11 +343,11 @@
         fullscreenElement->parentElement()->invalidateStyleAndRenderersForSubtree();
 }
 
 void FullscreenManager::willEnterFullscreen(Element& element)
 {
-    if (!document().hasLivingRenderTree() || document().pageCacheState() != Document::NotInPageCache)
+    if (!document().hasLivingRenderTree() || document().backForwardCacheState() != Document::NotInBackForwardCache)
         return;
 
     // Protect against being called after the document has been removed from the page.
     if (!page())
         return;
@@ -386,11 +368,11 @@
     ASSERT(&element == m_pendingFullscreenElement);
     m_pendingFullscreenElement = nullptr;
     m_fullscreenElement = &element;
 
 #if USE(NATIVE_FULLSCREEN_VIDEO)
-    if (element.isMediaElement())
+    if (is<HTMLMediaElement>(element))
         return;
 #endif
 
     // Create a placeholder block for a the full-screen element, to keep the page from reflowing
     // when the element is removed from the normal flow. Only do this for a RenderBox, as only
@@ -415,11 +397,11 @@
 void FullscreenManager::didEnterFullscreen()
 {
     if (!m_fullscreenElement)
         return;
 
-    if (!hasLivingRenderTree() || pageCacheState() != Document::NotInPageCache)
+    if (!hasLivingRenderTree() || backForwardCacheState() != Document::NotInBackForwardCache)
         return;
 
     m_fullscreenElement->didBecomeFullscreenElement();
 }
 
@@ -427,11 +409,11 @@
 {
     auto fullscreenElement = fullscreenOrPendingElement();
     if (!fullscreenElement)
         return;
 
-    if (!hasLivingRenderTree() || pageCacheState() != Document::NotInPageCache)
+    if (!hasLivingRenderTree() || backForwardCacheState() != Document::NotInBackForwardCache)
         return;
 
     fullscreenElement->willStopBeingFullscreenElement();
 }
 
@@ -439,11 +421,11 @@
 {
     auto fullscreenElement = fullscreenOrPendingElement();
     if (!fullscreenElement)
         return;
 
-    if (!hasLivingRenderTree() || pageCacheState() != Document::NotInPageCache)
+    if (!hasLivingRenderTree() || backForwardCacheState() != Document::NotInBackForwardCache)
         return;
     fullscreenElement->setContainsFullScreenElementOnAncestorsCrossingFrameBoundaries(false);
 
     m_areKeysEnabledInFullscreen = false;
 
