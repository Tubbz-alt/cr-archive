diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsTypes.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsTypes.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsTypes.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsTypes.h
@@ -24,36 +24,37 @@
  */
 
 #pragma once
 
 #include "WindRule.h"
+#include <wtf/EnumTraits.h>
 #include <wtf/Forward.h>
 
 namespace WTF {
 class TextStream;
 }
 
 namespace WebCore {
 
-enum CompositeOperator {
-    CompositeClear,
-    CompositeCopy,
-    CompositeSourceOver,
-    CompositeSourceIn,
-    CompositeSourceOut,
-    CompositeSourceAtop,
-    CompositeDestinationOver,
-    CompositeDestinationIn,
-    CompositeDestinationOut,
-    CompositeDestinationAtop,
-    CompositeXOR,
-    CompositePlusDarker,
-    CompositePlusLighter,
-    CompositeDifference
+enum class CompositeOperator : uint8_t {
+    Clear,
+    Copy,
+    SourceOver,
+    SourceIn,
+    SourceOut,
+    SourceAtop,
+    DestinationOver,
+    DestinationIn,
+    DestinationOut,
+    DestinationAtop,
+    XOR,
+    PlusDarker,
+    PlusLighter,
+    Difference
 };
 
-enum class BlendMode {
+enum class BlendMode : uint8_t {
     Normal = 1, // Start with 1 to match SVG's blendmode enumeration.
     Multiply,
     Screen,
     Darken,
     Lighten,
@@ -76,16 +77,16 @@
     SpreadMethodPad,
     SpreadMethodReflect,
     SpreadMethodRepeat
 };
 
-enum InterpolationQuality {
-    InterpolationDefault,
-    InterpolationNone,
-    InterpolationLow,
-    InterpolationMedium,
-    InterpolationHigh
+enum class InterpolationQuality : uint8_t {
+    Default,
+    DoNotInterpolate,
+    Low,
+    Medium,
+    High
 };
 
 enum LineCap {
     ButtCap,
     RoundCap,
@@ -119,30 +120,94 @@
     LeftTextAlign,
     CenterTextAlign,
     RightTextAlign
 };
 
-enum RenderingMode {
-    Unaccelerated,
-    UnacceleratedNonPlatformBuffer, // Use plain memory allocation rather than platform API to allocate backing store.
-    Accelerated
-};
-
-enum class AlphaPremultiplication {
-    Premultiplied,
-    Unpremultiplied
-};
-
-String compositeOperatorName(CompositeOperator, BlendMode);
-String blendModeName(BlendMode);
-bool parseBlendMode(const String&, BlendMode&);
-bool parseCompositeAndBlendOperator(const String&, CompositeOperator&, BlendMode&);
+String compositeOperatorName(WebCore::CompositeOperator, WebCore::BlendMode);
+String blendModeName(WebCore::BlendMode);
+bool parseBlendMode(const String&, WebCore::BlendMode&);
+bool parseCompositeAndBlendOperator(const String&, WebCore::CompositeOperator&, WebCore::BlendMode&);
 
-WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, BlendMode);
-WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, CompositeOperator);
+WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, WebCore::BlendMode);
+WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, WebCore::CompositeOperator);
 WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, WindRule);
 WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, LineCap);
 WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, LineJoin);
-WEBCORE_EXPORT WTF::TextStream& operator<<(WTF::TextStream&, AlphaPremultiplication);
 
 } // namespace WebCore
 
+namespace WTF {
+
+template<> struct EnumTraits<WebCore::CompositeOperator> {
+    using values = EnumValues<
+    WebCore::CompositeOperator,
+    WebCore::CompositeOperator::Clear,
+    WebCore::CompositeOperator::Copy,
+    WebCore::CompositeOperator::SourceOver,
+    WebCore::CompositeOperator::SourceIn,
+    WebCore::CompositeOperator::SourceOut,
+    WebCore::CompositeOperator::SourceAtop,
+    WebCore::CompositeOperator::DestinationOver,
+    WebCore::CompositeOperator::DestinationIn,
+    WebCore::CompositeOperator::DestinationOut,
+    WebCore::CompositeOperator::DestinationAtop,
+    WebCore::CompositeOperator::XOR,
+    WebCore::CompositeOperator::PlusDarker,
+    WebCore::CompositeOperator::PlusLighter,
+    WebCore::CompositeOperator::Difference
+    >;
+};
+
+template<> struct EnumTraits<WebCore::BlendMode> {
+    using values = EnumValues<
+    WebCore::BlendMode,
+    WebCore::BlendMode::Normal,
+    WebCore::BlendMode::Multiply,
+    WebCore::BlendMode::Screen,
+    WebCore::BlendMode::Darken,
+    WebCore::BlendMode::Lighten,
+    WebCore::BlendMode::Overlay,
+    WebCore::BlendMode::ColorDodge,
+    WebCore::BlendMode::ColorBurn,
+    WebCore::BlendMode::HardLight,
+    WebCore::BlendMode::SoftLight,
+    WebCore::BlendMode::Difference,
+    WebCore::BlendMode::Exclusion,
+    WebCore::BlendMode::Hue,
+    WebCore::BlendMode::Saturation,
+    WebCore::BlendMode::Color,
+    WebCore::BlendMode::Luminosity,
+    WebCore::BlendMode::PlusDarker,
+    WebCore::BlendMode::PlusLighter
+    >;
+};
+
+template<> struct EnumTraits<WebCore::LineCap> {
+    using values = EnumValues<
+    WebCore::LineCap,
+    WebCore::LineCap::ButtCap,
+    WebCore::LineCap::RoundCap,
+    WebCore::LineCap::SquareCap
+    >;
+};
+
+template<> struct EnumTraits<WebCore::LineJoin> {
+    using values = EnumValues<
+    WebCore::LineJoin,
+    WebCore::LineJoin::MiterJoin,
+    WebCore::LineJoin::RoundJoin,
+    WebCore::LineJoin::BevelJoin
+    >;
+};
+
+template<> struct EnumTraits<WebCore::InterpolationQuality> {
+    using values = EnumValues<
+    WebCore::InterpolationQuality,
+    WebCore::InterpolationQuality::Default,
+    WebCore::InterpolationQuality::DoNotInterpolate,
+    WebCore::InterpolationQuality::Low,
+    WebCore::InterpolationQuality::Medium,
+    WebCore::InterpolationQuality::High
+    >;
+};
+
+} // namespace WTF
