diff a/modules/javafx.web/src/main/native/Source/WebCore/testing/ServiceWorkerInternals.cpp b/modules/javafx.web/src/main/native/Source/WebCore/testing/ServiceWorkerInternals.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/testing/ServiceWorkerInternals.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/testing/ServiceWorkerInternals.cpp
@@ -29,10 +29,11 @@
 #if ENABLE(SERVICE_WORKER)
 
 #include "FetchEvent.h"
 #include "JSFetchResponse.h"
 #include "SWContextManager.h"
+#include <wtf/ProcessID.h>
 
 namespace WebCore {
 
 ServiceWorkerInternals::ServiceWorkerInternals(ServiceWorkerIdentifier identifier)
     : m_identifier(identifier)
@@ -66,18 +67,18 @@
     return event;
 }
 
 Ref<FetchResponse> ServiceWorkerInternals::createOpaqueWithBlobBodyResponse(ScriptExecutionContext& context)
 {
-    auto blob = Blob::create(context.sessionID());
+    auto blob = Blob::create();
     auto formData = FormData::create();
     formData->appendBlob(blob->url());
 
     ResourceResponse response;
     response.setType(ResourceResponse::Type::Cors);
     response.setTainting(ResourceResponse::Tainting::Opaque);
-    auto fetchResponse = FetchResponse::create(context, FetchBody::fromFormData(context.sessionID(), formData), FetchHeaders::Guard::Response, WTFMove(response));
+    auto fetchResponse = FetchResponse::create(context, FetchBody::fromFormData(formData), FetchHeaders::Guard::Response, WTFMove(response));
     fetchResponse->initializeOpaqueLoadIdentifierForTesting();
     return fetchResponse;
 }
 
 Vector<String> ServiceWorkerInternals::fetchResponseHeaderList(FetchResponse& response)
@@ -100,8 +101,13 @@
 {
     auto* connection = SWContextManager::singleton().connection();
     return connection ? connection->isThrottleable() : true;
 }
 
+int ServiceWorkerInternals::processIdentifier() const
+{
+    return getCurrentProcessID();
+}
+
 } // namespace WebCore
 
 #endif
