diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUComputePipeline.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUComputePipeline.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUComputePipeline.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPUComputePipeline.h
@@ -25,40 +25,54 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
-#include "GPUObjectBase.h"
+#include "GPUPipeline.h"
+#include "GPUProgrammableStageDescriptor.h"
 #include "WHLSLPrepare.h"
 #include <wtf/RefCounted.h>
 #include <wtf/RefPtr.h>
 #include <wtf/RetainPtr.h>
 
 OBJC_PROTOCOL(MTLComputePipelineState);
 
 namespace WebCore {
 
 class GPUDevice;
+class GPUErrorScopes;
+class GPUPipelineLayout;
 
 struct GPUComputePipelineDescriptor;
 
 using PlatformComputePipeline = MTLComputePipelineState;
 using PlatformComputePipelineSmartPtr = RetainPtr<MTLComputePipelineState>;
 
-class GPUComputePipeline : public GPUObjectBase {
+class GPUComputePipeline final : public GPUPipeline {
 public:
+    virtual ~GPUComputePipeline();
+
     static RefPtr<GPUComputePipeline> tryCreate(const GPUDevice&, const GPUComputePipelineDescriptor&, GPUErrorScopes&);
 
+    bool isComputePipeline() const { return true; }
+
+    bool recompile(const GPUDevice&, GPUProgrammableStageDescriptor&& computeStage);
+
     const PlatformComputePipeline* platformComputePipeline() const { return m_platformComputePipeline.get(); }
 
     WHLSL::ComputeDimensions computeDimensions() const { return m_computeDimensions; }
 
 private:
-    GPUComputePipeline(PlatformComputePipelineSmartPtr&&, WHLSL::ComputeDimensions, GPUErrorScopes&);
+    GPUComputePipeline(PlatformComputePipelineSmartPtr&&, WHLSL::ComputeDimensions, const RefPtr<GPUPipelineLayout>&);
 
     PlatformComputePipelineSmartPtr m_platformComputePipeline;
     WHLSL::ComputeDimensions m_computeDimensions { 0, 0, 0 };
+
+    // Preserved for Web Inspector recompilation.
+    RefPtr<GPUPipelineLayout> m_layout;
 };
 
 } // namespace WebCore
 
+SPECIALIZE_TYPE_TRAITS_GPUPIPELINE(WebCore::GPUComputePipeline, isComputePipeline())
+
 #endif // ENABLE(WEBGPU)
