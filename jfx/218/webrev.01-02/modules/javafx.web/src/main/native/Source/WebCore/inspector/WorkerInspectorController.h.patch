diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/WorkerInspectorController.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/WorkerInspectorController.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/WorkerInspectorController.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/WorkerInspectorController.h
@@ -47,22 +47,22 @@
 class WorkerInspectorController final : public Inspector::InspectorEnvironment {
     WTF_MAKE_NONCOPYABLE(WorkerInspectorController);
     WTF_MAKE_FAST_ALLOCATED;
 public:
     explicit WorkerInspectorController(WorkerGlobalScope&);
-    virtual ~WorkerInspectorController();
+    ~WorkerInspectorController() override;
 
     void workerTerminating();
 
     void connectFrontend();
     void disconnectFrontend(Inspector::DisconnectReason);
 
     void dispatchMessageFromFrontend(const String&);
 
     // InspectorEnvironment
     bool developerExtrasEnabled() const override { return true; }
-    bool canAccessInspectedScriptState(JSC::ExecState*) const override { return true; }
+    bool canAccessInspectedScriptState(JSC::JSGlobalObject*) const override { return true; }
     Inspector::InspectorFunctionCallHandler functionCallHandler() const override;
     Inspector::InspectorEvaluateHandler evaluateHandler() const override;
     void frontendInitialized() override { }
     Ref<WTF::Stopwatch> executionStopwatch() override { return m_executionStopwatch.copyRef(); }
     WorkerScriptDebugServer& scriptDebugServer() override { return m_scriptDebugServer; }
