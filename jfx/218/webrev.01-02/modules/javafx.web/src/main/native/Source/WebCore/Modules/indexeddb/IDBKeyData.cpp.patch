diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBKeyData.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBKeyData.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBKeyData.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBKeyData.cpp
@@ -470,8 +470,39 @@
         return WTF::get<Vector<IDBKeyData>>(m_value) == WTF::get<Vector<IDBKeyData>>(other.m_value);
     }
     RELEASE_ASSERT_NOT_REACHED();
 }
 
+size_t IDBKeyData::size() const
+{
+    if (m_isNull)
+        return 0;
+
+    switch (m_type) {
+    case IndexedDB::KeyType::Invalid:
+        return 0;
+    case IndexedDB::KeyType::Array: {
+        Vector<RefPtr<IDBKey>> array;
+        size_t totalSize = 0;
+        for (auto& keyData : WTF::get<Vector<IDBKeyData>>(m_value))
+            totalSize += keyData.size();
+        return totalSize;
+    }
+    case IndexedDB::KeyType::Binary:
+        return WTF::get<ThreadSafeDataBuffer>(m_value).size();
+    case IndexedDB::KeyType::String:
+        return WTF::get<String>(m_value).sizeInBytes();
+    case IndexedDB::KeyType::Date:
+    case IndexedDB::KeyType::Number:
+        return sizeof(double);
+    case IndexedDB::KeyType::Max:
+    case IndexedDB::KeyType::Min:
+        return 0;
+    }
+
+    ASSERT_NOT_REACHED();
+    return 0;
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(INDEXED_DATABASE)
