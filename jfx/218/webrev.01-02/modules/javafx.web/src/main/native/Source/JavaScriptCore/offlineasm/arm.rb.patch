diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/arm.rb b/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/arm.rb
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/arm.rb
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/arm.rb
@@ -35,11 +35,11 @@
 #  x3 => t3, a3, r3
 #  x6 =>            (callee-save scratch)
 #  x7 => cfr
 #  x8 => t4         (callee-save)
 #  x9 => t5         (callee-save)
-# x10 =>            (callee-save scratch)
+# x10 => csr1       (callee-save, PB)
 # x11 => cfr, csr0  (callee-save, metadataTable)
 # x12 =>            (callee-save scratch)
 #  lr => lr
 #  sp => sp
 #  pc => pc
@@ -67,11 +67,11 @@
     def armOperand
         @name
     end
 end
 
-ARM_EXTRA_GPRS = [SpecialRegister.new("r6"), SpecialRegister.new("r10"), SpecialRegister.new("r12")]
+ARM_EXTRA_GPRS = [SpecialRegister.new("r6"), SpecialRegister.new("r4"), SpecialRegister.new("r12")]
 ARM_EXTRA_FPRS = [SpecialRegister.new("d7")]
 ARM_SCRATCH_FPR = SpecialRegister.new("d6")
 OS_DARWIN = ((RUBY_PLATFORM =~ /darwin/i) != nil)
 
 def armMoveImmediate(value, register)
@@ -100,19 +100,21 @@
         when "t2", "a2"
             "r2"
         when "a3"
             "r3"
         when "t3"
-            "r4"
+            "r3"
         when "t4"
             "r8"
         when "t5"
             "r9"
         when "cfr"
             "r7"
         when "csr0"
             "r11"
+        when "csr1"
+            "r10"
         when "lr"
             "lr"
         when "sp"
             "sp"
         when "pc"
@@ -297,12 +299,12 @@
             else
                 false
             end
         }
         result = riscLowerMalformedAddressesDouble(result)
-        result = riscLowerMisplacedImmediates(result, ["storeb", "storei", "storep", "storeq"])
-        result = riscLowerMalformedImmediates(result, 0..0xff)
+        result = riscLowerMisplacedImmediates(result, ["storeb", "storeh", "storei", "storep", "storeq"])
+        result = riscLowerMalformedImmediates(result, 0..0xff, 0..0x0ff)
         result = riscLowerMisplacedAddresses(result)
         result = riscLowerRegisterReuse(result)
         result = assignRegistersToTemporaries(result, :gpr, ARM_EXTRA_GPRS)
         result = assignRegistersToTemporaries(result, :fpr, ARM_EXTRA_FPRS)
         result = armLowerStackPointerInComparison(result)
@@ -416,11 +418,11 @@
                     $asm.puts "add#{suffix} #{armFlippedOperands(operands)}"
                 end
             end
         when "andi", "andp"
             emitArmCompact("ands", "and", operands)
-        when "ori", "orp"
+        when "ori", "orp", "orh"
             emitArmCompact("orrs", "orr", operands)
         when "oris"
             emitArmCompact("orrs", "orrs", operands)
         when "xori", "xorp"
             emitArmCompact("eors", "eor", operands)
@@ -466,11 +468,11 @@
             emitArm("vsub.f64", operands)
         when "muld"
             emitArm("vmul.f64", operands)
         when "sqrtd"
             $asm.puts "vsqrt.f64 #{armFlippedOperands(operands)}"
-        when "ci2d"
+        when "ci2ds"
             $asm.puts "vmov #{operands[1].armSingle}, #{operands[0].armOperand}"
             $asm.puts "vcvt.f64.s32 #{operands[1].armOperand}, #{operands[1].armSingle}"
         when "bdeq"
             emitArmDoubleBranch("beq", operands)
         when "bdneq"
