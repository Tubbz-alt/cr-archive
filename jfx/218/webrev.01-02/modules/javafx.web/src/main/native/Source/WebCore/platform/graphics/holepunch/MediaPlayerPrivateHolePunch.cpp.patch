diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/holepunch/MediaPlayerPrivateHolePunch.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/holepunch/MediaPlayerPrivateHolePunch.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/holepunch/MediaPlayerPrivateHolePunch.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/holepunch/MediaPlayerPrivateHolePunch.cpp
@@ -129,22 +129,41 @@
     auto containerType = parameters.type.containerType();
 
     // Spec says we should not return "probably" if the codecs string is empty.
     if (!containerType.isEmpty() && mimeTypeCache().contains(containerType)) {
         if (parameters.type.codecs().isEmpty())
-            return MediaPlayer::MayBeSupported;
+            return MediaPlayer::SupportsType::MayBeSupported;
 
-        return MediaPlayer::IsSupported;
+        return MediaPlayer::SupportsType::IsSupported;
     }
 
-    return MediaPlayer::IsNotSupported;
+    return MediaPlayer::SupportsType::IsNotSupported;
 }
 
+class MediaPlayerFactoryHolePunch final : public MediaPlayerFactory {
+private:
+    MediaPlayerEnums::MediaEngineIdentifier identifier() const final { return MediaPlayerEnums::MediaEngineIdentifier::HolePunch; };
+
+    std::unique_ptr<MediaPlayerPrivateInterface> createMediaEnginePlayer(MediaPlayer* player) const final
+    {
+        return makeUnique<MediaPlayerPrivateHolePunch>(player);
+    }
+
+    void getSupportedTypes(HashSet<String, ASCIICaseInsensitiveHash>& types) const final
+    {
+        return MediaPlayerPrivateHolePunch::getSupportedTypes(types);
+    }
+
+    MediaPlayer::SupportsType supportsTypeAndCodecs(const MediaEngineSupportParameters& parameters) const final
+    {
+        return MediaPlayerPrivateHolePunch::supportsType(parameters);
+    }
+};
+
 void MediaPlayerPrivateHolePunch::registerMediaEngine(MediaEngineRegistrar registrar)
 {
-    registrar([](MediaPlayer* player) { return makeUnique<MediaPlayerPrivateHolePunch>(player); },
-        getSupportedTypes, supportsType, nullptr, nullptr, nullptr, nullptr);
+    registrar(makeUnique<MediaPlayerFactoryHolePunch>());
 }
 
 void MediaPlayerPrivateHolePunch::notifyReadyState()
 {
     // Notify the ready state so the GraphicsLayer gets created.
