diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InlineCallFrame.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InlineCallFrame.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InlineCallFrame.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InlineCallFrame.cpp
@@ -37,13 +37,13 @@
     if (calleeRecovery.isConstant())
         return jsCast<JSFunction*>(calleeRecovery.constant());
     return nullptr;
 }
 
-JSFunction* InlineCallFrame::calleeForCallFrame(ExecState* exec) const
+JSFunction* InlineCallFrame::calleeForCallFrame(CallFrame* callFrame) const
 {
-    return jsCast<JSFunction*>(calleeRecovery.recover(exec));
+    return jsCast<JSFunction*>(calleeRecovery.recover(callFrame));
 }
 
 CodeBlockHash InlineCallFrame::hash() const
 {
     return baselineCodeBlock->hash();
@@ -67,11 +67,11 @@
 void InlineCallFrame::dumpInContext(PrintStream& out, DumpContext* context) const
 {
     out.print(briefFunctionInformation(), ":<", RawPointer(baselineCodeBlock.get()));
     if (isStrictMode())
         out.print(" (StrictMode)");
-    out.print(", bc#", directCaller.bytecodeIndex(), ", ", static_cast<Kind>(kind));
+    out.print(", ", directCaller.bytecodeIndex(), ", ", static_cast<Kind>(kind));
     if (isClosureCall)
         out.print(", closure call");
     else
         out.print(", known callee: ", inContext(calleeRecovery.constant(), context));
     out.print(", numArgs+this = ", argumentCountIncludingThis);
