diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionRareData.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionRareData.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionRareData.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/FunctionRareData.cpp
@@ -31,13 +31,13 @@
 
 namespace JSC {
 
 const ClassInfo FunctionRareData::s_info = { "FunctionRareData", nullptr, nullptr, nullptr, CREATE_METHOD_TABLE(FunctionRareData) };
 
-FunctionRareData* FunctionRareData::create(VM& vm)
+FunctionRareData* FunctionRareData::create(VM& vm, ExecutableBase* executable)
 {
-    FunctionRareData* rareData = new (NotNull, allocateCell<FunctionRareData>(vm.heap)) FunctionRareData(vm);
+    FunctionRareData* rareData = new (NotNull, allocateCell<FunctionRareData>(vm.heap)) FunctionRareData(vm, executable);
     rareData->finishCreation(vm);
     return rareData;
 }
 
 void FunctionRareData::destroy(JSCell* cell)
@@ -58,39 +58,43 @@
     Base::visitChildren(cell, visitor);
 
     rareData->m_objectAllocationProfile.visitAggregate(visitor);
     rareData->m_internalFunctionAllocationProfile.visitAggregate(visitor);
     visitor.append(rareData->m_boundFunctionStructure);
+    visitor.append(rareData->m_executable);
 }
 
-FunctionRareData::FunctionRareData(VM& vm)
+FunctionRareData::FunctionRareData(VM& vm, ExecutableBase* executable)
     : Base(vm, vm.functionRareDataStructure.get())
     , m_objectAllocationProfile()
     // We initialize blind so that changes to the prototype after function creation but before
     // the first allocation don't disable optimizations. This isn't super important, since the
     // function is unlikely to allocate a rare data until the first allocation anyway.
-    , m_objectAllocationProfileWatchpoint(ClearWatchpoint)
+    , m_allocationProfileWatchpointSet(ClearWatchpoint)
+    , m_executable(vm, this, executable)
+    , m_hasReifiedLength(false)
+    , m_hasReifiedName(false)
+    , m_hasModifiedLength(false)
+    , m_hasModifiedName(false)
 {
 }
 
 FunctionRareData::~FunctionRareData()
 {
 }
 
 void FunctionRareData::initializeObjectAllocationProfile(VM& vm, JSGlobalObject* globalObject, JSObject* prototype, size_t inlineCapacity, JSFunction* constructor)
 {
-    if (m_objectAllocationProfileWatchpoint.isStillValid())
-        m_objectAllocationProfileWatchpoint.startWatching();
-
+    initializeAllocationProfileWatchpointSet();
     m_objectAllocationProfile.initializeProfile(vm, globalObject, this, prototype, inlineCapacity, constructor, this);
 }
 
 void FunctionRareData::clear(const char* reason)
 {
     m_objectAllocationProfile.clear();
     m_internalFunctionAllocationProfile.clear();
-    m_objectAllocationProfileWatchpoint.fireAll(vm(), reason);
+    m_allocationProfileWatchpointSet.fireAll(vm(), reason);
 }
 
 void FunctionRareData::AllocationProfileClearingWatchpoint::fireInternal(VM&, const FireDetail&)
 {
     m_rareData->clear("AllocationProfileClearingWatchpoint fired.");
