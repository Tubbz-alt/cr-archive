diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/DFGExitProfile.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/DFGExitProfile.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/DFGExitProfile.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/DFGExitProfile.cpp
@@ -33,11 +33,11 @@
 
 namespace JSC { namespace DFG {
 
 void FrequentExitSite::dump(PrintStream& out) const
 {
-    out.print("bc#", m_bytecodeOffset, ": ", m_kind, "/", m_jitType, "/", m_inlineKind);
+    out.print(m_bytecodeIndex, ": ", m_kind, "/", m_jitType, "/", m_inlineKind);
 }
 
 ExitProfile::ExitProfile() { }
 ExitProfile::~ExitProfile() { }
 
@@ -48,12 +48,11 @@
 
     ConcurrentJSLocker locker(owner->unlinkedCodeBlock()->m_lock);
 
     CODEBLOCK_LOG_EVENT(owner, "frequentExit", (site));
 
-    if (Options::verboseExitProfile())
-        dataLog(pointerDump(owner), ": Adding exit site: ", site, "\n");
+    dataLogLnIf(Options::verboseExitProfile(), pointerDump(owner), ": Adding exit site: ", site);
 
     ExitProfile& profile = owner->unlinkedCodeBlock()->exitProfile();
 
     // If we've never seen any frequent exits then create the list and put this site
     // into it.
@@ -73,19 +72,19 @@
 
     profile.m_frequentExitSites->append(site);
     return true;
 }
 
-Vector<FrequentExitSite> ExitProfile::exitSitesFor(unsigned bytecodeIndex)
+Vector<FrequentExitSite> ExitProfile::exitSitesFor(BytecodeIndex bytecodeIndex)
 {
     Vector<FrequentExitSite> result;
 
     if (!m_frequentExitSites)
         return result;
 
     for (unsigned i = 0; i < m_frequentExitSites->size(); ++i) {
-        if (m_frequentExitSites->at(i).bytecodeOffset() == bytecodeIndex)
+        if (m_frequentExitSites->at(i).bytecodeIndex() == bytecodeIndex)
             result.append(m_frequentExitSites->at(i));
     }
 
     return result;
 }
