diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/js/JSWebAssemblyLinkError.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/js/JSWebAssemblyLinkError.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/js/JSWebAssemblyLinkError.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/js/JSWebAssemblyLinkError.h
@@ -33,22 +33,23 @@
 
 class JSWebAssemblyLinkError final : public ErrorInstance {
 public:
     typedef ErrorInstance Base;
 
-    static JSWebAssemblyLinkError* create(ExecState*, VM&, Structure*, const String&);
-    static JSWebAssemblyLinkError* create(ExecState* exec, VM& vm, Structure* structure, JSValue message)
+    static JSWebAssemblyLinkError* create(JSGlobalObject*, VM&, Structure*, const String&);
+    static JSWebAssemblyLinkError* create(JSGlobalObject* globalObject, VM& vm, Structure* structure, JSValue message)
     {
-        return create(exec, vm, structure, message.isUndefined() ? String() : message.toWTFString(exec));
+        return create(globalObject, vm, structure, message.isUndefined() ? String() : message.toWTFString(globalObject));
     }
 
     DECLARE_INFO;
 
 protected:
     JSWebAssemblyLinkError(VM&, Structure*);
 };
+STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(JSWebAssemblyLinkError, ErrorInstance);
 
-JSObject* createJSWebAssemblyLinkError(ExecState*, VM&, const String&);
+JSObject* createJSWebAssemblyLinkError(JSGlobalObject*, VM&, const String&);
 
 } // namespace JSC
 
 #endif // ENABLE(WEBASSEMBLY)
