diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/WeakObjectRefPrototype.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/WeakObjectRefPrototype.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/WeakObjectRefPrototype.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/WeakObjectRefPrototype.cpp
@@ -32,45 +32,45 @@
 
 namespace JSC {
 
 const ClassInfo WeakObjectRefPrototype::s_info = { "WeakRef", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(WeakObjectRefPrototype) };
 
-static EncodedJSValue JSC_HOST_CALL protoFuncWeakRefDeref(ExecState*);
+static EncodedJSValue JSC_HOST_CALL protoFuncWeakRefDeref(JSGlobalObject*, CallFrame*);
 
 void WeakObjectRefPrototype::finishCreation(VM& vm, JSGlobalObject* globalObject)
 {
     Base::finishCreation(vm);
     ASSERT(inherits(vm, info()));
 
     // FIXME: It wouldn't be hard to make this an intrinsic.
     JSC_NATIVE_FUNCTION_WITHOUT_TRANSITION(vm.propertyNames->deref, protoFuncWeakRefDeref, static_cast<unsigned>(PropertyAttribute::DontEnum), 0);
 
-    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsString(vm, "WeakRef"), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
+    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsNontrivialString(vm, "WeakRef"_s), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
 }
 
-ALWAYS_INLINE static JSWeakObjectRef* getWeakRef(CallFrame* callFrame, JSValue value)
+ALWAYS_INLINE static JSWeakObjectRef* getWeakRef(JSGlobalObject* globalObject, JSValue value)
 {
-    VM& vm = callFrame->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     if (UNLIKELY(!value.isObject())) {
-        throwTypeError(callFrame, scope, "Called WeakRef function on non-object"_s);
+        throwTypeError(globalObject, scope, "Called WeakRef function on non-object"_s);
         return nullptr;
     }
 
     auto* ref = jsDynamicCast<JSWeakObjectRef*>(vm, asObject(value));
     if (LIKELY(ref))
         return ref;
 
-    throwTypeError(callFrame, scope, "Called WeakRef function on a non-WeakRef object"_s);
+    throwTypeError(globalObject, scope, "Called WeakRef function on a non-WeakRef object"_s);
     return nullptr;
 }
 
-EncodedJSValue JSC_HOST_CALL protoFuncWeakRefDeref(CallFrame* callFrame)
+EncodedJSValue JSC_HOST_CALL protoFuncWeakRefDeref(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = callFrame->vm();
-    auto* ref = getWeakRef(callFrame, callFrame->thisValue());
+    VM& vm = globalObject->vm();
+    auto* ref = getWeakRef(globalObject, callFrame->thisValue());
     if (!ref)
         return JSValue::encode(jsUndefined());
 
     auto* value = ref->deref(vm);
     return value ? JSValue::encode(value) : JSValue::encode(jsNull());
