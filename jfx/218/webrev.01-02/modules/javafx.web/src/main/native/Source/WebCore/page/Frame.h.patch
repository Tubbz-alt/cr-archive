diff a/modules/javafx.web/src/main/native/Source/WebCore/page/Frame.h b/modules/javafx.web/src/main/native/Source/WebCore/page/Frame.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/Frame.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/Frame.h
@@ -55,14 +55,10 @@
 
 namespace JSC { namespace Yarr {
 class RegularExpression;
 } }
 
-namespace PAL {
-class SessionID;
-}
-
 namespace WebCore {
 
 class CSSAnimationController;
 class Color;
 class DOMWindow;
@@ -119,10 +115,11 @@
     LayerTreeFlagsIncludeAcceleratesDrawing     = 1 << 6,
     LayerTreeFlagsIncludeClipping               = 1 << 7,
     LayerTreeFlagsIncludeBackingStoreAttached   = 1 << 8,
     LayerTreeFlagsIncludeRootLayerProperties    = 1 << 9,
     LayerTreeFlagsIncludeEventRegion            = 1 << 10,
+    LayerTreeFlagsIncludeDeepColor              = 1 << 11,
 };
 typedef unsigned LayerTreeFlags;
 
 // FIXME: Rename Frame to LocalFrame and AbstractFrame to Frame.
 class Frame final : public AbstractFrame {
@@ -223,10 +220,11 @@
     WEBCORE_EXPORT void setViewportArguments(const ViewportArguments&);
 
     WEBCORE_EXPORT Node* deepestNodeAtLocation(const FloatPoint& viewportLocation);
     WEBCORE_EXPORT Node* nodeRespondingToClickEvents(const FloatPoint& viewportLocation, FloatPoint& adjustedViewportLocation, SecurityOrigin* = nullptr);
     WEBCORE_EXPORT Node* nodeRespondingToDoubleClickEvent(const FloatPoint& viewportLocation, FloatPoint& adjustedViewportLocation);
+    WEBCORE_EXPORT Node* nodeRespondingToInteraction(const FloatPoint& viewportLocation, FloatPoint& adjustedViewportLocation);
     WEBCORE_EXPORT Node* nodeRespondingToScrollWheelEvents(const FloatPoint& viewportLocation);
     WEBCORE_EXPORT Node* approximateNodeAtViewportLocationLegacy(const FloatPoint& viewportLocation, FloatPoint& adjustedViewportLocation);
 
     WEBCORE_EXPORT NSArray *wordsInCurrentParagraph() const;
     WEBCORE_EXPORT CGRect renderRectForPoint(CGPoint, bool* isReplaced, float* fontSize) const;
@@ -299,12 +297,10 @@
 // ========
 
     void selfOnlyRef();
     void selfOnlyDeref();
 
-    PAL::SessionID sessionID() const;
-
 private:
     friend class NavigationDisabler;
 
     Frame(Page&, HTMLFrameOwnerElement*, FrameLoaderClient&);
 
@@ -337,11 +333,14 @@
     RetainPtr<NSArray> m_dataDetectionResults;
 #endif
 #if PLATFORM(IOS_FAMILY)
     void betterApproximateNode(const IntPoint& testPoint, const NodeQualifier&, Node*& best, Node* failedNode, IntPoint& bestPoint, IntRect& bestRect, const IntRect& testRect);
     bool hitTestResultAtViewportLocation(const FloatPoint& viewportLocation, HitTestResult&, IntPoint& center);
-    Node* qualifyingNodeAtViewportLocation(const FloatPoint& viewportLocation, FloatPoint& adjustedViewportLocation, const NodeQualifier&, bool shouldApproximate);
+
+    enum class ShouldApproximate : bool { No, Yes };
+    enum class ShouldFindRootEditableElement : bool { No, Yes };
+    Node* qualifyingNodeAtViewportLocation(const FloatPoint& viewportLocation, FloatPoint& adjustedViewportLocation, const NodeQualifier&, ShouldApproximate, ShouldFindRootEditableElement = ShouldFindRootEditableElement::Yes);
 
     void setTimersPausedInternal(bool);
 
     ViewportArguments m_viewportArguments;
     bool m_selectionChangeCallbacksDisabled { false };
