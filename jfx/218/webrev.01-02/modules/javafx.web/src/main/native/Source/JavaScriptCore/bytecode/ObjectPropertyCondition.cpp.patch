diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ObjectPropertyCondition.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ObjectPropertyCondition.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ObjectPropertyCondition.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ObjectPropertyCondition.cpp
@@ -44,22 +44,16 @@
 void ObjectPropertyCondition::dump(PrintStream& out) const
 {
     dumpInContext(out, nullptr);
 }
 
-bool ObjectPropertyCondition::structureEnsuresValidityAssumingImpurePropertyWatchpoint(
-    Structure* structure) const
-{
-    return m_condition.isStillValidAssumingImpurePropertyWatchpoint(structure);
-}
-
 bool ObjectPropertyCondition::structureEnsuresValidityAssumingImpurePropertyWatchpoint() const
 {
     if (!*this)
         return false;
 
-    return structureEnsuresValidityAssumingImpurePropertyWatchpoint(m_object->structure());
+    return m_condition.isStillValidAssumingImpurePropertyWatchpoint(m_object->structure(), nullptr);
 }
 
 bool ObjectPropertyCondition::validityRequiresImpurePropertyWatchpoint(Structure* structure) const
 {
     return m_condition.validityRequiresImpurePropertyWatchpoint(structure);
@@ -145,14 +139,15 @@
 bool ObjectPropertyCondition::isStillLive(VM& vm) const
 {
     if (!*this)
         return false;
 
-    if (!vm.heap.isMarked(m_object))
-        return false;
-
-    return m_condition.isStillLive(vm);
+    bool isStillLive = true;
+    forEachDependentCell([&](JSCell* cell) {
+        isStillLive &= vm.heap.isMarked(cell);
+    });
+    return isStillLive;
 }
 
 void ObjectPropertyCondition::validateReferences(const TrackedReferences& tracked) const
 {
     if (!*this)
