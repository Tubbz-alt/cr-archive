diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/UniqueIDBDatabaseConnection.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/UniqueIDBDatabaseConnection.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/UniqueIDBDatabaseConnection.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/UniqueIDBDatabaseConnection.cpp
@@ -27,11 +27,10 @@
 #include "UniqueIDBDatabaseConnection.h"
 
 #if ENABLE(INDEXED_DATABASE)
 
 #include "IDBConnectionToClient.h"
-#include "IDBServer.h"
 #include "IDBTransactionInfo.h"
 #include "Logging.h"
 #include "ServerOpenDBRequest.h"
 #include "UniqueIDBDatabase.h"
 
@@ -42,23 +41,23 @@
 {
     return adoptRef(*new UniqueIDBDatabaseConnection(database, request));
 }
 
 UniqueIDBDatabaseConnection::UniqueIDBDatabaseConnection(UniqueIDBDatabase& database, ServerOpenDBRequest& request)
-    : m_database(makeWeakPtr(database))
-    , m_server(makeWeakPtr(m_database->server()))
+    : m_database(&database)
     , m_connectionToClient(request.connection())
     , m_openRequestIdentifier(request.requestData().requestIdentifier())
 {
-    m_server->registerDatabaseConnection(*this);
+    server()->registerDatabaseConnection(*this);
     m_connectionToClient->registerDatabaseConnection(*this);
 }
 
 UniqueIDBDatabaseConnection::~UniqueIDBDatabaseConnection()
 {
-    if (m_server)
-        m_server->unregisterDatabaseConnection(*this);
+    ASSERT(m_transactionMap.isEmpty());
+
+    server()->unregisterDatabaseConnection(*this);
     m_connectionToClient->unregisterDatabaseConnection(*this);
 }
 
 bool UniqueIDBDatabaseConnection::hasNonFinishedTransactions() const
 {
@@ -70,15 +69,11 @@
     ASSERT(m_transactionMap.contains(transaction.info().identifier()));
 
     const auto& transactionIdentifier = transaction.info().identifier();
     RefPtr<UniqueIDBDatabaseConnection> protectedThis(this);
 
-    ASSERT(m_database);
-    if (!m_database)
-        return;
-
-    m_database->abortTransaction(transaction, UniqueIDBDatabase::WaitForPendingTasks::No, [this, protectedThis, transactionIdentifier](const IDBError&) {
+    m_database->abortTransaction(transaction, [this, protectedThis, transactionIdentifier](const IDBError&) {
         ASSERT(m_transactionMap.contains(transactionIdentifier));
         m_transactionMap.remove(transactionIdentifier);
     });
 }
 
@@ -91,40 +86,25 @@
 
 void UniqueIDBDatabaseConnection::connectionClosedFromClient()
 {
     LOG(IndexedDB, "UniqueIDBDatabaseConnection::connectionClosedFromClient - %s - %" PRIu64, m_openRequestIdentifier.loggingString().utf8().data(), identifier());
 
-    ASSERT(m_database);
-    if (m_database)
-        m_database->connectionClosedFromClient(*this);
+    m_database->connectionClosedFromClient(*this);
 }
 
-void UniqueIDBDatabaseConnection::confirmDidCloseFromServer()
-{
-    LOG(IndexedDB, "UniqueIDBDatabaseConnection::confirmDidCloseFromServer - %s - %" PRIu64, m_openRequestIdentifier.loggingString().utf8().data(), identifier());
-
-    ASSERT(m_database);
-    if (m_database)
-        m_database->confirmDidCloseFromServer(*this);
-}
-
-void UniqueIDBDatabaseConnection::didFireVersionChangeEvent(const IDBResourceIdentifier& requestIdentifier)
+void UniqueIDBDatabaseConnection::didFireVersionChangeEvent(const IDBResourceIdentifier& requestIdentifier, IndexedDB::ConnectionClosedOnBehalfOfServer connectionClosed)
 {
     LOG(IndexedDB, "UniqueIDBDatabaseConnection::didFireVersionChangeEvent - %s - %" PRIu64, m_openRequestIdentifier.loggingString().utf8().data(), identifier());
 
-    ASSERT(m_database);
-    if (m_database)
-        m_database->didFireVersionChangeEvent(*this, requestIdentifier);
+    m_database->didFireVersionChangeEvent(*this, requestIdentifier, connectionClosed);
 }
 
 void UniqueIDBDatabaseConnection::didFinishHandlingVersionChange(const IDBResourceIdentifier& transactionIdentifier)
 {
     LOG(IndexedDB, "UniqueIDBDatabaseConnection::didFinishHandlingVersionChange - %s - %" PRIu64, transactionIdentifier.loggingString().utf8().data(), identifier());
 
-    ASSERT(m_database);
-    if (m_database)
-        m_database->didFinishHandlingVersionChange(*this, transactionIdentifier);
+    m_database->didFinishHandlingVersionChange(*this, transactionIdentifier);
 }
 
 void UniqueIDBDatabaseConnection::fireVersionChangeEvent(const IDBResourceIdentifier& requestIdentifier, uint64_t requestedVersion)
 {
     ASSERT(!m_closePending);
@@ -152,13 +132,10 @@
 
     // No transactions should ever come from the client after the client has already told us
     // the connection is closing.
     ASSERT(!m_closePending);
 
-    if (!m_database || m_database->hardClosedForUserDelete())
-        return;
-
     Ref<UniqueIDBDatabaseTransaction> transaction = UniqueIDBDatabaseTransaction::create(*this, info);
     m_transactionMap.set(transaction->info().identifier(), &transaction.get());
 
     m_database->enqueueTransaction(WTFMove(transaction));
 }
@@ -167,14 +144,13 @@
 {
     LOG(IndexedDB, "UniqueIDBDatabaseConnection::didAbortTransaction - %s - %" PRIu64, m_openRequestIdentifier.loggingString().utf8().data(), identifier());
 
     auto transactionIdentifier = transaction.info().identifier();
     auto takenTransaction = m_transactionMap.take(transactionIdentifier);
+    ASSERT(takenTransaction);
 
-    ASSERT(takenTransaction || (!m_database && !error.isNull()) || (m_database && m_database->hardClosedForUserDelete()));
-    if (takenTransaction)
-        m_connectionToClient->didAbortTransaction(transactionIdentifier, error);
+    m_connectionToClient->didAbortTransaction(transactionIdentifier, error);
 }
 
 void UniqueIDBDatabaseConnection::didCommitTransaction(UniqueIDBDatabaseTransaction& transaction, const IDBError& error)
 {
     LOG(IndexedDB, "UniqueIDBDatabaseConnection::didCommitTransaction - %s - %" PRIu64, m_openRequestIdentifier.loggingString().utf8().data(), identifier());
