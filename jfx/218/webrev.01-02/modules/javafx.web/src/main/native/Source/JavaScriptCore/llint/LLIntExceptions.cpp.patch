diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LLIntExceptions.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LLIntExceptions.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LLIntExceptions.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LLIntExceptions.cpp
@@ -37,30 +37,28 @@
 #include "Exception.h"
 #endif
 
 namespace JSC { namespace LLInt {
 
-Instruction* returnToThrow(ExecState* exec)
+Instruction* returnToThrow(VM& vm)
 {
-    UNUSED_PARAM(exec);
+    UNUSED_PARAM(vm);
 #if LLINT_TRACING
     if (UNLIKELY(Options::traceLLIntSlowPath())) {
-        VM* vm = &exec->vm();
-        auto scope = DECLARE_CATCH_SCOPE(*vm);
+        auto scope = DECLARE_CATCH_SCOPE(vm);
         dataLog("Throwing exception ", JSValue(scope.exception()), " (returnToThrow).\n");
     }
 #endif
     return LLInt::exceptionInstructions();
 }
 
-void* callToThrow(ExecState* exec)
+void* callToThrow(VM& vm)
 {
-    UNUSED_PARAM(exec);
+    UNUSED_PARAM(vm);
 #if LLINT_TRACING
     if (UNLIKELY(Options::traceLLIntSlowPath())) {
-        VM* vm = &exec->vm();
-        auto scope = DECLARE_CATCH_SCOPE(*vm);
+        auto scope = DECLARE_CATCH_SCOPE(vm);
         dataLog("Throwing exception ", JSValue(scope.exception()), " (callToThrow).\n");
     }
 #endif
     return LLInt::getCodePtr<ExceptionHandlerPtrTag>(llint_throw_during_call_trampoline).executableAddress();
 }
