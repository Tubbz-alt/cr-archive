diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadObserver.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadObserver.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadObserver.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/ResourceLoadObserver.h
@@ -23,93 +23,45 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "CanvasActivityRecord.h"
-#include "PageIdentifier.h"
 #include "ResourceLoadStatistics.h"
-#include "Timer.h"
-#include <pal/SessionID.h>
-#include <wtf/HashMap.h>
-#include <wtf/HashSet.h>
-#include <wtf/NeverDestroyed.h>
-#include <wtf/text/WTFString.h>
-
-namespace WTF {
-class Lock;
-class WorkQueue;
-class WallTime;
-}
+#include <wtf/Forward.h>
 
 namespace WebCore {
 
 class Document;
 class Frame;
-class Page;
-class RegistrableDomain;
 class ResourceRequest;
 class ResourceResponse;
-class ScriptExecutionContext;
-
-struct ResourceLoadStatistics;
 
 class ResourceLoadObserver {
-    friend class WTF::NeverDestroyed<ResourceLoadObserver>;
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    using PerSessionResourceLoadData = Vector<std::pair<PAL::SessionID, Vector<ResourceLoadStatistics>>>;
-    WEBCORE_EXPORT static ResourceLoadObserver& shared();
-
-    void logSubresourceLoading(const Frame*, const ResourceRequest& newRequest, const ResourceResponse& redirectResponse);
-    void logWebSocketLoading(const URL& targetURL, const URL& mainFrameURL, PAL::SessionID);
-    void logUserInteractionWithReducedTimeResolution(const Document&);
-
-    void logFontLoad(const Document&, const String& familyName, bool loadStatus);
-    void logCanvasRead(const Document&);
-    void logCanvasWriteOrMeasure(const Document&, const String& textWritten);
-    void logNavigatorAPIAccessed(const Document&, const ResourceLoadStatistics::NavigatorAPI);
-    void logScreenAPIAccessed(const Document&, const ResourceLoadStatistics::ScreenAPI);
-
-    WEBCORE_EXPORT String statisticsForURL(PAL::SessionID, const URL&);
-
-    WEBCORE_EXPORT void setStatisticsUpdatedCallback(Function<void(PerSessionResourceLoadData&&)>&&);
-    WEBCORE_EXPORT void setRequestStorageAccessUnderOpenerCallback(Function<void(PAL::SessionID, const RegistrableDomain&, PageIdentifier, const RegistrableDomain&)>&&);
-    WEBCORE_EXPORT void setLogUserInteractionNotificationCallback(Function<void(PAL::SessionID, const RegistrableDomain&)>&&);
-
-    WEBCORE_EXPORT void updateCentralStatisticsStore();
-    WEBCORE_EXPORT void clearState();
-
-#if ENABLE(RESOURCE_LOAD_STATISTICS) && !RELEASE_LOG_DISABLED
-    bool shouldLogUserInteraction() const { return m_shouldLogUserInteraction; }
-    void setShouldLogUserInteraction(bool shouldLogUserInteraction) { m_shouldLogUserInteraction = shouldLogUserInteraction; }
-#endif
+    // https://fetch.spec.whatwg.org/#request-destination-script-like
+    enum class FetchDestinationIsScriptLike : bool { Yes, No };
 
-private:
-    ResourceLoadObserver();
-
-    bool shouldLog(PAL::SessionID) const;
-    ResourceLoadStatistics& ensureResourceStatisticsForRegistrableDomain(PAL::SessionID, const RegistrableDomain&);
-    void scheduleNotificationIfNeeded();
-
-    PerSessionResourceLoadData takeStatistics();
-
-#if ENABLE(RESOURCE_LOAD_STATISTICS)
-    void requestStorageAccessUnderOpener(PAL::SessionID, const RegistrableDomain& domainInNeedOfStorageAccess, PageIdentifier openerPageID, Document& openerDocument);
-#endif
-
-    HashMap<PAL::SessionID, std::unique_ptr<HashMap<RegistrableDomain, ResourceLoadStatistics>>> m_perSessionResourceStatisticsMap;
-    HashMap<RegistrableDomain, WTF::WallTime> m_lastReportedUserInteractionMap;
-    Function<void(PerSessionResourceLoadData)> m_notificationCallback;
-    Function<void(PAL::SessionID, const RegistrableDomain&, PageIdentifier, const RegistrableDomain&)> m_requestStorageAccessUnderOpenerCallback;
-    Function<void(PAL::SessionID, const RegistrableDomain&)> m_logUserInteractionNotificationCallback;
-
-    Timer m_notificationTimer;
-
-#if ENABLE(RESOURCE_LOAD_STATISTICS) && !RELEASE_LOG_DISABLED
-    uint64_t m_loggingCounter { 0 };
-    bool m_shouldLogUserInteraction { false };
-#endif
-
-    URL nonNullOwnerURL(const Document&) const;
+    WEBCORE_EXPORT static ResourceLoadObserver& shared();
+    WEBCORE_EXPORT static ResourceLoadObserver* sharedIfExists();
+    WEBCORE_EXPORT static void setShared(ResourceLoadObserver&);
+
+    virtual ~ResourceLoadObserver() { }
+
+    virtual void logSubresourceLoading(const Frame*, const ResourceRequest& /* newRequest */, const ResourceResponse& /* redirectResponse */, FetchDestinationIsScriptLike) { }
+    virtual void logWebSocketLoading(const URL& /* targetURL */, const URL& /* mainFrameURL */) { }
+    virtual void logUserInteractionWithReducedTimeResolution(const Document&) { }
+    virtual void logFontLoad(const Document&, const String& /* familyName */, bool /* loadStatus */) { }
+    virtual void logCanvasRead(const Document&) { }
+    virtual void logCanvasWriteOrMeasure(const Document&, const String& /* textWritten */) { }
+    virtual void logNavigatorAPIAccessed(const Document&, const ResourceLoadStatistics::NavigatorAPI) { }
+    virtual void logScreenAPIAccessed(const Document&, const ResourceLoadStatistics::ScreenAPI) { }
+    virtual void logSubresourceLoadingForTesting(const RegistrableDomain& /* firstPartyDomain */, const RegistrableDomain& /* thirdPartyDomain */, bool /* shouldScheduleNotification */) { }
+
+    virtual String statisticsForURL(const URL&) { return { }; }
+    virtual void updateCentralStatisticsStore() { }
+    virtual void clearState() { }
+
+    virtual bool hasStatistics() const { return false; }
 };
 
 } // namespace WebCore
