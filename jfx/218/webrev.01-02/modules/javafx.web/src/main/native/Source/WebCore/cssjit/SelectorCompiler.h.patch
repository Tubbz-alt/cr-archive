diff a/modules/javafx.web/src/main/native/Source/WebCore/cssjit/SelectorCompiler.h b/modules/javafx.web/src/main/native/Source/WebCore/cssjit/SelectorCompiler.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/cssjit/SelectorCompiler.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/cssjit/SelectorCompiler.h
@@ -28,12 +28,10 @@
 #if ENABLE(CSS_SELECTOR_JIT)
 
 #include "CompiledSelector.h"
 #include "SelectorChecker.h"
 
-#define CSS_SELECTOR_JIT_PROFILING 0
-
 namespace WebCore {
 
 class CSSSelector;
 class Element;
 
@@ -51,34 +49,34 @@
 typedef unsigned (*QuerySelectorSimpleSelectorChecker)(const Element*);
 
 typedef unsigned (*RuleCollectorSelectorCheckerWithCheckingContext)(const Element*, SelectorChecker::CheckingContext*, unsigned*);
 typedef unsigned (*QuerySelectorSelectorCheckerWithCheckingContext)(const Element*, const SelectorChecker::CheckingContext*);
 
-SelectorCompilationStatus compileSelector(const CSSSelector*, SelectorContext, JSC::MacroAssemblerCodeRef<CSSSelectorPtrTag>& outputCodeRef);
+void compileSelector(CompiledSelector&, const CSSSelector*, SelectorContext);
 
-inline RuleCollectorSimpleSelectorChecker ruleCollectorSimpleSelectorCheckerFunction(void* executableAddress, SelectorCompilationStatus compilationStatus)
+inline RuleCollectorSimpleSelectorChecker ruleCollectorSimpleSelectorCheckerFunction(CompiledSelector& compiledSelector)
 {
-    ASSERT_UNUSED(compilationStatus, compilationStatus == SelectorCompilationStatus::SimpleSelectorChecker);
-    return WTF::untagCFunctionPtr<RuleCollectorSimpleSelectorChecker, CSSSelectorPtrTag>(executableAddress);
+    ASSERT(compiledSelector.status == SelectorCompilationStatus::SimpleSelectorChecker);
+    return WTF::untagCFunctionPtr<RuleCollectorSimpleSelectorChecker, CSSSelectorPtrTag>(compiledSelector.codeRef.code().executableAddress());
 }
 
-inline QuerySelectorSimpleSelectorChecker querySelectorSimpleSelectorCheckerFunction(void* executableAddress, SelectorCompilationStatus compilationStatus)
+inline QuerySelectorSimpleSelectorChecker querySelectorSimpleSelectorCheckerFunction(CompiledSelector& compiledSelector)
 {
-    ASSERT_UNUSED(compilationStatus, compilationStatus == SelectorCompilationStatus::SimpleSelectorChecker);
-    return WTF::untagCFunctionPtr<QuerySelectorSimpleSelectorChecker, CSSSelectorPtrTag>(executableAddress);
+    ASSERT(compiledSelector.status == SelectorCompilationStatus::SimpleSelectorChecker);
+    return WTF::untagCFunctionPtr<QuerySelectorSimpleSelectorChecker, CSSSelectorPtrTag>(compiledSelector.codeRef.code().executableAddress());
 }
 
-inline RuleCollectorSelectorCheckerWithCheckingContext ruleCollectorSelectorCheckerFunctionWithCheckingContext(void* executableAddress, SelectorCompilationStatus compilationStatus)
+inline RuleCollectorSelectorCheckerWithCheckingContext ruleCollectorSelectorCheckerFunctionWithCheckingContext(CompiledSelector& compiledSelector)
 {
-    ASSERT_UNUSED(compilationStatus, compilationStatus == SelectorCompilationStatus::SelectorCheckerWithCheckingContext);
-    return WTF::untagCFunctionPtr<RuleCollectorSelectorCheckerWithCheckingContext, CSSSelectorPtrTag>(executableAddress);
+    ASSERT(compiledSelector.status == SelectorCompilationStatus::SelectorCheckerWithCheckingContext);
+    return WTF::untagCFunctionPtr<RuleCollectorSelectorCheckerWithCheckingContext, CSSSelectorPtrTag>(compiledSelector.codeRef.code().executableAddress());
 }
 
-inline QuerySelectorSelectorCheckerWithCheckingContext querySelectorSelectorCheckerFunctionWithCheckingContext(void* executableAddress, SelectorCompilationStatus compilationStatus)
+inline QuerySelectorSelectorCheckerWithCheckingContext querySelectorSelectorCheckerFunctionWithCheckingContext(CompiledSelector& compiledSelector)
 {
-    ASSERT_UNUSED(compilationStatus, compilationStatus == SelectorCompilationStatus::SelectorCheckerWithCheckingContext);
-    return WTF::untagCFunctionPtr<QuerySelectorSelectorCheckerWithCheckingContext, CSSSelectorPtrTag>(executableAddress);
+    ASSERT(compiledSelector.status == SelectorCompilationStatus::SelectorCheckerWithCheckingContext);
+    return WTF::untagCFunctionPtr<QuerySelectorSelectorCheckerWithCheckingContext, CSSSelectorPtrTag>(compiledSelector.codeRef.code().executableAddress());
 }
 
 } // namespace SelectorCompiler
 } // namespace WebCore
 
