diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakBlock.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakBlock.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakBlock.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakBlock.cpp
@@ -33,20 +33,23 @@
 #include "JSObject.h"
 #include "WeakHandleOwner.h"
 
 namespace JSC {
 
+DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(WeakBlock);
+
 WeakBlock* WeakBlock::create(Heap& heap, CellContainer container)
 {
     heap.didAllocateBlock(WeakBlock::blockSize);
-    return new (NotNull, fastMalloc(blockSize)) WeakBlock(container);
+    return new (NotNull, WeakBlockMalloc::malloc(blockSize)) WeakBlock(container);
+
 }
 
 void WeakBlock::destroy(Heap& heap, WeakBlock* block)
 {
     block->~WeakBlock();
-    fastFree(block);
+    WeakBlockMalloc::free(block);
     heap.didFreeBlock(WeakBlock::blockSize);
 }
 
 WeakBlock::WeakBlock(CellContainer container)
     : DoublyLinkedListNode<WeakBlock>()
@@ -139,12 +142,12 @@
         return;
 
     // If this WeakBlock doesn't belong to a CellContainer, we won't even be here.
     ASSERT(m_container);
 
-    if (m_container.isLargeAllocation())
-        specializedVisit(m_container.largeAllocation(), visitor);
+    if (m_container.isPreciseAllocation())
+        specializedVisit(m_container.preciseAllocation(), visitor);
     else
         specializedVisit(m_container.markedBlock(), visitor);
 }
 
 void WeakBlock::reap()
