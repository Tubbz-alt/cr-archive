diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertySlot.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertySlot.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertySlot.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertySlot.h
@@ -18,12 +18,12 @@
  *
  */
 
 #pragma once
 
-#include "CallFrame.h"
 #include "DOMAnnotation.h"
+#include "GetVM.h"
 #include "JSCJSValue.h"
 #include "PropertyName.h"
 #include "PropertyOffset.h"
 #include "ScopeOffset.h"
 #include <wtf/Assertions.h>
@@ -115,27 +115,27 @@
     explicit PropertySlot(const JSValue thisValue, InternalMethodType internalMethodType)
         : m_offset(invalidOffset)
         , m_thisValue(thisValue)
         , m_slotBase(nullptr)
         , m_watchpointSet(nullptr)
-        , m_cacheability(CachingAllowed)
+        , m_cacheability(CachingDisallowed)
         , m_propertyType(TypeUnset)
         , m_internalMethodType(internalMethodType)
         , m_additionalDataType(AdditionalDataType::None)
         , m_isTaintedByOpaqueObject(false)
     {
     }
 
     // FIXME: Remove this slotBase / receiver behavior difference in custom values and custom accessors.
     // https://bugs.webkit.org/show_bug.cgi?id=158014
-    typedef EncodedJSValue (*GetValueFunc)(ExecState*, EncodedJSValue thisValue, PropertyName);
+    typedef EncodedJSValue (*GetValueFunc)(JSGlobalObject*, EncodedJSValue thisValue, PropertyName);
 
-    JSValue getValue(ExecState*, PropertyName) const;
-    JSValue getValue(ExecState*, unsigned propertyName) const;
+    JSValue getValue(JSGlobalObject*, PropertyName) const;
+    JSValue getValue(JSGlobalObject*, unsigned propertyName) const;
     JSValue getPureResult() const;
 
-    bool isCacheable() const { return m_cacheability == CachingAllowed && m_offset != invalidOffset; }
+    bool isCacheable() const { return isUnset() || m_cacheability == CachingAllowed; }
     bool isUnset() const { return m_propertyType == TypeUnset; }
     bool isValue() const { return m_propertyType == TypeValue; }
     bool isAccessor() const { return m_propertyType == TypeGetter; }
     bool isCustom() const { return m_propertyType == TypeCustom; }
     bool isCustomAccessor() const { return m_propertyType == TypeCustomAccessor; }
@@ -215,11 +215,12 @@
         m_attributes = attributes;
 
         ASSERT(slotBase);
         m_slotBase = slotBase;
         m_propertyType = TypeValue;
-        m_offset = invalidOffset;
+
+        ASSERT(m_cacheability == CachingDisallowed);
     }
 
     void setValue(JSObject* slotBase, unsigned attributes, JSValue value, PropertyOffset offset)
     {
         ASSERT(attributes == attributesForStructure(attributes));
@@ -230,10 +231,12 @@
 
         ASSERT(slotBase);
         m_slotBase = slotBase;
         m_propertyType = TypeValue;
         m_offset = offset;
+
+        m_cacheability = CachingAllowed;
     }
 
     void setValue(JSString*, unsigned attributes, JSValue value)
     {
         ASSERT(attributes == attributesForStructure(attributes));
@@ -242,11 +245,12 @@
         m_data.value = JSValue::encode(value);
         m_attributes = attributes;
 
         m_slotBase = 0;
         m_propertyType = TypeValue;
-        m_offset = invalidOffset;
+
+        ASSERT(m_cacheability == CachingDisallowed);
     }
 
     void setValueModuleNamespace(JSObject* slotBase, unsigned attributes, JSValue value, JSModuleEnvironment* environment, ScopeOffset scopeOffset)
     {
         setValue(slotBase, attributes, value);
@@ -265,11 +269,11 @@
         m_attributes = attributes;
 
         ASSERT(slotBase);
         m_slotBase = slotBase;
         m_propertyType = TypeCustom;
-        m_offset = invalidOffset;
+        ASSERT(m_cacheability == CachingDisallowed);
     }
 
     void setCustom(JSObject* slotBase, unsigned attributes, GetValueFunc getValue, DOMAttributeAnnotation domAttribute)
     {
         setCustom(slotBase, attributes, getValue);
@@ -287,11 +291,12 @@
         m_attributes = attributes;
 
         ASSERT(slotBase);
         m_slotBase = slotBase;
         m_propertyType = TypeCustom;
-        m_offset = !invalidOffset;
+
+        m_cacheability = CachingAllowed;
     }
 
     void setCacheableCustom(JSObject* slotBase, unsigned attributes, GetValueFunc getValue, DOMAttributeAnnotation domAttribute)
     {
         setCacheableCustom(slotBase, attributes, getValue);
@@ -311,11 +316,12 @@
         m_attributes = attributes;
 
         ASSERT(slotBase);
         m_slotBase = slotBase;
         m_propertyType = TypeCustomAccessor;
-        m_offset = invalidOffset;
+
+        ASSERT(m_cacheability == CachingDisallowed);
     }
 
     void setGetterSlot(JSObject* slotBase, unsigned attributes, GetterSetter* getterSetter)
     {
         ASSERT(attributes == attributesForStructure(attributes));
@@ -325,11 +331,12 @@
         m_attributes = attributes;
 
         ASSERT(slotBase);
         m_slotBase = slotBase;
         m_propertyType = TypeGetter;
-        m_offset = invalidOffset;
+
+        ASSERT(m_cacheability == CachingDisallowed);
     }
 
     void setCacheableGetterSlot(JSObject* slotBase, unsigned attributes, GetterSetter* getterSetter, PropertyOffset offset)
     {
         ASSERT(attributes == attributesForStructure(attributes));
@@ -340,10 +347,12 @@
 
         ASSERT(slotBase);
         m_slotBase = slotBase;
         m_propertyType = TypeGetter;
         m_offset = offset;
+
+        m_cacheability = CachingAllowed;
     }
 
     JSValue thisValue() const
     {
         return m_thisValue;
@@ -359,22 +368,21 @@
         m_data.value = JSValue::encode(jsUndefined());
         m_attributes = PropertyAttribute::ReadOnly | PropertyAttribute::DontDelete | PropertyAttribute::DontEnum;
 
         m_slotBase = 0;
         m_propertyType = TypeValue;
-        m_offset = invalidOffset;
     }
 
     void setWatchpointSet(WatchpointSet& set)
     {
         m_watchpointSet = &set;
     }
 
 private:
-    JS_EXPORT_PRIVATE JSValue functionGetter(ExecState*) const;
-    JS_EXPORT_PRIVATE JSValue customGetter(ExecState*, PropertyName) const;
-    JS_EXPORT_PRIVATE JSValue customAccessorGetter(ExecState*, PropertyName) const;
+    JS_EXPORT_PRIVATE JSValue functionGetter(JSGlobalObject*) const;
+    JS_EXPORT_PRIVATE JSValue customGetter(JSGlobalObject*, PropertyName) const;
+    JS_EXPORT_PRIVATE JSValue customAccessorGetter(JSGlobalObject*, PropertyName) const;
 
     union {
         EncodedJSValue value;
         struct {
             GetterSetter* getterSetter;
@@ -401,29 +409,29 @@
         DOMAttributeAnnotation domAttribute;
         ModuleNamespaceSlot moduleNamespaceSlot;
     } m_additionalData;
 };
 
-ALWAYS_INLINE JSValue PropertySlot::getValue(ExecState* exec, PropertyName propertyName) const
+ALWAYS_INLINE JSValue PropertySlot::getValue(JSGlobalObject* globalObject, PropertyName propertyName) const
 {
     if (m_propertyType == TypeValue)
         return JSValue::decode(m_data.value);
     if (m_propertyType == TypeGetter)
-        return functionGetter(exec);
+        return functionGetter(globalObject);
     if (m_propertyType == TypeCustomAccessor)
-        return customAccessorGetter(exec, propertyName);
-    return customGetter(exec, propertyName);
+        return customAccessorGetter(globalObject, propertyName);
+    return customGetter(globalObject, propertyName);
 }
 
-ALWAYS_INLINE JSValue PropertySlot::getValue(ExecState* exec, unsigned propertyName) const
+ALWAYS_INLINE JSValue PropertySlot::getValue(JSGlobalObject* globalObject, unsigned propertyName) const
 {
-    VM& vm = exec->vm();
+    VM& vm = getVM(globalObject);
     if (m_propertyType == TypeValue)
         return JSValue::decode(m_data.value);
     if (m_propertyType == TypeGetter)
-        return functionGetter(exec);
+        return functionGetter(globalObject);
     if (m_propertyType == TypeCustomAccessor)
-        return customAccessorGetter(exec, Identifier::from(vm, propertyName));
-    return customGetter(exec, Identifier::from(vm, propertyName));
+        return customAccessorGetter(globalObject, Identifier::from(vm, propertyName));
+    return customGetter(globalObject, Identifier::from(vm, propertyName));
 }
 
 } // namespace JSC
