diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SmallStrings.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SmallStrings.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SmallStrings.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SmallStrings.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2008-2009, 2015-2016 Apple Inc. All Rights Reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All Rights Reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -51,11 +51,11 @@
 
 class VM;
 class JSString;
 class SlotVisitor;
 
-static const unsigned maxSingleCharacterString = 0xFF;
+static constexpr unsigned maxSingleCharacterString = 0xFF;
 
 class SmallStrings {
     WTF_MAKE_NONCOPYABLE(SmallStrings);
 public:
     SmallStrings();
@@ -114,30 +114,32 @@
     }
 
     JSString* objectStringStart() const { return m_objectStringStart; }
     JSString* nullObjectString() const { return m_nullObjectString; }
     JSString* undefinedObjectString() const { return m_undefinedObjectString; }
+    JSString* boundPrefixString() const { return m_boundPrefixString; }
 
     bool needsToBeVisited(CollectionScope scope) const
     {
         if (scope == CollectionScope::Full)
             return true;
         return m_needsToBeVisited;
     }
 
 private:
-    static const unsigned singleCharacterStringCount = maxSingleCharacterString + 1;
+    static constexpr unsigned singleCharacterStringCount = maxSingleCharacterString + 1;
 
     void initialize(VM*, JSString*&, const char* value);
 
     JSString* m_emptyString { nullptr };
 #define JSC_COMMON_STRINGS_ATTRIBUTE_DECLARATION(name) JSString* m_##name { nullptr };
     JSC_COMMON_STRINGS_EACH_NAME(JSC_COMMON_STRINGS_ATTRIBUTE_DECLARATION)
 #undef JSC_COMMON_STRINGS_ATTRIBUTE_DECLARATION
     JSString* m_objectStringStart { nullptr };
     JSString* m_nullObjectString { nullptr };
     JSString* m_undefinedObjectString { nullptr };
+    JSString* m_boundPrefixString { nullptr };
     JSString* m_singleCharacterStrings[singleCharacterStringCount] { nullptr };
     bool m_needsToBeVisited { true };
     bool m_isInitialized { false };
 };
 
