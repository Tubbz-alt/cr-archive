diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSJavaScriptCallFrame.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSJavaScriptCallFrame.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSJavaScriptCallFrame.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSJavaScriptCallFrame.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2014 Apple Inc. All rights reserved.
+ * Copyright (C) 2014-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -31,11 +31,11 @@
 namespace Inspector {
 
 class JSJavaScriptCallFrame final : public JSC::JSDestructibleObject {
 public:
     typedef JSC::JSDestructibleObject Base;
-    static const unsigned StructureFlags = Base::StructureFlags;
+    static constexpr unsigned StructureFlags = Base::StructureFlags;
 
     DECLARE_INFO;
 
     static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
     {
@@ -54,32 +54,32 @@
 
     JavaScriptCallFrame& impl() const { return *m_impl; }
     void releaseImpl();
 
     // Functions.
-    JSC::JSValue evaluateWithScopeExtension(JSC::ExecState*);
-    JSC::JSValue scopeDescriptions(JSC::ExecState*);
+    JSC::JSValue evaluateWithScopeExtension(JSC::JSGlobalObject*, JSC::CallFrame*);
+    JSC::JSValue scopeDescriptions(JSC::JSGlobalObject*);
 
     // Attributes.
-    JSC::JSValue caller(JSC::ExecState*) const;
-    JSC::JSValue sourceID(JSC::ExecState*) const;
-    JSC::JSValue line(JSC::ExecState*) const;
-    JSC::JSValue column(JSC::ExecState*) const;
-    JSC::JSValue functionName(JSC::ExecState*) const;
-    JSC::JSValue scopeChain(JSC::ExecState*) const;
-    JSC::JSValue thisObject(JSC::ExecState*) const;
-    JSC::JSValue type(JSC::ExecState*) const;
-    JSC::JSValue isTailDeleted(JSC::ExecState*) const;
+    JSC::JSValue caller(JSC::JSGlobalObject*) const;
+    JSC::JSValue sourceID(JSC::JSGlobalObject*) const;
+    JSC::JSValue line(JSC::JSGlobalObject*) const;
+    JSC::JSValue column(JSC::JSGlobalObject*) const;
+    JSC::JSValue functionName(JSC::JSGlobalObject*) const;
+    JSC::JSValue scopeChain(JSC::JSGlobalObject*) const;
+    JSC::JSValue thisObject(JSC::JSGlobalObject*) const;
+    JSC::JSValue type(JSC::JSGlobalObject*) const;
+    JSC::JSValue isTailDeleted(JSC::JSGlobalObject*) const;
 
     // Constants.
-    static const unsigned short GLOBAL_SCOPE = 0;
-    static const unsigned short WITH_SCOPE = 1;
-    static const unsigned short CLOSURE_SCOPE = 2;
-    static const unsigned short CATCH_SCOPE = 3;
-    static const unsigned short FUNCTION_NAME_SCOPE = 4;
-    static const unsigned short GLOBAL_LEXICAL_ENVIRONMENT_SCOPE = 5;
-    static const unsigned short NESTED_LEXICAL_SCOPE = 6;
+    static constexpr unsigned short GLOBAL_SCOPE = 0;
+    static constexpr unsigned short WITH_SCOPE = 1;
+    static constexpr unsigned short CLOSURE_SCOPE = 2;
+    static constexpr unsigned short CATCH_SCOPE = 3;
+    static constexpr unsigned short FUNCTION_NAME_SCOPE = 4;
+    static constexpr unsigned short GLOBAL_LEXICAL_ENVIRONMENT_SCOPE = 5;
+    static constexpr unsigned short NESTED_LEXICAL_SCOPE = 6;
 
 protected:
     void finishCreation(JSC::VM&);
 
 private:
@@ -87,8 +87,8 @@
     ~JSJavaScriptCallFrame();
 
     JavaScriptCallFrame* m_impl;
 };
 
-JSC::JSValue toJS(JSC::ExecState*, JSC::JSGlobalObject*, JavaScriptCallFrame*);
+JSC::JSValue toJS(JSC::JSGlobalObject*, JSC::JSGlobalObject*, JavaScriptCallFrame*);
 
 } // namespace Inspector
