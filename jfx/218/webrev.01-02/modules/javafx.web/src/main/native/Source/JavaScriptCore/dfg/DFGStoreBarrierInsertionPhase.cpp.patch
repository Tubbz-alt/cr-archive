diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGStoreBarrierInsertionPhase.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGStoreBarrierInsertionPhase.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGStoreBarrierInsertionPhase.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGStoreBarrierInsertionPhase.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015-2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -42,11 +42,11 @@
 namespace JSC { namespace DFG {
 
 namespace {
 
 namespace DFGStoreBarrierInsertionPhaseInternal {
-static const bool verbose = false;
+static constexpr bool verbose = false;
 }
 
 enum class PhaseMode {
     // Does only a local analysis for store barrier insertion and assumes that pointers live
     // from predecessor blocks may need barriers. Assumes CPS conventions. Does not use AI for
@@ -279,11 +279,12 @@
                 break;
             }
 
             case PutClosureVar:
             case PutToArguments:
-            case SetRegExpObjectLastIndex: {
+            case SetRegExpObjectLastIndex:
+            case PutInternalField: {
                 considerBarrier(m_node->child1(), m_node->child2());
                 break;
             }
 
             case MultiPutByOffset: {
@@ -318,13 +319,17 @@
             if (doesGC(m_graph, m_node))
                 m_currentEpoch.bump();
 
             switch (m_node->op()) {
             case NewObject:
+            case NewPromise:
+            case NewGenerator:
+            case NewAsyncGenerator:
             case NewArray:
             case NewArrayWithSize:
             case NewArrayBuffer:
+            case NewArrayIterator:
             case NewTypedArray:
             case NewRegexp:
             case NewStringObject:
             case NewSymbol:
             case MaterializeNewObject:
@@ -332,10 +337,11 @@
             case MakeRope:
             case CreateActivation:
             case CreateDirectArguments:
             case CreateScopedArguments:
             case CreateClonedArguments:
+            case CreateArgumentsButterfly:
             case NewFunction:
             case NewGeneratorFunction:
             case NewAsyncGeneratorFunction:
             case NewAsyncFunction:
             case AllocatePropertyStorage:
