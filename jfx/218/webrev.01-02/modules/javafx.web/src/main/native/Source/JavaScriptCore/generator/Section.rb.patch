diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/generator/Section.rb b/modules/javafx.web/src/main/native/Source/JavaScriptCore/generator/Section.rb
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/generator/Section.rb
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/generator/Section.rb
@@ -41,11 +41,11 @@
   def add_opcode(name, config)
       @opcodes << create_opcode(name, config)
   end
 
   def create_opcode(name, config)
-      Opcode.new(self, name, config[:args], config[:metadata], config[:metadata_initializers])
+      Opcode.new(self, name, config[:extras], config[:args], config[:metadata], config[:metadata_initializers], config[:tmps], config[:checkpoints])
   end
 
   def add_opcode_group(name, opcodes, config)
       opcodes = opcodes.map { |opcode| create_opcode(opcode, config) }
       @opcode_groups << OpcodeGroup.new(self, name, opcodes, config)
@@ -55,18 +55,23 @@
   def sort!
       @opcodes = @opcodes.sort { |a, b| a.metadata.empty? ? b.metadata.empty? ? 0 : 1 : -1 }
       @opcodes.each(&:create_id!)
   end
 
+  def is_wasm?
+    @name == :Wasm
+  end
+
   def header_helpers(num_opcodes)
       out = StringIO.new
       if config[:emit_in_h_file]
           out.write("#define FOR_EACH_#{config[:macro_name_component]}_ID(macro) \\\n")
           opcodes.each { |opcode| out.write("    macro(#{opcode.name}, #{opcode.length}) \\\n") }
           out << "\n"
 
           out.write("#define NUMBER_OF_#{config[:macro_name_component]}_IDS #{opcodes.length}\n")
+          out.write("#define MAX_LENGTH_OF_#{config[:macro_name_component]}_IDS #{(opcodes.max {|a, b| a.length <=> b.length }).length}\n")
       end
 
       if config[:emit_in_structs_file]
           out.write("#define FOR_EACH_#{config[:macro_name_component]}_METADATA_SIZE(macro) \\\n")
           i = 0
@@ -106,6 +111,16 @@
               out.write("#define #{opcode.name}_wide32_value_string \"#{num_opcodes * 2 + opcode.id}\"\n")
           }
       end
       out.string
   end
+
+    def for_each_struct
+        <<-EOF
+#define FOR_EACH_#{config[:macro_name_component]}_STRUCT(macro) \\
+#{opcodes.map do |op|
+    "    macro(#{op.capitalized_name}) \\"
+end.join("\n")}
+EOF
+    end
+
 end
