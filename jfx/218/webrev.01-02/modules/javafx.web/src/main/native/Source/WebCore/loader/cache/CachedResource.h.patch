diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResource.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResource.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResource.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/cache/CachedResource.h
@@ -54,12 +54,14 @@
 class TextResourceDecoder;
 
 // A resource that is held in the cache. Classes who want to use this object should derive
 // from CachedResourceClient, to get the function calls in case the requested data has arrived.
 // This class also does the actual communication with the loader to obtain the resource from the network.
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(CachedResource);
 class CachedResource {
-    WTF_MAKE_NONCOPYABLE(CachedResource); WTF_MAKE_FAST_ALLOCATED;
+    WTF_MAKE_NONCOPYABLE(CachedResource);
+    WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(CachedResource);
     friend class MemoryCache;
 
 public:
     enum class Type : uint8_t {
         MainResource,
@@ -73,30 +75,35 @@
         MediaResource,
         RawResource,
         Icon,
         Beacon,
         Ping,
-        SVGDocumentResource
 #if ENABLE(XSLT)
-        , XSLStyleSheet
+        XSLStyleSheet,
 #endif
-        , LinkPrefetch
+        LinkPrefetch,
 #if ENABLE(VIDEO_TRACK)
-        , TextTrackResource
+        TextTrackResource,
 #endif
 #if ENABLE(APPLICATION_MANIFEST)
-        , ApplicationManifest
+        ApplicationManifest,
 #endif
+        SVGDocumentResource,
+        LastType = SVGDocumentResource,
     };
+    static constexpr unsigned bitWidthOfType = 5;
+    static_assert(static_cast<unsigned>(Type::LastType) <= ((1U << bitWidthOfType) - 1));
 
-    enum Status {
+    enum Status : uint8_t {
         Unknown,      // let cache decide what to do with it
         Pending,      // only partially loaded
         Cached,       // regular case
         LoadError,
         DecodeError
     };
+    static constexpr unsigned bitWidthOfStatus = 3;
+    static_assert(static_cast<unsigned>(DecodeError) <= ((1ULL << bitWidthOfStatus) - 1));
 
     CachedResource(CachedResourceRequest&&, Type, const PAL::SessionID&, const CookieJar*);
     virtual ~CachedResource();
 
     virtual void load(CachedResourceLoader&);
@@ -138,21 +145,27 @@
         PreloadNotReferenced,
         PreloadReferenced,
         PreloadReferencedWhileLoading,
         PreloadReferencedWhileComplete
     };
+    static constexpr unsigned bitWidthOfPreloadResult = 2;
+
     PreloadResult preloadResult() const { return static_cast<PreloadResult>(m_preloadResult); }
 
     virtual void didAddClient(CachedResourceClient&);
     virtual void didRemoveClient(CachedResourceClient&) { }
     virtual void allClientsRemoved();
     void destroyDecodedDataIfNeeded();
 
     unsigned numberOfClients() const { return m_clients.size(); }
 
     Status status() const { return static_cast<Status>(m_status); }
-    void setStatus(Status status) { m_status = status; }
+    void setStatus(Status status)
+    {
+        m_status = status;
+        ASSERT(this->status() == status);
+    }
 
     unsigned size() const { return encodedSize() + decodedSize() + overheadSize(); }
     unsigned encodedSize() const { return m_encodedSize; }
     unsigned decodedSize() const { return m_decodedSize; }
     unsigned overheadSize() const;
@@ -163,12 +176,10 @@
     void setLoading(bool b) { m_loading = b; }
     virtual bool stillNeedsLoad() const { return false; }
 
     SubresourceLoader* loader() { return m_loader.get(); }
 
-    bool areAllClientsXMLHttpRequests() const;
-
     bool isImage() const { return type() == Type::ImageResource; }
     // FIXME: CachedRawResource could be a main resource, an audio/video resource, or a raw XHR/icon resource.
     bool isMainOrMediaOrIconOrRawResource() const { return type() == Type::MainResource || type() == Type::MediaResource || type() == Type::Icon || type() == Type::RawResource || type() == Type::Beacon || type() == Type::Ping; }
 
     // Whether this request should impact request counting and delay window.onload.
@@ -278,10 +289,14 @@
     static ResourceLoadPriority defaultPriorityForResourceType(Type);
 
     void setOriginalRequest(std::unique_ptr<ResourceRequest>&& originalRequest) { m_originalRequest = WTFMove(originalRequest); }
     const std::unique_ptr<ResourceRequest>& originalRequest() const { return m_originalRequest; }
 
+#if USE(QUICK_LOOK)
+    virtual void previewResponseReceived(const ResourceResponse&);
+#endif
+
 protected:
     // CachedResource constructor that may be used when the CachedResource can already be filled with response data.
     CachedResource(const URL&, Type, const PAL::SessionID&, const CookieJar*);
 
     void setEncodedSize(unsigned);
@@ -347,36 +362,34 @@
 
     ResourceError m_error;
     RefPtr<SecurityOrigin> m_origin;
     AtomString m_initiatorName;
 
-    RedirectChainCacheStatus m_redirectChainCacheStatus;
-
     unsigned m_encodedSize { 0 };
     unsigned m_decodedSize { 0 };
     unsigned m_accessCount { 0 };
     unsigned m_handleCount { 0 };
     unsigned m_preloadCount { 0 };
 
-    unsigned m_status { Pending }; // Status
-
-    PreloadResult m_preloadResult { PreloadResult::PreloadNotReferenced };
+    RedirectChainCacheStatus m_redirectChainCacheStatus;
 
-    ResourceResponse::Tainting m_responseTainting { ResourceResponse::Tainting::Basic };
-    ResourceLoadPriority m_loadPriority;
+    Type m_type : bitWidthOfType;
 
-    Type m_type; // Type
+    PreloadResult m_preloadResult : bitWidthOfPreloadResult;
+    ResourceResponse::Tainting m_responseTainting : ResourceResponse::bitWidthOfTainting;
+    ResourceLoadPriority m_loadPriority : bitWidthOfResourceLoadPriority;
 
-    bool m_requestedFromNetworkingLayer { false };
-    bool m_inCache { false };
-    bool m_loading { false };
-    bool m_isLinkPreload { false };
-    bool m_hasUnknownEncoding { false };
-    bool m_switchingClientsToRevalidatedResource { false };
-    bool m_ignoreForRequestCount { false };
+    Status m_status : bitWidthOfStatus;
+    bool m_requestedFromNetworkingLayer : 1;
+    bool m_inCache : 1;
+    bool m_loading : 1;
+    bool m_isLinkPreload : 1;
+    bool m_hasUnknownEncoding : 1;
+    bool m_switchingClientsToRevalidatedResource : 1;
+    bool m_ignoreForRequestCount : 1;
 
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     bool m_deleted { false };
     unsigned m_lruIndex { 0 };
 #endif
 };
 
