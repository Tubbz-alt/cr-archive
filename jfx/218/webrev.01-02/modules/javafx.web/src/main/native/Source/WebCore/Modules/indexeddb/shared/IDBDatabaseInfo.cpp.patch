diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBDatabaseInfo.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBDatabaseInfo.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBDatabaseInfo.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBDatabaseInfo.cpp
@@ -34,20 +34,22 @@
 
 IDBDatabaseInfo::IDBDatabaseInfo()
 {
 }
 
-IDBDatabaseInfo::IDBDatabaseInfo(const String& name, uint64_t version)
+IDBDatabaseInfo::IDBDatabaseInfo(const String& name, uint64_t version, uint64_t maxIndexID)
     : m_name(name)
     , m_version(version)
+    , m_maxIndexID(maxIndexID)
 {
 }
 
 IDBDatabaseInfo::IDBDatabaseInfo(const IDBDatabaseInfo& other, IsolatedCopyTag)
     : m_name(other.m_name.isolatedCopy())
     , m_version(other.m_version)
     , m_maxObjectStoreID(other.m_maxObjectStoreID)
+    , m_maxIndexID(other.m_maxIndexID)
 {
     for (const auto& entry : other.m_objectStoreMap)
         m_objectStoreMap.set(entry.key, entry.value.isolatedCopy());
 }
 
@@ -166,8 +168,14 @@
     return builder.toString();
 }
 
 #endif
 
+void IDBDatabaseInfo::setMaxIndexID(uint64_t maxIndexID)
+{
+    ASSERT(maxIndexID > m_maxIndexID || (!maxIndexID && !m_maxIndexID));
+    m_maxIndexID = maxIndexID;
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(INDEXED_DATABASE)
