diff a/modules/javafx.web/src/main/native/Source/WebCore/bridge/c/c_runtime.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bridge/c/c_runtime.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bridge/c/c_runtime.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bridge/c/c_runtime.cpp
@@ -36,46 +36,46 @@
 #include <JavaScriptCore/JSObject.h>
 
 namespace JSC {
 namespace Bindings {
 
-JSValue CField::valueFromInstance(ExecState* exec, const Instance* inst) const
+JSValue CField::valueFromInstance(JSGlobalObject* lexicalGlobalObject, const Instance* inst) const
 {
     const CInstance* instance = static_cast<const CInstance*>(inst);
     NPObject* obj = instance->getObject();
     if (obj->_class->getProperty) {
         NPVariant property;
         VOID_TO_NPVARIANT(property);
 
         bool result;
         {
-            JSLock::DropAllLocks dropAllLocks(exec);
+            JSLock::DropAllLocks dropAllLocks(lexicalGlobalObject);
             result = obj->_class->getProperty(obj, _fieldIdentifier, &property);
-            CInstance::moveGlobalExceptionToExecState(exec);
+            CInstance::moveGlobalExceptionToExecState(lexicalGlobalObject);
         }
         if (result) {
-            JSValue result = convertNPVariantToValue(exec, &property, instance->rootObject());
+            JSValue result = convertNPVariantToValue(lexicalGlobalObject, &property, instance->rootObject());
             _NPN_ReleaseVariantValue(&property);
             return result;
         }
     }
     return jsUndefined();
 }
 
-bool CField::setValueToInstance(ExecState *exec, const Instance *inst, JSValue aValue) const
+bool CField::setValueToInstance(JSGlobalObject* lexicalGlobalObject, const Instance *inst, JSValue aValue) const
 {
     const CInstance* instance = static_cast<const CInstance*>(inst);
     NPObject* obj = instance->getObject();
     if (obj->_class->setProperty) {
         NPVariant variant;
-        convertValueToNPVariant(exec, aValue, &variant);
+        convertValueToNPVariant(lexicalGlobalObject, aValue, &variant);
 
         bool result = false;
         {
-            JSLock::DropAllLocks dropAllLocks(exec);
+            JSLock::DropAllLocks dropAllLocks(lexicalGlobalObject);
             result = obj->_class->setProperty(obj, _fieldIdentifier, &variant);
-            CInstance::moveGlobalExceptionToExecState(exec);
+            CInstance::moveGlobalExceptionToExecState(lexicalGlobalObject);
         }
 
         _NPN_ReleaseVariantValue(&variant);
         return result;
     }
