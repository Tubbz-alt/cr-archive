diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Symbol.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Symbol.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Symbol.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/Symbol.cpp
@@ -66,32 +66,32 @@
     SymbolObject* object = new (NotNull, allocateCell<SymbolObject>(vm.heap)) SymbolObject(vm, globalObject->symbolObjectStructure());
     object->finishCreation(vm, symbol);
     return object;
 }
 
-JSValue Symbol::toPrimitive(ExecState*, PreferredPrimitiveType) const
+JSValue Symbol::toPrimitive(JSGlobalObject*, PreferredPrimitiveType) const
 {
     return const_cast<Symbol*>(this);
 }
 
-bool Symbol::getPrimitiveNumber(ExecState* exec, double& number, JSValue& result) const
+bool Symbol::getPrimitiveNumber(JSGlobalObject* globalObject, double& number, JSValue& result) const
 {
     result = this;
-    number = toNumber(exec);
+    number = toNumber(globalObject);
     return true;
 }
 
-JSObject* Symbol::toObject(ExecState* exec, JSGlobalObject* globalObject) const
+JSObject* Symbol::toObject(JSGlobalObject* globalObject) const
 {
-    return SymbolObject::create(exec->vm(), globalObject, const_cast<Symbol*>(this));
+    return SymbolObject::create(globalObject->vm(), globalObject, const_cast<Symbol*>(this));
 }
 
-double Symbol::toNumber(ExecState* exec) const
+double Symbol::toNumber(JSGlobalObject* globalObject) const
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
-    throwTypeError(exec, scope, "Cannot convert a symbol to a number"_s);
+    throwTypeError(globalObject, scope, "Cannot convert a symbol to a number"_s);
     return 0.0;
 }
 
 void Symbol::destroy(JSCell* cell)
 {
