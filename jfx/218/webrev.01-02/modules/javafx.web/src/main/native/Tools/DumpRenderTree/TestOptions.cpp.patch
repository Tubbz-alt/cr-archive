diff a/modules/javafx.web/src/main/native/Tools/DumpRenderTree/TestOptions.cpp b/modules/javafx.web/src/main/native/Tools/DumpRenderTree/TestOptions.cpp
--- a/modules/javafx.web/src/main/native/Tools/DumpRenderTree/TestOptions.cpp
+++ b/modules/javafx.web/src/main/native/Tools/DumpRenderTree/TestOptions.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -25,10 +25,12 @@
 
 #include "config.h"
 #include "TestOptions.h"
 
 #include <fstream>
+#include <string>
+#include <wtf/text/WTFString.h>
 
 static bool parseBooleanTestHeaderValue(const std::string& value)
 {
     if (value == "true")
         return true;
@@ -37,16 +39,35 @@
 
     LOG_ERROR("Found unexpected value '%s' for boolean option. Expected 'true' or 'false'.", value.c_str());
     return false;
 }
 
+static bool pathContains(const std::string& pathOrURL, const char* substring)
+{
+    String path(pathOrURL.c_str());
+    return path.contains(substring);
+}
+
+static bool shouldDumpJSConsoleLogInStdErr(const std::string& pathOrURL)
+{
+    return pathContains(pathOrURL, "localhost:8800/beacon") || pathContains(pathOrURL, "localhost:9443/beacon")
+        || pathContains(pathOrURL, "localhost:8800/cors") || pathContains(pathOrURL, "localhost:9443/cors")
+        || pathContains(pathOrURL, "localhost:8800/fetch") || pathContains(pathOrURL, "localhost:9443/fetch")
+        || pathContains(pathOrURL, "localhost:8800/service-workers") || pathContains(pathOrURL, "localhost:9443/service-workers")
+        || pathContains(pathOrURL, "localhost:8800/xhr") || pathContains(pathOrURL, "localhost:9443/xhr")
+        || pathContains(pathOrURL, "localhost:8800/webrtc") || pathContains(pathOrURL, "localhost:9443/webrtc")
+        || pathContains(pathOrURL, "localhost:8800/websockets") || pathContains(pathOrURL, "localhost:9443/websockets");
+}
+
 TestOptions::TestOptions(const std::string& pathOrURL, const std::string& absolutePath)
 {
     const auto& path = absolutePath.empty() ? pathOrURL : absolutePath;
     if (path.empty())
         return;
 
+    dumpJSConsoleLogInStdErr = shouldDumpJSConsoleLogInStdErr(pathOrURL);
+
     std::string options;
     std::ifstream testFile(path.data());
     if (!testFile.good())
         return;
     getline(testFile, options);
@@ -77,10 +98,14 @@
             enableAttachmentElement = parseBooleanTestHeaderValue(value);
         if (key == "useAcceleratedDrawing")
             useAcceleratedDrawing = parseBooleanTestHeaderValue(value);
         else if (key == "enableIntersectionObserver")
             enableIntersectionObserver = parseBooleanTestHeaderValue(value);
+        else if (key == "useEphemeralSession")
+            useEphemeralSession = parseBooleanTestHeaderValue(value);
+        else if (key == "enableBackForwardCache")
+            enableBackForwardCache = parseBooleanTestHeaderValue(value);
         else if (key == "enableMenuItemElement")
             enableMenuItemElement = parseBooleanTestHeaderValue(value);
         else if (key == "enableKeygenElement")
             enableKeygenElement = parseBooleanTestHeaderValue(value);
         else if (key == "enableModernMediaControls")
@@ -115,14 +140,24 @@
             enableCSSLogical = parseBooleanTestHeaderValue(value);
         else if (key == "experimental:AdClickAttributionEnabled")
             adClickAttributionEnabled = parseBooleanTestHeaderValue(value);
         else if (key == "experimental:ResizeObserverEnabled")
             enableResizeObserver = parseBooleanTestHeaderValue(value);
+        else if (key == "experimental:CSSOMViewSmoothScrollingEnabled")
+            enableCSSOMViewSmoothScrolling = parseBooleanTestHeaderValue(value);
         else if (key == "experimental:CoreMathMLEnabled")
             enableCoreMathML = parseBooleanTestHeaderValue(value);
-        else if (key == "experimental:LazyImageLoadingEnabled")
-            enableLazyImageLoading = parseBooleanTestHeaderValue(value);
+        else if (key == "experimental:RequestIdleCallbackEnabled")
+            enableRequestIdleCallback = parseBooleanTestHeaderValue(value);
+        else if (key == "experimental:AsyncClipboardAPIEnabled")
+            enableAsyncClipboardAPI = parseBooleanTestHeaderValue(value);
+        else if (key == "internal:LayoutFormattingContextIntegrationEnabled")
+            layoutFormattingContextIntegrationEnabled = parseBooleanTestHeaderValue(value);
+        else if (key == "experimental:AspectRatioOfImgFromWidthAndHeightEnabled")
+            enableAspectRatioOfImgFromWidthAndHeight = parseBooleanTestHeaderValue(value);
+        else if (key == "allowTopNavigationToDataURLs")
+            allowTopNavigationToDataURLs = parseBooleanTestHeaderValue(value);
         pairStart = pairEnd + 1;
     }
 }
 
 bool TestOptions::webViewIsCompatibleWithOptions(const TestOptions& other) const
