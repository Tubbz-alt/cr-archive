diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCacheStorage.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCacheStorage.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCacheStorage.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCacheStorage.h
@@ -33,10 +33,11 @@
 namespace WebCore {
 
 class DOMCacheStorage : public RefCounted<DOMCacheStorage>, public ActiveDOMObject {
 public:
     static Ref<DOMCacheStorage> create(ScriptExecutionContext& context, Ref<CacheStorageConnection>&& connection) { return adoptRef(*new DOMCacheStorage(context, WTFMove(connection))); }
+    ~DOMCacheStorage();
 
     using KeysPromise = DOMPromiseDeferred<IDLSequence<IDLDOMString>>;
 
     void match(DOMCache::RequestInfo&&, CacheQueryOptions&&, Ref<DeferredPromise>&&);
     void has(const String&, DOMPromiseDeferred<IDLBoolean>&&);
@@ -48,16 +49,15 @@
     DOMCacheStorage(ScriptExecutionContext&, Ref<CacheStorageConnection>&&);
 
     // ActiveDOMObject
     void stop() final;
     const char* activeDOMObjectName() const final;
-    bool canSuspendForDocumentSuspension() const final;
 
     void doOpen(const String& name, DOMPromiseDeferred<IDLInterface<DOMCache>>&&);
     void doRemove(const String&, DOMPromiseDeferred<IDLBoolean>&&);
     void doSequentialMatch(DOMCache::RequestInfo&&, CacheQueryOptions&&, Ref<DeferredPromise>&&);
-    void retrieveCaches(WTF::Function<void(Optional<Exception>&&)>&&);
+    void retrieveCaches(CompletionHandler<void(Optional<Exception>&&)>&&);
     Ref<DOMCache> findCacheOrCreate(DOMCacheEngine::CacheInfo&&);
     Optional<ClientOrigin> origin() const;
 
     Vector<Ref<DOMCache>> m_caches;
     uint64_t m_updateCounter { 0 };
