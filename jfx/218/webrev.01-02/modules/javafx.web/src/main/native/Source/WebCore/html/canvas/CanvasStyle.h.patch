diff a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasStyle.h b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasStyle.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasStyle.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/CanvasStyle.h
@@ -33,11 +33,11 @@
 
 namespace WebCore {
 
 class Document;
 class GraphicsContext;
-class HTMLCanvasElement;
+class CanvasBase;
 
 class CanvasStyle {
 public:
     CanvasStyle();
     CanvasStyle(Color);
@@ -45,12 +45,12 @@
     CanvasStyle(float r, float g, float b, float alpha);
     CanvasStyle(float c, float m, float y, float k, float alpha);
     CanvasStyle(CanvasGradient&);
     CanvasStyle(CanvasPattern&);
 
-    static CanvasStyle createFromString(const String& color);
-    static CanvasStyle createFromStringWithOverrideAlpha(const String& color, float alpha);
+    static CanvasStyle createFromString(const String& color, CanvasBase&);
+    static CanvasStyle createFromStringWithOverrideAlpha(const String& color, float alpha, CanvasBase&);
 
     bool isValid() const { return !WTF::holds_alternative<Invalid>(m_style); }
     bool isCurrentColor() const { return WTF::holds_alternative<CurrentColor>(m_style); }
     bool hasOverrideAlpha() const { return isCurrentColor() && WTF::get<CurrentColor>(m_style).overrideAlpha; }
     float overrideAlpha() const { return WTF::get<CurrentColor>(m_style).overrideAlpha.value(); }
@@ -87,12 +87,15 @@
     CanvasStyle(CurrentColor);
 
     Variant<Invalid, Color, CMYKAColor, RefPtr<CanvasGradient>, RefPtr<CanvasPattern>, CurrentColor> m_style;
 };
 
-Color currentColor(HTMLCanvasElement*);
-Color parseColorOrCurrentColor(const String& colorString, HTMLCanvasElement*);
+bool isCurrentColorString(const String& colorString);
+
+Color currentColor(CanvasBase&);
+Color parseColor(const String& colorString, CanvasBase&);
+Color parseColorOrCurrentColor(const String& colorString, CanvasBase&);
 
 inline CanvasStyle::CanvasStyle()
     : m_style(Invalid { })
 {
 }
