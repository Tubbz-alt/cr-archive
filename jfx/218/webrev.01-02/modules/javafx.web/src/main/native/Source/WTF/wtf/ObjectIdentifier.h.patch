diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/ObjectIdentifier.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/ObjectIdentifier.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/ObjectIdentifier.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/ObjectIdentifier.h
@@ -42,18 +42,25 @@
 
 template<typename T> class ObjectIdentifier : private ObjectIdentifierBase {
 public:
     static ObjectIdentifier generate()
     {
+        RELEASE_ASSERT(!m_generationProtected);
         return ObjectIdentifier { generateIdentifierInternal() };
     }
 
     static ObjectIdentifier generateThreadSafe()
     {
+        RELEASE_ASSERT(!m_generationProtected);
         return ObjectIdentifier { generateThreadSafeIdentifierInternal() };
     }
 
+    static void enableGenerationProtection()
+    {
+        m_generationProtected = true;
+    }
+
     ObjectIdentifier() = default;
 
     ObjectIdentifier(HashTableDeletedValueType) : m_identifier(hashTableDeletedValue()) { }
     bool isHashTableDeletedValue() const { return m_identifier == hashTableDeletedValue(); }
 
@@ -64,13 +71,12 @@
     }
     template<typename Decoder> static Optional<ObjectIdentifier> decode(Decoder& decoder)
     {
         Optional<uint64_t> identifier;
         decoder >> identifier;
-        if (!identifier)
+        if (!identifier || !isValidIdentifier(*identifier))
             return WTF::nullopt;
-        ASSERT(isValidIdentifier(*identifier));
         return ObjectIdentifier { *identifier };
     }
 
     bool operator==(const ObjectIdentifier& other) const
     {
@@ -88,35 +94,48 @@
     String loggingString() const
     {
         return String::number(m_identifier);
     }
 
+    struct MarkableTraits {
+        static bool isEmptyValue(ObjectIdentifier identifier)
+        {
+            return !identifier.m_identifier;
+        }
+
+        static constexpr ObjectIdentifier emptyValue()
+        {
+            return ObjectIdentifier();
+        }
+    };
+
 private:
     template<typename U> friend ObjectIdentifier<U> makeObjectIdentifier(uint64_t);
     friend struct HashTraits<ObjectIdentifier>;
     template<typename U> friend struct ObjectIdentifierHash;
 
     static uint64_t hashTableDeletedValue() { return std::numeric_limits<uint64_t>::max(); }
     static bool isValidIdentifier(uint64_t identifier) { return identifier && identifier != hashTableDeletedValue(); }
 
-    explicit ObjectIdentifier(uint64_t identifier)
+    explicit constexpr ObjectIdentifier(uint64_t identifier)
         : m_identifier(identifier)
     {
     }
 
     uint64_t m_identifier { 0 };
+    inline static bool m_generationProtected { false };
 };
 
 template<typename T> inline ObjectIdentifier<T> makeObjectIdentifier(uint64_t identifier)
 {
     return ObjectIdentifier<T> { identifier };
 }
 
 template<typename T> struct ObjectIdentifierHash {
     static unsigned hash(const ObjectIdentifier<T>& identifier) { return intHash(identifier.m_identifier); }
     static bool equal(const ObjectIdentifier<T>& a, const ObjectIdentifier<T>& b) { return a == b; }
-    static const bool safeToCompareToEmptyOrDeleted = true;
+    static constexpr bool safeToCompareToEmptyOrDeleted = true;
 };
 
 template<typename T> struct HashTraits<ObjectIdentifier<T>> : SimpleClassHashTraits<ObjectIdentifier<T>> { };
 
 template<typename T> struct DefaultHash<ObjectIdentifier<T>> {
