diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorHeapAgent.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorHeapAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorHeapAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorHeapAgent.cpp
@@ -34,14 +34,14 @@
 #include "JSBigInt.h"
 #include "JSCInlines.h"
 #include "VM.h"
 #include <wtf/Stopwatch.h>
 
-using namespace JSC;
-
 namespace Inspector {
 
+using namespace JSC;
+
 InspectorHeapAgent::InspectorHeapAgent(AgentContext& context)
     : InspectorAgentBase("Heap"_s)
     , m_injectedScriptManager(context.injectedScriptManager)
     , m_frontendDispatcher(makeUnique<HeapFrontendDispatcher>(context.frontendRouter))
     , m_backendDispatcher(HeapBackendDispatcher::create(context.backendDispatcher, this))
@@ -106,11 +106,11 @@
 
     *timestamp = m_environment.executionStopwatch()->elapsedTime().seconds();
     *snapshotData = snapshotBuilder.json([&] (const HeapSnapshotNode& node) {
         if (Structure* structure = node.cell->structure(vm)) {
             if (JSGlobalObject* globalObject = structure->globalObject()) {
-                if (!m_environment.canAccessInspectedScriptState(globalObject->globalExec()))
+                if (!m_environment.canAccessInspectedScriptState(globalObject))
                     return false;
             }
         }
         return true;
     });
@@ -204,11 +204,11 @@
     if (!globalObject) {
         errorString = "Unable to get object details - GlobalObject"_s;
         return;
     }
 
-    InjectedScript injectedScript = m_injectedScriptManager.injectedScriptFor(globalObject->globalExec());
+    InjectedScript injectedScript = m_injectedScriptManager.injectedScriptFor(globalObject);
     if (injectedScript.hasNoValue()) {
         errorString = "Unable to get object details - InjectedScript"_s;
         return;
     }
 
@@ -245,11 +245,11 @@
     if (!globalObject) {
         errorString = "Unable to get object details - GlobalObject"_s;
         return;
     }
 
-    InjectedScript injectedScript = m_injectedScriptManager.injectedScriptFor(globalObject->globalExec());
+    InjectedScript injectedScript = m_injectedScriptManager.injectedScriptFor(globalObject);
     if (injectedScript.hasNoValue()) {
         errorString = "Unable to get object details - InjectedScript"_s;
         return;
     }
 
