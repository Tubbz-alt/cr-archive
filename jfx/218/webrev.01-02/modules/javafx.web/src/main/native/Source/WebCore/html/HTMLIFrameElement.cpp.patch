diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLIFrameElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLIFrameElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLIFrameElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLIFrameElement.cpp
@@ -49,10 +49,15 @@
 Ref<HTMLIFrameElement> HTMLIFrameElement::create(const QualifiedName& tagName, Document& document)
 {
     return adoptRef(*new HTMLIFrameElement(tagName, document));
 }
 
+int HTMLIFrameElement::defaultTabIndex() const
+{
+    return 0;
+}
+
 DOMTokenList& HTMLIFrameElement::sandbox()
 {
     if (!m_sandbox) {
         m_sandbox = makeUnique<DOMTokenList>(*this, sandboxAttr, [](Document&, StringView token) {
             return SecurityContext::isSupportedSandboxPolicy(token);
@@ -79,11 +84,11 @@
     else if (name == frameborderAttr) {
         // Frame border doesn't really match the HTML4 spec definition for iframes. It simply adds
         // a presentational hint that the border should be off if set to zero.
         if (!value.toInt()) {
             // Add a rule that nulls out our border width.
-            addPropertyToPresentationAttributeStyle(style, CSSPropertyBorderWidth, 0, CSSPrimitiveValue::CSS_PX);
+            addPropertyToPresentationAttributeStyle(style, CSSPropertyBorderWidth, 0, CSSUnitType::CSS_PX);
         }
     } else
         HTMLFrameElementBase::collectStyleForPresentationAttribute(name, value, style);
 }
 
@@ -95,11 +100,11 @@
 
         String invalidTokens;
         setSandboxFlags(value.isNull() ? SandboxNone : SecurityContext::parseSandboxPolicy(value, invalidTokens));
         if (!invalidTokens.isNull())
             document().addConsoleMessage(MessageSource::Other, MessageLevel::Error, "Error while parsing the 'sandbox' attribute: " + invalidTokens);
-    } else if (name == allowAttr)
+    } else if (name == allowAttr || name == allowfullscreenAttr || name == webkitallowfullscreenAttr)
         m_featurePolicy = WTF::nullopt;
     else
         HTMLFrameElementBase::parseAttribute(name, value);
 }
 
@@ -131,10 +136,10 @@
 }
 
 const FeaturePolicy& HTMLIFrameElement::featurePolicy() const
 {
     if (!m_featurePolicy)
-        m_featurePolicy = FeaturePolicy::parse(document(), attributeWithoutSynchronization(allowAttr));
+        m_featurePolicy = FeaturePolicy::parse(document(), *this, attributeWithoutSynchronization(allowAttr));
     return *m_featurePolicy;
 }
 
 }
