diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSPrimitiveValueMappings.h b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSPrimitiveValueMappings.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSPrimitiveValueMappings.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSPrimitiveValueMappings.h
@@ -30,11 +30,10 @@
 #pragma once
 
 #include "CSSCalculationValue.h"
 #include "CSSFontFamily.h"
 #include "CSSPrimitiveValue.h"
-#include "CSSReflectionDirection.h"
 #include "CSSToLengthConversionData.h"
 #include "CSSValueKeywords.h"
 #include "GraphicsTypes.h"
 #include "Length.h"
 #include "LineClampValue.h"
@@ -46,146 +45,142 @@
 #include "UnicodeBidi.h"
 #include "WritingMode.h"
 #include <wtf/MathExtras.h>
 #include <wtf/OptionSet.h>
 
-#if ENABLE(CSS_IMAGE_ORIENTATION)
-#include "ImageOrientation.h"
-#endif
-
 namespace WebCore {
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(short i)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_NUMBER;
+    setPrimitiveUnitType(CSSUnitType::CSS_NUMBER);
     m_value.num = static_cast<double>(i);
 }
 
 template<> inline CSSPrimitiveValue::operator short() const
 {
-    if (m_primitiveUnitType == CSS_NUMBER)
+    if (primitiveUnitType() == CSSUnitType::CSS_NUMBER)
         return clampTo<short>(m_value.num);
 
     ASSERT_NOT_REACHED();
     return 0;
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(unsigned short i)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_NUMBER;
+    setPrimitiveUnitType(CSSUnitType::CSS_NUMBER);
     m_value.num = static_cast<double>(i);
 }
 
 template<> inline CSSPrimitiveValue::operator unsigned short() const
 {
-    if (primitiveType() == CSS_NUMBER)
+    if (primitiveType() == CSSUnitType::CSS_NUMBER)
         return value<unsigned short>();
 
     ASSERT_NOT_REACHED();
     return 0;
 }
 
 template<> inline CSSPrimitiveValue::operator int() const
 {
-    if (primitiveType() == CSS_NUMBER)
+    if (primitiveType() == CSSUnitType::CSS_NUMBER)
         return value<int>();
 
     ASSERT_NOT_REACHED();
     return 0;
 }
 
 template<> inline CSSPrimitiveValue::operator unsigned() const
 {
-    if (primitiveType() == CSS_NUMBER)
+    if (primitiveType() == CSSUnitType::CSS_NUMBER)
         return value<unsigned>();
 
     ASSERT_NOT_REACHED();
     return 0;
 }
 
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(float i)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_NUMBER;
+    setPrimitiveUnitType(CSSUnitType::CSS_NUMBER);
     m_value.num = static_cast<double>(i);
 }
 
 template<> inline CSSPrimitiveValue::operator float() const
 {
-    if (primitiveType() == CSS_NUMBER)
+    if (primitiveType() == CSSUnitType::CSS_NUMBER)
         return value<float>();
 
     ASSERT_NOT_REACHED();
     return 0.0f;
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(LineClampValue i)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = i.isPercentage() ? CSS_PERCENTAGE : CSS_NUMBER;
+    setPrimitiveUnitType(i.isPercentage() ? CSSUnitType::CSS_PERCENTAGE : CSSUnitType::CSS_NUMBER);
     m_value.num = static_cast<double>(i.value());
 }
 
 template<> inline CSSPrimitiveValue::operator LineClampValue() const
 {
-    if (primitiveType() == CSS_NUMBER)
+    if (primitiveType() == CSSUnitType::CSS_NUMBER)
         return LineClampValue(value<int>(), LineClamp::LineCount);
 
-    if (primitiveType() == CSS_PERCENTAGE)
+    if (primitiveType() == CSSUnitType::CSS_PERCENTAGE)
         return LineClampValue(value<int>(), LineClamp::Percentage);
 
     ASSERT_NOT_REACHED();
     return LineClampValue();
 }
 
-template<> inline CSSPrimitiveValue::CSSPrimitiveValue(CSSReflectionDirection e)
+template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ReflectionDirection direction)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
-    switch (e) {
-    case ReflectionAbove:
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
+    switch (direction) {
+    case ReflectionDirection::Above:
         m_value.valueID = CSSValueAbove;
         break;
-    case ReflectionBelow:
+    case ReflectionDirection::Below:
         m_value.valueID = CSSValueBelow;
         break;
-    case ReflectionLeft:
+    case ReflectionDirection::Left:
         m_value.valueID = CSSValueLeft;
         break;
-    case ReflectionRight:
+    case ReflectionDirection::Right:
         m_value.valueID = CSSValueRight;
     }
 }
 
-template<> inline CSSPrimitiveValue::operator CSSReflectionDirection() const
+template<> inline CSSPrimitiveValue::operator ReflectionDirection() const
 {
     ASSERT(isValueID());
 
     switch (m_value.valueID) {
     case CSSValueAbove:
-        return ReflectionAbove;
+        return ReflectionDirection::Above;
     case CSSValueBelow:
-        return ReflectionBelow;
+        return ReflectionDirection::Below;
     case CSSValueLeft:
-        return ReflectionLeft;
+        return ReflectionDirection::Left;
     case CSSValueRight:
-        return ReflectionRight;
+        return ReflectionDirection::Right;
     default:
         break;
     }
 
     ASSERT_NOT_REACHED();
-    return ReflectionBelow;
+    return ReflectionDirection::Below;
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ColumnFill columnFill)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (columnFill) {
     case ColumnFill::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case ColumnFill::Balance:
@@ -194,11 +189,11 @@
     }
 }
 
 template<> inline CSSPrimitiveValue::operator ColumnFill() const
 {
-    if (m_primitiveUnitType == CSS_VALUE_ID) {
+    if (primitiveUnitType() == CSSUnitType::CSS_VALUE_ID) {
         if (m_value.valueID == CSSValueBalance)
             return ColumnFill::Balance;
         if (m_value.valueID == CSSValueAuto)
             return ColumnFill::Auto;
     }
@@ -207,11 +202,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ColumnSpan columnSpan)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (columnSpan) {
     case ColumnSpan::All:
         m_value.valueID = CSSValueAll;
         break;
     case ColumnSpan::None:
@@ -221,11 +216,11 @@
 }
 
 template<> inline CSSPrimitiveValue::operator ColumnSpan() const
 {
     // Map 1 to none for compatibility reasons.
-    if (m_primitiveUnitType == CSS_NUMBER && m_value.num == 1)
+    if (primitiveUnitType() == CSSUnitType::CSS_NUMBER && m_value.num == 1)
         return ColumnSpan::None;
 
     ASSERT(isValueID());
 
     switch (m_value.valueID) {
@@ -243,11 +238,11 @@
 
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(PrintColorAdjust value)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (value) {
     case PrintColorAdjust::Exact:
         m_value.valueID = CSSValueExact;
         break;
     case PrintColorAdjust::Economy:
@@ -275,11 +270,11 @@
 
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BorderStyle e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BorderStyle::None:
         m_value.valueID = CSSValueNone;
         break;
     case BorderStyle::Hidden:
@@ -331,52 +326,52 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(CompositeOperator e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
-    case CompositeClear:
+    case CompositeOperator::Clear:
         m_value.valueID = CSSValueClear;
         break;
-    case CompositeCopy:
+    case CompositeOperator::Copy:
         m_value.valueID = CSSValueCopy;
         break;
-    case CompositeSourceOver:
+    case CompositeOperator::SourceOver:
         m_value.valueID = CSSValueSourceOver;
         break;
-    case CompositeSourceIn:
+    case CompositeOperator::SourceIn:
         m_value.valueID = CSSValueSourceIn;
         break;
-    case CompositeSourceOut:
+    case CompositeOperator::SourceOut:
         m_value.valueID = CSSValueSourceOut;
         break;
-    case CompositeSourceAtop:
+    case CompositeOperator::SourceAtop:
         m_value.valueID = CSSValueSourceAtop;
         break;
-    case CompositeDestinationOver:
+    case CompositeOperator::DestinationOver:
         m_value.valueID = CSSValueDestinationOver;
         break;
-    case CompositeDestinationIn:
+    case CompositeOperator::DestinationIn:
         m_value.valueID = CSSValueDestinationIn;
         break;
-    case CompositeDestinationOut:
+    case CompositeOperator::DestinationOut:
         m_value.valueID = CSSValueDestinationOut;
         break;
-    case CompositeDestinationAtop:
+    case CompositeOperator::DestinationAtop:
         m_value.valueID = CSSValueDestinationAtop;
         break;
-    case CompositeXOR:
+    case CompositeOperator::XOR:
         m_value.valueID = CSSValueXor;
         break;
-    case CompositePlusDarker:
+    case CompositeOperator::PlusDarker:
         m_value.valueID = CSSValuePlusDarker;
         break;
-    case CompositePlusLighter:
+    case CompositeOperator::PlusLighter:
         m_value.valueID = CSSValuePlusLighter;
         break;
-    case CompositeDifference:
+    case CompositeOperator::Difference:
         ASSERT_NOT_REACHED();
         break;
     }
 }
 
@@ -384,47 +379,47 @@
 {
     ASSERT(isValueID());
 
     switch (m_value.valueID) {
     case CSSValueClear:
-        return CompositeClear;
+        return CompositeOperator::Clear;
     case CSSValueCopy:
-        return CompositeCopy;
+        return CompositeOperator::Copy;
     case CSSValueSourceOver:
-        return CompositeSourceOver;
+        return CompositeOperator::SourceOver;
     case CSSValueSourceIn:
-        return CompositeSourceIn;
+        return CompositeOperator::SourceIn;
     case CSSValueSourceOut:
-        return CompositeSourceOut;
+        return CompositeOperator::SourceOut;
     case CSSValueSourceAtop:
-        return CompositeSourceAtop;
+        return CompositeOperator::SourceAtop;
     case CSSValueDestinationOver:
-        return CompositeDestinationOver;
+        return CompositeOperator::DestinationOver;
     case CSSValueDestinationIn:
-        return CompositeDestinationIn;
+        return CompositeOperator::DestinationIn;
     case CSSValueDestinationOut:
-        return CompositeDestinationOut;
+        return CompositeOperator::DestinationOut;
     case CSSValueDestinationAtop:
-        return CompositeDestinationAtop;
+        return CompositeOperator::DestinationAtop;
     case CSSValueXor:
-        return CompositeXOR;
+        return CompositeOperator::XOR;
     case CSSValuePlusDarker:
-        return CompositePlusDarker;
+        return CompositeOperator::PlusDarker;
     case CSSValuePlusLighter:
-        return CompositePlusLighter;
+        return CompositeOperator::PlusLighter;
     default:
         break;
     }
 
     ASSERT_NOT_REACHED();
-    return CompositeClear;
+    return CompositeOperator::Clear;
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ControlPart e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case NoControlPart:
         m_value.valueID = CSSValueNone;
         break;
     case CheckboxPart:
@@ -645,11 +640,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BackfaceVisibility e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BackfaceVisibility::Visible:
         m_value.valueID = CSSValueVisible;
         break;
     case BackfaceVisibility::Hidden:
@@ -677,11 +672,11 @@
 
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(FillAttachment e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case FillAttachment::ScrollBackground:
         m_value.valueID = CSSValueScroll;
         break;
     case FillAttachment::LocalBackground:
@@ -713,11 +708,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(FillBox e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case FillBox::Border:
         m_value.valueID = CSSValueBorderBox;
         break;
     case FillBox::Padding:
@@ -758,11 +753,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(FillRepeat e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case FillRepeat::Repeat:
         m_value.valueID = CSSValueRepeat;
         break;
     case FillRepeat::NoRepeat:
@@ -799,11 +794,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BoxPack e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BoxPack::Start:
         m_value.valueID = CSSValueStart;
         break;
     case BoxPack::Center:
@@ -840,11 +835,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BoxAlignment e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BoxAlignment::Stretch:
         m_value.valueID = CSSValueStretch;
         break;
     case BoxAlignment::Start:
@@ -887,11 +882,11 @@
 
 #if ENABLE(CSS_BOX_DECORATION_BREAK)
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BoxDecorationBreak e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BoxDecorationBreak::Slice:
         m_value.valueID = CSSValueSlice;
         break;
     case BoxDecorationBreak::Clone:
@@ -919,11 +914,11 @@
 #endif
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(Edge e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case Edge::Top:
         m_value.valueID = CSSValueTop;
         break;
     case Edge::Right:
@@ -960,11 +955,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BoxSizing e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BoxSizing::BorderBox:
         m_value.valueID = CSSValueBorderBox;
         break;
     case BoxSizing::ContentBox:
@@ -991,11 +986,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BoxDirection e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BoxDirection::Normal:
         m_value.valueID = CSSValueNormal;
         break;
     case BoxDirection::Reverse:
@@ -1022,11 +1017,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BoxLines e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BoxLines::Single:
         m_value.valueID = CSSValueSingle;
         break;
     case BoxLines::Multiple:
@@ -1053,11 +1048,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BoxOrient e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BoxOrient::Horizontal:
         m_value.valueID = CSSValueHorizontal;
         break;
     case BoxOrient::Vertical:
@@ -1086,11 +1081,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(CaptionSide e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case CaptionSide::Left:
         m_value.valueID = CSSValueLeft;
         break;
     case CaptionSide::Right:
@@ -1127,11 +1122,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(Clear e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case Clear::None:
         m_value.valueID = CSSValueNone;
         break;
     case Clear::Left:
@@ -1168,11 +1163,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(CursorType e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case CursorType::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case CursorType::Default:
@@ -1306,11 +1301,11 @@
 
 #if ENABLE(CURSOR_VISIBILITY)
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(CursorVisibility e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case CursorVisibility::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case CursorVisibility::AutoHide:
@@ -1334,24 +1329,21 @@
 #endif
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(DisplayType e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case DisplayType::Inline:
         m_value.valueID = CSSValueInline;
         break;
     case DisplayType::Block:
         m_value.valueID = CSSValueBlock;
         break;
     case DisplayType::ListItem:
         m_value.valueID = CSSValueListItem;
         break;
-    case DisplayType::Compact:
-        m_value.valueID = CSSValueCompact;
-        break;
     case DisplayType::InlineBlock:
         m_value.valueID = CSSValueInlineBlock;
         break;
     case DisplayType::Table:
         m_value.valueID = CSSValueTable;
@@ -1432,11 +1424,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(EmptyCell e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case EmptyCell::Show:
         m_value.valueID = CSSValueShow;
         break;
     case EmptyCell::Hide:
@@ -1463,11 +1455,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(FlexDirection e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case FlexDirection::Row:
         m_value.valueID = CSSValueRow;
         break;
     case FlexDirection::RowReverse:
@@ -1504,11 +1496,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(AlignContent e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case AlignContent::FlexStart:
         m_value.valueID = CSSValueFlexStart;
         break;
     case AlignContent::FlexEnd:
@@ -1555,11 +1547,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(FlexWrap e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case FlexWrap::NoWrap:
         m_value.valueID = CSSValueNowrap;
         break;
     case FlexWrap::Wrap:
@@ -1591,11 +1583,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(Float e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case Float::No:
         m_value.valueID = CSSValueNone;
         break;
     case Float::Left:
@@ -1628,11 +1620,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(LineBreak e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case LineBreak::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case LineBreak::Loose:
@@ -1702,11 +1694,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ListStylePosition e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case ListStylePosition::Outside:
         m_value.valueID = CSSValueOutside;
         break;
     case ListStylePosition::Inside:
@@ -1733,11 +1725,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ListStyleType e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case ListStyleType::Afar:
         m_value.valueID = CSSValueAfar;
         break;
     case ListStyleType::Amharic:
@@ -1996,11 +1988,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(MarginCollapse e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case MarginCollapse::Collapse:
         m_value.valueID = CSSValueCollapse;
         break;
     case MarginCollapse::Separate:
@@ -2032,11 +2024,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(MarqueeBehavior e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case MarqueeBehavior::None:
         m_value.valueID = CSSValueNone;
         break;
     case MarqueeBehavior::Scroll:
@@ -2073,11 +2065,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(MarqueeDirection direction)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (direction) {
     case MarqueeDirection::Forward:
         m_value.valueID = CSSValueForwards;
         break;
     case MarqueeDirection::Backward:
@@ -2131,11 +2123,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(NBSPMode e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case NBSPMode::Normal:
         m_value.valueID = CSSValueNormal;
         break;
     case NBSPMode::Space:
@@ -2162,11 +2154,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(Overflow e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case Overflow::Visible:
         m_value.valueID = CSSValueVisible;
         break;
     case Overflow::Hidden:
@@ -2214,11 +2206,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BreakBetween e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BreakBetween::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case BreakBetween::Avoid:
@@ -2285,11 +2277,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BreakInside e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BreakInside::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case BreakInside::Avoid:
@@ -2326,11 +2318,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(PositionType e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case PositionType::Static:
         m_value.valueID = CSSValueStatic;
         break;
     case PositionType::Relative:
@@ -2373,11 +2365,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(Resize e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case Resize::Both:
         m_value.valueID = CSSValueBoth;
         break;
     case Resize::Horizontal:
@@ -2417,11 +2409,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TableLayoutType e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TableLayoutType::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case TableLayoutType::Fixed:
@@ -2448,11 +2440,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextAlignMode e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TextAlignMode::Start:
         m_value.valueID = CSSValueStart;
         break;
     case TextAlignMode::End:
@@ -2499,11 +2491,11 @@
 
 #if ENABLE(CSS3_TEXT)
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextAlignLast e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TextAlignLast::Start:
         m_value.valueID = CSSValueStart;
         break;
     case TextAlignLast::End:
@@ -2555,11 +2547,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextJustify e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TextJustify::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case TextJustify::None:
@@ -2647,11 +2639,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextUnderlinePosition position)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (position) {
     case TextUnderlinePosition::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case TextUnderlinePosition::Under:
@@ -2686,11 +2678,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextSecurity e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TextSecurity::None:
         m_value.valueID = CSSValueNone;
         break;
     case TextSecurity::Disc:
@@ -2727,11 +2719,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextTransform e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TextTransform::Capitalize:
         m_value.valueID = CSSValueCapitalize;
         break;
     case TextTransform::Uppercase:
@@ -2768,11 +2760,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(EUnicodeBidi e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case UBNormal:
         m_value.valueID = CSSValueNormal;
         break;
     case Embed:
@@ -2822,11 +2814,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(UserDrag e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case UserDrag::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case UserDrag::None:
@@ -2860,11 +2852,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(UserModify e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case UserModify::ReadOnly:
         m_value.valueID = CSSValueReadOnly;
         break;
     case UserModify::ReadWrite:
@@ -2896,11 +2888,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(UserSelect e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case UserSelect::None:
         m_value.valueID = CSSValueNone;
         break;
     case UserSelect::Text:
@@ -2934,11 +2926,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(VerticalAlign a)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (a) {
     case VerticalAlign::Top:
         m_value.valueID = CSSValueTop;
         break;
     case VerticalAlign::Bottom:
@@ -3002,11 +2994,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(Visibility e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case Visibility::Visible:
         m_value.valueID = CSSValueVisible;
         break;
     case Visibility::Hidden:
@@ -3038,11 +3030,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(WhiteSpace e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case WhiteSpace::Normal:
         m_value.valueID = CSSValueNormal;
         break;
     case WhiteSpace::Pre:
@@ -3094,11 +3086,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(WordBreak e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case WordBreak::Normal:
         m_value.valueID = CSSValueNormal;
         break;
     case WordBreak::BreakAll:
@@ -3135,11 +3127,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(OverflowWrap e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case OverflowWrap::Normal:
         m_value.valueID = CSSValueNormal;
         break;
     case OverflowWrap::Break:
@@ -3166,11 +3158,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextDirection e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TextDirection::LTR:
         m_value.valueID = CSSValueLtr;
         break;
     case TextDirection::RTL:
@@ -3197,11 +3189,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(WritingMode e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TopToBottomWritingMode:
         m_value.valueID = CSSValueHorizontalTb;
         break;
     case RightToLeftWritingMode:
@@ -3244,11 +3236,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextCombine e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TextCombine::None:
         m_value.valueID = CSSValueNone;
         break;
     case TextCombine::Horizontal:
@@ -3275,11 +3267,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(RubyPosition position)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (position) {
     case RubyPosition::Before:
         m_value.valueID = CSSValueBefore;
         break;
     case RubyPosition::After:
@@ -3311,11 +3303,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextOverflow overflow)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (overflow) {
     case TextOverflow::Clip:
         m_value.valueID = CSSValueClip;
         break;
     case TextOverflow::Ellipsis:
@@ -3342,11 +3334,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextEmphasisFill fill)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (fill) {
     case TextEmphasisFill::Filled:
         m_value.valueID = CSSValueFilled;
         break;
     case TextEmphasisFill::Open:
@@ -3373,11 +3365,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextEmphasisMark mark)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (mark) {
     case TextEmphasisMark::Dot:
         m_value.valueID = CSSValueDot;
         break;
     case TextEmphasisMark::Circle:
@@ -3427,11 +3419,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextOrientation e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TextOrientation::Sideways:
         m_value.valueID = CSSValueSideways;
         break;
     case TextOrientation::Mixed:
@@ -3467,11 +3459,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(PointerEvents e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case PointerEvents::None:
         m_value.valueID = CSSValueNone;
         break;
     case PointerEvents::Stroke:
@@ -3493,10 +3485,13 @@
         m_value.valueID = CSSValueVisibleFill;
         break;
     case PointerEvents::VisiblePainted:
         m_value.valueID = CSSValueVisiblePainted;
         break;
+    case PointerEvents::BoundingBox:
+        m_value.valueID = CSSValueBoundingBox;
+        break;
     case PointerEvents::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case PointerEvents::All:
         m_value.valueID = CSSValueAll;
@@ -3527,10 +3522,12 @@
         return PointerEvents::Painted;
     case CSSValueFill:
         return PointerEvents::Fill;
     case CSSValueStroke:
         return PointerEvents::Stroke;
+    case CSSValueBoundingBox:
+        return PointerEvents::BoundingBox;
     default:
         break;
     }
 
     ASSERT_NOT_REACHED();
@@ -3538,11 +3535,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(Kerning kerning)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (kerning) {
     case Kerning::Auto:
         m_value.valueID = CSSValueAuto;
         return;
     case Kerning::Normal:
@@ -3577,11 +3574,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ObjectFit fit)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (fit) {
     case ObjectFit::Fill:
         m_value.valueID = CSSValueFill;
         break;
     case ObjectFit::Contain:
@@ -3621,11 +3618,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(FontSmoothingMode smoothing)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (smoothing) {
     case FontSmoothingMode::AutoSmoothing:
         m_value.valueID = CSSValueAuto;
         return;
     case FontSmoothingMode::NoSmoothing:
@@ -3665,11 +3662,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(FontSmallCaps smallCaps)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (smallCaps) {
     case FontSmallCaps::Off:
         m_value.valueID = CSSValueNormal;
         return;
     case FontSmallCaps::On:
@@ -3698,11 +3695,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextRenderingMode e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TextRenderingMode::AutoTextRendering:
         m_value.valueID = CSSValueAuto;
         break;
     case TextRenderingMode::OptimizeSpeed:
@@ -3739,11 +3736,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(Hyphens hyphens)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (hyphens) {
     case Hyphens::None:
         m_value.valueID = CSSValueNone;
         break;
     case Hyphens::Manual:
@@ -3775,11 +3772,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(LineSnap gridSnap)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (gridSnap) {
     case LineSnap::None:
         m_value.valueID = CSSValueNone;
         break;
     case LineSnap::Baseline:
@@ -3811,11 +3808,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(LineAlign lineAlign)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (lineAlign) {
     case LineAlign::None:
         m_value.valueID = CSSValueNone;
         break;
     case LineAlign::Edges:
@@ -3842,11 +3839,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(SpeakAs e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case SpeakAs::Normal:
         m_value.valueID = CSSValueNormal;
         break;
     case SpeakAs::SpellOut:
@@ -3882,11 +3879,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(Order e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case Order::Logical:
         m_value.valueID = CSSValueLogical;
         break;
     case Order::Visual:
@@ -3919,11 +3916,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BlendMode blendMode)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (blendMode) {
     case BlendMode::Normal:
         m_value.valueID = CSSValueNormal;
         break;
     case BlendMode::Multiply:
@@ -4030,11 +4027,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(Isolation isolation)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (isolation) {
     case Isolation::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case Isolation::Isolate:
@@ -4062,11 +4059,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(LineCap e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case ButtCap:
         m_value.valueID = CSSValueButt;
         break;
     case RoundCap:
@@ -4098,11 +4095,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(LineJoin e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case MiterJoin:
         m_value.valueID = CSSValueMiter;
         break;
     case RoundJoin:
@@ -4134,11 +4131,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(WindRule e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case WindRule::NonZero:
         m_value.valueID = CSSValueNonzero;
         break;
     case WindRule::EvenOdd:
@@ -4166,11 +4163,11 @@
 
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(AlignmentBaseline e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case AlignmentBaseline::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case AlignmentBaseline::Baseline:
@@ -4247,11 +4244,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BorderCollapse e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BorderCollapse::Separate:
         m_value.valueID = CSSValueSeparate;
         break;
     case BorderCollapse::Collapse:
@@ -4278,11 +4275,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BorderFit e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BorderFit::Border:
         m_value.valueID = CSSValueBorder;
         break;
     case BorderFit::Lines:
@@ -4309,11 +4306,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ImageRendering imageRendering)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (imageRendering) {
     case ImageRendering::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case ImageRendering::CrispEdges:
@@ -4357,11 +4354,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TransformStyle3D e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TransformStyle3D::Flat:
         m_value.valueID = CSSValueFlat;
         break;
     case TransformStyle3D::Preserve3D:
@@ -4388,12 +4385,18 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TransformBox box)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (box) {
+    case TransformBox::StrokeBox:
+        m_value.valueID = CSSValueStrokeBox;
+        break;
+    case TransformBox::ContentBox:
+        m_value.valueID = CSSValueContentBox;
+        break;
     case TransformBox::BorderBox:
         m_value.valueID = CSSValueBorderBox;
         break;
     case TransformBox::FillBox:
         m_value.valueID = CSSValueFillBox;
@@ -4407,10 +4410,14 @@
 template<> inline CSSPrimitiveValue::operator TransformBox() const
 {
     ASSERT(isValueID());
 
     switch (m_value.valueID) {
+    case CSSValueStrokeBox:
+        return TransformBox::StrokeBox;
+    case CSSValueContentBox:
+        return TransformBox::ContentBox;
     case CSSValueBorderBox:
         return TransformBox::BorderBox;
     case CSSValueFillBox:
         return TransformBox::FillBox;
     case CSSValueViewBox:
@@ -4424,11 +4431,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ColumnAxis e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case ColumnAxis::Horizontal:
         m_value.valueID = CSSValueHorizontal;
         break;
     case ColumnAxis::Vertical:
@@ -4460,11 +4467,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ColumnProgression e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case ColumnProgression::Normal:
         m_value.valueID = CSSValueNormal;
         break;
     case ColumnProgression::Reverse:
@@ -4501,14 +4508,14 @@
 
 inline bool CSSPrimitiveValue::convertingToLengthRequiresNonNullStyle(int lengthConversion) const
 {
     ASSERT(isFontRelativeLength());
     // This matches the implementation in CSSPrimitiveValue::computeLengthDouble().
-    switch (m_primitiveUnitType) {
-    case CSS_EMS:
-    case CSS_EXS:
-    case CSS_CHS:
+    switch (primitiveUnitType()) {
+    case CSSUnitType::CSS_EMS:
+    case CSSUnitType::CSS_EXS:
+    case CSSUnitType::CSS_CHS:
         return lengthConversion & (FixedIntegerConversion | FixedFloatConversion);
     default:
         return false;
     }
 }
@@ -4531,11 +4538,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(BufferedRendering e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case BufferedRendering::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case BufferedRendering::Dynamic:
@@ -4567,11 +4574,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ColorInterpolation e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case ColorInterpolation::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case ColorInterpolation::SRGB:
@@ -4603,11 +4610,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ColorRendering e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case ColorRendering::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case ColorRendering::OptimizeSpeed:
@@ -4639,11 +4646,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(DominantBaseline e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case DominantBaseline::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case DominantBaseline::UseScript:
@@ -4720,11 +4727,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ShapeRendering e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case ShapeRendering::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case ShapeRendering::OptimizeSpeed:
@@ -4761,11 +4768,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextAnchor e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TextAnchor::Start:
         m_value.valueID = CSSValueStart;
         break;
     case TextAnchor::Middle:
@@ -4797,25 +4804,25 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(const Color& color)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_RGBCOLOR;
+    setPrimitiveUnitType(CSSUnitType::CSS_RGBCOLOR);
     m_value.color = new Color(color);
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(CSSFontFamily fontFamily)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_FONT_FAMILY;
+    setPrimitiveUnitType(CSSUnitType::CSS_FONT_FAMILY);
     m_value.fontFamily = new CSSFontFamily(WTFMove(fontFamily));
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(VectorEffect e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case VectorEffect::None:
         m_value.valueID = CSSValueNone;
         break;
     case VectorEffect::NonScalingStroke:
@@ -4842,11 +4849,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(MaskType e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case MaskType::Luminance:
         m_value.valueID = CSSValueLuminance;
         break;
     case MaskType::Alpha:
@@ -4870,64 +4877,14 @@
 
     ASSERT_NOT_REACHED();
     return MaskType::Luminance;
 }
 
-#if ENABLE(CSS_IMAGE_ORIENTATION)
-
-template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ImageOrientation e)
-    : CSSValue(PrimitiveClass)
-{
-    m_primitiveUnitType = CSS_DEG;
-    switch (e) {
-    case ImageOrientation::OriginTopLeft:
-        m_value.num = 0;
-        break;
-    case ImageOrientation::OriginRightTop:
-        m_value.num = 90;
-        break;
-    case ImageOrientation::OriginBottomRight:
-        m_value.num = 180;
-        break;
-    case ImageOrientation::OriginLeftBottom:
-        m_value.num = 270;
-        break;
-    case ImageOrientation::FromImage:
-    case ImageOrientation::OriginTopRight:
-    case ImageOrientation::OriginLeftTop:
-    case ImageOrientation::OriginBottomLeft:
-    case ImageOrientation::OriginRightBottom:
-        ASSERT_NOT_REACHED();
-    }
-}
-
-template<> inline CSSPrimitiveValue::operator ImageOrientation() const
-{
-    ASSERT(isAngle());
-    double quarters = 4 * doubleValue(CSS_TURN);
-    int orientation = 3 & static_cast<int>(quarters < 0 ? floor(quarters) : ceil(quarters));
-    switch (orientation) {
-    case 0:
-        return ImageOrientation::OriginTopLeft;
-    case 1:
-        return ImageOrientation::OriginRightTop;
-    case 2:
-        return ImageOrientation::OriginBottomRight;
-    case 3:
-        return ImageOrientation::OriginLeftBottom;
-    }
-
-    ASSERT_NOT_REACHED();
-    return ImageOrientation::None;
-}
-
-#endif // ENABLE(CSS_IMAGE_ORIENTATION)
-
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(CSSBoxType cssBox)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (cssBox) {
     case CSSBoxType::MarginBox:
         m_value.valueID = CSSValueMarginBox;
         break;
     case CSSBoxType::BorderBox:
@@ -4981,11 +4938,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ItemPosition itemPosition)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (itemPosition) {
     case ItemPosition::Legacy:
         m_value.valueID = CSSValueLegacy;
         break;
     case ItemPosition::Auto:
@@ -5076,11 +5033,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(OverflowAlignment overflowAlignment)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (overflowAlignment) {
     case OverflowAlignment::Default:
         m_value.valueID = CSSValueDefault;
         break;
     case OverflowAlignment::Unsafe:
@@ -5107,11 +5064,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ContentPosition contentPosition)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (contentPosition) {
     case ContentPosition::Normal:
         m_value.valueID = CSSValueNormal;
         break;
     case ContentPosition::Baseline:
@@ -5177,11 +5134,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ContentDistribution contentDistribution)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (contentDistribution) {
     case ContentDistribution::Default:
         m_value.valueID = CSSValueDefault;
         break;
     case ContentDistribution::SpaceBetween:
@@ -5235,11 +5192,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TextZoom textZoom)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (textZoom) {
     case TextZoom::Normal:
         m_value.valueID = CSSValueNormal;
         return;
     case TextZoom::Reset:
@@ -5253,11 +5210,11 @@
 
 #if ENABLE(POINTER_EVENTS)
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TouchAction touchAction)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (touchAction) {
     case TouchAction::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case TouchAction::Manipulation:
@@ -5305,11 +5262,11 @@
 #if ENABLE(CSS_SCROLL_SNAP)
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ScrollSnapStrictness strictness)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (strictness) {
     case ScrollSnapStrictness::None:
         m_value.valueID = CSSValueNone;
         break;
     case ScrollSnapStrictness::Proximity:
@@ -5338,11 +5295,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ScrollSnapAxis axis)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (axis) {
     case ScrollSnapAxis::XAxis:
         m_value.valueID = CSSValueX;
         break;
     case ScrollSnapAxis::YAxis:
@@ -5381,11 +5338,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ScrollSnapAxisAlignType type)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (type) {
     case ScrollSnapAxisAlignType::None:
         m_value.valueID = CSSValueNone;
         break;
     case ScrollSnapAxisAlignType::Start:
@@ -5422,11 +5379,11 @@
 
 #if ENABLE(CSS_TRAILING_WORD)
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(TrailingWord e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case TrailingWord::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case TrailingWord::PartiallyBalanced:
@@ -5456,11 +5413,11 @@
 
 #if ENABLE(APPLE_PAY)
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ApplePayButtonStyle e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case ApplePayButtonStyle::White:
         m_value.valueID = CSSValueWhite;
         break;
     case ApplePayButtonStyle::WhiteOutline:
@@ -5493,11 +5450,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(ApplePayButtonType e)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (e) {
     case ApplePayButtonType::Plain:
         m_value.valueID = CSSValuePlain;
         break;
     case ApplePayButtonType::Buy:
@@ -5556,11 +5513,11 @@
 #endif
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(FontVariantPosition position)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (position) {
     case FontVariantPosition::Normal:
         m_value.valueID = CSSValueNormal;
         break;
     case FontVariantPosition::Subscript:
@@ -5593,11 +5550,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(FontVariantCaps caps)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (caps) {
     case FontVariantCaps::Normal:
         m_value.valueID = CSSValueNormal;
         break;
     case FontVariantCaps::Small:
@@ -5650,11 +5607,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(FontVariantAlternates alternates)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (alternates) {
     case FontVariantAlternates::Normal:
         m_value.valueID = CSSValueNormal;
         break;
     case FontVariantAlternates::HistoricalForms:
@@ -5682,11 +5639,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(FontOpticalSizing sizing)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (sizing) {
     case FontOpticalSizing::Enabled:
         m_value.valueID = CSSValueAuto;
         break;
     case FontOpticalSizing::Disabled:
@@ -5714,11 +5671,11 @@
 }
 
 template<> inline CSSPrimitiveValue::CSSPrimitiveValue(FontLoadingBehavior behavior)
     : CSSValue(PrimitiveClass)
 {
-    m_primitiveUnitType = CSS_VALUE_ID;
+    setPrimitiveUnitType(CSSUnitType::CSS_VALUE_ID);
     switch (behavior) {
     case FontLoadingBehavior::Auto:
         m_value.valueID = CSSValueAuto;
         break;
     case FontLoadingBehavior::Block:
