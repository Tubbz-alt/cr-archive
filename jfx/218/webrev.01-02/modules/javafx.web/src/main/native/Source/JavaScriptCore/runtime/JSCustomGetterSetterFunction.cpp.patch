diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCustomGetterSetterFunction.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCustomGetterSetterFunction.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCustomGetterSetterFunction.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCustomGetterSetterFunction.cpp
@@ -33,37 +33,37 @@
 
 namespace JSC {
 
 const ClassInfo JSCustomGetterSetterFunction::s_info = { "Function", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSCustomGetterSetterFunction) };
 
-EncodedJSValue JSC_HOST_CALL JSCustomGetterSetterFunction::customGetterSetterFunctionCall(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL JSCustomGetterSetterFunction::customGetterSetterFunctionCall(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    JSCustomGetterSetterFunction* customGetterSetterFunction = jsCast<JSCustomGetterSetterFunction*>(exec->jsCallee());
+    JSCustomGetterSetterFunction* customGetterSetterFunction = jsCast<JSCustomGetterSetterFunction*>(callFrame->jsCallee());
     CustomGetterSetter* customGetterSetter = customGetterSetterFunction->customGetterSetter();
-    JSValue thisValue = exec->thisValue();
+    JSValue thisValue = callFrame->thisValue();
 
     if (customGetterSetterFunction->isSetter()) {
         CustomGetterSetter::CustomSetter setter = customGetterSetter->setter();
         ASSERT(setter);
-        callCustomSetter(exec, setter, true, thisValue, exec->argument(0));
+        callCustomSetter(globalObject, setter, true, thisValue, callFrame->argument(0));
         return JSValue::encode(jsUndefined());
     }
 
     if (customGetterSetter->inherits<DOMAttributeGetterSetter>(vm)) {
         auto domAttribute = jsCast<DOMAttributeGetterSetter*>(customGetterSetter)->domAttribute();
         if (!thisValue.inherits(vm, domAttribute.classInfo))
-            return throwVMDOMAttributeGetterTypeError(exec, scope, domAttribute.classInfo, customGetterSetterFunction->propertyName());
+            return throwVMDOMAttributeGetterTypeError(globalObject, scope, domAttribute.classInfo, customGetterSetterFunction->propertyName());
     }
 
-    return customGetterSetter->getter()(exec, JSValue::encode(thisValue), customGetterSetterFunction->propertyName());
+    return customGetterSetter->getter()(globalObject, JSValue::encode(thisValue), customGetterSetterFunction->propertyName());
 }
 
-JSCustomGetterSetterFunction::JSCustomGetterSetterFunction(VM& vm, JSGlobalObject* globalObject, Structure* structure, const Type type, const PropertyName& propertyName)
-    : Base(vm, globalObject, structure)
+JSCustomGetterSetterFunction::JSCustomGetterSetterFunction(VM& vm, NativeExecutable* executable, JSGlobalObject* globalObject, Structure* structure, const Type type, const PropertyName& propertyName)
+    : Base(vm, executable, globalObject, structure)
     , m_type(type)
     , m_propertyName(propertyName)
 {
 }
 
@@ -75,11 +75,11 @@
     String name = makeString(prefix, String(propertyName.publicName()));
 
     NativeExecutable* executable = vm.getHostFunction(customGetterSetterFunctionCall, callHostFunctionAsConstructor, String(propertyName.publicName()));
 
     Structure* structure = globalObject->customGetterSetterFunctionStructure();
-    JSCustomGetterSetterFunction* function = new (NotNull, allocateCell<JSCustomGetterSetterFunction>(vm.heap)) JSCustomGetterSetterFunction(vm, globalObject, structure, type, propertyName);
+    JSCustomGetterSetterFunction* function = new (NotNull, allocateCell<JSCustomGetterSetterFunction>(vm.heap)) JSCustomGetterSetterFunction(vm, executable, globalObject, structure, type, propertyName);
 
     // Can't do this during initialization because getHostFunction might do a GC allocation.
     function->finishCreation(vm, executable, getterSetter, name);
     return function;
 }
