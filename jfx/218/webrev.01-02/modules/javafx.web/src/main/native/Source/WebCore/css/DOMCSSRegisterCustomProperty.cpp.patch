diff a/modules/javafx.web/src/main/native/Source/WebCore/css/DOMCSSRegisterCustomProperty.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/DOMCSSRegisterCustomProperty.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/DOMCSSRegisterCustomProperty.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/DOMCSSRegisterCustomProperty.cpp
@@ -31,11 +31,13 @@
 #include "CSSPropertyParser.h"
 #include "CSSRegisteredCustomProperty.h"
 #include "CSSTokenizer.h"
 #include "DOMCSSNamespace.h"
 #include "Document.h"
+#include "StyleBuilder.h"
 #include "StyleBuilderConverter.h"
+#include "StyleResolver.h"
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 ExceptionOr<void> DOMCSSRegisterCustomProperty::registerProperty(Document& document, const DOMCSSCustomPropertyDescriptor& descriptor)
@@ -44,24 +46,29 @@
         return Exception { SyntaxError, "The name of this property is not a custom property name." };
 
     RefPtr<CSSCustomPropertyValue> initialValue;
     if (!descriptor.initialValue.isEmpty()) {
         CSSTokenizer tokenizer(descriptor.initialValue);
-        StyleResolver styleResolver(document);
+        Style::Resolver styleResolver(document);
 
         // We need to initialize this so that we can successfully parse computationally dependent values (like em units).
         // We don't actually need the values to be accurate, since they will be rejected later anyway
-        styleResolver.applyPropertyToStyle(CSSPropertyInvalid, nullptr, styleResolver.defaultStyleForElement());
-        styleResolver.updateFont();
+        auto style = styleResolver.defaultStyleForElement(nullptr);
 
         HashSet<CSSPropertyID> dependencies;
         CSSPropertyParser::collectParsedCustomPropertyValueDependencies(descriptor.syntax, false, dependencies, tokenizer.tokenRange(), strictCSSParserContext());
 
         if (!dependencies.isEmpty())
             return Exception { SyntaxError, "The given initial value must be computationally independent." };
 
-        initialValue = CSSPropertyParser::parseTypedCustomPropertyValue(descriptor.name, descriptor.syntax, tokenizer.tokenRange(), styleResolver, strictCSSParserContext());
+
+        Style::MatchResult matchResult;
+
+        auto parentStyle = RenderStyle::clone(*style);
+        Style::Builder dummyBuilder(*style, { document, parentStyle }, matchResult, { });
+
+        initialValue = CSSPropertyParser::parseTypedCustomPropertyValue(descriptor.name, descriptor.syntax, tokenizer.tokenRange(), dummyBuilder.state(), strictCSSParserContext());
 
         if (!initialValue || !initialValue->isResolved())
             return Exception { SyntaxError, "The given initial value does not parse for the given syntax." };
 
         initialValue->collectDirectComputationalDependencies(dependencies);
