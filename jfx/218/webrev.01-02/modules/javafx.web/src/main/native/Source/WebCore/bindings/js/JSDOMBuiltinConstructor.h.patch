diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBuiltinConstructor.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBuiltinConstructor.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBuiltinConstructor.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBuiltinConstructor.h
@@ -23,11 +23,11 @@
 #include "JSDOMExceptionHandling.h"
 #include "JSDOMWrapperCache.h"
 
 namespace WebCore {
 
-template<typename JSClass> class JSDOMBuiltinConstructor : public JSDOMBuiltinConstructorBase {
+template<typename JSClass> class JSDOMBuiltinConstructor final : public JSDOMBuiltinConstructorBase {
 public:
     using Base = JSDOMBuiltinConstructorBase;
 
     static JSDOMBuiltinConstructor* create(JSC::VM&, JSC::Structure*, JSDOMGlobalObject&);
     static JSC::Structure* createStructure(JSC::VM&, JSC::JSGlobalObject&, JSC::JSValue prototype);
@@ -43,14 +43,14 @@
     {
     }
 
     void finishCreation(JSC::VM&, JSDOMGlobalObject&);
     static JSC::ConstructType getConstructData(JSC::JSCell*, JSC::ConstructData&);
-    static JSC::EncodedJSValue JSC_HOST_CALL construct(JSC::ExecState*);
+    static JSC::EncodedJSValue JSC_HOST_CALL construct(JSC::JSGlobalObject*, JSC::CallFrame*);
 
-    JSC::EncodedJSValue callConstructor(JSC::ExecState&, JSC::JSObject&);
-    JSC::EncodedJSValue callConstructor(JSC::ExecState&, JSC::JSObject*);
+    JSC::EncodedJSValue callConstructor(JSC::JSGlobalObject&, JSC::CallFrame&, JSC::JSObject&);
+    JSC::EncodedJSValue callConstructor(JSC::JSGlobalObject&, JSC::CallFrame&, JSC::JSObject*);
 
     // Usually defined for each specialization class.
     void initializeProperties(JSC::VM&, JSDOMGlobalObject&) { }
     // Must be defined for each specialization class.
     JSC::FunctionExecutable* initializeExecutable(JSC::VM&);
@@ -74,23 +74,23 @@
     ASSERT(inherits(vm, info()));
     setInitializeFunction(vm, *JSC::JSFunction::create(vm, initializeExecutable(vm), &globalObject));
     initializeProperties(vm, globalObject);
 }
 
-template<typename JSClass> inline JSC::EncodedJSValue JSDOMBuiltinConstructor<JSClass>::callConstructor(JSC::ExecState& state, JSC::JSObject& object)
+template<typename JSClass> inline JSC::EncodedJSValue JSDOMBuiltinConstructor<JSClass>::callConstructor(JSC::JSGlobalObject& lexicalGlobalObject, JSC::CallFrame& callFrame, JSC::JSObject& object)
 {
-    Base::callFunctionWithCurrentArguments(state, object, *initializeFunction());
+    Base::callFunctionWithCurrentArguments(lexicalGlobalObject, callFrame, object, *initializeFunction());
     return JSC::JSValue::encode(&object);
 }
 
-template<typename JSClass> inline JSC::EncodedJSValue JSDOMBuiltinConstructor<JSClass>::callConstructor(JSC::ExecState& state, JSC::JSObject* object)
+template<typename JSClass> inline JSC::EncodedJSValue JSDOMBuiltinConstructor<JSClass>::callConstructor(JSC::JSGlobalObject& lexicalGlobalObject, JSC::CallFrame& callFrame, JSC::JSObject* object)
 {
-    JSC::VM& vm = state.vm();
+    JSC::VM& vm = JSC::getVM(&lexicalGlobalObject);
     auto scope = DECLARE_THROW_SCOPE(vm);
     if (!object)
-        return throwConstructorScriptExecutionContextUnavailableError(state, scope, info()->className);
-    return callConstructor(state, *object);
+        return throwConstructorScriptExecutionContextUnavailableError(lexicalGlobalObject, scope, info()->className);
+    return callConstructor(lexicalGlobalObject, callFrame, *object);
 }
 
 template<typename JSClass>
 typename std::enable_if<JSDOMObjectInspector<JSClass>::isSimpleWrapper, JSC::JSObject&>::type createJSObject(JSDOMBuiltinConstructor<JSClass>& constructor)
 {
@@ -109,15 +109,15 @@
 {
     auto* context = constructor.scriptExecutionContext();
     return context ? createWrapper<typename JSClass::DOMWrapped>(constructor.globalObject(), JSClass::DOMWrapped::create(*context)) : nullptr;
 }
 
-template<typename JSClass> inline JSC::EncodedJSValue JSC_HOST_CALL JSDOMBuiltinConstructor<JSClass>::construct(JSC::ExecState* state)
+template<typename JSClass> inline JSC::EncodedJSValue JSC_HOST_CALL JSDOMBuiltinConstructor<JSClass>::construct(JSC::JSGlobalObject* lexicalGlobalObject, JSC::CallFrame* callFrame)
 {
-    ASSERT(state);
-    auto* castedThis = JSC::jsCast<JSDOMBuiltinConstructor*>(state->jsCallee());
-    return castedThis->callConstructor(*state, createJSObject(*castedThis));
+    ASSERT(callFrame);
+    auto* castedThis = JSC::jsCast<JSDOMBuiltinConstructor*>(callFrame->jsCallee());
+    return castedThis->callConstructor(*lexicalGlobalObject, *callFrame, createJSObject(*castedThis));
 }
 
 template<typename JSClass> inline JSC::ConstructType JSDOMBuiltinConstructor<JSClass>::getConstructData(JSC::JSCell*, JSC::ConstructData& constructData)
 {
     constructData.native.function = construct;
