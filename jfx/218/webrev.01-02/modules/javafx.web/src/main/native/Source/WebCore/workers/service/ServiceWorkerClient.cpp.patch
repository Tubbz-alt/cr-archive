diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerClient.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerClient.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerClient.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ServiceWorkerClient.cpp
@@ -80,30 +80,28 @@
 String ServiceWorkerClient::id() const
 {
     return identifier().toString();
 }
 
-ExceptionOr<void> ServiceWorkerClient::postMessage(ScriptExecutionContext& context, JSC::JSValue messageValue, Vector<JSC::Strong<JSC::JSObject>>&& transfer)
+ExceptionOr<void> ServiceWorkerClient::postMessage(JSC::JSGlobalObject& globalObject, JSC::JSValue messageValue, PostMessageOptions&& options)
 {
-    auto* execState = context.execState();
-    ASSERT(execState);
-
     Vector<RefPtr<MessagePort>> ports;
-    auto messageData = SerializedScriptValue::create(*execState, messageValue, WTFMove(transfer), ports, SerializationContext::WorkerPostMessage);
+    auto messageData = SerializedScriptValue::create(globalObject, messageValue, WTFMove(options.transfer), ports, SerializationContext::WorkerPostMessage);
     if (messageData.hasException())
         return messageData.releaseException();
 
     // Disentangle the port in preparation for sending it to the remote context.
     auto portsOrException = MessagePort::disentanglePorts(WTFMove(ports));
     if (portsOrException.hasException())
         return portsOrException.releaseException();
 
     MessageWithMessagePorts message = { messageData.releaseReturnValue(), portsOrException.releaseReturnValue() };
-    auto sourceIdentifier = downcast<ServiceWorkerGlobalScope>(context).thread().identifier();
-    callOnMainThread([message = WTFMove(message), destinationIdentifier = identifier(), sourceIdentifier, sourceOrigin = context.origin().isolatedCopy()] () mutable {
+    auto& context = downcast<ServiceWorkerGlobalScope>(*scriptExecutionContext());
+    auto sourceIdentifier = context.thread().identifier();
+    callOnMainThread([message = WTFMove(message), destinationIdentifier = identifier(), sourceIdentifier, sourceOrigin = context.origin().isolatedCopy()] {
         if (auto* connection = SWContextManager::singleton().connection())
-            connection->postMessageToServiceWorkerClient(destinationIdentifier, WTFMove(message), sourceIdentifier, sourceOrigin);
+            connection->postMessageToServiceWorkerClient(destinationIdentifier, message, sourceIdentifier, sourceOrigin);
     });
 
     return { };
 }
 
