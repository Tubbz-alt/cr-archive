diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGBasicBlock.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGBasicBlock.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGBasicBlock.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGBasicBlock.h
@@ -42,17 +42,21 @@
 class InsertionSet;
 
 typedef Vector<BasicBlock*, 2> PredecessorList;
 typedef Vector<Node*, 8> BlockNodeList;
 
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(BasicBlock);
+
 struct BasicBlock : RefCounted<BasicBlock> {
+    WTF_MAKE_STRUCT_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(BasicBlock);
     BasicBlock(
-        unsigned bytecodeBegin, unsigned numArguments, unsigned numLocals,
+        BytecodeIndex bytecodeBegin, unsigned numArguments, unsigned numLocals, unsigned numTmps,
         float executionCount);
     ~BasicBlock();
 
     void ensureLocals(unsigned newNumLocals);
+    void ensureTmps(unsigned newNumTmps);
 
     size_t size() const { return m_nodes.size(); }
     bool isEmpty() const { return !size(); }
     Node*& at(size_t i) { return m_nodes[i]; }
     Node* at(size_t i) const { return m_nodes[i]; }
@@ -169,33 +173,33 @@
 
     void dump(PrintStream& out) const;
 
     void didLink()
     {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         isLinked = true;
 #endif
     }
 
     // This value is used internally for block linking and OSR entry. It is mostly meaningless
     // for other purposes due to inlining.
-    unsigned bytecodeBegin;
+    BytecodeIndex bytecodeBegin;
 
     BlockIndex index;
 
     StructureClobberState cfaStructureClobberStateAtHead;
     StructureClobberState cfaStructureClobberStateAtTail;
     BranchDirection cfaBranchDirection;
     bool cfaHasVisited;
     bool cfaShouldRevisit;
-    bool cfaFoundConstants;
+    bool cfaThinksShouldTryConstantFolding { false };
     bool cfaDidFinish;
     bool intersectionOfCFAHasVisited;
     bool isOSRTarget;
     bool isCatchEntrypoint;
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     bool isLinked;
 #endif
     bool isReachable;
 
     Vector<Node*> phis;
@@ -257,18 +261,18 @@
     BlockNodeList m_nodes;
 };
 
 typedef Vector<BasicBlock*> BlockList;
 
-static inline unsigned getBytecodeBeginForBlock(BasicBlock** basicBlock)
+static inline BytecodeIndex getBytecodeBeginForBlock(BasicBlock** basicBlock)
 {
     return (*basicBlock)->bytecodeBegin;
 }
 
-static inline BasicBlock* blockForBytecodeOffset(Vector<BasicBlock*>& linkingTargets, unsigned bytecodeBegin)
+static inline BasicBlock* blockForBytecodeIndex(Vector<BasicBlock*>& linkingTargets, BytecodeIndex bytecodeBegin)
 {
-    return *binarySearch<BasicBlock*, unsigned>(linkingTargets, linkingTargets.size(), bytecodeBegin, getBytecodeBeginForBlock);
+    return *binarySearch<BasicBlock*, BytecodeIndex>(linkingTargets, linkingTargets.size(), bytecodeBegin, getBytecodeBeginForBlock);
 }
 
 } } // namespace JSC::DFG
 
 #endif // ENABLE(DFG_JIT)
