diff a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserContext.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserContext.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserContext.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/parser/CSSParserContext.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -73,10 +73,11 @@
     colorFilterEnabled = document.settings().colorFilterEnabled();
 #if ENABLE(ATTACHMENT_ELEMENT)
     attachmentEnabled = RuntimeEnabledFeatures::sharedFeatures().attachmentElementEnabled();
 #endif
     deferredCSSParserEnabled = document.settings().deferredCSSParserEnabled();
+    scrollBehaviorEnabled = document.settings().CSSOMViewSmoothScrollingEnabled();
     useSystemAppearance = document.page() ? document.page()->useSystemAppearance() : false;
 }
 
 bool operator==(const CSSParserContext& a, const CSSParserContext& b)
 {
@@ -97,10 +98,29 @@
         && a.colorFilterEnabled == b.colorFilterEnabled
 #if ENABLE(ATTACHMENT_ELEMENT)
         && a.attachmentEnabled == b.attachmentEnabled
 #endif
         && a.deferredCSSParserEnabled == b.deferredCSSParserEnabled
+        && a.scrollBehaviorEnabled == b.scrollBehaviorEnabled
         && a.hasDocumentSecurityOrigin == b.hasDocumentSecurityOrigin
         && a.useSystemAppearance == b.useSystemAppearance;
 }
 
+URL CSSParserContext::completeURL(const String& url) const
+{
+    auto completedURL = [&] {
+        if (url.isNull())
+            return URL();
+        if (charset.isEmpty())
+            return URL(baseURL, url);
+        TextEncoding encoding(charset);
+        auto& encodingForURLParsing = encoding.encodingForFormSubmissionOrURLParsing();
+        return URL(baseURL, url, encodingForURLParsing == UTF8Encoding() ? nullptr : &encodingForURLParsing);
+    }();
+
+    if (mode == WebVTTMode && !completedURL.protocolIsData())
+        return URL();
+
+    return completedURL;
+}
+
 }
