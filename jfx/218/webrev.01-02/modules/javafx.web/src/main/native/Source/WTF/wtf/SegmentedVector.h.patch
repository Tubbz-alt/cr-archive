diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/SegmentedVector.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/SegmentedVector.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/SegmentedVector.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/SegmentedVector.h
@@ -31,10 +31,12 @@
 #include <wtf/Noncopyable.h>
 #include <wtf/Vector.h>
 
 namespace WTF {
 
+    DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(SegmentedVector);
+
     // An iterator for SegmentedVector. It supports only the pre ++ operator
     template <typename T, size_t SegmentSize = 8> class SegmentedVector;
     template <typename T, size_t SegmentSize = 8> class SegmentedVectorIterator {
         WTF_MAKE_FAST_ALLOCATED;
     private:
@@ -225,11 +227,11 @@
         void deleteAllSegments()
         {
             for (size_t i = 0; i < m_size; ++i)
                 at(i).~T();
             for (size_t i = 0; i < m_segments.size(); ++i)
-                fastFree(m_segments[i]);
+                SegmentedVectorMalloc::free(m_segments[i]);
         }
 
         bool segmentExistsFor(size_t index)
         {
             return index / SegmentSize < m_segments.size();
@@ -261,11 +263,11 @@
                 allocateSegment();
         }
 
         void allocateSegment()
         {
-            m_segments.append(static_cast<Segment*>(fastMalloc(sizeof(T) * SegmentSize)));
+            m_segments.append(static_cast<Segment*>(SegmentedVectorMalloc::malloc(sizeof(T) * SegmentSize)));
         }
 
         size_t m_size { 0 };
         Vector<Segment*> m_segments;
     };
