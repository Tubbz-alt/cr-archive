diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/mips.rb b/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/mips.rb
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/mips.rb
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/offlineasm/mips.rb
@@ -41,10 +41,12 @@
 # $t6 =>         t6
 # $t7 =>            (scratch)
 # $t8 =>            (scratch)
 # $t9 =>            (stores the callee of a call opcode)
 # $gp =>            (globals)
+# $s0 => csr0       (callee-save, metadataTable)
+# $s1 => csr1       (callee-save, PB)
 # $s4 =>            (callee-save used to preserve $gp across calls)
 # $ra => lr
 # $sp => sp
 # $fp => cfr
 #
@@ -97,10 +99,11 @@
 MIPS_TEMP_GPRS = [SpecialRegister.new("$t0"), SpecialRegister.new("$t1"), SpecialRegister.new("$t7"), SpecialRegister.new("$t8")]
 MIPS_ZERO_REG = SpecialRegister.new("$zero")
 MIPS_GP_REG = SpecialRegister.new("$gp")
 MIPS_GPSAVE_REG = SpecialRegister.new("$s4")
 MIPS_CALL_REG = SpecialRegister.new("$t9")
+MIPS_RETURN_ADDRESS_REG = SpecialRegister.new("$ra")
 MIPS_TEMP_FPRS = [SpecialRegister.new("$f16")]
 MIPS_SCRATCH_FPR = SpecialRegister.new("$f18")
 
 def mipsMoveImmediate(value, register)
     if value == 0
@@ -135,10 +138,12 @@
             "$t5"
         when "cfr"
             "$fp"
         when "csr0"
             "$s0"
+        when "csr1"
+            "$s1"
         when "lr"
             "$ra"
         when "sp"
             "$sp"
         else
@@ -525,11 +530,11 @@
                 else
                     newList << node
                 end
             when /^(addi|subi)/
                 newList << node.riscLowerMalformedImmediatesRecurse(newList, -0x7fff..0x7fff)
-            when "andi", "andp", "ori", "orp", "xori", "xorp"
+            when "andi", "andp", "ori", "orp", "orh", "xori", "xorp"
                 newList << node.riscLowerMalformedImmediatesRecurse(newList, 0..0xffff)
             else
                 newList << node
             end
         else
@@ -678,11 +683,21 @@
     myList = []
     list.each {
         | node |
         myList << node
         if node.is_a? Label
-            myList << Instruction.new(node.codeOrigin, "pichdr", [])
+            # FIXME: [JSC] checkpoint_osr_exit_from_inlined_call_trampoline is a return location
+            # and we should name it properly.
+            # https://bugs.webkit.org/show_bug.cgi?id=208236
+            if node.name =~ /^.*_return_location(?:_(?:wide16|wide32))?$/ or node.name.start_with?("_checkpoint_osr_exit_from_inlined_call_trampoline")
+                # We need to have a special case for return location labels because they are always
+                # reached from a `ret` instruction. In this case, we need to proper reconfigure `$gp`
+                # using `$ra` instead of using `$t9`.
+                myList << Instruction.new(node.codeOrigin, "pichdr", [MIPS_RETURN_ADDRESS_REG])
+            else
+                myList << Instruction.new(node.codeOrigin, "pichdr", [MIPS_CALL_REG])
+            end
         end
     }
     myList
 end
 
@@ -721,11 +736,11 @@
             end
         }
         result = riscLowerMalformedAddressesDouble(result)
         result = riscLowerMisplacedImmediates(result, ["storeb", "storei", "storep"])
         result = mipsLowerMisplacedImmediates(result)
-        result = riscLowerMalformedImmediates(result, -0x7fff..0x7fff)
+        result = riscLowerMalformedImmediates(result, -0x7fff..0x7fff, -0x7fff..0x7fff)
         result = mipsLowerMisplacedAddresses(result)
         result = riscLowerMisplacedAddresses(result)
         result = riscLowerRegisterReuse(result)
         result = mipsLowerCompares(result)
         result = assignRegistersToTemporaries(result, :gpr, MIPS_TEMP_GPRS)
@@ -852,11 +867,11 @@
                     $asm.puts "addu #{operands[1].mipsOperand}, #{operands[1].mipsOperand}, #{operands[0].mipsOperand}"
                 end
             end
         when "andi", "andp"
             emitMIPSCompact("and", "and", operands)
-        when "ori", "orp"
+        when "ori", "orp", "orh"
             emitMIPSCompact("or", "orr", operands)
         when "oris"
             emitMIPSCompact("or", "orrs", operands)
         when "xori", "xorp"
             emitMIPSCompact("xor", "eor", operands)
@@ -904,11 +919,11 @@
             emitMIPS("sub.d", operands)
         when "muld"
             emitMIPS("mul.d", operands)
         when "sqrtd"
             $asm.puts "sqrt.d #{mipsFlippedOperands(operands)}"
-        when "ci2d"
+        when "ci2ds"
             raise "invalid ops of #{self.inspect} at #{codeOriginString}" unless operands[1].is_a? FPRegisterID and operands[0].register?
             $asm.puts "mtc1 #{operands[0].mipsOperand}, #{operands[1].mipsOperand}"
             $asm.puts "cvt.d.w #{operands[1].mipsOperand}, #{operands[1].mipsOperand}"
         when "bdeq"
             emitMIPSDoubleBranch("eq", false, operands)
@@ -1059,11 +1074,11 @@
         when "slt", "sltb"
             $asm.puts "slt #{operands[0].mipsOperand}, #{operands[1].mipsOperand}, #{operands[2].mipsOperand}"
         when "sltu", "sltub"
             $asm.puts "sltu #{operands[0].mipsOperand}, #{operands[1].mipsOperand}, #{operands[2].mipsOperand}"
         when "pichdr"
-            $asm.putStr("OFFLINE_ASM_CPLOAD(#{MIPS_CALL_REG.mipsOperand})")
+            $asm.putStr("OFFLINE_ASM_CPLOAD(#{operands[0].mipsOperand})")
         when "memfence"
             $asm.puts "sync"
         else
             lowerDefault
         end
