diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBRequest.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBRequest.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBRequest.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBRequest.h
@@ -116,19 +116,21 @@
     void setResultToUndefined();
 
     void willIterateCursor(IDBCursor&);
     void didOpenOrIterateCursor(const IDBResultData&);
 
-    const IDBCursor* pendingCursor() const { return m_pendingCursor.get(); }
+    IDBCursor* pendingCursor() const { return m_pendingCursor ? m_pendingCursor.get() : nullptr; }
 
     void setSource(IDBCursor&);
     void setVersionChangeTransaction(IDBTransaction&);
 
     IndexedDB::RequestType requestType() const { return m_requestType; }
 
     bool hasPendingActivity() const final;
 
+    void setTransactionOperationID(uint64_t transactionOperationID) { m_currentTransactionOperationID = transactionOperationID; }
+
 protected:
     IDBRequest(ScriptExecutionContext&, IDBClient::IDBConnectionProxy&);
 
     void enqueueEvent(Ref<Event>&&);
     void dispatchEvent(Event&) override;
@@ -155,11 +157,10 @@
     IDBRequest(ScriptExecutionContext&, IDBIndex&, IndexedDB::IndexRecordType, IDBTransaction&);
 
     EventTargetInterface eventTargetInterface() const override;
 
     const char* activeDOMObjectName() const final;
-    bool canSuspendForDocumentSuspension() const final;
     void stop() final;
     virtual void cancelForStop();
 
     void refEventTarget() final { ref(); }
     void derefEventTarget() final { deref(); }
@@ -190,10 +191,12 @@
 
     Ref<IDBClient::IDBConnectionProxy> m_connectionProxy;
 
     bool m_dispatchingEvent { false };
     bool m_hasUncaughtException { false };
+
+    uint64_t m_currentTransactionOperationID { 0 };
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(INDEXED_DATABASE)
