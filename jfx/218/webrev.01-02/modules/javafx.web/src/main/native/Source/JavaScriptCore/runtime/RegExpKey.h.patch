diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpKey.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpKey.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpKey.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpKey.h
@@ -1,9 +1,10 @@
 /*
  * Copyright (C) 2010 University of Szeged
  * Copyright (C) 2010 Renata Hodovan (hodovan@inf.u-szeged.hu)
  * All rights reserved.
+ * Copyright (C) 2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -33,11 +34,11 @@
 
 namespace JSC {
 
 struct RegExpKey {
     OptionSet<Yarr::Flags> flagsValue;
-    RefPtr<StringImpl> pattern;
+    PackedRefPtr<StringImpl> pattern;
 
     RegExpKey()
     {
     }
 
@@ -67,11 +68,11 @@
     friend inline bool operator==(const RegExpKey& a, const RegExpKey& b);
 
     struct Hash {
         static unsigned hash(const RegExpKey& key) { return key.pattern->hash(); }
         static bool equal(const RegExpKey& a, const RegExpKey& b) { return a == b; }
-        static const bool safeToCompareToEmptyOrDeleted = false;
+        static constexpr bool safeToCompareToEmptyOrDeleted = false;
     };
 };
 
 inline bool operator==(const RegExpKey& a, const RegExpKey& b)
 {
@@ -92,10 +93,10 @@
 template<> struct DefaultHash<JSC::RegExpKey> {
     typedef JSC::RegExpKey::Hash Hash;
 };
 
 template<> struct HashTraits<JSC::RegExpKey> : GenericHashTraits<JSC::RegExpKey> {
-    static const bool emptyValueIsZero = true;
+    static constexpr bool emptyValueIsZero = true;
     static void constructDeletedValue(JSC::RegExpKey& slot) { slot.flagsValue = JSC::Yarr::Flags::DeletedValue; }
     static bool isDeletedValue(const JSC::RegExpKey& value) { return value.flagsValue == JSC::Yarr::Flags::DeletedValue; }
 };
 } // namespace WTF
