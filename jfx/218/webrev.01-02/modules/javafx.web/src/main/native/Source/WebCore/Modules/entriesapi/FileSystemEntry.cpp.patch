diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemEntry.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemEntry.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemEntry.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemEntry.cpp
@@ -26,14 +26,16 @@
 #include "config.h"
 #include "FileSystemEntry.h"
 
 #include "DOMException.h"
 #include "DOMFileSystem.h"
+#include "Document.h"
 #include "ErrorCallback.h"
 #include "FileSystemDirectoryEntry.h"
 #include "FileSystemEntryCallback.h"
 #include "ScriptExecutionContext.h"
+#include "WindowEventLoop.h"
 #include <wtf/FileSystem.h>
 #include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
@@ -58,28 +60,34 @@
 const char* FileSystemEntry::activeDOMObjectName() const
 {
     return "FileSystemEntry";
 }
 
-bool FileSystemEntry::canSuspendForDocumentSuspension() const
+Document* FileSystemEntry::document() const
 {
-    return !hasPendingActivity();
+    return downcast<Document>(scriptExecutionContext());
 }
 
 void FileSystemEntry::getParent(ScriptExecutionContext& context, RefPtr<FileSystemEntryCallback>&& successCallback, RefPtr<ErrorCallback>&& errorCallback)
 {
     if (!successCallback && !errorCallback)
         return;
 
-    filesystem().getParent(context, *this, [pendingActivity = makePendingActivity(*this), successCallback = WTFMove(successCallback), errorCallback = WTFMove(errorCallback)](auto&& result) {
-        if (result.hasException()) {
-            if (errorCallback)
-                errorCallback->handleEvent(DOMException::create(result.releaseException()));
+    filesystem().getParent(context, *this, [this, pendingActivity = makePendingActivity(*this), successCallback = WTFMove(successCallback), errorCallback = WTFMove(errorCallback)](auto&& result) mutable {
+        auto* document = this->document();
+        if (!document)
             return;
-        }
-        if (successCallback)
-            successCallback->handleEvent(result.releaseReturnValue());
+
+        document->eventLoop().queueTask(TaskSource::Networking, [successCallback = WTFMove(successCallback), errorCallback = WTFMove(errorCallback), result = WTFMove(result), pendingActivity = WTFMove(pendingActivity)]() mutable {
+            if (result.hasException()) {
+                if (errorCallback)
+                    errorCallback->handleEvent(DOMException::create(result.releaseException()));
+                return;
+            }
+            if (successCallback)
+                successCallback->handleEvent(result.releaseReturnValue());
+        });
     });
 }
 
 
 } // namespace WebCore
