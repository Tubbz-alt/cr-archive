diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/RefCounted.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/RefCounted.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/RefCounted.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/RefCounted.h
@@ -25,14 +25,14 @@
 #include <wtf/MainThread.h>
 #include <wtf/Noncopyable.h>
 
 namespace WTF {
 
-#if defined(NDEBUG) && !ENABLE(SECURITY_ASSERTIONS)
-#define CHECK_REF_COUNTED_LIFECYCLE 0
-#else
+#if ASSERT_ENABLED || ENABLE(SECURITY_ASSERTIONS)
 #define CHECK_REF_COUNTED_LIFECYCLE 1
+#else
+#define CHECK_REF_COUNTED_LIFECYCLE 0
 #endif
 
 // This base class holds the non-template methods and attributes.
 // The RefCounted class inherits from it reducing the template bloat
 // generated by the compiler (technique called template hoisting).
@@ -73,42 +73,41 @@
 
     // Please only call this method if you really know that what you're doing is safe (e.g.
     // locking at call sites).
     void disableThreadingChecks()
     {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         m_areThreadingChecksEnabled = false;
 #endif
     }
 
     static void enableThreadingChecksGlobally()
     {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         areThreadingChecksEnabledGlobally = true;
 #endif
     }
 
 protected:
     RefCountedBase()
         : m_refCount(1)
-#if !ASSERT_DISABLED
-        , m_isOwnedByMainThread(isMainThreadIfInitialized())
-        , m_areThreadingChecksEnabled(isMainThreadInitialized())
+#if ASSERT_ENABLED
+        , m_isOwnedByMainThread(isMainThread())
 #endif
 #if CHECK_REF_COUNTED_LIFECYCLE
         , m_deletionHasBegun(false)
         , m_adoptionIsRequired(true)
 #endif
     {
     }
 
     void applyRefDerefThreadingCheck() const
     {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         if (hasOneRef()) {
             // Likely an ownership transfer across threads that may be safe.
-            m_isOwnedByMainThread = isMainThreadIfInitialized();
+            m_isOwnedByMainThread = isMainThread();
         } else if (areThreadingChecksEnabledGlobally && m_areThreadingChecksEnabled) {
             // If you hit this assertion, it means that the RefCounted object was ref/deref'd
             // from both the main thread and another in a way that is likely concurrent and unsafe.
             // Derive from ThreadSafeRefCounted and make sure the destructor is safe on threads
             // that call deref, or ref/deref from a single thread.
@@ -159,15 +158,15 @@
 #if CHECK_REF_COUNTED_LIFECYCLE
     friend void adopted(RefCountedBase*);
 #endif
 
     mutable unsigned m_refCount;
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     mutable bool m_isOwnedByMainThread;
     bool m_areThreadingChecksEnabled { true };
-    WTF_EXPORT_PRIVATE static bool areThreadingChecksEnabledGlobally;
 #endif
+    WTF_EXPORT_PRIVATE static bool areThreadingChecksEnabledGlobally;
 #if CHECK_REF_COUNTED_LIFECYCLE
     mutable bool m_deletionHasBegun;
     mutable bool m_adoptionIsRequired;
 #endif
 };
