diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntConstructor.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntConstructor.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntConstructor.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntConstructor.cpp
@@ -35,12 +35,12 @@
 #include "ParseInt.h"
 #include "StructureInlines.h"
 
 namespace JSC {
 
-static EncodedJSValue JSC_HOST_CALL bigIntConstructorFuncAsUintN(ExecState*);
-static EncodedJSValue JSC_HOST_CALL bigIntConstructorFuncAsIntN(ExecState*);
+static EncodedJSValue JSC_HOST_CALL bigIntConstructorFuncAsUintN(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL bigIntConstructorFuncAsIntN(JSGlobalObject*, CallFrame*);
 
 } // namespace JSC
 
 #include "BigIntConstructor.lut.h"
 
@@ -55,20 +55,20 @@
   asUintN   bigIntConstructorFuncAsUintN   DontEnum|Function 2
   asIntN    bigIntConstructorFuncAsIntN    DontEnum|Function 2
 @end
 */
 
-static EncodedJSValue JSC_HOST_CALL callBigIntConstructor(ExecState*);
+static EncodedJSValue JSC_HOST_CALL callBigIntConstructor(JSGlobalObject*, CallFrame*);
 
 BigIntConstructor::BigIntConstructor(VM& vm, Structure* structure)
     : InternalFunction(vm, structure, callBigIntConstructor, nullptr)
 {
 }
 
 void BigIntConstructor::finishCreation(VM& vm, BigIntPrototype* bigIntPrototype)
 {
-    Base::finishCreation(vm, "BigInt"_s, NameVisibility::Visible, NameAdditionMode::WithoutStructureTransition);
+    Base::finishCreation(vm, "BigInt"_s, NameAdditionMode::WithoutStructureTransition);
     ASSERT(inherits(vm, info()));
 
     putDirectWithoutTransition(vm, vm.propertyNames->prototype, bigIntPrototype, PropertyAttribute::DontEnum | PropertyAttribute::DontDelete | PropertyAttribute::ReadOnly);
     putDirectWithoutTransition(vm, vm.propertyNames->length, jsNumber(1), PropertyAttribute::ReadOnly | PropertyAttribute::DontEnum);
 }
@@ -85,45 +85,45 @@
 
     double number = argument.asDouble();
     return trunc(number) == number && std::abs(number) <= maxSafeInteger();
 }
 
-static EncodedJSValue toBigInt(ExecState& state, JSValue argument)
+static EncodedJSValue toBigInt(JSGlobalObject* globalObject, JSValue argument)
 {
     ASSERT(argument.isPrimitive());
-    VM& vm = state.vm();
+    VM& vm = globalObject->vm();
 
     if (argument.isBigInt())
         return JSValue::encode(argument);
 
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     if (argument.isBoolean())
         RELEASE_AND_RETURN(scope, JSValue::encode(JSBigInt::createFrom(vm, argument.asBoolean())));
 
     if (argument.isUndefinedOrNull() || argument.isNumber() || argument.isSymbol())
-        return throwVMTypeError(&state, scope, "Invalid argument type in ToBigInt operation"_s);
+        return throwVMTypeError(globalObject, scope, "Invalid argument type in ToBigInt operation"_s);
 
     ASSERT(argument.isString());
 
-    RELEASE_AND_RETURN(scope, toStringView(&state, argument, [&] (StringView view) {
-        return JSValue::encode(JSBigInt::parseInt(&state, view));
+    RELEASE_AND_RETURN(scope, toStringView(globalObject, argument, [&] (StringView view) {
+        return JSValue::encode(JSBigInt::parseInt(globalObject, view));
     }));
 }
 
-static EncodedJSValue JSC_HOST_CALL callBigIntConstructor(ExecState* state)
+static EncodedJSValue JSC_HOST_CALL callBigIntConstructor(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = state->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    JSValue value = state->argument(0);
-    JSValue primitive = value.toPrimitive(state);
+    JSValue value = callFrame->argument(0);
+    JSValue primitive = value.toPrimitive(globalObject);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
     if (primitive.isNumber()) {
         if (!isSafeInteger(primitive))
-            return throwVMError(state, scope, createRangeError(state, "Not safe integer"_s));
+            return throwVMError(globalObject, scope, createRangeError(globalObject, "Not safe integer"_s));
 
         scope.release();
         if (primitive.isInt32())
             return JSValue::encode(JSBigInt::createFrom(vm, primitive.asInt32()));
 
@@ -131,24 +131,24 @@
             return JSValue::encode(JSBigInt::createFrom(vm, primitive.asUInt32()));
 
         return JSValue::encode(JSBigInt::createFrom(vm, static_cast<int64_t>(primitive.asDouble())));
     }
 
-    EncodedJSValue result = toBigInt(*state, primitive);
+    EncodedJSValue result = toBigInt(globalObject, primitive);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
     return result;
 }
 
-EncodedJSValue JSC_HOST_CALL bigIntConstructorFuncAsUintN(ExecState*)
+EncodedJSValue JSC_HOST_CALL bigIntConstructorFuncAsUintN(JSGlobalObject*, CallFrame*)
 {
     // FIXME: [ESNext][BigInt] Implement BigInt.asIntN and BigInt.asUintN
     // https://bugs.webkit.org/show_bug.cgi?id=181144
     CRASH();
     return JSValue::encode(JSValue());
 }
 
-EncodedJSValue JSC_HOST_CALL bigIntConstructorFuncAsIntN(ExecState*)
+EncodedJSValue JSC_HOST_CALL bigIntConstructorFuncAsIntN(JSGlobalObject*, CallFrame*)
 {
     // FIXME: [ESNext][BigInt] Implement BigInt.asIntN and BigInt.asUintN
     // https://bugs.webkit.org/show_bug.cgi?id=181144
     CRASH();
     return JSValue::encode(JSValue());
