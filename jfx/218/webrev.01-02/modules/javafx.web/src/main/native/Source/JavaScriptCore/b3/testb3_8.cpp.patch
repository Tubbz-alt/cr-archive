diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/testb3_8.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/testb3_8.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/testb3_8.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/testb3_8.cpp
@@ -24,10 +24,12 @@
  */
 
 #include "config.h"
 #include "testb3.h"
 
+#include <wtf/UniqueArray.h>
+
 #if ENABLE(B3_JIT)
 
 template<typename T>
 void testAtomicWeakCAS()
 {
@@ -872,18 +874,22 @@
     for (const bool aligned : { true, false }) {
         for (const bool overlap : { false, true }) {
             for (size_t arrsize : { 1, 4, 5, 6, 8, 10, 12, 16, 20, 40, 100, 1000}) {
                 size_t overlapAmount = 5;
 
+                UniqueArray<uint32_t> array1, array2;
                 uint32_t* arr1, *arr2;
 
                 if (overlap) {
-                    arr1 = new uint32_t[arrsize * 2];
+                    array1 = makeUniqueArray<uint32_t>(arrsize * 2);
+                    arr1 = &array1[0];
                     arr2 = arr1 + (arrsize - overlapAmount);
                 } else {
-                    arr1 = new uint32_t[arrsize];
-                    arr2 = new uint32_t[arrsize];
+                    array1 = makeUniqueArray<uint32_t>(arrsize);
+                    array2 = makeUniqueArray<uint32_t>(arrsize);
+                    arr1 = &array1[0];
+                    arr2 = &array2[0];
                 }
 
                 if (!aligned && arrsize < 3)
                     continue;
                 if (overlap && arrsize <= overlapAmount + 3)
@@ -913,16 +919,10 @@
 
                 if (!aligned) {
                     --arr1;
                     --arr2;
                 }
-
-                if (!overlap) {
-                    delete[] arr1;
-                    delete[] arr2;
-                } else
-                    delete[] arr1;
             }
         }
     }
 #endif
 }
