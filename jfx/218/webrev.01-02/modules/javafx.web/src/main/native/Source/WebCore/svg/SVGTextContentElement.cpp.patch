diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextContentElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextContentElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextContentElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGTextContentElement.cpp
@@ -42,11 +42,10 @@
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(SVGTextContentElement);
 
 SVGTextContentElement::SVGTextContentElement(const QualifiedName& tagName, Document& document)
     : SVGGraphicsElement(tagName, document)
-    , SVGExternalResourcesRequired(this)
 {
     static std::once_flag onceFlag;
     std::call_once(onceFlag, [] {
         PropertyRegistry::registerProperty<SVGNames::textLengthAttr, &SVGTextContentElement::m_textLength>();
         PropertyRegistry::registerProperty<SVGNames::lengthAdjustAttr, SVGLengthAdjustType, &SVGTextContentElement::m_lengthAdjust>();
@@ -168,16 +167,15 @@
     if (name == SVGNames::lengthAdjustAttr) {
         auto propertyValue = SVGPropertyTraits<SVGLengthAdjustType>::fromString(value);
         if (propertyValue > 0)
             m_lengthAdjust->setBaseValInternal<SVGLengthAdjustType>(propertyValue);
     } else if (name == SVGNames::textLengthAttr)
-        m_textLength->setBaseValInternal(SVGLengthValue::construct(LengthModeOther, value, parseError, ForbidNegativeLengths));
+        m_textLength->setBaseValInternal(SVGLengthValue::construct(SVGLengthMode::Other, value, parseError, SVGLengthNegativeValuesMode::Forbid));
 
     reportAttributeParsingError(parseError, name, value);
 
     SVGGraphicsElement::parseAttribute(name, value);
-    SVGExternalResourcesRequired::parseAttribute(name, value);
 }
 
 void SVGTextContentElement::svgAttributeChanged(const QualifiedName& attrName)
 {
     if (PropertyRegistry::isKnownAttribute(attrName)) {
@@ -190,18 +188,17 @@
         }
         return;
     }
 
     SVGGraphicsElement::svgAttributeChanged(attrName);
-    SVGExternalResourcesRequired::svgAttributeChanged(attrName);
 }
 
 SVGAnimatedLength& SVGTextContentElement::textLengthAnimated()
 {
-    static NeverDestroyed<SVGLengthValue> defaultTextLength(LengthModeOther);
+    static NeverDestroyed<SVGLengthValue> defaultTextLength(SVGLengthMode::Other);
     if (m_textLength->baseVal()->value() == defaultTextLength)
-        m_textLength->baseVal()->value().newValueSpecifiedUnits(LengthTypeNumber, getComputedTextLength());
+        m_textLength->baseVal()->value() = { getComputedTextLength(), SVGLengthType::Number };
     return m_textLength;
 }
 
 bool SVGTextContentElement::selfHasRelativeLengths() const
 {
