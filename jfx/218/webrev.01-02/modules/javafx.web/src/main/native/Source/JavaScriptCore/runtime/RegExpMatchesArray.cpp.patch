diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpMatchesArray.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpMatchesArray.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpMatchesArray.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpMatchesArray.cpp
@@ -52,11 +52,10 @@
         if (unsigned numSubpatterns = regExp->numSubpatterns()) {
             for (unsigned i = 1; i <= numSubpatterns; ++i)
                 array->initializeIndexWithoutBarrier(scope, i, jsUndefined());
         }
     } else {
-        ObjectInitializationScope scope(vm);
         array = tryCreateUninitializedRegExpMatchesArray(scope, &deferralContext, globalObject->regExpMatchesArrayStructure(), regExp->numSubpatterns() + 1);
         RELEASE_ASSERT(array);
 
         array->initializeIndexWithoutBarrier(scope, 0, jsEmptyString(vm), ArrayWithContiguous);
 
@@ -66,31 +65,24 @@
         }
     }
 
     array->putDirectWithoutBarrier(RegExpMatchesArrayIndexPropertyOffset, jsNumber(-1));
     array->putDirectWithoutBarrier(RegExpMatchesArrayInputPropertyOffset, input);
+    array->putDirectWithoutBarrier(RegExpMatchesArrayGroupsPropertyOffset, jsUndefined());
     return array;
 }
 
-enum class ShouldCreateGroups { No, Yes };
-
-static Structure* createStructureImpl(VM& vm, JSGlobalObject* globalObject, IndexingType indexingType, ShouldCreateGroups shouldCreateGroups = ShouldCreateGroups::No)
+static Structure* createStructureImpl(VM& vm, JSGlobalObject* globalObject, IndexingType indexingType)
 {
     Structure* structure = globalObject->arrayStructureForIndexingTypeDuringAllocation(indexingType);
     PropertyOffset offset;
     structure = Structure::addPropertyTransition(vm, structure, vm.propertyNames->index, 0, offset);
     ASSERT(offset == RegExpMatchesArrayIndexPropertyOffset);
     structure = Structure::addPropertyTransition(vm, structure, vm.propertyNames->input, 0, offset);
     ASSERT(offset == RegExpMatchesArrayInputPropertyOffset);
-    switch (shouldCreateGroups) {
-    case ShouldCreateGroups::Yes:
-        structure = Structure::addPropertyTransition(vm, structure, vm.propertyNames->groups, 0, offset);
-        ASSERT(offset == RegExpMatchesArrayGroupsPropertyOffset);
-        break;
-    case ShouldCreateGroups::No:
-        break;
-    }
+    structure = Structure::addPropertyTransition(vm, structure, vm.propertyNames->groups, 0, offset);
+    ASSERT(offset == RegExpMatchesArrayGroupsPropertyOffset);
     return structure;
 }
 
 Structure* createRegExpMatchesArrayStructure(VM& vm, JSGlobalObject* globalObject)
 {
@@ -100,16 +92,6 @@
 Structure* createRegExpMatchesArraySlowPutStructure(VM& vm, JSGlobalObject* globalObject)
 {
     return createStructureImpl(vm, globalObject, ArrayWithSlowPutArrayStorage);
 }
 
-Structure* createRegExpMatchesArrayWithGroupsStructure(VM& vm, JSGlobalObject* globalObject)
-{
-    return createStructureImpl(vm, globalObject, ArrayWithContiguous, ShouldCreateGroups::Yes);
-}
-
-Structure* createRegExpMatchesArrayWithGroupsSlowPutStructure(VM& vm, JSGlobalObject* globalObject)
-{
-    return createStructureImpl(vm, globalObject, ArrayWithSlowPutArrayStorage, ShouldCreateGroups::Yes);
-}
-
 } // namespace JSC
