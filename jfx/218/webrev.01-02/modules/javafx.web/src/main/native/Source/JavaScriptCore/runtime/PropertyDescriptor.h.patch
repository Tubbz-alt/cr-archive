diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyDescriptor.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyDescriptor.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyDescriptor.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyDescriptor.h
@@ -54,11 +54,11 @@
     JS_EXPORT_PRIVATE bool isDataDescriptor() const;
     bool isGenericDescriptor() const;
     JS_EXPORT_PRIVATE bool isAccessorDescriptor() const;
     unsigned attributes() const { return m_attributes; }
     JSValue value() const { return m_value; }
-    GetterSetter* slowGetterSetter(ExecState*); // Be aware that this will lazily allocate a GetterSetter object. It's much better to use getter() and setter() individually if possible.
+    GetterSetter* slowGetterSetter(JSGlobalObject*); // Be aware that this will lazily allocate a GetterSetter object. It's much better to use getter() and setter() individually if possible.
     JS_EXPORT_PRIVATE JSValue getter() const;
     JS_EXPORT_PRIVATE JSValue setter() const;
     JSObject* getterObject() const;
     JSObject* setterObject() const;
     JS_EXPORT_PRIVATE void setUndefined();
@@ -75,11 +75,11 @@
     bool writablePresent() const { return m_seenAttributes & WritablePresent; }
     bool enumerablePresent() const { return m_seenAttributes & EnumerablePresent; }
     bool configurablePresent() const { return m_seenAttributes & ConfigurablePresent; }
     bool setterPresent() const { return !!m_setter; }
     bool getterPresent() const { return !!m_getter; }
-    bool equalTo(ExecState*, const PropertyDescriptor& other) const;
+    bool equalTo(JSGlobalObject*, const PropertyDescriptor& other) const;
     bool attributesEqual(const PropertyDescriptor& other) const;
     unsigned attributesOverridingCurrent(const PropertyDescriptor& current) const;
 
 private:
     JS_EXPORT_PRIVATE static unsigned defaultAttributes;
