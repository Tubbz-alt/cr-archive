diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSErrorHandler.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSErrorHandler.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSErrorHandler.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSErrorHandler.cpp
@@ -73,12 +73,10 @@
 
     auto* globalObject = toJSDOMGlobalObject(scriptExecutionContext, isolatedWorld());
     if (!globalObject)
         return;
 
-    ExecState* exec = globalObject->globalExec();
-
     CallData callData;
     CallType callType = jsFunction->methodTable(vm)->getCallData(jsFunction, callData);
 
     if (callType != CallType::None) {
         Ref<JSErrorHandler> protectedThis(*this);
@@ -87,31 +85,31 @@
         globalObject->setCurrentEvent(&event);
 
         auto& errorEvent = downcast<ErrorEvent>(event);
 
         MarkedArgumentBuffer args;
-        args.append(toJS<IDLDOMString>(*exec, errorEvent.message()));
-        args.append(toJS<IDLUSVString>(*exec, errorEvent.filename()));
+        args.append(toJS<IDLDOMString>(*globalObject, errorEvent.message()));
+        args.append(toJS<IDLUSVString>(*globalObject, errorEvent.filename()));
         args.append(toJS<IDLUnsignedLong>(errorEvent.lineno()));
         args.append(toJS<IDLUnsignedLong>(errorEvent.colno()));
-        args.append(errorEvent.error(*exec, *globalObject));
+        args.append(errorEvent.error(*globalObject));
         ASSERT(!args.hasOverflowed());
 
         VM& vm = globalObject->vm();
         VMEntryScope entryScope(vm, vm.entryScope ? vm.entryScope->globalObject() : globalObject);
 
-        InspectorInstrumentationCookie cookie = JSExecState::instrumentFunctionCall(&scriptExecutionContext, callType, callData);
+        JSExecState::instrumentFunctionCall(&scriptExecutionContext, callType, callData);
 
         NakedPtr<JSC::Exception> exception;
-        JSValue returnValue = JSExecState::profiledCall(exec, JSC::ProfilingReason::Other, jsFunction, callType, callData, globalObject, args, exception);
+        JSValue returnValue = JSExecState::profiledCall(globalObject, JSC::ProfilingReason::Other, jsFunction, callType, callData, globalObject, args, exception);
 
-        InspectorInstrumentation::didCallFunction(cookie, &scriptExecutionContext);
+        InspectorInstrumentation::didCallFunction(&scriptExecutionContext);
 
         globalObject->setCurrentEvent(savedEvent);
 
         if (exception)
-            reportException(exec, exception);
+            reportException(globalObject, exception);
         else {
             if (returnValue.isTrue())
                 event.preventDefault();
         }
     }
