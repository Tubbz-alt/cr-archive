diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSGradientValue.h b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSGradientValue.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSGradientValue.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSGradientValue.h
@@ -33,10 +33,14 @@
 namespace WebCore {
 
 class FloatPoint;
 class StyleResolver;
 
+namespace Style {
+class BuilderState;
+}
+
 enum CSSGradientType {
     CSSDeprecatedLinearGradient,
     CSSDeprecatedRadialGradient,
     CSSPrefixedLinearGradient,
     CSSPrefixedRadialGradient,
@@ -84,16 +88,16 @@
 
     bool isPending() const { return false; }
     bool knownToBeOpaque(const RenderElement&) const;
 
     void loadSubimages(CachedResourceLoader&, const ResourceLoaderOptions&) { }
-    Ref<CSSGradientValue> gradientWithStylesResolved(const StyleResolver&);
+    Ref<CSSGradientValue> gradientWithStylesResolved(Style::BuilderState&);
+    void resolveRGBColors();
 
 protected:
     CSSGradientValue(ClassType classType, CSSGradientRepeat repeat, CSSGradientType gradientType)
         : CSSImageGeneratorValue(classType)
-        , m_stopsSorted(false)
         , m_gradientType(gradientType)
         , m_repeating(repeat == Repeating)
     {
     }
 
@@ -104,11 +108,11 @@
         , m_secondX(other.m_secondX)
         , m_secondY(other.m_secondY)
         , m_stops(other.m_stops)
         , m_stopsSorted(other.m_stopsSorted)
         , m_gradientType(gradientType)
-        , m_repeating(other.isRepeating() ? Repeating : NonRepeating)
+        , m_repeating(other.m_repeating)
     {
     }
 
     template<typename GradientAdapter>
     Gradient::ColorStopVector computeStops(GradientAdapter&, const CSSToLengthConversionData&, const RenderStyle&, float maxLengthForRepeat);
@@ -116,22 +120,24 @@
     // Resolve points/radii to front end values.
     FloatPoint computeEndPoint(CSSPrimitiveValue*, CSSPrimitiveValue*, const CSSToLengthConversionData&, const FloatSize&);
 
     bool isCacheable() const;
 
+    void writeColorStop(StringBuilder&, const CSSGradientColorStop&) const;
+
     // Points. Some of these may be null.
     RefPtr<CSSPrimitiveValue> m_firstX;
     RefPtr<CSSPrimitiveValue> m_firstY;
 
     RefPtr<CSSPrimitiveValue> m_secondX;
     RefPtr<CSSPrimitiveValue> m_secondY;
 
     // Stops
     Vector<CSSGradientColorStop, 2> m_stops;
-    bool m_stopsSorted;
+    bool m_stopsSorted { false };
     CSSGradientType m_gradientType;
-    bool m_repeating;
+    bool m_repeating { false };
 };
 
 class CSSLinearGradientValue final : public CSSGradientValue {
 public:
     static Ref<CSSLinearGradientValue> create(CSSGradientRepeat repeat, CSSGradientType gradientType = CSSLinearGradient)
