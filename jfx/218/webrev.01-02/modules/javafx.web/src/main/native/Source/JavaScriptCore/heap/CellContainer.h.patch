diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/CellContainer.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/CellContainer.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/CellContainer.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/CellContainer.h
@@ -29,18 +29,18 @@
 
 namespace JSC {
 
 class Heap;
 class HeapCell;
-class LargeAllocation;
+class PreciseAllocation;
 class MarkedBlock;
 class WeakSet;
 class VM;
 
 typedef uint32_t HeapVersion;
 
-// This is how we abstract over either MarkedBlock& or LargeAllocation&. Put things in here as you
+// This is how we abstract over either MarkedBlock& or PreciseAllocation&. Put things in here as you
 // find need for them.
 
 class CellContainer {
 public:
     CellContainer()
@@ -51,33 +51,33 @@
     CellContainer(MarkedBlock& markedBlock)
         : m_encodedPointer(bitwise_cast<uintptr_t>(&markedBlock))
     {
     }
 
-    CellContainer(LargeAllocation& largeAllocation)
-        : m_encodedPointer(bitwise_cast<uintptr_t>(&largeAllocation) | isLargeAllocationBit)
+    CellContainer(PreciseAllocation& preciseAllocation)
+        : m_encodedPointer(bitwise_cast<uintptr_t>(&preciseAllocation) | isPreciseAllocationBit)
     {
     }
 
     VM& vm() const;
     Heap* heap() const;
 
     explicit operator bool() const { return !!m_encodedPointer; }
 
-    bool isMarkedBlock() const { return m_encodedPointer && !(m_encodedPointer & isLargeAllocationBit); }
-    bool isLargeAllocation() const { return m_encodedPointer & isLargeAllocationBit; }
+    bool isMarkedBlock() const { return m_encodedPointer && !(m_encodedPointer & isPreciseAllocationBit); }
+    bool isPreciseAllocation() const { return m_encodedPointer & isPreciseAllocationBit; }
 
     MarkedBlock& markedBlock() const
     {
         ASSERT(isMarkedBlock());
         return *bitwise_cast<MarkedBlock*>(m_encodedPointer);
     }
 
-    LargeAllocation& largeAllocation() const
+    PreciseAllocation& preciseAllocation() const
     {
-        ASSERT(isLargeAllocation());
-        return *bitwise_cast<LargeAllocation*>(m_encodedPointer - isLargeAllocationBit);
+        ASSERT(isPreciseAllocation());
+        return *bitwise_cast<PreciseAllocation*>(m_encodedPointer - isPreciseAllocationBit);
     }
 
     void aboutToMark(HeapVersion markingVersion);
     bool areMarksStale() const;
 
@@ -92,11 +92,11 @@
     size_t cellSize() const;
 
     WeakSet& weakSet() const;
 
 private:
-    static const uintptr_t isLargeAllocationBit = 1;
+    static constexpr uintptr_t isPreciseAllocationBit = 1;
     uintptr_t m_encodedPointer;
 };
 
 } // namespace JSC
 
