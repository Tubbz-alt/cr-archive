diff a/modules/javafx.web/src/main/native/Source/WebCore/page/CacheStorageProvider.h b/modules/javafx.web/src/main/native/Source/WebCore/page/CacheStorageProvider.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/CacheStorageProvider.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/CacheStorageProvider.h
@@ -24,24 +24,22 @@
  */
 
 #pragma once
 
 #include "CacheStorageConnection.h"
-#include <pal/SessionID.h>
 #include <wtf/RefCounted.h>
 
 namespace WebCore {
 
 class CacheStorageProvider : public RefCounted<CacheStorageProvider> {
 public:
     class DummyCacheStorageConnection final : public WebCore::CacheStorageConnection {
     public:
-        static Ref<DummyCacheStorageConnection> create(PAL::SessionID sessionID) { return adoptRef(*new DummyCacheStorageConnection(sessionID)); }
+        static Ref<DummyCacheStorageConnection> create() { return adoptRef(*new DummyCacheStorageConnection()); }
 
     private:
-        explicit DummyCacheStorageConnection(PAL::SessionID sessionID)
-            : m_sessionID(sessionID)
+        DummyCacheStorageConnection()
         {
         }
 
         void open(const ClientOrigin&, const String&, DOMCacheEngine::CacheIdentifierCallback&&) final { }
         void remove(uint64_t, DOMCacheEngine::CacheIdentifierCallback&&) final { }
@@ -49,17 +47,14 @@
         void retrieveRecords(uint64_t, const URL&, DOMCacheEngine::RecordsCallback&&) final { }
         void batchDeleteOperation(uint64_t, const ResourceRequest&, CacheQueryOptions&&, DOMCacheEngine::RecordIdentifiersCallback&&) final { }
         void batchPutOperation(uint64_t, Vector<DOMCacheEngine::Record>&&, DOMCacheEngine::RecordIdentifiersCallback&&) final { }
         void reference(uint64_t) final { }
         void dereference(uint64_t) final { }
-        PAL::SessionID sessionID() const final { return m_sessionID; }
-
-        PAL::SessionID m_sessionID;
     };
 
     static Ref<CacheStorageProvider> create() { return adoptRef(*new CacheStorageProvider); }
-    virtual Ref<CacheStorageConnection> createCacheStorageConnection(PAL::SessionID sessionID) { return DummyCacheStorageConnection::create(sessionID); }
+    virtual Ref<CacheStorageConnection> createCacheStorageConnection() { return DummyCacheStorageConnection::create(); }
     virtual ~CacheStorageProvider() { };
 
 protected:
     CacheStorageProvider() = default;
 };
