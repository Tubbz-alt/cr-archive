diff a/modules/javafx.web/src/main/native/Source/WebCore/css/StyleProperties.h b/modules/javafx.web/src/main/native/Source/WebCore/css/StyleProperties.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/StyleProperties.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/StyleProperties.h
@@ -48,11 +48,11 @@
 
 class StylePropertiesBase : public RefCounted<StylePropertiesBase> {
 public:
     // Override RefCounted's deref() to ensure operator delete is called on
     // the appropriate subclass type.
-    void deref();
+    void deref() const;
 
     StylePropertiesType type() const { return static_cast<StylePropertiesType>(m_type); }
 
     CSSParserMode cssParserMode() const { return static_cast<CSSParserMode>(m_cssParserMode); }
 
@@ -72,11 +72,13 @@
     unsigned m_cssParserMode : 3;
     mutable unsigned m_type : 2;
     unsigned m_arraySize : 27;
 };
 
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(StyleProperties);
 class StyleProperties : public StylePropertiesBase {
+    WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(StyleProperties);
     friend class PropertyReference;
 public:
     class PropertyReference {
     public:
         PropertyReference(const StylePropertyMetadata& metadata, const CSSValue* value)
@@ -157,11 +159,12 @@
 
     int findPropertyIndex(CSSPropertyID) const;
     int findCustomPropertyIndex(const String& propertyName) const;
 
 private:
-    String getShorthandValue(const StylePropertyShorthand&) const;
+    String getGridShorthandValue(const StylePropertyShorthand&) const;
+    String getShorthandValue(const StylePropertyShorthand&, const char* separator = " ") const;
     String getCommonValue(const StylePropertyShorthand&) const;
     String getAlignmentShorthandValue(const StylePropertyShorthand&) const;
     String borderPropertyValue(const StylePropertyShorthand&, const StylePropertyShorthand&, const StylePropertyShorthand&) const;
     String pageBreakPropertyValue(const StylePropertyShorthand&) const;
     String getLayeredShorthandValue(const StylePropertyShorthand&) const;
@@ -174,44 +177,48 @@
     RefPtr<CSSValue> getPropertyCSSValueInternal(CSSPropertyID) const;
 
     friend class PropertySetCSSStyleDeclaration;
 };
 
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(ImmutableStyleProperties);
 class ImmutableStyleProperties final : public StyleProperties {
+    WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(ImmutableStyleProperties);
 public:
     WEBCORE_EXPORT ~ImmutableStyleProperties();
     static Ref<ImmutableStyleProperties> create(const CSSProperty* properties, unsigned count, CSSParserMode);
 
     unsigned propertyCount() const { return m_arraySize; }
     bool isEmpty() const { return !propertyCount(); }
     PropertyReference propertyAt(unsigned index) const;
 
-    const CSSValue** valueArray() const;
-    const StylePropertyMetadata* metadataArray() const;
     int findPropertyIndex(CSSPropertyID) const;
     int findCustomPropertyIndex(const String& propertyName) const;
 
     void* m_storage;
 
 private:
+    PackedPtr<const CSSValue>* valueArray() const;
+    const StylePropertyMetadata* metadataArray() const;
     ImmutableStyleProperties(const CSSProperty*, unsigned count, CSSParserMode);
 };
 
-inline const CSSValue** ImmutableStyleProperties::valueArray() const
+inline PackedPtr<const CSSValue>* ImmutableStyleProperties::valueArray() const
 {
-    return reinterpret_cast<const CSSValue**>(const_cast<const void**>((&(this->m_storage))));
+    return bitwise_cast<PackedPtr<const CSSValue>*>(bitwise_cast<const uint8_t*>(metadataArray()) + (m_arraySize * sizeof(StylePropertyMetadata)));
 }
 
 inline const StylePropertyMetadata* ImmutableStyleProperties::metadataArray() const
 {
-    return reinterpret_cast_ptr<const StylePropertyMetadata*>(&reinterpret_cast_ptr<const char*>(&(this->m_storage))[m_arraySize * sizeof(CSSValue*)]);
+    return reinterpret_cast<const StylePropertyMetadata*>(const_cast<const void**>((&(this->m_storage))));
 }
 
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(MutableStyleProperties);
 class MutableStyleProperties final : public StyleProperties {
+    WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(MutableStyleProperties);
 public:
     WEBCORE_EXPORT static Ref<MutableStyleProperties> create(CSSParserMode = HTMLQuirksMode);
-    static Ref<MutableStyleProperties> create(const CSSProperty* properties, unsigned count);
+    static Ref<MutableStyleProperties> create(Vector<CSSProperty>&&);
 
     WEBCORE_EXPORT ~MutableStyleProperties();
 
     unsigned propertyCount() const { return m_propertyVector.size(); }
     bool isEmpty() const { return !propertyCount(); }
@@ -254,11 +261,11 @@
     bool removeCustomProperty(const String& propertyName, String* returnText = nullptr);
 
 private:
     explicit MutableStyleProperties(CSSParserMode);
     explicit MutableStyleProperties(const StyleProperties&);
-    MutableStyleProperties(const CSSProperty* properties, unsigned count);
+    MutableStyleProperties(Vector<CSSProperty>&&);
 
     bool removeShorthandProperty(CSSPropertyID);
     CSSProperty* findCSSPropertyWithID(CSSPropertyID);
     CSSProperty* findCustomCSSPropertyWithName(const String&);
     std::unique_ptr<PropertySetCSSStyleDeclaration> m_cssomWrapper;
@@ -280,11 +287,11 @@
     Ref<CSSDeferredParser> m_parser;
 };
 
 inline ImmutableStyleProperties::PropertyReference ImmutableStyleProperties::propertyAt(unsigned index) const
 {
-    return PropertyReference(metadataArray()[index], valueArray()[index]);
+    return PropertyReference(metadataArray()[index], valueArray()[index].get());
 }
 
 inline MutableStyleProperties::PropertyReference MutableStyleProperties::propertyAt(unsigned index) const
 {
     const CSSProperty& property = m_propertyVector[index];
@@ -303,11 +310,11 @@
     if (is<MutableStyleProperties>(*this))
         return downcast<MutableStyleProperties>(*this).propertyCount();
     return downcast<ImmutableStyleProperties>(*this).propertyCount();
 }
 
-inline void StylePropertiesBase::deref()
+inline void StylePropertiesBase::deref() const
 {
     if (!derefBase())
         return;
 
     if (is<MutableStyleProperties>(*this))
