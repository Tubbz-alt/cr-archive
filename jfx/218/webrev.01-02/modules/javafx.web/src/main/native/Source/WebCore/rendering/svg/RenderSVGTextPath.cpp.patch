diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGTextPath.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGTextPath.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGTextPath.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGTextPath.cpp
@@ -20,10 +20,11 @@
 #include "config.h"
 #include "RenderSVGTextPath.h"
 
 #include "FloatQuad.h"
 #include "RenderBlock.h"
+#include "SVGGeometryElement.h"
 #include "SVGInlineTextBox.h"
 #include "SVGNames.h"
 #include "SVGPathData.h"
 #include "SVGPathElement.h"
 #include "SVGRootInlineBox.h"
@@ -42,32 +43,39 @@
 SVGTextPathElement& RenderSVGTextPath::textPathElement() const
 {
     return downcast<SVGTextPathElement>(RenderSVGInline::graphicsElement());
 }
 
-Path RenderSVGTextPath::layoutPath() const
+SVGGeometryElement* RenderSVGTextPath::targetElement() const
 {
     auto target = SVGURIReference::targetElementFromIRIString(textPathElement().href(), textPathElement().treeScope());
-    if (!is<SVGPathElement>(target.element))
-        return Path();
+    if (!is<SVGGeometryElement>(target.element))
+        return nullptr;
+
+    return downcast<SVGGeometryElement>(target.element.get());
+}
 
-    SVGPathElement& pathElement = downcast<SVGPathElement>(*target.element);
+Path RenderSVGTextPath::layoutPath() const
+{
+    auto element = targetElement();
+    if (!is<SVGGeometryElement>(element))
+        return Path();
 
-    Path path = pathFromGraphicsElement(&pathElement);
+    Path path = pathFromGraphicsElement(element);
 
     // Spec:  The transform attribute on the referenced 'path' element represents a
     // supplemental transformation relative to the current user coordinate system for
     // the current 'text' element, including any adjustments to the current user coordinate
     // system due to a possible transform attribute on the current 'text' element.
     // http://www.w3.org/TR/SVG/text.html#TextPathElement
-    path.transform(pathElement.animatedLocalTransform());
+    path.transform(element->animatedLocalTransform());
     return path;
 }
 
-float RenderSVGTextPath::startOffset() const
+const SVGLengthValue& RenderSVGTextPath::startOffset() const
 {
-    return textPathElement().startOffset().valueAsPercentage();
+    return textPathElement().startOffset();
 }
 
 bool RenderSVGTextPath::exactAlignment() const
 {
     return textPathElement().spacing() == SVGTextPathSpacingExact;
