diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLLink.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLLink.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLLink.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/ftl/FTLLink.cpp
@@ -131,29 +131,29 @@
         bool requiresArityFixup = codeBlock->numParameters() != 1;
         if (codeBlock->codeType() == FunctionCode && requiresArityFixup) {
             CCallHelpers::JumpList mainPathJumps;
 
             jit.load32(
-                frame.withOffset(sizeof(Register) * CallFrameSlot::argumentCount),
+                frame.withOffset(sizeof(Register) * CallFrameSlot::argumentCountIncludingThis),
                 GPRInfo::regT1);
             mainPathJumps.append(jit.branch32(
                                      CCallHelpers::AboveOrEqual, GPRInfo::regT1,
                                      CCallHelpers::TrustedImm32(codeBlock->numParameters())));
             jit.emitFunctionPrologue();
-            jit.move(GPRInfo::callFrameRegister, GPRInfo::argumentGPR0);
+            jit.move(CCallHelpers::TrustedImmPtr(codeBlock->globalObject()), GPRInfo::argumentGPR0);
             jit.storePtr(GPRInfo::callFrameRegister, &vm.topCallFrame);
             CCallHelpers::Call callArityCheck = jit.call(OperationPtrTag);
 
             auto noException = jit.branch32(CCallHelpers::GreaterThanOrEqual, GPRInfo::returnValueGPR, CCallHelpers::TrustedImm32(0));
             jit.copyCalleeSavesToEntryFrameCalleeSavesBuffer(vm.topEntryFrame);
             jit.move(CCallHelpers::TrustedImmPtr(&vm), GPRInfo::argumentGPR0);
-            jit.move(GPRInfo::callFrameRegister, GPRInfo::argumentGPR1);
+            jit.prepareCallOperation(vm);
             CCallHelpers::Call callLookupExceptionHandlerFromCallerFrame = jit.call(OperationPtrTag);
             jit.jumpToExceptionHandler(vm);
             noException.link(&jit);
 
-            if (!ASSERT_DISABLED) {
+            if (ASSERT_ENABLED) {
                 jit.load64(vm.addressOfException(), GPRInfo::regT1);
                 jit.jitAssertIsNull(GPRInfo::regT1);
             }
 
             jit.move(GPRInfo::returnValueGPR, GPRInfo::argumentGPR0);
@@ -170,11 +170,11 @@
             if (linkBuffer->didFailToAllocate()) {
                 state.allocationFailed = true;
                 return;
             }
             linkBuffer->link(callArityCheck, FunctionPtr<OperationPtrTag>(codeBlock->isConstructor() ? operationConstructArityCheck : operationCallArityCheck));
-            linkBuffer->link(callLookupExceptionHandlerFromCallerFrame, FunctionPtr<OperationPtrTag>(lookupExceptionHandlerFromCallerFrame));
+            linkBuffer->link(callLookupExceptionHandlerFromCallerFrame, FunctionPtr<OperationPtrTag>(operationLookupExceptionHandlerFromCallerFrame));
             linkBuffer->link(callArityFixup, FunctionPtr<JITThunkPtrTag>(vm.getCTIStub(arityFixupGenerator).code()));
             linkBuffer->link(mainPathJumps, state.generatedFunction);
         }
 
         state.jitCode->initializeAddressForCall(state.generatedFunction);
