diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/MainThread.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/MainThread.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/MainThread.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/MainThread.h
@@ -51,25 +51,22 @@
 #endif
 
 WTF_EXPORT_PRIVATE void setMainThreadCallbacksPaused(bool paused);
 
 WTF_EXPORT_PRIVATE bool isMainThread();
-WTF_EXPORT_PRIVATE bool isMainThreadIfInitialized();
-WTF_EXPORT_PRIVATE bool isMainThreadInitialized();
 
-WTF_EXPORT_PRIVATE bool canAccessThreadLocalDataForThread(Thread&);
+WTF_EXPORT_PRIVATE bool canCurrentThreadAccessThreadLocalData(Thread&);
 
 WTF_EXPORT_PRIVATE bool isMainRunLoop();
 WTF_EXPORT_PRIVATE void callOnMainRunLoop(Function<void()>&&);
 WTF_EXPORT_PRIVATE void callOnMainRunLoopAndWait(Function<void()>&&);
 
 #if USE(WEB_THREAD)
 WTF_EXPORT_PRIVATE bool isWebThread();
 WTF_EXPORT_PRIVATE bool isUIThread();
 WTF_EXPORT_PRIVATE void initializeWebThread();
 WTF_EXPORT_PRIVATE void initializeApplicationUIThread();
-void initializeWebThreadPlatform();
 #else
 inline bool isWebThread() { return isMainThread(); }
 inline bool isUIThread() { return isMainThread(); }
 #endif // USE(WEB_THREAD)
 
@@ -78,27 +75,17 @@
 // NOTE: these functions are internal to the callOnMainThread implementation.
 void initializeMainThreadPlatform();
 void scheduleDispatchFunctionsOnMainThread();
 void dispatchFunctionsFromMainThread();
 
-#if OS(DARWIN) && !USE(GLIB)
-#if !USE(WEB_THREAD)
-// This version of initializeMainThread sets up the main thread as corresponding
-// to the process's main thread, and not necessarily the thread that calls this
-// function. It should only be used as a legacy aid for Mac WebKit.
-WTF_EXPORT_PRIVATE void initializeMainThreadToProcessMainThread();
-#endif // !USE(WEB_THREAD)
-void initializeMainThreadToProcessMainThreadPlatform();
-#endif
-
 } // namespace WTF
 
 using WTF::callOnMainThread;
 using WTF::callOnMainThreadAndWait;
 using WTF::callOnMainRunLoop;
 using WTF::callOnMainRunLoopAndWait;
-using WTF::canAccessThreadLocalDataForThread;
+using WTF::canCurrentThreadAccessThreadLocalData;
 using WTF::isMainThread;
 using WTF::isMainThreadOrGCThread;
 using WTF::isUIThread;
 using WTF::isWebThread;
 using WTF::setMainThreadCallbacksPaused;
