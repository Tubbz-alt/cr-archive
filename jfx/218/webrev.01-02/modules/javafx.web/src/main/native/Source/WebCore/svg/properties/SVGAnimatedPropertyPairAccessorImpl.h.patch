diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimatedPropertyPairAccessorImpl.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimatedPropertyPairAccessorImpl.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimatedPropertyPairAccessorImpl.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/properties/SVGAnimatedPropertyPairAccessorImpl.h
@@ -37,17 +37,29 @@
 template<typename OwnerType>
 class SVGAnimatedAngleOrientAccessor final : public SVGAnimatedPropertyPairAccessor<OwnerType, SVGAnimatedAngleAccessor<OwnerType>, SVGAnimatedOrientTypeAccessor<OwnerType>> {
     using Base = SVGAnimatedPropertyPairAccessor<OwnerType, SVGAnimatedAngleAccessor<OwnerType>, SVGAnimatedOrientTypeAccessor<OwnerType>>;
     using Base::property1;
     using Base::property2;
+    using Base::m_accessor1;
+    using Base::m_accessor2;
 
 public:
     using Base::Base;
     template<Ref<SVGAnimatedAngle> OwnerType::*property1, Ref<SVGAnimatedOrientType> OwnerType::*property2>
     constexpr static const SVGMemberAccessor<OwnerType>& singleton() { return Base::template singleton<SVGAnimatedAngleOrientAccessor, property1, property2>(); }
 
 private:
+    void setDirty(const OwnerType& owner, SVGAnimatedProperty& animatedProperty) const final
+    {
+        auto type = property2(owner)->baseVal();
+        if (m_accessor1.matches(owner, animatedProperty) && type != SVGMarkerOrientAngle)
+            property2(owner)->setBaseValInternal(SVGMarkerOrientAngle);
+        else if (m_accessor2.matches(owner, animatedProperty) && type != SVGMarkerOrientAngle)
+            property1(owner)->setBaseValInternal({ });
+        animatedProperty.setDirty();
+    }
+
     Optional<String> synchronize(const OwnerType& owner) const final
     {
         bool dirty1 = property1(owner)->isDirty();
         bool dirty2 = property2(owner)->isDirty();
         if (!(dirty1 || dirty2))
