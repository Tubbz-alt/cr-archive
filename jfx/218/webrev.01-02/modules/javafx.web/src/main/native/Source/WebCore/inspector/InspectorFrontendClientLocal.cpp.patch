diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendClientLocal.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendClientLocal.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendClientLocal.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendClientLocal.cpp
@@ -79,47 +79,58 @@
     void dispatch(const String& message)
     {
         ASSERT_ARG(message, !message.isEmpty());
 
         m_messages.append(message);
-        if (!m_timer.isActive())
-            m_timer.startOneShot(0_s);
+        scheduleOneShot();
     }
 
     void reset()
     {
         m_messages.clear();
-        m_timer.stop();
         m_inspectedPageController = nullptr;
     }
 
-    void timerFired()
+private:
+    InspectorBackendDispatchTask(InspectorController* inspectedPageController)
+        : m_inspectedPageController(inspectedPageController)
+    {
+        ASSERT_ARG(inspectedPageController, inspectedPageController);
+    }
+
+    void scheduleOneShot()
     {
-        ASSERT(m_inspectedPageController);
+        if (m_hasScheduledTask)
+            return;
+        m_hasScheduledTask = true;
+
+        // The frontend can be closed and destroy the owning frontend client before or in the
+        // process of dispatching the task, so keep a protector reference here.
+        RunLoop::current().dispatch([this, protectedThis = makeRef(*this)] {
+            m_hasScheduledTask = false;
+            dispatchOneMessage();
+        });
+    }
 
-        // Dispatching a message can possibly close the frontend and destroy
-        // the owning frontend client, so keep a protector reference here.
-        Ref<InspectorBackendDispatchTask> protectedThis(*this);
+    void dispatchOneMessage()
+    {
+        // Owning frontend client may have been destroyed after the task was scheduled.
+        if (!m_inspectedPageController) {
+            ASSERT(m_messages.isEmpty());
+            return;
+        }
 
         if (!m_messages.isEmpty())
             m_inspectedPageController->dispatchMessageFromFrontend(m_messages.takeFirst());
 
         if (!m_messages.isEmpty() && m_inspectedPageController)
-            m_timer.startOneShot(0_s);
-    }
-
-private:
-    InspectorBackendDispatchTask(InspectorController* inspectedPageController)
-        : m_inspectedPageController(inspectedPageController)
-        , m_timer(*this, &InspectorBackendDispatchTask::timerFired)
-    {
-        ASSERT_ARG(inspectedPageController, inspectedPageController);
+            scheduleOneShot();
     }
 
     InspectorController* m_inspectedPageController { nullptr };
-    Timer m_timer;
     Deque<String> m_messages;
+    bool m_hasScheduledTask { false };
 };
 
 String InspectorFrontendClientLocal::Settings::getProperty(const String&)
 {
     return String();
@@ -407,22 +418,22 @@
 }
 
 bool InspectorFrontendClientLocal::evaluateAsBoolean(const String& expression)
 {
     auto& state = *mainWorldExecState(&m_frontendPage->mainFrame());
-    return m_frontendPage->mainFrame().script().executeScript(expression).toWTFString(&state) == "true";
+    return m_frontendPage->mainFrame().script().executeScriptIgnoringException(expression).toWTFString(&state) == "true";
 }
 
 void InspectorFrontendClientLocal::evaluateOnLoad(const String& expression)
 {
     if (!m_frontendLoaded) {
         m_evaluateOnLoad.append(expression);
         return;
     }
 
     JSC::SuspendExceptionScope scope(&m_frontendPage->inspectorController().vm());
-    m_frontendPage->mainFrame().script().evaluate(ScriptSourceCode(expression));
+    m_frontendPage->mainFrame().script().evaluateIgnoringException(ScriptSourceCode(expression));
 }
 
 Page* InspectorFrontendClientLocal::inspectedPage() const
 {
     if (!m_inspectedPageController)
