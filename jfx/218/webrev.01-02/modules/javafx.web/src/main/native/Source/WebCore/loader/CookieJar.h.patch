diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/CookieJar.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/CookieJar.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/CookieJar.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/CookieJar.h
@@ -28,14 +28,10 @@
 #include "FrameIdentifier.h"
 #include "PageIdentifier.h"
 #include <wtf/Forward.h>
 #include <wtf/text/WTFString.h>
 
-namespace PAL {
-class SessionID;
-}
-
 namespace WebCore {
 
 enum class IncludeSecureCookies : bool { No, Yes };
 enum class IncludeHttpOnlyCookies : bool { No, Yes };
 enum class SecureCookiesAccessed : bool { No, Yes };
@@ -58,11 +54,11 @@
     // These two functions implement document.cookie API, with special rules for HttpOnly cookies.
     virtual String cookies(Document&, const URL&) const;
     virtual void setCookies(Document&, const URL&, const String& cookieString);
 
     virtual bool cookiesEnabled(const Document&) const;
-    virtual std::pair<String, SecureCookiesAccessed> cookieRequestHeaderFieldValue(const PAL::SessionID&, const URL& firstParty, const SameSiteInfo&, const URL&, Optional<FrameIdentifier>, Optional<PageIdentifier>, IncludeSecureCookies) const;
+    virtual std::pair<String, SecureCookiesAccessed> cookieRequestHeaderFieldValue(const URL& firstParty, const SameSiteInfo&, const URL&, Optional<FrameIdentifier>, Optional<PageIdentifier>, IncludeSecureCookies) const;
     virtual bool getRawCookies(const Document&, const URL&, Vector<Cookie>&) const;
     virtual void deleteCookie(const Document&, const URL&, const String& cookieName);
 
     virtual ~CookieJar();
 protected:
