diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/VMEntryRecord.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/VMEntryRecord.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/VMEntryRecord.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/VMEntryRecord.h
@@ -28,21 +28,22 @@
 #include "GPRInfo.h"
 
 namespace JSC {
 
 struct EntryFrame;
-class ExecState;
+class CallFrame;
+class JSGlobalObject;
 class JSObject;
 class VM;
 
 struct VMEntryRecord {
     /*
      * This record stored in a vmEntryTo{JavaScript,Host} allocated frame. It is allocated on the stack
      * after callee save registers where local variables would go.
      */
     VM* m_vm;
-    ExecState* m_prevTopCallFrame;
+    CallFrame* m_prevTopCallFrame;
     EntryFrame* m_prevTopEntryFrame;
     JSObject* m_callee;
 
     JSObject* callee() const { return m_callee; }
 
@@ -50,12 +51,12 @@
     CPURegister calleeSaveRegistersBuffer[NUMBER_OF_CALLEE_SAVES_REGISTERS];
 #elif ENABLE(C_LOOP)
     CPURegister calleeSaveRegistersBuffer[1];
 #endif
 
-    ExecState* prevTopCallFrame() { return m_prevTopCallFrame; }
-    SUPPRESS_ASAN ExecState* unsafePrevTopCallFrame() { return m_prevTopCallFrame; }
+    CallFrame* prevTopCallFrame() { return m_prevTopCallFrame; }
+    SUPPRESS_ASAN CallFrame* unsafePrevTopCallFrame() { return m_prevTopCallFrame; }
 
     EntryFrame* prevTopEntryFrame() { return m_prevTopEntryFrame; }
     SUPPRESS_ASAN EntryFrame* unsafePrevTopEntryFrame() { return m_prevTopEntryFrame; }
 };
 
