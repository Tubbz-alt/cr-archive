diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentResponse.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentResponse.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentResponse.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentResponse.cpp
@@ -26,10 +26,11 @@
 #include "config.h"
 #include "PaymentResponse.h"
 
 #if ENABLE(PAYMENT_REQUEST)
 
+#include "JSDOMPromiseDeferred.h"
 #include "NotImplemented.h"
 #include "PaymentRequest.h"
 #include <wtf/IsoMallocInlines.h>
 #include <wtf/RunLoop.h>
 
@@ -101,11 +102,11 @@
     if (exception.hasException()) {
         promise.reject(exception.releaseException());
         return;
     }
 
-    m_retryPromise = WTFMove(promise);
+    m_retryPromise = WTF::makeUnique<DOMPromiseDeferred<void>>(WTFMove(promise));
 }
 
 void PaymentResponse::abortWithException(Exception&& exception)
 {
     settleRetryPromise(WTFMove(exception));
@@ -118,24 +119,33 @@
     if (!m_retryPromise)
         return;
 
     ASSERT(hasPendingActivity());
     ASSERT(m_state == State::Created);
-    std::exchange(m_retryPromise, WTF::nullopt)->settle(WTFMove(result));
-}
-
-bool PaymentResponse::canSuspendForDocumentSuspension() const
-{
-    ASSERT(m_state != State::Stopped);
-    return !hasPendingActivity();
+    m_retryPromise->settle(WTFMove(result));
+    m_retryPromise = nullptr;
 }
 
 void PaymentResponse::stop()
 {
     settleRetryPromise(Exception { AbortError });
     m_pendingActivity = nullptr;
     m_state = State::Stopped;
 }
 
+void PaymentResponse::suspend(ReasonForSuspension reason)
+{
+    if (reason != ReasonForSuspension::BackForwardCache)
+        return;
+
+    if (m_state != State::Created) {
+        ASSERT(!hasPendingActivity());
+        ASSERT(!m_retryPromise);
+        return;
+    }
+
+    stop();
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(PAYMENT_REQUEST)
