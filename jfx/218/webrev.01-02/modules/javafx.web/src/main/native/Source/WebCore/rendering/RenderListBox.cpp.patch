diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderListBox.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderListBox.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderListBox.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderListBox.cpp
@@ -32,11 +32,10 @@
 
 #include "AXObjectCache.h"
 #include "CSSFontSelector.h"
 #include "DeprecatedGlobalSettings.h"
 #include "Document.h"
-#include "DocumentEventQueue.h"
 #include "EventHandler.h"
 #include "FocusController.h"
 #include "Frame.h"
 #include "FrameSelection.h"
 #include "FrameView.h"
@@ -60,11 +59,11 @@
 #include "ScrollbarTheme.h"
 #include "Settings.h"
 #include "SpatialNavigation.h"
 #include "StyleResolver.h"
 #include "StyleTreeResolver.h"
-#include "WheelEventTestTrigger.h"
+#include "WheelEventTestMonitor.h"
 #include <math.h>
 #include <wtf/IsoMallocInlines.h>
 #include <wtf/StackStats.h>
 
 namespace WebCore {
@@ -711,11 +710,11 @@
     m_indexOffset = newOffset;
 
     computeFirstIndexesVisibleInPaddingTopBottomAreas();
 
     repaint();
-    document().eventQueue().enqueueOrDispatchScrollEvent(selectElement());
+    document().addPendingScrollEventTarget(selectElement());
 }
 
 LayoutUnit RenderListBox::itemHeight() const
 {
     return style().fontMetrics().height() + rowSpacing;
@@ -751,25 +750,26 @@
 int RenderListBox::scrollTop() const
 {
     return m_indexOffset * itemHeight();
 }
 
-static void setupWheelEventTestTrigger(RenderListBox& renderer)
+static void setupWheelEventTestMonitor(RenderListBox& renderer)
 {
-    if (!renderer.page().expectsWheelEventTriggers())
+    if (!renderer.page().isMonitoringWheelEvents())
         return;
 
-    renderer.scrollAnimator().setWheelEventTestTrigger(renderer.page().testTrigger());
+    renderer.scrollAnimator().setWheelEventTestMonitor(renderer.page().wheelEventTestMonitor());
 }
 
 void RenderListBox::setScrollTop(int newTop, ScrollType, ScrollClamping)
 {
     // Determine an index and scroll to it.
     int index = newTop / itemHeight();
     if (index < 0 || index >= numItems() || index == m_indexOffset)
         return;
-    setupWheelEventTestTrigger(*this);
+
+    setupWheelEventTestMonitor(*this);
     scrollToOffsetWithoutAnimation(VerticalScrollbar, index);
 }
 
 bool RenderListBox::nodeAtPoint(const HitTestRequest& request, HitTestResult& result, const HitTestLocation& locationInContainer, const LayoutPoint& accumulatedOffset, HitTestAction hitTestAction)
 {
@@ -914,12 +914,12 @@
     if (hasCustomScrollbarStyle)
         widget = RenderScrollbar::createCustomScrollbar(*this, VerticalScrollbar, &selectElement());
     else {
         widget = Scrollbar::createNativeScrollbar(*this, VerticalScrollbar, theme().scrollbarControlSizeForPart(ListboxPart));
         didAddScrollbar(widget.get(), VerticalScrollbar);
-        if (page().expectsWheelEventTriggers())
-            scrollAnimator().setWheelEventTestTrigger(page().testTrigger());
+        if (page().isMonitoringWheelEvents())
+            scrollAnimator().setWheelEventTestMonitor(page().wheelEventTestMonitor());
     }
     view().frameView().addChild(*widget);
     return widget.releaseNonNull();
 }
 
