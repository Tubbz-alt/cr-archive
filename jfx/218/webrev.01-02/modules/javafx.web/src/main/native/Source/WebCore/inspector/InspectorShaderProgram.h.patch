diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorShaderProgram.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorShaderProgram.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorShaderProgram.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorShaderProgram.h
@@ -24,45 +24,78 @@
  */
 
 #pragma once
 
 #include <JavaScriptCore/InspectorProtocolObjects.h>
+#include <wtf/Forward.h>
+#include <wtf/RefCounted.h>
+#include <wtf/Variant.h>
 
 namespace WebCore {
 
 class InspectorCanvas;
+
+#if ENABLE(WEBGL)
 class WebGLProgram;
 class WebGLRenderingContextBase;
-class WebGLShader;
+#endif
 
-typedef String ErrorString;
+#if ENABLE(WEBGPU)
+class WebGPUPipeline;
+#endif
 
 class InspectorShaderProgram final : public RefCounted<InspectorShaderProgram> {
 public:
+#if ENABLE(WEBGL)
     static Ref<InspectorShaderProgram> create(WebGLProgram&, InspectorCanvas&);
+#endif
+#if ENABLE(WEBGPU)
+    static Ref<InspectorShaderProgram> create(WebGPUPipeline&, InspectorCanvas&);
+#endif
 
     const String& identifier() const { return m_identifier; }
     InspectorCanvas& canvas() const { return m_canvas; }
-    WebGLRenderingContextBase& context() const;
-    WebGLProgram& program() const { return m_program; }
-    WebGLShader* shaderForType(const String&);
+
+#if ENABLE(WEBGL)
+    WebGLProgram* program() const;
+#endif
+#if ENABLE(WEBGPU)
+    WebGPUPipeline* pipeline() const;
+#endif
+
+    String requestShaderSource(Inspector::Protocol::Canvas::ShaderType);
+    bool updateShader(Inspector::Protocol::Canvas::ShaderType, const String& source);
 
     bool disabled() const { return m_disabled; }
     void setDisabled(bool disabled) { m_disabled = disabled; }
 
     bool highlighted() const { return m_highlighted; }
     void setHighlighted(bool value) { m_highlighted = value; }
 
-    ~InspectorShaderProgram() = default;
+    Ref<Inspector::Protocol::Canvas::ShaderProgram> buildObjectForShaderProgram();
 
 private:
+#if ENABLE(WEBGL)
     InspectorShaderProgram(WebGLProgram&, InspectorCanvas&);
+#endif
+#if ENABLE(WEBGPU)
+    InspectorShaderProgram(WebGPUPipeline&, InspectorCanvas&);
+#endif
 
     String m_identifier;
-    WebGLProgram& m_program;
     InspectorCanvas& m_canvas;
 
+    Variant<
+#if ENABLE(WEBGL)
+        std::reference_wrapper<WebGLProgram>,
+#endif
+#if ENABLE(WEBGPU)
+        std::reference_wrapper<WebGPUPipeline>,
+#endif
+        WTF::Monostate
+    > m_program;
+
     bool m_disabled { false };
     bool m_highlighted { false };
 };
 
 } // namespace WebCore
