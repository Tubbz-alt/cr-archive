diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBObjectStoreInfo.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBObjectStoreInfo.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBObjectStoreInfo.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/shared/IDBObjectStoreInfo.cpp
@@ -41,24 +41,21 @@
     , m_keyPath(WTFMove(keyPath))
     , m_autoIncrement(autoIncrement)
 {
 }
 
-IDBIndexInfo IDBObjectStoreInfo::createNewIndex(const String& name, IDBKeyPath&& keyPath, bool unique, bool multiEntry)
+IDBIndexInfo IDBObjectStoreInfo::createNewIndex(uint64_t indexID, const String& name, IDBKeyPath&& keyPath, bool unique, bool multiEntry)
 {
-    IDBIndexInfo info(++m_maxIndexID, m_identifier, name, WTFMove(keyPath), unique, multiEntry);
+    IDBIndexInfo info(indexID, m_identifier, name, WTFMove(keyPath), unique, multiEntry);
     m_indexMap.set(info.identifier(), info);
     return info;
 }
 
 void IDBObjectStoreInfo::addExistingIndex(const IDBIndexInfo& info)
 {
     ASSERT(!m_indexMap.contains(info.identifier()));
 
-    if (info.identifier() > m_maxIndexID)
-        m_maxIndexID = info.identifier();
-
     m_indexMap.set(info.identifier(), info);
 }
 
 bool IDBObjectStoreInfo::hasIndex(const String& name) const
 {
@@ -96,17 +93,12 @@
 
 IDBObjectStoreInfo IDBObjectStoreInfo::isolatedCopy() const
 {
     IDBObjectStoreInfo result = { m_identifier, m_name.isolatedCopy(), WebCore::isolatedCopy(m_keyPath), m_autoIncrement };
 
-    for (auto& iterator : m_indexMap) {
+    for (auto& iterator : m_indexMap)
         result.m_indexMap.set(iterator.key, iterator.value.isolatedCopy());
-        if (iterator.key > result.m_maxIndexID)
-            result.m_maxIndexID = iterator.key;
-    }
-
-    ASSERT(result.m_maxIndexID == m_maxIndexID);
 
     return result;
 }
 
 Vector<String> IDBObjectStoreInfo::indexNames() const
