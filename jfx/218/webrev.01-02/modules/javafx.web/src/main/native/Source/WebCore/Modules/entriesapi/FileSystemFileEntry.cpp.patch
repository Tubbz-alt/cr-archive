diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemFileEntry.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemFileEntry.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemFileEntry.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemFileEntry.cpp
@@ -26,28 +26,37 @@
 #include "config.h"
 #include "FileSystemFileEntry.h"
 
 #include "DOMException.h"
 #include "DOMFileSystem.h"
+#include "Document.h"
 #include "ErrorCallback.h"
+#include "File.h"
 #include "FileCallback.h"
+#include "WindowEventLoop.h"
 
 namespace WebCore {
 
 FileSystemFileEntry::FileSystemFileEntry(ScriptExecutionContext& context, DOMFileSystem& filesystem, const String& virtualPath)
     : FileSystemEntry(context, filesystem, virtualPath)
 {
 }
 
-void FileSystemFileEntry::file(ScriptExecutionContext& context, Ref<FileCallback>&& successCallback, RefPtr<ErrorCallback>&& errorCallback)
+void FileSystemFileEntry::file(Ref<FileCallback>&& successCallback, RefPtr<ErrorCallback>&& errorCallback)
 {
-    filesystem().getFile(context, *this, [successCallback = WTFMove(successCallback), errorCallback = WTFMove(errorCallback)](auto&& result) {
-        if (result.hasException()) {
-            if (errorCallback)
-                errorCallback->handleEvent(DOMException::create(result.releaseException()));
+    filesystem().getFile(*this, [this, pendingActivity = makePendingActivity(*this), successCallback = WTFMove(successCallback), errorCallback = WTFMove(errorCallback)](auto&& result) mutable {
+        auto* document = this->document();
+        if (!document)
             return;
-        }
-        successCallback->handleEvent(result.releaseReturnValue());
+
+        document->eventLoop().queueTask(TaskSource::Networking, [successCallback = WTFMove(successCallback), errorCallback = WTFMove(errorCallback), result = WTFMove(result), pendingActivity = WTFMove(pendingActivity)]() mutable {
+            if (result.hasException()) {
+                if (errorCallback)
+                    errorCallback->handleEvent(DOMException::create(result.releaseException()));
+                return;
+            }
+            successCallback->handleEvent(result.releaseReturnValue());
+        });
     });
 }
 
 } // namespace WebCore
