diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirEmitShuffle.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirEmitShuffle.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirEmitShuffle.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/air/AirEmitShuffle.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -36,11 +36,11 @@
 namespace JSC { namespace B3 { namespace Air {
 
 namespace {
 
 namespace AirEmitShuffleInternal {
-static const bool verbose = false;
+static constexpr bool verbose = false;
 }
 
 template<typename Functor>
 Tmp findPossibleScratch(Code& code, Bank bank, const Functor& functor) {
     for (Reg reg : code.regsInPriorityOrder(bank)) {
@@ -137,17 +137,17 @@
         [&] (const ShufflePair& pair) -> bool {
             return pair.src() == pair.dst();
         });
 
     // First validate that this is the kind of shuffle that we know how to deal with.
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     for (const ShufflePair& pair : pairs) {
         ASSERT(pair.src().isBank(bank));
         ASSERT(pair.dst().isBank(bank));
         ASSERT(pair.dst().isTmp() || pair.dst().isMemory());
     }
-#endif // !ASSERT_DISABLED
+#endif // ASSERT_ENABLED
 
     // There are two possible kinds of operations that we will do:
     //
     // - Shift. Example: (a => b, b => c). We emit this as "Move b, c; Move a, b". This only requires
     //   scratch registers if there are memory->memory moves. We want to find as many of these as
