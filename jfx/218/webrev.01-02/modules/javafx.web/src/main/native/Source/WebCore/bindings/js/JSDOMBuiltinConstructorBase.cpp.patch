diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBuiltinConstructorBase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBuiltinConstructorBase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBuiltinConstructorBase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMBuiltinConstructorBase.cpp
@@ -20,37 +20,43 @@
  */
 
 #include "config.h"
 #include "JSDOMBuiltinConstructorBase.h"
 
+#include "WebCoreJSClientData.h"
 #include <JavaScriptCore/JSCInlines.h>
 
 namespace WebCore {
 using namespace JSC;
 
-void JSDOMBuiltinConstructorBase::callFunctionWithCurrentArguments(JSC::ExecState& state, JSC::JSObject& thisObject, JSC::JSFunction& function)
+void JSDOMBuiltinConstructorBase::callFunctionWithCurrentArguments(JSC::JSGlobalObject& lexicalGlobalObject, JSC::CallFrame& callFrame, JSC::JSObject& thisObject, JSC::JSFunction& function)
 {
-    JSC::VM& vm = state.vm();
+    JSC::VM& vm = lexicalGlobalObject.vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
     JSC::CallData callData;
     JSC::CallType callType = JSC::getCallData(vm, &function, callData);
     ASSERT(callType != CallType::None);
 
     JSC::MarkedArgumentBuffer arguments;
-    for (unsigned i = 0; i < state.argumentCount(); ++i)
-        arguments.append(state.uncheckedArgument(i));
+    for (unsigned i = 0; i < callFrame.argumentCount(); ++i)
+        arguments.append(callFrame.uncheckedArgument(i));
     if (UNLIKELY(arguments.hasOverflowed())) {
-        throwOutOfMemoryError(&state, scope);
+        throwOutOfMemoryError(&lexicalGlobalObject, scope);
         return;
     }
-    JSC::call(&state, &function, callType, callData, &thisObject, arguments);
+    JSC::call(&lexicalGlobalObject, &function, callType, callData, &thisObject, arguments);
 }
 
 void JSDOMBuiltinConstructorBase::visitChildren(JSC::JSCell* cell, JSC::SlotVisitor& visitor)
 {
     auto* thisObject = jsCast<JSDOMBuiltinConstructorBase*>(cell);
     ASSERT_GC_OBJECT_INHERITS(thisObject, info());
     Base::visitChildren(thisObject, visitor);
     visitor.append(thisObject->m_initializeFunction);
 }
 
+JSC::IsoSubspace* JSDOMBuiltinConstructorBase::subspaceForImpl(JSC::VM& vm)
+{
+    return &static_cast<JSVMClientData*>(vm.clientData)->domBuiltinConstructorSpace();
+}
+
 } // namespace WebCore
