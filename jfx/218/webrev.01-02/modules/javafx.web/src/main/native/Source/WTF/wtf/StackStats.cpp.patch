diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/StackStats.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/StackStats.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/StackStats.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/StackStats.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2012 Apple Inc. All rights reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -71,11 +71,10 @@
     std::lock_guard<Lock> lock(StackStats::s_sharedMutex);
     Thread& thread = Thread::current();
     StackStats::PerThreadStats& t = thread.stackStats();
     const StackBounds& stack = thread.stack();
 
-    bool isGrowingDownward = stack.isGrowingDownward();
     bool needToLog = false;
     char* current = reinterpret_cast<char*>(this);
     char* last = reinterpret_cast<char*>(t.m_currentCheckPoint);
 
     // If there was no previous checkpoint, measure from the start of the stack:
@@ -89,21 +88,17 @@
         needToLog = true;
     }
 
     // Update the stack height stats:
     int height = t.m_stackStart - current;
-    if (!isGrowingDownward)
-        height = -height;
     if (height > StackStats::s_maxStackHeight) {
         StackStats::s_maxStackHeight = height;
         needToLog = true;
     }
 
     // Update the checkpoint diff stats:
     int diff = last - current;
-    if (!isGrowingDownward)
-        diff = -diff;
     if (diff > StackStats::s_maxCheckPointDiff) {
         StackStats::s_maxCheckPointDiff = diff;
         needToLog = true;
     }
 
@@ -136,18 +131,14 @@
 
     // Log this checkpoint if needed:
 #if ENABLE(VERBOSE_STACK_STATS)
     if (!m_prev) {
         const StackBounds& stack = thread.stack();
-        bool isGrowingDownward = stack.isGrowingDownward();
 
         char* current = reinterpret_cast<char*>(this);
         int height = t.m_stackStart - current;
 
-        if (!isGrowingDownward)
-            height = -height;
-
         dataLogF(" POP to %p diff max %.1fk | reentry %d/%d max | height %.1fk/max %.1fk | stack %p size %.1fk)\n",
             this, StackStats::s_maxCheckPointDiff / 1024.0,
             t.m_reentryDepth, StackStats::s_maxReentryDepth,
             height / 1024.0, StackStats::s_maxStackHeight / 1024.0,
             stack.origin(), stack.size() / 1024.0);
@@ -160,12 +151,10 @@
     std::lock_guard<Lock> lock(StackStats::s_sharedMutex);
     Thread& thread = Thread::current();
     StackStats::PerThreadStats& t = thread.stackStats();
     const StackBounds& stack = thread.stack();
 
-    bool isGrowingDownward = stack.isGrowingDownward();
-
     bool needToLog = false;
 
     int dummy;
     char* current = reinterpret_cast<char*>(&dummy);
     char* last = reinterpret_cast<char*>(t.m_currentCheckPoint);
@@ -177,21 +166,17 @@
     // We did not reach another checkpoint yet. Hence, we do not touch the
     // reentry stats.
 
     // Update the stack height stats:
     int height = t.m_stackStart - current;
-    if (!isGrowingDownward)
-        height = -height;
     if (height > StackStats::s_maxStackHeight) {
         StackStats::s_maxStackHeight = height;
         needToLog = true;
     }
 
     // Update the checkpoint diff stats:
     int diff = last - current;
-    if (!isGrowingDownward)
-        diff = -diff;
     if (diff > StackStats::s_maxCheckPointDiff) {
         StackStats::s_maxCheckPointDiff = diff;
         needToLog = true;
     }
 
@@ -221,12 +206,10 @@
     std::lock_guard<Lock> lock(StackStats::s_sharedMutex);
     Thread& thread = Thread::current();
     StackStats::PerThreadStats& t = thread.stackStats();
     const StackBounds& stack = thread.stack();
 
-    bool isGrowingDownward = stack.isGrowingDownward();
-
     // Push this checkpoint:
     m_prev = StackStats::s_topLayoutCheckPoint;
     if (m_prev)
         m_depth = m_prev->m_depth + 1;
     else {
@@ -248,28 +231,22 @@
     if (!root)
         totalDiff = 0;
 
     // Update the stack height stats:
     int height = t.m_stackStart - current;
-    if (!isGrowingDownward)
-        height = -height;
     if (height > StackStats::s_maxStackHeight) {
         StackStats::s_maxStackHeight = height;
         needToLog = true;
     }
 
     // Update the layout checkpoint diff stats:
-    if (!isGrowingDownward)
-        diff = -diff;
     if (diff > StackStats::s_maxLayoutCheckPointDiff) {
         StackStats::s_maxLayoutCheckPointDiff = diff;
         needToLog = true;
     }
 
     // Update the total layout checkpoint diff stats:
-    if (!isGrowingDownward)
-        totalDiff = -totalDiff;
     if (totalDiff > StackStats::s_maxTotalLayoutCheckPointDiff) {
         StackStats::s_maxTotalLayoutCheckPointDiff = totalDiff;
         needToLog = true;
     }
 
