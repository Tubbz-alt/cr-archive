diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/PasteboardStrategy.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/PasteboardStrategy.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/PasteboardStrategy.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/PasteboardStrategy.h
@@ -29,64 +29,63 @@
 #include <wtf/Forward.h>
 
 namespace WebCore {
 
 class Color;
+class PasteboardCustomData;
 class SelectionData;
 class SharedBuffer;
 struct PasteboardImage;
 struct PasteboardItemInfo;
 struct PasteboardURL;
 struct PasteboardWebContent;
-struct PasteboardCustomData;
 
 class PasteboardStrategy {
 public:
 #if PLATFORM(IOS_FAMILY)
     virtual void writeToPasteboard(const PasteboardURL&, const String& pasteboardName) = 0;
     virtual void writeToPasteboard(const PasteboardWebContent&, const String& pasteboardName) = 0;
     virtual void writeToPasteboard(const PasteboardImage&, const String& pasteboardName) = 0;
     virtual void writeToPasteboard(const String& pasteboardType, const String&, const String& pasteboardName) = 0;
-    virtual int getPasteboardItemsCount(const String& pasteboardName) = 0;
-    virtual String readStringFromPasteboard(int index, const String& pasteboardType, const String& pasteboardName) = 0;
-    virtual RefPtr<SharedBuffer> readBufferFromPasteboard(int index, const String& pasteboardType, const String& pasteboardName) = 0;
-    virtual URL readURLFromPasteboard(int index, const String& pasteboardName, String& title) = 0;
-    virtual Vector<PasteboardItemInfo> allPasteboardItemInfo(const String& pasteboardName) = 0;
-    virtual PasteboardItemInfo informationForItemAtIndex(int index, const String& pasteboardName) = 0;
     virtual void updateSupportedTypeIdentifiers(const Vector<String>& identifiers, const String& pasteboardName) = 0;
 #endif // PLATFORM(IOS_FAMILY)
 #if PLATFORM(COCOA)
     virtual void getTypes(Vector<String>& types, const String& pasteboardName) = 0;
     virtual RefPtr<SharedBuffer> bufferForType(const String& pasteboardType, const String& pasteboardName) = 0;
     virtual void getPathnamesForType(Vector<String>& pathnames, const String& pasteboardType, const String& pasteboardName) = 0;
     virtual String stringForType(const String& pasteboardType, const String& pasteboardName) = 0;
     virtual Vector<String> allStringsForType(const String& pasteboardType, const String& pasteboardName) = 0;
-    virtual long changeCount(const String& pasteboardName) = 0;
+    virtual int64_t changeCount(const String& pasteboardName) = 0;
     virtual String uniqueName() = 0;
     virtual Color color(const String& pasteboardName) = 0;
     virtual URL url(const String& pasteboardName) = 0;
     virtual int getNumberOfFiles(const String& pasteboardName) = 0;
 
-    virtual long addTypes(const Vector<String>& pasteboardTypes, const String& pasteboardName) = 0;
-    virtual long setTypes(const Vector<String>& pasteboardTypes, const String& pasteboardName) = 0;
-    virtual long setBufferForType(SharedBuffer*, const String& pasteboardType, const String& pasteboardName) = 0;
-    virtual long setURL(const PasteboardURL&, const String& pasteboardName) = 0;
-    virtual long setColor(const Color&, const String& pasteboardName) = 0;
-    virtual long setStringForType(const String&, const String& pasteboardType, const String& pasteboardName) = 0;
+    virtual int64_t addTypes(const Vector<String>& pasteboardTypes, const String& pasteboardName) = 0;
+    virtual int64_t setTypes(const Vector<String>& pasteboardTypes, const String& pasteboardName) = 0;
+    virtual int64_t setBufferForType(SharedBuffer*, const String& pasteboardType, const String& pasteboardName) = 0;
+    virtual int64_t setURL(const PasteboardURL&, const String& pasteboardName) = 0;
+    virtual int64_t setColor(const Color&, const String& pasteboardName) = 0;
+    virtual int64_t setStringForType(const String&, const String& pasteboardType, const String& pasteboardName) = 0;
 #endif
+    virtual String readStringFromPasteboard(size_t index, const String& pasteboardType, const String& pasteboardName) = 0;
+    virtual RefPtr<SharedBuffer> readBufferFromPasteboard(size_t index, const String& pasteboardType, const String& pasteboardName) = 0;
+    virtual URL readURLFromPasteboard(size_t index, const String& pasteboardName, String& title) = 0;
+    virtual Optional<PasteboardItemInfo> informationForItemAtIndex(size_t index, const String& pasteboardName, int64_t changeCount) = 0;
+    virtual Optional<Vector<PasteboardItemInfo>> allPasteboardItemInfo(const String& pasteboardName, int64_t changeCount) = 0;
+    virtual int getPasteboardItemsCount(const String& pasteboardName) = 0;
 
     virtual Vector<String> typesSafeForDOMToReadAndWrite(const String& pasteboardName, const String& origin) = 0;
-    virtual long writeCustomData(const PasteboardCustomData&, const String& pasteboardName) = 0;
+    virtual int64_t writeCustomData(const Vector<PasteboardCustomData>&, const String& pasteboardName) = 0;
 
 #if PLATFORM(GTK)
     virtual void writeToClipboard(const String& pasteboardName, const SelectionData&) = 0;
     virtual Ref<SelectionData> readFromClipboard(const String& pasteboardName) = 0;
 #endif // PLATFORM(GTK)
 
 #if USE(LIBWPE)
     virtual void getTypes(Vector<String>& types) = 0;
-    virtual String readStringFromPasteboard(int index, const String& pasteboardType) = 0;
     virtual void writeToPasteboard(const PasteboardWebContent&) = 0;
     virtual void writeToPasteboard(const String& pasteboardType, const String&) = 0;
 #endif
 
 protected:
