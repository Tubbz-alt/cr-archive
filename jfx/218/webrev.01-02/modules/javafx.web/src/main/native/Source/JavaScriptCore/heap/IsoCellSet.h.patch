diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/IsoCellSet.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/IsoCellSet.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/IsoCellSet.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/IsoCellSet.h
@@ -38,11 +38,11 @@
 class IsoSubspace;
 
 // Create a set of cells that are in an IsoSubspace. This allows concurrent O(1) set insertion and
 // removal. Each such set should be thought of as a 0.8% increase in object size for objects in that
 // IsoSubspace (it's like adding 1 bit every 16 bytes, or 1 bit every 128 bits).
-class IsoCellSet : public BasicRawSentinelNode<IsoCellSet> {
+class IsoCellSet : public PackedRawSentinelNode<IsoCellSet> {
 public:
     IsoCellSet(IsoSubspace& subspace);
     ~IsoCellSet();
 
     bool add(HeapCell* cell); // Returns true if the cell was newly added.
@@ -65,15 +65,18 @@
     void forEachLiveCell(const Func&);
 
 private:
     friend class IsoSubspace;
 
-    Bitmap<MarkedBlock::atomsPerBlock>* addSlow(size_t blockIndex);
+    Bitmap<MarkedBlock::atomsPerBlock>* addSlow(unsigned blockIndex);
 
-    void didResizeBits(size_t newSize);
-    void didRemoveBlock(size_t blockIndex);
+    void didResizeBits(unsigned newSize);
+    void didRemoveBlock(unsigned blockIndex);
     void sweepToFreeList(MarkedBlock::Handle*);
+    void clearLowerTierCell(unsigned);
+
+    Bitmap<MarkedBlock::maxNumberOfLowerTierCells> m_lowerTierBits;
 
     IsoSubspace& m_subspace;
 
     // Idea: sweeping to free-list clears bits for those cells that were free-listed. The first time
     // we add a cell in a block, that block gets a free-list. Unless we do something that obviously
