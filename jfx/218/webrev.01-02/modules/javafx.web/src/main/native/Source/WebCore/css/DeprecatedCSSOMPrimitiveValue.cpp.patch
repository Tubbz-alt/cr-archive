diff a/modules/javafx.web/src/main/native/Source/WebCore/css/DeprecatedCSSOMPrimitiveValue.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/DeprecatedCSSOMPrimitiveValue.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/DeprecatedCSSOMPrimitiveValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/DeprecatedCSSOMPrimitiveValue.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -34,56 +34,54 @@
 
 // FIXME: For now these still call into CSSPrimitiveValue, but as we refactor into subclasses
 // such as StyleCounterValue, StyleRectValue, and StyleColorValue, these methods will get
 // more complicated.
 
-
 unsigned short DeprecatedCSSOMPrimitiveValue::primitiveType() const
 {
-    return m_value->primitiveType();
+    return static_cast<unsigned short>(m_value->primitiveType());
 }
 
 ExceptionOr<void> DeprecatedCSSOMPrimitiveValue::setFloatValue(unsigned short unitType, double floatValue)
 {
-    return m_value->setFloatValue(unitType, floatValue);
+    return m_value->setFloatValue(static_cast<CSSUnitType>(unitType), floatValue);
 }
 
 ExceptionOr<float> DeprecatedCSSOMPrimitiveValue::getFloatValue(unsigned short unitType) const
 {
-    return m_value->getFloatValue(unitType);
+    return m_value->getFloatValue(static_cast<CSSUnitType>(unitType));
 }
 
 ExceptionOr<void> DeprecatedCSSOMPrimitiveValue::setStringValue(unsigned short stringType, const String& stringValue)
 {
-    return m_value->setStringValue(stringType, stringValue);
+    return m_value->setStringValue(static_cast<CSSUnitType>(stringType), stringValue);
 }
 
 ExceptionOr<String> DeprecatedCSSOMPrimitiveValue::getStringValue() const
 {
     return m_value->getStringValue();
 }
 
 ExceptionOr<Ref<DeprecatedCSSOMCounter>> DeprecatedCSSOMPrimitiveValue::getCounterValue() const
 {
-    ExceptionOr<Counter&> counter = m_value->getCounterValue();
-    if (counter.hasException())
+    auto* value = m_value->counterValue();
+    if (!value)
         return Exception { InvalidAccessError };
-    return DeprecatedCSSOMCounter::create(counter.releaseReturnValue(), m_owner.get());
+    return DeprecatedCSSOMCounter::create(*value, m_owner);
 }
 
 ExceptionOr<Ref<DeprecatedCSSOMRect>> DeprecatedCSSOMPrimitiveValue::getRectValue() const
 {
-    ExceptionOr<Rect&> rect = m_value->getRectValue();
-    if (rect.hasException())
+    auto* value = m_value->rectValue();
+    if (!value)
         return Exception { InvalidAccessError };
-    return DeprecatedCSSOMRect::create(rect.releaseReturnValue(), m_owner.get());
+    return DeprecatedCSSOMRect::create(*value, m_owner);
 }
 
 ExceptionOr<Ref<DeprecatedCSSOMRGBColor>> DeprecatedCSSOMPrimitiveValue::getRGBColorValue() const
 {
-    ExceptionOr<Ref<RGBColor>> color = m_value->getRGBColorValue();
-    if (color.hasException())
+    if (!m_value->isRGBColor())
         return Exception { InvalidAccessError };
-    return DeprecatedCSSOMRGBColor::create(color.releaseReturnValue(), m_owner.get());
+    return DeprecatedCSSOMRGBColor::create(m_owner, m_value->color());
 }
 
 }
