diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ModuleNamespaceAccessCase.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ModuleNamespaceAccessCase.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ModuleNamespaceAccessCase.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/ModuleNamespaceAccessCase.h
@@ -1,7 +1,8 @@
 /*
  * Copyright (C) 2017 Yusuke Suzuki <utatane.tea@gmail.com>.
+ * Copyright (C) 2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -41,20 +42,20 @@
 
     JSModuleNamespaceObject* moduleNamespaceObject() const { return m_moduleNamespaceObject.get(); }
     JSModuleEnvironment* moduleEnvironment() const { return m_moduleEnvironment.get(); }
     ScopeOffset scopeOffset() const { return m_scopeOffset; }
 
-    static std::unique_ptr<AccessCase> create(VM&, JSCell* owner, JSModuleNamespaceObject*, JSModuleEnvironment*, ScopeOffset);
+    static std::unique_ptr<AccessCase> create(VM&, JSCell* owner, CacheableIdentifier, JSModuleNamespaceObject*, JSModuleEnvironment*, ScopeOffset);
 
     std::unique_ptr<AccessCase> clone() const override;
 
     void emit(AccessGenerationState&, MacroAssembler::JumpList& fallThrough);
 
     ~ModuleNamespaceAccessCase();
 
 private:
-    ModuleNamespaceAccessCase(VM&, JSCell* owner, JSModuleNamespaceObject*, JSModuleEnvironment*, ScopeOffset);
+    ModuleNamespaceAccessCase(VM&, JSCell* owner, CacheableIdentifier, JSModuleNamespaceObject*, JSModuleEnvironment*, ScopeOffset);
 
     WriteBarrier<JSModuleNamespaceObject> m_moduleNamespaceObject;
     WriteBarrier<JSModuleEnvironment> m_moduleEnvironment;
     ScopeOffset m_scopeOffset;
 };
