diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemDirectoryReader.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemDirectoryReader.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemDirectoryReader.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/entriesapi/FileSystemDirectoryReader.cpp
@@ -26,14 +26,16 @@
 #include "config.h"
 #include "FileSystemDirectoryReader.h"
 
 #include "DOMException.h"
 #include "DOMFileSystem.h"
+#include "Document.h"
 #include "ErrorCallback.h"
 #include "FileSystemDirectoryEntry.h"
 #include "FileSystemEntriesCallback.h"
 #include "ScriptExecutionContext.h"
+#include "WindowEventLoop.h"
 #include <wtf/IsoMallocInlines.h>
 #include <wtf/MainThread.h>
 
 namespace WebCore {
 
@@ -51,13 +53,13 @@
 const char* FileSystemDirectoryReader::activeDOMObjectName() const
 {
     return "FileSystemDirectoryReader";
 }
 
-bool FileSystemDirectoryReader::canSuspendForDocumentSuspension() const
+Document* FileSystemDirectoryReader::document() const
 {
-    return !hasPendingActivity();
+    return downcast<Document>(scriptExecutionContext());
 }
 
 // https://wicg.github.io/entries-api/#dom-filesystemdirectoryentry-readentries
 void FileSystemDirectoryReader::readEntries(ScriptExecutionContext& context, Ref<FileSystemEntriesCallback>&& successCallback, RefPtr<ErrorCallback>&& errorCallback)
 {
@@ -80,19 +82,27 @@
 
     m_isReading = true;
     auto pendingActivity = makePendingActivity(*this);
     callOnMainThread([this, context = makeRef(context), successCallback = WTFMove(successCallback), errorCallback = WTFMove(errorCallback), pendingActivity = WTFMove(pendingActivity)]() mutable {
         m_isReading = false;
-        m_directory->filesystem().listDirectory(context, m_directory, [this, successCallback = WTFMove(successCallback), errorCallback = WTFMove(errorCallback), pendingActivity = WTFMove(pendingActivity)](ExceptionOr<Vector<Ref<FileSystemEntry>>>&& result) {
+        m_directory->filesystem().listDirectory(context, m_directory, [this, successCallback = WTFMove(successCallback), errorCallback = WTFMove(errorCallback), pendingActivity = WTFMove(pendingActivity)](ExceptionOr<Vector<Ref<FileSystemEntry>>>&& result) mutable {
+            auto* document = this->document();
             if (result.hasException()) {
                 m_error = result.releaseException();
-                if (errorCallback)
-                    errorCallback->handleEvent(DOMException::create(*m_error));
+                if (errorCallback && document) {
+                    document->eventLoop().queueTask(TaskSource::Networking, [this, errorCallback = WTFMove(errorCallback), pendingActivity = WTFMove(pendingActivity)]() mutable {
+                        errorCallback->handleEvent(DOMException::create(*m_error));
+                    });
+                }
                 return;
             }
             m_isDone = true;
-            successCallback->handleEvent(result.releaseReturnValue());
+            if (document) {
+                document->eventLoop().queueTask(TaskSource::Networking, [successCallback = WTFMove(successCallback), pendingActivity = WTFMove(pendingActivity), result = result.releaseReturnValue()]() mutable {
+                    successCallback->handleEvent(WTFMove(result));
+                });
+            }
         });
     });
 }
 
 } // namespace WebCore
