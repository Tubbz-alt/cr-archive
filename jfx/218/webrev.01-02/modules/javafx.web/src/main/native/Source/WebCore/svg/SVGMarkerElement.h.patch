diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGMarkerElement.h b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGMarkerElement.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGMarkerElement.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGMarkerElement.h
@@ -20,17 +20,16 @@
  */
 
 #pragma once
 
 #include "SVGElement.h"
-#include "SVGExternalResourcesRequired.h"
 #include "SVGFitToViewBox.h"
 #include "SVGMarkerTypes.h"
 
 namespace WebCore {
 
-class SVGMarkerElement final : public SVGElement, public SVGExternalResourcesRequired, public SVGFitToViewBox {
+class SVGMarkerElement final : public SVGElement, public SVGFitToViewBox {
     WTF_MAKE_ISO_ALLOCATED(SVGMarkerElement);
 public:
     // Forward declare enumerations in the W3C naming scheme, for IDL generation.
     enum {
         SVG_MARKERUNITS_UNKNOWN = SVGMarkerUnitsUnknown,
@@ -39,21 +38,17 @@
     };
 
     enum {
         SVG_MARKER_ORIENT_UNKNOWN = SVGMarkerOrientUnknown,
         SVG_MARKER_ORIENT_AUTO = SVGMarkerOrientAuto,
-        SVG_MARKER_ORIENT_ANGLE = SVGMarkerOrientAngle,
-        SVG_MARKER_ORIENT_AUTOSTARTREVERSE = SVGMarkerOrientAutoStartReverse
+        SVG_MARKER_ORIENT_ANGLE = SVGMarkerOrientAngle
     };
 
     static Ref<SVGMarkerElement> create(const QualifiedName&, Document&);
 
     AffineTransform viewBoxToViewTransform(float viewWidth, float viewHeight) const;
 
-    void setOrientToAuto();
-    void setOrientToAngle(SVGAngle&);
-
     const SVGLengthValue& refX() const { return m_refX->currentValue(); }
     const SVGLengthValue& refY() const { return m_refY->currentValue(); }
     const SVGLengthValue& markerWidth() const { return m_markerWidth->currentValue(); }
     const SVGLengthValue& markerHeight() const { return m_markerHeight->currentValue(); }
     SVGMarkerUnitsType markerUnits() const { return m_markerUnits->currentValue<SVGMarkerUnitsType>(); }
@@ -66,14 +61,20 @@
     SVGAnimatedLength& markerHeightAnimated() { return m_markerHeight; }
     SVGAnimatedEnumeration& markerUnitsAnimated() { return m_markerUnits; }
     SVGAnimatedAngle& orientAngleAnimated() { return m_orientAngle; }
     Ref<SVGAnimatedEnumeration> orientTypeAnimated() { return m_orientType.copyRef(); }
 
+    String orient() const;
+    void setOrient(const String&);
+
+    void setOrientToAuto();
+    void setOrientToAngle(const SVGAngle&);
+
 private:
     SVGMarkerElement(const QualifiedName&, Document&);
 
-    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGMarkerElement, SVGElement, SVGExternalResourcesRequired, SVGFitToViewBox>;
+    using PropertyRegistry = SVGPropertyOwnerRegistry<SVGMarkerElement, SVGElement, SVGFitToViewBox>;
     const SVGPropertyRegistry& propertyRegistry() const final { return m_propertyRegistry; }
 
     void parseAttribute(const QualifiedName&, const AtomString&) override;
     void svgAttributeChanged(const QualifiedName&) override;
     void childrenChanged(const ChildChange&) override;
@@ -83,17 +84,15 @@
 
     bool needsPendingResourceHandling() const override { return false; }
 
     bool selfHasRelativeLengths() const override;
 
-    void setOrient(SVGMarkerOrientType, const SVGAngleValue&);
-
     PropertyRegistry m_propertyRegistry { *this };
-    Ref<SVGAnimatedLength> m_refX { SVGAnimatedLength::create(this, LengthModeWidth) };
-    Ref<SVGAnimatedLength> m_refY { SVGAnimatedLength::create(this, LengthModeHeight) };
-    Ref<SVGAnimatedLength> m_markerWidth { SVGAnimatedLength::create(this, LengthModeWidth, "3") };
-    Ref<SVGAnimatedLength> m_markerHeight { SVGAnimatedLength::create(this, LengthModeHeight, "3") };
+    Ref<SVGAnimatedLength> m_refX { SVGAnimatedLength::create(this, SVGLengthMode::Width) };
+    Ref<SVGAnimatedLength> m_refY { SVGAnimatedLength::create(this, SVGLengthMode::Height) };
+    Ref<SVGAnimatedLength> m_markerWidth { SVGAnimatedLength::create(this, SVGLengthMode::Width, "3") };
+    Ref<SVGAnimatedLength> m_markerHeight { SVGAnimatedLength::create(this, SVGLengthMode::Height, "3") };
     Ref<SVGAnimatedEnumeration> m_markerUnits { SVGAnimatedEnumeration::create(this, SVGMarkerUnitsStrokeWidth) };
     Ref<SVGAnimatedAngle> m_orientAngle { SVGAnimatedAngle::create(this) };
     Ref<SVGAnimatedOrientType> m_orientType { SVGAnimatedOrientType::create(this, SVGMarkerOrientAngle) };
 };
 
