diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/FloatingObjects.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/FloatingObjects.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/FloatingObjects.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/FloatingObjects.cpp
@@ -22,10 +22,11 @@
  */
 
 #include "config.h"
 #include "FloatingObjects.h"
 
+#include "PODIntervalTree.h"
 #include "RenderBlockFlow.h"
 #include "RenderBox.h"
 #include "RenderView.h"
 #include <wtf/HexNumber.h>
 #include <wtf/text/StringConcatenateNumbers.h>
@@ -45,11 +46,11 @@
 FloatingObject::FloatingObject(RenderBox& renderer)
     : m_renderer(makeWeakPtr(renderer))
     , m_shouldPaint(true)
     , m_isDescendant(false)
     , m_isPlaced(false)
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     , m_isInPlacedTree(false)
 #endif
 {
     Float type = renderer.style().floating();
     ASSERT(type != Float::No);
@@ -65,11 +66,11 @@
     , m_marginOffset(marginOffset)
     , m_type(type)
     , m_shouldPaint(shouldPaint)
     , m_isDescendant(isDescendant)
     , m_isPlaced(true)
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     , m_isInPlacedTree(false)
 #endif
 {
 }
 
@@ -99,13 +100,13 @@
     return locationOffsetOfBorderBox() - renderer().locationOffset();
 }
 
 #ifndef NDEBUG
 
-String FloatingObject::debugString() const
+TextStream& operator<<(TextStream& stream, const FloatingObject& object)
 {
-    return makeString("0x", hex(reinterpret_cast<uintptr_t>(this)), " (", frameRect().x().toInt(), 'x', frameRect().y().toInt(), ' ', frameRect().maxX().toInt(), 'x', frameRect().maxY().toInt(), ')');
+    return stream << &object << " (" << object.frameRect().x().toInt() << 'x' << object.frameRect().y().toInt() << ' ' << object.frameRect().maxX().toInt() << 'x' << object.frameRect().maxY().toInt() << ')';
 }
 
 #endif
 
 inline static bool rangesIntersect(LayoutUnit floatTop, LayoutUnit floatBottom, LayoutUnit objectTop, LayoutUnit objectBottom)
@@ -325,11 +326,11 @@
 
     floatingObject->setIsPlaced(true);
     if (m_placedFloatsTree)
         m_placedFloatsTree->add(intervalForFloatingObject(floatingObject));
 
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     floatingObject->setIsInPlacedTree(true);
 #endif
 }
 
 void FloatingObjects::removePlacedObject(FloatingObject* floatingObject)
@@ -340,11 +341,11 @@
         bool removed = m_placedFloatsTree->remove(intervalForFloatingObject(floatingObject));
         ASSERT_UNUSED(removed, removed);
     }
 
     floatingObject->setIsPlaced(false);
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     floatingObject->setIsInPlacedTree(false);
 #endif
 }
 
 FloatingObject* FloatingObjects::add(std::unique_ptr<FloatingObject> floatingObject)
