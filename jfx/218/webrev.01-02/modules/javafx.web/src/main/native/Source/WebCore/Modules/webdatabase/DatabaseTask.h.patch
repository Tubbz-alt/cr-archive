diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseTask.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseTask.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseTask.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseTask.h
@@ -49,20 +49,20 @@
     void waitForTaskCompletion();
 
     // Called by the task.
     void taskCompleted();
 
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     bool hasCheckedForTermination() const { return m_hasCheckedForTermination; }
     void setHasCheckedForTermination() { m_hasCheckedForTermination = true; }
 #endif
 
 private:
     bool m_taskCompleted { false };
     Lock m_synchronousMutex;
     Condition m_synchronousCondition;
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     bool m_hasCheckedForTermination { false };
 #endif
 };
 
 class DatabaseTask {
@@ -72,11 +72,11 @@
 
     void performTask();
 
     Database& database() const { return m_database; }
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     bool hasSynchronizer() const { return m_synchronizer; }
     bool hasCheckedForTermination() const { return m_synchronizer->hasCheckedForTermination(); }
 #endif
 
 protected:
@@ -90,11 +90,11 @@
 
 #if !LOG_DISABLED
     virtual const char* debugTaskName() const = 0;
 #endif
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     bool m_complete { false };
 #endif
 };
 
 class DatabaseOpenTask final : public DatabaseTask {
