diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/filters/FEBlend.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/filters/FEBlend.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/filters/FEBlend.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/filters/FEBlend.cpp
@@ -70,19 +70,19 @@
     ImageBuffer* imageBuffer2 = in2->imageBufferResult();
     if (!imageBuffer || !imageBuffer2)
         return;
 
     filterContext.drawImageBuffer(*imageBuffer2, drawingRegionOfInputImage(in2->absolutePaintRect()));
-    filterContext.drawImageBuffer(*imageBuffer, drawingRegionOfInputImage(in->absolutePaintRect()), IntRect(IntPoint(), imageBuffer->logicalSize()), { CompositeSourceOver, m_mode });
+    filterContext.drawImageBuffer(*imageBuffer, drawingRegionOfInputImage(in->absolutePaintRect()), IntRect(IntPoint(), imageBuffer->logicalSize()), { CompositeOperator::SourceOver, m_mode });
 }
 #endif
 
 TextStream& FEBlend::externalRepresentation(TextStream& ts, RepresentationType representation) const
 {
     ts << indent << "[feBlend";
     FilterEffect::externalRepresentation(ts, representation);
-    ts << " mode=\"" << (m_mode == BlendMode::Normal ? "normal" : compositeOperatorName(CompositeSourceOver, m_mode)) << "\"]\n";
+    ts << " mode=\"" << (m_mode == BlendMode::Normal ? "normal" : compositeOperatorName(CompositeOperator::SourceOver, m_mode)) << "\"]\n";
 
     TextStream::IndentScope indentScope(ts);
     inputEffect(0)->externalRepresentation(ts, representation);
     inputEffect(1)->externalRepresentation(ts, representation);
     return ts;
