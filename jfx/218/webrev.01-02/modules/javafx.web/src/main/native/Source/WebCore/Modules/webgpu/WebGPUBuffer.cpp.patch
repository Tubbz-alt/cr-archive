diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUBuffer.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUBuffer.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUBuffer.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WebGPUBuffer.cpp
@@ -27,10 +27,11 @@
 #include "WebGPUBuffer.h"
 
 #if ENABLE(WEBGPU)
 
 #include "GPUErrorScopes.h"
+#include "JSDOMPromiseDeferred.h"
 #include <wtf/text/StringConcatenate.h>
 
 namespace WebCore {
 
 Ref<WebGPUBuffer> WebGPUBuffer::create(RefPtr<GPUBuffer>&& buffer, GPUErrorScopes& errorScopes)
@@ -88,10 +89,13 @@
 
     m_buffer->registerMappingCallback([promise = WTFMove(promise), protectedErrorScopes = makeRef(errorScopes())] (JSC::ArrayBuffer* arrayBuffer) mutable {
         if (arrayBuffer)
             promise.resolve(*arrayBuffer);
         else {
+            // FIXME: It's possible to hit this code path in response to an unmap call, where
+            // the ArrayBuffer will definitely be null, and thus an out of memory error makes no sense.
+            // https://bugs.webkit.org/show_bug.cgi?id=204166
             protectedErrorScopes->generateError("", GPUErrorFilter::OutOfMemory);
             promise.reject();
         }
     }, isRead, errorScopes());
 }
