diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/disassembler/ARM64/A64DOpcode.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/disassembler/ARM64/A64DOpcode.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/disassembler/ARM64/A64DOpcode.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/disassembler/ARM64/A64DOpcode.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2012, 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2012-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -193,11 +193,11 @@
     void appendShiftAmount(unsigned amount)
     {
         bufferPrintf("lsl #%u", 16 * amount);
     }
 
-    static const int bufferSize = 81;
+    static constexpr int bufferSize = 81;
 
     char m_formatBuffer[bufferSize];
     uint32_t* m_currentPC;
     uint32_t m_opcode;
     int m_bufferOffset;
@@ -225,12 +225,12 @@
     unsigned opAndS() { return (m_opcode >> 29) & 0x3; }
 };
 
 class A64DOpcodeAddSubtractImmediate : public A64DOpcodeAddSubtract {
 public:
-    static const uint32_t mask = 0x1f000000;
-    static const uint32_t pattern = 0x11000000;
+    static constexpr uint32_t mask = 0x1f000000;
+    static constexpr uint32_t pattern = 0x11000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeAddSubtractImmediate, thisObj);
 
     const char* format();
 
@@ -239,24 +239,24 @@
     unsigned immed12() { return (m_opcode >> 10) & 0xfff; }
 };
 
 class A64DOpcodeAddSubtractExtendedRegister : public A64DOpcodeAddSubtract {
 public:
-    static const uint32_t mask = 0x1fe00000;
-    static const uint32_t pattern = 0x0b200000;
+    static constexpr uint32_t mask = 0x1fe00000;
+    static constexpr uint32_t pattern = 0x0b200000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeAddSubtractExtendedRegister, thisObj);
 
     const char* format();
 
     unsigned immediate3() { return (m_opcode >> 10) & 0x7; }
 };
 
 class A64DOpcodeAddSubtractShiftedRegister : public A64DOpcodeAddSubtract {
 public:
-    static const uint32_t mask = 0x1f200000;
-    static const uint32_t pattern = 0x0b000000;
+    static constexpr uint32_t mask = 0x1f200000;
+    static constexpr uint32_t pattern = 0x0b000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeAddSubtractShiftedRegister, thisObj);
 
     const char* format();
 
@@ -272,12 +272,12 @@
     static const char* const s_extendPseudoOpNames[3][3];
     static const char* const s_insertOpNames[3];
     static const char* const s_extractOpNames[3];
 
 public:
-    static const uint32_t mask = 0x1f800000;
-    static const uint32_t pattern = 0x13000000;
+    static constexpr uint32_t mask = 0x1f800000;
+    static constexpr uint32_t pattern = 0x13000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeBitfield, thisObj);
 
     const char* format();
 
@@ -292,12 +292,12 @@
     unsigned immediateS() { return (m_opcode >> 10) & 0x3f; }
 };
 
 class A64DOpcodeCompareAndBranchImmediate : public A64DOpcode {
 public:
-    static const uint32_t mask = 0x7e000000;
-    static const uint32_t pattern = 0x34000000;
+    static constexpr uint32_t mask = 0x7e000000;
+    static constexpr uint32_t pattern = 0x34000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeCompareAndBranchImmediate, thisObj);
 
     const char* format();
 
@@ -305,12 +305,12 @@
     int immediate19() { return (static_cast<int>((m_opcode >> 5) & 0x7ffff) << 13) >> 13; }
 };
 
 class A64DOpcodeConditionalBranchImmediate : public A64DOpcode {
 public:
-    static const uint32_t mask = 0xff000010;
-    static const uint32_t pattern = 0x54000000;
+    static constexpr uint32_t mask = 0xff000010;
+    static constexpr uint32_t pattern = 0x54000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeConditionalBranchImmediate, thisObj);
 
     const char* format();
 
@@ -321,12 +321,12 @@
 class A64DOpcodeConditionalSelect : public A64DOpcode {
 private:
     static const char* const s_opNames[4];
 
 public:
-    static const uint32_t mask = 0x1fe00000;
-    static const uint32_t pattern = 0x1a800000;
+    static constexpr uint32_t mask = 0x1fe00000;
+    static constexpr uint32_t pattern = 0x1a800000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeConditionalSelect, thisObj);
 
     const char* format();
 
@@ -342,12 +342,12 @@
 private:
     static const char* const s_opNames[8];
     static const char* const s_pacAutOpNames[18];
 
 public:
-    static const uint32_t mask = 0x5fe00000;
-    static const uint32_t pattern = 0x5ac00000;
+    static constexpr uint32_t mask = 0x5fe00000;
+    static constexpr uint32_t pattern = 0x5ac00000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeDataProcessing1Source, thisObj);
 
     const char* format();
 
@@ -361,12 +361,12 @@
 class A64DOpcodeDataProcessing2Source : public A64DOpcode {
 private:
     static const char* const s_opNames[16];
 
 public:
-    static const uint32_t mask = 0x5fe00000;
-    static const uint32_t pattern = 0x1ac00000;
+    static constexpr uint32_t mask = 0x5fe00000;
+    static constexpr uint32_t pattern = 0x1ac00000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeDataProcessing2Source, thisObj);
 
     const char* format();
 
@@ -380,12 +380,12 @@
 private:
     static const char* const s_opNames[16];
     static const char* const s_pseudoOpNames[16];
 
 public:
-    static const uint32_t mask = 0x1f000000;
-    static const uint32_t pattern = 0x1b000000;
+    static constexpr uint32_t mask = 0x1f000000;
+    static constexpr uint32_t pattern = 0x1b000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeDataProcessing3Source, thisObj);
 
     const char* format();
 
@@ -397,12 +397,12 @@
     unsigned opNum() { return ((m_opcode >> 25) & 0x30) | ((m_opcode >> 20) & 0xe) | ((m_opcode >> 15) & 0x1); }
 };
 
 class A64OpcodeExceptionGeneration : public A64DOpcode {
 public:
-    static const uint32_t mask = 0xff000000;
-    static const uint32_t pattern = 0xd4000000;
+    static constexpr uint32_t mask = 0xff000000;
+    static constexpr uint32_t pattern = 0xd4000000;
 
     DEFINE_STATIC_FORMAT(A64OpcodeExceptionGeneration, thisObj);
 
     const char* format();
 
@@ -412,12 +412,12 @@
     int immediate16() { return (static_cast<int>((m_opcode >> 5) & 0xffff) << 16) >> 16; }
 };
 
 class A64DOpcodeExtract : public A64DOpcode {
 public:
-    static const uint32_t mask = 0x1f800000;
-    static const uint32_t pattern = 0x13800000;
+    static constexpr uint32_t mask = 0x1f800000;
+    static constexpr uint32_t pattern = 0x13800000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeExtract, thisObj);
 
     const char* format();
 
@@ -437,12 +437,12 @@
 class A64DOpcodeFloatingPointCompare : public A64DOpcodeFloatingPointOps {
 private:
     static const char* const s_opNames[16];
 
 public:
-    static const uint32_t mask = 0x5f203c00;
-    static const uint32_t pattern = 0x1e202000;
+    static constexpr uint32_t mask = 0x5f203c00;
+    static constexpr uint32_t pattern = 0x1e202000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeFloatingPointCompare, thisObj);
 
     const char* format();
 
@@ -453,12 +453,12 @@
     unsigned opNum() { return (m_opcode >> 3) & 0x3; }
 };
 
 class A64DOpcodeFloatingPointConditionalSelect : public A64DOpcodeFloatingPointOps {
 public:
-    static const uint32_t mask = 0x5f200c00;
-    static const uint32_t pattern = 0x1e200c00;
+    static constexpr uint32_t mask = 0x5f200c00;
+    static constexpr uint32_t pattern = 0x1e200c00;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeFloatingPointConditionalSelect, thisObj);
 
     const char* format();
 
@@ -470,12 +470,12 @@
 class A64DOpcodeFloatingPointDataProcessing1Source : public A64DOpcodeFloatingPointOps {
 private:
     static const char* const s_opNames[16];
 
 public:
-    static const uint32_t mask = 0x5f207c00;
-    static const uint32_t pattern = 0x1e204000;
+    static constexpr uint32_t mask = 0x5f207c00;
+    static constexpr uint32_t pattern = 0x1e204000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeFloatingPointDataProcessing1Source, thisObj);
 
     const char* format();
 
@@ -487,12 +487,12 @@
 class A64DOpcodeFloatingPointDataProcessing2Source : public A64DOpcodeFloatingPointOps {
 private:
     static const char* const s_opNames[16];
 
 public:
-    static const uint32_t mask = 0x5f200800;
-    static const uint32_t pattern = 0x1e200800;
+    static constexpr uint32_t mask = 0x5f200800;
+    static constexpr uint32_t pattern = 0x1e200800;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeFloatingPointDataProcessing2Source, thisObj);
 
     const char* format();
 
@@ -504,12 +504,12 @@
 class A64DOpcodeFloatingFixedPointConversions : public A64DOpcodeFloatingPointOps {
 private:
     static const char* const s_opNames[4];
 
 public:
-    static const uint32_t mask = 0x5f200000;
-    static const uint32_t pattern = 0x1e000000;
+    static constexpr uint32_t mask = 0x5f200000;
+    static constexpr uint32_t pattern = 0x1e000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeFloatingFixedPointConversions, thisObj);
 
     const char* format();
 
@@ -523,12 +523,12 @@
 class A64DOpcodeFloatingPointIntegerConversions : public A64DOpcodeFloatingPointOps {
 private:
     static const char* const s_opNames[32];
 
 public:
-    static const uint32_t mask = 0x5f20fc00;
-    static const uint32_t pattern = 0x1e200000;
+    static constexpr uint32_t mask = 0x5f20fc00;
+    static constexpr uint32_t pattern = 0x1e200000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeFloatingPointIntegerConversions, thisObj);
 
     const char* format();
 
@@ -548,22 +548,22 @@
     unsigned op2() { return (m_opcode >> 5) & 0x7; }
 };
 
 class A64DOpcodeMSRImmediate : public A64DOpcodeSystem {
 public:
-    static const uint32_t mask = 0xfff8f01f;
-    static const uint32_t pattern = 0xd500401f;
+    static constexpr uint32_t mask = 0xfff8f01f;
+    static constexpr uint32_t pattern = 0xd500401f;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeMSRImmediate, thisObj);
 
     const char* format();
 };
 
 class A64DOpcodeMSROrMRSRegister : public A64DOpcodeSystem {
 public:
-    static const uint32_t mask = 0xffd00000;
-    static const uint32_t pattern = 0xd5100000;
+    static constexpr uint32_t mask = 0xffd00000;
+    static constexpr uint32_t pattern = 0xd5100000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeMSROrMRSRegister, thisObj);
 
     const char* format();
 
@@ -574,12 +574,12 @@
 class A64DOpcodeHint : public A64DOpcodeSystem {
 private:
     static const char* const s_opNames[32];
 
 public:
-    static const uint32_t mask = 0xfffff01f;
-    static const uint32_t pattern = 0xd503201f;
+    static constexpr uint32_t mask = 0xfffff01f;
+    static constexpr uint32_t pattern = 0xd503201f;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeHint, thisObj);
 
     const char* format();
 
@@ -590,12 +590,12 @@
 class A64DOpcodeSystemSync : public A64DOpcodeSystem {
     static const char* const s_opNames[8];
     static const char* const s_optionNames[16];
 
 public:
-    static const uint32_t mask = 0xfffff01f;
-    static const uint32_t pattern = 0xd503301f;
+    static constexpr uint32_t mask = 0xfffff01f;
+    static constexpr uint32_t pattern = 0xd503301f;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeSystemSync, thisObj);
 
     const char* format();
 
@@ -623,12 +623,12 @@
 class A64DOpcodeLoadStoreExclusive : public A64DOpcodeLoadStore {
 private:
     static const char* const s_opNames[64];
 
 public:
-    static const uint32_t mask = 0x3f000000;
-    static const uint32_t pattern = 0x08000000;
+    static constexpr uint32_t mask = 0x3f000000;
+    static constexpr uint32_t pattern = 0x08000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeLoadStoreExclusive, thisObj);
 
     const char* format();
 
@@ -651,12 +651,12 @@
 private:
     static const char* const s_unprivilegedOpNames[32];
     static const char* const s_unscaledOpNames[32];
 
 public:
-    static const uint32_t mask = 0x3b200000;
-    static const uint32_t pattern = 0x38000000;
+    static constexpr uint32_t mask = 0x3b200000;
+    static constexpr uint32_t pattern = 0x38000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeLoadStoreImmediate, thisObj);
 
     const char* format();
 
@@ -672,12 +672,12 @@
     int immediate9() { return (static_cast<int>((m_opcode >> 12) & 0x1ff) << 23) >> 23; }
 };
 
 class A64DOpcodeLoadStoreRegisterOffset : public A64DOpcodeLoadStore {
 public:
-    static const uint32_t mask = 0x3b200c00;
-    static const uint32_t pattern = 0x38200800;
+    static constexpr uint32_t mask = 0x3b200c00;
+    static constexpr uint32_t pattern = 0x38200800;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeLoadStoreRegisterOffset, thisObj);
 
     const char* format();
 
@@ -694,12 +694,12 @@
     {
         return s_opNames[opNumber()];
     }
 
 public:
-    static const uint32_t mask = 0xff200400;
-    static const uint32_t pattern = 0xf8200400;
+    static constexpr uint32_t mask = 0xff200400;
+    static constexpr uint32_t pattern = 0xf8200400;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeLoadStoreAuthenticated, thisObj);
 
     const char* format();
 
@@ -711,12 +711,12 @@
 
 };
 
 class A64DOpcodeLoadStoreRegisterPair : public A64DOpcodeLoadStore {
 public:
-    static const uint32_t mask = 0x3a000000;
-    static const uint32_t pattern = 0x28000000;
+    static constexpr uint32_t mask = 0x3a000000;
+    static constexpr uint32_t pattern = 0x28000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeLoadStoreRegisterPair, thisObj);
 
     const char* format();
     const char* opName();
@@ -727,12 +727,12 @@
     int lBit() { return (m_opcode >> 22) & 0x1; }
 };
 
 class A64DOpcodeLoadStoreUnsignedImmediate : public A64DOpcodeLoadStore {
 public:
-    static const uint32_t mask = 0x3b000000;
-    static const uint32_t pattern = 0x39000000;
+    static constexpr uint32_t mask = 0x3b000000;
+    static constexpr uint32_t pattern = 0x39000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeLoadStoreUnsignedImmediate, thisObj);
 
     const char* format();
 
@@ -753,12 +753,12 @@
     unsigned nBit() { return (m_opcode >> 21) & 0x1; }
 };
 
 class A64DOpcodeLogicalImmediate : public A64DOpcodeLogical {
 public:
-    static const uint32_t mask = 0x1f800000;
-    static const uint32_t pattern = 0x12000000;
+    static constexpr uint32_t mask = 0x1f800000;
+    static constexpr uint32_t pattern = 0x12000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeLogicalImmediate, thisObj);
 
     const char* format();
 
@@ -770,12 +770,12 @@
     unsigned immediateS() { return (m_opcode >> 10) & 0x3f; }
 };
 
 class A64DOpcodeLogicalShiftedRegister : public A64DOpcodeLogical {
 public:
-    static const uint32_t mask = 0x1f000000;
-    static const uint32_t pattern = 0x0a000000;
+    static constexpr uint32_t mask = 0x1f000000;
+    static constexpr uint32_t pattern = 0x0a000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeLogicalShiftedRegister, thisObj);
 
     const char* format();
 
@@ -789,12 +789,12 @@
 class A64DOpcodeMoveWide : public A64DOpcode {
 private:
     static const char* const s_opNames[4];
 
 public:
-    static const uint32_t mask = 0x1f800000;
-    static const uint32_t pattern = 0x12800000;
+    static constexpr uint32_t mask = 0x1f800000;
+    static constexpr uint32_t pattern = 0x12800000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeMoveWide, thisObj);
 
     const char* format();
 
@@ -804,12 +804,12 @@
     unsigned immediate16() { return (m_opcode >> 5) & 0xffff; }
 };
 
 class A64DOpcodeTestAndBranchImmediate : public A64DOpcode {
 public:
-    static const uint32_t mask = 0x7e000000;
-    static const uint32_t pattern = 0x36000000;
+    static constexpr uint32_t mask = 0x7e000000;
+    static constexpr uint32_t pattern = 0x36000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeTestAndBranchImmediate, thisObj);
 
     const char* format();
 
@@ -818,12 +818,12 @@
     int immediate14() { return (static_cast<int>((m_opcode >> 5) & 0x3fff) << 18) >> 18; }
 };
 
 class A64DOpcodeUnconditionalBranchImmediate : public A64DOpcode {
 public:
-    static const uint32_t mask = 0x7c000000;
-    static const uint32_t pattern = 0x14000000;
+    static constexpr uint32_t mask = 0x7c000000;
+    static constexpr uint32_t pattern = 0x14000000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeUnconditionalBranchImmediate, thisObj);
 
     const char* format();
 
@@ -835,12 +835,12 @@
 private:
     static const char* const s_opNames[8];
     static const char* const s_AuthOpNames[20];
 
 public:
-    static const uint32_t mask = 0xfe1f0000;
-    static const uint32_t pattern = 0xd61f0000;
+    static constexpr uint32_t mask = 0xfe1f0000;
+    static constexpr uint32_t pattern = 0xd61f0000;
 
     DEFINE_STATIC_FORMAT(A64DOpcodeUnconditionalBranchRegister, thisObj);
 
     const char* format();
 
