diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/UserMediaController.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/UserMediaController.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/UserMediaController.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/UserMediaController.h
@@ -25,10 +25,11 @@
 
 #pragma once
 
 #if ENABLE(MEDIA_STREAM)
 
+#include "FeaturePolicy.h"
 #include "Page.h"
 #include "UserMediaClient.h"
 #include <wtf/CompletionHandler.h>
 
 namespace WebCore {
@@ -49,30 +50,13 @@
     void enumerateMediaDevices(Document&, CompletionHandler<void(const Vector<CaptureDevice>&, const String&)>&&);
 
     UserMediaClient::DeviceChangeObserverToken addDeviceChangeObserver(WTF::Function<void()>&&);
     void removeDeviceChangeObserver(UserMediaClient::DeviceChangeObserverToken);
 
-    enum class GetUserMediaAccess {
-        CanCall,
-        InsecureDocument,
-        InsecureParent,
-        BlockedByParent,
-        BlockedByFeaturePolicy,
-    };
-    enum class CaptureType {
-        Microphone = 1 << 0,
-        Camera = 1 << 1,
-        Display = 1 << 3
-    };
-    GetUserMediaAccess canCallGetUserMedia(const Document&, OptionSet<CaptureType>) const;
-
-    enum class BlockedCaller {
-        GetUserMedia,
-        GetDisplayMedia,
-        EnumerateDevices,
-    };
-    void logGetUserMediaDenial(Document&, GetUserMediaAccess, BlockedCaller);
+    void logGetUserMediaDenial(Document&);
+    void logGetDisplayMediaDenial(Document&);
+    void logEnumerateDevicesDenial(Document&);
 
     WEBCORE_EXPORT static const char* supplementName();
     static UserMediaController* from(Page* page) { return static_cast<UserMediaController*>(Supplement<Page>::from(page, supplementName())); }
 
 private:
