diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLIntrinsics.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLIntrinsics.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLIntrinsics.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLIntrinsics.cpp
@@ -201,26 +201,27 @@
     auto textureTypeIndex = std::find(m_textureTypeNames, m_textureTypeNames + WTF_ARRAY_LENGTH(m_textureTypeNames), nativeTypeDeclaration.name()) - m_textureTypeNames;
     if (textureTypeIndex == WTF_ARRAY_LENGTH(m_textureTypeNames))
         return false;
 
     unsigned innerTypeIndex = WTF_ARRAY_LENGTH(m_textureInnerTypeNames);
-    unsigned vectorLength;
+    unsigned vectorLength = 0;
     for (unsigned i = 0; i < WTF_ARRAY_LENGTH(m_textureInnerTypeNames); ++i) {
         if (innerType.name().startsWith(m_textureInnerTypeNames[i])) {
             innerTypeIndex = i;
             if (innerType.name() == m_textureInnerTypeNames[i])
                 vectorLength = 1;
             else {
-                ASSERT(innerType.name().length() == strlen(m_textureInnerTypeNames[i]) + 1);
-                ASSERT(innerType.name()[innerType.name().length() - 1] == '2'
+                ASSERT_WITH_SECURITY_IMPLICATION(innerType.name().length() == strlen(m_textureInnerTypeNames[i]) + 1);
+                ASSERT_WITH_SECURITY_IMPLICATION(innerType.name()[innerType.name().length() - 1] == '2'
                     || innerType.name()[innerType.name().length() - 1] == '3'
                     || innerType.name()[innerType.name().length() - 1] == '4');
                 vectorLength = innerType.name()[innerType.name().length() - 1] - '0';
             }
         }
     }
-    ASSERT(innerTypeIndex != WTF_ARRAY_LENGTH(m_textureInnerTypeNames));
+    RELEASE_ASSERT(vectorLength && vectorLength < 5);
+    ASSERT_WITH_SECURITY_IMPLICATION(innerTypeIndex != WTF_ARRAY_LENGTH(m_textureInnerTypeNames));
     nativeTypeDeclaration.setIsTexture();
     nativeTypeDeclaration.setIsOpaqueType();
     if (nativeTypeDeclaration.name() == "Texture1DArray" || nativeTypeDeclaration.name() == "RWTexture1DArray" || nativeTypeDeclaration.name() == "Texture2DArray" || nativeTypeDeclaration.name() == "RWTexture2DArray")
         nativeTypeDeclaration.setIsTextureArray();
     if (nativeTypeDeclaration.name() == "RWTexture1D" || nativeTypeDeclaration.name() == "RWTexture2D" || nativeTypeDeclaration.name() == "RWTexture3D" || nativeTypeDeclaration.name() == "RWTexture1DArray" || nativeTypeDeclaration.name() == "RWTexture2DArray")
@@ -229,10 +230,12 @@
         nativeTypeDeclaration.setTextureDimension(1);
     if (nativeTypeDeclaration.name() == "Texture2D" || nativeTypeDeclaration.name() == "RWTexture2D" || nativeTypeDeclaration.name() == "TextureCube" || nativeTypeDeclaration.name() == "Texture2DArray" || nativeTypeDeclaration.name() == "RWTexture2DArray")
         nativeTypeDeclaration.setTextureDimension(2);
     if (nativeTypeDeclaration.name() == "Texture3D" || nativeTypeDeclaration.name() == "RWTexture3D")
         nativeTypeDeclaration.setTextureDimension(3);
+    if (nativeTypeDeclaration.name() == "TextureCube")
+        nativeTypeDeclaration.setIsCubeTexture();
     m_fullTextures[textureTypeIndex][innerTypeIndex][vectorLength - 1] = &nativeTypeDeclaration;
     return true;
 }
 
 void Intrinsics::addDepthTexture(AST::NativeTypeDeclaration& nativeTypeDeclaration, AST::TypeReference& innerType)
@@ -250,10 +253,12 @@
     ASSERT(innerTypeIndex != WTF_ARRAY_LENGTH(m_depthTextureInnerTypes));
     nativeTypeDeclaration.setIsTexture();
     nativeTypeDeclaration.setIsOpaqueType();
     if (texture == m_textureDepth2DArray)
         nativeTypeDeclaration.setIsTextureArray();
+    if (texture == m_textureDepthCube)
+        nativeTypeDeclaration.setIsCubeTexture();
     nativeTypeDeclaration.setTextureDimension(2);
     nativeTypeDeclaration.setIsDepthTexture();
     texture[innerTypeIndex] = &nativeTypeDeclaration;
 }
 
