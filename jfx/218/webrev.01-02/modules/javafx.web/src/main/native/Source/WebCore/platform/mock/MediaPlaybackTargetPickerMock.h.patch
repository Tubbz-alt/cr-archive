diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MediaPlaybackTargetPickerMock.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MediaPlaybackTargetPickerMock.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MediaPlaybackTargetPickerMock.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mock/MediaPlaybackTargetPickerMock.h
@@ -26,10 +26,11 @@
 #ifndef MediaPlaybackTargetPickerMock_h
 #define MediaPlaybackTargetPickerMock_h
 
 #if ENABLE(WIRELESS_PLAYBACK_TARGET) && !PLATFORM(IOS_FAMILY)
 
+#include "GenericTaskQueue.h"
 #include "MediaPlaybackTargetContext.h"
 #include "MediaPlaybackTargetPicker.h"
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
@@ -46,19 +47,18 @@
     void startingMonitoringPlaybackTargets() override;
     void stopMonitoringPlaybackTargets() override;
     void invalidatePlaybackTargets() override;
 
     void setState(const String&, MediaPlaybackTargetContext::State);
+    void dismissPopup();
 
 private:
     bool externalOutputDeviceAvailable() override;
     Ref<MediaPlaybackTarget> playbackTarget() override;
 
-    void timerFired();
-
     String m_deviceName;
-    RunLoop::Timer<MediaPlaybackTargetPickerMock> m_timer;
+    GenericTaskQueue<Timer> m_taskQueue;
     MediaPlaybackTargetContext::State m_state { MediaPlaybackTargetContext::Unknown };
     bool m_showingMenu { false };
 };
 
 } // namespace WebCore
