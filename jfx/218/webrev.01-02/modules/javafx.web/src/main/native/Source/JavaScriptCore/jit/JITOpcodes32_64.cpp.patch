diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITOpcodes32_64.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITOpcodes32_64.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITOpcodes32_64.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITOpcodes32_64.cpp
@@ -48,14 +48,14 @@
 namespace JSC {
 
 void JIT::emit_op_mov(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpMov>();
-    int dst = bytecode.m_dst.offset();
-    int src = bytecode.m_src.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister src = bytecode.m_src;
 
-    if (m_codeBlock->isConstantRegisterIndex(src))
+    if (src.isConstant())
         emitStore(dst, getConstantOperand(src));
     else {
         emitLoad(src, regT1, regT0);
         emitStore(dst, regT1, regT0);
     }
@@ -63,11 +63,11 @@
 
 void JIT::emit_op_end(const Instruction* currentInstruction)
 {
     ASSERT(returnValueGPR != callFrameRegister);
     auto bytecode = currentInstruction->as<OpEnd>();
-    emitLoad(bytecode.m_value.offset(), regT1, returnValueGPR);
+    emitLoad(bytecode.m_value, regT1, returnValueGPR);
     emitRestoreCalleeSaves();
     emitFunctionEpilogue();
     ret();
 }
 
@@ -96,32 +96,32 @@
         JumpList slowCases;
         auto butterfly = TrustedImmPtr(nullptr);
         emitAllocateJSObject(resultReg, JITAllocator::constant(allocator), allocatorReg, TrustedImmPtr(structure), butterfly, scratchReg, slowCases);
         emitInitializeInlineStorage(resultReg, structure->inlineCapacity());
         addSlowCase(slowCases);
-        emitStoreCell(bytecode.m_dst.offset(), resultReg);
+        emitStoreCell(bytecode.m_dst, resultReg);
     }
 }
 
 void JIT::emitSlow_op_new_object(const Instruction* currentInstruction, Vector<SlowCaseEntry>::iterator& iter)
 {
     linkAllSlowCases(iter);
 
     auto bytecode = currentInstruction->as<OpNewObject>();
     auto& metadata = bytecode.metadata(m_codeBlock);
-    int dst = bytecode.m_dst.offset();
+    VirtualRegister dst = bytecode.m_dst;
     Structure* structure = metadata.m_objectAllocationProfile.structure();
-    callOperation(operationNewObject, structure);
+    callOperation(operationNewObject, TrustedImmPtr(&vm()), structure);
     emitStoreCell(dst, returnValueGPR);
 }
 
 void JIT::emit_op_overrides_has_instance(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpOverridesHasInstance>();
-    int dst = bytecode.m_dst.offset();
-    int constructor = bytecode.m_constructor.offset();
-    int hasInstanceValue = bytecode.m_hasInstanceValue.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister constructor = bytecode.m_constructor;
+    VirtualRegister hasInstanceValue = bytecode.m_hasInstanceValue;
 
     emitLoadPayload(hasInstanceValue, regT0);
     // We don't jump if we know what Symbol.hasInstance would do.
     Jump hasInstanceValueNotCell = emitJumpIfNotJSCell(hasInstanceValue);
     Jump customhasInstanceValue = branchPtr(NotEqual, regT0, TrustedImmPtr(m_codeBlock->globalObject()->functionProtoHasInstanceSymbolFunction()));
@@ -143,13 +143,13 @@
 }
 
 void JIT::emit_op_instanceof(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpInstanceof>();
-    int dst = bytecode.m_dst.offset();
-    int value = bytecode.m_value.offset();
-    int proto = bytecode.m_prototype.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister value = bytecode.m_value;
+    VirtualRegister proto = bytecode.m_prototype;
 
     // Load the operands into registers.
     // We use regT0 for baseVal since we will be done with this first, and we can then use it for the result.
     emitLoadPayload(value, regT2);
     emitLoadPayload(proto, regT1);
@@ -157,11 +157,11 @@
     // Check that proto are cells. baseVal must be a cell - this is checked by the get_by_id for Symbol.hasInstance.
     emitJumpSlowCaseIfNotJSCell(value);
     emitJumpSlowCaseIfNotJSCell(proto);
 
     JITInstanceOfGenerator gen(
-        m_codeBlock, CodeOrigin(m_bytecodeOffset), CallSiteIndex(m_bytecodeOffset),
+        m_codeBlock, CodeOrigin(m_bytecodeIndex), CallSiteIndex(m_bytecodeIndex),
         RegisterSet::stubUnavailableRegisters(),
         regT0, // result
         regT2, // value
         regT1, // proto
         regT3, regT4); // scratch
@@ -180,57 +180,57 @@
 void JIT::emitSlow_op_instanceof(const Instruction* currentInstruction, Vector<SlowCaseEntry>::iterator& iter)
 {
     linkAllSlowCases(iter);
 
     auto bytecode = currentInstruction->as<OpInstanceof>();
-    int dst = bytecode.m_dst.offset();
-    int value = bytecode.m_value.offset();
-    int proto = bytecode.m_prototype.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister value = bytecode.m_value;
+    VirtualRegister proto = bytecode.m_prototype;
 
     JITInstanceOfGenerator& gen = m_instanceOfs[m_instanceOfIndex++];
 
     Label coldPathBegin = label();
     emitLoadTag(value, regT0);
     emitLoadTag(proto, regT3);
-    Call call = callOperation(operationInstanceOfOptimize, dst, gen.stubInfo(), JSValueRegs(regT0, regT2), JSValueRegs(regT3, regT1));
+    Call call = callOperation(operationInstanceOfOptimize, dst, m_codeBlock->globalObject(), gen.stubInfo(), JSValueRegs(regT0, regT2), JSValueRegs(regT3, regT1));
     gen.reportSlowPathCall(coldPathBegin, call);
 }
 
 void JIT::emitSlow_op_instanceof_custom(const Instruction* currentInstruction, Vector<SlowCaseEntry>::iterator& iter)
 {
     linkAllSlowCases(iter);
 
     auto bytecode = currentInstruction->as<OpInstanceofCustom>();
-    int dst = bytecode.m_dst.offset();
-    int value = bytecode.m_value.offset();
-    int constructor = bytecode.m_constructor.offset();
-    int hasInstanceValue = bytecode.m_hasInstanceValue.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister value = bytecode.m_value;
+    VirtualRegister constructor = bytecode.m_constructor;
+    VirtualRegister hasInstanceValue = bytecode.m_hasInstanceValue;
 
     emitLoad(value, regT1, regT0);
     emitLoadPayload(constructor, regT2);
     emitLoad(hasInstanceValue, regT4, regT3);
-    callOperation(operationInstanceOfCustom, JSValueRegs(regT1, regT0), regT2, JSValueRegs(regT4, regT3));
+    callOperation(operationInstanceOfCustom, m_codeBlock->globalObject(), JSValueRegs(regT1, regT0), regT2, JSValueRegs(regT4, regT3));
     emitStoreBool(dst, returnValueGPR);
 }
 
 void JIT::emit_op_is_empty(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpIsEmpty>();
-    int dst = bytecode.m_dst.offset();
-    int value = bytecode.m_operand.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister value = bytecode.m_operand;
 
     emitLoad(value, regT1, regT0);
     compare32(Equal, regT1, TrustedImm32(JSValue::EmptyValueTag), regT0);
 
     emitStoreBool(dst, regT0);
 }
 
 void JIT::emit_op_is_undefined(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpIsUndefined>();
-    int dst = bytecode.m_dst.offset();
-    int value = bytecode.m_operand.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister value = bytecode.m_operand;
 
     emitLoad(value, regT1, regT0);
     Jump isCell = branchIfCell(regT1);
 
     compare32(Equal, regT1, TrustedImm32(JSValue::UndefinedTag), regT0);
@@ -253,12 +253,12 @@
 }
 
 void JIT::emit_op_is_undefined_or_null(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpIsUndefinedOrNull>();
-    int dst = bytecode.m_dst.offset();
-    int value = bytecode.m_operand.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister value = bytecode.m_operand;
 
     emitLoadTag(value, regT0);
     static_assert((JSValue::UndefinedTag + 1 == JSValue::NullTag) && (JSValue::NullTag & 0x1), "");
     or32(TrustedImm32(1), regT0);
     compare32(Equal, regT0, TrustedImm32(JSValue::NullTag), regT0);
@@ -266,35 +266,35 @@
 }
 
 void JIT::emit_op_is_boolean(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpIsBoolean>();
-    int dst = bytecode.m_dst.offset();
-    int value = bytecode.m_operand.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister value = bytecode.m_operand;
 
     emitLoadTag(value, regT0);
     compare32(Equal, regT0, TrustedImm32(JSValue::BooleanTag), regT0);
     emitStoreBool(dst, regT0);
 }
 
 void JIT::emit_op_is_number(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpIsNumber>();
-    int dst = bytecode.m_dst.offset();
-    int value = bytecode.m_operand.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister value = bytecode.m_operand;
 
     emitLoadTag(value, regT0);
     add32(TrustedImm32(1), regT0);
     compare32(Below, regT0, TrustedImm32(JSValue::LowestTag + 1), regT0);
     emitStoreBool(dst, regT0);
 }
 
 void JIT::emit_op_is_cell_with_type(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpIsCellWithType>();
-    int dst = bytecode.m_dst.offset();
-    int value = bytecode.m_operand.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister value = bytecode.m_operand;
     int type = bytecode.m_type;
 
     emitLoad(value, regT1, regT0);
     Jump isNotCell = branchIfNotCell(regT1);
 
@@ -309,12 +309,12 @@
 }
 
 void JIT::emit_op_is_object(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpIsObject>();
-    int dst = bytecode.m_dst.offset();
-    int value = bytecode.m_operand.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister value = bytecode.m_operand;
 
     emitLoad(value, regT1, regT0);
     Jump isNotCell = branchIfNotCell(regT1);
 
     compare8(AboveOrEqual, Address(regT0, JSCell::typeInfoTypeOffset()), TrustedImm32(ObjectType), regT0);
@@ -328,12 +328,12 @@
 }
 
 void JIT::emit_op_to_primitive(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpToPrimitive>();
-    int dst = bytecode.m_dst.offset();
-    int src = bytecode.m_src.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister src = bytecode.m_src;
 
     emitLoad(src, regT1, regT0);
 
     Jump isImm = branchIfNotCell(regT1);
     addSlowCase(branchIfObject(regT0));
@@ -341,25 +341,42 @@
 
     if (dst != src)
         emitStore(dst, regT1, regT0);
 }
 
+void JIT::emit_op_to_property_key(const Instruction* currentInstruction)
+{
+    auto bytecode = currentInstruction->as<OpToPropertyKey>();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister src = bytecode.m_src;
+
+    emitLoad(src, regT1, regT0);
+
+    addSlowCase(branchIfNotCell(regT1));
+    Jump done = branchIfSymbol(regT0);
+    addSlowCase(branchIfNotString(regT0));
+
+    done.link(this);
+    if (src != dst)
+        emitStore(dst, regT1, regT0);
+}
+
 void JIT::emit_op_set_function_name(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpSetFunctionName>();
-    int func = bytecode.m_function.offset();
-    int name = bytecode.m_name.offset();
+    VirtualRegister func = bytecode.m_function;
+    VirtualRegister name = bytecode.m_name;
     emitLoadPayload(func, regT1);
     emitLoad(name, regT3, regT2);
-    callOperation(operationSetFunctionName, regT1, JSValueRegs(regT3, regT2));
+    callOperation(operationSetFunctionName, m_codeBlock->globalObject(), regT1, JSValueRegs(regT3, regT2));
 }
 
 void JIT::emit_op_not(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpNot>();
-    int dst = bytecode.m_dst.offset();
-    int src = bytecode.m_operand.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister src = bytecode.m_operand;
 
     emitLoadTag(src, regT0);
 
     emitLoad(src, regT1, regT0);
     addSlowCase(branchIfNotBoolean(regT1, InvalidGPRReg));
@@ -369,11 +386,11 @@
 }
 
 void JIT::emit_op_jfalse(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpJfalse>();
-    int cond = bytecode.m_condition.offset();
+    VirtualRegister cond = bytecode.m_condition;
     unsigned target = jumpTarget(currentInstruction, bytecode.m_targetLabel);
 
     emitLoad(cond, regT1, regT0);
 
     JSValueRegs value(regT1, regT0);
@@ -384,11 +401,11 @@
 }
 
 void JIT::emit_op_jtrue(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpJtrue>();
-    int cond = bytecode.m_condition.offset();
+    VirtualRegister cond = bytecode.m_condition;
     unsigned target = jumpTarget(currentInstruction, bytecode.m_targetLabel);
 
     emitLoad(cond, regT1, regT0);
     bool shouldCheckMasqueradesAsUndefined = true;
     JSValueRegs value(regT1, regT0);
@@ -398,11 +415,11 @@
 }
 
 void JIT::emit_op_jeq_null(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpJeqNull>();
-    int src = bytecode.m_value.offset();
+    VirtualRegister src = bytecode.m_value;
     unsigned target = jumpTarget(currentInstruction, bytecode.m_targetLabel);
 
     emitLoad(src, regT1, regT0);
 
     Jump isImmediate = branchIfNotCell(regT1);
@@ -424,11 +441,11 @@
 }
 
 void JIT::emit_op_jneq_null(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpJneqNull>();
-    int src = bytecode.m_value.offset();
+    VirtualRegister src = bytecode.m_value;
     unsigned target = jumpTarget(currentInstruction, bytecode.m_targetLabel);
 
     emitLoad(src, regT1, regT0);
 
     Jump isImmediate = branchIfNotCell(regT1);
@@ -450,11 +467,11 @@
 }
 
 void JIT::emit_op_jundefined_or_null(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpJundefinedOrNull>();
-    int value = bytecode.m_value.offset();
+    VirtualRegister value = bytecode.m_value;
     unsigned target = jumpTarget(currentInstruction, bytecode.m_targetLabel);
 
     emitLoadTag(value, regT0);
     static_assert((JSValue::UndefinedTag + 1 == JSValue::NullTag) && (JSValue::NullTag & 0x1), "");
     or32(TrustedImm32(1), regT0);
@@ -462,11 +479,11 @@
 }
 
 void JIT::emit_op_jnundefined_or_null(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpJnundefinedOrNull>();
-    int value = bytecode.m_value.offset();
+    VirtualRegister value = bytecode.m_value;
     unsigned target = jumpTarget(currentInstruction, bytecode.m_targetLabel);
 
     emitLoadTag(value, regT0);
     static_assert((JSValue::UndefinedTag + 1 == JSValue::NullTag) && (JSValue::NullTag & 0x1), "");
     or32(TrustedImm32(1), regT0);
@@ -475,30 +492,31 @@
 
 void JIT::emit_op_jneq_ptr(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpJneqPtr>();
     auto& metadata = bytecode.metadata(m_codeBlock);
-    int src = bytecode.m_value.offset();
-    Special::Pointer ptr = bytecode.m_specialPointer;
+    VirtualRegister src = bytecode.m_value;
+    JSValue specialPointer = getConstantOperand(bytecode.m_specialPointer);
+    ASSERT(specialPointer.isCell());
     unsigned target = jumpTarget(currentInstruction, bytecode.m_targetLabel);
 
     emitLoad(src, regT1, regT0);
     Jump notCell = branchIfNotCell(regT1);
-    Jump equal = branchPtr(Equal, regT0, TrustedImmPtr(actualPointerFor(m_codeBlock, ptr)));
+    Jump equal = branchPtr(Equal, regT0, TrustedImmPtr(specialPointer.asCell()));
     notCell.link(this);
     store8(TrustedImm32(1), &metadata.m_hasJumped);
     addJump(jump(), target);
     equal.link(this);
 }
 
 void JIT::emit_op_eq(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpEq>();
 
-    int dst = bytecode.m_dst.offset();
-    int src1 = bytecode.m_lhs.offset();
-    int src2 = bytecode.m_rhs.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister src1 = bytecode.m_lhs;
+    VirtualRegister src2 = bytecode.m_rhs;
 
     emitLoad2(src1, regT1, regT0, src2, regT3, regT2);
     addSlowCase(branch32(NotEqual, regT1, regT3));
     addSlowCase(branchIfCell(regT1));
     addSlowCase(branch32(Below, regT1, TrustedImm32(JSValue::LowestTag)));
@@ -509,11 +527,11 @@
 }
 
 void JIT::emitSlow_op_eq(const Instruction* currentInstruction, Vector<SlowCaseEntry>::iterator& iter)
 {
     auto bytecode = currentInstruction->as<OpEq>();
-    int dst = bytecode.m_dst.offset();
+    VirtualRegister dst = bytecode.m_dst;
 
     JumpList storeResult;
     JumpList genericCase;
 
     genericCase.append(getSlowCase(iter)); // tags not equal
@@ -521,28 +539,28 @@
     linkSlowCase(iter); // tags equal and JSCell
     genericCase.append(branchIfNotString(regT0));
     genericCase.append(branchIfNotString(regT2));
 
     // String case.
-    callOperation(operationCompareStringEq, regT0, regT2);
+    callOperation(operationCompareStringEq, m_codeBlock->globalObject(), regT0, regT2);
     storeResult.append(jump());
 
     // Generic case.
     genericCase.append(getSlowCase(iter)); // doubles
     genericCase.link(this);
-    callOperation(operationCompareEq, JSValueRegs(regT1, regT0), JSValueRegs(regT3, regT2));
+    callOperation(operationCompareEq, m_codeBlock->globalObject(), JSValueRegs(regT1, regT0), JSValueRegs(regT3, regT2));
 
     storeResult.link(this);
     emitStoreBool(dst, returnValueGPR);
 }
 
 void JIT::emit_op_jeq(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpJeq>();
     unsigned target = jumpTarget(currentInstruction, bytecode.m_targetLabel);
-    int src1 = bytecode.m_lhs.offset();
-    int src2 = bytecode.m_rhs.offset();
+    VirtualRegister src1 = bytecode.m_lhs;
+    VirtualRegister src2 = bytecode.m_rhs;
 
     emitLoad2(src1, regT1, regT0, src2, regT3, regT2);
     addSlowCase(branch32(NotEqual, regT1, regT3));
     addSlowCase(branchIfCell(regT1));
     addSlowCase(branch32(Below, regT1, TrustedImm32(JSValue::LowestTag)));
@@ -560,18 +578,18 @@
     linkSlowCase(iter); // tags equal and JSCell
     genericCase.append(branchIfNotString(regT0));
     genericCase.append(branchIfNotString(regT2));
 
     // String case.
-    callOperation(operationCompareStringEq, regT0, regT2);
+    callOperation(operationCompareStringEq, m_codeBlock->globalObject(), regT0, regT2);
     emitJumpSlowToHot(branchTest32(type == CompileOpEqType::Eq ? NonZero : Zero, returnValueGPR), jumpTarget);
     done.append(jump());
 
     // Generic case.
     genericCase.append(getSlowCase(iter)); // doubles
     genericCase.link(this);
-    callOperation(operationCompareEq, JSValueRegs(regT1, regT0), JSValueRegs(regT3, regT2));
+    callOperation(operationCompareEq, m_codeBlock->globalObject(), JSValueRegs(regT1, regT0), JSValueRegs(regT3, regT2));
     emitJumpSlowToHot(branchTest32(type == CompileOpEqType::Eq ? NonZero : Zero, returnValueGPR), jumpTarget);
 
     done.link(this);
 }
 
@@ -583,13 +601,13 @@
 }
 
 void JIT::emit_op_neq(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpNeq>();
-    int dst = bytecode.m_dst.offset();
-    int src1 = bytecode.m_lhs.offset();
-    int src2 = bytecode.m_rhs.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister src1 = bytecode.m_lhs;
+    VirtualRegister src2 = bytecode.m_rhs;
 
     emitLoad2(src1, regT1, regT0, src2, regT3, regT2);
     addSlowCase(branch32(NotEqual, regT1, regT3));
     addSlowCase(branchIfCell(regT1));
     addSlowCase(branch32(Below, regT1, TrustedImm32(JSValue::LowestTag)));
@@ -600,11 +618,11 @@
 }
 
 void JIT::emitSlow_op_neq(const Instruction* currentInstruction, Vector<SlowCaseEntry>::iterator& iter)
 {
     auto bytecode = currentInstruction->as<OpNeq>();
-    int dst = bytecode.m_dst.offset();
+    VirtualRegister dst = bytecode.m_dst;
 
     JumpList storeResult;
     JumpList genericCase;
 
     genericCase.append(getSlowCase(iter)); // tags not equal
@@ -612,29 +630,29 @@
     linkSlowCase(iter); // tags equal and JSCell
     genericCase.append(branchIfNotString(regT0));
     genericCase.append(branchIfNotString(regT2));
 
     // String case.
-    callOperation(operationCompareStringEq, regT0, regT2);
+    callOperation(operationCompareStringEq, m_codeBlock->globalObject(), regT0, regT2);
     storeResult.append(jump());
 
     // Generic case.
     genericCase.append(getSlowCase(iter)); // doubles
     genericCase.link(this);
-    callOperation(operationCompareEq, JSValueRegs(regT1, regT0), JSValueRegs(regT3, regT2));
+    callOperation(operationCompareEq, m_codeBlock->globalObject(), JSValueRegs(regT1, regT0), JSValueRegs(regT3, regT2));
 
     storeResult.link(this);
     xor32(TrustedImm32(0x1), returnValueGPR);
     emitStoreBool(dst, returnValueGPR);
 }
 
 void JIT::emit_op_jneq(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpJneq>();
     unsigned target = jumpTarget(currentInstruction, bytecode.m_targetLabel);
-    int src1 = bytecode.m_lhs.offset();
-    int src2 = bytecode.m_rhs.offset();
+    VirtualRegister src1 = bytecode.m_lhs;
+    VirtualRegister src2 = bytecode.m_rhs;
 
     emitLoad2(src1, regT1, regT0, src2, regT3, regT2);
     addSlowCase(branch32(NotEqual, regT1, regT3));
     addSlowCase(branchIfCell(regT1));
     addSlowCase(branch32(Below, regT1, TrustedImm32(JSValue::LowestTag)));
@@ -651,13 +669,13 @@
 
 template <typename Op>
 void JIT::compileOpStrictEq(const Instruction* currentInstruction, CompileOpStrictEqType type)
 {
     auto bytecode = currentInstruction->as<Op>();
-    int dst = bytecode.m_dst.offset();
-    int src1 = bytecode.m_lhs.offset();
-    int src2 = bytecode.m_rhs.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister src1 = bytecode.m_lhs;
+    VirtualRegister src2 = bytecode.m_rhs;
 
     emitLoad2(src1, regT1, regT0, src2, regT3, regT2);
 
     // Bail if the tags differ, or are double.
     addSlowCase(branch32(NotEqual, regT1, regT3));
@@ -692,12 +710,12 @@
 template<typename Op>
 void JIT::compileOpStrictEqJump(const Instruction* currentInstruction, CompileOpStrictEqType type)
 {
     auto bytecode = currentInstruction->as<Op>();
     int target = jumpTarget(currentInstruction, bytecode.m_targetLabel);
-    int src1 = bytecode.m_lhs.offset();
-    int src2 = bytecode.m_rhs.offset();
+    VirtualRegister src1 = bytecode.m_lhs;
+    VirtualRegister src2 = bytecode.m_rhs;
 
     emitLoad2(src1, regT1, regT0, src2, regT3, regT2);
 
     // Bail if the tags differ, or are double.
     addSlowCase(branch32(NotEqual, regT1, regT3));
@@ -731,29 +749,29 @@
 {
     linkAllSlowCases(iter);
 
     auto bytecode = currentInstruction->as<OpJstricteq>();
     unsigned target = jumpTarget(currentInstruction, bytecode.m_targetLabel);
-    callOperation(operationCompareStrictEq, JSValueRegs(regT1, regT0), JSValueRegs(regT3, regT2));
+    callOperation(operationCompareStrictEq, m_codeBlock->globalObject(), JSValueRegs(regT1, regT0), JSValueRegs(regT3, regT2));
     emitJumpSlowToHot(branchTest32(NonZero, returnValueGPR), target);
 }
 
 void JIT::emitSlow_op_jnstricteq(const Instruction* currentInstruction, Vector<SlowCaseEntry>::iterator& iter)
 {
     linkAllSlowCases(iter);
 
     auto bytecode = currentInstruction->as<OpJnstricteq>();
     unsigned target = jumpTarget(currentInstruction, bytecode.m_targetLabel);
-    callOperation(operationCompareStrictEq, JSValueRegs(regT1, regT0), JSValueRegs(regT3, regT2));
+    callOperation(operationCompareStrictEq, m_codeBlock->globalObject(), JSValueRegs(regT1, regT0), JSValueRegs(regT3, regT2));
     emitJumpSlowToHot(branchTest32(Zero, returnValueGPR), target);
 }
 
 void JIT::emit_op_eq_null(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpEqNull>();
-    int dst = bytecode.m_dst.offset();
-    int src = bytecode.m_operand.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister src = bytecode.m_operand;
 
     emitLoad(src, regT1, regT0);
     Jump isImmediate = branchIfNotCell(regT1);
 
     Jump isMasqueradesAsUndefined = branchTest8(NonZero, Address(regT0, JSCell::typeInfoFlagsOffset()), TrustedImm32(MasqueradesAsUndefined));
@@ -780,12 +798,12 @@
 }
 
 void JIT::emit_op_neq_null(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpNeqNull>();
-    int dst = bytecode.m_dst.offset();
-    int src = bytecode.m_operand.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister src = bytecode.m_operand;
 
     emitLoad(src, regT1, regT0);
     Jump isImmediate = branchIfNotCell(regT1);
 
     Jump isMasqueradesAsUndefined = branchTest8(NonZero, Address(regT0, JSCell::typeInfoFlagsOffset()), TrustedImm32(MasqueradesAsUndefined));
@@ -814,20 +832,20 @@
 void JIT::emit_op_throw(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpThrow>();
     ASSERT(regT0 == returnValueGPR);
     copyCalleeSavesToEntryFrameCalleeSavesBuffer(vm().topEntryFrame);
-    emitLoad(bytecode.m_value.offset(), regT1, regT0);
-    callOperationNoExceptionCheck(operationThrow, JSValueRegs(regT1, regT0));
+    emitLoad(bytecode.m_value, regT1, regT0);
+    callOperationNoExceptionCheck(operationThrow, m_codeBlock->globalObject(), JSValueRegs(regT1, regT0));
     jumpToExceptionHandler(vm());
 }
 
 void JIT::emit_op_to_number(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpToNumber>();
-    int dst = bytecode.m_dst.offset();
-    int src = bytecode.m_operand.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister src = bytecode.m_operand;
 
     emitLoad(src, regT1, regT0);
 
     Jump isInt32 = branchIfInt32(regT1);
     addSlowCase(branch32(AboveOrEqual, regT1, TrustedImm32(JSValue::LowestTag)));
@@ -836,15 +854,37 @@
     emitValueProfilingSite(bytecode.metadata(m_codeBlock));
     if (src != dst)
         emitStore(dst, regT1, regT0);
 }
 
+void JIT::emit_op_to_numeric(const Instruction* currentInstruction)
+{
+    auto bytecode = currentInstruction->as<OpToNumeric>();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister src = bytecode.m_operand;
+    JSValueRegs argumentValueRegs(regT1, regT0);
+
+    emitLoad(src, regT1, regT0);
+
+    Jump isNotCell = branchIfNotCell(regT1);
+    addSlowCase(branchIfNotBigInt(regT0));
+    Jump isBigInt = jump();
+
+    isNotCell.link(this);
+    addSlowCase(branchIfNotNumber(argumentValueRegs, regT2));
+    isBigInt.link(this);
+
+    emitValueProfilingSite(bytecode.metadata(m_codeBlock));
+    if (src != dst)
+        emitStore(dst, regT1, regT0);
+}
+
 void JIT::emit_op_to_string(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpToString>();
-    int dst = bytecode.m_dst.offset();
-    int src = bytecode.m_operand.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister src = bytecode.m_operand;
 
     emitLoad(src, regT1, regT0);
 
     addSlowCase(branchIfNotCell(regT1));
     addSlowCase(branchIfNotString(regT0));
@@ -854,12 +894,12 @@
 }
 
 void JIT::emit_op_to_object(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpToObject>();
-    int dst = bytecode.m_dst.offset();
-    int src = bytecode.m_operand.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister src = bytecode.m_operand;
 
     emitLoad(src, regT1, regT0);
 
     addSlowCase(branchIfNotCell(regT1));
     addSlowCase(branchIfNotObject(regT0));
@@ -880,11 +920,11 @@
     load32(Address(regT3, VM::callFrameForCatchOffset()), callFrameRegister);
     storePtr(TrustedImmPtr(nullptr), Address(regT3, VM::callFrameForCatchOffset()));
 
     addPtr(TrustedImm32(stackPointerOffsetFor(codeBlock()) * sizeof(Register)), callFrameRegister, stackPointerRegister);
 
-    callOperationNoExceptionCheck(operationCheckIfExceptionIsUncatchableAndNotifyProfiler);
+    callOperationNoExceptionCheck(operationCheckIfExceptionIsUncatchableAndNotifyProfiler, TrustedImmPtr(&vm()));
     Jump isCatchableException = branchTest32(Zero, returnValueGPR);
     jumpToExceptionHandler(vm());
     isCatchableException.link(this);
 
     move(TrustedImmPtr(m_vm), regT3);
@@ -893,36 +933,34 @@
     load32(Address(regT3, VM::exceptionOffset()), regT2);
     move(TrustedImm32(JSValue::CellTag), regT1);
 
     store32(TrustedImm32(0), Address(regT3, VM::exceptionOffset()));
 
-    unsigned exception = bytecode.m_exception.offset();
-    emitStore(exception, regT1, regT2);
+    emitStore(bytecode.m_exception, regT1, regT2);
 
     load32(Address(regT2, Exception::valueOffset() + OBJECT_OFFSETOF(JSValue, u.asBits.payload)), regT0);
     load32(Address(regT2, Exception::valueOffset() + OBJECT_OFFSETOF(JSValue, u.asBits.tag)), regT1);
 
-    unsigned thrownValue = bytecode.m_thrownValue.offset();
-    emitStore(thrownValue, regT1, regT0);
+    emitStore(bytecode.m_thrownValue, regT1, regT0);
 
 #if ENABLE(DFG_JIT)
     // FIXME: consider inline caching the process of doing OSR entry, including
     // argument type proofs, storing locals to the buffer, etc
     // https://bugs.webkit.org/show_bug.cgi?id=175598
 
     auto& metadata = bytecode.metadata(m_codeBlock);
-    ValueProfileAndOperandBuffer* buffer = metadata.m_buffer;
+    ValueProfileAndVirtualRegisterBuffer* buffer = metadata.m_buffer;
     if (buffer || !shouldEmitProfiling())
-        callOperation(operationTryOSREnterAtCatch, m_bytecodeOffset);
+        callOperation(operationTryOSREnterAtCatch, &vm(), m_bytecodeIndex.asBits());
     else
-        callOperation(operationTryOSREnterAtCatchAndValueProfile, m_bytecodeOffset);
+        callOperation(operationTryOSREnterAtCatchAndValueProfile, &vm(), m_bytecodeIndex.asBits());
     auto skipOSREntry = branchTestPtr(Zero, returnValueGPR);
     emitRestoreCalleeSaves();
     farJump(returnValueGPR, NoPtrTag);
     skipOSREntry.link(this);
     if (buffer && shouldEmitProfiling()) {
-        buffer->forEach([&] (ValueProfileAndOperand& profile) {
+        buffer->forEach([&] (ValueProfileAndVirtualRegister& profile) {
             JSValueRegs regs(regT1, regT0);
             emitGetVirtualRegister(profile.m_operand, regs);
             emitValueProfilingSite(static_cast<ValueProfile&>(profile));
         });
     }
@@ -935,89 +973,104 @@
 }
 
 void JIT::emit_op_get_parent_scope(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpGetParentScope>();
-    int currentScope = bytecode.m_scope.offset();
+    VirtualRegister currentScope = bytecode.m_scope;
     emitLoadPayload(currentScope, regT0);
     loadPtr(Address(regT0, JSScope::offsetOfNext()), regT0);
-    emitStoreCell(bytecode.m_dst.offset(), regT0);
+    emitStoreCell(bytecode.m_dst, regT0);
 }
 
 void JIT::emit_op_switch_imm(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpSwitchImm>();
     size_t tableIndex = bytecode.m_tableIndex;
     unsigned defaultOffset = jumpTarget(currentInstruction, bytecode.m_defaultOffset);
-    unsigned scrutinee = bytecode.m_scrutinee.offset();
+    VirtualRegister scrutinee = bytecode.m_scrutinee;
 
     // create jump table for switch destinations, track this switch statement.
     SimpleJumpTable* jumpTable = &m_codeBlock->switchJumpTable(tableIndex);
-    m_switches.append(SwitchRecord(jumpTable, m_bytecodeOffset, defaultOffset, SwitchRecord::Immediate));
+    m_switches.append(SwitchRecord(jumpTable, m_bytecodeIndex, defaultOffset, SwitchRecord::Immediate));
     jumpTable->ensureCTITable();
 
     emitLoad(scrutinee, regT1, regT0);
-    callOperation(operationSwitchImmWithUnknownKeyType, JSValueRegs(regT1, regT0), tableIndex);
+    callOperation(operationSwitchImmWithUnknownKeyType, TrustedImmPtr(&vm()), JSValueRegs(regT1, regT0), tableIndex);
     farJump(returnValueGPR, NoPtrTag);
 }
 
 void JIT::emit_op_switch_char(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpSwitchChar>();
     size_t tableIndex = bytecode.m_tableIndex;
     unsigned defaultOffset = jumpTarget(currentInstruction, bytecode.m_defaultOffset);
-    unsigned scrutinee = bytecode.m_scrutinee.offset();
+    VirtualRegister scrutinee = bytecode.m_scrutinee;
 
     // create jump table for switch destinations, track this switch statement.
     SimpleJumpTable* jumpTable = &m_codeBlock->switchJumpTable(tableIndex);
-    m_switches.append(SwitchRecord(jumpTable, m_bytecodeOffset, defaultOffset, SwitchRecord::Character));
+    m_switches.append(SwitchRecord(jumpTable, m_bytecodeIndex, defaultOffset, SwitchRecord::Character));
     jumpTable->ensureCTITable();
 
     emitLoad(scrutinee, regT1, regT0);
-    callOperation(operationSwitchCharWithUnknownKeyType, JSValueRegs(regT1, regT0), tableIndex);
+    callOperation(operationSwitchCharWithUnknownKeyType, m_codeBlock->globalObject(), JSValueRegs(regT1, regT0), tableIndex);
     farJump(returnValueGPR, NoPtrTag);
 }
 
 void JIT::emit_op_switch_string(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpSwitchString>();
     size_t tableIndex = bytecode.m_tableIndex;
     unsigned defaultOffset = jumpTarget(currentInstruction, bytecode.m_defaultOffset);
-    unsigned scrutinee = bytecode.m_scrutinee.offset();
+    VirtualRegister scrutinee = bytecode.m_scrutinee;
 
     // create jump table for switch destinations, track this switch statement.
     StringJumpTable* jumpTable = &m_codeBlock->stringSwitchJumpTable(tableIndex);
-    m_switches.append(SwitchRecord(jumpTable, m_bytecodeOffset, defaultOffset));
+    m_switches.append(SwitchRecord(jumpTable, m_bytecodeIndex, defaultOffset));
 
     emitLoad(scrutinee, regT1, regT0);
-    callOperation(operationSwitchStringWithUnknownKeyType, JSValueRegs(regT1, regT0), tableIndex);
+    callOperation(operationSwitchStringWithUnknownKeyType, m_codeBlock->globalObject(), JSValueRegs(regT1, regT0), tableIndex);
     farJump(returnValueGPR, NoPtrTag);
 }
 
 void JIT::emit_op_debug(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpDebug>();
     load32(codeBlock()->debuggerRequestsAddress(), regT0);
     Jump noDebuggerRequests = branchTest32(Zero, regT0);
-    callOperation(operationDebug, static_cast<int>(bytecode.m_debugHookType));
+    callOperation(operationDebug, &vm(), static_cast<int>(bytecode.m_debugHookType));
     noDebuggerRequests.link(this);
 }
 
+
+void JIT::emit_op_enter(const Instruction* currentInstruction)
+{
+    emitEnterOptimizationCheck();
+
+    // Even though JIT code doesn't use them, we initialize our constant
+    // registers to zap stale pointers, to avoid unnecessarily prolonging
+    // object lifetime and increasing GC pressure.
+    for (int i = CodeBlock::llintBaselineCalleeSaveSpaceAsVirtualRegisters(); i < m_codeBlock->numVars(); ++i)
+        emitStore(virtualRegisterForLocal(i), jsUndefined());
+
+    JITSlowPathCall slowPathCall(this, currentInstruction, slow_path_enter);
+    slowPathCall.call();
+}
+
 void JIT::emit_op_get_scope(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpGetScope>();
-    int dst = bytecode.m_dst.offset();
+    VirtualRegister dst = bytecode.m_dst;
     emitGetFromCallFrameHeaderPtr(CallFrameSlot::callee, regT0);
     loadPtr(Address(regT0, JSFunction::offsetOfScopeChain()), regT0);
     emitStoreCell(dst, regT0);
 }
 
 void JIT::emit_op_create_this(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpCreateThis>();
     auto& metadata = bytecode.metadata(m_codeBlock);
-    int callee = bytecode.m_callee.offset();
+    VirtualRegister callee = bytecode.m_callee;
     WriteBarrierBase<JSCell>* cachedFunction = &metadata.m_cachedCallee;
     RegisterID calleeReg = regT0;
     RegisterID rareDataReg = regT4;
     RegisterID resultReg = regT0;
     RegisterID allocatorReg = regT1;
@@ -1025,14 +1078,14 @@
     RegisterID cachedFunctionReg = regT4;
     RegisterID scratchReg = regT3;
 
     emitLoadPayload(callee, calleeReg);
     addSlowCase(branchIfNotFunction(calleeReg));
-    loadPtr(Address(calleeReg, JSFunction::offsetOfRareData()), rareDataReg);
-    addSlowCase(branchTestPtr(Zero, rareDataReg));
-    load32(Address(rareDataReg, FunctionRareData::offsetOfObjectAllocationProfile() + ObjectAllocationProfileWithPrototype::offsetOfAllocator()), allocatorReg);
-    loadPtr(Address(rareDataReg, FunctionRareData::offsetOfObjectAllocationProfile() + ObjectAllocationProfileWithPrototype::offsetOfStructure()), structureReg);
+    loadPtr(Address(calleeReg, JSFunction::offsetOfExecutableOrRareData()), rareDataReg);
+    addSlowCase(branchTestPtr(Zero, rareDataReg, TrustedImm32(JSFunction::rareDataTag)));
+    load32(Address(rareDataReg, FunctionRareData::offsetOfObjectAllocationProfile() + ObjectAllocationProfileWithPrototype::offsetOfAllocator() - JSFunction::rareDataTag), allocatorReg);
+    loadPtr(Address(rareDataReg, FunctionRareData::offsetOfObjectAllocationProfile() + ObjectAllocationProfileWithPrototype::offsetOfStructure() - JSFunction::rareDataTag), structureReg);
 
     loadPtr(cachedFunction, cachedFunctionReg);
     Jump hasSeenMultipleCallees = branchPtr(Equal, cachedFunctionReg, TrustedImmPtr(JSCell::seenMultipleCalleeObjects()));
     addSlowCase(branchPtr(NotEqual, calleeReg, cachedFunctionReg));
     hasSeenMultipleCallees.link(this);
@@ -1041,19 +1094,19 @@
     auto butterfly = TrustedImmPtr(nullptr);
     emitAllocateJSObject(resultReg, JITAllocator::variable(), allocatorReg, structureReg, butterfly, scratchReg, slowCases);
     load8(Address(structureReg, Structure::inlineCapacityOffset()), scratchReg);
     emitInitializeInlineStorage(resultReg, scratchReg);
     addSlowCase(slowCases);
-    emitStoreCell(bytecode.m_dst.offset(), resultReg);
+    emitStoreCell(bytecode.m_dst, resultReg);
 }
 
 void JIT::emit_op_to_this(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpToThis>();
     auto& metadata = bytecode.metadata(m_codeBlock);
     StructureID* cachedStructureID = &metadata.m_cachedStructureID;
-    int thisRegister = bytecode.m_srcDst.offset();
+    VirtualRegister thisRegister = bytecode.m_srcDst;
 
     emitLoad(thisRegister, regT3, regT2);
 
     addSlowCase(branchIfNotCell(regT3));
     addSlowCase(branchIfNotType(regT2, FinalObjectType));
@@ -1063,20 +1116,20 @@
 }
 
 void JIT::emit_op_check_tdz(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpCheckTdz>();
-    emitLoadTag(bytecode.m_targetVirtualRegister.offset(), regT0);
+    emitLoadTag(bytecode.m_targetVirtualRegister, regT0);
     addSlowCase(branchIfEmpty(regT0));
 }
 
 void JIT::emit_op_has_structure_property(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpHasStructureProperty>();
-    int dst = bytecode.m_dst.offset();
-    int base = bytecode.m_base.offset();
-    int enumerator = bytecode.m_enumerator.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister base = bytecode.m_base;
+    VirtualRegister enumerator = bytecode.m_enumerator;
 
     emitLoadPayload(base, regT0);
     emitJumpSlowCaseIfNotJSCell(base);
 
     emitLoadPayload(enumerator, regT1);
@@ -1117,13 +1170,13 @@
 
 void JIT::emit_op_has_indexed_property(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpHasIndexedProperty>();
     auto& metadata = bytecode.metadata(m_codeBlock);
-    int dst = bytecode.m_dst.offset();
-    int base = bytecode.m_base.offset();
-    int property = bytecode.m_property.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister base = bytecode.m_base;
+    VirtualRegister property = bytecode.m_property;
     ArrayProfile* profile = &metadata.m_arrayProfile;
     ByValInfo* byValInfo = m_codeBlock->addByValInfo();
 
     emitLoadPayload(base, regT0);
     emitJumpSlowCaseIfNotJSCell(base);
@@ -1157,41 +1210,41 @@
 
     emitStoreBool(dst, regT0);
 
     Label nextHotPath = label();
 
-    m_byValCompilationInfo.append(ByValCompilationInfo(byValInfo, m_bytecodeOffset, PatchableJump(), badType, mode, profile, done, nextHotPath));
+    m_byValCompilationInfo.append(ByValCompilationInfo(byValInfo, m_bytecodeIndex, PatchableJump(), badType, mode, profile, done, nextHotPath));
 }
 
 void JIT::emitSlow_op_has_indexed_property(const Instruction* currentInstruction, Vector<SlowCaseEntry>::iterator& iter)
 {
     linkAllSlowCases(iter);
 
     auto bytecode = currentInstruction->as<OpHasIndexedProperty>();
-    int dst = bytecode.m_dst.offset();
-    int base = bytecode.m_base.offset();
-    int property = bytecode.m_property.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister base = bytecode.m_base;
+    VirtualRegister property = bytecode.m_property;
     ByValInfo* byValInfo = m_byValCompilationInfo[m_byValInstructionIndex].byValInfo;
 
     Label slowPath = label();
 
     emitLoad(base, regT1, regT0);
     emitLoad(property, regT3, regT2);
-    Call call = callOperation(operationHasIndexedPropertyDefault, dst, JSValueRegs(regT1, regT0), JSValueRegs(regT3, regT2), byValInfo);
+    Call call = callOperation(operationHasIndexedPropertyDefault, dst, m_codeBlock->globalObject(), JSValueRegs(regT1, regT0), JSValueRegs(regT3, regT2), byValInfo);
 
     m_byValCompilationInfo[m_byValInstructionIndex].slowPathTarget = slowPath;
     m_byValCompilationInfo[m_byValInstructionIndex].returnAddress = call;
     m_byValInstructionIndex++;
 }
 
 void JIT::emit_op_get_direct_pname(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpGetDirectPname>();
-    int dst = bytecode.m_dst.offset();
-    int base = bytecode.m_base.offset();
-    int index = bytecode.m_index.offset();
-    int enumerator = bytecode.m_enumerator.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister base = bytecode.m_base;
+    VirtualRegister index = bytecode.m_index;
+    VirtualRegister enumerator = bytecode.m_enumerator;
 
     // Check that base is a cell
     emitLoadPayload(base, regT0);
     emitJumpSlowCaseIfNotJSCell(base);
 
@@ -1225,13 +1278,13 @@
 }
 
 void JIT::emit_op_enumerator_structure_pname(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpEnumeratorStructurePname>();
-    int dst = bytecode.m_dst.offset();
-    int enumerator = bytecode.m_enumerator.offset();
-    int index = bytecode.m_index.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister enumerator = bytecode.m_enumerator;
+    VirtualRegister index = bytecode.m_index;
 
     emitLoadPayload(index, regT0);
     emitLoadPayload(enumerator, regT1);
     Jump inBounds = branch32(Below, regT0, Address(regT1, JSPropertyNameEnumerator::endStructurePropertyIndexOffset()));
 
@@ -1250,13 +1303,13 @@
 }
 
 void JIT::emit_op_enumerator_generic_pname(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpEnumeratorGenericPname>();
-    int dst = bytecode.m_dst.offset();
-    int enumerator = bytecode.m_enumerator.offset();
-    int index = bytecode.m_index.offset();
+    VirtualRegister dst = bytecode.m_dst;
+    VirtualRegister enumerator = bytecode.m_enumerator;
+    VirtualRegister index = bytecode.m_index;
 
     emitLoadPayload(index, regT0);
     emitLoadPayload(enumerator, regT1);
     Jump inBounds = branch32(Below, regT0, Address(regT1, JSPropertyNameEnumerator::endGenericPropertyIndexOffset()));
 
@@ -1277,11 +1330,11 @@
 void JIT::emit_op_profile_type(const Instruction* currentInstruction)
 {
     auto bytecode = currentInstruction->as<OpProfileType>();
     auto& metadata = bytecode.metadata(m_codeBlock);
     TypeLocation* cachedTypeLocation = metadata.m_typeLocation;
-    int valueToProfile = bytecode.m_targetVirtualRegister.offset();
+    VirtualRegister valueToProfile = bytecode.m_targetVirtualRegister;
 
     // Load payload in T0. Load tag in T3.
     emitLoadPayload(valueToProfile, regT0);
     emitLoadTag(valueToProfile, regT3);
 
@@ -1334,11 +1387,11 @@
     // Increment the current log entry.
     addPtr(TrustedImm32(sizeof(TypeProfilerLog::LogEntry)), regT1);
     store32(regT1, Address(regT2, TypeProfilerLog::currentLogEntryOffset()));
     jumpToEnd.append(branchPtr(NotEqual, regT1, TrustedImmPtr(cachedTypeProfilerLog->logEndPtr())));
     // Clear the log if we're at the end of the log.
-    callOperation(operationProcessTypeProfilerLog);
+    callOperation(operationProcessTypeProfilerLog, &vm());
 
     jumpToEnd.link(this);
 }
 
 void JIT::emit_op_log_shadow_chicken_prologue(const Instruction* currentInstruction)
@@ -1351,11 +1404,11 @@
     GPRReg scratch1Reg = nonArgGPR0; // This must be a non-argument register.
     GPRReg scratch2Reg = regT2;
     ensureShadowChickenPacket(vm(), shadowPacketReg, scratch1Reg, scratch2Reg);
 
     scratch1Reg = regT4;
-    emitLoadPayload(bytecode.m_scope.offset(), regT3);
+    emitLoadPayload(bytecode.m_scope, regT3);
     logShadowChickenProloguePacket(shadowPacketReg, scratch1Reg, regT3);
 }
 
 void JIT::emit_op_log_shadow_chicken_tail(const Instruction* currentInstruction)
 {
@@ -1365,15 +1418,15 @@
     auto bytecode = currentInstruction->as<OpLogShadowChickenTail>();
     GPRReg shadowPacketReg = regT0;
     GPRReg scratch1Reg = nonArgGPR0; // This must be a non-argument register.
     GPRReg scratch2Reg = regT2;
     ensureShadowChickenPacket(vm(), shadowPacketReg, scratch1Reg, scratch2Reg);
-    emitLoadPayload(bytecode.m_thisValue.offset(), regT2);
-    emitLoadTag(bytecode.m_thisValue.offset(), regT1);
+    emitLoadPayload(bytecode.m_thisValue, regT2);
+    emitLoadTag(bytecode.m_thisValue, regT1);
     JSValueRegs thisRegs(regT1, regT2);
-    emitLoadPayload(bytecode.m_scope.offset(), regT3);
-    logShadowChickenTailPacket(shadowPacketReg, thisRegs, regT3, m_codeBlock, CallSiteIndex(currentInstruction));
+    emitLoadPayload(bytecode.m_scope, regT3);
+    logShadowChickenTailPacket(shadowPacketReg, thisRegs, regT3, m_codeBlock, CallSiteIndex(m_bytecodeIndex));
 }
 
 } // namespace JSC
 
 #endif // USE(JSVALUE32_64)
