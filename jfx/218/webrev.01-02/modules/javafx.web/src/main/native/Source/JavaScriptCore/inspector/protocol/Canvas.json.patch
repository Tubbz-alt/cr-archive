diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/protocol/Canvas.json b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/protocol/Canvas.json
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/protocol/Canvas.json
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/protocol/Canvas.json
@@ -1,9 +1,10 @@
 {
     "domain": "Canvas",
-    "availability": ["web"],
     "description": "Canvas domain allows tracking of canvases that have an associated graphics context. Tracks canvases in the DOM and CSS canvases created with -webkit-canvas.",
+    "debuggableTypes": ["page", "web-page"],
+    "targetTypes": ["page"],
     "types": [
         {
             "id": "CanvasId",
             "type": "string",
             "description": "Unique canvas identifier."
@@ -17,28 +18,33 @@
             "id": "ContextType",
             "type": "string",
             "enum": ["canvas-2d", "bitmaprenderer", "webgl", "webgl2", "webgpu"],
             "description": "The type of rendering context backing the canvas element."
         },
+        {
+            "id": "ProgramType",
+            "type": "string",
+            "enum": ["compute", "render"]
+        },
         {
             "id": "ShaderType",
             "type": "string",
-            "enum": ["fragment", "vertex"],
-            "description": "Shader type. WebGL supports vertex and fragment shaders."
+            "enum": ["compute", "fragment", "vertex"]
         },
         {
             "id": "ContextAttributes",
             "type": "object",
             "description": "Drawing surface attributes.",
             "properties": [
-                { "name": "alpha", "type": "boolean", "optional": true },
-                { "name": "depth", "type": "boolean", "optional": true },
-                { "name": "stencil", "type": "boolean", "optional": true },
-                { "name": "antialias", "type": "boolean", "optional": true },
-                { "name": "premultipliedAlpha", "type": "boolean", "optional": true },
-                { "name": "preserveDrawingBuffer", "type": "boolean", "optional": true },
-                { "name": "failIfMajorPerformanceCaveat", "type": "boolean", "optional": true }
+                { "name": "alpha", "type": "boolean", "optional": true, "description": "WebGL, WebGL2, ImageBitmapRenderingContext" },
+                { "name": "depth", "type": "boolean", "optional": true, "description": "WebGL, WebGL2" },
+                { "name": "stencil", "type": "boolean", "optional": true, "description": "WebGL, WebGL2" },
+                { "name": "antialias", "type": "boolean", "optional": true, "description": "WebGL, WebGL2" },
+                { "name": "premultipliedAlpha", "type": "boolean", "optional": true, "description": "WebGL, WebGL2" },
+                { "name": "preserveDrawingBuffer", "type": "boolean", "optional": true, "description": "WebGL, WebGL2" },
+                { "name": "failIfMajorPerformanceCaveat", "type": "boolean", "optional": true, "description": "WebGL, WebGL2" },
+                { "name": "powerPreference", "type": "string", "optional": true, "description": "WebGL, WebGL2, WebGPU" }
             ]
         },
         {
             "id": "Canvas",
             "type": "object",
@@ -50,10 +56,21 @@
                 { "name": "cssCanvasName", "type": "string", "optional": true, "description": "The CSS canvas identifier, for canvases created with <code>document.getCSSCanvasContext</code>." },
                 { "name": "contextAttributes", "$ref": "ContextAttributes", "optional": true, "description": "Context attributes for rendering contexts." },
                 { "name": "memoryCost", "type": "number", "optional": true, "description": "Memory usage of the canvas in bytes." },
                 { "name": "backtrace", "type": "array", "items": { "$ref": "Console.CallFrame" }, "optional": true, "description": "Backtrace that was captured when this canvas context was created." }
             ]
+        },
+        {
+            "id": "ShaderProgram",
+            "type": "object",
+            "description": "Information about a WebGL/WebGL2 shader program or WebGPU shader pipeline.",
+            "properties": [
+                { "name": "programId", "$ref": "ProgramId" },
+                { "name": "programType", "$ref": "ProgramType" },
+                { "name": "canvasId", "$ref": "CanvasId"} ,
+                { "name": "sharesVertexFragmentShader", "type": "boolean", "optional": true, "description": "Indicates whether the vertex and fragment shader modules are the same object for a render shader pipleine for a WebGPU device." }
+            ]
         }
     ],
     "commands": [
         {
             "name": "enable",
@@ -82,22 +99,22 @@
             "returns": [
                 { "name": "content", "type": "string", "description": "Base64-encoded data of the canvas' contents." }
             ]
         },
         {
-            "name": "requestCSSCanvasClientNodes",
-            "description": "Gets all the nodes that are using this canvas via -webkit-canvas.",
+            "name": "requestClientNodes",
+            "description": "Gets all <code>-webkit-canvas</code> nodes or active <code>HTMLCanvasElement</code> for a <code>WebGPUDevice</code>.",
             "parameters": [
                 { "name": "canvasId", "$ref": "CanvasId" }
             ],
             "returns": [
                 { "name": "clientNodeIds", "type": "array", "items": { "$ref": "DOM.NodeId" } }
             ]
         },
         {
-            "name": "resolveCanvasContext",
-            "description": "Resolves JavaScript canvas context object for given canvasId.",
+            "name": "resolveContext",
+            "description": "Resolves JavaScript canvas/device context object for given canvasId.",
             "parameters": [
                 { "name": "canvasId", "$ref": "CanvasId", "description": "Canvas identifier." },
                 { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name that can be used to release multiple objects." }
             ],
             "returns": [
@@ -133,11 +150,11 @@
             "parameters": [
                 { "name": "programId", "$ref": "ProgramId" },
                 { "name": "shaderType", "$ref": "ShaderType" }
             ],
             "returns": [
-                { "name": "content", "type": "string" }
+                { "name": "source", "type": "string" }
             ]
         },
         {
             "name": "updateShader",
             "description": "Compiles and links the shader with identifier and type with the given source code.",
@@ -190,11 +207,11 @@
                 { "name": "canvasId", "$ref": "CanvasId" },
                 { "name": "extension", "type": "string", "description": "Name of the extension that was enabled." }
             ]
         },
         {
-            "name": "cssCanvasClientNodesChanged",
+            "name": "clientNodesChanged",
             "parameters": [
                 { "name": "canvasId", "$ref": "CanvasId", "description": "Identifier of canvas that changed." }
             ]
         },
         {
@@ -220,17 +237,16 @@
             ]
         },
         {
             "name": "programCreated",
             "parameters": [
-                { "name": "canvasId", "$ref": "CanvasId", "description": "Canvas identifier." },
-                { "name": "programId", "$ref": "ProgramId", "description": "Program identifier." }
+                { "name": "shaderProgram", "$ref": "ShaderProgram" }
             ]
         },
         {
             "name": "programDeleted",
             "parameters": [
-                { "name": "programId", "$ref": "ProgramId", "description": "Program identifier." }
+                { "name": "programId", "$ref": "ProgramId" }
             ]
         }
     ]
 }
