diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/BackForwardList.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/BackForwardList.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/BackForwardList.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/BackForwardList.cpp
@@ -24,18 +24,18 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "BackForwardList.h"
 
+#include <WebCore/BackForwardCache.h>
 #include <WebCore/BackForwardController.h>
 #include <WebCore/Frame.h>
 #include <WebCore/FrameLoader.h>
 #include <WebCore/FrameLoaderClient.h>
 #include <WebCore/HistoryItem.h>
 #include <WebCore/Logging.h>
 #include <WebCore/Page.h>
-#include <WebCore/PageCache.h>
 #include <WebCore/SerializedScriptValue.h>
 
 #include "BackForwardList.h"
 #include "WebPage.h"
 #include "PlatformJavaClasses.h"
@@ -371,21 +371,21 @@
     if (m_current != NoCurrentItemIndex) {
         unsigned targetSize = m_current + 1;
         while (m_entries.size() > targetSize) {
             Ref<HistoryItem> item = m_entries.takeLast();
             m_entryHash.remove(item.ptr());
-            PageCache::singleton().remove(item);
+            BackForwardCache::singleton().remove(item);
         }
     }
 
     // Toss the first item if the list is getting too big, as long as we're not using it
     // (or even if we are, if we only want 1 entry).
     if (m_entries.size() == m_capacity && (m_current || m_capacity == 1)) {
         Ref<HistoryItem> item = WTFMove(m_entries[0]);
         m_entries.remove(0);
         m_entryHash.remove(item.ptr());
-        PageCache::singleton().remove(item);
+        BackForwardCache::singleton().remove(item);
         --m_current;
     }
 
     m_entryHash.add(newItem.ptr());
     m_entries.insert(m_current + 1, WTFMove(newItem));
@@ -481,11 +481,11 @@
 void BackForwardList::setCapacity(int size)
 {
     while (size < static_cast<int>(m_entries.size())) {
         Ref<HistoryItem> item = m_entries.takeLast();
         m_entryHash.remove(item.ptr());
-        PageCache::singleton().remove(item);
+        BackForwardCache::singleton().remove(item);
     }
 
     if (!size)
         m_current = NoCurrentItemIndex;
     else if (m_current > m_entries.size() - 1) {
