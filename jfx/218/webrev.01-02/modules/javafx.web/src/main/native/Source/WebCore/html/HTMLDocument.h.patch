diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDocument.h b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDocument.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDocument.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLDocument.h
@@ -27,11 +27,11 @@
 namespace WebCore {
 
 class HTMLDocument : public Document {
     WTF_MAKE_ISO_ALLOCATED(HTMLDocument);
 public:
-    static Ref<HTMLDocument> create(PAL::SessionID, Frame*, const URL&);
+    static Ref<HTMLDocument> create(Frame*, const URL&);
     static Ref<HTMLDocument> createSynthesizedDocument(Frame&, const URL&);
     virtual ~HTMLDocument();
 
     WEBCORE_EXPORT int width();
     WEBCORE_EXPORT int height();
@@ -52,24 +52,24 @@
     void removeWindowNamedItem(const AtomStringImpl&, Element&);
 
     static bool isCaseSensitiveAttribute(const QualifiedName&);
 
 protected:
-    HTMLDocument(PAL::SessionID, Frame*, const URL&, DocumentClassFlags = 0, unsigned constructionFlags = 0);
+    HTMLDocument(Frame*, const URL&, DocumentClassFlags = 0, unsigned constructionFlags = 0);
 
 private:
     bool isFrameSet() const final;
     Ref<DocumentParser> createParser() override;
     Ref<Document> cloneDocumentWithoutChildren() const final;
 
     TreeScopeOrderedMap m_documentNamedItem;
     TreeScopeOrderedMap m_windowNamedItem;
 };
 
-inline Ref<HTMLDocument> HTMLDocument::create(PAL::SessionID sessionID, Frame* frame, const URL& url)
+inline Ref<HTMLDocument> HTMLDocument::create(Frame* frame, const URL& url)
 {
-    return adoptRef(*new HTMLDocument(sessionID, frame, url, HTMLDocumentClass));
+    return adoptRef(*new HTMLDocument(frame, url, HTMLDocumentClass));
 }
 
 } // namespace WebCore
 
 SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::HTMLDocument)
