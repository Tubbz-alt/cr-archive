diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/PutByIdStatus.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/PutByIdStatus.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/PutByIdStatus.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/PutByIdStatus.h
@@ -40,11 +40,11 @@
 class StructureChain;
 class StructureStubInfo;
 
 typedef HashMap<CodeOrigin, StructureStubInfo*, CodeOriginApproximateHash> StubInfoMap;
 
-class PutByIdStatus {
+class PutByIdStatus final {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     enum State {
         // It's uncached so we have no information.
         NoInformation,
@@ -91,11 +91,11 @@
         : m_state(Simple)
     {
         m_variants.append(variant);
     }
 
-    static PutByIdStatus computeFor(CodeBlock*, ICStatusMap&, unsigned bytecodeIndex, UniquedStringImpl* uid, ExitFlag, CallLinkStatus::ExitSiteData);
+    static PutByIdStatus computeFor(CodeBlock*, ICStatusMap&, BytecodeIndex, UniquedStringImpl* uid, ExitFlag, CallLinkStatus::ExitSiteData);
     static PutByIdStatus computeFor(JSGlobalObject*, const StructureSet&, UniquedStringImpl* uid, bool isDirect);
 
     static PutByIdStatus computeFor(CodeBlock* baselineBlock, ICStatusMap& baselineMap, ICStatusContextStack& contextStack, CodeOrigin, UniquedStringImpl* uid);
 
 #if ENABLE(JIT)
@@ -129,11 +129,11 @@
 #if ENABLE(JIT)
     static PutByIdStatus computeForStubInfo(
         const ConcurrentJSLocker&, CodeBlock*, StructureStubInfo*, UniquedStringImpl* uid,
         CallLinkStatus::ExitSiteData);
 #endif
-    static PutByIdStatus computeFromLLInt(CodeBlock*, unsigned bytecodeIndex, UniquedStringImpl* uid);
+    static PutByIdStatus computeFromLLInt(CodeBlock*, BytecodeIndex, UniquedStringImpl* uid);
 
     bool appendVariant(const PutByIdVariant&);
 
     State m_state;
     Vector<PutByIdVariant, 1> m_variants;
