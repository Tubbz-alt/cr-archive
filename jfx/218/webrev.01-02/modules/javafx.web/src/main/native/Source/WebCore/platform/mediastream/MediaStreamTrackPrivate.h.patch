diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamTrackPrivate.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamTrackPrivate.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamTrackPrivate.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamTrackPrivate.h
@@ -45,11 +45,11 @@
 class MediaStreamTrackPrivate final
     : public RefCounted<MediaStreamTrackPrivate>
     , public CanMakeWeakPtr<MediaStreamTrackPrivate, WeakPtrFactoryInitialization::Eager>
     , public RealtimeMediaSource::Observer
 #if !RELEASE_LOG_DISABLED
-    , private LoggerHelper
+    , public LoggerHelper
 #endif
 {
 public:
     class Observer {
     public:
@@ -73,10 +73,12 @@
     virtual ~MediaStreamTrackPrivate();
 
     const String& id() const { return m_id; }
     const String& label() const;
 
+    bool isActive() const { return enabled() && !ended() && !muted(); }
+
     bool ended() const { return m_isEnded; }
 
     enum class HintValue { Empty, Speech, Music, Motion, Detail, Text };
     HintValue contentHint() const { return m_contentHint; }
     void setContentHint(HintValue);
@@ -96,18 +98,21 @@
     void setEnabled(bool);
 
     Ref<MediaStreamTrackPrivate> clone();
 
     RealtimeMediaSource& source() { return m_source.get(); }
-    RealtimeMediaSource::Type type() const;
+    WEBCORE_EXPORT RealtimeMediaSource::Type type() const;
 
     void endTrack();
 
     void addObserver(Observer&);
     void removeObserver(Observer&);
+#if ASSERT_ENABLED
+    bool hasObserver(Observer&) const;
+#endif
 
-    const RealtimeMediaSourceSettings& settings() const;
+    WEBCORE_EXPORT const RealtimeMediaSourceSettings& settings() const;
     const RealtimeMediaSourceCapabilities& capabilities() const;
 
     void applyConstraints(const MediaConstraints&, RealtimeMediaSource::ApplyConstraintsHandler&&);
 
     AudioSourceProvider* audioSourceProvider();
@@ -163,8 +168,16 @@
 #endif
 };
 
 typedef Vector<RefPtr<MediaStreamTrackPrivate>> MediaStreamTrackPrivateVector;
 
+#if ASSERT_ENABLED
+inline bool MediaStreamTrackPrivate::hasObserver(Observer& observer) const
+{
+    auto locker = holdLock(m_observersLock);
+    return m_observers.contains(&observer);
+}
+#endif
+
 } // namespace WebCore
 
 #endif // ENABLE(MEDIA_STREAM)
