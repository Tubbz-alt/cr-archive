diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/MethodOfGettingAValueProfile.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/MethodOfGettingAValueProfile.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/MethodOfGettingAValueProfile.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/MethodOfGettingAValueProfile.cpp
@@ -39,12 +39,12 @@
     CodeBlock* codeBlock, const LazyOperandValueProfileKey& key)
 {
     MethodOfGettingAValueProfile result;
     result.m_kind = LazyOperand;
     result.u.lazyOperand.codeBlock = codeBlock;
-    result.u.lazyOperand.bytecodeOffset = key.bytecodeOffset();
-    result.u.lazyOperand.operand = key.operand().offset();
+    result.u.lazyOperand.bytecodeOffset = key.bytecodeIndex();
+    result.u.lazyOperand.operand = key.operand();
     return result;
 }
 
 void MethodOfGettingAValueProfile::emitReportValue(CCallHelpers& jit, JSValueRegs regs) const
 {
@@ -55,23 +55,29 @@
     case Ready:
         jit.storeValue(regs, u.profile->specFailBucket(0));
         return;
 
     case LazyOperand: {
-        LazyOperandValueProfileKey key(u.lazyOperand.bytecodeOffset, VirtualRegister(u.lazyOperand.operand));
+        LazyOperandValueProfileKey key(u.lazyOperand.bytecodeOffset, u.lazyOperand.operand);
 
         ConcurrentJSLocker locker(u.lazyOperand.codeBlock->m_lock);
         LazyOperandValueProfile* profile =
             u.lazyOperand.codeBlock->lazyOperandValueProfiles(locker).add(locker, key);
         jit.storeValue(regs, profile->specFailBucket(0));
         return;
     }
 
-    case ArithProfileReady: {
-        u.arithProfile->emitObserveResult(jit, regs, DoNotHaveTagRegisters);
+    case UnaryArithProfileReady: {
+        u.unaryArithProfile->emitObserveResult(jit, regs, DoNotHaveTagRegisters);
         return;
-    } }
+    }
+
+    case BinaryArithProfileReady: {
+        u.binaryArithProfile->emitObserveResult(jit, regs, DoNotHaveTagRegisters);
+        return;
+    }
+    }
 
     RELEASE_ASSERT_NOT_REACHED();
 }
 
 void MethodOfGettingAValueProfile::reportValue(JSValue value)
@@ -83,23 +89,29 @@
     case Ready:
         *u.profile->specFailBucket(0) = JSValue::encode(value);
         return;
 
     case LazyOperand: {
-        LazyOperandValueProfileKey key(u.lazyOperand.bytecodeOffset, VirtualRegister(u.lazyOperand.operand));
+        LazyOperandValueProfileKey key(u.lazyOperand.bytecodeOffset, u.lazyOperand.operand);
 
         ConcurrentJSLocker locker(u.lazyOperand.codeBlock->m_lock);
         LazyOperandValueProfile* profile =
             u.lazyOperand.codeBlock->lazyOperandValueProfiles(locker).add(locker, key);
         *profile->specFailBucket(0) = JSValue::encode(value);
         return;
     }
 
-    case ArithProfileReady: {
-        u.arithProfile->observeResult(value);
+    case UnaryArithProfileReady: {
+        u.unaryArithProfile->observeResult(value);
         return;
-    } }
+    }
+
+    case BinaryArithProfileReady: {
+        u.binaryArithProfile->observeResult(value);
+        return;
+    }
+    }
 
     RELEASE_ASSERT_NOT_REACHED();
 }
 
 } // namespace JSC
