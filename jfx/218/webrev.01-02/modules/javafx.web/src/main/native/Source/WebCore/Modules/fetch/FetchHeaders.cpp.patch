diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchHeaders.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchHeaders.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchHeaders.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchHeaders.cpp
@@ -31,10 +31,16 @@
 
 #include "HTTPParsers.h"
 
 namespace WebCore {
 
+// https://fetch.spec.whatwg.org/#concept-headers-remove-privileged-no-cors-request-headers
+static void removePrivilegedNoCORSRequestHeaders(HTTPHeaderMap& headers)
+{
+    headers.remove(HTTPHeaderName::Range);
+}
+
 static ExceptionOr<bool> canWriteHeader(const String& name, const String& value, const String& combinedValue, FetchHeaders::Guard guard)
 {
     if (!isValidHTTPToken(name))
         return Exception { TypeError, makeString("Invalid header name: '", name, "'") };
     if (!isValidHTTPHeaderValue(value))
@@ -60,10 +66,14 @@
     if (canWriteResult.hasException())
         return canWriteResult.releaseException();
     if (!canWriteResult.releaseReturnValue())
         return { };
     headers.set(name, combinedValue);
+
+    if (guard == FetchHeaders::Guard::RequestNoCors)
+        removePrivilegedNoCORSRequestHeaders(headers);
+
     return { };
 }
 
 static ExceptionOr<void> appendToHeaderMap(const HTTPHeaderMap::HTTPHeaderMapConstIterator::KeyValue& header, HTTPHeaderMap& headers, FetchHeaders::Guard guard)
 {
@@ -74,10 +84,14 @@
         return { };
     if (header.keyAsHTTPHeaderName)
         headers.add(header.keyAsHTTPHeaderName.value(), header.value);
     else
         headers.add(header.key, header.value);
+
+    if (guard == FetchHeaders::Guard::RequestNoCors)
+        removePrivilegedNoCORSRequestHeaders(headers);
+
     return { };
 }
 
 // https://fetch.spec.whatwg.org/#concept-headers-fill
 static ExceptionOr<void> fillHeaderMap(HTTPHeaderMap& headers, const FetchHeaders::Init& headersInit, FetchHeaders::Guard guard)
@@ -135,18 +149,29 @@
 ExceptionOr<void> FetchHeaders::append(const String& name, const String& value)
 {
     return appendToHeaderMap(name, value, m_headers, m_guard);
 }
 
+// https://fetch.spec.whatwg.org/#dom-headers-delete
 ExceptionOr<void> FetchHeaders::remove(const String& name)
 {
-    auto canWriteResult = canWriteHeader(name, { }, { }, m_guard);
-    if (canWriteResult.hasException())
-        return canWriteResult.releaseException();
-    if (!canWriteResult.releaseReturnValue())
+    if (!isValidHTTPToken(name))
+        return Exception { TypeError, makeString("Invalid header name: '", name, "'") };
+    if (m_guard == FetchHeaders::Guard::Immutable)
+        return Exception { TypeError, "Headers object's guard is 'immutable'"_s };
+    if (m_guard == FetchHeaders::Guard::Request && isForbiddenHeaderName(name))
+        return { };
+    if (m_guard == FetchHeaders::Guard::RequestNoCors && !isNoCORSSafelistedRequestHeaderName(name) && !isPriviledgedNoCORSRequestHeaderName(name))
         return { };
+    if (m_guard == FetchHeaders::Guard::Response && isForbiddenResponseHeaderName(name))
+        return { };
+
     m_headers.remove(name);
+
+    if (m_guard == FetchHeaders::Guard::RequestNoCors)
+        removePrivilegedNoCORSRequestHeaders(m_headers);
+
     return { };
 }
 
 ExceptionOr<String> FetchHeaders::get(const String& name) const
 {
@@ -168,11 +193,16 @@
     auto canWriteResult = canWriteHeader(name, normalizedValue, normalizedValue, m_guard);
     if (canWriteResult.hasException())
         return canWriteResult.releaseException();
     if (!canWriteResult.releaseReturnValue())
         return { };
+
     m_headers.set(name, normalizedValue);
+
+    if (m_guard == FetchHeaders::Guard::RequestNoCors)
+        removePrivilegedNoCORSRequestHeaders(m_headers);
+
     return { };
 }
 
 void FetchHeaders::filterAndFill(const HTTPHeaderMap& headers, Guard guard)
 {
