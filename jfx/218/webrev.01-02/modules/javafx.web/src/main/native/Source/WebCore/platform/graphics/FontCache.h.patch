diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCache.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCache.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCache.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontCache.h
@@ -84,16 +84,17 @@
         , m_variationSettings(description.variationSettings())
 #endif
     { }
 
     explicit FontDescriptionKey(WTF::HashTableDeletedValueType)
-        : m_size(cHashTableDeletedSize)
+        : m_isDeletedValue(true)
     { }
 
     bool operator==(const FontDescriptionKey& other) const
     {
-        return m_size == other.m_size
+        return m_isDeletedValue == other.m_isDeletedValue
+            && m_size == other.m_size
             && m_fontSelectionRequest == other.m_fontSelectionRequest
             && m_flags == other.m_flags
             && m_locale == other.m_locale
 #if ENABLE(VARIATION_FONTS)
             && m_variationSettings == other.m_variationSettings
@@ -104,11 +105,11 @@
     bool operator!=(const FontDescriptionKey& other) const
     {
         return !(*this == other);
     }
 
-    bool isHashTableDeletedValue() const { return m_size == cHashTableDeletedSize; }
+    bool isHashTableDeletedValue() const { return m_isDeletedValue; }
 
     inline unsigned computeHash() const
     {
         IntegerHasher hasher;
         hasher.add(m_size);
@@ -126,12 +127,11 @@
     }
 
 private:
     static std::array<unsigned, 2> makeFlagsKey(const FontDescription& description)
     {
-        unsigned first = static_cast<unsigned>(description.script()) << 15
-            | static_cast<unsigned>(description.shouldAllowDesignSystemUIFonts()) << 14
+        unsigned first = static_cast<unsigned>(description.script()) << 14
             | static_cast<unsigned>(description.shouldAllowUserInstalledFonts()) << 13
             | static_cast<unsigned>(description.fontStyleAxis() == FontStyleAxis::slnt) << 12
             | static_cast<unsigned>(description.opticalSizing()) << 11
             | static_cast<unsigned>(description.textRenderingMode()) << 9
             | static_cast<unsigned>(description.fontSynthesis()) << 6
@@ -155,13 +155,12 @@
             | static_cast<unsigned>(description.variantDiscretionaryLigatures()) << 2
             | static_cast<unsigned>(description.variantCommonLigatures());
         return {{ first, second }};
     }
 
-    static const unsigned cHashTableDeletedSize = 0xFFFFFFFFU;
-
     // FontCascade::locale() is explicitly not included in this struct.
+    bool m_isDeletedValue { false };
     unsigned m_size { 0 };
     FontSelectionRequest m_fontSelectionRequest;
     std::array<unsigned, 2> m_flags {{ 0, 0 }};
     AtomString m_locale;
     FontFeatureSettings m_featureSettings;
@@ -211,11 +210,11 @@
 
     // This function exists so CSSFontSelector can have a unified notion of preinstalled fonts and @font-face.
     // It comes into play when you create an @font-face which shares a family name as a preinstalled font.
     Vector<FontSelectionCapabilities> getFontSelectionCapabilitiesInFamily(const AtomString&, AllowUserInstalledFonts);
 
-    WEBCORE_EXPORT RefPtr<Font> fontForFamily(const FontDescription&, const AtomString&, const FontFeatureSettings* fontFaceFeatures = nullptr, const FontVariantSettings* fontFaceVariantSettings = nullptr, FontSelectionSpecifiedCapabilities fontFaceCapabilities = { }, bool checkingAlternateName = false);
+    WEBCORE_EXPORT RefPtr<Font> fontForFamily(const FontDescription&, const AtomString&, const FontFeatureSettings* fontFaceFeatures = nullptr, FontSelectionSpecifiedCapabilities fontFaceCapabilities = { }, bool checkingAlternateName = false);
     WEBCORE_EXPORT Ref<Font> lastResortFallbackFont(const FontDescription&);
     WEBCORE_EXPORT Ref<Font> fontForPlatformData(const FontPlatformData&);
     RefPtr<Font> similarFont(const FontDescription&, const AtomString& family);
 
     void addClient(FontSelector&);
@@ -261,17 +260,17 @@
     ~FontCache() = delete;
 
     WEBCORE_EXPORT void purgeInactiveFontDataIfNeeded();
 
     // FIXME: This method should eventually be removed.
-    FontPlatformData* getCachedFontPlatformData(const FontDescription&, const AtomString& family, const FontFeatureSettings* fontFaceFeatures = nullptr, const FontVariantSettings* fontFaceVariantSettings = nullptr, FontSelectionSpecifiedCapabilities fontFaceCapabilities = { }, bool checkingAlternateName = false);
+    FontPlatformData* getCachedFontPlatformData(const FontDescription&, const AtomString& family, const FontFeatureSettings* fontFaceFeatures = nullptr, FontSelectionSpecifiedCapabilities fontFaceCapabilities = { }, bool checkingAlternateName = false);
 
     // These methods are implemented by each platform.
 #if PLATFORM(COCOA)
     FontPlatformData* getCustomFallbackFont(const UInt32, const FontDescription&);
 #endif
-    WEBCORE_EXPORT std::unique_ptr<FontPlatformData> createFontPlatformData(const FontDescription&, const AtomString& family, const FontFeatureSettings* fontFaceFeatures, const FontVariantSettings* fontFaceVariantSettings, FontSelectionSpecifiedCapabilities fontFaceCapabilities);
+    WEBCORE_EXPORT std::unique_ptr<FontPlatformData> createFontPlatformData(const FontDescription&, const AtomString& family, const FontFeatureSettings* fontFaceFeatures, FontSelectionSpecifiedCapabilities fontFaceCapabilities);
 
     static const AtomString& alternateFamilyName(const AtomString&);
     static const AtomString& platformAlternateFamilyName(const AtomString&);
 
     Timer m_purgeTimer;
@@ -288,11 +287,11 @@
     friend class Font;
 };
 
 inline std::unique_ptr<FontPlatformData> FontCache::createFontPlatformDataForTesting(const FontDescription& fontDescription, const AtomString& family)
 {
-    return createFontPlatformData(fontDescription, family, nullptr, nullptr, { });
+    return createFontPlatformData(fontDescription, family, nullptr, { });
 }
 
 #if !PLATFORM(COCOA) && !USE(FREETYPE)
 
 inline void FontCache::platformPurgeInactiveFontData()
