diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/ChromeClientJava.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/ChromeClientJava.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/ChromeClientJava.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/java/WebCoreSupport/ChromeClientJava.cpp
@@ -598,11 +598,11 @@
 KeyboardUIMode ChromeClientJava::keyboardUIMode()
 {
     return KeyboardAccessTabsToLinks;
 }
 
-void ChromeClientJava::mouseDidMoveOverElement(const HitTestResult& htr, unsigned)
+void ChromeClientJava::mouseDidMoveOverElement(const HitTestResult& htr, unsigned, const String& toolTip, TextDirection)
 {
     static Node* mouseOverNode = 0;
     Element* urlElement = htr.URLElement();
     if (urlElement && isDraggableLink(*urlElement)) {
         Node* overNode = htr.innerNode();
@@ -615,23 +615,24 @@
         if (mouseOverNode) {
             setStatusbarText("");
             mouseOverNode = 0;
         }
     }
+    setToolTip(toolTip);
 }
 
-void ChromeClientJava::setToolTip(const String& tooltip, TextDirection)
+void ChromeClientJava::setToolTip(const String& toolTip)
 {
     using namespace ChromeClientJavaInternal;
     JNIEnv* env = WTF::GetJavaEnv();
     initRefs(env);
 
-    JLString tooltipStr(NULL);
-    if (tooltip.length() > 0) {
-        tooltipStr = tooltip.toJavaString(env);
+    JLString toolTipStr(NULL);
+    if (toolTip.length() > 0) {
+        toolTipStr = toolTip.toJavaString(env);
     }
-    env->CallVoidMethod(m_webPage, setTooltipMID, (jstring)tooltipStr);
+    env->CallVoidMethod(m_webPage, setTooltipMID, (jstring)toolTipStr);
     WTF::CheckAndClearException(env);
 }
 
 void ChromeClientJava::print(Frame&)
 {
