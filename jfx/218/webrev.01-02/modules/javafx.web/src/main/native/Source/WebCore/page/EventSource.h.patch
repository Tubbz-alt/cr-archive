diff a/modules/javafx.web/src/main/native/Source/WebCore/page/EventSource.h b/modules/javafx.web/src/main/native/Source/WebCore/page/EventSource.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/EventSource.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/EventSource.h
@@ -32,13 +32,14 @@
 #pragma once
 
 #include "ActiveDOMObject.h"
 #include "EventTarget.h"
 #include "ExceptionOr.h"
-#include <wtf/URL.h>
+#include "SuspendableTimer.h"
 #include "ThreadableLoaderClient.h"
 #include "Timer.h"
+#include <wtf/URL.h>
 #include <wtf/Vector.h>
 
 namespace WebCore {
 
 class MessageEvent;
@@ -76,19 +77,24 @@
     ScriptExecutionContext* scriptExecutionContext() const final { return ActiveDOMObject::scriptExecutionContext(); }
 
     void refEventTarget() final { ref(); }
     void derefEventTarget() final { deref(); }
 
+    void dispatchErrorEvent();
+    void doExplicitLoadCancellation();
+
     // ThreadableLoaderClient
     void didReceiveResponse(unsigned long, const ResourceResponse&) final;
     void didReceiveData(const char*, int) final;
     void didFinishLoading(unsigned long) final;
     void didFail(const ResourceError&) final;
 
+    // ActiveDOMObject
     void stop() final;
     const char* activeDOMObjectName() const final;
-    bool canSuspendForDocumentSuspension() const final;
+    void suspend(ReasonForSuspension) final;
+    void resume() final;
 
     void connect();
     void networkRequestEnded();
     void scheduleInitialConnect();
     void scheduleReconnect();
@@ -105,14 +111,17 @@
     bool m_withCredentials;
     State m_state { CONNECTING };
 
     Ref<TextResourceDecoder> m_decoder;
     RefPtr<ThreadableLoader> m_loader;
-    Timer m_connectTimer;
+    SuspendableTimer m_connectTimer;
     Vector<UChar> m_receiveBuffer;
     bool m_discardTrailingNewline { false };
     bool m_requestInFlight { false };
+    bool m_isSuspendedForBackForwardCache { false };
+    bool m_isDoingExplicitCancellation { false };
+    bool m_shouldReconnectOnResume { false };
 
     AtomString m_eventName;
     Vector<UChar> m_data;
     String m_currentlyParsedEventId;
     String m_lastEventId;
