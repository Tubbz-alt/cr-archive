diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/JSGlobalObjectDebuggerAgent.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/JSGlobalObjectDebuggerAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/JSGlobalObjectDebuggerAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/JSGlobalObjectDebuggerAgent.cpp
@@ -33,14 +33,14 @@
 #include "JSGlobalObjectScriptDebugServer.h"
 #include "ScriptArguments.h"
 #include "ScriptCallStack.h"
 #include "ScriptCallStackFactory.h"
 
-using namespace JSC;
-
 namespace Inspector {
 
+using namespace JSC;
+
 JSGlobalObjectDebuggerAgent::JSGlobalObjectDebuggerAgent(JSAgentContext& context, InspectorConsoleAgent* consoleAgent)
     : InspectorDebuggerAgent(context)
     , m_consoleAgent(consoleAgent)
 {
 }
@@ -52,15 +52,15 @@
     if (executionContextId) {
         errorString = "executionContextId is not supported for JSContexts as there is only one execution context"_s;
         return InjectedScript();
     }
 
-    ExecState* exec = static_cast<JSGlobalObjectScriptDebugServer&>(scriptDebugServer()).globalObject().globalExec();
-    return injectedScriptManager().injectedScriptFor(exec);
+    JSGlobalObject& globalObject = static_cast<JSGlobalObjectScriptDebugServer&>(scriptDebugServer()).globalObject();
+    return injectedScriptManager().injectedScriptFor(&globalObject);
 }
 
-void JSGlobalObjectDebuggerAgent::breakpointActionLog(JSC::ExecState& state, const String& message)
+void JSGlobalObjectDebuggerAgent::breakpointActionLog(JSC::JSGlobalObject* globalObject, const String& message)
 {
-    m_consoleAgent->addMessageToConsole(makeUnique<ConsoleMessage>(MessageSource::JS, MessageType::Log, MessageLevel::Log, message, createScriptCallStack(&state), 0));
+    m_consoleAgent->addMessageToConsole(makeUnique<ConsoleMessage>(MessageSource::JS, MessageType::Log, MessageLevel::Log, message, createScriptCallStack(globalObject), 0));
 }
 
 } // namespace Inspector
