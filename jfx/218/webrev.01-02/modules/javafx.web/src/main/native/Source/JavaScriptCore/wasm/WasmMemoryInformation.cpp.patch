diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmMemoryInformation.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmMemoryInformation.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmMemoryInformation.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmMemoryInformation.cpp
@@ -33,45 +33,23 @@
 #include "WasmMemory.h"
 #include <wtf/NeverDestroyed.h>
 
 namespace JSC { namespace Wasm {
 
-static Vector<GPRReg> getPinnedRegisters(unsigned remainingPinnedRegisters)
-{
-    Vector<GPRReg> registers;
-    jscCallingConvention().m_calleeSaveRegisters.forEach([&] (Reg reg) {
-        if (!reg.isGPR())
-            return;
-        GPRReg gpr = reg.gpr();
-        if (!remainingPinnedRegisters || RegisterSet::stackRegisters().get(reg))
-            return;
-        if (RegisterSet::runtimeTagRegisters().get(reg)) {
-            // Since we don't need to, we currently don't pick from the tag registers to allow
-            // JS->Wasm stubs to freely use these registers.
-            return;
-        }
-        --remainingPinnedRegisters;
-        registers.append(gpr);
-    });
-    return registers;
-}
-
 const PinnedRegisterInfo& PinnedRegisterInfo::get()
 {
     static LazyNeverDestroyed<PinnedRegisterInfo> staticPinnedRegisterInfo;
     static std::once_flag staticPinnedRegisterInfoFlag;
     std::call_once(staticPinnedRegisterInfoFlag, [] () {
         unsigned numberOfPinnedRegisters = 2;
         if (!Context::useFastTLS())
             ++numberOfPinnedRegisters;
-        Vector<GPRReg> pinnedRegs = getPinnedRegisters(numberOfPinnedRegisters);
-
-        GPRReg baseMemoryPointer = pinnedRegs.takeLast();
-        GPRReg sizeRegister = pinnedRegs.takeLast();
+        GPRReg baseMemoryPointer = GPRInfo::regCS3;
+        GPRReg sizeRegister = GPRInfo::regCS4;
         GPRReg wasmContextInstancePointer = InvalidGPRReg;
         if (!Context::useFastTLS())
-            wasmContextInstancePointer = pinnedRegs.takeLast();
+            wasmContextInstancePointer = GPRInfo::regCS0;
 
         staticPinnedRegisterInfo.construct(sizeRegister, baseMemoryPointer, wasmContextInstancePointer);
     });
 
     return staticPinnedRegisterInfo.get();
