diff a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLCompressedTextureS3TC.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLCompressedTextureS3TC.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLCompressedTextureS3TC.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/WebGLCompressedTextureS3TC.cpp
@@ -27,22 +27,27 @@
 
 #if ENABLE(WEBGL)
 
 #include "WebGLCompressedTextureS3TC.h"
 
-#include "Extensions3D.h"
+#include "ExtensionsGL.h"
 #include "WebGLRenderingContextBase.h"
 
 namespace WebCore {
 
 WebGLCompressedTextureS3TC::WebGLCompressedTextureS3TC(WebGLRenderingContextBase& context)
     : WebGLExtension(context)
 {
-    context.addCompressedTextureFormat(Extensions3D::COMPRESSED_RGB_S3TC_DXT1_EXT);
-    context.addCompressedTextureFormat(Extensions3D::COMPRESSED_RGBA_S3TC_DXT1_EXT);
-    context.addCompressedTextureFormat(Extensions3D::COMPRESSED_RGBA_S3TC_DXT3_EXT);
-    context.addCompressedTextureFormat(Extensions3D::COMPRESSED_RGBA_S3TC_DXT5_EXT);
+    auto& extensions = context.graphicsContextGL()->getExtensions();
+    extensions.ensureEnabled("GL_EXT_texture_compression_dxt1");
+    extensions.ensureEnabled("GL_ANGLE_texture_compression_dxt3");
+    extensions.ensureEnabled("GL_ANGLE_texture_compression_dxt5");
+
+    context.addCompressedTextureFormat(ExtensionsGL::COMPRESSED_RGB_S3TC_DXT1_EXT);
+    context.addCompressedTextureFormat(ExtensionsGL::COMPRESSED_RGBA_S3TC_DXT1_EXT);
+    context.addCompressedTextureFormat(ExtensionsGL::COMPRESSED_RGBA_S3TC_DXT3_EXT);
+    context.addCompressedTextureFormat(ExtensionsGL::COMPRESSED_RGBA_S3TC_DXT5_EXT);
 }
 
 WebGLCompressedTextureS3TC::~WebGLCompressedTextureS3TC() = default;
 
 WebGLExtension::ExtensionName WebGLCompressedTextureS3TC::getName() const
@@ -50,13 +55,19 @@
     return WebGLCompressedTextureS3TCName;
 }
 
 bool WebGLCompressedTextureS3TC::supported(WebGLRenderingContextBase& context)
 {
-    auto& extensions = context.graphicsContext3D()->getExtensions();
+    auto& extensions = context.graphicsContextGL()->getExtensions();
+#if USE(ANGLE)
+    return extensions.supports("GL_EXT_texture_compression_dxt1")
+        && extensions.supports("GL_ANGLE_texture_compression_dxt3")
+        && extensions.supports("GL_ANGLE_texture_compression_dxt5");
+#else
     return extensions.supports("GL_EXT_texture_compression_s3tc")
         || extensions.supports("GL_EXT_texture_compression_dxt1");
+#endif
 }
 
 } // namespace WebCore
 
 #endif // ENABLE(WEBGL)
