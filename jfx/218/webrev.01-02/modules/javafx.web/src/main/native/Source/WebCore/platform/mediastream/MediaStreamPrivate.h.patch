diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamPrivate.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamPrivate.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamPrivate.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/mediastream/MediaStreamPrivate.h
@@ -35,31 +35,26 @@
 #define MediaStreamPrivate_h
 
 #if ENABLE(MEDIA_STREAM)
 
 #include "FloatSize.h"
-#include "MediaStreamTrack.h"
 #include "MediaStreamTrackPrivate.h"
 #include <wtf/Function.h>
 #include <wtf/HashMap.h>
-#include <wtf/LoggerHelper.h>
 #include <wtf/MediaTime.h>
-#include <wtf/RefCounted.h>
 #include <wtf/RefPtr.h>
 #include <wtf/UUID.h>
 #include <wtf/Vector.h>
-#include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
 class MediaStream;
 class OrientationNotifier;
 
 class MediaStreamPrivate final
     : public MediaStreamTrackPrivate::Observer
     , public RefCounted<MediaStreamPrivate>
-    , public CanMakeWeakPtr<MediaStreamPrivate>
 #if !RELEASE_LOG_DISABLED
     , private LoggerHelper
 #endif
 {
 public:
@@ -84,11 +79,11 @@
     void addObserver(Observer&);
     void removeObserver(Observer&);
 
     String id() const { return m_id; }
 
-    MediaStreamTrackPrivateVector tracks() const;
+    WEBCORE_EXPORT MediaStreamTrackPrivateVector tracks() const;
     MediaStreamTrackPrivate* activeVideoTrack() { return m_activeVideoTrack; }
 
     bool active() const { return m_isActive; }
     void updateActiveState(NotifyClientOption);
 
@@ -101,13 +96,10 @@
 
     bool hasVideo() const;
     bool hasAudio() const;
     bool muted() const;
 
-    bool hasCaptureVideoSource() const;
-    bool hasCaptureAudioSource() const;
-
     FloatSize intrinsicSize() const;
 
     void monitorOrientation(OrientationNotifier&);
 
 #if !RELEASE_LOG_DISABLED
@@ -126,11 +118,10 @@
     void trackEnabledChanged(MediaStreamTrackPrivate&) override;
 
     void characteristicsChanged();
     void updateActiveVideoTrack();
 
-    void scheduleDeferredTask(Function<void ()>&&);
     void forEachObserver(const WTF::Function<void(Observer&)>&) const;
 
 #if !RELEASE_LOG_DISABLED
     const char* logClassName() const final { return "MediaStreamPrivate"; }
     WTFLogChannel& logChannel() const final;
