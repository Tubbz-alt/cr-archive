diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/MediaKeySession.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/MediaKeySession.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/MediaKeySession.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/encryptedmedia/MediaKeySession.h
@@ -30,30 +30,32 @@
 
 #if ENABLE(ENCRYPTED_MEDIA)
 
 #include "ActiveDOMObject.h"
 #include "CDMInstanceSession.h"
-#include "DOMPromiseProxy.h"
 #include "EventTarget.h"
-#include "GenericEventQueue.h"
-#include "GenericTaskQueue.h"
+#include "IDLTypes.h"
 #include "MediaKeyMessageType.h"
 #include "MediaKeySessionType.h"
 #include "MediaKeyStatus.h"
 #include <wtf/RefCounted.h>
+#include <wtf/UniqueRef.h>
 #include <wtf/Vector.h>
 #include <wtf/WeakPtr.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
 
 class BufferSource;
 class CDM;
+class DeferredPromise;
 class MediaKeyStatusMap;
 class MediaKeys;
 class SharedBuffer;
 
+template<typename IDLType> class DOMPromiseProxy;
+
 class MediaKeySession final : public RefCounted<MediaKeySession>, public EventTargetWithInlineData, public ActiveDOMObject, public CDMInstanceSessionClient {
     WTF_MAKE_ISO_ALLOCATED(MediaKeySession);
 public:
     static Ref<MediaKeySession> create(ScriptExecutionContext&, WeakPtr<MediaKeys>&&, MediaKeySessionType, bool useDistinctiveIdentifier, Ref<CDM>&&, Ref<CDMInstanceSession>&&);
     virtual ~MediaKeySession();
@@ -72,14 +74,17 @@
     void update(const BufferSource&, Ref<DeferredPromise>&&);
     void close(Ref<DeferredPromise>&&);
     void remove(Ref<DeferredPromise>&&);
 
     using ClosedPromise = DOMPromiseProxy<IDLVoid>;
-    ClosedPromise& closed() { return m_closedPromise; }
+    ClosedPromise& closed() { return m_closedPromise.get(); }
 
     const Vector<std::pair<Ref<SharedBuffer>, MediaKeyStatus>>& statuses() const { return m_statuses; }
 
+    // ActiveDOMObject
+    bool hasPendingActivity() const override;
+
 private:
     MediaKeySession(ScriptExecutionContext&, WeakPtr<MediaKeys>&&, MediaKeySessionType, bool useDistinctiveIdentifier, Ref<CDM>&&, Ref<CDMInstanceSession>&&);
     void enqueueMessage(MediaKeyMessageType, const SharedBuffer&);
     void updateExpiration(double);
     void sessionClosed();
@@ -95,29 +100,24 @@
     ScriptExecutionContext* scriptExecutionContext() const override { return ActiveDOMObject::scriptExecutionContext(); }
     void refEventTarget() override { ref(); }
     void derefEventTarget() override { deref(); }
 
     // ActiveDOMObject
-    bool hasPendingActivity() const override;
     const char* activeDOMObjectName() const override;
-    bool canSuspendForDocumentSuspension() const override;
-    void stop() override;
 
     WeakPtr<MediaKeys> m_keys;
     String m_sessionId;
     double m_expiration;
-    ClosedPromise m_closedPromise;
+    UniqueRef<ClosedPromise> m_closedPromise;
     Ref<MediaKeyStatusMap> m_keyStatuses;
     bool m_closed { false };
     bool m_uninitialized { true };
     bool m_callable { false };
     bool m_useDistinctiveIdentifier;
     MediaKeySessionType m_sessionType;
     Ref<CDM> m_implementation;
     Ref<CDMInstanceSession> m_instanceSession;
-    GenericEventQueue m_eventQueue;
-    GenericTaskQueue<Timer> m_taskQueue;
     Vector<Ref<SharedBuffer>> m_recordOfKeyUsage;
     double m_firstDecryptTime { 0 };
     double m_latestDecryptTime { 0 };
     Vector<std::pair<Ref<SharedBuffer>, MediaKeyStatus>> m_statuses;
 };
