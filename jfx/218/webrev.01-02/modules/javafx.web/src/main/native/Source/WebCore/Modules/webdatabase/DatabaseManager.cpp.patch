diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseManager.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseManager.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseManager.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseManager.cpp
@@ -36,10 +36,11 @@
 #include "Logging.h"
 #include "PlatformStrategies.h"
 #include "ScriptController.h"
 #include "SecurityOrigin.h"
 #include "SecurityOriginData.h"
+#include "WindowEventLoop.h"
 #include <wtf/NeverDestroyed.h>
 
 namespace WebCore {
 
 class DatabaseManager::ProposedDatabase {
@@ -190,10 +191,11 @@
     m_proposedDatabases.remove(&database);
 }
 
 ExceptionOr<Ref<Database>> DatabaseManager::openDatabase(Document& document, const String& name, const String& expectedVersion, const String& displayName, unsigned estimatedSize, RefPtr<DatabaseCallback>&& creationCallback)
 {
+    ASSERT(isMainThread());
     ScriptController::initializeThreading();
 
     bool setVersionInNewDatabase = !creationCallback;
     auto openResult = openDatabaseBackend(document, name, expectedVersion, displayName, estimatedSize, setVersionInNewDatabase);
     if (openResult.hasException())
@@ -206,11 +208,11 @@
     InspectorInstrumentation::didOpenDatabase(*database);
 
     if (database->isNew() && creationCallback.get()) {
         LOG(StorageAPI, "Scheduling DatabaseCreationCallbackTask for database %p\n", database.get());
         database->setHasPendingCreationEvent(true);
-        database->m_document->postTask([creationCallback, database] (ScriptExecutionContext&) {
+        database->m_document->eventLoop().queueTask(TaskSource::Networking, [creationCallback, database]() {
             creationCallback->handleEvent(*database);
             database->setHasPendingCreationEvent(false);
         });
     }
 
