diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaStream.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaStream.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaStream.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaStream.cpp
@@ -77,11 +77,10 @@
 }
 
 MediaStream::MediaStream(Document& document, const MediaStreamTrackVector& tracks)
     : ActiveDOMObject(document)
     , m_private(MediaStreamPrivate::create(document.logger(), createTrackPrivateVector(tracks)))
-    , m_mediaSession(PlatformMediaSession::create(*this))
 {
     // This constructor preserves MediaStreamTrack instances and must be used by calls originating
     // from the JavaScript MediaStream constructor.
 
     for (auto& track : tracks) {
@@ -95,22 +94,21 @@
 }
 
 MediaStream::MediaStream(Document& document, Ref<MediaStreamPrivate>&& streamPrivate)
     : ActiveDOMObject(document)
     , m_private(WTFMove(streamPrivate))
-    , m_mediaSession(PlatformMediaSession::create(*this))
 {
     ALWAYS_LOG(LOGIDENTIFIER);
 
-    setIsActive(m_private->active());
-    m_private->addObserver(*this);
-
     for (auto& trackPrivate : m_private->tracks()) {
         auto track = MediaStreamTrack::create(document, *trackPrivate);
         track->addObserver(*this);
         m_trackSet.add(track->id(), WTFMove(track));
     }
+
+    setIsActive(m_private->active());
+    m_private->addObserver(*this);
     suspendIfNeeded();
 }
 
 MediaStream::~MediaStream()
 {
@@ -300,26 +298,21 @@
     }
 
     if (m_isProducingData)
         return;
     m_isProducingData = true;
-
-    m_mediaSession->canProduceAudioChanged();
     m_private->startProducingData();
 }
 
 void MediaStream::stopProducingData()
 {
+    ALWAYS_LOG(LOGIDENTIFIER);
+
     if (!m_isProducingData)
         return;
 
-    ALWAYS_LOG(LOGIDENTIFIER);
-
     m_isProducingData = false;
-
-    m_mediaSession->canProduceAudioChanged();
-
     m_private->stopProducingData();
 }
 
 MediaProducer::MediaStateFlags MediaStream::mediaState() const
 {
@@ -334,13 +327,11 @@
     return state;
 }
 
 void MediaStream::statusDidChange()
 {
-    m_mediaSession->canProduceAudioChanged();
-
-    if (Document* document = this->document()) {
+    if (auto* document = this->document()) {
         if (!m_isActive)
             return;
         document->updateIsPlayingMedia();
     }
 }
@@ -397,87 +388,20 @@
 Document* MediaStream::document() const
 {
     return downcast<Document>(scriptExecutionContext());
 }
 
-PlatformMediaSession::MediaType MediaStream::mediaType() const
-{
-    // We only need to override the type when capturing audio, HTMLMediaElement and/or WebAudio
-    // will do the right thing when a stream is attached to a media element or an audio context.
-    if (m_private->hasAudio() && m_isProducingData && m_private->hasCaptureAudioSource())
-        return PlatformMediaSession::MediaStreamCapturingAudio;
-
-    return PlatformMediaSession::None;
-}
-
-PlatformMediaSession::MediaType MediaStream::presentationType() const
-{
-    return mediaType();
-}
-
-PlatformMediaSession::CharacteristicsFlags MediaStream::characteristics() const
-{
-    PlatformMediaSession::CharacteristicsFlags state = PlatformMediaSession::HasNothing;
-
-    if (!m_isProducingData)
-        return state;
-
-    if (m_private->hasAudio())
-        state |= PlatformMediaSession::HasAudio;
-
-    if (m_private->hasVideo())
-        state |= PlatformMediaSession::HasVideo;
-
-    return state;
-}
-
-void MediaStream::mayResumePlayback(bool)
-{
-    // FIXME: should a media stream pay attention to this directly, or only when attached to a media element?
-}
-
-void MediaStream::suspendPlayback()
-{
-    // FIXME: should a media stream pay attention to this directly, or only when attached to a media element?
-}
-
-String MediaStream::sourceApplicationIdentifier() const
-{
-    Document* document = this->document();
-    if (document && document->frame()) {
-        if (NetworkingContext* networkingContext = document->frame()->loader().networkingContext())
-            return networkingContext->sourceApplicationIdentifier();
-    }
-
-    return emptyString();
-}
-
-bool MediaStream::canProduceAudio() const
-{
-    return !muted() && active() && m_private->hasAudio() && m_isProducingData;
-}
-
-bool MediaStream::processingUserGestureForMedia() const
-{
-    return document() ? document()->processingUserGestureForMedia() : false;
-}
-
 void MediaStream::stop()
 {
     m_isActive = false;
 }
 
 const char* MediaStream::activeDOMObjectName() const
 {
     return "MediaStream";
 }
 
-bool MediaStream::canSuspendForDocumentSuspension() const
-{
-    return !hasPendingActivity();
-}
-
 bool MediaStream::hasPendingActivity() const
 {
     return m_isActive;
 }
 
