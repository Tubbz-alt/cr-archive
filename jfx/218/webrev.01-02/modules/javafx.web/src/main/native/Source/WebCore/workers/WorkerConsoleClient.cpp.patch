diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerConsoleClient.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerConsoleClient.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerConsoleClient.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/WorkerConsoleClient.cpp
@@ -40,52 +40,52 @@
 {
 }
 
 WorkerConsoleClient::~WorkerConsoleClient() = default;
 
-void WorkerConsoleClient::messageWithTypeAndLevel(MessageType type, MessageLevel level, JSC::ExecState* exec, Ref<Inspector::ScriptArguments>&& arguments)
+void WorkerConsoleClient::messageWithTypeAndLevel(MessageType type, MessageLevel level, JSC::JSGlobalObject* exec, Ref<Inspector::ScriptArguments>&& arguments)
 {
     String messageText;
     arguments->getFirstArgumentAsString(messageText);
     auto message = makeUnique<Inspector::ConsoleMessage>(MessageSource::ConsoleAPI, type, level, messageText, WTFMove(arguments), exec);
     m_workerGlobalScope.addConsoleMessage(WTFMove(message));
 }
 
-void WorkerConsoleClient::count(JSC::ExecState* exec, const String& label)
+void WorkerConsoleClient::count(JSC::JSGlobalObject* exec, const String& label)
 {
     InspectorInstrumentation::consoleCount(m_workerGlobalScope, exec, label);
 }
 
-void WorkerConsoleClient::countReset(JSC::ExecState* exec, const String& label)
+void WorkerConsoleClient::countReset(JSC::JSGlobalObject* exec, const String& label)
 {
     InspectorInstrumentation::consoleCountReset(m_workerGlobalScope, exec, label);
 }
 
-void WorkerConsoleClient::time(JSC::ExecState* exec, const String& label)
+void WorkerConsoleClient::time(JSC::JSGlobalObject* exec, const String& label)
 {
     InspectorInstrumentation::startConsoleTiming(m_workerGlobalScope, exec, label);
 }
 
-void WorkerConsoleClient::timeLog(JSC::ExecState* exec, const String& label, Ref<ScriptArguments>&& arguments)
+void WorkerConsoleClient::timeLog(JSC::JSGlobalObject* exec, const String& label, Ref<ScriptArguments>&& arguments)
 {
     InspectorInstrumentation::logConsoleTiming(m_workerGlobalScope, exec, label, WTFMove(arguments));
 }
 
-void WorkerConsoleClient::timeEnd(JSC::ExecState* exec, const String& label)
+void WorkerConsoleClient::timeEnd(JSC::JSGlobalObject* exec, const String& label)
 {
     InspectorInstrumentation::stopConsoleTiming(m_workerGlobalScope, exec, label);
 }
 
 // FIXME: <https://webkit.org/b/153499> Web Inspector: console.profile should use the new Sampling Profiler
-void WorkerConsoleClient::profile(JSC::ExecState*, const String&) { }
-void WorkerConsoleClient::profileEnd(JSC::ExecState*, const String&) { }
+void WorkerConsoleClient::profile(JSC::JSGlobalObject*, const String&) { }
+void WorkerConsoleClient::profileEnd(JSC::JSGlobalObject*, const String&) { }
 
 // FIXME: <https://webkit.org/b/127634> Web Inspector: support debugging web workers
-void WorkerConsoleClient::takeHeapSnapshot(JSC::ExecState*, const String&) { }
-void WorkerConsoleClient::timeStamp(JSC::ExecState*, Ref<ScriptArguments>&&) { }
+void WorkerConsoleClient::takeHeapSnapshot(JSC::JSGlobalObject*, const String&) { }
+void WorkerConsoleClient::timeStamp(JSC::JSGlobalObject*, Ref<ScriptArguments>&&) { }
 
-void WorkerConsoleClient::record(JSC::ExecState*, Ref<ScriptArguments>&&) { }
-void WorkerConsoleClient::recordEnd(JSC::ExecState*, Ref<ScriptArguments>&&) { }
+void WorkerConsoleClient::record(JSC::JSGlobalObject*, Ref<ScriptArguments>&&) { }
+void WorkerConsoleClient::recordEnd(JSC::JSGlobalObject*, Ref<ScriptArguments>&&) { }
 
-void WorkerConsoleClient::screenshot(JSC::ExecState*, Ref<ScriptArguments>&&) { }
+void WorkerConsoleClient::screenshot(JSC::JSGlobalObject*, Ref<ScriptArguments>&&) { }
 
 } // namespace WebCore
