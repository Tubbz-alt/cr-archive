diff a/modules/javafx.web/src/main/native/Source/WebCore/css/FontFaceSet.h b/modules/javafx.web/src/main/native/Source/WebCore/css/FontFaceSet.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/FontFaceSet.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/FontFaceSet.h
@@ -25,19 +25,22 @@
 
 #pragma once
 
 #include "ActiveDOMObject.h"
 #include "CSSFontFaceSet.h"
-#include "DOMPromiseProxy.h"
 #include "EventTarget.h"
-#include "JSDOMPromiseDeferred.h"
+#include "IDLTypes.h"
+#include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
+template<typename IDLType> class DOMPromiseDeferred;
+template<typename IDLType> class DOMPromiseProxyWithResolveCallback;
+
 class DOMException;
 
-class FontFaceSet final : public RefCounted<FontFaceSet>, private CSSFontFaceSetClient, public EventTargetWithInlineData, private  ActiveDOMObject {
+class FontFaceSet final : public RefCounted<FontFaceSet>, private CSSFontFaceSetClient, public EventTargetWithInlineData, public ActiveDOMObject {
     WTF_MAKE_ISO_ALLOCATED(FontFaceSet);
 public:
     static Ref<FontFaceSet> create(Document&, const Vector<RefPtr<FontFace>>& initialFaces);
     static Ref<FontFaceSet> create(Document&, CSSFontFaceSet& backing);
     virtual ~FontFaceSet();
@@ -54,12 +57,12 @@
 
     enum class LoadStatus { Loading, Loaded };
     LoadStatus status() const;
 
     using ReadyPromise = DOMPromiseProxyWithResolveCallback<IDLInterface<FontFaceSet>>;
-    ReadyPromise& ready() { return m_readyPromise; }
-    void didFirstLayout();
+    ReadyPromise& ready() { return m_readyPromise.get(); }
+    void documentDidFinishLoading();
 
     CSSFontFaceSet& backing() { return m_backing; }
 
     class Iterator {
     public:
@@ -86,11 +89,11 @@
     private:
         PendingPromise(LoadPromise&&);
 
     public:
         Vector<Ref<FontFace>> faces;
-        LoadPromise promise;
+        UniqueRef<LoadPromise> promise;
         bool hasReachedTerminalState { false };
     };
 
     FontFaceSet(Document&, const Vector<RefPtr<FontFace>>&);
     FontFaceSet(Document&, CSSFontFaceSet&);
@@ -100,11 +103,10 @@
     void completedLoading() final;
     void faceFinished(CSSFontFace&, CSSFontFace::Status) final;
 
     // ActiveDOMObject
     const char* activeDOMObjectName() const final { return "FontFaceSet"; }
-    bool canSuspendForDocumentSuspension() const final;
 
     // EventTarget
     EventTargetInterface eventTargetInterface() const final { return FontFaceSetEventTargetInterfaceType; }
     ScriptExecutionContext* scriptExecutionContext() const final { return ActiveDOMObject::scriptExecutionContext(); }
     void refEventTarget() final { ref(); }
@@ -113,10 +115,11 @@
     // Callback for ReadyPromise.
     FontFaceSet& readyPromiseResolve();
 
     Ref<CSSFontFaceSet> m_backing;
     HashMap<RefPtr<FontFace>, Vector<Ref<PendingPromise>>> m_pendingPromises;
-    ReadyPromise m_readyPromise;
-    bool m_isFirstLayoutDone { true };
+    UniqueRef<ReadyPromise> m_readyPromise;
+
+    bool m_isDocumentLoaded { true };
 };
 
 }
