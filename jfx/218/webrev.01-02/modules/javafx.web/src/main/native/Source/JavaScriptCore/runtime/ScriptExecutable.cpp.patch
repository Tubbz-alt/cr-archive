diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScriptExecutable.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScriptExecutable.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScriptExecutable.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScriptExecutable.cpp
@@ -194,12 +194,11 @@
 
     if (genericCodeBlock) {
         RELEASE_ASSERT(genericCodeBlock->ownerExecutable() == this);
         RELEASE_ASSERT(JITCode::isExecutableScript(genericCodeBlock->jitType()));
 
-        if (UNLIKELY(Options::verboseOSR()))
-            dataLog("Installing ", *genericCodeBlock, "\n");
+        dataLogLnIf(Options::verboseOSR(), "Installing ", *genericCodeBlock);
 
         if (UNLIKELY(vm.m_perBytecodeProfiler))
             vm.m_perBytecodeProfiler->ensureBytecodesFor(genericCodeBlock);
 
         Debugger* debugger = genericCodeBlock->globalObject()->debugger();
@@ -254,11 +253,10 @@
 
     ASSERT(vm.heap.isDeferred());
     ASSERT(endColumn() != UINT_MAX);
 
     JSGlobalObject* globalObject = scope->globalObject(vm);
-    ExecState* exec = globalObject->globalExec();
 
     if (classInfo(vm) == EvalExecutable::info()) {
         EvalExecutable* executable = jsCast<EvalExecutable*>(this);
         RELEASE_ASSERT(kind == CodeForCall);
         RELEASE_ASSERT(!executable->m_evalCodeBlock);
@@ -266,12 +264,12 @@
         auto codeBlock = EvalCodeBlock::create(vm,
             executable, executable->m_unlinkedEvalCodeBlock.get(), scope);
         EXCEPTION_ASSERT(throwScope.exception() || codeBlock);
         if (!codeBlock) {
             exception = throwException(
-                exec, throwScope,
-                createOutOfMemoryError(exec));
+                globalObject, throwScope,
+                createOutOfMemoryError(globalObject));
             return nullptr;
         }
         return codeBlock;
     }
 
@@ -283,12 +281,12 @@
         auto codeBlock = ProgramCodeBlock::create(vm,
             executable, executable->m_unlinkedProgramCodeBlock.get(), scope);
         EXCEPTION_ASSERT(throwScope.exception() || codeBlock);
         if (!codeBlock) {
             exception = throwException(
-                exec, throwScope,
-                createOutOfMemoryError(exec));
+                globalObject, throwScope,
+                createOutOfMemoryError(globalObject));
             return nullptr;
         }
         return codeBlock;
     }
 
@@ -300,12 +298,12 @@
         auto codeBlock = ModuleProgramCodeBlock::create(vm,
             executable, executable->m_unlinkedModuleProgramCodeBlock.get(), scope);
         EXCEPTION_ASSERT(throwScope.exception() || codeBlock);
         if (!codeBlock) {
             exception = throwException(
-                exec, throwScope,
-                createOutOfMemoryError(exec));
+                globalObject, throwScope,
+                createOutOfMemoryError(globalObject));
             return nullptr;
         }
         return codeBlock;
     }
 
@@ -332,11 +330,11 @@
         executable->m_unlinkedExecutable->features(),
         executable->m_unlinkedExecutable->hasCapturedVariables(),
         lastLine(), endColumn());
     if (!unlinkedCodeBlock) {
         exception = throwException(
-            globalObject->globalExec(), throwScope,
+            globalObject, throwScope,
             error.toErrorObject(globalObject, executable->source()));
         return nullptr;
     }
 
     RELEASE_AND_RETURN(throwScope, FunctionCodeBlock::create(vm, executable, unlinkedCodeBlock, scope));
@@ -411,12 +409,12 @@
 {
     auto throwScope = DECLARE_THROW_SCOPE(vm);
     DeferGCForAWhile deferGC(vm.heap);
 
     if (UNLIKELY(vm.getAndClearFailNextNewCodeBlock())) {
-        auto& state = *scope->globalObject(vm)->globalExec();
-        return throwException(&state, throwScope, createError(&state, "Forced Failure"_s));
+        JSGlobalObject* globalObject = scope->globalObject(vm);
+        return throwException(globalObject, throwScope, createError(globalObject, "Forced Failure"_s));
     }
 
     Exception* exception = nullptr;
     CodeBlock* codeBlock = newCodeBlockFor(kind, function, scope, exception);
     resultCodeBlock = codeBlock;
@@ -444,24 +442,24 @@
     default:
         return this;
     }
 }
 
-JSArray* ScriptExecutable::createTemplateObject(ExecState* exec, JSTemplateObjectDescriptor* descriptor)
+JSArray* ScriptExecutable::createTemplateObject(JSGlobalObject* globalObject, JSTemplateObjectDescriptor* descriptor)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     TemplateObjectMap& templateObjectMap = ensureTemplateObjectMap(vm);
     TemplateObjectMap::AddResult result;
     {
         auto locker = holdLock(cellLock());
         result = templateObjectMap.add(descriptor->endOffset(), WriteBarrier<JSArray>());
     }
     if (JSArray* array = result.iterator->value.get())
         return array;
-    JSArray* templateObject = descriptor->createTemplateObject(exec);
+    JSArray* templateObject = descriptor->createTemplateObject(globalObject);
     RETURN_IF_EXCEPTION(scope, nullptr);
     result.iterator->value.set(vm, this, templateObject);
     return templateObject;
 }
 
