diff a/modules/javafx.web/src/main/native/Source/WebCore/page/FrameViewLayoutContext.h b/modules/javafx.web/src/main/native/Source/WebCore/page/FrameViewLayoutContext.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/FrameViewLayoutContext.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/FrameViewLayoutContext.h
@@ -40,10 +40,16 @@
 class RenderBox;
 class RenderObject;
 class RenderElement;
 class RenderLayoutState;
 class RenderView;
+#if ENABLE(LAYOUT_FORMATTING_CONTEXT)
+namespace Layout {
+class LayoutState;
+class LayoutTreeContent;
+}
+#endif
 
 class FrameViewLayoutContext {
 public:
     FrameViewLayoutContext(FrameView&);
     ~FrameViewLayoutContext();
@@ -103,15 +109,21 @@
     // layoutDelta is used transiently during layout to store how far an object has moved from its
     // last layout location, in order to repaint correctly.
     // If we're doing a full repaint m_layoutState will be 0, but in that case layoutDelta doesn't matter.
     LayoutSize layoutDelta() const;
     void addLayoutDelta(const LayoutSize& delta);
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     bool layoutDeltaMatches(const LayoutSize& delta);
 #endif
     using LayoutStateStack = Vector<std::unique_ptr<RenderLayoutState>>;
 
+#if ENABLE(LAYOUT_FORMATTING_CONTEXT)
+    const Layout::LayoutState* layoutFormattingState() const { return m_layoutState.get(); }
+    Layout::LayoutTreeContent* layoutTreeContent() const { return m_layoutTreeContent.get(); }
+    void invalidateLayoutTreeContent();
+#endif
+
 private:
     friend class LayoutScope;
     friend class LayoutStateMaintainer;
     friend class LayoutStateDisabler;
     friend class SubtreeLayoutStateMaintainer;
@@ -148,10 +160,13 @@
     // that can trigger repaint of a non-child (e.g. when a list item moves its list marker around).
     // Note that even when disabled, LayoutState is still used to store layoutDelta.
     // These functions may only be accessed by LayoutStateMaintainer or LayoutStateDisabler.
     void disablePaintOffsetCache() { m_paintOffsetCacheDisableCount++; }
     void enablePaintOffsetCache() { ASSERT(m_paintOffsetCacheDisableCount > 0); m_paintOffsetCacheDisableCount--; }
+#if ENABLE(LAYOUT_FORMATTING_CONTEXT)
+    void layoutUsingFormattingContext();
+#endif
 
     Frame& frame() const;
     FrameView& view() const;
     RenderView* renderView() const;
     Document* document() const;
@@ -173,8 +188,12 @@
     unsigned m_layoutCount { 0 };
     unsigned m_disableSetNeedsLayoutCount { 0 };
     int m_layoutDisallowedCount { 0 };
     unsigned m_paintOffsetCacheDisableCount { 0 };
     LayoutStateStack m_layoutStateStack;
+#if ENABLE(LAYOUT_FORMATTING_CONTEXT)
+    std::unique_ptr<Layout::LayoutState> m_layoutState;
+    std::unique_ptr<Layout::LayoutTreeContent> m_layoutTreeContent;
+#endif
 };
 
 } // namespace WebCore
