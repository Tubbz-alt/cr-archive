diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/DeferredTriggerInlines.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/DeferredTriggerInlines.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/DeferredTriggerInlines.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/DeferredTriggerInlines.h
@@ -23,32 +23,33 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include "BAssert.h"
 #include "DeferredTrigger.h"
 
 namespace bmalloc {
 
 template<IsoPageTrigger trigger>
 template<typename Config>
-void DeferredTrigger<trigger>::didBecome(IsoPage<Config>& page)
+void DeferredTrigger<trigger>::didBecome(const LockHolder& locker, IsoPage<Config>& page)
 {
     if (page.isInUseForAllocation())
         m_hasBeenDeferred = true;
     else
-        page.directory().didBecome(&page, trigger);
+        page.directory().didBecome(locker, &page, trigger);
 }
 
 template<IsoPageTrigger trigger>
 template<typename Config>
-void DeferredTrigger<trigger>::handleDeferral(IsoPage<Config>& page)
+void DeferredTrigger<trigger>::handleDeferral(const LockHolder& locker, IsoPage<Config>& page)
 {
     RELEASE_BASSERT(!page.isInUseForAllocation());
 
     if (m_hasBeenDeferred) {
-        page.directory().didBecome(&page, trigger);
+        page.directory().didBecome(locker, &page, trigger);
         m_hasBeenDeferred = false;
     }
 }
 
 } // namespace bmalloc
