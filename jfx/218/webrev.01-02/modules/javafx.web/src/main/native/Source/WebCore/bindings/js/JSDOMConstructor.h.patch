diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConstructor.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConstructor.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConstructor.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConstructor.h
@@ -21,11 +21,11 @@
 
 #include "JSDOMConstructorBase.h"
 
 namespace WebCore {
 
-template<typename JSClass> class JSDOMConstructor : public JSDOMConstructorBase {
+template<typename JSClass> class JSDOMConstructor final : public JSDOMConstructorBase {
 public:
     using Base = JSDOMConstructorBase;
 
     static JSDOMConstructor* create(JSC::VM&, JSC::Structure*, JSDOMGlobalObject&);
     static JSC::Structure* createStructure(JSC::VM&, JSC::JSGlobalObject&, JSC::JSValue prototype);
@@ -45,11 +45,11 @@
     static JSC::ConstructType getConstructData(JSC::JSCell*, JSC::ConstructData&);
 
     // Usually defined for each specialization class.
     void initializeProperties(JSC::VM&, JSDOMGlobalObject&) { }
     // Must be defined for each specialization class.
-    static JSC::EncodedJSValue JSC_HOST_CALL construct(JSC::ExecState*);
+    static JSC::EncodedJSValue JSC_HOST_CALL construct(JSC::JSGlobalObject*, JSC::CallFrame*);
 };
 
 template<typename JSClass> inline JSDOMConstructor<JSClass>* JSDOMConstructor<JSClass>::create(JSC::VM& vm, JSC::Structure* structure, JSDOMGlobalObject& globalObject)
 {
     JSDOMConstructor* constructor = new (NotNull, JSC::allocateCell<JSDOMConstructor>(vm.heap)) JSDOMConstructor(structure, globalObject);
