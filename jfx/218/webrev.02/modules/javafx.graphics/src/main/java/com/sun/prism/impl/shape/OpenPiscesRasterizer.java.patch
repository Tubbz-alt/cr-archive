diff a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/shape/OpenPiscesRasterizer.java b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/shape/OpenPiscesRasterizer.java
--- a/modules/javafx.graphics/src/main/java/com/sun/prism/impl/shape/OpenPiscesRasterizer.java
+++ b/modules/javafx.graphics/src/main/java/com/sun/prism/impl/shape/OpenPiscesRasterizer.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2010, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,10 +28,11 @@
 import com.sun.javafx.geom.RectBounds;
 import com.sun.javafx.geom.Path2D;
 import com.sun.javafx.geom.Rectangle;
 import com.sun.javafx.geom.Shape;
 import com.sun.javafx.geom.transform.BaseTransform;
+import com.sun.javafx.util.Logging;
 import com.sun.openpisces.AlphaConsumer;
 import com.sun.openpisces.Renderer;
 import com.sun.prism.BasicStroke;
 import com.sun.prism.impl.PrismSettings;
 import java.nio.ByteBuffer;
@@ -74,39 +75,48 @@
         Rectangle rclip = new Rectangle(xformBounds);
         if (rclip.isEmpty()) {
             return emptyData;
         }
         Renderer renderer = null;
-        if (shape instanceof Path2D) {
-            renderer = OpenPiscesPrismUtils.setupRenderer((Path2D) shape, stroke, xform, rclip,
-                    antialiasedShape);
-        }
-        if (renderer == null) {
-            renderer = OpenPiscesPrismUtils.setupRenderer(shape, stroke, xform, rclip,
-                    antialiasedShape);
-        }
-        int outpix_xmin = renderer.getOutpixMinX();
-        int outpix_ymin = renderer.getOutpixMinY();
-        int outpix_xmax = renderer.getOutpixMaxX();
-        int outpix_ymax = renderer.getOutpixMaxY();
-        int w = outpix_xmax - outpix_xmin;
-        int h = outpix_ymax - outpix_ymin;
-        if (w <= 0 || h <= 0) {
-            return emptyData;
-        }
+        try {
+            if (shape instanceof Path2D) {
+                renderer = OpenPiscesPrismUtils.setupRenderer((Path2D) shape,
+                        stroke, xform, rclip, antialiasedShape);
+            }
+            if (renderer == null) {
+                renderer = OpenPiscesPrismUtils.setupRenderer(shape,
+                        stroke, xform, rclip, antialiasedShape);
+            }
+            int outpix_xmin = renderer.getOutpixMinX();
+            int outpix_ymin = renderer.getOutpixMinY();
+            int outpix_xmax = renderer.getOutpixMaxX();
+            int outpix_ymax = renderer.getOutpixMaxY();
+            int w = outpix_xmax - outpix_xmin;
+            int h = outpix_ymax - outpix_ymin;
+            if (w <= 0 || h <= 0) {
+                return emptyData;
+            }
 
-        Consumer consumer = savedConsumer;
-        if (consumer == null || w * h > consumer.getAlphaLength()) {
-            int csize = (w * h + 0xfff) & (~0xfff);
-            savedConsumer = consumer = new Consumer(csize);
-            if (PrismSettings.verbose) {
+            Consumer consumer = savedConsumer;
+            if (consumer == null || w * h > consumer.getAlphaLength()) {
+                int csize = (w * h + 0xfff) & (~0xfff);
+                savedConsumer = consumer = new Consumer(csize);
+                if (PrismSettings.verbose) {
                 System.out.println("new alphas");
+                }
             }
+            consumer.setBoundsNoClone(outpix_xmin, outpix_ymin, w, h);
+            renderer.produceAlphas(consumer);
+            return consumer.getMaskData();
+        } catch (Throwable ex) {
+            if (PrismSettings.verbose) {
+                ex.printStackTrace();
+            }
+            Logging.getJavaFXLogger().warning("Cannot rasterize Shape: "
+                    + ex.toString());
+            return emptyData;
         }
-        consumer.setBoundsNoClone(outpix_xmin, outpix_ymin, w, h);
-        renderer.produceAlphas(consumer);
-        return consumer.getMaskData();
     }
 
     private static class Consumer implements AlphaConsumer {
         static byte savedAlphaMap[];
         int x, y, width, height;
