diff a/modules/javafx.graphics/src/main/native-glass/mac/GlassWindow.m b/modules/javafx.graphics/src/main/native-glass/mac/GlassWindow.m
--- a/modules/javafx.graphics/src/main/native-glass/mac/GlassWindow.m
+++ b/modules/javafx.graphics/src/main/native-glass/mac/GlassWindow.m
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -1403,18 +1403,34 @@
     GLASS_ASSERT_MAIN_JAVA_THREAD(env);
     GLASS_POOL_ENTER;
     {
         GlassWindow *window = getGlassWindow(env, jPtr);
 
+        NSUInteger styleMask = [window->nsWindow styleMask];
+        BOOL isMiniaturizable = (styleMask & NSMiniaturizableWindowMask) != 0;
+
+        // if the window does not have NSMiniaturizableWindowMask set
+        // we need to temporarily set it to allow the window to
+        // be programmatically minimized or restored.
+        if (!isMiniaturizable) {
+            [window->nsWindow setStyleMask: styleMask | NSMiniaturizableWindowMask];
+        }
+
         if (jMiniaturize == JNI_TRUE)
         {
             [window->nsWindow miniaturize:nil];
         }
         else
         {
             [window->nsWindow deminiaturize:nil];
         }
+
+        // Restore the state of NSMiniaturizableWindowMask
+        if (!isMiniaturizable) {
+            [window->nsWindow setStyleMask: styleMask];
+        }
+
     }
     GLASS_POOL_EXIT;
     GLASS_CHECK_EXCEPTION(env);
 
     return JNI_TRUE; // gnote: remove this return value if unused
