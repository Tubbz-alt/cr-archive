diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/UserMediaRequest.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/UserMediaRequest.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/UserMediaRequest.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/UserMediaRequest.h
@@ -34,26 +34,34 @@
 
 #if ENABLE(MEDIA_STREAM)
 
 #include "ActiveDOMObject.h"
 #include "CaptureDevice.h"
-#include "JSDOMPromiseDeferred.h"
+#include "IDLTypes.h"
 #include "MediaConstraints.h"
 #include "MediaStreamPrivate.h"
 #include "MediaStreamRequest.h"
 #include <wtf/CompletionHandler.h>
+#include <wtf/ObjectIdentifier.h>
+#include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
 class MediaStream;
 class SecurityOrigin;
 
+template<typename IDLType> class DOMPromiseDeferred;
+
+enum UserMediaRequestIdentifierType { };
+using UserMediaRequestIdentifier = ObjectIdentifier<UserMediaRequestIdentifierType>;
+
 class UserMediaRequest : public RefCounted<UserMediaRequest>, public ActiveDOMObject {
 public:
     static Ref<UserMediaRequest> create(Document&, MediaStreamRequest&&, DOMPromiseDeferred<IDLInterface<MediaStream>>&&);
     virtual ~UserMediaRequest();
 
+    UserMediaRequestIdentifier identifier() const { return m_identifier; }
     void start();
 
     WEBCORE_EXPORT void setAllowedMediaDeviceUIDs(const String& audioDeviceUID, const String& videoDeviceUID);
     WEBCORE_EXPORT void allow(CaptureDevice&& audioDevice, CaptureDevice&& videoDevice, String&& deviceIdentifierHashSalt, CompletionHandler<void()>&&);
 
@@ -75,35 +83,20 @@
 private:
     UserMediaRequest(Document&, MediaStreamRequest&&, DOMPromiseDeferred<IDLInterface<MediaStream>>&&);
 
     void stop() final;
     const char* activeDOMObjectName() const final;
-    bool canSuspendForDocumentSuspension() const final;
 
-    void mediaStreamIsReady(Ref<MediaStream>&&);
     void mediaStreamDidFail(RealtimeMediaSource::Type);
 
-    class PendingActivationMediaStream : private MediaStreamPrivate::Observer {
-        WTF_MAKE_FAST_ALLOCATED;
-    public:
-        PendingActivationMediaStream(Ref<PendingActivity<UserMediaRequest>>&&, UserMediaRequest&, Ref<MediaStream>&&, CompletionHandler<void()>&&);
-        ~PendingActivationMediaStream();
-
-    private:
-        void characteristicsChanged() final;
-
-        Ref<PendingActivity<UserMediaRequest>> m_protectingUserMediaRequest;
-        UserMediaRequest& m_userMediaRequest;
-        Ref<MediaStream> m_mediaStream;
-        CompletionHandler<void()> m_completionHandler;
-    };
+    UserMediaRequestIdentifier m_identifier;
 
     Vector<String> m_videoDeviceUIDs;
     Vector<String> m_audioDeviceUIDs;
 
-    DOMPromiseDeferred<IDLInterface<MediaStream>> m_promise;
-    std::unique_ptr<PendingActivationMediaStream> m_pendingActivationMediaStream;
+    UniqueRef<DOMPromiseDeferred<IDLInterface<MediaStream>>> m_promise;
+    CompletionHandler<void()> m_allowCompletionHandler;
     MediaStreamRequest m_request;
 };
 
 } // namespace WebCore
 
