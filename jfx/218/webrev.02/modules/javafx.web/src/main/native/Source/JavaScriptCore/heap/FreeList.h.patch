diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/FreeList.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/FreeList.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/FreeList.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/FreeList.h
@@ -64,12 +64,12 @@
     FreeList(unsigned cellSize);
     ~FreeList();
 
     void clear();
 
-    void initializeList(FreeCell* head, uintptr_t secret, unsigned bytes);
-    void initializeBump(char* payloadEnd, unsigned remaining);
+    JS_EXPORT_PRIVATE void initializeList(FreeCell* head, uintptr_t secret, unsigned bytes);
+    JS_EXPORT_PRIVATE void initializeBump(char* payloadEnd, unsigned remaining);
 
     bool allocationWillFail() const { return !head() && !m_remaining; }
     bool allocationWillSucceed() const { return !allocationWillFail(); }
 
     template<typename Func>
@@ -87,11 +87,11 @@
     static ptrdiff_t offsetOfPayloadEnd() { return OBJECT_OFFSETOF(FreeList, m_payloadEnd); }
     static ptrdiff_t offsetOfRemaining() { return OBJECT_OFFSETOF(FreeList, m_remaining); }
     static ptrdiff_t offsetOfOriginalSize() { return OBJECT_OFFSETOF(FreeList, m_originalSize); }
     static ptrdiff_t offsetOfCellSize() { return OBJECT_OFFSETOF(FreeList, m_cellSize); }
 
-    void dump(PrintStream&) const;
+    JS_EXPORT_PRIVATE void dump(PrintStream&) const;
 
     unsigned cellSize() const { return m_cellSize; }
 
 private:
     FreeCell* head() const { return FreeCell::descramble(m_scrambledHead, m_secret); }
