diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/WTFString.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/WTFString.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/WTFString.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/WTFString.cpp
@@ -30,10 +30,11 @@
 #include <wtf/NeverDestroyed.h>
 #include <wtf/Vector.h>
 #include <wtf/dtoa.h>
 #include <wtf/text/CString.h>
 #include <wtf/text/IntegerToStringConversion.h>
+#include <wtf/text/StringBuilder.h>
 #include <wtf/text/StringToIntegerConversion.h>
 #include <wtf/unicode/CharacterNames.h>
 #include <wtf/unicode/UTF8Conversion.h>
 
 namespace WTF {
@@ -1107,25 +1108,27 @@
 Vector<char> asciiDebug(StringImpl* impl)
 {
     if (!impl)
         return asciiDebug(String("[null]"_s).impl());
 
-    Vector<char> buffer;
+    StringBuilder buffer;
     for (unsigned i = 0; i < impl->length(); ++i) {
         UChar ch = (*impl)[i];
         if (isASCIIPrintable(ch)) {
             if (ch == '\\')
                 buffer.append(ch);
             buffer.append(ch);
         } else {
             buffer.append('\\');
             buffer.append('u');
-            appendUnsignedAsHexFixedSize(ch, buffer, 4);
+            buffer.append(hex(ch, 4));
         }
     }
-    buffer.append('\0');
-    return buffer;
+    CString narrowString = buffer.toString().ascii();
+    Vector<char> result;
+    result.append(reinterpret_cast<const char*>(narrowString.data()), narrowString.length() + 1);
+    return result;
 }
 
 Vector<char> asciiDebug(String& string)
 {
     return asciiDebug(string.impl());
