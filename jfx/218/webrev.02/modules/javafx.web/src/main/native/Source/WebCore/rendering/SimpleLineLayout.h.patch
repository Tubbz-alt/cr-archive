diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayout.h b/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayout.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayout.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/SimpleLineLayout.h
@@ -25,10 +25,11 @@
 
 #pragma once
 
 #include "SimpleLineLayoutCoverage.h"
 #include "TextFlags.h"
+#include <wtf/RefCounted.h>
 #include <wtf/Vector.h>
 #include <wtf/text/WTFString.h>
 
 #if COMPILER(MSVC)
 #pragma warning(push)
@@ -48,23 +49,25 @@
 
 struct Run {
 #if COMPILER(MSVC)
     Run() { }
 #endif
-    Run(unsigned start, unsigned end, float logicalLeft, float logicalRight, bool isEndOfLine, bool hasHyphen)
+    Run(unsigned start, unsigned end, float logicalLeft, float logicalRight, bool isEndOfLine, bool hasHyphen, bool isLineBreak)
         : end(end)
         , start(start)
         , isEndOfLine(isEndOfLine)
         , hasHyphen(hasHyphen)
+        , isLineBreak(isLineBreak)
         , logicalLeft(logicalLeft)
         , logicalRight(logicalRight)
     { }
 
     unsigned end;
-    unsigned start : 30;
+    unsigned start : 29;
     unsigned isEndOfLine : 1;
     unsigned hasHyphen : 1;
+    unsigned isLineBreak : 1;
     float logicalLeft;
     float logicalRight;
     // TODO: Move these optional items out of SimpleLineLayout::Run to a supplementary structure.
     float expansion { 0 };
     ExpansionBehavior expansionBehavior { ForbidLeadingExpansion | ForbidTrailingExpansion };
@@ -73,16 +76,16 @@
 struct SimpleLineStrut {
     unsigned lineBreak;
     float offset;
 };
 
-class Layout {
+class Layout : public RefCounted<Layout> {
     WTF_MAKE_FAST_ALLOCATED;
 public:
     using RunVector = Vector<Run, 10>;
     using SimpleLineStruts = Vector<SimpleLineStrut, 4>;
-    static std::unique_ptr<Layout> create(const RunVector&, unsigned lineCount, const RenderBlockFlow&);
+    static Ref<Layout> create(const RunVector&, unsigned lineCount, const RenderBlockFlow&);
 
     ~Layout();
 
     unsigned lineCount() const { return m_lineCount; }
 
@@ -106,11 +109,11 @@
     const RenderBlockFlow& m_blockFlowRenderer;
     mutable std::unique_ptr<RunResolver> m_runResolver;
     Run m_runs[0];
 };
 
-std::unique_ptr<Layout> create(RenderBlockFlow&);
+Ref<Layout> create(RenderBlockFlow&);
 
 }
 }
 
 #if COMPILER(MSVC)
