diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/StaticPasteboard.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/StaticPasteboard.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/StaticPasteboard.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/StaticPasteboard.h
@@ -30,38 +30,42 @@
 #include <wtf/Vector.h>
 #include <wtf/text/StringHash.h>
 
 namespace WebCore {
 
+class SharedBuffer;
+
 class StaticPasteboard final : public Pasteboard {
 public:
     StaticPasteboard();
+    ~StaticPasteboard();
 
     PasteboardCustomData takeCustomData();
 
     bool isStatic() const final { return true; }
 
     bool hasData() final;
-    Vector<String> typesSafeForBindings(const String&) final { return m_types; }
-    Vector<String> typesForLegacyUnsafeBindings() final { return m_types; }
+    Vector<String> typesSafeForBindings(const String&) final;
+    Vector<String> typesForLegacyUnsafeBindings() final;
     String readOrigin() final { return { }; }
     String readString(const String& type) final;
     String readStringInCustomData(const String& type) final;
 
     void writeString(const String& type, const String& data) final;
+    void writeData(const String& type, Ref<SharedBuffer>&& data);
     void writeStringInCustomData(const String& type, const String& data);
     void clear() final;
     void clear(const String& type) final;
 
-    void read(PasteboardPlainText&) final { }
-    void read(PasteboardWebContentReader&, WebContentReadingPolicy) final { }
+    void read(PasteboardPlainText&, PlainTextURLReadingPolicy = PlainTextURLReadingPolicy::AllowURL, Optional<size_t> = WTF::nullopt) final { }
+    void read(PasteboardWebContentReader&, WebContentReadingPolicy, Optional<size_t> = WTF::nullopt) final { }
 
     void write(const PasteboardURL&) final { }
     void write(const PasteboardImage&) final { }
     void write(const PasteboardWebContent&) final { }
 
-    void writeCustomData(const PasteboardCustomData&) final { }
+    void writeCustomData(const Vector<PasteboardCustomData>&) final { }
 
     Pasteboard::FileContentState fileContentState() final { return FileContentState::NoFileOrImageData; }
     bool canSmartReplace() final { return false; }
 
     void writeMarkup(const String&) final { }
@@ -70,13 +74,11 @@
 #if ENABLE(DRAG_SUPPORT)
     void setDragImage(DragImage, const IntPoint&) final { }
 #endif
 
 private:
-    Vector<String> m_types;
-    HashMap<String, String> m_platformData;
-    HashMap<String, String> m_customData;
+    PasteboardCustomData m_customData;
 };
 
 }
 
 SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::StaticPasteboard)
