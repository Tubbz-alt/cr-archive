diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/HeapKind.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/HeapKind.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/HeapKind.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/HeapKind.h
@@ -68,27 +68,27 @@
 }
 
 BINLINE HeapKind heapKind(Gigacage::Kind kind)
 {
     switch (kind) {
-    case Gigacage::ReservedForFlagsAndNotABasePtr:
-        RELEASE_BASSERT_NOT_REACHED();
     case Gigacage::Primitive:
         return HeapKind::PrimitiveGigacage;
     case Gigacage::JSValue:
         return HeapKind::JSValueGigacage;
+    case Gigacage::NumberOfKinds:
+        break;
     }
     BCRASH();
     return HeapKind::Primary;
 }
 
 BINLINE bool isActiveHeapKindAfterEnsuringGigacage(HeapKind kind)
 {
     switch (kind) {
     case HeapKind::PrimitiveGigacage:
     case HeapKind::JSValueGigacage:
-        if (Gigacage::wasEnabled())
+        if (Gigacage::isEnabled())
             return true;
         return false;
     default:
         return true;
     }
@@ -99,11 +99,11 @@
 BINLINE HeapKind mapToActiveHeapKindAfterEnsuringGigacage(HeapKind kind)
 {
     switch (kind) {
     case HeapKind::PrimitiveGigacage:
     case HeapKind::JSValueGigacage:
-        if (Gigacage::wasEnabled())
+        if (Gigacage::isEnabled())
             return kind;
         return HeapKind::Primary;
     default:
         return kind;
     }
