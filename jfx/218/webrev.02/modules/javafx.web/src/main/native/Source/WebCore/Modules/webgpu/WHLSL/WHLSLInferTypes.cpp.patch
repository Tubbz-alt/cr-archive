diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLInferTypes.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLInferTypes.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLInferTypes.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLInferTypes.cpp
@@ -48,11 +48,11 @@
 {
     if (&unifyThis == &unifyOther)
         return true;
 
     if (is<AST::NamedType>(unifyThis) && is<AST::NamedType>(unifyOther)) {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         auto& namedThis = downcast<AST::NamedType>(unifyThis);
         auto& namedOther = downcast<AST::NamedType>(unifyOther);
         ASSERT(!is<AST::TypeDefinition>(namedThis) && !is<AST::TypeDefinition>(namedOther));
 #endif
         return false;
@@ -125,14 +125,10 @@
     if (is<AST::UnsignedIntegerLiteralType>(resolvableType1) && is<AST::UnsignedIntegerLiteralType>(resolvableType2)) {
         resolvableType1.resolve(downcast<AST::UnsignedIntegerLiteralType>(resolvableType1).preferredType());
         resolvableType2.resolve(downcast<AST::UnsignedIntegerLiteralType>(resolvableType2).preferredType());
         return &downcast<AST::UnsignedIntegerLiteralType>(resolvableType1).preferredType();
     }
-    if (is<AST::NullLiteralType>(resolvableType1) && is<AST::NullLiteralType>(resolvableType2)) {
-        // FIXME: Trying to match nullptr and nullptr fails.
-        return nullptr;
-    }
     return nullptr;
 }
 
 RefPtr<AST::UnnamedType> commit(AST::ResolvableType& resolvableType)
 {
@@ -150,14 +146,10 @@
     if (is<AST::UnsignedIntegerLiteralType>(resolvableType)) {
         auto& unsignedIntegerLiteralType = downcast<AST::UnsignedIntegerLiteralType>(resolvableType);
         resolvableType.resolve(unsignedIntegerLiteralType.preferredType());
         return &unsignedIntegerLiteralType.preferredType();
     }
-    if (is<AST::NullLiteralType>(resolvableType)) {
-        // FIXME: Trying to match nullptr and nullptr fails.
-        return nullptr;
-    }
     return nullptr;
 }
 
 bool inferTypesForTypeArguments(AST::NamedType& possibleType, AST::TypeArguments& typeArguments)
 {
