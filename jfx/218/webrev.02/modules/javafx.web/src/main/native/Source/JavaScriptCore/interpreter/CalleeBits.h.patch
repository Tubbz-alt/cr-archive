diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/CalleeBits.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/CalleeBits.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/CalleeBits.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/CalleeBits.h
@@ -49,20 +49,20 @@
     }
 
 #if ENABLE(WEBASSEMBLY)
     static void* boxWasm(Wasm::Callee* callee)
     {
-        CalleeBits result(reinterpret_cast<void*>(reinterpret_cast<uintptr_t>(callee) | TagBitsWasm));
+        CalleeBits result(reinterpret_cast<void*>(reinterpret_cast<uintptr_t>(callee) | JSValue::WasmTag));
         ASSERT(result.isWasm());
         return result.rawPtr();
     }
 #endif
 
     bool isWasm() const
     {
 #if ENABLE(WEBASSEMBLY)
-        return (reinterpret_cast<uintptr_t>(m_ptr) & TagWasmMask) == TagBitsWasm;
+        return (reinterpret_cast<uintptr_t>(m_ptr) & JSValue::WasmMask) == JSValue::WasmTag;
 #else
         return false;
 #endif
     }
     bool isCell() const { return !isWasm(); }
@@ -75,11 +75,11 @@
 
 #if ENABLE(WEBASSEMBLY)
     Wasm::Callee* asWasmCallee() const
     {
         ASSERT(isWasm());
-        return reinterpret_cast<Wasm::Callee*>(reinterpret_cast<uintptr_t>(m_ptr) & ~TagBitsWasm);
+        return reinterpret_cast<Wasm::Callee*>(reinterpret_cast<uintptr_t>(m_ptr) & ~JSValue::WasmTag);
     }
 #endif
 
     void* rawPtr() const { return m_ptr; }
 
