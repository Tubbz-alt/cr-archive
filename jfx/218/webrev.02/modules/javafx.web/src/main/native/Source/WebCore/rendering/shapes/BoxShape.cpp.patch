diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/BoxShape.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/BoxShape.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/BoxShape.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/shapes/BoxShape.cpp
@@ -75,17 +75,18 @@
         radii.scale(calcBorderRadiiConstraintScaleFor(marginBox, radii));
         return RoundedRect(marginBox, radii);
     }
     case CSSBoxType::PaddingBox:
         return style.getRoundedInnerBorderFor(renderer.borderBoxRect());
+    // fill-box compute to content-box for HTML elements.
+    case CSSBoxType::FillBox:
     case CSSBoxType::ContentBox:
         return style.getRoundedInnerBorderFor(renderer.borderBoxRect(),
             renderer.paddingTop() + renderer.borderTop(), renderer.paddingBottom() + renderer.borderBottom(),
             renderer.paddingLeft() + renderer.borderLeft(), renderer.paddingRight() + renderer.borderRight());
-    // fill, stroke, view-box compute to border-box for HTML elements.
+    // stroke-box, view-box compute to border-box for HTML elements.
     case CSSBoxType::BorderBox:
-    case CSSBoxType::FillBox:
     case CSSBoxType::StrokeBox:
     case CSSBoxType::ViewBox:
     case CSSBoxType::BoxMissing:
         return style.getRoundedBorderFor(renderer.borderBoxRect());
     }
@@ -156,11 +157,11 @@
     return LineSegment(x1, x2);
 }
 
 void BoxShape::buildDisplayPaths(DisplayPaths& paths) const
 {
-    paths.shape.addRoundedRect(m_bounds, Path::PreferBezierRoundedRect);
+    paths.shape.addRoundedRect(m_bounds, Path::RoundedRectStrategy::PreferBezier);
     if (shapeMargin())
-        paths.marginShape.addRoundedRect(shapeMarginBounds(), Path::PreferBezierRoundedRect);
+        paths.marginShape.addRoundedRect(shapeMarginBounds(), Path::RoundedRectStrategy::PreferBezier);
 }
 
 } // namespace WebCore
