diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/PublicKeyCredential.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/PublicKeyCredential.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/PublicKeyCredential.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webauthn/PublicKeyCredential.cpp
@@ -26,55 +26,47 @@
 #include "config.h"
 #include "PublicKeyCredential.h"
 
 #if ENABLE(WEB_AUTHN)
 
-#include "AuthenticatorAssertionResponse.h"
-#include "AuthenticatorAttestationResponse.h"
 #include "AuthenticatorCoordinator.h"
 #include "AuthenticatorResponse.h"
 #include "Document.h"
 #include "JSDOMPromiseDeferred.h"
 #include "Page.h"
-#include "PublicKeyCredentialData.h"
+#include "RuntimeEnabledFeatures.h"
 #include <wtf/text/Base64.h>
 
 namespace WebCore {
 
-RefPtr<PublicKeyCredential> PublicKeyCredential::tryCreate(const PublicKeyCredentialData& data)
+Ref<PublicKeyCredential> PublicKeyCredential::create(Ref<AuthenticatorResponse>&& response)
 {
-    if (!data.rawId || !data.clientDataJSON)
-        return nullptr;
-
-    if (data.isAuthenticatorAttestationResponse) {
-        if (!data.attestationObject)
-            return nullptr;
-
-        return adoptRef(*new PublicKeyCredential(data.rawId.releaseNonNull(), AuthenticatorAttestationResponse::create(data.clientDataJSON.releaseNonNull(), data.attestationObject.releaseNonNull()), { data.appid }));
-    }
-
-    if (!data.authenticatorData || !data.signature)
-        return nullptr;
+    return adoptRef(*new PublicKeyCredential(WTFMove(response)));
+}
 
-    return adoptRef(*new PublicKeyCredential(data.rawId.releaseNonNull(), AuthenticatorAssertionResponse::create(data.clientDataJSON.releaseNonNull(), data.authenticatorData.releaseNonNull(), data.signature.releaseNonNull(), WTFMove(data.userHandle)), { data.appid }));
+ArrayBuffer* PublicKeyCredential::rawId() const
+{
+    return m_response->rawId();
 }
 
-PublicKeyCredential::PublicKeyCredential(Ref<ArrayBuffer>&& id, Ref<AuthenticatorResponse>&& response, AuthenticationExtensionsClientOutputs&& extensions)
-    : BasicCredential(WTF::base64URLEncode(id->data(), id->byteLength()), Type::PublicKey, Discovery::Remote)
-    , m_rawId(WTFMove(id))
-    , m_response(WTFMove(response))
-    , m_extensions(WTFMove(extensions))
+AuthenticationExtensionsClientOutputs PublicKeyCredential::getClientExtensionResults() const
 {
+    return m_response->extensions();
 }
 
-PublicKeyCredential::AuthenticationExtensionsClientOutputs PublicKeyCredential::getClientExtensionResults() const
+PublicKeyCredential::PublicKeyCredential(Ref<AuthenticatorResponse>&& response)
+    : BasicCredential(WTF::base64URLEncode(response->rawId()->data(), response->rawId()->byteLength()), Type::PublicKey, Discovery::Remote)
+    , m_response(WTFMove(response))
 {
-    return m_extensions;
 }
 
 void PublicKeyCredential::isUserVerifyingPlatformAuthenticatorAvailable(Document& document, DOMPromiseDeferred<IDLBoolean>&& promise)
 {
+    if (!RuntimeEnabledFeatures::sharedFeatures().webAuthenticationLocalAuthenticatorEnabled()) {
+        promise.resolve(false);
+        return;
+    }
     document.page()->authenticatorCoordinator().isUserVerifyingPlatformAuthenticatorAvailable(WTFMove(promise));
 }
 
 } // namespace WebCore
 
