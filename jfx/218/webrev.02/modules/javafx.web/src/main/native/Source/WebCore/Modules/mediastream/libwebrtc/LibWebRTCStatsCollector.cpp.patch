diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/libwebrtc/LibWebRTCStatsCollector.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/libwebrtc/LibWebRTCStatsCollector.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/libwebrtc/LibWebRTCStatsCollector.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/libwebrtc/LibWebRTCStatsCollector.cpp
@@ -25,10 +25,11 @@
 #include "config.h"
 #include "LibWebRTCStatsCollector.h"
 
 #if USE(LIBWEBRTC)
 
+#include "JSDOMMapLike.h"
 #include "JSRTCStatsReport.h"
 #include "Performance.h"
 #include <wtf/MainThread.h>
 
 namespace WebCore {
@@ -42,11 +43,11 @@
 {
     if (!m_callback)
         return;
 
     callOnMainThread([callback = WTFMove(m_callback)]() mutable {
-        callback();
+        callback(nullptr);
     });
 }
 
 static inline String fromStdString(const std::string& value)
 {
@@ -92,20 +93,20 @@
 
 static inline void fillInboundRTPStreamStats(RTCStatsReport::InboundRTPStreamStats& stats, const webrtc::RTCInboundRTPStreamStats& rtcStats)
 {
     fillRTCRTPStreamStats(stats, rtcStats);
 
+    // FIXME: Add support for decoder_implementation
     if (rtcStats.packets_received.is_defined())
         stats.packetsReceived = *rtcStats.packets_received;
     if (rtcStats.bytes_received.is_defined())
         stats.bytesReceived = *rtcStats.bytes_received;
     if (rtcStats.packets_lost.is_defined())
         stats.packetsLost = *rtcStats.packets_lost;
     if (rtcStats.jitter.is_defined())
         stats.jitter = *rtcStats.jitter;
-    if (rtcStats.fraction_lost.is_defined())
-        stats.fractionLost = *rtcStats.fraction_lost;
+    // FIXME: Add support back for fractionLost.
     if (rtcStats.packets_discarded.is_defined())
         stats.packetsDiscarded = *rtcStats.packets_discarded;
     if (rtcStats.packets_repaired.is_defined())
         stats.packetsRepaired = *rtcStats.packets_repaired;
     if (rtcStats.burst_packets_lost.is_defined())
@@ -130,10 +131,11 @@
 
 static inline void fillOutboundRTPStreamStats(RTCStatsReport::OutboundRTPStreamStats& stats, const webrtc::RTCOutboundRTPStreamStats& rtcStats)
 {
     fillRTCRTPStreamStats(stats, rtcStats);
 
+    // FIXME: Add support for encoder_implementation
     if (rtcStats.packets_sent.is_defined())
         stats.packetsSent = *rtcStats.packets_sent;
     if (rtcStats.bytes_sent.is_defined())
         stats.bytesSent = *rtcStats.bytes_sent;
     if (rtcStats.target_bitrate.is_defined())
@@ -347,12 +349,10 @@
         stats.clockRate = *rtcStats.clock_rate;
     if (rtcStats.channels.is_defined())
         stats.channels = *rtcStats.channels;
     if (rtcStats.sdp_fmtp_line.is_defined())
         stats.sdpFmtpLine = fromStdString(*rtcStats.sdp_fmtp_line);
-    if (rtcStats.implementation.is_defined())
-        stats.implementation = fromStdString(*rtcStats.implementation);
 }
 
 static inline void fillRTCTransportStats(RTCStatsReport::TransportStats& stats, const webrtc::RTCTransportStats& rtcStats)
 {
     fillRTCStats(stats, rtcStats);
@@ -379,62 +379,64 @@
         stats.dataChannelsOpened = *rtcStats.data_channels_opened;
     if (rtcStats.data_channels_closed.is_defined())
         stats.dataChannelsClosed = *rtcStats.data_channels_closed;
 }
 
-void LibWebRTCStatsCollector::OnStatsDelivered(const rtc::scoped_refptr<const webrtc::RTCStatsReport>& rtcReport)
+static inline void initializeRTCStatsReportBackingMap(DOMMapAdapter& report, const webrtc::RTCStatsReport& rtcReport)
 {
-    callOnMainThread([protectedThis = rtc::scoped_refptr<LibWebRTCStatsCollector>(this), rtcReport] {
-        auto report = protectedThis->m_callback();
-        if (!report)
-            return;
-
-        ASSERT(report->backingMap());
-
-        for (const auto& rtcStats : *rtcReport) {
-            if (rtcStats.type() == webrtc::RTCInboundRTPStreamStats::kType) {
-                RTCStatsReport::InboundRTPStreamStats stats;
-                fillInboundRTPStreamStats(stats, static_cast<const webrtc::RTCInboundRTPStreamStats&>(rtcStats));
-                report->addStats<IDLDictionary<RTCStatsReport::InboundRTPStreamStats>>(WTFMove(stats));
-            } else if (rtcStats.type() == webrtc::RTCOutboundRTPStreamStats::kType) {
-                RTCStatsReport::OutboundRTPStreamStats stats;
-                fillOutboundRTPStreamStats(stats, static_cast<const webrtc::RTCOutboundRTPStreamStats&>(rtcStats));
-                report->addStats<IDLDictionary<RTCStatsReport::OutboundRTPStreamStats>>(WTFMove(stats));
-            } else if (rtcStats.type() == webrtc::RTCMediaStreamTrackStats::kType) {
-                RTCStatsReport::MediaStreamTrackStats stats;
-                fillRTCMediaStreamTrackStats(stats, static_cast<const webrtc::RTCMediaStreamTrackStats&>(rtcStats));
-                report->addStats<IDLDictionary<RTCStatsReport::MediaStreamTrackStats>>(WTFMove(stats));
-            } else if (rtcStats.type() == webrtc::RTCDataChannelStats::kType) {
-                RTCStatsReport::DataChannelStats stats;
-                fillRTCDataChannelStats(stats, static_cast<const webrtc::RTCDataChannelStats&>(rtcStats));
-                report->addStats<IDLDictionary<RTCStatsReport::DataChannelStats>>(WTFMove(stats));
-            } else if (rtcStats.type() == webrtc::RTCIceCandidatePairStats::kType) {
-                RTCStatsReport::IceCandidatePairStats stats;
-                fillRTCIceCandidatePairStats(stats, static_cast<const webrtc::RTCIceCandidatePairStats&>(rtcStats));
-                report->addStats<IDLDictionary<RTCStatsReport::IceCandidatePairStats>>(WTFMove(stats));
-            } else if (rtcStats.type() == webrtc::RTCRemoteIceCandidateStats::kType || rtcStats.type() == webrtc::RTCLocalIceCandidateStats::kType) {
-                RTCStatsReport::IceCandidateStats stats;
-                fillRTCIceCandidateStats(stats, static_cast<const webrtc::RTCIceCandidateStats&>(rtcStats));
-                report->addStats<IDLDictionary<RTCStatsReport::IceCandidateStats>>(WTFMove(stats));
-            } else if (rtcStats.type() == webrtc::RTCCertificateStats::kType) {
-                RTCStatsReport::CertificateStats stats;
-                fillRTCCertificateStats(stats, static_cast<const webrtc::RTCCertificateStats&>(rtcStats));
-                report->addStats<IDLDictionary<RTCStatsReport::CertificateStats>>(WTFMove(stats));
-            } else if (rtcStats.type() == webrtc::RTCCodecStats::kType) {
-                RTCStatsReport::CodecStats stats;
-                fillRTCCodecStats(stats, static_cast<const webrtc::RTCCodecStats&>(rtcStats));
-                report->addStats<IDLDictionary<RTCStatsReport::CodecStats>>(WTFMove(stats));
-            } else if (rtcStats.type() == webrtc::RTCTransportStats::kType) {
-                RTCStatsReport::TransportStats stats;
-                fillRTCTransportStats(stats, static_cast<const webrtc::RTCTransportStats&>(rtcStats));
-                report->addStats<IDLDictionary<RTCStatsReport::TransportStats>>(WTFMove(stats));
-            } else if (rtcStats.type() == webrtc::RTCPeerConnectionStats::kType) {
-                RTCStatsReport::PeerConnectionStats stats;
-                fillRTCPeerConnectionStats(stats, static_cast<const webrtc::RTCPeerConnectionStats&>(rtcStats));
-                report->addStats<IDLDictionary<RTCStatsReport::PeerConnectionStats>>(WTFMove(stats));
-            }
+    for (const auto& rtcStats : rtcReport) {
+        if (rtcStats.type() == webrtc::RTCInboundRTPStreamStats::kType) {
+            RTCStatsReport::InboundRTPStreamStats stats;
+            fillInboundRTPStreamStats(stats, static_cast<const webrtc::RTCInboundRTPStreamStats&>(rtcStats));
+            report.set<IDLDOMString, IDLDictionary<RTCStatsReport::InboundRTPStreamStats>>(stats.id, WTFMove(stats));
+        } else if (rtcStats.type() == webrtc::RTCOutboundRTPStreamStats::kType) {
+            RTCStatsReport::OutboundRTPStreamStats stats;
+            fillOutboundRTPStreamStats(stats, static_cast<const webrtc::RTCOutboundRTPStreamStats&>(rtcStats));
+            report.set<IDLDOMString, IDLDictionary<RTCStatsReport::OutboundRTPStreamStats>>(stats.id, WTFMove(stats));
+        } else if (rtcStats.type() == webrtc::RTCMediaStreamTrackStats::kType) {
+            RTCStatsReport::MediaStreamTrackStats stats;
+            fillRTCMediaStreamTrackStats(stats, static_cast<const webrtc::RTCMediaStreamTrackStats&>(rtcStats));
+            report.set<IDLDOMString, IDLDictionary<RTCStatsReport::MediaStreamTrackStats>>(stats.id, WTFMove(stats));
+        } else if (rtcStats.type() == webrtc::RTCDataChannelStats::kType) {
+            RTCStatsReport::DataChannelStats stats;
+            fillRTCDataChannelStats(stats, static_cast<const webrtc::RTCDataChannelStats&>(rtcStats));
+            report.set<IDLDOMString, IDLDictionary<RTCStatsReport::DataChannelStats>>(stats.id, WTFMove(stats));
+        } else if (rtcStats.type() == webrtc::RTCIceCandidatePairStats::kType) {
+            RTCStatsReport::IceCandidatePairStats stats;
+            fillRTCIceCandidatePairStats(stats, static_cast<const webrtc::RTCIceCandidatePairStats&>(rtcStats));
+            report.set<IDLDOMString, IDLDictionary<RTCStatsReport::IceCandidatePairStats>>(stats.id, WTFMove(stats));
+        } else if (rtcStats.type() == webrtc::RTCRemoteIceCandidateStats::kType || rtcStats.type() == webrtc::RTCLocalIceCandidateStats::kType) {
+            RTCStatsReport::IceCandidateStats stats;
+            fillRTCIceCandidateStats(stats, static_cast<const webrtc::RTCIceCandidateStats&>(rtcStats));
+            report.set<IDLDOMString, IDLDictionary<RTCStatsReport::IceCandidateStats>>(stats.id, WTFMove(stats));
+        } else if (rtcStats.type() == webrtc::RTCCertificateStats::kType) {
+            RTCStatsReport::CertificateStats stats;
+            fillRTCCertificateStats(stats, static_cast<const webrtc::RTCCertificateStats&>(rtcStats));
+            report.set<IDLDOMString, IDLDictionary<RTCStatsReport::CertificateStats>>(stats.id, WTFMove(stats));
+        } else if (rtcStats.type() == webrtc::RTCCodecStats::kType) {
+            RTCStatsReport::CodecStats stats;
+            fillRTCCodecStats(stats, static_cast<const webrtc::RTCCodecStats&>(rtcStats));
+            report.set<IDLDOMString, IDLDictionary<RTCStatsReport::CodecStats>>(stats.id, WTFMove(stats));
+        } else if (rtcStats.type() == webrtc::RTCTransportStats::kType) {
+            RTCStatsReport::TransportStats stats;
+            fillRTCTransportStats(stats, static_cast<const webrtc::RTCTransportStats&>(rtcStats));
+            report.set<IDLDOMString, IDLDictionary<RTCStatsReport::TransportStats>>(stats.id, WTFMove(stats));
+        } else if (rtcStats.type() == webrtc::RTCPeerConnectionStats::kType) {
+            RTCStatsReport::PeerConnectionStats stats;
+            fillRTCPeerConnectionStats(stats, static_cast<const webrtc::RTCPeerConnectionStats&>(rtcStats));
+            report.set<IDLDOMString, IDLDictionary<RTCStatsReport::PeerConnectionStats>>(stats.id, WTFMove(stats));
         }
+    }
+}
+
+void LibWebRTCStatsCollector::OnStatsDelivered(const rtc::scoped_refptr<const webrtc::RTCStatsReport>& rtcReport)
+{
+    callOnMainThread([this, protectedThis = rtc::scoped_refptr<LibWebRTCStatsCollector>(this), rtcReport]() {
+        m_callback(RTCStatsReport::create([rtcReport](auto& mapAdapter) {
+            if (rtcReport)
+                initializeRTCStatsReportBackingMap(mapAdapter, *rtcReport);
+        }));
     });
 }
 
 }; // namespace WTF
 
