diff a/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLOperatorDictionary.cpp b/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLOperatorDictionary.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLOperatorDictionary.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/mathml/MathMLOperatorDictionary.cpp
@@ -53,13 +53,14 @@
     return property;
 }
 
 // This table has been automatically generated from the Operator Dictionary of the MathML3 specification (appendix C).
 // Some people use the binary operator "U+2225 PARALLEL TO" as an opening and closing delimiter, so we add the corresponding stretchy prefix and postfix forms.
-static const unsigned dictionarySize = 1043;
+static const unsigned dictionarySize = 1061;
 static const Entry dictionary[dictionarySize] = {
     { 0x21, Postfix, 1, 0, 0}, // EXCLAMATION MARK
+    { 0x22, Postfix, 1, 0, Accent}, // QUOTATION MARK
     { 0x25, Infix, 3, 3, 0}, // PERCENT SIGN
     { 0x26, Postfix, 0, 0, 0}, // AMPERSAND
     { 0x27, Postfix, 0, 0, Accent}, // APOSTROPHE
     { 0x28, Prefix, 0, 0, Symmetric | Fence | Stretchy}, // LEFT PARENTHESIS
     { 0x29, Postfix, 0, 0, Symmetric | Fence | Stretchy}, // RIGHT PARENTHESIS
@@ -91,18 +92,23 @@
     { 0x7C, Prefix, 0, 0, Symmetric | Fence | Stretchy}, // VERTICAL LINE
     { 0x7C, Postfix, 0, 0, Symmetric | Fence | Stretchy}, // VERTICAL LINE
     { 0x7D, Postfix, 0, 0, Symmetric | Fence | Stretchy}, // RIGHT CURLY BRACKET
     { 0x7E, Postfix, 0, 0, Accent | Stretchy}, // TILDE
     { 0xA8, Postfix, 0, 0, Accent}, // DIAERESIS
+    { 0xAA, Postfix, 0, 0, Accent}, // FEMININE ORDINAL INDICATOR
     { 0xAC, Prefix, 2, 1, 0}, // NOT SIGN
     { 0xAF, Postfix, 0, 0, Accent | Stretchy}, // MACRON
     { 0xB0, Postfix, 0, 0, 0}, // DEGREE SIGN
     { 0xB1, Infix, 4, 4, 0}, // PLUS-MINUS SIGN
     { 0xB1, Prefix, 0, 1, 0}, // PLUS-MINUS SIGN
+    { 0xB2, Postfix, 0, 0, Accent}, // SUPERSCRIPT TWO
+    { 0xB3, Postfix, 0, 0, Accent}, // SUPERSCRIPT THREE
     { 0xB4, Postfix, 0, 0, Accent}, // ACUTE ACCENT
     { 0xB7, Infix, 4, 4, 0}, // MIDDLE DOT
     { 0xB8, Postfix, 0, 0, Accent}, // CEDILLA
+    { 0xB9, Postfix, 0, 0, Accent}, // SUPERSCRIPT ONE
+    { 0xBA, Postfix, 0, 0, Accent}, // MASCULINE ORDINAL INDICATOR
     { 0xD7, Infix, 4, 4, 0}, // MULTIPLICATION SIGN
     { 0xF7, Infix, 4, 4, 0}, // DIVISION SIGN
     { 0x2C6, Postfix, 0, 0, Accent | Stretchy}, // MODIFIER LETTER CIRCUMFLEX ACCENT
     { 0x2C7, Postfix, 0, 0, Accent | Stretchy}, // CARON
     { 0x2C9, Postfix, 0, 0, Accent | Stretchy}, // MODIFIER LETTER MACRON
@@ -120,17 +126,27 @@
     { 0x3F6, Infix, 5, 5, 0}, // GREEK REVERSED LUNATE EPSILON SYMBOL
     { 0x2016, Prefix, 0, 0, Fence | Stretchy}, // DOUBLE VERTICAL LINE
     { 0x2016, Postfix, 0, 0, Fence | Stretchy}, // DOUBLE VERTICAL LINE
     { 0x2018, Prefix, 0, 0, Fence}, // LEFT SINGLE QUOTATION MARK
     { 0x2019, Postfix, 0, 0, Fence}, // RIGHT SINGLE QUOTATION MARK
+    { 0x201A, Postfix, 0, 0, Accent}, // SINGLE LOW-9 QUOTATION MARK
+    { 0x201B, Postfix, 0, 0, Accent}, // SINGLE HIGH-REVERSED-9 QUOTATION MARK
     { 0x201C, Prefix, 0, 0, Fence}, // LEFT DOUBLE QUOTATION MARK
     { 0x201D, Postfix, 0, 0, Fence}, // RIGHT DOUBLE QUOTATION MARK
+    { 0x201E, Postfix, 0, 0, Accent}, // DOUBLE HIGH-REVERSED-9 QUOTATION MARK
+    { 0x201F, Postfix, 0, 0, Accent}, // DOUBLE LOW-9 QUOTATION MARK
     { 0x2022, Infix, 4, 4, 0}, // BULLET
     { 0x2026, Infix, 0, 0, 0}, // HORIZONTAL ELLIPSIS
-    { 0x2032, Postfix, 0, 2, 0}, // PRIME
+    { 0x2032, Postfix, 0, 0, 0}, // PRIME
+    { 0x2033, Postfix, 0, 0, Accent}, // DOUBLE PRIME
+    { 0x2034, Postfix, 0, 0, Accent}, // TRIPLE PRIME
+    { 0x2035, Postfix, 0, 0, Accent}, // REVERSED PRIME
+    { 0x2036, Postfix, 0, 0, Accent}, // REVERSED DOUBLE PRIME
+    { 0x2037, Postfix, 0, 0, Accent}, // REVERSED TRIPLE PRIME
     { 0x203E, Postfix, 0, 0, Accent | Stretchy}, // OVERLINE
     { 0x2044, Infix, 4, 4, Stretchy}, // FRACTION SLASH
+    { 0x2057, Postfix, 0, 0, Accent}, // QUADRUPLE PRIME
     { 0x2061, Infix, 0, 0, 0}, // FUNCTION APPLICATION
     { 0x2062, Infix, 0, 0, 0}, // INVISIBLE TIMES
     { 0x2063, Infix, 0, 0, Separator}, // INVISIBLE SEPARATOR
     { 0x2064, Infix, 0, 0, 0}, // INVISIBLE PLUS
     { 0x20DB, Postfix, 0, 0, Accent}, // COMBINING THREE DOTS ABOVE
@@ -508,10 +524,12 @@
     { 0x22FF, Infix, 5, 5, 0}, // Z NOTATION BAG MEMBERSHIP
     { 0x2308, Prefix, 0, 0, Symmetric | Fence | Stretchy}, // LEFT CEILING
     { 0x2309, Postfix, 0, 0, Symmetric | Fence | Stretchy}, // RIGHT CEILING
     { 0x230A, Prefix, 0, 0, Symmetric | Fence | Stretchy}, // LEFT FLOOR
     { 0x230B, Postfix, 0, 0, Symmetric | Fence | Stretchy}, // RIGHT FLOOR
+    { 0x2329, Prefix, 0, 0, Symmetric | Fence | Stretchy}, // LEFT-POINTING ANGLE BRACKET
+    { 0x232A, Postfix, 0, 0, Symmetric | Fence | Stretchy}, // RIGHT-POINTING ANGLE BRACKET
     { 0x23B4, Postfix, 0, 0, Accent | Stretchy}, // TOP SQUARE BRACKET
     { 0x23B5, Postfix, 0, 0, Accent | Stretchy}, // BOTTOM SQUARE BRACKET
     { 0x23DC, Postfix, 0, 0, Accent | Stretchy}, // TOP PARENTHESIS
     { 0x23DD, Postfix, 0, 0, Accent | Stretchy}, // BOTTOM PARENTHESIS
     { 0x23DE, Postfix, 0, 0, Accent | Stretchy}, // TOP CURLY BRACKET
@@ -1096,12 +1114,12 @@
     { 0x2AFD, Infix, 4, 4, 0}, // DOUBLE SOLIDUS OPERATOR
     { 0x2AFE, Infix, 3, 3, 0}, // WHITE VERTICAL BAR
     { 0x2AFF, Prefix, 1, 2, Symmetric | LargeOp | MovableLimits}, // N-ARY WHITE VERTICAL BAR
     { 0x2B45, Infix, 5, 5, Stretchy}, // LEFTWARDS QUADRUPLE ARROW
     { 0x2B46, Infix, 5, 5, Stretchy}, // RIGHTWARDS QUADRUPLE ARROW
-    { 0x1EEF0, Prefix, 0, 0, Stretchy }, // ARABIC MATHEMATICAL OPERATOR MEEM WITH HAH WITH TATWEEL
-    { 0x1EEF1, Prefix, 0, 0, Stretchy } // ARABIC MATHEMATICAL OPERATOR HAH WITH DAL
+    { 0x1EEF0, Prefix, 0, 0, Stretchy}, // ARABIC MATHEMATICAL OPERATOR MEEM WITH HAH WITH TATWEEL
+    { 0x1EEF1, Prefix, 0, 0, Stretchy} // ARABIC MATHEMATICAL OPERATOR HAH WITH DAL
 };
 
 // A list of operators that stretch in the horizontal direction. This has been generated from Mozilla's MathML operator dictionary.
 static inline UChar32 ExtractKeyHorizontal(const UChar32* entry) { return *entry; }
 static const UChar32 horizontalOperators[] = {
