diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/WindowProxy.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/WindowProxy.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/WindowProxy.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/WindowProxy.h
@@ -18,23 +18,24 @@
  *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
 #pragma once
 
-#include "DOMWrapperWorld.h"
 #include <JavaScriptCore/Strong.h>
 #include <wtf/HashMap.h>
 #include <wtf/RefCounted.h>
+#include <wtf/UniqueRef.h>
 
 namespace JSC {
 class Debugger;
 }
 
 namespace WebCore {
 
 class AbstractDOMWindow;
 class AbstractFrame;
+class DOMWrapperWorld;
 class JSDOMGlobalObject;
 class JSWindowProxy;
 
 class WindowProxy : public RefCounted<WindowProxy> {
     WTF_MAKE_FAST_ALLOCATED;
@@ -51,15 +52,15 @@
     AbstractFrame* frame() const { return m_frame; }
     void detachFromFrame();
 
     void destroyJSWindowProxy(DOMWrapperWorld&);
 
-    ProxyMap::ValuesConstIteratorRange jsWindowProxies() const { return m_jsWindowProxies.values(); }
+    ProxyMap::ValuesConstIteratorRange jsWindowProxies() const;
     Vector<JSC::Strong<JSWindowProxy>> jsWindowProxiesAsVector() const;
 
-    ProxyMap releaseJSWindowProxies() { return std::exchange(m_jsWindowProxies, ProxyMap()); }
-    void setJSWindowProxies(ProxyMap&& windowProxies) { m_jsWindowProxies = WTFMove(windowProxies); }
+    WEBCORE_EXPORT ProxyMap releaseJSWindowProxies();
+    WEBCORE_EXPORT void setJSWindowProxies(ProxyMap&&);
 
     JSWindowProxy* jsWindowProxy(DOMWrapperWorld& world)
     {
         if (!m_frame)
             return nullptr;
@@ -70,17 +71,17 @@
         return &createJSWindowProxyWithInitializedScript(world);
     }
 
     JSWindowProxy* existingJSWindowProxy(DOMWrapperWorld& world) const
     {
-        auto it = m_jsWindowProxies.find(&world);
-        return (it != m_jsWindowProxies.end()) ? it->value.get() : nullptr;
+        auto it = m_jsWindowProxies->find(&world);
+        return (it != m_jsWindowProxies->end()) ? it->value.get() : nullptr;
     }
 
     WEBCORE_EXPORT JSDOMGlobalObject* globalObject(DOMWrapperWorld&);
 
-    void clearJSWindowProxiesNotMatchingDOMWindow(AbstractDOMWindow*, bool goingIntoPageCache);
+    void clearJSWindowProxiesNotMatchingDOMWindow(AbstractDOMWindow*, bool goingIntoBackForwardCache);
 
     WEBCORE_EXPORT void setDOMWindow(AbstractDOMWindow*);
 
     // Debugger can be nullptr to detach any existing Debugger.
     void attachDebugger(JSC::Debugger*); // Attaches/detaches in all worlds/window proxies.
@@ -92,9 +93,9 @@
 
     JSWindowProxy& createJSWindowProxy(DOMWrapperWorld&);
     WEBCORE_EXPORT JSWindowProxy& createJSWindowProxyWithInitializedScript(DOMWrapperWorld&);
 
     AbstractFrame* m_frame;
-    ProxyMap m_jsWindowProxies;
+    UniqueRef<ProxyMap> m_jsWindowProxies;
 };
 
 } // namespace WebCore
