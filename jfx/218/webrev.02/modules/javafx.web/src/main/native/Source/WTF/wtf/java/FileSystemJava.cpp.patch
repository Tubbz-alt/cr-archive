diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/java/FileSystemJava.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/java/FileSystemJava.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/java/FileSystemJava.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/java/FileSystemJava.cpp
@@ -289,13 +289,14 @@
 int writeToFile(PlatformFileHandle, const char*, int)
 {
     return -1;
 }
 
-bool truncateFile(PlatformFileHandle handle, long long offset)
+bool truncateFile(PlatformFileHandle, long long offset)
 {
     // FIXME: openjfx2.26 implement truncateFile
+    UNUSED_PARAM(offset);
     fprintf(stderr, "FileSystemJava::truncateFile notImplemented\n");
     return false;
 }
 
 String pathGetFileName(const String& path)
@@ -344,25 +345,26 @@
 Optional<int32_t> getFileDeviceId(const CString&)
 {
     return {};
 }
 
-MappedFileData::MappedFileData(const String& filePath, MappedFileMode mode, bool& success)
+MappedFileData::MappedFileData(const String&, MappedFileMode, bool& success)
 {
     fprintf(stderr, "MappedFileData::MappedFileData(const String&, MappedFileMode, bool&) notImplemented() \n");
     success = false;
 }
 
-bool MappedFileData::mapFileHandle(PlatformFileHandle handle, MappedFileMode)
+bool MappedFileData::mapFileHandle(PlatformFileHandle, MappedFileMode)
 {
     fprintf(stderr, "MappedFileData::mapFileHandle(PlatformFileHandle handle, MappedFileMode) notImplemented()\n");
     return false;
 }
 
 bool unmapViewOfFile(void* , size_t)
 {
     fprintf(stderr, "unmapViewOfFile(void* , size_t) notImplemented()\n");
     return false;
 }
+
 } // namespace FileSystemImpl
 
 } // namespace WTF
