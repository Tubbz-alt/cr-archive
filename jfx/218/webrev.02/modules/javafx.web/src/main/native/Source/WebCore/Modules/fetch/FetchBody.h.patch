diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBody.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBody.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBody.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchBody.h
@@ -30,43 +30,43 @@
 
 #include "DOMFormData.h"
 #include "ExceptionOr.h"
 #include "FetchBodyConsumer.h"
 #include "FormData.h"
-#include "JSDOMPromiseDeferred.h"
 #include "ReadableStream.h"
 #include "URLSearchParams.h"
 #include <wtf/Variant.h>
 
 namespace WebCore {
 
+class DeferredPromise;
 class FetchBodyOwner;
 class FetchBodySource;
 class ScriptExecutionContext;
 
 class FetchBody {
 public:
     void arrayBuffer(FetchBodyOwner&, Ref<DeferredPromise>&&);
     void blob(FetchBodyOwner&, Ref<DeferredPromise>&&, const String&);
     void json(FetchBodyOwner&, Ref<DeferredPromise>&&);
     void text(FetchBodyOwner&, Ref<DeferredPromise>&&);
-    void formData(FetchBodyOwner&, Ref<DeferredPromise>&& promise) { promise.get().reject(NotSupportedError); }
+    void formData(FetchBodyOwner&, Ref<DeferredPromise>&&);
 
 #if ENABLE(STREAMS_API)
     void consumeAsStream(FetchBodyOwner&, FetchBodySource&);
 #endif
 
     using Init = Variant<RefPtr<Blob>, RefPtr<ArrayBufferView>, RefPtr<ArrayBuffer>, RefPtr<DOMFormData>, RefPtr<URLSearchParams>, RefPtr<ReadableStream>, String>;
     static ExceptionOr<FetchBody> extract(Init&&, String&);
     FetchBody() = default;
 
-    WEBCORE_EXPORT static Optional<FetchBody> fromFormData(PAL::SessionID, FormData&);
+    WEBCORE_EXPORT static Optional<FetchBody> fromFormData(FormData&);
 
     void loadingFailed(const Exception&);
     void loadingSucceeded();
 
-    RefPtr<FormData> bodyAsFormData(ScriptExecutionContext&) const;
+    RefPtr<FormData> bodyAsFormData() const;
 
     using TakenData = Variant<std::nullptr_t, Ref<FormData>, Ref<SharedBuffer>>;
     TakenData take();
 
     void setAsFormData(Ref<FormData>&& data) { m_data = WTFMove(data); }
