diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.h
@@ -20,10 +20,11 @@
 
 #pragma once
 
 #include <mutex>
 #include <wtf/Assertions.h>
+#include <wtf/ForbidHeapAllocation.h>
 #include <wtf/Lock.h>
 #include <wtf/Noncopyable.h>
 #include <wtf/RefPtr.h>
 #include <wtf/Threading.h>
 #include <wtf/text/AtomStringTable.h>
@@ -47,12 +48,14 @@
 // reacquire the right number of locks at the end. You can do this
 // by constructing a locally scoped JSLock::DropAllLocks object. The
 // DropAllLocks object takes care to release the JSLock only if your
 // thread acquired it to begin with.
 
-class ExecState;
+class CallFrame;
 class VM;
+class JSGlobalObject;
+class JSLock;
 
 // This class is used to protect the initialization of the legacy single
 // shared VM.
 class GlobalJSLock {
     WTF_MAKE_NONCOPYABLE(GlobalJSLock);
@@ -65,11 +68,11 @@
 
 class JSLockHolder {
 public:
     JS_EXPORT_PRIVATE JSLockHolder(VM*);
     JS_EXPORT_PRIVATE JSLockHolder(VM&);
-    JS_EXPORT_PRIVATE JSLockHolder(ExecState*);
+    JS_EXPORT_PRIVATE JSLockHolder(JSGlobalObject*);
 
     JS_EXPORT_PRIVATE ~JSLockHolder();
 
 private:
     RefPtr<VM> m_vm;
@@ -82,12 +85,12 @@
     JS_EXPORT_PRIVATE ~JSLock();
 
     JS_EXPORT_PRIVATE void lock();
     JS_EXPORT_PRIVATE void unlock();
 
-    static void lock(ExecState*);
-    static void unlock(ExecState*);
+    static void lock(JSGlobalObject*);
+    static void unlock(JSGlobalObject*);
     static void lock(VM&);
     static void unlock(VM&);
 
     VM* vm() { return m_vm; }
 
@@ -102,11 +105,11 @@
     void willDestroyVM(VM*);
 
     class DropAllLocks {
         WTF_MAKE_NONCOPYABLE(DropAllLocks);
     public:
-        JS_EXPORT_PRIVATE DropAllLocks(ExecState*);
+        JS_EXPORT_PRIVATE DropAllLocks(JSGlobalObject*);
         JS_EXPORT_PRIVATE DropAllLocks(VM*);
         JS_EXPORT_PRIVATE DropAllLocks(VM&);
         JS_EXPORT_PRIVATE ~DropAllLocks();
 
         void setDropDepth(unsigned depth) { m_dropDepth = depth; }
