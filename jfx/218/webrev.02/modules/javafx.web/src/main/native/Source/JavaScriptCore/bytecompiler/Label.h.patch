diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecompiler/Label.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecompiler/Label.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecompiler/Label.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecompiler/Label.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2008 Apple Inc. All rights reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  *
@@ -26,48 +26,86 @@
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
-#include "Instruction.h"
 #include <wtf/Assertions.h>
 #include <wtf/Vector.h>
 #include <limits.h>
 
 namespace JSC {
-    class BytecodeGenerator;
-    class Label;
+    template<typename Traits>
+    class BytecodeGeneratorBase;
+    struct JSGeneratorTraits;
+
+    template<typename Traits>
+    class GenericLabel;
+
+    template<typename Traits>
+    class GenericBoundLabel {
+        using BytecodeGenerator = BytecodeGeneratorBase<Traits>;
+        using Label = GenericLabel<Traits>;
 
-    class BoundLabel {
     public:
-        BoundLabel()
+        GenericBoundLabel()
             : m_type(Offset)
             , m_generator(nullptr)
             , m_target(0)
         { }
 
-        explicit BoundLabel(int target)
+        explicit GenericBoundLabel(int target)
             : m_type(Offset)
             , m_generator(nullptr)
             , m_target(target)
         { }
 
-        BoundLabel(BytecodeGenerator* generator, Label* label)
+        GenericBoundLabel(BytecodeGenerator* generator, Label* label)
             : m_type(GeneratorForward)
             , m_generator(generator)
             , m_label(label)
         { }
 
-        BoundLabel(BytecodeGenerator* generator, int offset)
+        GenericBoundLabel(BytecodeGenerator* generator, int offset)
             : m_type(GeneratorBackward)
             , m_generator(generator)
             , m_target(offset)
         { }
 
-        int target();
-        int saveTarget();
-        int commitTarget();
+        int target()
+        {
+            switch (m_type) {
+            case Offset:
+                return m_target;
+            case GeneratorBackward:
+                return m_target - m_generator->m_writer.position();
+            case GeneratorForward:
+                return 0;
+            default:
+                RELEASE_ASSERT_NOT_REACHED();
+            }
+        }
+
+        int saveTarget()
+        {
+            if (m_type == GeneratorForward) {
+                m_savedTarget = m_generator->m_writer.position();
+                return 0;
+            }
+
+            m_savedTarget = target();
+            return m_savedTarget;
+        }
+
+        int commitTarget()
+        {
+            if (m_type == GeneratorForward) {
+                m_label->m_unresolvedJumps.append(m_savedTarget);
+                return 0;
+            }
+
+            return m_savedTarget;
+        }
 
         operator int() { return target(); }
 
     private:
         enum Type : uint8_t {
@@ -83,16 +121,21 @@
             Label* m_label;
             int m_target;
         };
     };
 
-    class Label {
-    WTF_MAKE_NONCOPYABLE(Label);
+    template<typename Traits>
+    class GenericLabel {
+        WTF_MAKE_NONCOPYABLE(GenericLabel);
+        using BytecodeGenerator = BytecodeGeneratorBase<Traits>;
+        using BoundLabel = GenericBoundLabel<Traits>;
+        using JumpVector = Vector<int, 8>;
+
     public:
-        Label() = default;
+        GenericLabel() = default;
 
-        void setLocation(BytecodeGenerator&, unsigned);
+        void setLocation(BytecodeGenerator&, unsigned location);
 
         BoundLabel bind(BytecodeGenerator* generator)
         {
             m_bound = true;
             if (!isForward())
@@ -126,19 +169,38 @@
 
         bool isForward() const { return m_location == invalidLocation; }
 
         bool isBound() const { return m_bound; }
 
-    private:
-        friend class BoundLabel;
+        unsigned location() const
+        {
+            ASSERT(!isForward());
+            m_bound = true;
+            return m_location;
+        };
 
-        typedef Vector<int, 8> JumpVector;
+        const JumpVector& unresolvedJumps() const { return  m_unresolvedJumps; }
 
-        static const unsigned invalidLocation = UINT_MAX;
+    private:
+        friend BoundLabel;
+
+        static constexpr unsigned invalidLocation = UINT_MAX;
 
         int m_refCount { 0 };
         unsigned m_location { invalidLocation };
         mutable bool m_bound { false };
         mutable JumpVector m_unresolvedJumps;
     };
 
+    using Label = GenericLabel<JSGeneratorTraits>;
+    using BoundLabel = GenericBoundLabel<JSGeneratorTraits>;
+
+    namespace Wasm {
+    struct GeneratorTraits;
+    using Label = GenericLabel<Wasm::GeneratorTraits>;
+    }
+
+    // This cannot be declared in the Wasm namespace as it conflicts with the
+    // ruby Wasm namespace when referencing it from BytecodeList.rb
+    using WasmBoundLabel = GenericBoundLabel<Wasm::GeneratorTraits>;
+
 } // namespace JSC
