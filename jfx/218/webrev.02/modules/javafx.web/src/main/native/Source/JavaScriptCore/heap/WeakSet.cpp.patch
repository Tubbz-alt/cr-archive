diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakSet.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakSet.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakSet.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakSet.cpp
@@ -36,11 +36,11 @@
 {
     if (isOnList())
         remove();
 
     Heap& heap = *this->heap();
-    WeakBlock* next = 0;
+    WeakBlock* next = nullptr;
     for (WeakBlock* block = m_blocks.head(); block; block = next) {
         next = block->next();
         WeakBlock::destroy(heap, block);
     }
     m_blocks.clear();
@@ -54,11 +54,11 @@
         WeakBlock* nextBlock = block->next();
         block->sweep();
         if (block->isLogicallyEmptyButNotFree()) {
             // If this WeakBlock is logically empty, but still has Weaks pointing into it,
             // we can't destroy it just yet. Detach it from the WeakSet and hand ownership
-            // to the Heap so we don't pin down the entire MarkedBlock or LargeAllocation.
+            // to the Heap so we don't pin down the entire MarkedBlock or PreciseAllocation.
             m_blocks.remove(block);
             heap()->addLogicallyEmptyWeakBlock(block);
             block->disconnectContainer();
         }
         block = nextBlock;
@@ -81,16 +81,16 @@
 
     if (m_blocks.isEmpty() && isOnList())
         remove();
 }
 
-WeakBlock::FreeCell* WeakSet::findAllocator()
+WeakBlock::FreeCell* WeakSet::findAllocator(CellContainer container)
 {
     if (WeakBlock::FreeCell* allocator = tryFindAllocator())
         return allocator;
 
-    return addAllocator();
+    return addAllocator(container);
 }
 
 WeakBlock::FreeCell* WeakSet::tryFindAllocator()
 {
     while (m_nextAllocator) {
@@ -103,16 +103,16 @@
     }
 
     return 0;
 }
 
-WeakBlock::FreeCell* WeakSet::addAllocator()
+WeakBlock::FreeCell* WeakSet::addAllocator(CellContainer container)
 {
     if (!isOnList())
         heap()->objectSpace().addActiveWeakSet(this);
 
-    WeakBlock* block = WeakBlock::create(*heap(), m_container);
+    WeakBlock* block = WeakBlock::create(*heap(), container);
     heap()->didAllocate(WeakBlock::blockSize);
     m_blocks.append(block);
     WeakBlock::SweepResult sweepResult = block->takeSweepResult();
     ASSERT(!sweepResult.isNull() && sweepResult.freeList);
     return sweepResult.freeList;
