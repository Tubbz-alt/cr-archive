diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/OperandsInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/OperandsInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/OperandsInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/OperandsInlines.h
@@ -28,10 +28,18 @@
 #include "Operands.h"
 #include <wtf/CommaPrinter.h>
 
 namespace JSC {
 
+inline void Operand::dump(PrintStream& out) const
+{
+    if (isTmp())
+        out.print("tmp", value());
+    else
+        out.print(virtualRegister());
+}
+
 template<typename T>
 void Operands<T>::dumpInContext(PrintStream& out, DumpContext* context) const
 {
     CommaPrinter comma(" ");
     for (size_t argumentIndex = numberOfArguments(); argumentIndex--;) {
@@ -42,10 +50,15 @@
     for (size_t localIndex = 0; localIndex < numberOfLocals(); ++localIndex) {
         if (!local(localIndex))
             continue;
         out.print(comma, "loc", localIndex, ":", inContext(local(localIndex), context));
     }
+    for (size_t tmpIndex = 0; tmpIndex < numberOfTmps(); ++tmpIndex) {
+        if (!tmp(tmpIndex))
+            continue;
+        out.print(comma, "tmp", tmpIndex, ":", inContext(tmp(tmpIndex), context));
+    }
 }
 
 template<typename T>
 void Operands<T>::dump(PrintStream& out) const
 {
@@ -58,8 +71,13 @@
     for (size_t localIndex = 0; localIndex < numberOfLocals(); ++localIndex) {
         if (!local(localIndex))
             continue;
         out.print(comma, "loc", localIndex, ":", local(localIndex));
     }
+    for (size_t tmpIndex = 0; tmpIndex < numberOfTmps(); ++tmpIndex) {
+        if (!tmp(tmpIndex))
+            continue;
+        out.print(comma, "tmp", tmpIndex, ":", tmp(tmpIndex));
+    }
 }
 
 } // namespace JSC
