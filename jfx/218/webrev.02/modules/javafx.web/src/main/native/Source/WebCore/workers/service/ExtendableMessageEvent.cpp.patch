diff a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableMessageEvent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableMessageEvent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableMessageEvent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/workers/service/ExtendableMessageEvent.cpp
@@ -27,19 +27,22 @@
 
 #if ENABLE(SERVICE_WORKER)
 #include "ExtendableMessageEvent.h"
 
 #include "EventNames.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(ExtendableMessageEvent);
+
 Ref<ExtendableMessageEvent> ExtendableMessageEvent::create(Vector<RefPtr<MessagePort>>&& ports, RefPtr<SerializedScriptValue>&& data, const String& origin, const String& lastEventId, Optional<ExtendableMessageEventSource>&& source)
 {
     return adoptRef(*new ExtendableMessageEvent(WTFMove(data), origin, lastEventId, WTFMove(source), WTFMove(ports)));
 }
 
-ExtendableMessageEvent::ExtendableMessageEvent(JSC::ExecState& state, const AtomString& type, const Init& init, IsTrusted isTrusted)
+ExtendableMessageEvent::ExtendableMessageEvent(JSC::JSGlobalObject& state, const AtomString& type, const Init& init, IsTrusted isTrusted)
     : ExtendableEvent(type, init, isTrusted)
     , m_data(SerializedScriptValue::create(state, init.data, SerializationErrorMode::NonThrowing))
     , m_origin(init.origin)
     , m_lastEventId(init.lastEventId)
     , m_source(init.source)
