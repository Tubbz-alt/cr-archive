diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/MallocPtr.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/MallocPtr.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/MallocPtr.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/MallocPtr.h
@@ -24,26 +24,24 @@
  */
 
 #pragma once
 
 #include <wtf/FastMalloc.h>
+#include <wtf/Noncopyable.h>
 
 // MallocPtr is a smart pointer class that calls fastFree in its destructor.
 // It is intended to be used for pointers where the C++ lifetime semantics
 // (calling constructors and destructors) is not desired.
 
 namespace WTF {
 
 template<typename T, typename Malloc = FastMalloc> class MallocPtr {
+    WTF_MAKE_NONCOPYABLE(MallocPtr);
 public:
-    MallocPtr()
-        : m_ptr(nullptr)
-    {
-    }
+    MallocPtr() = default;
 
-    MallocPtr(std::nullptr_t)
-        : m_ptr(nullptr)
+    constexpr MallocPtr(std::nullptr_t)
     {
     }
 
     MallocPtr(MallocPtr&& other)
         : m_ptr(other.leakPtr())
@@ -97,20 +95,38 @@
     void swap(MallocPtr& other)
     {
         std::swap(m_ptr, other.m_ptr);
     }
 
-    template<typename U> friend MallocPtr<U> adoptMallocPtr(U*);
+    template<typename U, typename OtherMalloc> friend MallocPtr<U, OtherMalloc> adoptMallocPtr(U*);
 
     static MallocPtr malloc(size_t size)
     {
-        return MallocPtr { static_cast<T*>(Malloc::malloc(size)) };
+        return MallocPtr {
+            static_cast<T*>(Malloc::malloc(size))
+        };
+    }
+
+    static MallocPtr zeroedMalloc(size_t size)
+    {
+        return MallocPtr {
+            static_cast<T*>(Malloc::zeroedMalloc(size))
+        };
     }
 
     static MallocPtr tryMalloc(size_t size)
     {
-        return MallocPtr { static_cast<T*>(Malloc::tryMalloc(size)) };
+        return MallocPtr {
+            static_cast<T*>(Malloc::tryMalloc(size))
+        };
+    }
+
+    static MallocPtr tryZeroedMalloc(size_t size)
+    {
+        return MallocPtr {
+            static_cast<T*>(Malloc::tryZeroedMalloc(size))
+        };
     }
 
     void realloc(size_t newSize)
     {
         m_ptr = static_cast<T*>(Malloc::realloc(m_ptr, newSize));
@@ -120,18 +136,18 @@
     explicit MallocPtr(T* ptr)
         : m_ptr(ptr)
     {
     }
 
-    T* m_ptr;
+    T* m_ptr { nullptr };
 };
 
 static_assert(sizeof(MallocPtr<int>) == sizeof(int*), "");
 
-template<typename U> MallocPtr<U> adoptMallocPtr(U* ptr)
+template<typename U, typename OtherMalloc> MallocPtr<U, OtherMalloc> adoptMallocPtr(U* ptr)
 {
-    return MallocPtr<U>(ptr);
+    return MallocPtr<U, OtherMalloc>(ptr);
 }
 
 } // namespace WTF
 
 using WTF::MallocPtr;
