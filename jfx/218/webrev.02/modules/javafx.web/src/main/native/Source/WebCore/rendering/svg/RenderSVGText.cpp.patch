diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGText.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGText.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGText.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/RenderSVGText.cpp
@@ -370,19 +370,22 @@
 
         m_layoutAttributesBuilder.buildLayoutAttributesForForSubtree(*this);
         m_needsReordering = true;
         m_needsPositioningValuesUpdate = false;
         updateCachedBoundariesInParents = true;
-    } else if (m_needsTextMetricsUpdate || SVGRenderSupport::findTreeRootObject(*this)->isLayoutSizeChanged()) {
-        // If the root layout size changed (eg. window size changes) or the transform to the root
-        // context has changed then recompute the on-screen font size.
-        updateFontInAllDescendants(this, &m_layoutAttributesBuilder);
-
-        ASSERT(!m_needsReordering);
-        ASSERT(!m_needsPositioningValuesUpdate);
-        m_needsTextMetricsUpdate = false;
-        updateCachedBoundariesInParents = true;
+    } else {
+        RenderSVGRoot* rootObj = SVGRenderSupport::findTreeRootObject(*this);
+        if (m_needsTextMetricsUpdate || (rootObj && rootObj->isLayoutSizeChanged())) {
+            // If the root layout size changed (eg. window size changes) or the transform to the root
+            // context has changed then recompute the on-screen font size.
+            updateFontInAllDescendants(this, &m_layoutAttributesBuilder);
+
+            ASSERT(!m_needsReordering);
+            ASSERT(!m_needsPositioningValuesUpdate);
+            m_needsTextMetricsUpdate = false;
+            updateCachedBoundariesInParents = true;
+        }
     }
 
     checkLayoutAttributesConsistency(this, m_layoutAttributes);
 
     // Reduced version of RenderBlock::layoutBlock(), which only takes care of SVG text.
