diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/libwpe/PasteboardLibWPE.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/libwpe/PasteboardLibWPE.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/libwpe/PasteboardLibWPE.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/libwpe/PasteboardLibWPE.cpp
@@ -29,10 +29,11 @@
 #if USE(LIBWPE)
 
 #include "NotImplemented.h"
 #include "PasteboardStrategy.h"
 #include "PlatformStrategies.h"
+#include <wtf/Optional.h>
 
 namespace WebCore {
 
 std::unique_ptr<Pasteboard> Pasteboard::createForCopyAndPaste()
 {
@@ -70,11 +71,11 @@
     return { };
 }
 
 String Pasteboard::readString(const String& type)
 {
-    return platformStrategies()->pasteboardStrategy()->readStringFromPasteboard(0, type);
+    return platformStrategies()->pasteboardStrategy()->readStringFromPasteboard(0, type, name());
 }
 
 String Pasteboard::readStringInCustomData(const String&)
 {
     notImplemented();
@@ -92,16 +93,16 @@
 
 void Pasteboard::clear(const String&)
 {
 }
 
-void Pasteboard::read(PasteboardPlainText& text)
+void Pasteboard::read(PasteboardPlainText& text, PlainTextURLReadingPolicy, Optional<size_t>)
 {
-    text.text = platformStrategies()->pasteboardStrategy()->readStringFromPasteboard(0, "text/plain;charset=utf-8");
+    text.text = platformStrategies()->pasteboardStrategy()->readStringFromPasteboard(0, "text/plain;charset=utf-8", name());
 }
 
-void Pasteboard::read(PasteboardWebContentReader&, WebContentReadingPolicy)
+void Pasteboard::read(PasteboardWebContentReader&, WebContentReadingPolicy, Optional<size_t>)
 {
     notImplemented();
 }
 
 void Pasteboard::read(PasteboardFileReader&)
@@ -145,11 +146,11 @@
 void Pasteboard::writePlainText(const String& text, SmartReplaceOption)
 {
     writeString("text/plain;charset=utf-8", text);
 }
 
-void Pasteboard::writeCustomData(const PasteboardCustomData&)
+void Pasteboard::writeCustomData(const Vector<PasteboardCustomData>&)
 {
 }
 
 void Pasteboard::write(const Color&)
 {
