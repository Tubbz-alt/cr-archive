diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/PolicyChecker.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/PolicyChecker.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/PolicyChecker.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/PolicyChecker.h
@@ -50,32 +50,32 @@
 class Frame;
 class NavigationAction;
 class ResourceError;
 class ResourceResponse;
 
-enum class ShouldContinue {
-    Yes,
-    No
-};
-
 enum class NavigationPolicyDecision : uint8_t {
     ContinueLoad,
     IgnoreLoad,
     StopAllLoads,
 };
 
 enum class PolicyDecisionMode { Synchronous, Asynchronous };
 
-using NewWindowPolicyDecisionFunction = CompletionHandler<void(const ResourceRequest&, WeakPtr<FormState>&&, const String& frameName, const NavigationAction&, ShouldContinue)>;
-using NavigationPolicyDecisionFunction = CompletionHandler<void(ResourceRequest&&, WeakPtr<FormState>&&, NavigationPolicyDecision)>;
-
 class PolicyChecker {
     WTF_MAKE_NONCOPYABLE(PolicyChecker);
     WTF_MAKE_FAST_ALLOCATED;
 public:
     explicit PolicyChecker(Frame&);
 
+    enum class ShouldContinue {
+        Yes,
+        No
+    };
+
+    using NavigationPolicyDecisionFunction = CompletionHandler<void(ResourceRequest&&, WeakPtr<FormState>&&, NavigationPolicyDecision)>;
+    using NewWindowPolicyDecisionFunction = CompletionHandler<void(const ResourceRequest&, WeakPtr<FormState>&&, const String& frameName, const NavigationAction&, ShouldContinue)>;
+
     void checkNavigationPolicy(ResourceRequest&&, const ResourceResponse& redirectResponse, DocumentLoader*, RefPtr<FormState>&&, NavigationPolicyDecisionFunction&&, PolicyDecisionMode = PolicyDecisionMode::Asynchronous);
     void checkNavigationPolicy(ResourceRequest&&, const ResourceResponse& redirectResponse, NavigationPolicyDecisionFunction&&);
     void checkNewWindowPolicy(NavigationAction&&, ResourceRequest&&, RefPtr<FormState>&&, const String& frameName, NewWindowPolicyDecisionFunction&&);
 
     void stopCheck();
@@ -110,5 +110,18 @@
     ContentFilterUnblockHandler m_contentFilterUnblockHandler;
 #endif
 };
 
 } // namespace WebCore
+
+// To support encoding WebCore::PolicyChecker::ShouldContinue in XPC messages
+namespace WTF {
+
+template<> struct EnumTraits<WebCore::PolicyChecker::ShouldContinue> {
+    using values = EnumValues<
+        WebCore::PolicyChecker::ShouldContinue,
+        WebCore::PolicyChecker::ShouldContinue::No,
+        WebCore::PolicyChecker::ShouldContinue::Yes
+    >;
+};
+
+}
