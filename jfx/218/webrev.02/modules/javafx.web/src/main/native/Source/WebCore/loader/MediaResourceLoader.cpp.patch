diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/MediaResourceLoader.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/MediaResourceLoader.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/MediaResourceLoader.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/MediaResourceLoader.cpp
@@ -93,11 +93,11 @@
         CertificateInfoPolicy::DoNotIncludeCertificateInfo,
         contentSecurityPolicyImposition,
         DefersLoadingPolicy::AllowDefersLoading,
         cachingPolicy };
     loaderOptions.destination = m_mediaElement && !m_mediaElement->isVideo() ? FetchOptions::Destination::Audio : FetchOptions::Destination::Video;
-    auto cachedRequest = createPotentialAccessControlRequest(WTFMove(request), *m_document, m_crossOriginMode, WTFMove(loaderOptions));
+    auto cachedRequest = createPotentialAccessControlRequest(WTFMove(request), WTFMove(loaderOptions), *m_document, m_crossOriginMode);
     if (m_mediaElement)
         cachedRequest.setInitiator(*m_mediaElement);
 
     auto resource = m_document->cachedResourceLoader().requestMedia(WTFMove(cachedRequest)).value_or(nullptr);
     if (!resource)
@@ -170,14 +170,14 @@
         return;
     }
 
     m_didPassAccessControlCheck = m_resource->options().mode == FetchOptions::Mode::Cors;
     if (m_client)
-        m_client->responseReceived(*this, response, [this, protectedThis = makeRef(*this), completionHandler = completionHandlerCaller.release()] (ShouldContinue shouldContinue) mutable {
+        m_client->responseReceived(*this, response, [this, protectedThis = makeRef(*this), completionHandler = completionHandlerCaller.release()] (auto shouldContinue) mutable {
             if (completionHandler)
                 completionHandler();
-            if (shouldContinue == ShouldContinue::No)
+            if (shouldContinue == PolicyChecker::ShouldContinue::No)
                 stop();
         });
 
     m_loader->addResponseForTesting(response);
 }
