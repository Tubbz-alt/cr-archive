diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakSet.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakSet.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakSet.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/WeakSet.h
@@ -39,17 +39,14 @@
 
 public:
     static WeakImpl* allocate(JSValue, WeakHandleOwner* = 0, void* context = 0);
     static void deallocate(WeakImpl*);
 
-    WeakSet(VM&, CellContainer);
+    WeakSet(VM&);
     ~WeakSet();
     void lastChanceToFinalize();
 
-    CellContainer container() const { return m_container; }
-    void setContainer(CellContainer container) { m_container = container; }
-
     Heap* heap() const;
     VM& vm() const;
 
     bool isEmpty() const;
     bool isTriviallyDestructible() const;
@@ -60,33 +57,31 @@
     void sweep();
     void shrink();
     void resetAllocator();
 
 private:
-    JS_EXPORT_PRIVATE WeakBlock::FreeCell* findAllocator();
+    JS_EXPORT_PRIVATE WeakBlock::FreeCell* findAllocator(CellContainer);
     WeakBlock::FreeCell* tryFindAllocator();
-    WeakBlock::FreeCell* addAllocator();
+    WeakBlock::FreeCell* addAllocator(CellContainer);
     void removeAllocator(WeakBlock*);
 
-    WeakBlock::FreeCell* m_allocator;
-    WeakBlock* m_nextAllocator;
+    WeakBlock::FreeCell* m_allocator { nullptr };
+    WeakBlock* m_nextAllocator { nullptr };
     DoublyLinkedList<WeakBlock> m_blocks;
-    VM& m_vm;
-    CellContainer m_container;
+    // m_vm must be a pointer (instead of a reference) because the JSCLLIntOffsetsExtractor
+    // cannot handle it being a reference.
+    VM* m_vm;
 };
 
-inline WeakSet::WeakSet(VM& vm, CellContainer container)
-    : m_allocator(0)
-    , m_nextAllocator(0)
-    , m_vm(vm)
-    , m_container(container)
+inline WeakSet::WeakSet(VM& vm)
+    : m_vm(&vm)
 {
 }
 
 inline VM& WeakSet::vm() const
 {
-    return m_vm;
+    return *m_vm;
 }
 
 inline bool WeakSet::isEmpty() const
 {
     for (WeakBlock* block = m_blocks.head(); block; block = block->next()) {
@@ -129,10 +124,10 @@
         block->reap();
 }
 
 inline void WeakSet::resetAllocator()
 {
-    m_allocator = 0;
+    m_allocator = nullptr;
     m_nextAllocator = m_blocks.head();
 }
 
 } // namespace JSC
