diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringJoiner.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringJoiner.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringJoiner.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringJoiner.cpp
@@ -77,13 +77,13 @@
     ASSERT(data == result.characters<CharacterType>() + joinedLength);
 
     return result;
 }
 
-inline unsigned JSStringJoiner::joinedLength(ExecState& state) const
+inline unsigned JSStringJoiner::joinedLength(JSGlobalObject* globalObject) const
 {
-    VM& vm = state.vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     unsigned numberOfStrings = m_strings.size();
     if (!numberOfStrings)
         return 0;
@@ -92,24 +92,24 @@
     Checked<int32_t, RecordOverflow> totalSeparatorsLength = separatorLength * (numberOfStrings - 1);
     Checked<int32_t, RecordOverflow> totalLength = totalSeparatorsLength + m_accumulatedStringsLength;
 
     int32_t result;
     if (totalLength.safeGet(result) == CheckedState::DidOverflow) {
-        throwOutOfMemoryError(&state, scope);
+        throwOutOfMemoryError(globalObject, scope);
         return 0;
     }
     return result;
 }
 
-JSValue JSStringJoiner::join(ExecState& state)
+JSValue JSStringJoiner::join(JSGlobalObject* globalObject)
 {
-    VM& vm = state.vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     ASSERT(m_strings.size() <= m_strings.capacity());
 
-    unsigned length = joinedLength(state);
+    unsigned length = joinedLength(globalObject);
     RETURN_IF_EXCEPTION(scope, JSValue());
 
     if (!length)
         return jsEmptyString(vm);
 
@@ -118,11 +118,11 @@
         result = joinStrings<LChar>(m_strings, m_separator, length);
     else
         result = joinStrings<UChar>(m_strings, m_separator, length);
 
     if (result.isNull())
-        return throwOutOfMemoryError(&state, scope);
+        return throwOutOfMemoryError(globalObject, scope);
 
     return jsString(vm, WTFMove(result));
 }
 
 }
