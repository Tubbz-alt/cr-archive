diff a/modules/javafx.web/src/main/native/Source/WebCore/crypto/CommonCryptoUtilities.cpp b/modules/javafx.web/src/main/native/Source/WebCore/crypto/CommonCryptoUtilities.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/crypto/CommonCryptoUtilities.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/crypto/CommonCryptoUtilities.cpp
@@ -26,28 +26,10 @@
 #include "config.h"
 #include "CommonCryptoUtilities.h"
 
 #if ENABLE(WEB_CRYPTO)
 
-#if !HAVE(CCRSAGetCRTComponents)
-
-#if USE(APPLE_INTERNAL_SDK)
-#include <CommonCrypto/CommonBigNum.h>
-#endif
-
-extern "C" CCBigNumRef CCBigNumFromData(CCStatus *status, const void *s, size_t len);
-extern "C" size_t CCBigNumToData(CCStatus *status, const CCBigNumRef bn, void *to);
-extern "C" uint32_t CCBigNumByteCount(const CCBigNumRef bn);
-extern "C" CCBigNumRef CCCreateBigNum(CCStatus *status);
-extern "C" void CCBigNumFree(CCBigNumRef bn);
-extern "C" CCBigNumRef CCBigNumCopy(CCStatus *status, const CCBigNumRef bn);
-extern "C" CCStatus CCBigNumSubI(CCBigNumRef result, const CCBigNumRef a, const uint32_t b);
-extern "C" CCStatus CCBigNumMod(CCBigNumRef result, CCBigNumRef dividend, CCBigNumRef modulus);
-extern "C" CCStatus CCBigNumInverseMod(CCBigNumRef result, const CCBigNumRef a, const CCBigNumRef modulus);
-
-#endif
-
 namespace WebCore {
 
 bool getCommonCryptoDigestAlgorithm(CryptoAlgorithmIdentifier hashFunction, CCDigestAlgorithm& algorithm)
 {
     switch (hashFunction) {
@@ -71,112 +53,8 @@
     default:
         return false;
     }
 }
 
-#if !HAVE(CCRSAGetCRTComponents)
-
-CCBigNum::CCBigNum(CCBigNumRef number)
-    : m_number(number)
-{
-}
-
-CCBigNum::CCBigNum(const uint8_t* data, size_t size)
-{
-    CCStatus status = kCCSuccess;
-    m_number = CCBigNumFromData(&status, data, size);
-    RELEASE_ASSERT(!status);
-}
-
-CCBigNum::~CCBigNum()
-{
-    CCBigNumFree(m_number);
-}
-
-CCBigNum::CCBigNum(const CCBigNum& other)
-{
-    CCStatus status = kCCSuccess;
-    m_number = CCBigNumCopy(&status, other.m_number);
-    RELEASE_ASSERT(!status);
-}
-
-CCBigNum::CCBigNum(CCBigNum&& other)
-{
-    m_number = other.m_number;
-    other.m_number = nullptr;
-}
-
-CCBigNum& CCBigNum::operator=(const CCBigNum& other)
-{
-    if (this == &other)
-        return *this;
-
-    CCBigNumFree(m_number);
-
-    CCStatus status = kCCSuccess;
-    m_number = CCBigNumCopy(&status, other.m_number);
-    RELEASE_ASSERT(!status);
-    return *this;
-}
-
-CCBigNum& CCBigNum::operator=(CCBigNum&& other)
-{
-    if (this == &other)
-        return *this;
-
-    m_number = other.m_number;
-    other.m_number = nullptr;
-
-    return *this;
-}
-
-Vector<uint8_t> CCBigNum::data() const
-{
-    Vector<uint8_t> result(CCBigNumByteCount(m_number));
-    CCStatus status = kCCSuccess;
-    CCBigNumToData(&status, m_number, result.data());
-    RELEASE_ASSERT(!status);
-
-    return result;
-}
-
-CCBigNum CCBigNum::operator-(uint32_t b) const
-{
-    CCStatus status = kCCSuccess;
-    CCBigNumRef result = CCCreateBigNum(&status);
-    RELEASE_ASSERT(!status);
-
-    status = CCBigNumSubI(result, m_number, b);
-    RELEASE_ASSERT(!status);
-
-    return result;
-}
-
-CCBigNum CCBigNum::operator%(const CCBigNum& modulus) const
-{
-    CCStatus status = kCCSuccess;
-    CCBigNumRef result = CCCreateBigNum(&status);
-    RELEASE_ASSERT(!status);
-
-    status = CCBigNumMod(result, m_number, modulus.m_number);
-    RELEASE_ASSERT(!status);
-
-    return result;
-}
-
-CCBigNum CCBigNum::inverse(const CCBigNum& modulus) const
-{
-    CCStatus status = kCCSuccess;
-    CCBigNumRef result = CCCreateBigNum(&status);
-    RELEASE_ASSERT(!status);
-
-    status = CCBigNumInverseMod(result, m_number, modulus.m_number);
-    RELEASE_ASSERT(!status);
-
-    return result;
-}
-
-#endif
-
 } // namespace WebCore
 
 #endif // ENABLE(WEB_CRYPTO)
