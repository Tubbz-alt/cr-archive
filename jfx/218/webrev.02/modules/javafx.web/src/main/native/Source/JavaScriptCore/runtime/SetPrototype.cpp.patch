diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SetPrototype.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SetPrototype.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SetPrototype.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SetPrototype.cpp
@@ -45,17 +45,17 @@
   forEach   JSBuiltin  DontEnum|Function 0
   entries   JSBuiltin  DontEnum|Function 0
 @end
 */
 
-static EncodedJSValue JSC_HOST_CALL setProtoFuncAdd(ExecState*);
-static EncodedJSValue JSC_HOST_CALL setProtoFuncClear(ExecState*);
-static EncodedJSValue JSC_HOST_CALL setProtoFuncDelete(ExecState*);
-static EncodedJSValue JSC_HOST_CALL setProtoFuncHas(ExecState*);
+static EncodedJSValue JSC_HOST_CALL setProtoFuncAdd(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL setProtoFuncClear(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL setProtoFuncDelete(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL setProtoFuncHas(JSGlobalObject*, CallFrame*);
 
 
-static EncodedJSValue JSC_HOST_CALL setProtoFuncSize(ExecState*);
+static EncodedJSValue JSC_HOST_CALL setProtoFuncSize(JSGlobalObject*, CallFrame*);
 
 void SetPrototype::finishCreation(VM& vm, JSGlobalObject* globalObject)
 {
     Base::finishCreation(vm);
     ASSERT(inherits(vm, info()));
@@ -69,69 +69,71 @@
 
     JSFunction* values = JSFunction::create(vm, setPrototypeValuesCodeGenerator(vm), globalObject);
     putDirectWithoutTransition(vm, vm.propertyNames->builtinNames().valuesPublicName(), values, static_cast<unsigned>(PropertyAttribute::DontEnum));
     putDirectWithoutTransition(vm, vm.propertyNames->builtinNames().keysPublicName(), values, static_cast<unsigned>(PropertyAttribute::DontEnum));
     putDirectWithoutTransition(vm, vm.propertyNames->iteratorSymbol, values, static_cast<unsigned>(PropertyAttribute::DontEnum));
-    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsString(vm, "Set"), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
+    putDirectWithoutTransition(vm, vm.propertyNames->toStringTagSymbol, jsNontrivialString(vm, "Set"_s), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
 
     JSC_NATIVE_GETTER_WITHOUT_TRANSITION(vm.propertyNames->size, setProtoFuncSize, PropertyAttribute::DontEnum | PropertyAttribute::Accessor);
+
+    globalObject->installSetPrototypeWatchpoint(this);
 }
 
-ALWAYS_INLINE static JSSet* getSet(CallFrame* callFrame, JSValue thisValue)
+ALWAYS_INLINE static JSSet* getSet(JSGlobalObject* globalObject, JSValue thisValue)
 {
-    VM& vm = callFrame->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     if (UNLIKELY(!thisValue.isCell())) {
-        throwVMError(callFrame, scope, createNotAnObjectError(callFrame, thisValue));
+        throwVMError(globalObject, scope, createNotAnObjectError(globalObject, thisValue));
         return nullptr;
     }
     auto* set = jsDynamicCast<JSSet*>(vm, thisValue.asCell());
     if (LIKELY(set))
         return set;
-    throwTypeError(callFrame, scope, "Set operation called on non-Set object"_s);
+    throwTypeError(globalObject, scope, "Set operation called on non-Set object"_s);
     return nullptr;
 }
 
-EncodedJSValue JSC_HOST_CALL setProtoFuncAdd(CallFrame* callFrame)
+EncodedJSValue JSC_HOST_CALL setProtoFuncAdd(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
     JSValue thisValue = callFrame->thisValue();
-    JSSet* set = getSet(callFrame, thisValue);
+    JSSet* set = getSet(globalObject, thisValue);
     if (!set)
         return JSValue::encode(jsUndefined());
-    set->add(callFrame, callFrame->argument(0));
+    set->add(globalObject, callFrame->argument(0));
     return JSValue::encode(thisValue);
 }
 
-EncodedJSValue JSC_HOST_CALL setProtoFuncClear(CallFrame* callFrame)
+EncodedJSValue JSC_HOST_CALL setProtoFuncClear(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    JSSet* set = getSet(callFrame, callFrame->thisValue());
+    JSSet* set = getSet(globalObject, callFrame->thisValue());
     if (!set)
         return JSValue::encode(jsUndefined());
-    set->clear(callFrame);
+    set->clear(globalObject);
     return JSValue::encode(jsUndefined());
 }
 
-EncodedJSValue JSC_HOST_CALL setProtoFuncDelete(CallFrame* callFrame)
+EncodedJSValue JSC_HOST_CALL setProtoFuncDelete(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    JSSet* set = getSet(callFrame, callFrame->thisValue());
+    JSSet* set = getSet(globalObject, callFrame->thisValue());
     if (!set)
         return JSValue::encode(jsUndefined());
-    return JSValue::encode(jsBoolean(set->remove(callFrame, callFrame->argument(0))));
+    return JSValue::encode(jsBoolean(set->remove(globalObject, callFrame->argument(0))));
 }
 
-EncodedJSValue JSC_HOST_CALL setProtoFuncHas(CallFrame* callFrame)
+EncodedJSValue JSC_HOST_CALL setProtoFuncHas(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    JSSet* set = getSet(callFrame, callFrame->thisValue());
+    JSSet* set = getSet(globalObject, callFrame->thisValue());
     if (!set)
         return JSValue::encode(jsUndefined());
-    return JSValue::encode(jsBoolean(set->has(callFrame, callFrame->argument(0))));
+    return JSValue::encode(jsBoolean(set->has(globalObject, callFrame->argument(0))));
 }
 
-EncodedJSValue JSC_HOST_CALL setProtoFuncSize(CallFrame* callFrame)
+EncodedJSValue JSC_HOST_CALL setProtoFuncSize(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    JSSet* set = getSet(callFrame, callFrame->thisValue());
+    JSSet* set = getSet(globalObject, callFrame->thisValue());
     if (!set)
         return JSValue::encode(jsUndefined());
     return JSValue::encode(jsNumber(set->size()));
 }
 
