diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ProgramExecutable.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ProgramExecutable.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ProgramExecutable.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ProgramExecutable.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2009-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2009-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -32,27 +32,27 @@
 
 class ProgramExecutable final : public GlobalExecutable {
     friend class LLIntOffsetsExtractor;
 public:
     using Base = GlobalExecutable;
-    static const unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
 
     template<typename CellType, SubspaceAccess>
     static IsoSubspace* subspaceFor(VM& vm)
     {
         return &vm.programExecutableSpace.space;
     }
 
-    static ProgramExecutable* create(ExecState* exec, const SourceCode& source)
+    static ProgramExecutable* create(JSGlobalObject* globalObject, const SourceCode& source)
     {
-        VM& vm = exec->vm();
-        ProgramExecutable* executable = new (NotNull, allocateCell<ProgramExecutable>(vm.heap)) ProgramExecutable(exec, source);
+        VM& vm = getVM(globalObject);
+        ProgramExecutable* executable = new (NotNull, allocateCell<ProgramExecutable>(vm.heap)) ProgramExecutable(globalObject, source);
         executable->finishCreation(vm);
         return executable;
     }
 
-    JSObject* initializeGlobalProperties(VM&, CallFrame*, JSScope*);
+    JSObject* initializeGlobalProperties(VM&, JSGlobalObject*, JSScope*);
 
     static void destroy(JSCell*);
 
     ProgramCodeBlock* codeBlock()
     {
@@ -69,19 +69,19 @@
         return Structure::create(vm, globalObject, proto, TypeInfo(ProgramExecutableType, StructureFlags), info());
     }
 
     DECLARE_INFO;
 
-    ExecutableInfo executableInfo() const { return ExecutableInfo(usesEval(), isStrictMode(), false, false, ConstructorKind::None, JSParserScriptMode::Classic, SuperBinding::NotNeeded, SourceParseMode::ProgramMode, derivedContextType(), isArrowFunctionContext(), false, EvalContextType::None); }
+    ExecutableInfo executableInfo() const { return ExecutableInfo(usesEval(), isStrictMode(), false, false, ConstructorKind::None, JSParserScriptMode::Classic, SuperBinding::NotNeeded, SourceParseMode::ProgramMode, derivedContextType(), NeedsClassFieldInitializer::No, isArrowFunctionContext(), false, EvalContextType::None); }
 
     TemplateObjectMap& ensureTemplateObjectMap(VM&);
 
 private:
     friend class ExecutableBase;
     friend class ScriptExecutable;
 
-    ProgramExecutable(ExecState*, const SourceCode&);
+    ProgramExecutable(JSGlobalObject*, const SourceCode&);
 
     static void visitChildren(JSCell*, SlotVisitor&);
 
     WriteBarrier<UnlinkedProgramCodeBlock> m_unlinkedProgramCodeBlock;
     WriteBarrier<ExecutableToCodeBlockEdge> m_programCodeBlock;
