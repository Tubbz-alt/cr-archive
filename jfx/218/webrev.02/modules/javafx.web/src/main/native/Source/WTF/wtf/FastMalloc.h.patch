diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/FastMalloc.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/FastMalloc.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/FastMalloc.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/FastMalloc.h
@@ -20,10 +20,11 @@
 
 #pragma once
 
 #include <new>
 #include <stdlib.h>
+#include <wtf/DebugHeap.h>
 #include <wtf/StdLibExtras.h>
 
 namespace WTF {
 
 #if !defined(NDEBUG)
@@ -80,10 +81,12 @@
     size_t committedVMBytes;
     size_t freeListBytes;
 };
 WTF_EXPORT_PRIVATE FastMallocStatistics fastMallocStatistics();
 
+WTF_EXPORT_PRIVATE void fastMallocDumpMallocStats();
+
 // This defines a type which holds an unsigned integer and is the same
 // size as the minimally aligned memory allocation.
 typedef unsigned long long AllocAlignmentInteger;
 
 inline TryMallocReturnValue::TryMallocReturnValue(void* data)
@@ -198,10 +201,21 @@
         if (result.getValue(realResult))
             return realResult;
         return nullptr;
     }
 
+    static void* zeroedMalloc(size_t size) { return fastZeroedMalloc(size); }
+
+    static void* tryZeroedMalloc(size_t size)
+    {
+        auto result = tryFastZeroedMalloc(size);
+        void* realResult;
+        if (result.getValue(realResult))
+            return realResult;
+        return nullptr;
+    }
+
     static void* realloc(void* p, size_t size) { return fastRealloc(p, size); }
 
     static void* tryRealloc(void* p, size_t size)
     {
         auto result = tryFastRealloc(p, size);
@@ -297,14 +311,80 @@
         ASSERT(location); \
         return location; \
     } \
     using webkitFastMalloced = int; \
 
+// FIXME: WTF_MAKE_FAST_ALLOCATED should take class name so that we can create malloc_zone per this macro.
+// https://bugs.webkit.org/show_bug.cgi?id=205702
 #define WTF_MAKE_FAST_ALLOCATED \
 public: \
     WTF_MAKE_FAST_ALLOCATED_IMPL \
 private: \
 using __thisIsHereToForceASemicolonAfterThisMacro = int
 
 #define WTF_MAKE_STRUCT_FAST_ALLOCATED \
     WTF_MAKE_FAST_ALLOCATED_IMPL \
 using __thisIsHereToForceASemicolonAfterThisMacro = int
+
+#if ENABLE(MALLOC_HEAP_BREAKDOWN)
+
+#define WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER_IMPL(classname) \
+    void* operator new(size_t, void* p) { return p; } \
+    void* operator new[](size_t, void* p) { return p; } \
+    \
+    void* operator new(size_t size) \
+    { \
+        return classname##Malloc::malloc(size); \
+    } \
+    \
+    void operator delete(void* p) \
+    { \
+        classname##Malloc::free(p); \
+    } \
+    \
+    void* operator new[](size_t size) \
+    { \
+        return classname##Malloc::malloc(size); \
+    } \
+    \
+    void operator delete[](void* p) \
+    { \
+        classname##Malloc::free(p); \
+    } \
+    void* operator new(size_t, NotNullTag, void* location) \
+    { \
+        ASSERT(location); \
+        return location; \
+    } \
+    using webkitFastMalloced = int; \
+
+#define WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(classname) \
+public: \
+    WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER_IMPL(classname) \
+private: \
+    WTF_EXPORT_PRIVATE static WTF::DebugHeap& debugHeap(const char*); \
+using __thisIsHereToForceASemicolonAfterThisMacro = int
+
+#define WTF_MAKE_STRUCT_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(className) \
+private: \
+    WTF_EXPORT_PRIVATE static WTF::DebugHeap& debugHeap(const char*); \
+public: \
+    WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER_IMPL(className) \
+using __thisIsHereToForceASemicolonAfterThisMacro = int
+
+#else
+
+#define WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER_IMPL(classname) \
+    WTF_MAKE_FAST_ALLOCATED_IMPL
+
+#define WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(classname) \
+public: \
+    WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER_IMPL(classname) \
+private: \
+using __thisIsHereToForceASemicolonAfterThisMacro = int
+
+#define WTF_MAKE_STRUCT_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(className) \
+public: \
+    WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER_IMPL(className) \
+using __thisIsHereToForceASemicolonAfterThisMacro = int
+
+#endif
