diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontPlatformData.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontPlatformData.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontPlatformData.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontPlatformData.h
@@ -106,19 +106,19 @@
 #if PLATFORM(WIN) && USE(CG)
     FontPlatformData(GDIObject<HFONT>, CGFontRef, float size, bool syntheticBold, bool syntheticOblique, bool useGDI);
 #endif
 
 #if PLATFORM(WIN) && USE(DIRECT2D)
-    FontPlatformData(GDIObject<HFONT>&&, IDWriteFont*, float size, bool syntheticBold, bool syntheticOblique, bool useGDI);
+    FontPlatformData(GDIObject<HFONT>&&, COMPtr<IDWriteFont>&&, float size, bool syntheticBold, bool syntheticOblique, bool useGDI);
 #endif
 
 #if PLATFORM(WIN) && USE(CAIRO)
     FontPlatformData(GDIObject<HFONT>, cairo_font_face_t*, float size, bool bold, bool italic);
 #endif
 
 #if USE(FREETYPE)
-    FontPlatformData(cairo_font_face_t*, FcPattern*, float size, bool fixedWidth, bool syntheticBold, bool syntheticOblique, FontOrientation);
+    FontPlatformData(cairo_font_face_t*, RefPtr<FcPattern>&&, float size, bool fixedWidth, bool syntheticBold, bool syntheticOblique, FontOrientation);
 #endif
 
 #if PLATFORM(JAVA)
     FontPlatformData(RefPtr<RQRef> font, float size);
     static std::unique_ptr<FontPlatformData> create(const FontDescription& fontDescription, const AtomString& family);
@@ -152,13 +152,10 @@
 #endif
 
 #if USE(DIRECT2D)
     IDWriteFont* dwFont() const { return m_dwFont.get(); }
     IDWriteFontFace* dwFontFace() const { return m_dwFontFace.get(); }
-
-    static HRESULT createFallbackFont(const LOGFONT&, IDWriteFont**);
-    static HRESULT createFallbackFont(HFONT, IDWriteFont**);
 #endif
 
     bool isFixedPitch() const;
     float size() const { return m_size; }
     bool syntheticBold() const { return m_syntheticBold; }
