diff a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSCanvasValue.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSCanvasValue.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/CSSCanvasValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/CSSCanvasValue.cpp
@@ -58,15 +58,15 @@
 {
     ASSERT_UNUSED(&element, &element == m_element);
     m_element = nullptr;
 }
 
-FloatSize CSSCanvasValue::fixedSize(const RenderElement* renderer)
+FloatSize CSSCanvasValue::fixedSize(const RenderElement& renderer)
 {
-    if (HTMLCanvasElement* elt = element(renderer->document()))
+    if (HTMLCanvasElement* elt = element(renderer.document()))
         return FloatSize(elt->width(), elt->height());
-    return FloatSize();
+    return { };
 }
 
 HTMLCanvasElement* CSSCanvasValue::element(Document& document)
 {
      if (!m_element) {
@@ -76,14 +76,14 @@
         m_element->addObserver(m_canvasObserver);
     }
     return m_element;
 }
 
-RefPtr<Image> CSSCanvasValue::image(RenderElement* renderer, const FloatSize& /*size*/)
+RefPtr<Image> CSSCanvasValue::image(RenderElement& renderer, const FloatSize& /*size*/)
 {
-    ASSERT(clients().contains(renderer));
-    HTMLCanvasElement* element = this->element(renderer->document());
+    ASSERT(clients().contains(&renderer));
+    HTMLCanvasElement* element = this->element(renderer.document());
     if (!element || !element->buffer())
         return nullptr;
     return element->copiedImage();
 }
 
