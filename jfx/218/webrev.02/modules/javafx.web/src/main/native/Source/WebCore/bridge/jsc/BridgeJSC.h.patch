diff a/modules/javafx.web/src/main/native/Source/WebCore/bridge/jsc/BridgeJSC.h b/modules/javafx.web/src/main/native/Source/WebCore/bridge/jsc/BridgeJSC.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bridge/jsc/BridgeJSC.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bridge/jsc/BridgeJSC.h
@@ -49,23 +49,23 @@
 class RuntimeObject;
 
 class Field {
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    virtual JSValue valueFromInstance(ExecState*, const Instance*) const = 0;
-    virtual bool setValueToInstance(ExecState*, const Instance*, JSValue) const = 0;
+    virtual JSValue valueFromInstance(JSGlobalObject*, const Instance*) const = 0;
+    virtual bool setValueToInstance(JSGlobalObject*, const Instance*, JSValue) const = 0;
 
     virtual ~Field() = default;
 };
 
 class Class {
     WTF_MAKE_NONCOPYABLE(Class); WTF_MAKE_FAST_ALLOCATED;
 public:
     Class() = default;
     virtual Method* methodNamed(PropertyName, Instance*) const = 0;
     virtual Field* fieldNamed(PropertyName, Instance*) const = 0;
-    virtual JSValue fallbackObject(ExecState*, Instance*, PropertyName) { return jsUndefined(); }
+    virtual JSValue fallbackObject(JSGlobalObject*, Instance*, PropertyName) { return jsUndefined(); }
 
     virtual ~Class() = default;
 };
 
 class Instance : public RefCounted<Instance> {
@@ -77,42 +77,42 @@
     // any needed state.
     void begin();
     void end();
 
     virtual Class* getClass() const = 0;
-    WEBCORE_EXPORT JSObject* createRuntimeObject(ExecState*);
+    WEBCORE_EXPORT JSObject* createRuntimeObject(JSGlobalObject*);
     void willInvalidateRuntimeObject();
 
     // Returns false if the value was not set successfully.
-    virtual bool setValueOfUndefinedField(ExecState*, PropertyName, JSValue) { return false; }
+    virtual bool setValueOfUndefinedField(JSGlobalObject*, PropertyName, JSValue) { return false; }
 
-    virtual JSValue getMethod(ExecState*, PropertyName) = 0;
-    virtual JSValue invokeMethod(ExecState*, RuntimeMethod* method) = 0;
+    virtual JSValue getMethod(JSGlobalObject*, PropertyName) = 0;
+    virtual JSValue invokeMethod(JSGlobalObject*, CallFrame*, RuntimeMethod* method) = 0;
 
     virtual bool supportsInvokeDefaultMethod() const { return false; }
-    virtual JSValue invokeDefaultMethod(ExecState*) { return jsUndefined(); }
+    virtual JSValue invokeDefaultMethod(JSGlobalObject*, CallFrame*) { return jsUndefined(); }
 
     virtual bool supportsConstruct() const { return false; }
-    virtual JSValue invokeConstruct(ExecState*, const ArgList&) { return JSValue(); }
+    virtual JSValue invokeConstruct(JSGlobalObject*, CallFrame*, const ArgList&) { return JSValue(); }
 
-    virtual void getPropertyNames(ExecState*, PropertyNameArray&) { }
+    virtual void getPropertyNames(JSGlobalObject*, PropertyNameArray&) { }
 
-    virtual JSValue defaultValue(ExecState*, PreferredPrimitiveType) const = 0;
+    virtual JSValue defaultValue(JSGlobalObject*, PreferredPrimitiveType) const = 0;
 
-    virtual JSValue valueOf(ExecState* exec) const = 0;
+    virtual JSValue valueOf(JSGlobalObject* exec) const = 0;
 
     RootObject* rootObject() const;
 
     WEBCORE_EXPORT virtual ~Instance();
 
-    virtual bool getOwnPropertySlot(JSObject*, ExecState*, PropertyName, PropertySlot&) { return false; }
-    virtual bool put(JSObject*, ExecState*, PropertyName, JSValue, PutPropertySlot&) { return false; }
+    virtual bool getOwnPropertySlot(JSObject*, JSGlobalObject*, PropertyName, PropertySlot&) { return false; }
+    virtual bool put(JSObject*, JSGlobalObject*, PropertyName, JSValue, PutPropertySlot&) { return false; }
 
 protected:
     virtual void virtualBegin() { }
     virtual void virtualEnd() { }
-    WEBCORE_EXPORT virtual RuntimeObject* newRuntimeObject(ExecState*);
+    WEBCORE_EXPORT virtual RuntimeObject* newRuntimeObject(JSGlobalObject*);
 
     RefPtr<RootObject> m_rootObject;
 
 private:
     Weak<RuntimeObject> m_runtimeObject;
@@ -122,12 +122,12 @@
     WTF_MAKE_NONCOPYABLE(Array);
 public:
     explicit Array(RefPtr<RootObject>&&);
     virtual ~Array();
 
-    virtual bool setValueAt(ExecState*, unsigned index, JSValue) const = 0;
-    virtual JSValue valueAt(ExecState*, unsigned index) const = 0;
+    virtual bool setValueAt(JSGlobalObject*, unsigned index, JSValue) const = 0;
+    virtual JSValue valueAt(JSGlobalObject*, unsigned index) const = 0;
     virtual unsigned int getLength() const = 0;
 
 protected:
     RefPtr<RootObject> m_rootObject;
 };
