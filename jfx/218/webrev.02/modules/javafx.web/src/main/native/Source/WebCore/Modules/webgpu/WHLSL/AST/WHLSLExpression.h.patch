diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLExpression.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLExpression.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLExpression.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLExpression.h
@@ -62,11 +62,10 @@
         IntegerLiteral,
         Logical,
         LogicalNot,
         MakeArrayReference,
         MakePointer,
-        NullLiteral,
         ReadModifyWrite,
         Ternary,
         UnsignedIntegerLiteral,
         VariableReference,
         EnumerationMemberLiteral,
@@ -117,14 +116,14 @@
 
     void copyTypeTo(Expression& other) const
     {
         if (auto* resolvedType = const_cast<Expression*>(this)->maybeResolvedType())
             other.setType(*resolvedType);
-        if (auto* typeAnnotation = maybeTypeAnnotation())
-            other.setTypeAnnotation(TypeAnnotation(*typeAnnotation));
     }
 
+    bool mayBeEffectful() const;
+
     Kind kind() const  { return m_kind; }
     bool isAssignmentExpression() const { return kind() == Kind::Assignment; }
     bool isBooleanLiteral() const { return kind() == Kind::BooleanLiteral; }
     bool isCallExpression() const { return kind() == Kind::Call; }
     bool isCommaExpression() const { return kind() == Kind::Comma; }
@@ -136,11 +135,10 @@
     bool isIntegerLiteral() const { return kind() == Kind::IntegerLiteral; }
     bool isLogicalExpression() const { return kind() == Kind::Logical; }
     bool isLogicalNotExpression() const { return kind() == Kind::LogicalNot; }
     bool isMakeArrayReferenceExpression() const { return kind() == Kind::MakeArrayReference; }
     bool isMakePointerExpression() const { return kind() == Kind::MakePointer; }
-    bool isNullLiteral() const { return kind() == Kind::NullLiteral; }
     bool isPropertyAccessExpression() const { return isDotExpression() || isIndexExpression(); }
     bool isReadModifyWriteExpression() const { return kind() == Kind::ReadModifyWrite; }
     bool isTernaryExpression() const { return kind() == Kind::Ternary; }
     bool isUnsignedIntegerLiteral() const { return kind() == Kind::UnsignedIntegerLiteral; }
     bool isVariableReference() const { return kind() == Kind::VariableReference; }
