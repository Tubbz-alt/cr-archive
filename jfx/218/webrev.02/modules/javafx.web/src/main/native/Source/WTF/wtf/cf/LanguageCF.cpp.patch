diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/cf/LanguageCF.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/cf/LanguageCF.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/cf/LanguageCF.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/cf/LanguageCF.cpp
@@ -46,32 +46,43 @@
     return languages;
 }
 
 static String httpStyleLanguageCode(CFStringRef language)
 {
-    SInt32 languageCode;
-    SInt32 regionCode;
-    SInt32 scriptCode;
-    CFStringEncoding stringEncoding;
-
-    // FIXME: This transformation is very wrong:
-    // 1. There is no reason why CFBundle localization names would be at all related to language names as used on the Web.
-    // 2. Script Manager codes cannot represent all languages that are now supported by the platform, so the conversion is lossy.
-    // 3. This should probably match what is sent by the network layer as Accept-Language, but currently, that's implemented separately.
-    CFBundleGetLocalizationInfoForLocalization(language, &languageCode, &regionCode, &scriptCode, &stringEncoding);
-    RetainPtr<CFStringRef> preferredLanguageCode = adoptCF(CFBundleCopyLocalizationForLocalizationInfo(languageCode, regionCode, scriptCode, stringEncoding));
-    if (preferredLanguageCode)
-        language = preferredLanguageCode.get();
+    RetainPtr<CFStringRef> preferredLanguageCode;
+#if !PLATFORM(JAVA)
+    // If we can minimize the language list to reduce fingerprinting, we can afford to be more lossless when canonicalizing the locale list.
+    if (canMinimizeLanguages())
+        preferredLanguageCode = adoptCF(CFLocaleCreateCanonicalLanguageIdentifierFromString(kCFAllocatorDefault, language));
+    else {
+#endif
+        SInt32 languageCode;
+        SInt32 regionCode;
+        SInt32 scriptCode;
+        CFStringEncoding stringEncoding;
+
+        // FIXME: This transformation is very wrong:
+        // 1. There is no reason why CFBundle localization names would be at all related to language names as used on the Web.
+        // 2. Script Manager codes cannot represent all languages that are now supported by the platform, so the conversion is lossy.
+        // 3. This should probably match what is sent by the network layer as Accept-Language, but currently, that's implemented separately.
+        CFBundleGetLocalizationInfoForLocalization(language, &languageCode, &regionCode, &scriptCode, &stringEncoding);
+        preferredLanguageCode = adoptCF(CFBundleCopyLocalizationForLocalizationInfo(languageCode, regionCode, scriptCode, stringEncoding));
+#if !PLATFORM(JAVA)
+    }
+#endif
+
+    if (!preferredLanguageCode)
+        preferredLanguageCode = language;
+    auto mutableLanguageCode = adoptCF(CFStringCreateMutableCopy(kCFAllocatorDefault, 0, preferredLanguageCode.get()));
 
     // Turn a '_' into a '-' if it appears after a 2-letter language code
-    if (CFStringGetLength(language) >= 3 && CFStringGetCharacterAtIndex(language, 2) == '_') {
-        auto mutableLanguageCode = adoptCF(CFStringCreateMutableCopy(kCFAllocatorDefault, 0, language));
+    if (CFStringGetLength(mutableLanguageCode.get()) >= 3 && CFStringGetCharacterAtIndex(mutableLanguageCode.get(), 2) == '_')
         CFStringReplace(mutableLanguageCode.get(), CFRangeMake(2, 1), CFSTR("-"));
-        return mutableLanguageCode.get();
-    }
 
-    return language;
+    CFStringLowercase(mutableLanguageCode.get(), nullptr);
+    return mutableLanguageCode.get();
+
 }
 
 #if PLATFORM(MAC)
 static void languagePreferencesDidChange(CFNotificationCenterRef, void*, CFStringRef, const void*, CFDictionaryRef)
 {
@@ -96,10 +107,13 @@
     std::lock_guard<Lock> lock(preferredLanguagesMutex);
     Vector<String>& userPreferredLanguages = preferredLanguages();
 
     if (userPreferredLanguages.isEmpty()) {
         RetainPtr<CFArrayRef> languages = adoptCF(CFLocaleCopyPreferredLanguages());
+#if !PLATFORM(JAVA)
+        languages = minimizedLanguagesFromLanguages(languages.get());
+#endif
         CFIndex languageCount = CFArrayGetCount(languages.get());
         if (!languageCount)
             userPreferredLanguages.append("en");
         else {
             for (CFIndex i = 0; i < languageCount; i++)
