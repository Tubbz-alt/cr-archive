diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/VariableEnvironment.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/VariableEnvironment.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/VariableEnvironment.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/parser/VariableEnvironment.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015 Apple Inc. All Rights Reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All Rights Reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -78,16 +78,16 @@
     };
     uint16_t m_bits { 0 };
 };
 
 struct VariableEnvironmentEntryHashTraits : HashTraits<VariableEnvironmentEntry> {
-    static const bool needsDestruction = false;
+    static constexpr bool needsDestruction = false;
 };
 
 class VariableEnvironment {
 private:
-    typedef HashMap<RefPtr<UniquedStringImpl>, VariableEnvironmentEntry, IdentifierRepHash, HashTraits<RefPtr<UniquedStringImpl>>, VariableEnvironmentEntryHashTraits> Map;
+    typedef HashMap<PackedRefPtr<UniquedStringImpl>, VariableEnvironmentEntry, IdentifierRepHash, HashTraits<RefPtr<UniquedStringImpl>>, VariableEnvironmentEntryHashTraits> Map;
 public:
     VariableEnvironment() = default;
     VariableEnvironment(VariableEnvironment&& other) = default;
     VariableEnvironment(const VariableEnvironment&) = default;
     VariableEnvironment& operator=(const VariableEnvironment&) = default;
@@ -137,11 +137,11 @@
     unsigned hash() const { return m_hash; }
 
 private:
     CompactVariableEnvironment() = default;
 
-    Vector<RefPtr<UniquedStringImpl>> m_variables;
+    Vector<PackedRefPtr<UniquedStringImpl>> m_variables;
     Vector<VariableEnvironmentEntry> m_variableMetadata;
     unsigned m_hash;
     bool m_isEverythingCaptured;
 };
 
@@ -156,11 +156,11 @@
         : m_environment(&environment)
     { }
 
     static unsigned hash(const CompactVariableMapKey& key) { return key.m_environment->hash(); }
     static bool equal(const CompactVariableMapKey& a, const CompactVariableMapKey& b) { return *a.m_environment == *b.m_environment; }
-    static const bool safeToCompareToEmptyOrDeleted = false;
+    static constexpr bool safeToCompareToEmptyOrDeleted = false;
     static void makeDeletedValue(CompactVariableMapKey& key)
     {
         key.m_environment = reinterpret_cast<CompactVariableEnvironment*>(1);
     }
     bool isHashTableDeletedValue() const
@@ -191,14 +191,14 @@
 template<> struct DefaultHash<JSC::CompactVariableMapKey> {
     using Hash = JSC::CompactVariableMapKey;
 };
 
 template<> struct HashTraits<JSC::CompactVariableMapKey> : GenericHashTraits<JSC::CompactVariableMapKey> {
-    static const bool emptyValueIsZero = true;
+    static constexpr bool emptyValueIsZero = true;
     static JSC::CompactVariableMapKey emptyValue() { return JSC::CompactVariableMapKey(); }
 
-    static const bool hasIsEmptyValueFunction = true;
+    static constexpr bool hasIsEmptyValueFunction = true;
     static bool isEmptyValue(JSC::CompactVariableMapKey key) { return key.isHashTableEmptyValue(); }
 
     static void constructDeletedValue(JSC::CompactVariableMapKey& key) { JSC::CompactVariableMapKey::makeDeletedValue(key); }
     static bool isDeletedValue(JSC::CompactVariableMapKey key) { return key.isHashTableDeletedValue(); }
 };
