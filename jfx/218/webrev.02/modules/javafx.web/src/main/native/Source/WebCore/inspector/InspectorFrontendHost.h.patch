diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendHost.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendHost.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendHost.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/InspectorFrontendHost.h
@@ -79,17 +79,25 @@
 
     void startWindowDrag();
     void moveWindowBy(float x, float y) const;
 
     bool isRemote() const;
-    String localizedStringsURL();
-    String backendCommandsURL();
-    String debuggableType();
-    unsigned inspectionLevel();
-
-    String platform();
-    String port();
+    String localizedStringsURL() const;
+    String backendCommandsURL() const;
+    unsigned inspectionLevel() const;
+
+    String platform() const;
+    String port() const;
+
+    struct DebuggableInfo {
+        String debuggableType;
+        String targetPlatformName;
+        String targetBuildVersion;
+        String targetProductVersion;
+        bool targetIsSimulator;
+    };
+    DebuggableInfo debuggableInfo() const;
 
     void copyText(const String& text);
     void killText(const String& text, bool shouldPrependToKillRing, bool shouldStartNewSequence);
     void openInNewTab(const String& url);
     bool canSave();
@@ -109,16 +117,23 @@
 
     void sendMessageToBackend(const String& message);
     void dispatchEventAsContextMenuEvent(Event&);
 
     bool isUnderTest();
+    bool isExperimentalBuild();
     void unbufferedLog(const String& message);
 
     void beep();
     void inspectInspector();
     bool isBeingInspected();
 
+    bool supportsDiagnosticLogging();
+#if ENABLE(INSPECTOR_TELEMETRY)
+    bool diagnosticLoggingAvailable();
+    void logDiagnosticEvent(const String& eventName, const String& payload);
+#endif
+
 private:
 #if ENABLE(CONTEXT_MENUS)
     friend class FrontendMenuProvider;
 #endif
     WEBCORE_EXPORT InspectorFrontendHost(InspectorFrontendClient*, Page* frontendPage);
