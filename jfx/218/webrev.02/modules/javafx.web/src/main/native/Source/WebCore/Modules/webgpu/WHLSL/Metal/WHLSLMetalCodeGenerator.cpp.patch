diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLMetalCodeGenerator.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLMetalCodeGenerator.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLMetalCodeGenerator.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLMetalCodeGenerator.cpp
@@ -39,11 +39,11 @@
 
 namespace Metal {
 
 static constexpr bool dumpMetalCode = false;
 
-static StringView metalCodeProlog()
+static StringView metalCodePrologue()
 {
     return StringView {
         "#include <metal_stdlib>\n"
         "#include <metal_atomic>\n"
         "#include <metal_math>\n"
@@ -51,11 +51,60 @@
         "#include <metal_compute>\n"
         "#include <metal_texture>\n"
         "\n"
         "using namespace metal;\n"
         "\n"
+        "template <typename T, int Cols, int Rows>\n"
+        "struct WSLMatrix\n"
+        "{\n"
+        "    vec<T, Rows> columns[Cols];\n"
+        "    private:\n"
+        "    public:\n"
+        "    inline WSLMatrix() thread = default;\n"
+        "    inline WSLMatrix() constant = default;\n"
+        "    inline WSLMatrix(const thread WSLMatrix<T, Cols, Rows> &that) thread = default;\n"
+        "    inline WSLMatrix(const device WSLMatrix<T, Cols, Rows> &that) thread = default;\n"
+        "    inline WSLMatrix(const constant WSLMatrix<T, Cols, Rows> &that) thread = default;\n"
+        "    inline WSLMatrix(const threadgroup WSLMatrix<T, Cols, Rows> &that) thread = default;\n"
+        "    inline WSLMatrix(const thread WSLMatrix<T, Cols, Rows> &that) constant = default;\n"
+        "    inline WSLMatrix(const device WSLMatrix<T, Cols, Rows> &that) constant = default;\n"
+        "    inline WSLMatrix(const constant WSLMatrix<T, Cols, Rows> &that) constant = default;\n"
+        "    inline WSLMatrix(const threadgroup WSLMatrix<T, Cols, Rows> &that) constant = default;\n"
+        "    public:\n"
+        "    inline thread vec<T, Rows> &operator[](int r) thread\n"
+        "    {\n"
+        "        return columns[r];\n"
+        "    }\n"
+        "    inline device vec<T, Rows> &operator[](int r) device\n"
+        "    {\n"
+        "        return columns[r];\n"
+        "    }\n"
+        "    inline threadgroup vec<T, Rows> &operator[](int r) threadgroup\n"
+        "    {\n"
+        "        return columns[r];\n"
+        "    }\n"
+        "    inline const thread vec<T, Rows> &operator[](int r) const thread\n"
+        "    {\n"
+        "        return columns[r];\n"
+        "    }\n"
+        "    inline const device vec<T, Rows> &operator[](int r) const device\n"
+        "    {\n"
+        "        return columns[r];\n"
+        "    }\n"
+        "    inline const constant vec<T, Rows> &operator[](int r) const constant\n"
+        "    {\n"
+        "        return columns[r];\n"
+        "    }\n"
+        "    inline const threadgroup vec<T, Rows> &operator[](int r) const threadgroup\n"
+        "    {\n"
+        "        return columns[r];\n"
+        "    }\n"
+        "};\n"
+
+
     };
+
 }
 
 static void dumpMetalCodeIfNeeded(StringBuilder& stringBuilder)
 {
     if (dumpMetalCode) {
@@ -65,11 +114,11 @@
 }
 
 RenderMetalCode generateMetalCode(Program& program, MatchedRenderSemantics&& matchedSemantics, Layout& layout)
 {
     StringBuilder stringBuilder;
-    stringBuilder.append(metalCodeProlog());
+    stringBuilder.append(metalCodePrologue());
 
     TypeNamer typeNamer(program);
     typeNamer.emitMetalTypes(stringBuilder);
 
     auto metalFunctionEntryPoints = Metal::emitMetalFunctions(stringBuilder, program, typeNamer, WTFMove(matchedSemantics), layout);
@@ -80,11 +129,11 @@
 }
 
 ComputeMetalCode generateMetalCode(Program& program, MatchedComputeSemantics&& matchedSemantics, Layout& layout)
 {
     StringBuilder stringBuilder;
-    stringBuilder.append(metalCodeProlog());
+    stringBuilder.append(metalCodePrologue());
 
     TypeNamer typeNamer(program);
     typeNamer.emitMetalTypes(stringBuilder);
 
     auto metalFunctionEntryPoints = Metal::emitMetalFunctions(stringBuilder, program, typeNamer, WTFMove(matchedSemantics), layout);
