diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSStringInlines.h
@@ -34,45 +34,45 @@
     if (isRope())
         return;
     valueInternal().~String();
 }
 
-bool JSString::equal(ExecState* exec, JSString* other) const
+bool JSString::equal(JSGlobalObject* globalObject, JSString* other) const
 {
     if (isRope() || other->isRope())
-        return equalSlowCase(exec, other);
+        return equalSlowCase(globalObject, other);
     return WTF::equal(*valueInternal().impl(), *other->valueInternal().impl());
 }
 
 template<typename StringType>
 inline JSValue jsMakeNontrivialString(VM& vm, StringType&& string)
 {
     return jsNontrivialString(vm, std::forward<StringType>(string));
 }
 
 template<typename StringType, typename... StringTypes>
-inline JSValue jsMakeNontrivialString(ExecState* exec, StringType&& string, StringTypes&&... strings)
+inline JSValue jsMakeNontrivialString(JSGlobalObject* globalObject, StringType&& string, StringTypes&&... strings)
 {
-    VM& vm = exec->vm();
+    VM& vm = getVM(globalObject);
     auto scope = DECLARE_THROW_SCOPE(vm);
     String result = tryMakeString(std::forward<StringType>(string), std::forward<StringTypes>(strings)...);
     if (UNLIKELY(!result))
-        return throwOutOfMemoryError(exec, scope);
+        return throwOutOfMemoryError(globalObject, scope);
     ASSERT(result.length() <= JSString::MaxLength);
     return jsNontrivialString(vm, WTFMove(result));
 }
 
 template <typename CharacterType>
-inline JSString* repeatCharacter(ExecState& exec, CharacterType character, unsigned repeatCount)
+inline JSString* repeatCharacter(JSGlobalObject* globalObject, CharacterType character, unsigned repeatCount)
 {
-    VM& vm = exec.vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     CharacterType* buffer = nullptr;
     auto impl = StringImpl::tryCreateUninitialized(repeatCount, buffer);
     if (!impl) {
-        throwOutOfMemoryError(&exec, scope);
+        throwOutOfMemoryError(globalObject, scope);
         return nullptr;
     }
 
     std::fill_n(buffer, repeatCount, character);
 
