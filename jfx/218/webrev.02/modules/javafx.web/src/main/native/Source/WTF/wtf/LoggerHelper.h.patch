diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/LoggerHelper.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/LoggerHelper.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/LoggerHelper.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/LoggerHelper.h
@@ -56,22 +56,22 @@
 #define INFO_LOG_IF(condition, ...)       if (condition) logger().info(logChannel(), __VA_ARGS__)
 #define DEBUG_LOG_IF(condition, ...)      if (condition) logger().debug(logChannel(), __VA_ARGS__)
 
     const void* childLogIdentifier(uint64_t identifier) const
     {
-        static const uint64_t parentMask = 0xffffffffffff0000ull;
-        static const uint64_t maskLowerWord = 0xffffull;
+        static constexpr uint64_t parentMask = 0xffffffffffff0000ull;
+        static constexpr uint64_t maskLowerWord = 0xffffull;
         return reinterpret_cast<const void*>((reinterpret_cast<uint64_t>(logIdentifier()) & parentMask) | (identifier & maskLowerWord));
     }
 
     static const void* uniqueLogIdentifier()
     {
-        static uint64_t highWord = cryptographicallyRandomNumber();
-        static uint64_t lowWord = cryptographicallyRandomNumber();
+        uint64_t highWord = cryptographicallyRandomNumber();
+        uint64_t lowWord = cryptographicallyRandomNumber();
         return reinterpret_cast<const void*>((highWord << 32) + lowWord);
     }
-#else
+#else // RELEASE_LOG_DISABLED
 
 #define LOGIDENTIFIER (WTF::nullopt)
 
 #define ALWAYS_LOG(...)     ((void)0)
 #define ERROR_LOG(...)      ((void)0)
@@ -86,11 +86,11 @@
 #define ERROR_LOG_IF(condition, ...)      ((void)0)
 #define WARNING_LOG_IF(condition, ...)    ((void)0)
 #define INFO_LOG_IF(condition, ...)       ((void)0)
 #define DEBUG_LOG_IF(condition, ...)      ((void)0)
 
-#endif
+#endif // RELEASE_LOG_DISABLED
 
 };
 
 } // namespace WTF
 
