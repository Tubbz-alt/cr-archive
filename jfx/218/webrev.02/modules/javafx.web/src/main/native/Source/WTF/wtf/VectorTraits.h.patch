diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/VectorTraits.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/VectorTraits.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/VectorTraits.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/VectorTraits.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2006, 2007, 2008, 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2006-2019 Apple Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
  * License as published by the Free Software Foundation; either
  * version 2 of the License, or (at your option) any later version.
@@ -34,37 +34,37 @@
     struct VectorTraitsBase;
 
     template<typename T>
     struct VectorTraitsBase<false, T>
     {
-        static const bool needsInitialization = true;
-        static const bool canInitializeWithMemset = false;
-        static const bool canMoveWithMemcpy = false;
-        static const bool canCopyWithMemcpy = false;
-        static const bool canFillWithMemset = false;
-        static const bool canCompareWithMemcmp = false;
+        static constexpr bool needsInitialization = true;
+        static constexpr bool canInitializeWithMemset = false;
+        static constexpr bool canMoveWithMemcpy = false;
+        static constexpr bool canCopyWithMemcpy = false;
+        static constexpr bool canFillWithMemset = false;
+        static constexpr bool canCompareWithMemcmp = false;
     };
 
     template<typename T>
     struct VectorTraitsBase<true, T>
     {
-        static const bool needsInitialization = false;
-        static const bool canInitializeWithMemset = true;
-        static const bool canMoveWithMemcpy = true;
-        static const bool canCopyWithMemcpy = true;
-        static const bool canFillWithMemset = sizeof(T) == sizeof(char) && std::is_integral<T>::value;
-        static const bool canCompareWithMemcmp = true;
+        static constexpr bool needsInitialization = false;
+        static constexpr bool canInitializeWithMemset = true;
+        static constexpr bool canMoveWithMemcpy = true;
+        static constexpr bool canCopyWithMemcpy = true;
+        static constexpr bool canFillWithMemset = sizeof(T) == sizeof(char) && std::is_integral<T>::value;
+        static constexpr bool canCompareWithMemcmp = true;
     };
 
     template<typename T>
     struct VectorTraits : VectorTraitsBase<std::is_pod<T>::value, T> { };
 
     struct SimpleClassVectorTraits : VectorTraitsBase<false, void>
     {
-        static const bool canInitializeWithMemset = true;
-        static const bool canMoveWithMemcpy = true;
-        static const bool canCompareWithMemcmp = true;
+        static constexpr bool canInitializeWithMemset = true;
+        static constexpr bool canMoveWithMemcpy = true;
+        static constexpr bool canCompareWithMemcmp = true;
     };
 
     // We know smart pointers are simple enough that initializing to 0 and moving with memcpy
     // (and then not destructing the original) will work.
 
@@ -77,16 +77,16 @@
     struct VectorTraits<std::pair<First, Second>>
     {
         typedef VectorTraits<First> FirstTraits;
         typedef VectorTraits<Second> SecondTraits;
 
-        static const bool needsInitialization = FirstTraits::needsInitialization || SecondTraits::needsInitialization;
-        static const bool canInitializeWithMemset = FirstTraits::canInitializeWithMemset && SecondTraits::canInitializeWithMemset;
-        static const bool canMoveWithMemcpy = FirstTraits::canMoveWithMemcpy && SecondTraits::canMoveWithMemcpy;
-        static const bool canCopyWithMemcpy = FirstTraits::canCopyWithMemcpy && SecondTraits::canCopyWithMemcpy;
-        static const bool canFillWithMemset = false;
-        static const bool canCompareWithMemcmp = FirstTraits::canCompareWithMemcmp && SecondTraits::canCompareWithMemcmp;
+        static constexpr bool needsInitialization = FirstTraits::needsInitialization || SecondTraits::needsInitialization;
+        static constexpr bool canInitializeWithMemset = FirstTraits::canInitializeWithMemset && SecondTraits::canInitializeWithMemset;
+        static constexpr bool canMoveWithMemcpy = FirstTraits::canMoveWithMemcpy && SecondTraits::canMoveWithMemcpy;
+        static constexpr bool canCopyWithMemcpy = FirstTraits::canCopyWithMemcpy && SecondTraits::canCopyWithMemcpy;
+        static constexpr bool canFillWithMemset = false;
+        static constexpr bool canCompareWithMemcmp = FirstTraits::canCompareWithMemcmp && SecondTraits::canCompareWithMemcmp;
     };
 
 } // namespace WTF
 
 using WTF::VectorTraits;
