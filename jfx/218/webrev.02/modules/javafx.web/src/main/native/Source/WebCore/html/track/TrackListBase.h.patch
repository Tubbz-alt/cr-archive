diff a/modules/javafx.web/src/main/native/Source/WebCore/html/track/TrackListBase.h b/modules/javafx.web/src/main/native/Source/WebCore/html/track/TrackListBase.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/track/TrackListBase.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/track/TrackListBase.h
@@ -25,23 +25,24 @@
 
 #pragma once
 
 #if ENABLE(VIDEO_TRACK)
 
-#include "ActiveDOMObject.h"
+#include "ContextDestructionObserver.h"
 #include "EventTarget.h"
 #include "GenericEventQueue.h"
 #include <wtf/RefCounted.h>
 #include <wtf/Vector.h>
+#include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
 class HTMLMediaElement;
 class Element;
 class TrackBase;
 
-class TrackListBase : public RefCounted<TrackListBase>, public EventTargetWithInlineData, public ActiveDOMObject {
+class TrackListBase : public RefCounted<TrackListBase>, public EventTargetWithInlineData, public ContextDestructionObserver {
     WTF_MAKE_ISO_ALLOCATED(TrackListBase);
 public:
     virtual ~TrackListBase();
 
     virtual unsigned length() const;
@@ -54,41 +55,36 @@
     using RefCounted<TrackListBase>::deref;
     ScriptExecutionContext* scriptExecutionContext() const final { return ContextDestructionObserver::scriptExecutionContext(); }
 
     virtual void clearElement();
     Element* element() const;
-    HTMLMediaElement* mediaElement() const { return m_element; }
+    WeakPtr<HTMLMediaElement> mediaElement() const { return m_element; }
 
     // Needs to be public so tracks can call it
     void scheduleChangeEvent();
     bool isChangeEventScheduled() const;
 
     bool isAnyTrackEnabled() const;
 
 protected:
-    TrackListBase(HTMLMediaElement*, ScriptExecutionContext*);
+    TrackListBase(WeakPtr<HTMLMediaElement>, ScriptExecutionContext*);
 
     void scheduleAddTrackEvent(Ref<TrackBase>&&);
     void scheduleRemoveTrackEvent(Ref<TrackBase>&&);
 
     Vector<RefPtr<TrackBase>> m_inbandTracks;
 
 private:
     void scheduleTrackEvent(const AtomString& eventName, Ref<TrackBase>&&);
 
-    bool canSuspendForDocumentSuspension() const final;
-    void suspend(ReasonForSuspension) final;
-    void resume() final;
-    void stop() final;
-
     // EventTarget
     void refEventTarget() final { ref(); }
     void derefEventTarget() final { deref(); }
 
-    HTMLMediaElement* m_element;
+    WeakPtr<HTMLMediaElement> m_element;
 
-    GenericEventQueue m_asyncEventQueue;
+    UniqueRef<MainThreadGenericEventQueue> m_asyncEventQueue;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(VIDEO_TRACK)
