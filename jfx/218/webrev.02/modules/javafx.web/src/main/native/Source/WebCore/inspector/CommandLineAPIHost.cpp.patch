diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.cpp
@@ -40,10 +40,11 @@
 #include "JSDOMGlobalObject.h"
 #include "JSEventListener.h"
 #include "Pasteboard.h"
 #include "Storage.h"
 #include "WebConsoleAgent.h"
+#include <JavaScriptCore/ConsoleMessage.h>
 #include <JavaScriptCore/InspectorAgent.h>
 #include <JavaScriptCore/JSCInlines.h>
 #include <JavaScriptCore/JSLock.h>
 #include <JavaScriptCore/ScriptValue.h>
 #include <wtf/JSONValues.h>
@@ -71,36 +72,36 @@
 {
 
     m_instrumentingAgents = nullptr;
 }
 
-void CommandLineAPIHost::inspect(JSC::ExecState& state, JSC::JSValue valueToInspect, JSC::JSValue hintsValue)
+void CommandLineAPIHost::inspect(JSC::JSGlobalObject& lexicalGlobalObject, JSC::JSValue valueToInspect, JSC::JSValue hintsValue)
 {
     if (!m_instrumentingAgents)
         return;
 
     auto* inspectorAgent = m_instrumentingAgents->inspectorAgent();
     if (!inspectorAgent)
         return;
 
     RefPtr<JSON::Object> hintsObject;
-    if (!Inspector::toInspectorValue(state, hintsValue)->asObject(hintsObject))
+    if (!Inspector::toInspectorValue(&lexicalGlobalObject, hintsValue)->asObject(hintsObject))
         return;
 
-    auto remoteObject = BindingTraits<Inspector::Protocol::Runtime::RemoteObject>::runtimeCast(Inspector::toInspectorValue(state, valueToInspect));
+    auto remoteObject = BindingTraits<Inspector::Protocol::Runtime::RemoteObject>::runtimeCast(Inspector::toInspectorValue(&lexicalGlobalObject, valueToInspect));
     inspectorAgent->inspect(WTFMove(remoteObject), WTFMove(hintsObject));
 }
 
-CommandLineAPIHost::EventListenersRecord CommandLineAPIHost::getEventListeners(ExecState& state, EventTarget& target)
+CommandLineAPIHost::EventListenersRecord CommandLineAPIHost::getEventListeners(JSGlobalObject& lexicalGlobalObject, EventTarget& target)
 {
     auto* scriptExecutionContext = target.scriptExecutionContext();
     if (!scriptExecutionContext)
         return { };
 
     EventListenersRecord result;
 
-    VM& vm = state.vm();
+    VM& vm = lexicalGlobalObject.vm();
 
     for (auto& eventType : target.eventTypes()) {
         Vector<CommandLineAPIHost::ListenerEntry> entries;
 
         for (auto& eventListener : target.eventListeners(eventType)) {
@@ -108,11 +109,11 @@
                 continue;
 
             auto& jsListener = downcast<JSEventListener>(eventListener->callback());
 
             // Hide listeners from other contexts.
-            if (&jsListener.isolatedWorld() != &currentWorld(state))
+            if (&jsListener.isolatedWorld() != &currentWorld(lexicalGlobalObject))
                 continue;
 
             auto* function = jsListener.jsFunction(*scriptExecutionContext);
             if (!function)
                 continue;
@@ -143,27 +144,27 @@
 void CommandLineAPIHost::copyText(const String& text)
 {
     Pasteboard::createForCopyAndPaste()->writePlainText(text, Pasteboard::CannotSmartReplace);
 }
 
-JSC::JSValue CommandLineAPIHost::InspectableObject::get(JSC::ExecState&)
+JSC::JSValue CommandLineAPIHost::InspectableObject::get(JSC::JSGlobalObject&)
 {
     return { };
 }
 
 void CommandLineAPIHost::addInspectedObject(std::unique_ptr<CommandLineAPIHost::InspectableObject> object)
 {
     m_inspectedObject = WTFMove(object);
 }
 
-JSC::JSValue CommandLineAPIHost::inspectedObject(JSC::ExecState& state)
+JSC::JSValue CommandLineAPIHost::inspectedObject(JSC::JSGlobalObject& lexicalGlobalObject)
 {
     if (!m_inspectedObject)
         return jsUndefined();
 
-    JSC::JSLockHolder lock(&state);
-    auto scriptValue = m_inspectedObject->get(state);
+    JSC::JSLockHolder lock(&lexicalGlobalObject);
+    auto scriptValue = m_inspectedObject->get(lexicalGlobalObject);
     return scriptValue ? scriptValue : jsUndefined();
 }
 
 String CommandLineAPIHost::databaseId(Database& database)
 {
@@ -177,11 +178,11 @@
 String CommandLineAPIHost::storageId(Storage& storage)
 {
     return InspectorDOMStorageAgent::storageId(storage);
 }
 
-JSValue CommandLineAPIHost::wrapper(ExecState* exec, JSDOMGlobalObject* globalObject)
+JSValue CommandLineAPIHost::wrapper(JSGlobalObject* exec, JSDOMGlobalObject* globalObject)
 {
     JSValue value = m_wrappers.getWrapper(globalObject);
     if (value)
         return value;
 
