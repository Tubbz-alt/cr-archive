diff a/modules/javafx.web/src/main/native/Source/WebCore/editing/VisiblePosition.cpp b/modules/javafx.web/src/main/native/Source/WebCore/editing/VisiblePosition.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/editing/VisiblePosition.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/editing/VisiblePosition.cpp
@@ -134,11 +134,11 @@
         while (true) {
             if ((renderer->isReplaced() || renderer->isBR()) && offset == box->caretRightmostOffset())
                 return box->isLeftToRightDirection() ? previousVisuallyDistinctCandidate(m_deepPosition) : nextVisuallyDistinctCandidate(m_deepPosition);
 
             if (!renderer->node()) {
-                box = box->prevLeafChild();
+                box = box->previousLeafOnLine();
                 if (!box)
                     return primaryDirection == TextDirection::LTR ? previousVisuallyDistinctCandidate(m_deepPosition) : nextVisuallyDistinctCandidate(m_deepPosition);
                 renderer = &box->renderer();
                 offset = box->caretRightmostOffset();
                 continue;
@@ -152,11 +152,11 @@
             if (offset > caretMinOffset && offset < caretMaxOffset)
                 break;
 
             if (box->isLeftToRightDirection() ? offset < caretMinOffset : offset > caretMaxOffset) {
                 // Overshot to the left.
-                InlineBox* prevBox = box->prevLeafChildIgnoringLineBreak();
+                InlineBox* prevBox = box->previousLeafOnLineIgnoringLineBreak();
                 if (!prevBox) {
                     Position positionOnLeft = primaryDirection == TextDirection::LTR ? previousVisuallyDistinctCandidate(m_deepPosition) : nextVisuallyDistinctCandidate(m_deepPosition);
                     if (positionOnLeft.isNull())
                         return Position();
 
@@ -176,11 +176,11 @@
             }
 
             ASSERT(offset == box->caretLeftmostOffset());
 
             unsigned char level = box->bidiLevel();
-            InlineBox* prevBox = box->prevLeafChild();
+            InlineBox* prevBox = box->previousLeafOnLine();
 
             if (box->direction() == primaryDirection) {
                 if (!prevBox) {
                     InlineBox* logicalStart = nullptr;
                     if (primaryDirection == TextDirection::LTR ? box->root().getLogicalStartBoxWithNode(logicalStart) : box->root().getLogicalEndBoxWithNode(logicalStart)) {
@@ -195,11 +195,11 @@
 
                 level = prevBox->bidiLevel();
 
                 InlineBox* nextBox = box;
                 do {
-                    nextBox = nextBox->nextLeafChild();
+                    nextBox = nextBox->nextLeafOnLine();
                 } while (nextBox && nextBox->bidiLevel() > level);
 
                 if (nextBox && nextBox->bidiLevel() == level)
                     break;
 
@@ -210,36 +210,36 @@
                     break;
                 continue;
             }
 
             while (prevBox && !prevBox->renderer().node())
-                prevBox = prevBox->prevLeafChild();
+                prevBox = prevBox->previousLeafOnLine();
 
             if (prevBox) {
                 box = prevBox;
                 renderer = &box->renderer();
                 offset = box->caretRightmostOffset();
                 if (box->bidiLevel() > level) {
                     do {
-                        prevBox = prevBox->prevLeafChild();
+                        prevBox = prevBox->previousLeafOnLine();
                     } while (prevBox && prevBox->bidiLevel() > level);
 
                     if (!prevBox || prevBox->bidiLevel() < level)
                         continue;
                 }
             } else {
                 // Trailing edge of a secondary run. Set to the leading edge of the entire run.
                 while (true) {
-                    while (InlineBox* nextBox = box->nextLeafChild()) {
+                    while (InlineBox* nextBox = box->nextLeafOnLine()) {
                         if (nextBox->bidiLevel() < level)
                             break;
                         box = nextBox;
                     }
                     if (box->bidiLevel() == level)
                         break;
                     level = box->bidiLevel();
-                    while (InlineBox* prevBox = box->prevLeafChild()) {
+                    while (InlineBox* prevBox = box->previousLeafOnLine()) {
                         if (prevBox->bidiLevel() < level)
                             break;
                         box = prevBox;
                     }
                     if (box->bidiLevel() == level)
@@ -304,11 +304,11 @@
         while (true) {
             if ((renderer->isReplaced() || renderer->isBR()) && offset == box->caretLeftmostOffset())
                 return box->isLeftToRightDirection() ? nextVisuallyDistinctCandidate(m_deepPosition) : previousVisuallyDistinctCandidate(m_deepPosition);
 
             if (!renderer->node()) {
-                box = box->nextLeafChild();
+                box = box->nextLeafOnLine();
                 if (!box)
                     return primaryDirection == TextDirection::LTR ? nextVisuallyDistinctCandidate(m_deepPosition) : previousVisuallyDistinctCandidate(m_deepPosition);
                 renderer = &box->renderer();
                 offset = box->caretLeftmostOffset();
                 continue;
@@ -322,11 +322,11 @@
             if (offset > caretMinOffset && offset < caretMaxOffset)
                 break;
 
             if (box->isLeftToRightDirection() ? offset > caretMaxOffset : offset < caretMinOffset) {
                 // Overshot to the right.
-                InlineBox* nextBox = box->nextLeafChildIgnoringLineBreak();
+                InlineBox* nextBox = box->nextLeafOnLineIgnoringLineBreak();
                 if (!nextBox) {
                     Position positionOnRight = primaryDirection == TextDirection::LTR ? nextVisuallyDistinctCandidate(m_deepPosition) : previousVisuallyDistinctCandidate(m_deepPosition);
                     if (positionOnRight.isNull())
                         return Position();
 
@@ -346,11 +346,11 @@
             }
 
             ASSERT(offset == box->caretRightmostOffset());
 
             unsigned char level = box->bidiLevel();
-            InlineBox* nextBox = box->nextLeafChild();
+            InlineBox* nextBox = box->nextLeafOnLine();
 
             if (box->direction() == primaryDirection) {
                 if (!nextBox) {
                     InlineBox* logicalEnd = nullptr;
                     if (primaryDirection == TextDirection::LTR ? box->root().getLogicalEndBoxWithNode(logicalEnd) : box->root().getLogicalStartBoxWithNode(logicalEnd)) {
@@ -366,11 +366,11 @@
 
                 level = nextBox->bidiLevel();
 
                 InlineBox* prevBox = box;
                 do {
-                    prevBox = prevBox->prevLeafChild();
+                    prevBox = prevBox->previousLeafOnLine();
                 } while (prevBox && prevBox->bidiLevel() > level);
 
                 if (prevBox && prevBox->bidiLevel() == level)   // For example, abc FED 123 ^ CBA
                     break;
 
@@ -382,37 +382,37 @@
                     break;
                 continue;
             }
 
             while (nextBox && !nextBox->renderer().node())
-                nextBox = nextBox->nextLeafChild();
+                nextBox = nextBox->nextLeafOnLine();
 
             if (nextBox) {
                 box = nextBox;
                 renderer = &box->renderer();
                 offset = box->caretLeftmostOffset();
 
                 if (box->bidiLevel() > level) {
                     do {
-                        nextBox = nextBox->nextLeafChild();
+                        nextBox = nextBox->nextLeafOnLine();
                     } while (nextBox && nextBox->bidiLevel() > level);
 
                     if (!nextBox || nextBox->bidiLevel() < level)
                         continue;
                 }
             } else {
                 // Trailing edge of a secondary run. Set to the leading edge of the entire run.
                 while (true) {
-                    while (InlineBox* prevBox = box->prevLeafChild()) {
+                    while (InlineBox* prevBox = box->previousLeafOnLine()) {
                         if (prevBox->bidiLevel() < level)
                             break;
                         box = prevBox;
                     }
                     if (box->bidiLevel() == level)
                         break;
                     level = box->bidiLevel();
-                    while (InlineBox* nextBox = box->nextLeafChild()) {
+                    while (InlineBox* nextBox = box->nextLeafOnLine()) {
                         if (nextBox->bidiLevel() < level)
                             break;
                         box = nextBox;
                     }
                     if (box->bidiLevel() == level)
@@ -665,10 +665,31 @@
     RenderBlock* renderer = nullptr;
     LayoutRect localRect = localCaretRectInRendererForCaretPainting(*this, renderer);
     return absoluteBoundsForLocalCaretRect(renderer, localRect, insideFixed);
 }
 
+FloatRect VisiblePosition::absoluteSelectionBoundsForLine() const
+{
+    if (m_deepPosition.isNull())
+        return { };
+
+    auto* node = m_deepPosition.anchorNode();
+    if (!node->renderer())
+        return { };
+
+    InlineBox* inlineBox = nullptr;
+    int caretOffset = 0;
+    getInlineBoxAndOffset(inlineBox, caretOffset);
+
+    if (!inlineBox)
+        return { };
+
+    auto& root = inlineBox->root();
+    auto localRect = FloatRect { root.x(), root.selectionTop(), root.width(), root.selectionHeight() };
+    return root.renderer().localToAbsoluteQuad(localRect).boundingBox();
+}
+
 int VisiblePosition::lineDirectionPointForBlockDirectionNavigation() const
 {
     RenderObject* renderer;
     LayoutRect localRect = localCaretRect(renderer);
     if (localRect.isEmpty() || !renderer)
@@ -786,10 +807,15 @@
 
     VisiblePosition next = visiblePosition.next();
     return next.isNull() || !next.deepEquivalent().deprecatedNode()->isDescendantOf(node);
 }
 
+bool areVisiblePositionsInSameTreeScope(const VisiblePosition& a, const VisiblePosition& b)
+{
+    return areNodesConnectedInSameTreeScope(a.deepEquivalent().anchorNode(), b.deepEquivalent().anchorNode());
+}
+
 bool VisiblePosition::equals(const VisiblePosition& other) const
 {
     return m_affinity == other.m_affinity && m_deepPosition.equals(other.m_deepPosition);
 }
 
