diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceResponseBase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceResponseBase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceResponseBase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/network/ResourceResponseBase.cpp
@@ -92,10 +92,11 @@
     data.httpHeaderFields = httpHeaderFields().isolatedCopy();
     data.networkLoadMetrics = m_networkLoadMetrics.isolatedCopy();
     data.type = m_type;
     data.tainting = m_tainting;
     data.isRedirected = m_isRedirected;
+    data.isRangeRequested = m_isRangeRequested;
 
     return data;
 }
 
 ResourceResponse ResourceResponseBase::fromCrossThreadData(CrossThreadData&& data)
@@ -114,10 +115,11 @@
     response.m_httpHeaderFields = WTFMove(data.httpHeaderFields);
     response.m_networkLoadMetrics = data.networkLoadMetrics;
     response.m_type = data.type;
     response.m_tainting = data.tainting;
     response.m_isRedirected = data.isRedirected;
+    response.m_isRangeRequested = data.isRangeRequested;
 
     return response;
 }
 
 ResourceResponse ResourceResponseBase::syntheticRedirectResponse(const URL& fromURL, const URL& toURL)
@@ -257,15 +259,16 @@
 {
     m_isNull = false;
     m_type = type;
 }
 
-void ResourceResponseBase::includeCertificateInfo() const
+void ResourceResponseBase::includeCertificateInfo(UsedLegacyTLS usedLegacyTLS) const
 {
     if (m_certificateInfo)
         return;
     m_certificateInfo = static_cast<const ResourceResponse*>(this)->platformCertificateInfo();
+    m_usedLegacyTLS = usedLegacyTLS;
 }
 
 String ResourceResponseBase::suggestedFilename() const
 {
     return static_cast<const ResourceResponse*>(this)->platformSuggestedFilename();
@@ -653,10 +656,17 @@
     if (!m_haveParsedCacheControlHeader)
         parseCacheControlDirectives();
     return m_cacheControlDirectives.maxAge;
 }
 
+Optional<Seconds> ResourceResponseBase::cacheControlStaleWhileRevalidate() const
+{
+    if (!m_haveParsedCacheControlHeader)
+        parseCacheControlDirectives();
+    return m_cacheControlDirectives.staleWhileRevalidate;
+}
+
 static Optional<WallTime> parseDateValueInHeader(const HTTPHeaderMap& headers, HTTPHeaderName headerName)
 {
     String headerValue = headers.get(headerName);
     if (headerValue.isEmpty())
         return WTF::nullopt;
