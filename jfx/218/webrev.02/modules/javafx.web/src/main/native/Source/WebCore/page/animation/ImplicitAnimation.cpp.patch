diff a/modules/javafx.web/src/main/native/Source/WebCore/page/animation/ImplicitAnimation.cpp b/modules/javafx.web/src/main/native/Source/WebCore/page/animation/ImplicitAnimation.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/page/animation/ImplicitAnimation.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/page/animation/ImplicitAnimation.cpp
@@ -210,11 +210,11 @@
             String propertyName = getPropertyNameString(m_animatingProperty);
 
             // Dispatch the event
             auto element = makeRefPtr(this->element());
 
-            ASSERT(!element || element->document().pageCacheState() == Document::NotInPageCache);
+            ASSERT(!element || element->document().backForwardCacheState() == Document::NotInBackForwardCache);
             if (!element)
                 return false;
 
             // Schedule event handling
             m_compositeAnimation->animationController().addEventToDispatch(*element, eventType, propertyName, elapsedTime);
@@ -358,11 +358,15 @@
 
 Optional<Seconds> ImplicitAnimation::timeToNextService()
 {
     Optional<Seconds> t = AnimationBase::timeToNextService();
     if (!t || t.value() != 0_s || preActive())
+#if COMPILER(MSVC) && _MSC_VER >= 1920
+        return WTFMove(t);
+#else
         return t;
+#endif
 
     // A return value of 0 means we need service. But if this is an accelerated animation we
     // only need service at the end of the transition.
     if (CSSPropertyAnimation::animationOfPropertyIsAccelerated(m_animatingProperty) && isAccelerated()) {
         bool isLooping;
