diff a/modules/javafx.web/src/main/native/Tools/Scripts/set-webkit-configuration b/modules/javafx.web/src/main/native/Tools/Scripts/set-webkit-configuration
--- a/modules/javafx.web/src/main/native/Tools/Scripts/set-webkit-configuration
+++ b/modules/javafx.web/src/main/native/Tools/Scripts/set-webkit-configuration
@@ -1,8 +1,8 @@
 #!/usr/bin/env perl
 
-# Copyright (C) 2005 Apple Inc.  All rights reserved.
+# Copyright (C) 2005-2019 Apple Inc.  All rights reserved.
 #
 # Redistribution and use in source and binary forms, with or without
 # modification, are permitted provided that the following conditions
 # are met:
 #
@@ -33,27 +33,36 @@
 use webkitdirs;
 
 my $programName = basename($0);
 my $usage = <<EOF;
 Usage: $programName [options]
-  --32-bit                Set the default architecture to 32-bit
-  --64-bit                Set the default architecture to 64-bit
-  --[no-]asan             Enable or disable clang address sanitizer
-  --lto-mode=<mode>       Set LTO mode: full, thin, or none
-  --debug                 Set the default configuration to debug
-  --release               Set the default configuration to release
-  --reset                 Reset configurations
+  --32-bit                           Set the default architecture to 32-bit
+  --64-bit                           Set the default architecture to 64-bit
+  --[no-]asan                        Enable or disable clang address sanitizer
+  --[no-]coverage                    Enable or disable LLVM Source-based Code Coverage
+  --force-optimization-level=<level> Optimization level: O3, O2, O1, O0, Os, Ofast, Og, or none
+  --lto-mode=<mode>                  Set LTO mode: full, thin, or none
+  --debug                            Set the default configuration to debug
+  --release                          Set the default configuration to release
+  --reset                            Reset configurations
 EOF
 
 my $configuration = passedConfiguration();
 my $architecture = passedArchitecture();
 my $enableASAN = checkForArgumentAndRemoveFromARGV("--asan");
 my $disableASAN = checkForArgumentAndRemoveFromARGV("--no-asan");
+my $enableCoverage = checkForArgumentAndRemoveFromARGV("--coverage");
+my $disableCoverage = checkForArgumentAndRemoveFromARGV("--no-coverage");
 my $ltoMode;
 if (!checkForArgumentAndRemoveFromARGVGettingValue("--lto-mode", \$ltoMode)) {
     $ltoMode="";
 }
+my $forceOptimizationLevel;
+if (!checkForArgumentAndRemoveFromARGVGettingValue("--force-optimization-level", \$forceOptimizationLevel)
+    && !checkForArgumentAndRemoveFromARGVGettingValue("--force-opt", \$forceOptimizationLevel)) {
+    $forceOptimizationLevel="";
+}
 
 if (!$architecture) {
     # Handle --64-bit explicitly here, as we don't want our other scripts to accept it
     for my $i (0 .. $#ARGV) {
         my $opt = $ARGV[$i];
@@ -69,24 +78,41 @@
 
 if (checkForArgumentAndRemoveFromARGV("--reset")) {
     unlink "$baseProductDir/Configuration";
     unlink "$baseProductDir/Architecture";
     unlink "$baseProductDir/ASan";
+    unlink "$baseProductDir/ForceOptimizationLevel";
+    unlink "$baseProductDir/Coverage";
     unlink "$baseProductDir/LTO";
     exit 0;
 }
 
-if ((!$configuration && !$architecture && !$enableASAN && !$disableASAN && !$ltoMode) || ($enableASAN && $disableASAN)) {
+if ((!$configuration && !$architecture && !$enableASAN && !$disableASAN && !$enableCoverage && !$disableCoverage && !$ltoMode && !$forceOptimizationLevel)
+    || ($enableASAN && $disableASAN)
+    || ($enableCoverage && $disableCoverage)) {
     print STDERR $usage;
     exit 1;
 }
 
 if ($ltoMode && $ltoMode ne "full" && $ltoMode ne "thin" && $ltoMode ne "none") {
     print STDERR $usage;
     exit 1;
 }
 
+if ($forceOptimizationLevel
+    && $forceOptimizationLevel ne "none"
+    && $forceOptimizationLevel ne "O0"
+    && $forceOptimizationLevel ne "O1"
+    && $forceOptimizationLevel ne "O2"
+    && $forceOptimizationLevel ne "O3"
+    && $forceOptimizationLevel ne "Os"
+    && $forceOptimizationLevel ne "Ofast"
+    && $forceOptimizationLevel ne "Og") {
+    print STDERR $usage;
+    exit 1;
+}
+
 if ($configuration) {
     open CONFIGURATION, ">", "$baseProductDir/Configuration" or die;
     print CONFIGURATION $configuration;
     close CONFIGURATION;
 }
@@ -107,10 +133,26 @@
     close ASAN;
 } elsif ($disableASAN) {
     unlink "$baseProductDir/ASan";
 }
 
+if ($enableCoverage) {
+    open Coverage, ">", "$baseProductDir/Coverage" or die;
+    print Coverage "YES";
+    close Coverage;
+} elsif ($disableCoverage) {
+    unlink "$baseProductDir/Coverage";
+}
+
+if ($forceOptimizationLevel && $forceOptimizationLevel eq "none") {
+    unlink "$baseProductDir/ForceOptimizationLevel";
+} elsif ($forceOptimizationLevel) {
+    open ForceOptimizationLevel, ">", "$baseProductDir/ForceOptimizationLevel" or die;
+    print ForceOptimizationLevel substr($forceOptimizationLevel, 1) . "\n";
+    close ForceOptimizationLevel;
+}
+
 if ($ltoMode) {
     open LTO, ">", "$baseProductDir/LTO" or die;
     print LTO "$ltoMode";
     close LTO;
 }
