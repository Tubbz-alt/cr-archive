diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeap.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeap.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeap.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeap.h
@@ -26,10 +26,14 @@
 #pragma once
 
 #include "IsoConfig.h"
 #include "Mutex.h"
 
+#if BENABLE_MALLOC_HEAP_BREAKDOWN
+#include <malloc/malloc.h>
+#endif
+
 namespace bmalloc {
 
 template<typename Config> class IsoHeapImpl;
 
 namespace api {
@@ -42,11 +46,15 @@
 
 template<typename Type>
 struct IsoHeap {
     typedef IsoConfig<sizeof(Type)> Config;
 
-    constexpr IsoHeap() = default;
+#if BENABLE_MALLOC_HEAP_BREAKDOWN
+    IsoHeap(const char* = nullptr);
+#else
+    constexpr IsoHeap(const char* = nullptr) { }
+#endif
 
     void* allocate();
     void* tryAllocate();
     void deallocate(void* p);
 
@@ -65,10 +73,14 @@
 
     Mutex m_initializationLock;
     unsigned m_allocatorOffsetPlusOne { 0 };
     unsigned m_deallocatorOffsetPlusOne { 0 };
     IsoHeapImpl<Config>* m_impl { nullptr };
+
+#if BENABLE_MALLOC_HEAP_BREAKDOWN
+    malloc_zone_t* m_zone;
+#endif
 };
 
 // Use this together with MAKE_BISO_MALLOCED_IMPL.
 #define MAKE_BISO_MALLOCED(isoType, exportMacro) \
 public: \
