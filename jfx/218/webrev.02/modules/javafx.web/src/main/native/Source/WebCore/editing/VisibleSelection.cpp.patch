diff a/modules/javafx.web/src/main/native/Source/WebCore/editing/VisibleSelection.cpp b/modules/javafx.web/src/main/native/Source/WebCore/editing/VisibleSelection.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/editing/VisibleSelection.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/editing/VisibleSelection.cpp
@@ -30,10 +30,11 @@
 #include "Editing.h"
 #include "Element.h"
 #include "HTMLInputElement.h"
 #include "Settings.h"
 #include "ShadowRoot.h"
+#include "StaticRange.h"
 #include "TextIterator.h"
 #include "VisibleUnits.h"
 #include <stdio.h>
 #include <wtf/Assertions.h>
 #include <wtf/text/CString.h>
@@ -94,10 +95,20 @@
     , m_isDirectional(isDirectional)
 {
     validate();
 }
 
+VisibleSelection::VisibleSelection(const StaticRange& staticRange, EAffinity affinity, bool isDirectional)
+    : m_base(createLegacyEditingPosition(staticRange.startContainer(), staticRange.startOffset()))
+    , m_extent(createLegacyEditingPosition(staticRange.endContainer(), staticRange.endOffset()))
+    , m_affinity(affinity)
+    , m_isDirectional(isDirectional)
+{
+    ASSERT(&staticRange.startContainer()->treeScope() == &staticRange.endContainer()->treeScope());
+    validate();
+}
+
 VisibleSelection VisibleSelection::selectionFromContentsOfNode(Node* node)
 {
     ASSERT(!editingIgnoresContent(*node));
     return VisibleSelection(firstPositionInNode(node), lastPositionInNode(node), DOWNSTREAM);
 }
