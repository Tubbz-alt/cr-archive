diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ObjectConstructor.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ObjectConstructor.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ObjectConstructor.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ObjectConstructor.h
@@ -1,8 +1,8 @@
 /*
  *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
- *  Copyright (C) 2008, 2016-2017 Apple Inc. All rights reserved.
+ *  Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  *  This library is free software; you can redistribute it and/or
  *  modify it under the terms of the GNU Lesser General Public
  *  License as published by the Free Software Foundation; either
  *  version 2 of the License, or (at your option) any later version.
@@ -24,22 +24,22 @@
 #include "JSGlobalObject.h"
 #include "ObjectPrototype.h"
 
 namespace JSC {
 
-EncodedJSValue JSC_HOST_CALL objectConstructorGetOwnPropertyDescriptor(ExecState*);
-EncodedJSValue JSC_HOST_CALL objectConstructorGetOwnPropertyDescriptors(ExecState*);
-EncodedJSValue JSC_HOST_CALL objectConstructorGetOwnPropertySymbols(ExecState*);
-EncodedJSValue JSC_HOST_CALL objectConstructorGetOwnPropertyNames(ExecState*);
-EncodedJSValue JSC_HOST_CALL objectConstructorKeys(ExecState*);
+EncodedJSValue JSC_HOST_CALL objectConstructorGetOwnPropertyDescriptor(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL objectConstructorGetOwnPropertyDescriptors(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL objectConstructorGetOwnPropertySymbols(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL objectConstructorGetOwnPropertyNames(JSGlobalObject*, CallFrame*);
+EncodedJSValue JSC_HOST_CALL objectConstructorKeys(JSGlobalObject*, CallFrame*);
 
 class ObjectPrototype;
 
 class ObjectConstructor final : public InternalFunction {
 public:
     typedef InternalFunction Base;
-    static const unsigned StructureFlags = Base::StructureFlags | HasStaticPropertyTable;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | HasStaticPropertyTable;
 
     static ObjectConstructor* create(VM& vm, JSGlobalObject* globalObject, Structure* structure, ObjectPrototype* objectPrototype)
     {
         ObjectConstructor* constructor = new (NotNull, allocateCell<ObjectConstructor>(vm.heap)) ObjectConstructor(vm, structure);
         constructor->finishCreation(vm, globalObject, objectPrototype);
@@ -57,48 +57,49 @@
     void finishCreation(VM&, JSGlobalObject*, ObjectPrototype*);
 
 private:
     ObjectConstructor(VM&, Structure*);
 };
+STATIC_ASSERT_ISO_SUBSPACE_SHARABLE(ObjectConstructor, InternalFunction);
 
-inline JSFinalObject* constructEmptyObject(ExecState* exec, Structure* structure)
+inline JSFinalObject* constructEmptyObject(VM& vm, Structure* structure)
 {
-    return JSFinalObject::create(exec, structure);
+    return JSFinalObject::create(vm, structure);
 }
 
-inline JSFinalObject* constructEmptyObject(ExecState* exec, JSObject* prototype, unsigned inlineCapacity)
+inline JSFinalObject* constructEmptyObject(JSGlobalObject* globalObject, JSObject* prototype, unsigned inlineCapacity)
 {
-    JSGlobalObject* globalObject = exec->lexicalGlobalObject();
-    StructureCache& structureCache = globalObject->vm().structureCache;
+    VM& vm = getVM(globalObject);
+    StructureCache& structureCache = vm.structureCache;
     Structure* structure = structureCache.emptyObjectStructureForPrototype(globalObject, prototype, inlineCapacity);
-    return constructEmptyObject(exec, structure);
+    return constructEmptyObject(vm, structure);
 }
 
-inline JSFinalObject* constructEmptyObject(ExecState* exec, JSObject* prototype)
+inline JSFinalObject* constructEmptyObject(JSGlobalObject* globalObject, JSObject* prototype)
 {
-    return constructEmptyObject(exec, prototype, JSFinalObject::defaultInlineCapacity());
+    return constructEmptyObject(globalObject, prototype, JSFinalObject::defaultInlineCapacity());
 }
 
-inline JSFinalObject* constructEmptyObject(ExecState* exec)
+inline JSFinalObject* constructEmptyObject(JSGlobalObject* globalObject)
 {
-    return constructEmptyObject(exec, exec->lexicalGlobalObject()->objectStructureForObjectConstructor());
+    return constructEmptyObject(getVM(globalObject), globalObject->objectStructureForObjectConstructor());
 }
 
-inline JSObject* constructObject(ExecState* exec, JSGlobalObject* globalObject, JSValue arg)
+inline JSObject* constructObject(JSGlobalObject* globalObject, JSValue arg)
 {
     if (arg.isUndefinedOrNull())
-        return constructEmptyObject(exec, globalObject->objectPrototype());
-    return arg.toObject(exec, globalObject);
+        return constructEmptyObject(globalObject, globalObject->objectPrototype());
+    return arg.toObject(globalObject);
 }
 
 // Section 6.2.4.4 of the ES6 specification.
 // https://tc39.github.io/ecma262/#sec-frompropertydescriptor
-inline JSObject* constructObjectFromPropertyDescriptor(ExecState* exec, const PropertyDescriptor& descriptor)
+inline JSObject* constructObjectFromPropertyDescriptor(JSGlobalObject* globalObject, const PropertyDescriptor& descriptor)
 {
-    VM& vm = exec->vm();
+    VM& vm = getVM(globalObject);
     auto scope = DECLARE_THROW_SCOPE(vm);
-    JSObject* description = constructEmptyObject(exec);
+    JSObject* description = constructEmptyObject(globalObject);
     RETURN_IF_EXCEPTION(scope, nullptr);
 
     if (!descriptor.isAccessorDescriptor()) {
         description->putDirect(vm, vm.propertyNames->value, descriptor.value() ? descriptor.value() : jsUndefined(), 0);
         description->putDirect(vm, vm.propertyNames->writable, jsBoolean(descriptor.writable()), 0);
@@ -115,13 +116,13 @@
 
     return description;
 }
 
 
-JS_EXPORT_PRIVATE JSObject* objectConstructorFreeze(ExecState*, JSObject*);
-JS_EXPORT_PRIVATE JSObject* objectConstructorSeal(ExecState*, JSObject*);
-JSValue objectConstructorGetOwnPropertyDescriptor(ExecState*, JSObject*, const Identifier&);
-JSValue objectConstructorGetOwnPropertyDescriptors(ExecState*, JSObject*);
-JSArray* ownPropertyKeys(ExecState*, JSObject*, PropertyNameMode, DontEnumPropertiesMode);
-bool toPropertyDescriptor(ExecState*, JSValue, PropertyDescriptor&);
+JS_EXPORT_PRIVATE JSObject* objectConstructorFreeze(JSGlobalObject*, JSObject*);
+JS_EXPORT_PRIVATE JSObject* objectConstructorSeal(JSGlobalObject*, JSObject*);
+JSValue objectConstructorGetOwnPropertyDescriptor(JSGlobalObject*, JSObject*, const Identifier&);
+JSValue objectConstructorGetOwnPropertyDescriptors(JSGlobalObject*, JSObject*);
+JSArray* ownPropertyKeys(JSGlobalObject*, JSObject*, PropertyNameMode, DontEnumPropertiesMode);
+bool toPropertyDescriptor(JSGlobalObject*, JSValue, PropertyDescriptor&);
 
 } // namespace JSC
