diff a/modules/javafx.web/src/main/native/Source/WebCore/xml/parser/XMLDocumentParser.cpp b/modules/javafx.web/src/main/native/Source/WebCore/xml/parser/XMLDocumentParser.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/xml/parser/XMLDocumentParser.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/xml/parser/XMLDocumentParser.cpp
@@ -29,10 +29,11 @@
 #include "CDATASection.h"
 #include "Comment.h"
 #include "Document.h"
 #include "DocumentFragment.h"
 #include "DocumentType.h"
+#include "ElementAncestorIterator.h"
 #include "Frame.h"
 #include "FrameLoader.h"
 #include "FrameView.h"
 #include "HTMLLinkElement.h"
 #include "HTMLNames.h"
@@ -41,17 +42,19 @@
 #include "PendingScript.h"
 #include "ProcessingInstruction.h"
 #include "ResourceError.h"
 #include "ResourceRequest.h"
 #include "ResourceResponse.h"
+#include "SVGForeignObjectElement.h"
 #include "SVGNames.h"
 #include "SVGStyleElement.h"
 #include "ScriptElement.h"
 #include "ScriptSourceCode.h"
 #include "StyleScope.h"
 #include "TextResourceDecoder.h"
 #include "TreeDepthLimit.h"
+#include "XMLNSNames.h"
 #include <wtf/Ref.h>
 #include <wtf/Threading.h>
 #include <wtf/Vector.h>
 
 namespace WebCore {
@@ -267,11 +270,32 @@
     if (contextElement && (contextElement->hasLocalName(HTMLNames::scriptTag->localName()) || contextElement->hasLocalName(HTMLNames::styleTag->localName()))) {
         fragment.parserAppendChild(fragment.document().createTextNode(chunk));
         return true;
     }
 
-    auto parser = XMLDocumentParser::create(fragment, contextElement, parserContentPolicy);
+    HashMap<AtomString, AtomString> prefixToNamespaceMap;
+    AtomString defaultNamespaceURI;
+    bool stopLookingForDefaultNamespaceURI = false;
+
+    for (auto& element : elementLineage(contextElement)) {
+        if (is<SVGForeignObjectElement>(element))
+            stopLookingForDefaultNamespaceURI = true;
+        else if (!stopLookingForDefaultNamespaceURI)
+            defaultNamespaceURI = element.namespaceURI();
+
+        if (!element.hasAttributes())
+            continue;
+
+        for (const Attribute& attribute : element.attributesIterator()) {
+            if (attribute.prefix() == xmlnsAtom())
+                prefixToNamespaceMap.set(attribute.localName(), attribute.value());
+            else if (!stopLookingForDefaultNamespaceURI && attribute.prefix() == xmlnsAtom())
+                defaultNamespaceURI = attribute.value();
+        }
+    }
+
+    auto parser = XMLDocumentParser::create(fragment, WTFMove(prefixToNamespaceMap), defaultNamespaceURI, parserContentPolicy);
     bool wellFormed = parser->appendFragmentSource(chunk);
     // Do not call finish(). The finish() and doEnd() implementations touch the main document and loader and can cause crashes in the fragment case.
     parser->detach(); // Allows ~DocumentParser to assert it was detached before destruction.
     return wellFormed; // appendFragmentSource()'s wellFormed is more permissive than Document::wellFormed().
 }
