diff a/modules/javafx.web/src/main/native/Source/WebCore/bridge/jni/jsc/JavaInstanceJSC.h b/modules/javafx.web/src/main/native/Source/WebCore/bridge/jni/jsc/JavaInstanceJSC.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bridge/jni/jsc/JavaInstanceJSC.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bridge/jni/jsc/JavaInstanceJSC.h
@@ -47,27 +47,27 @@
 
     ~JavaInstance();
 
     virtual Class* getClass() const;
 
-    virtual JSValue valueOf(ExecState*) const;
-    virtual JSValue defaultValue(ExecState*, PreferredPrimitiveType) const;
+    virtual JSValue valueOf(JSGlobalObject*) const;
+    virtual JSValue defaultValue(JSGlobalObject*, PreferredPrimitiveType) const;
 
-    virtual JSValue getMethod(ExecState*, PropertyName);
-    virtual JSValue invokeMethod(ExecState*, RuntimeMethod*);
+    virtual JSValue getMethod(JSGlobalObject*, PropertyName);
+    virtual JSValue invokeMethod(JSGlobalObject*, CallFrame*, RuntimeMethod*);
 
     jobject javaInstance() const { return m_instance->instance(); }
 
-    JSValue stringValue(ExecState*) const;
-    JSValue numberValue(ExecState*) const;
+    JSValue stringValue(JSGlobalObject*) const;
+    JSValue numberValue(JSGlobalObject*) const;
     JSValue booleanValue() const;
     jobject accessControlContext() const { return m_accessControlContext->instance(); }
 
 protected:
     JavaInstance(jobject instance, RefPtr<RootObject>&&, jobject accessControlContext);
 
-    virtual RuntimeObject* newRuntimeObject(ExecState*);
+    virtual RuntimeObject* newRuntimeObject(JSGlobalObject*);
 
     virtual void virtualBegin();
     virtual void virtualEnd();
 
     RefPtr<JobjectWrapper> m_instance;
