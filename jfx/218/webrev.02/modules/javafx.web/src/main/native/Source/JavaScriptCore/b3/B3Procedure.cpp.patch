diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Procedure.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Procedure.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Procedure.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Procedure.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -237,26 +237,26 @@
     for (Value* value : values()) {
         if (valuesInBlocks.contains(value))
             continue;
 
         if (!didPrint) {
-            dataLog("Orphaned values:\n");
+            dataLog(tierName, "Orphaned values:\n");
             didPrint = true;
         }
-        dataLog("    ", deepDump(*this, value), "\n");
+        dataLog(tierName, "    ", deepDump(*this, value), "\n");
     }
     if (hasQuirks())
-        out.print("Has Quirks: True\n");
+        out.print(tierName, "Has Quirks: True\n");
     if (variables().size()) {
-        out.print("Variables:\n");
+        out.print(tierName, "Variables:\n");
         for (Variable* variable : variables())
-            out.print("    ", deepDump(variable), "\n");
+            out.print(tierName, "    ", deepDump(variable), "\n");
     }
     if (stackSlots().size()) {
-        out.print("Stack slots:\n");
+        out.print(tierName, "Stack slots:\n");
         for (StackSlot* slot : stackSlots())
-            out.print("    ", pointerDump(slot), ": ", deepDump(slot), "\n");
+            out.print(tierName, "    ", pointerDump(slot), ": ", deepDump(slot), "\n");
     }
     if (m_byproducts->count())
         out.print(*m_byproducts);
 }
 
@@ -347,15 +347,10 @@
     if (!constant)
         return false;
     return m_fastConstants.contains(constant);
 }
 
-CCallHelpers::Label Procedure::entrypointLabel(unsigned index) const
-{
-    return m_code->entrypointLabel(index);
-}
-
 void* Procedure::addDataSection(size_t size)
 {
     if (!size)
         return nullptr;
     std::unique_ptr<DataSection> dataSection = makeUnique<DataSection>(size);
