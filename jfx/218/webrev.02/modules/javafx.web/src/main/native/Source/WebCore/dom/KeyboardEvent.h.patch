diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/KeyboardEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/KeyboardEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/KeyboardEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/KeyboardEvent.h
@@ -33,10 +33,11 @@
 
 class Node;
 class PlatformKeyboardEvent;
 
 class KeyboardEvent final : public UIEventWithKeyState {
+    WTF_MAKE_ISO_ALLOCATED(KeyboardEvent);
 public:
     enum KeyLocationCode {
         DOM_KEY_LOCATION_STANDARD = 0x00,
         DOM_KEY_LOCATION_LEFT = 0x01,
         DOM_KEY_LOCATION_RIGHT = 0x02,
@@ -67,17 +68,12 @@
 
     WEBCORE_EXPORT void initKeyboardEvent(const AtomString& type, bool canBubble, bool cancelable, RefPtr<WindowProxy>&&,
         const String& keyIdentifier, unsigned location,
         bool ctrlKey, bool altKey, bool shiftKey, bool metaKey, bool altGraphKey = false);
 
-#if ENABLE(KEYBOARD_KEY_ATTRIBUTE)
     const String& key() const { return m_key; }
-#endif
-#if ENABLE(KEYBOARD_CODE_ATTRIBUTE)
     const String& code() const { return m_code; }
-#endif
-
     const String& keyIdentifier() const { return m_keyIdentifier; }
     unsigned location() const { return m_location; }
     bool repeat() const { return m_repeat; }
 
     const PlatformKeyboardEvent* underlyingPlatformEvent() const { return m_underlyingPlatformEvent.get(); }
@@ -102,16 +98,12 @@
     KeyboardEvent();
     KeyboardEvent(const PlatformKeyboardEvent&, RefPtr<WindowProxy>&&);
     KeyboardEvent(const AtomString&, const Init&);
 
     std::unique_ptr<PlatformKeyboardEvent> m_underlyingPlatformEvent;
-#if ENABLE(KEYBOARD_KEY_ATTRIBUTE)
     String m_key;
-#endif
-#if ENABLE(KEYBOARD_CODE_ATTRIBUTE)
     String m_code;
-#endif
     String m_keyIdentifier;
     unsigned m_location { DOM_KEY_LOCATION_STANDARD };
     bool m_repeat { false };
     bool m_isComposing { false };
     Optional<unsigned> m_charCode;
