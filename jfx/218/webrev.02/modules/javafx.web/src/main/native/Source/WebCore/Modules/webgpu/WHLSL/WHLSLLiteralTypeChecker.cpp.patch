diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLLiteralTypeChecker.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLLiteralTypeChecker.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLLiteralTypeChecker.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLLiteralTypeChecker.cpp
@@ -28,20 +28,19 @@
 
 #if ENABLE(WEBGPU)
 
 #include "WHLSLIntegerLiteralType.h"
 #include "WHLSLNativeTypeDeclaration.h"
-#include "WHLSLNullLiteralType.h"
 #include "WHLSLProgram.h"
 #include "WHLSLTypeReference.h"
 #include "WHLSLVisitor.h"
 
 namespace WebCore {
 
 namespace WHLSL {
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
 static AST::NativeTypeDeclaration* getNativeTypeDeclaration(AST::ResolvableType& resolvableType)
 {
     if (!is<AST::TypeReference>(resolvableType.resolvedType()))
         return nullptr;
     auto& typeReference = downcast<AST::TypeReference>(resolvableType.resolvedType());
@@ -71,24 +70,19 @@
     {
         auto* nativeTypeDeclaration = getNativeTypeDeclaration(unsignedIntegerLiteralType);
         ASSERT(nativeTypeDeclaration);
         ASSERT(nativeTypeDeclaration->canRepresentUnsignedInteger()(unsignedIntegerLiteralType.value()));
     }
-
-    void visit(AST::NullLiteralType& nullLiteralType) override
-    {
-        ASSERT(nullLiteralType.maybeResolvedType());
-    }
 };
-#endif
+#endif // ASSERT_ENABLED
 
 void checkLiteralTypes(Program& program)
 {
-#if ASSERT_DISABLED
-    UNUSED_PARAM(program);
-#else
+#if ASSERT_ENABLED
     LiteralTypeChecker().Visitor::visit(program);
+#else
+    UNUSED_PARAM(program);
 #endif
 }
 
 } // namespace WHLSL
 
