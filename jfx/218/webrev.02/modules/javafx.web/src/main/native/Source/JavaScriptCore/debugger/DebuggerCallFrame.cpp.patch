diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/debugger/DebuggerCallFrame.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/debugger/DebuggerCallFrame.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/debugger/DebuggerCallFrame.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/debugger/DebuggerCallFrame.cpp
@@ -61,11 +61,17 @@
     mutable unsigned m_column { 0 };
 };
 
 Ref<DebuggerCallFrame> DebuggerCallFrame::create(VM& vm, CallFrame* callFrame)
 {
-    if (UNLIKELY(callFrame == callFrame->wasmAwareLexicalGlobalObject(vm)->globalExec())) {
+    if (UNLIKELY(!callFrame)) {
+        ShadowChicken::Frame emptyFrame;
+        RELEASE_ASSERT(!emptyFrame.isTailDeleted);
+        return adoptRef(*new DebuggerCallFrame(vm, callFrame, emptyFrame));
+    }
+
+    if (callFrame->isDeprecatedCallFrameForDebugger()) {
         ShadowChicken::Frame emptyFrame;
         RELEASE_ASSERT(!emptyFrame.isTailDeleted);
         return adoptRef(*new DebuggerCallFrame(vm, callFrame, emptyFrame));
     }
 
@@ -78,17 +84,16 @@
 
     RELEASE_ASSERT(frames.size());
     ASSERT(!frames[0].isTailDeleted); // The top frame should never be tail deleted.
 
     RefPtr<DebuggerCallFrame> currentParent = nullptr;
-    ExecState* exec = callFrame->wasmAwareLexicalGlobalObject(vm)->globalExec();
     // This walks the stack from the entry stack frame to the top of the stack.
     for (unsigned i = frames.size(); i--; ) {
         const ShadowChicken::Frame& frame = frames[i];
         if (!frame.isTailDeleted)
-            exec = frame.frame;
-        Ref<DebuggerCallFrame> currentFrame = adoptRef(*new DebuggerCallFrame(vm, exec, frame));
+            callFrame = frame.frame;
+        Ref<DebuggerCallFrame> currentFrame = adoptRef(*new DebuggerCallFrame(vm, callFrame, frame));
         currentFrame->m_caller = currentParent;
         currentParent = WTFMove(currentFrame);
     }
     return *currentParent;
 }
@@ -107,22 +112,22 @@
         return nullptr;
 
     return m_caller;
 }
 
-ExecState* DebuggerCallFrame::globalExec()
+JSGlobalObject* DebuggerCallFrame::globalObject()
 {
-    return scope()->globalObject()->globalExec();
+    return scope()->globalObject();
 }
 
-JSC::JSGlobalObject* DebuggerCallFrame::vmEntryGlobalObject() const
+JSC::JSGlobalObject* DebuggerCallFrame::deprecatedVMEntryGlobalObject() const
 {
     ASSERT(isValid());
     if (!isValid())
         return nullptr;
-    VM& vm = m_validMachineFrame->vm();
-    return vm.vmEntryGlobalObject(m_validMachineFrame);
+    VM& vm = m_validMachineFrame->deprecatedVM();
+    return vm.deprecatedVMEntryGlobalObject(m_validMachineFrame->lexicalGlobalObject(vm));
 }
 
 SourceID DebuggerCallFrame::sourceID() const
 {
     ASSERT(isValid());
@@ -137,11 +142,11 @@
 {
     ASSERT(isValid());
     if (!isValid())
         return String();
 
-    VM& vm = m_validMachineFrame->vm();
+    VM& vm = m_validMachineFrame->deprecatedVM();
     if (isTailDeleted()) {
         if (JSFunction* func = jsDynamicCast<JSFunction*>(vm, m_shadowChickenFrame.callee))
             return func->calculatedDisplayName(vm);
         return m_shadowChickenFrame.codeBlock->inferredName().data();
     }
@@ -154,21 +159,21 @@
     ASSERT(isValid());
     if (!isValid())
         return nullptr;
 
     if (!m_scope) {
-        VM& vm = m_validMachineFrame->vm();
+        VM& vm = m_validMachineFrame->deprecatedVM();
         JSScope* scope;
         CodeBlock* codeBlock = m_validMachineFrame->codeBlock();
         if (isTailDeleted())
             scope = m_shadowChickenFrame.scope;
         else if (codeBlock && codeBlock->scopeRegister().isValid())
             scope = m_validMachineFrame->scope(codeBlock->scopeRegister().offset());
         else if (JSCallee* callee = jsDynamicCast<JSCallee*>(vm, m_validMachineFrame->jsCallee()))
             scope = callee->scope();
         else
-            scope = m_validMachineFrame->lexicalGlobalObject()->globalLexicalEnvironment();
+            scope = m_validMachineFrame->lexicalGlobalObject(vm)->globalLexicalEnvironment();
 
         m_scope.set(vm, DebuggerScope::create(vm, scope));
     }
     return m_scope.get();
 }
@@ -180,17 +185,17 @@
         return ProgramType;
 
     if (isTailDeleted())
         return FunctionType;
 
-    if (jsDynamicCast<JSFunction*>(m_validMachineFrame->vm(), m_validMachineFrame->jsCallee()))
+    if (jsDynamicCast<JSFunction*>(m_validMachineFrame->deprecatedVM(), m_validMachineFrame->jsCallee()))
         return FunctionType;
 
     return ProgramType;
 }
 
-JSValue DebuggerCallFrame::thisValue() const
+JSValue DebuggerCallFrame::thisValue(VM& vm) const
 {
     ASSERT(isValid());
     if (!isValid())
         return jsUndefined();
 
@@ -208,22 +213,22 @@
         return jsUndefined();
 
     ECMAMode ecmaMode = NotStrictMode;
     if (codeBlock && codeBlock->isStrictMode())
         ecmaMode = StrictMode;
-    return thisValue.toThis(m_validMachineFrame, ecmaMode);
+    return thisValue.toThis(m_validMachineFrame->lexicalGlobalObject(vm), ecmaMode);
 }
 
 // Evaluate some JavaScript code in the scope of this frame.
 JSValue DebuggerCallFrame::evaluateWithScopeExtension(const String& script, JSObject* scopeExtensionObject, NakedPtr<Exception>& exception)
 {
     ASSERT(isValid());
     CallFrame* callFrame = m_validMachineFrame;
     if (!callFrame)
         return jsUndefined();
 
-    VM& vm = callFrame->vm();
+    VM& vm = callFrame->deprecatedVM();
     JSLockHolder lock(vm);
     auto catchScope = DECLARE_CATCH_SCOPE(vm);
 
     CodeBlock* codeBlock = nullptr;
     if (isTailDeleted())
@@ -231,11 +236,12 @@
     else
         codeBlock = callFrame->codeBlock();
     if (!codeBlock)
         return jsUndefined();
 
-    DebuggerEvalEnabler evalEnabler(callFrame, DebuggerEvalEnabler::Mode::EvalOnCallFrameAtDebuggerEntry);
+    JSGlobalObject* globalObject = codeBlock->globalObject();
+    DebuggerEvalEnabler evalEnabler(globalObject, DebuggerEvalEnabler::Mode::EvalOnGlobalObjectAtDebuggerEntry);
 
     EvalContextType evalContextType;
 
     if (isFunctionParseMode(codeBlock->unlinkedCodeBlock()->parseMode()))
         evalContextType = EvalContextType::FunctionEvalContext;
@@ -245,25 +251,24 @@
         evalContextType = EvalContextType::None;
 
     VariableEnvironment variablesUnderTDZ;
     JSScope::collectClosureVariablesUnderTDZ(scope()->jsScope(), variablesUnderTDZ);
 
-    auto* eval = DirectEvalExecutable::create(callFrame, makeSource(script, callFrame->callerSourceOrigin()), codeBlock->isStrictMode(), codeBlock->unlinkedCodeBlock()->derivedContextType(), codeBlock->unlinkedCodeBlock()->isArrowFunction(), evalContextType, &variablesUnderTDZ);
+    auto* eval = DirectEvalExecutable::create(globalObject, makeSource(script, callFrame->callerSourceOrigin(vm)), codeBlock->isStrictMode(), codeBlock->unlinkedCodeBlock()->derivedContextType(), codeBlock->unlinkedCodeBlock()->needsClassFieldInitializer(), codeBlock->unlinkedCodeBlock()->isArrowFunction(), evalContextType, &variablesUnderTDZ);
     if (UNLIKELY(catchScope.exception())) {
         exception = catchScope.exception();
         catchScope.clearException();
         return jsUndefined();
     }
 
-    JSGlobalObject* globalObject = vm.vmEntryGlobalObject(callFrame);
     if (scopeExtensionObject) {
         JSScope* ignoredPreviousScope = globalObject->globalScope();
         globalObject->setGlobalScopeExtension(JSWithScope::create(vm, globalObject, ignoredPreviousScope, scopeExtensionObject));
     }
 
-    JSValue thisValue = this->thisValue();
-    JSValue result = vm.interpreter->execute(eval, callFrame, thisValue, scope()->jsScope());
+    JSValue thisValue = this->thisValue(vm);
+    JSValue result = vm.interpreter->execute(eval, globalObject, thisValue, scope()->jsScope());
     if (UNLIKELY(catchScope.exception())) {
         exception = catchScope.exception();
         catchScope.clearException();
     }
 
@@ -292,31 +297,32 @@
     if (!m_validMachineFrame)
         return TextPosition();
 
     if (isTailDeleted()) {
         CodeBlock* codeBlock = m_shadowChickenFrame.codeBlock;
-        if (Optional<unsigned> bytecodeOffset = codeBlock->bytecodeOffsetFromCallSiteIndex(m_shadowChickenFrame.callSiteIndex)) {
-            return TextPosition(OrdinalNumber::fromOneBasedInt(codeBlock->lineNumberForBytecodeOffset(*bytecodeOffset)),
-                OrdinalNumber::fromOneBasedInt(codeBlock->columnNumberForBytecodeOffset(*bytecodeOffset)));
+        if (Optional<BytecodeIndex> bytecodeIndex = codeBlock->bytecodeIndexFromCallSiteIndex(m_shadowChickenFrame.callSiteIndex)) {
+            return TextPosition(OrdinalNumber::fromOneBasedInt(codeBlock->lineNumberForBytecodeIndex(*bytecodeIndex)),
+                OrdinalNumber::fromOneBasedInt(codeBlock->columnNumberForBytecodeIndex(*bytecodeIndex)));
         }
     }
 
     return positionForCallFrame(vm, m_validMachineFrame);
 }
 
 TextPosition DebuggerCallFrame::positionForCallFrame(VM& vm, CallFrame* callFrame)
 {
     LineAndColumnFunctor functor;
-    StackVisitor::visit(callFrame, &vm, functor);
+    StackVisitor::visit(callFrame, vm, functor);
     return TextPosition(OrdinalNumber::fromOneBasedInt(functor.line()), OrdinalNumber::fromOneBasedInt(functor.column()));
 }
 
 SourceID DebuggerCallFrame::sourceIDForCallFrame(CallFrame* callFrame)
 {
-    ASSERT(callFrame);
+    if (!callFrame)
+        return noSourceID;
     CodeBlock* codeBlock = callFrame->codeBlock();
-    if (!codeBlock)
+    if (!codeBlock || callFrame->callee().isWasm())
         return noSourceID;
     return codeBlock->ownerExecutable()->sourceID();
 }
 
 } // namespace JSC
