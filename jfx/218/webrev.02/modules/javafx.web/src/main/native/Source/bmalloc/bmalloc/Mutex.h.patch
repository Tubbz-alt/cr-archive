diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Mutex.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Mutex.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Mutex.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Mutex.h
@@ -33,10 +33,15 @@
 
 // A fast replacement for std::mutex.
 
 namespace bmalloc {
 
+class Mutex;
+
+using UniqueLockHolder = std::unique_lock<Mutex>;
+using LockHolder = std::lock_guard<Mutex>;
+
 class Mutex {
 public:
     constexpr Mutex() = default;
 
     void lock();
@@ -49,22 +54,22 @@
     std::atomic<bool> m_flag { false };
     std::atomic<bool> m_isSpinning { false };
 };
 
 static inline void sleep(
-    std::unique_lock<Mutex>& lock, std::chrono::milliseconds duration)
+    UniqueLockHolder& lock, std::chrono::milliseconds duration)
 {
     if (duration == std::chrono::milliseconds(0))
         return;
 
     lock.unlock();
     std::this_thread::sleep_for(duration);
     lock.lock();
 }
 
 static inline void waitUntilFalse(
-    std::unique_lock<Mutex>& lock, std::chrono::milliseconds sleepDuration,
+    UniqueLockHolder& lock, std::chrono::milliseconds sleepDuration,
     bool& condition)
 {
     while (condition) {
         condition = false;
         sleep(lock, sleepDuration);
