diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderThemeGtk.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderThemeGtk.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderThemeGtk.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderThemeGtk.cpp
@@ -272,11 +272,11 @@
     }
 
     return static_cast<GtkStateFlags>(stateFlags);
 }
 
-void RenderThemeGtk::adjustButtonStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderThemeGtk::adjustButtonStyle(RenderStyle& style, const Element*) const
 {
     // Some layout tests check explicitly that buttons ignore line-height.
     if (style.appearance() == PushButtonPart)
         style.setLineHeight(RenderStyle::initialLineHeight());
 }
@@ -378,11 +378,11 @@
     comboWidget.comboBox().setState(state);
     comboWidget.button().setState(state);
     return comboWidget.button().color();
 }
 
-void RenderThemeGtk::adjustMenuListStyle(StyleResolver&, RenderStyle& style, const Element* element) const
+void RenderThemeGtk::adjustMenuListStyle(RenderStyle& style, const Element* element) const
 {
     // The tests check explicitly that select menu buttons ignore line height.
     style.setLineHeight(RenderStyle::initialLineHeight());
 
     // We cannot give a proper rendering when border radius is active, unfortunately.
@@ -390,13 +390,13 @@
 
     if (element)
         style.setColor(menuListColor(element));
 }
 
-void RenderThemeGtk::adjustMenuListButtonStyle(StyleResolver& styleResolver, RenderStyle& style, const Element* e) const
+void RenderThemeGtk::adjustMenuListButtonStyle(RenderStyle& style, const Element* e) const
 {
-    adjustMenuListStyle(styleResolver, style, e);
+    adjustMenuListStyle(style, e);
 }
 
 /*
  * GtkComboBox gadgets tree
  *
@@ -473,11 +473,11 @@
 
     return IntSize(upPreferredSize.width() + downPreferredSize.width(), std::max(upPreferredSize.height(), downPreferredSize.height()));
 }
 
 
-void RenderThemeGtk::adjustTextFieldStyle(StyleResolver&, RenderStyle& style, const Element* element) const
+void RenderThemeGtk::adjustTextFieldStyle(RenderStyle& style, const Element* element) const
 {
     if (!is<HTMLInputElement>(element) || !shouldHaveSpinButton(downcast<HTMLInputElement>(*element)))
         return;
 
     style.setMinHeight(Length(spinButtonSize().height(), Fixed));
@@ -540,26 +540,26 @@
 bool RenderThemeGtk::paintTextArea(const RenderObject& o, const PaintInfo& i, const FloatRect& r)
 {
     return paintTextField(o, i, r);
 }
 
-void RenderThemeGtk::adjustSearchFieldResultsButtonStyle(StyleResolver& styleResolver, RenderStyle& style, const Element* e) const
+void RenderThemeGtk::adjustSearchFieldResultsButtonStyle(RenderStyle& style, const Element* e) const
 {
-    adjustSearchFieldCancelButtonStyle(styleResolver, style, e);
+    adjustSearchFieldCancelButtonStyle(style, e);
 }
 
 bool RenderThemeGtk::paintSearchFieldResultsButton(const RenderBox& o, const PaintInfo& i, const IntRect& rect)
 {
     return paintSearchFieldResultsDecorationPart(o, i, rect);
 }
 
-void RenderThemeGtk::adjustSearchFieldResultsDecorationPartStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderThemeGtk::adjustSearchFieldResultsDecorationPartStyle(RenderStyle& style, const Element*) const
 {
     adjustSearchFieldIconStyle(EntryIconLeft, style);
 }
 
-void RenderThemeGtk::adjustSearchFieldCancelButtonStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderThemeGtk::adjustSearchFieldCancelButtonStyle(RenderStyle& style, const Element*) const
 {
     adjustSearchFieldIconStyle(EntryIconRight, style);
 }
 
 static bool paintSearchFieldIcon(RenderThemeGtk* theme, RenderThemePart themePart, const RenderBox& renderObject, const PaintInfo& paintInfo, const IntRect& rect)
@@ -588,11 +588,11 @@
 {
     return paintSearchFieldIcon(this, EntryIconRight, renderObject, paintInfo, rect);
 }
 
 #if ENABLE(DATALIST_ELEMENT)
-void RenderThemeGtk::adjustListButtonStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderThemeGtk::adjustListButtonStyle(RenderStyle& style, const Element*) const
 {
     // Add a margin to place the button at end of the input field.
     if (style.isLeftToRightDirection())
         style.setMarginRight(Length(-4, Fixed));
     else
@@ -615,11 +615,11 @@
     adjustedRect.contract(contentsBox.right + 1, contentsBox.top + contentsBox.bottom);
     comboWidget.arrow().render(paintInfo.context().platformContext()->cr(), adjustedRect);
 }
 #endif
 
-void RenderThemeGtk::adjustSearchFieldStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderThemeGtk::adjustSearchFieldStyle(RenderStyle& style, const Element*) const
 {
     // We cannot give a proper rendering when border radius is active, unfortunately.
     style.resetBorderRadius();
     style.setLineHeight(RenderStyle::initialLineHeight());
 }
@@ -632,18 +632,18 @@
 bool RenderThemeGtk::shouldHaveCapsLockIndicator(const HTMLInputElement& element) const
 {
     return element.isPasswordField();
 }
 
-void RenderThemeGtk::adjustSliderTrackStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderThemeGtk::adjustSliderTrackStyle(RenderStyle& style, const Element*) const
 {
     style.setBoxShadow(nullptr);
 }
 
-void RenderThemeGtk::adjustSliderThumbStyle(StyleResolver& styleResolver, RenderStyle& style, const Element* element) const
+void RenderThemeGtk::adjustSliderThumbStyle(RenderStyle& style, const Element* element) const
 {
-    RenderTheme::adjustSliderThumbStyle(styleResolver, style, element);
+    RenderTheme::adjustSliderThumbStyle(style, element);
     style.setBoxShadow(nullptr);
 }
 
 /*
  * GtkScale
@@ -799,11 +799,11 @@
 RenderTheme::InnerSpinButtonLayout RenderThemeGtk::innerSpinButtonLayout(const RenderObject& renderObject) const
 {
     return renderObject.style().direction() == TextDirection::RTL ? InnerSpinButtonLayout::HorizontalUpLeft : InnerSpinButtonLayout::HorizontalUpRight;
 }
 
-void RenderThemeGtk::adjustInnerSpinButtonStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderThemeGtk::adjustInnerSpinButtonStyle(RenderStyle& style, const Element*) const
 {
     style.setWidth(Length(spinButtonSize().width(), Fixed));
     style.setHeight(Length(spinButtonSize().height(), Fixed));
 }
 
@@ -1111,11 +1111,11 @@
 {
     return false;
 }
 #endif
 
-void RenderThemeGtk::adjustProgressBarStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderThemeGtk::adjustProgressBarStyle(RenderStyle& style, const Element*) const
 {
     style.setBoxShadow(nullptr);
 }
 
 // These values have been copied from RenderThemeChromiumSkia.cpp
