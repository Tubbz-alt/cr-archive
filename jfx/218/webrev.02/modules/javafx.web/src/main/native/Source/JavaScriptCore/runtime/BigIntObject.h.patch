diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntObject.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntObject.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntObject.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BigIntObject.h
@@ -33,10 +33,16 @@
 
 class BigIntObject final : public JSWrapperObject {
 public:
     using Base = JSWrapperObject;
 
+    template<typename, SubspaceAccess mode>
+    static IsoSubspace* subspaceFor(VM& vm)
+    {
+        return vm.bigIntObjectSpace<mode>();
+    }
+
     static BigIntObject* create(VM&, JSGlobalObject*, JSBigInt*);
 
     DECLARE_EXPORT_INFO;
 
     JSBigInt* internalValue() const { return asBigInt(JSWrapperObject::internalValue()); }
@@ -44,13 +50,13 @@
     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
     {
         return Structure::create(vm, globalObject, prototype, TypeInfo(ObjectType, StructureFlags), info());
     }
 
-    static JSValue defaultValue(const JSObject*, ExecState*, PreferredPrimitiveType);
+    static JSValue defaultValue(const JSObject*, JSGlobalObject*, PreferredPrimitiveType);
 
-    static String toStringName(const JSObject*, ExecState*);
+    static String toStringName(const JSObject*, JSGlobalObject*);
 
 protected:
     JS_EXPORT_PRIVATE void finishCreation(VM&, JSBigInt*);
     JS_EXPORT_PRIVATE BigIntObject(VM&, Structure*);
 };
