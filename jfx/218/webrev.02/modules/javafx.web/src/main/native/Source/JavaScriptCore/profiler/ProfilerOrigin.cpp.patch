diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerOrigin.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerOrigin.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerOrigin.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/profiler/ProfilerOrigin.cpp
@@ -32,27 +32,27 @@
 #include "ProfilerBytecodes.h"
 #include "ProfilerDatabase.h"
 
 namespace JSC { namespace Profiler {
 
-Origin::Origin(Database& database, CodeBlock* codeBlock, unsigned bytecodeIndex)
+Origin::Origin(Database& database, CodeBlock* codeBlock, BytecodeIndex bytecodeIndex)
     : m_bytecodes(database.ensureBytecodesFor(codeBlock))
     , m_bytecodeIndex(bytecodeIndex)
 {
 }
 
 void Origin::dump(PrintStream& out) const
 {
-    out.print(*m_bytecodes, ":bc#", m_bytecodeIndex);
+    out.print(*m_bytecodes, " ", m_bytecodeIndex);
 }
 
-JSValue Origin::toJS(ExecState* exec) const
+JSValue Origin::toJS(JSGlobalObject* globalObject) const
 {
-    VM& vm = exec->vm();
-    JSObject* result = constructEmptyObject(exec);
+    VM& vm = globalObject->vm();
+    JSObject* result = constructEmptyObject(globalObject);
     result->putDirect(vm, vm.propertyNames->bytecodesID, jsNumber(m_bytecodes->id()));
-    result->putDirect(vm, vm.propertyNames->bytecodeIndex, jsNumber(m_bytecodeIndex));
+    result->putDirect(vm, vm.propertyNames->bytecodeIndex, jsNumber(m_bytecodeIndex.offset()));
     return result;
 }
 
 } } // namespace JSC::Profiler
 
