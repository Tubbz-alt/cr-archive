diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptManager.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptManager.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptManager.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InjectedScriptManager.h
@@ -27,18 +27,21 @@
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include "Exception.h"
 #include "InjectedScript.h"
 #include "InspectorEnvironment.h"
+#include <wtf/Expected.h>
 #include <wtf/Forward.h>
 #include <wtf/HashMap.h>
+#include <wtf/NakedPtr.h>
 #include <wtf/text/WTFString.h>
 
 namespace JSC {
-class ExecState;
+class CallFrame;
 }
 
 namespace Inspector {
 
 class InjectedScriptHost;
@@ -55,27 +58,27 @@
     virtual void discardInjectedScripts();
 
     InjectedScriptHost& injectedScriptHost();
     InspectorEnvironment& inspectorEnvironment() const { return m_environment; }
 
-    InjectedScript injectedScriptFor(JSC::ExecState*);
+    InjectedScript injectedScriptFor(JSC::JSGlobalObject*);
     InjectedScript injectedScriptForId(int);
-    int injectedScriptIdFor(JSC::ExecState*);
+    int injectedScriptIdFor(JSC::JSGlobalObject*);
     InjectedScript injectedScriptForObjectId(const String& objectId);
     void releaseObjectGroup(const String& objectGroup);
     void clearEventValue();
     void clearExceptionValue();
 
 protected:
     virtual void didCreateInjectedScript(const InjectedScript&);
 
     HashMap<int, InjectedScript> m_idToInjectedScript;
-    HashMap<JSC::ExecState*, int> m_scriptStateToId;
+    HashMap<JSC::JSGlobalObject*, int> m_scriptStateToId;
 
 private:
     String injectedScriptSource();
-    JSC::JSObject* createInjectedScript(const String& source, JSC::ExecState*, int id);
+    Expected<JSC::JSObject*, NakedPtr<JSC::Exception>> createInjectedScript(const String& source, JSC::JSGlobalObject*, int id);
 
     InspectorEnvironment& m_environment;
     Ref<InjectedScriptHost> m_injectedScriptHost;
     int m_nextInjectedScriptId;
 };
