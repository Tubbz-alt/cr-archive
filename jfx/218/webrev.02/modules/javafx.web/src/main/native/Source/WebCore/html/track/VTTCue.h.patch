diff a/modules/javafx.web/src/main/native/Source/WebCore/html/track/VTTCue.h b/modules/javafx.web/src/main/native/Source/WebCore/html/track/VTTCue.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/track/VTTCue.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/track/VTTCue.h
@@ -47,19 +47,20 @@
 class VTTScanner;
 class WebVTTCueData;
 
 // ----------------------------
 
-class VTTCueBox : public HTMLElement {
+class VTTCueBox : public TextTrackCueBox {
     WTF_MAKE_ISO_ALLOCATED(VTTCueBox);
 public:
-    static Ref<VTTCueBox> create(Document&, VTTCue&);
+    static Ref<VTTCueBox> create(Document& document, VTTCue& cue)
+    {
+        return adoptRef(*new VTTCueBox(document, cue));
+    }
 
-    VTTCue* getCue() const;
-    virtual void applyCSSProperties(const IntSize& videoSize);
+    void applyCSSProperties(const IntSize&) override;
 
-    static const AtomString& vttCueBoxShadowPseudoId();
     void setFontSizeFromCaptionUserPrefs(int fontSize) { m_fontSizeFromCaptionUserPrefs = fontSize; }
 
 protected:
     VTTCueBox(Document&, VTTCue&);
 
@@ -72,11 +73,11 @@
     int m_fontSizeFromCaptionUserPrefs;
 };
 
 // ----------------------------
 
-class VTTCue : public TextTrackCue, public CanMakeWeakPtr<VTTCue> {
+class VTTCue : public TextTrackCue {
     WTF_MAKE_ISO_ALLOCATED(VTTCue);
 public:
     static Ref<VTTCue> create(ScriptExecutionContext& context, double start, double end, const String& content)
     {
         return create(context, MediaTime::createWithDouble(start), MediaTime::createWithDouble(end), content);
@@ -87,12 +88,10 @@
         return adoptRef(*new VTTCue(context, start, end, content));
     }
 
     static Ref<VTTCue> create(ScriptExecutionContext&, const WebVTTCueData&);
 
-    static const AtomString& cueBackdropShadowPseudoId();
-
     virtual ~VTTCue();
 
     enum AutoKeyword {
         Auto
     };
@@ -121,25 +120,25 @@
     void setText(const String&);
 
     const String& cueSettings() const { return m_settings; }
     void setCueSettings(const String&);
 
-    RefPtr<DocumentFragment> getCueAsHTML();
+    RefPtr<DocumentFragment> getCueAsHTML() final;
     RefPtr<DocumentFragment> createCueRenderingTree();
 
     const String& regionId() const { return m_regionId; }
     void setRegionId(const String&);
     void notifyRegionWhenRemovingDisplayTree(bool);
 
     void setIsActive(bool) override;
 
     bool hasDisplayTree() const { return m_displayTree; }
-    VTTCueBox& getDisplayTree(const IntSize& videoSize, int fontSize);
+    RefPtr<TextTrackCueBox> getDisplayTree(const IntSize&, int) final;
     HTMLSpanElement& element() const { return *m_cueHighlightBox; }
 
-    void updateDisplayTree(const MediaTime&);
-    void removeDisplayTree();
+    void updateDisplayTree(const MediaTime&) final;
+    void removeDisplayTree() final;
     void markFutureAndPastNodes(ContainerNode*, const MediaTime&, const MediaTime&);
 
     int calculateComputedLinePosition();
     std::pair<double, double> getPositionCoordinates() const;
 
@@ -166,18 +165,19 @@
         Right,
         NumberOfAlignments
     };
     CueAlignment getAlignment() const { return m_cueAlignment; }
 
-    virtual void setFontSize(int, const IntSize&, bool important);
+    void recalculateStyles() final { m_displayTreeShouldChange = true; }
+    void setFontSize(int, const IntSize&, bool important) override;
 
     bool isEqual(const TextTrackCue&, CueMatchRules) const override;
     bool cueContentsMatch(const TextTrackCue&) const override;
     bool doesExtendCue(const TextTrackCue&) const override;
 
     CueType cueType() const override { return WebVTT; }
-    bool isRenderable() const final { return true; }
+    bool isRenderable() const final { return !m_content.isEmpty(); }
 
     void didChange() override;
 
     String toJSONString() const;
 
@@ -235,10 +235,13 @@
     int m_displaySize;
     std::pair<float, float> m_displayPosition;
 
     MediaTime m_originalStartTime;
 
+    int m_fontSize { 0 };
+    bool m_fontSizeIsImportant { false };
+
     bool m_snapToLines : 1;
     bool m_displayTreeShouldChange : 1;
     bool m_notifyRegion : 1;
 };
 
@@ -247,23 +250,22 @@
 
 } // namespace WebCore
 
 namespace WTF {
 
-template<typename Type>
-struct LogArgument;
+template<typename> struct LogArgument;
 
-template <>
-struct LogArgument<WebCore::VTTCue> {
-    static String toString(const WebCore::VTTCue& cue)
-    {
-        return cue.toJSONString();
-    }
+template<> struct LogArgument<WebCore::VTTCue> {
+    static String toString(const WebCore::VTTCue& cue) { return cue.toJSONString(); }
 };
 
 } // namespace WTF
 
+// FIXME: The following isType function is incorrect, since it returns true for TextTrackCueGeneric.
+// Should fix this so that is<VTTCue> and downcast<VTTCue> will work correctly and eliminate toVTTCue
+// since it's just another name for downcast<VTTCue>.
+
 SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::VTTCue)
-    static bool isType(const WebCore::TextTrackCue& cue) { return cue.isRenderable(); }
+static bool isType(const WebCore::TextTrackCue& cue) { return cue.cueType() == WebCore::TextTrackCue::WebVTT; }
 SPECIALIZE_TYPE_TRAITS_END()
 
 #endif
