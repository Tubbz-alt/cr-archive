diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DateInstance.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DateInstance.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DateInstance.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/DateInstance.cpp
@@ -28,12 +28,10 @@
 #include <math.h>
 #include <wtf/MathExtras.h>
 
 namespace JSC {
 
-using namespace WTF;
-
 const ClassInfo DateInstance::s_info = {"Date", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(DateInstance)};
 
 DateInstance::DateInstance(VM& vm, Structure* structure)
     : Base(vm, structure)
 {
@@ -50,39 +48,32 @@
     Base::finishCreation(vm);
     ASSERT(inherits(vm, info()));
     m_internalNumber = timeClip(time);
 }
 
-void DateInstance::destroy(JSCell* cell)
-{
-    static_cast<DateInstance*>(cell)->DateInstance::~DateInstance();
-}
-
-const GregorianDateTime* DateInstance::calculateGregorianDateTime(ExecState* exec) const
+const GregorianDateTime* DateInstance::calculateGregorianDateTime(VM& vm) const
 {
     double milli = internalNumber();
     if (std::isnan(milli))
-        return 0;
+        return nullptr;
 
-    VM& vm = exec->vm();
     if (!m_data)
         m_data = vm.dateInstanceCache.add(milli);
 
     if (m_data->m_gregorianDateTimeCachedForMS != milli) {
         msToGregorianDateTime(vm, milli, WTF::LocalTime, m_data->m_cachedGregorianDateTime);
         m_data->m_gregorianDateTimeCachedForMS = milli;
     }
     return &m_data->m_cachedGregorianDateTime;
 }
 
-const GregorianDateTime* DateInstance::calculateGregorianDateTimeUTC(ExecState* exec) const
+const GregorianDateTime* DateInstance::calculateGregorianDateTimeUTC(VM& vm) const
 {
     double milli = internalNumber();
     if (std::isnan(milli))
-        return 0;
+        return nullptr;
 
-    VM& vm = exec->vm();
     if (!m_data)
         m_data = vm.dateInstanceCache.add(milli);
 
     if (m_data->m_gregorianDateTimeUTCCachedForMS != milli) {
         msToGregorianDateTime(vm, milli, WTF::UTCTime, m_data->m_cachedGregorianDateTimeUTC);
