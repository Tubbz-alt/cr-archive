diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/CommandLineAPIHost.h
@@ -64,31 +64,31 @@
     void copyText(const String& text);
 
     class InspectableObject {
         WTF_MAKE_FAST_ALLOCATED;
     public:
-        virtual JSC::JSValue get(JSC::ExecState&);
+        virtual JSC::JSValue get(JSC::JSGlobalObject&);
         virtual ~InspectableObject() = default;
     };
     void addInspectedObject(std::unique_ptr<InspectableObject>);
-    JSC::JSValue inspectedObject(JSC::ExecState&);
-    void inspect(JSC::ExecState&, JSC::JSValue objectToInspect, JSC::JSValue hints);
+    JSC::JSValue inspectedObject(JSC::JSGlobalObject&);
+    void inspect(JSC::JSGlobalObject&, JSC::JSValue objectToInspect, JSC::JSValue hints);
 
     struct ListenerEntry {
         JSC::Strong<JSC::JSObject> listener;
         bool useCapture;
         bool passive;
         bool once;
     };
 
     using EventListenersRecord = Vector<WTF::KeyValuePair<String, Vector<ListenerEntry>>>;
-    EventListenersRecord getEventListeners(JSC::ExecState&, EventTarget&);
+    EventListenersRecord getEventListeners(JSC::JSGlobalObject&, EventTarget&);
 
     String databaseId(Database&);
     String storageId(Storage&);
 
-    JSC::JSValue wrapper(JSC::ExecState*, JSDOMGlobalObject*);
+    JSC::JSValue wrapper(JSC::JSGlobalObject*, JSDOMGlobalObject*);
     void clearAllWrappers();
 
 private:
     CommandLineAPIHost();
 
