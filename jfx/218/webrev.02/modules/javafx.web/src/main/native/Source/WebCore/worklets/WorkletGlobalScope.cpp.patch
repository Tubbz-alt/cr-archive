diff a/modules/javafx.web/src/main/native/Source/WebCore/worklets/WorkletGlobalScope.cpp b/modules/javafx.web/src/main/native/Source/WebCore/worklets/WorkletGlobalScope.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/worklets/WorkletGlobalScope.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/worklets/WorkletGlobalScope.cpp
@@ -33,10 +33,11 @@
 #include "InspectorInstrumentation.h"
 #include "JSWorkletGlobalScope.h"
 #include "PageConsoleClient.h"
 #include "SecurityOriginPolicy.h"
 #include "Settings.h"
+#include "WorkerEventLoop.h"
 #include "WorkletScriptController.h"
 #include <JavaScriptCore/Exception.h>
 #include <JavaScriptCore/JSLock.h>
 #include <JavaScriptCore/ScriptCallStack.h>
 #include <wtf/IsoMallocInlines.h>
@@ -46,14 +47,12 @@
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(WorkletGlobalScope);
 
 WorkletGlobalScope::WorkletGlobalScope(Document& document, ScriptSourceCode&& code)
     : m_document(makeWeakPtr(document))
-    , m_sessionID(m_document->sessionID())
     , m_script(makeUnique<WorkletScriptController>(this))
     , m_topOrigin(SecurityOrigin::createUnique())
-    , m_eventQueue(*this)
     , m_code(WTFMove(code))
 {
     auto addResult = allWorkletGlobalScopesSet().add(this);
     ASSERT_UNUSED(addResult, addResult);
 
@@ -75,26 +74,36 @@
 
 void WorkletGlobalScope::prepareForDestruction()
 {
     if (!m_script)
         return;
+    if (m_defaultTaskGroup)
+        m_defaultTaskGroup->stopAndDiscardAllTasks();
     stopActiveDOMObjects();
-    removeRejectedPromiseTracker();
     removeAllEventListeners();
+    if (m_eventLoop)
+        m_eventLoop->clearMicrotaskQueue();
+    removeRejectedPromiseTracker();
     m_script->vm().notifyNeedTermination();
     m_script = nullptr;
 }
 
 auto WorkletGlobalScope::allWorkletGlobalScopesSet() -> WorkletGlobalScopesSet&
 {
     static NeverDestroyed<WorkletGlobalScopesSet> scopes;
     return scopes;
 }
 
-String WorkletGlobalScope::origin() const
+EventLoopTaskGroup& WorkletGlobalScope::eventLoop()
 {
-    return m_topOrigin->toString();
+    if (UNLIKELY(!m_defaultTaskGroup)) {
+        m_eventLoop = WorkerEventLoop::create(*this);
+        m_defaultTaskGroup = makeUnique<EventLoopTaskGroup>(*m_eventLoop);
+        if (activeDOMObjectsAreStopped())
+            m_defaultTaskGroup->stopAndDiscardAllTasks();
+    }
+    return *m_defaultTaskGroup;
 }
 
 String WorkletGlobalScope::userAgent(const URL& url) const
 {
     if (!m_document)
@@ -120,11 +129,11 @@
 void WorkletGlobalScope::disableWebAssembly(const String& errorMessage)
 {
     m_script->disableWebAssembly(errorMessage);
 }
 
-URL WorkletGlobalScope::completeURL(const String& url) const
+URL WorkletGlobalScope::completeURL(const String& url, ForceUTF8) const
 {
     if (url.isNull())
         return URL();
     return URL(m_code.url(), url);
 }
@@ -148,14 +157,19 @@
     if (!m_document || isJSExecutionForbidden())
         return;
     m_document->addConsoleMessage(source, level, message, requestIdentifier);
 }
 
-void WorkletGlobalScope::addMessage(MessageSource source, MessageLevel level, const String& messageText, const String& sourceURL, unsigned lineNumber, unsigned columnNumber, RefPtr<ScriptCallStack>&& callStack, JSC::ExecState*, unsigned long requestIdentifier)
+void WorkletGlobalScope::addMessage(MessageSource source, MessageLevel level, const String& messageText, const String& sourceURL, unsigned lineNumber, unsigned columnNumber, RefPtr<ScriptCallStack>&& callStack, JSC::JSGlobalObject*, unsigned long requestIdentifier)
 {
     if (!m_document || isJSExecutionForbidden())
         return;
     m_document->addMessage(source, level, messageText, sourceURL, lineNumber, columnNumber, WTFMove(callStack), nullptr, requestIdentifier);
 }
 
+ReferrerPolicy WorkletGlobalScope::referrerPolicy() const
+{
+    return ReferrerPolicy::NoReferrer;
+}
+
 } // namespace WebCore
 #endif
