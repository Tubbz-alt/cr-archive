diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Algorithm.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Algorithm.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Algorithm.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Algorithm.h
@@ -26,10 +26,11 @@
 #ifndef Algorithm_h
 #define Algorithm_h
 
 #include "BAssert.h"
 #include <algorithm>
+#include <climits>
 #include <cstdint>
 #include <cstddef>
 #include <limits>
 #include <string.h>
 #include <type_traits>
@@ -127,11 +128,11 @@
     remainder = numerator % denominator;
     if (remainder)
         quotient += 1;
 }
 
-template<typename T> inline T divideRoundingUp(T numerator, T denominator)
+template<typename T> constexpr T divideRoundingUp(T numerator, T denominator)
 {
     return (numerator + denominator - 1) / denominator;
 }
 
 template<typename T> inline T roundUpToMultipleOfNonPowerOfTwo(size_t divisor, T x)
@@ -191,8 +192,33 @@
 
     index = endIndex;
     return false;
 }
 
+template <typename T>
+constexpr unsigned ctzConstexpr(T value)
+{
+    constexpr unsigned bitSize = sizeof(T) * CHAR_BIT;
+
+    using UT = typename std::make_unsigned<T>::type;
+    UT uValue = value;
+
+    unsigned zeroCount = 0;
+    for (unsigned i = 0; i < bitSize; i++) {
+        if (uValue & 1)
+            break;
+
+        zeroCount++;
+        uValue >>= 1;
+    }
+    return zeroCount;
+}
+
+template<typename T>
+constexpr unsigned getLSBSetNonZeroConstexpr(T t)
+{
+    return ctzConstexpr(t);
+}
+
 } // namespace bmalloc
 
 #endif // Algorithm_h
