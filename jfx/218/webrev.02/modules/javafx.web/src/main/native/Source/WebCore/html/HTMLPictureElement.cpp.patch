diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLPictureElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLPictureElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLPictureElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLPictureElement.cpp
@@ -42,18 +42,14 @@
 {
 }
 
 HTMLPictureElement::~HTMLPictureElement()
 {
-    document().removeViewportDependentPicture(*this);
-    document().removeAppearanceDependentPicture(*this);
 }
 
 void HTMLPictureElement::didMoveToNewDocument(Document& oldDocument, Document& newDocument)
 {
-    oldDocument.removeViewportDependentPicture(*this);
-    oldDocument.removeAppearanceDependentPicture(*this);
     HTMLElement::didMoveToNewDocument(oldDocument, newDocument);
     sourcesChanged();
 }
 
 Ref<HTMLPictureElement> HTMLPictureElement::create(const QualifiedName& tagName, Document& document)
@@ -65,34 +61,10 @@
 {
     for (auto& element : childrenOfType<HTMLImageElement>(*this))
         element.selectImageSource();
 }
 
-bool HTMLPictureElement::viewportChangeAffectedPicture() const
-{
-    auto documentElement = makeRefPtr(document().documentElement());
-    MediaQueryEvaluator evaluator { document().printing() ? "print" : "screen", document(), documentElement ? documentElement->computedStyle() : nullptr };
-    for (auto& result : m_viewportDependentMediaQueryResults) {
-        LOG(MediaQueries, "HTMLPictureElement %p viewportChangeAffectedPicture evaluating media queries", this);
-        if (evaluator.evaluate(result.expression) != result.result)
-            return true;
-    }
-    return false;
-}
-
-bool HTMLPictureElement::appearanceChangeAffectedPicture() const
-{
-    auto documentElement = makeRefPtr(document().documentElement());
-    MediaQueryEvaluator evaluator { document().printing() ? "print" : "screen", document(), documentElement ? documentElement->computedStyle() : nullptr };
-    for (auto& result : m_appearanceDependentMediaQueryResults) {
-        LOG(MediaQueries, "HTMLPictureElement %p appearanceChangeAffectedPicture evaluating media queries", this);
-        if (evaluator.evaluate(result.expression) != result.result)
-            return true;
-    }
-    return false;
-}
-
 #if USE(SYSTEM_PREVIEW)
 bool HTMLPictureElement::isSystemPreviewImage() const
 {
     if (!RuntimeEnabledFeatures::sharedFeatures().systemPreviewEnabled())
         return false;
