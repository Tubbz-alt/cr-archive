diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GenericArguments.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GenericArguments.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GenericArguments.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/GenericArguments.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -34,34 +34,34 @@
 // "arguments" inside a function. This class doesn't show up in the JSCell inheritance hierarchy.
 template<typename Type>
 class GenericArguments : public JSNonFinalObject {
 public:
     typedef JSNonFinalObject Base;
-    static const unsigned StructureFlags = Base::StructureFlags | OverridesGetOwnPropertySlot | InterceptsGetOwnPropertySlotByIndexEvenWhenLengthIsNotZero | OverridesGetPropertyNames;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | OverridesGetOwnPropertySlot | InterceptsGetOwnPropertySlotByIndexEvenWhenLengthIsNotZero | OverridesGetPropertyNames;
 
 protected:
     GenericArguments(VM& vm, Structure* structure)
         : Base(vm, structure)
     {
     }
 
     static void visitChildren(JSCell*, SlotVisitor&);
-    static bool getOwnPropertySlot(JSObject*, ExecState*, PropertyName, PropertySlot&);
-    static bool getOwnPropertySlotByIndex(JSObject*, ExecState*, unsigned propertyName, PropertySlot&);
-    static void getOwnPropertyNames(JSObject*, ExecState*, PropertyNameArray&, EnumerationMode);
-    static bool put(JSCell*, ExecState*, PropertyName, JSValue, PutPropertySlot&);
-    static bool putByIndex(JSCell*, ExecState*, unsigned propertyName, JSValue, bool shouldThrow);
-    static bool deleteProperty(JSCell*, ExecState*, PropertyName);
-    static bool deletePropertyByIndex(JSCell*, ExecState*, unsigned propertyName);
-    static bool defineOwnProperty(JSObject*, ExecState*, PropertyName, const PropertyDescriptor&, bool shouldThrow);
+    static bool getOwnPropertySlot(JSObject*, JSGlobalObject*, PropertyName, PropertySlot&);
+    static bool getOwnPropertySlotByIndex(JSObject*, JSGlobalObject*, unsigned propertyName, PropertySlot&);
+    static void getOwnPropertyNames(JSObject*, JSGlobalObject*, PropertyNameArray&, EnumerationMode);
+    static bool put(JSCell*, JSGlobalObject*, PropertyName, JSValue, PutPropertySlot&);
+    static bool putByIndex(JSCell*, JSGlobalObject*, unsigned propertyName, JSValue, bool shouldThrow);
+    static bool deleteProperty(JSCell*, JSGlobalObject*, PropertyName);
+    static bool deletePropertyByIndex(JSCell*, JSGlobalObject*, unsigned propertyName);
+    static bool defineOwnProperty(JSObject*, JSGlobalObject*, PropertyName, const PropertyDescriptor&, bool shouldThrow);
 
-    void initModifiedArgumentsDescriptor(VM&, unsigned length);
-    void initModifiedArgumentsDescriptorIfNecessary(VM&, unsigned length);
-    void setModifiedArgumentDescriptor(VM&, unsigned index, unsigned length);
+    void initModifiedArgumentsDescriptor(JSGlobalObject*, unsigned length);
+    void initModifiedArgumentsDescriptorIfNecessary(JSGlobalObject*, unsigned length);
+    void setModifiedArgumentDescriptor(JSGlobalObject*, unsigned index, unsigned length);
     bool isModifiedArgumentDescriptor(unsigned index, unsigned length);
 
-    void copyToArguments(ExecState*, VirtualRegister firstElementDest, unsigned offset, unsigned length);
+    void copyToArguments(JSGlobalObject*, JSValue* firstElementDest, unsigned offset, unsigned length);
 
     using ModifiedArgumentsPtr = CagedBarrierPtr<Gigacage::Primitive, bool>;
     ModifiedArgumentsPtr m_modifiedArgumentsDescriptor;
 };
 
