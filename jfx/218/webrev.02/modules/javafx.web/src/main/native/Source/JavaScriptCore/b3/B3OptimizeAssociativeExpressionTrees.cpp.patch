diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3OptimizeAssociativeExpressionTrees.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3OptimizeAssociativeExpressionTrees.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3OptimizeAssociativeExpressionTrees.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3OptimizeAssociativeExpressionTrees.cpp
@@ -247,10 +247,12 @@
     // We proceed in two phases.
     // In the first one we compute the use counts of each value (of an interesting opcode), and find potential roots of interesting expression trees.
     // In the second one we optimize each such expression tree in turn.
     // We need the use counts to avoid duplicating code.
 
+    m_proc.resetValueOwners();
+
     Vector<unsigned> useCounts(m_proc.values().size(), 0); // Mapping from Value::m_index to use counts.
     HashSet<Value*> expressionTreeRoots;
     HashSet<BasicBlock*> rootOwners;
 
     for (BasicBlock* block : m_proc) {
