diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCache.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCache.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCache.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCache.h
@@ -26,10 +26,11 @@
 #pragma once
 
 #include "ActiveDOMObject.h"
 #include "CacheStorageConnection.h"
 #include "CacheStorageRecord.h"
+#include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
 class ScriptExecutionContext;
 
@@ -54,11 +55,11 @@
     void keys(Optional<RequestInfo>&&, CacheQueryOptions&&, KeysPromise&&);
 
     const String& name() const { return m_name; }
     uint64_t identifier() const { return m_identifier; }
 
-    using MatchCallback = WTF::Function<void(ExceptionOr<FetchResponse*>)>;
+    using MatchCallback = Function<void(ExceptionOr<RefPtr<FetchResponse>>)>;
     void doMatch(RequestInfo&&, CacheQueryOptions&&, MatchCallback&&);
 
     CacheStorageConnection& connection() { return m_connection.get(); }
 
 private:
@@ -67,11 +68,10 @@
     ExceptionOr<Ref<FetchRequest>> requestFromInfo(RequestInfo&&, bool ignoreMethod);
 
     // ActiveDOMObject
     void stop() final;
     const char* activeDOMObjectName() const final;
-    bool canSuspendForDocumentSuspension() const final;
 
     void putWithResponseData(DOMPromiseDeferred<void>&&, Ref<FetchRequest>&&, Ref<FetchResponse>&&, ExceptionOr<RefPtr<SharedBuffer>>&&);
 
     void retrieveRecords(const URL&, WTF::Function<void(Optional<Exception>&&)>&&);
     Vector<CacheStorageRecord> queryCacheWithTargetStorage(const FetchRequest&, const CacheQueryOptions&, const Vector<CacheStorageRecord>&);
