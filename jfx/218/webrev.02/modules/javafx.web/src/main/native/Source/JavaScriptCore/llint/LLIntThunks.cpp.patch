diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LLIntThunks.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LLIntThunks.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LLIntThunks.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/llint/LLIntThunks.cpp
@@ -37,10 +37,12 @@
 #include "LinkBuffer.h"
 #include "LowLevelInterpreter.h"
 #include "ProtoCallFrame.h"
 #include "StackAlignment.h"
 #include "VM.h"
+#include "WasmCallingConvention.h"
+#include "WasmContextInlines.h"
 #include <wtf/NeverDestroyed.h>
 
 namespace JSC {
 
 #if ENABLE(JIT)
@@ -58,12 +60,17 @@
 
     // FIXME: there's probably a better way to do it on X86, but I'm not sure I care.
     LLIntCode target = LLInt::getCodeFunctionPtr<JSEntryPtrTag>(opcodeID);
     assertIsTaggedWith(target, JSEntryPtrTag);
 
-    jit.move(JSInterfaceJIT::TrustedImmPtr(target), JSInterfaceJIT::regT0);
-    jit.farJump(JSInterfaceJIT::regT0, JSEntryPtrTag);
+#if ENABLE(WEBASSEMBLY)
+    CCallHelpers::RegisterID scratch = Wasm::wasmCallingConvention().prologueScratchGPRs[0];
+#else
+    CCallHelpers::RegisterID scratch = JSInterfaceJIT::regT0;
+#endif
+    jit.move(JSInterfaceJIT::TrustedImmPtr(target), scratch);
+    jit.farJump(scratch, JSEntryPtrTag);
 
     LinkBuffer patchBuffer(jit, GLOBAL_THUNK_ID);
     return FINALIZE_CODE(patchBuffer, JITThunkPtrTag, "LLInt %s prologue thunk", thunkKind);
 }
 
@@ -135,10 +142,25 @@
         codeRef.construct(generateThunkWithJumpTo(llint_module_program_prologue, "module_program"));
     });
     return codeRef;
 }
 
+#if ENABLE(WEBASSEMBLY)
+MacroAssemblerCodeRef<JITThunkPtrTag> wasmFunctionEntryThunk()
+{
+    static LazyNeverDestroyed<MacroAssemblerCodeRef<JITThunkPtrTag>> codeRef;
+    static std::once_flag onceKey;
+    std::call_once(onceKey, [&] {
+        if (Wasm::Context::useFastTLS())
+            codeRef.construct(generateThunkWithJumpTo(wasm_function_prologue, "function for call"));
+        else
+            codeRef.construct(generateThunkWithJumpTo(wasm_function_prologue_no_tls, "function for call"));
+    });
+    return codeRef;
+}
+#endif // ENABLE(WEBASSEMBLY)
+
 } // namespace LLInt
 
 #endif
 
 #if ENABLE(C_LOOP)
