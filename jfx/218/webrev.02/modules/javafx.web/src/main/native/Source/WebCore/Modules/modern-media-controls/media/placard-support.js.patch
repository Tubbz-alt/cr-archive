diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/modern-media-controls/media/placard-support.js b/modules/javafx.web/src/main/native/Source/WebCore/Modules/modern-media-controls/media/placard-support.js
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/modern-media-controls/media/placard-support.js
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/modern-media-controls/media/placard-support.js
@@ -42,16 +42,22 @@
     handleEvent(event)
     {
         this._updatePlacard();
     }
 
+    enable()
+    {
+        super.enable();
+        this._isDisabled = false;
+        this._updatePlacard();
+    }
+
     disable()
     {
-        // We should not allow disabling Placard support when playing inline as it would prevent the
-        // PiP placard from being shown if the controls are disabled.
-        if (this.mediaController.isFullscreen)
-            super.disable();
+        // Never disable the plackard, just remeber whether the placard should be visible or not
+        this._isDisabled = true;
+        this._updatePlacard();
     }
 
     // Private
 
     _updatePlacard()
@@ -63,11 +69,11 @@
         if (media.webkitPresentationMode === "picture-in-picture")
             placard = controls.pipPlacard;
         else if (media.webkitCurrentPlaybackTargetIsWireless) {
             this._updateAirPlayPlacard();
             placard = controls.airplayPlacard;
-        } else if (media instanceof HTMLVideoElement && media.error !== null && media.played.length === 0)
+        } else if (!this._isDisabled && media instanceof HTMLVideoElement && media.error !== null && media.played.length === 0)
             placard = controls.invalidPlacard;
 
         controls.placard = placard;
     }
     
@@ -78,15 +84,22 @@
         if (!this.mediaController.host)
             return;
         
         switch(this.mediaController.host.externalDeviceType) {
             case 'airplay':
-                deviceName = UIString("This video is playing on “%s”.", this.mediaController.host.externalDeviceDisplayName || UIString("Apple TV"));
+                deviceName = UIString("This video is playing on “%s”.", escapeHTML(this.mediaController.host.externalDeviceDisplayName) || UIString("Apple TV"));
                 break;
             case 'tvout':
                 deviceName = UIString("This video is playing on the TV.");
                 break;
         }
         this.mediaController.controls.airplayPlacard.description = deviceName;
     }
 
 }
+
+function escapeHTML(unsafeString)
+{
+    var div = document.createElement("div");
+    div.textContent = unsafeString;
+    return div.innerHTML;
+}
