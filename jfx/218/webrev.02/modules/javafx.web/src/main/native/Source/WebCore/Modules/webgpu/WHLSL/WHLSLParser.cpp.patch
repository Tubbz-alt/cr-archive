diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLParser.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLParser.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLParser.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/WHLSLParser.cpp
@@ -401,12 +401,10 @@
         auto value = floatLiteralToFloat(type->stringView(m_lexer));
         if (!value)
             return makeUnexpected(value.error());
         return {{ AST::FloatLiteral({ *type }, *value) }};
     }
-    case Token::Type::Null:
-        return { AST::NullLiteral(WTFMove(*type)) };
     case Token::Type::True:
         return { AST::BooleanLiteral(WTFMove(*type), true) };
     case Token::Type::False:
         return { AST::BooleanLiteral(WTFMove(*type), false) };
     default: {
@@ -696,10 +694,12 @@
         mode = AST::ResourceSemantic::Mode::Buffer;
         break;
     case 's':
         mode = AST::ResourceSemantic::Mode::Sampler;
         break;
+    default:
+        RELEASE_ASSERT_NOT_REACHED();
     }
 
     auto index = recognizeSimpleUnsignedInteger(infoStringView.substring(1));
     if (!index)
         return makeUnexpected(index.error());
@@ -873,11 +873,10 @@
         constantExpression->visit(WTF::makeVisitor([&](AST::IntegerLiteral& integerLiteral) {
             value = integerLiteral.value();
         }, [&](AST::UnsignedIntegerLiteral& unsignedIntegerLiteral) {
             value = unsignedIntegerLiteral.value();
         }, [&](AST::FloatLiteral&) {
-        }, [&](AST::NullLiteral&) {
         }, [&](AST::BooleanLiteral&) {
         }, [&](AST::EnumerationMemberLiteral&) {
         }));
 
         if (!value)
@@ -2061,11 +2060,11 @@
         if (!value)
             return makeUnexpected(value.error());
         return { makeUniqueRef<AST::FloatLiteral>(*type, *value) };
     }
     case Token::Type::Null:
-        return { makeUniqueRef<AST::NullLiteral>(*type) };
+        return makeUnexpected(Error("'null' is a reserved keyword.", type->codeLocation));
     case Token::Type::True:
         return { makeUniqueRef<AST::BooleanLiteral>(*type, true) };
     case Token::Type::False:
         return { makeUniqueRef<AST::BooleanLiteral>(*type, false) };
     case Token::Type::Identifier: {
