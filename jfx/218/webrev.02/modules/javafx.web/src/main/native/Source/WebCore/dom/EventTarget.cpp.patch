diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/EventTarget.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/EventTarget.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/EventTarget.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/EventTarget.cpp
@@ -37,11 +37,11 @@
 #include "HTMLBodyElement.h"
 #include "HTMLHtmlElement.h"
 #include "InspectorInstrumentation.h"
 #include "JSEventListener.h"
 #include "JSLazyEventListener.h"
-#include "RuntimeEnabledFeatures.h"
+#include "Quirks.h"
 #include "ScriptController.h"
 #include "ScriptDisallowedScope.h"
 #include "Settings.h"
 #include "WebKitAnimationEvent.h"
 #include "WebKitTransitionEvent.h"
@@ -68,27 +68,18 @@
     return false;
 }
 
 bool EventTarget::addEventListener(const AtomString& eventType, Ref<EventListener>&& listener, const AddEventListenerOptions& options)
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     listener->checkValidityForEventTarget(*this);
 #endif
 
     auto passive = options.passive;
 
-    if (!passive.hasValue() && eventNames().isTouchScrollBlockingEventType(eventType)) {
-        if (is<DOMWindow>(*this)) {
-            auto& window = downcast<DOMWindow>(*this);
-            if (auto* document = window.document())
-                passive = document->settings().passiveTouchListenersAsDefaultOnDocument();
-        } else if (is<Node>(*this)) {
-            auto& node = downcast<Node>(*this);
-            if (is<Document>(node) || node.document().documentElement() == &node || node.document().body() == &node)
-                passive = node.document().settings().passiveTouchListenersAsDefaultOnDocument();
-        }
-    }
+    if (!passive.hasValue() && Quirks::shouldMakeEventListenerPassive(*this, eventType, listener.get()))
+        passive = true;
 
     bool listenerCreatedFromScript = listener->type() == EventListener::JSEventListenerType && !listener->wasCreatedFromMarkup();
     auto listenerRef = listener.copyRef();
 
     if (!ensureEventTargetData().eventListenerMap.add(eventType, WTFMove(listener), { options.capture, passive.valueOr(false), options.once }))
@@ -148,11 +139,11 @@
         return false;
     }
     if (existingListener) {
         InspectorInstrumentation::willRemoveEventListener(*this, eventType, *existingListener, false);
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         listener->checkValidityForEventTarget(*this);
 #endif
 
         auto listenerPointer = listener.copyRef();
         eventTargetData()->eventListenerMap.replace(eventType, *existingListener, listener.releaseNonNull(), { });
@@ -185,18 +176,18 @@
     return data && data->eventListenerMap.containsActive(eventType);
 }
 
 ExceptionOr<bool> EventTarget::dispatchEventForBindings(Event& event)
 {
-    event.setUntrusted();
-
     if (!event.isInitialized() || event.isBeingDispatched())
         return Exception { InvalidStateError };
 
     if (!scriptExecutionContext())
         return false;
 
+    event.setUntrusted();
+
     dispatchEvent(event);
     return event.legacyReturnValue();
 }
 
 void EventTarget::dispatchEvent(Event& event)
@@ -280,13 +271,12 @@
     ASSERT(!listeners.isEmpty());
     ASSERT(scriptExecutionContext());
 
     auto& context = *scriptExecutionContext();
     bool contextIsDocument = is<Document>(context);
-    InspectorInstrumentationCookie willDispatchEventCookie;
     if (contextIsDocument)
-        willDispatchEventCookie = InspectorInstrumentation::willDispatchEvent(downcast<Document>(context), event, true);
+        InspectorInstrumentation::willDispatchEvent(downcast<Document>(context), event);
 
     for (auto& registeredListener : listeners) {
         if (UNLIKELY(registeredListener->wasRemoved()))
             continue;
 
@@ -308,11 +298,11 @@
             removeEventListener(event.type(), registeredListener->callback(), ListenerOptions(registeredListener->useCapture()));
 
         if (registeredListener->isPassive())
             event.setInPassiveListener(true);
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         registeredListener->callback().checkValidityForEventTarget(*this);
 #endif
 
         InspectorInstrumentation::willHandleEvent(context, event, *registeredListener);
         registeredListener->callback().handleEvent(context, event);
@@ -321,11 +311,11 @@
         if (registeredListener->isPassive())
             event.setInPassiveListener(false);
     }
 
     if (contextIsDocument)
-        InspectorInstrumentation::didDispatchEvent(willDispatchEventCookie, event.defaultPrevented());
+        InspectorInstrumentation::didDispatchEvent(downcast<Document>(context), event);
 }
 
 Vector<AtomString> EventTarget::eventTypes()
 {
     if (auto* data = eventTargetData())
