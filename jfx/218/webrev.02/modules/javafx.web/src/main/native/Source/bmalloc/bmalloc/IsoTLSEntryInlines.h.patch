diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoTLSEntryInlines.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoTLSEntryInlines.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoTLSEntryInlines.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoTLSEntryInlines.h
@@ -41,17 +41,14 @@
     }
 }
 
 template<typename EntryType>
 DefaultIsoTLSEntry<EntryType>::DefaultIsoTLSEntry()
-    : IsoTLSEntry(alignof(EntryType), sizeof(EntryType))
-{
-}
-
-template<typename EntryType>
-DefaultIsoTLSEntry<EntryType>::~DefaultIsoTLSEntry()
+    : IsoTLSEntry(sizeof(EntryType))
 {
+    static_assert(sizeof(EntryType) <= UINT32_MAX);
+    static_assert(sizeof(void*) == alignof(EntryType), "Because IsoTLSEntry includes vtable, it should be the same to the pointer");
 }
 
 template<typename EntryType>
 void DefaultIsoTLSEntry<EntryType>::move(void* passedSrc, void* dst)
 {
@@ -65,14 +62,7 @@
 {
     EntryType* entry = static_cast<EntryType*>(passedEntry);
     entry->~EntryType();
 }
 
-template<typename EntryType>
-void DefaultIsoTLSEntry<EntryType>::scavenge(void* passedEntry)
-{
-    EntryType* entry = static_cast<EntryType*>(passedEntry);
-    entry->scavenge();
-}
-
 } // namespace bmalloc
 
