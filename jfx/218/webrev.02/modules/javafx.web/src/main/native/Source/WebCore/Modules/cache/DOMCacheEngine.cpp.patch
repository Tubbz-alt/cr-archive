diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCacheEngine.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCacheEngine.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCacheEngine.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/cache/DOMCacheEngine.cpp
@@ -28,16 +28,17 @@
 #include "DOMCacheEngine.h"
 
 #include "CacheQueryOptions.h"
 #include "Exception.h"
 #include "HTTPParsers.h"
+#include "ScriptExecutionContext.h"
 
 namespace WebCore {
 
 namespace DOMCacheEngine {
 
-static inline Exception errorToException(Error error)
+Exception convertToException(Error error)
 {
     switch (error) {
     case Error::NotImplemented:
         return Exception { NotSupportedError, "Not implemented"_s };
     case Error::ReadDisk:
@@ -46,19 +47,20 @@
         return Exception { TypeError, "Failed writing data to the file system"_s };
     case Error::QuotaExceeded:
         return Exception { QuotaExceededError, "Quota exceeded"_s };
     case Error::Internal:
         return Exception { TypeError, "Internal error"_s };
-    default:
-        ASSERT_NOT_REACHED();
-        return Exception { TypeError, "Connection stopped"_s };
+    case Error::Stopped:
+        return Exception { TypeError, "Context is stopped"_s };
     }
+    ASSERT_NOT_REACHED();
+    return Exception { TypeError, "Connection stopped"_s };
 }
 
 Exception convertToExceptionAndLog(ScriptExecutionContext* context, Error error)
 {
-    auto exception = errorToException(error);
+    auto exception = convertToException(error);
     if (context)
         context->addConsoleMessage(MessageSource::JS, MessageLevel::Error, makeString("Cache API operation failed: ", exception.message()));
     return exception;
 }
 
