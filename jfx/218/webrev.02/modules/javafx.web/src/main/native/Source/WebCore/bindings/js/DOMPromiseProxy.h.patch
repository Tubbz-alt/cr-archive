diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/DOMPromiseProxy.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/DOMPromiseProxy.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/DOMPromiseProxy.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/DOMPromiseProxy.h
@@ -41,11 +41,11 @@
     using Value = typename IDLType::StorageType;
 
     DOMPromiseProxy() = default;
     ~DOMPromiseProxy() = default;
 
-    JSC::JSValue promise(JSC::ExecState&, JSDOMGlobalObject&);
+    JSC::JSValue promise(JSC::JSGlobalObject&, JSDOMGlobalObject&);
 
     void clear();
 
     bool isFulfilled() const;
 
@@ -63,11 +63,11 @@
     WTF_MAKE_FAST_ALLOCATED;
 public:
     DOMPromiseProxy() = default;
     ~DOMPromiseProxy() = default;
 
-    JSC::JSValue promise(JSC::ExecState&, JSDOMGlobalObject&);
+    JSC::JSValue promise(JSC::JSGlobalObject&, JSDOMGlobalObject&);
 
     void clear();
 
     bool isFulfilled() const;
 
@@ -92,11 +92,11 @@
     template <typename Class, typename BaseClass>
     DOMPromiseProxyWithResolveCallback(Class&, typename IDLType::ParameterType (BaseClass::*)());
     DOMPromiseProxyWithResolveCallback(ResolveCallback&&);
     ~DOMPromiseProxyWithResolveCallback() = default;
 
-    JSC::JSValue promise(JSC::ExecState&, JSDOMGlobalObject&);
+    JSC::JSValue promise(JSC::JSGlobalObject&, JSDOMGlobalObject&);
 
     void clear();
 
     bool isFulfilled() const;
 
@@ -112,19 +112,20 @@
 
 
 // MARK: - DOMPromiseProxy<IDLType> generic implementation
 
 template<typename IDLType>
-inline JSC::JSValue DOMPromiseProxy<IDLType>::promise(JSC::ExecState& state, JSDOMGlobalObject& globalObject)
+inline JSC::JSValue DOMPromiseProxy<IDLType>::promise(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject)
 {
+    UNUSED_PARAM(lexicalGlobalObject);
     for (auto& deferredPromise : m_deferredPromises) {
         if (deferredPromise->globalObject() == &globalObject)
             return deferredPromise->promise();
     }
 
     // DeferredPromise can fail construction during worker abrupt termination.
-    auto deferredPromise = DeferredPromise::create(state, globalObject, DeferredPromise::Mode::RetainPromiseOnResolve);
+    auto deferredPromise = DeferredPromise::create(globalObject, DeferredPromise::Mode::RetainPromiseOnResolve);
     if (!deferredPromise)
         return JSC::jsUndefined();
 
     if (m_valueOrException) {
         if (m_valueOrException->hasException())
@@ -182,19 +183,20 @@
 }
 
 
 // MARK: - DOMPromiseProxy<IDLVoid> specialization
 
-inline JSC::JSValue DOMPromiseProxy<IDLVoid>::promise(JSC::ExecState& state, JSDOMGlobalObject& globalObject)
+inline JSC::JSValue DOMPromiseProxy<IDLVoid>::promise(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject)
 {
+    UNUSED_PARAM(lexicalGlobalObject);
     for (auto& deferredPromise : m_deferredPromises) {
         if (deferredPromise->globalObject() == &globalObject)
             return deferredPromise->promise();
     }
 
     // DeferredPromise can fail construction during worker abrupt termination.
-    auto deferredPromise = DeferredPromise::create(state, globalObject, DeferredPromise::Mode::RetainPromiseOnResolve);
+    auto deferredPromise = DeferredPromise::create(globalObject, DeferredPromise::Mode::RetainPromiseOnResolve);
     if (!deferredPromise)
         return JSC::jsUndefined();
 
     if (m_valueOrException) {
         if (m_valueOrException->hasException())
@@ -249,19 +251,20 @@
     : m_resolveCallback(WTFMove(function))
 {
 }
 
 template<typename IDLType>
-inline JSC::JSValue DOMPromiseProxyWithResolveCallback<IDLType>::promise(JSC::ExecState& state, JSDOMGlobalObject& globalObject)
+inline JSC::JSValue DOMPromiseProxyWithResolveCallback<IDLType>::promise(JSC::JSGlobalObject& lexicalGlobalObject, JSDOMGlobalObject& globalObject)
 {
+    UNUSED_PARAM(lexicalGlobalObject);
     for (auto& deferredPromise : m_deferredPromises) {
         if (deferredPromise->globalObject() == &globalObject)
             return deferredPromise->promise();
     }
 
     // DeferredPromise can fail construction during worker abrupt termination.
-    auto deferredPromise = DeferredPromise::create(state, globalObject, DeferredPromise::Mode::RetainPromiseOnResolve);
+    auto deferredPromise = DeferredPromise::create(globalObject, DeferredPromise::Mode::RetainPromiseOnResolve);
     if (!deferredPromise)
         return JSC::jsUndefined();
 
     if (m_valueOrException) {
         if (m_valueOrException->hasException())
