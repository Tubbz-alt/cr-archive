diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITSubGenerator.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITSubGenerator.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITSubGenerator.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITSubGenerator.cpp
@@ -31,11 +31,11 @@
 
 #if ENABLE(JIT)
 
 namespace JSC {
 
-JITMathICInlineResult JITSubGenerator::generateInline(CCallHelpers& jit, MathICGenerationState& state, const ArithProfile* arithProfile)
+JITMathICInlineResult JITSubGenerator::generateInline(CCallHelpers& jit, MathICGenerationState& state, const BinaryArithProfile* arithProfile)
 {
     // We default to speculating int32.
     ObservedType lhs = ObservedType().withInt32();
     ObservedType rhs = ObservedType().withInt32();
     if (arithProfile) {
@@ -76,11 +76,11 @@
     }
 
     return JITMathICInlineResult::GenerateFullSnippet;
 }
 
-bool JITSubGenerator::generateFastPath(CCallHelpers& jit, CCallHelpers::JumpList& endJumpList, CCallHelpers::JumpList& slowPathJumpList, const ArithProfile* arithProfile, bool shouldEmitProfiling)
+bool JITSubGenerator::generateFastPath(CCallHelpers& jit, CCallHelpers::JumpList& endJumpList, CCallHelpers::JumpList& slowPathJumpList, const BinaryArithProfile* arithProfile, bool shouldEmitProfiling)
 {
     ASSERT(m_scratchGPR != InvalidGPRReg);
     ASSERT(m_scratchGPR != m_left.payloadGPR());
     ASSERT(m_scratchGPR != m_right.payloadGPR());
 #if USE(JSVALUE32_64)
