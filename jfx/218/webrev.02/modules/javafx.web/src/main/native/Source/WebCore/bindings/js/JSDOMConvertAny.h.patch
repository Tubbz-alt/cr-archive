diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertAny.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertAny.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertAny.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConvertAny.h
@@ -33,11 +33,11 @@
 template<> struct Converter<IDLAny> : DefaultConverter<IDLAny> {
     using ReturnType = JSC::JSValue;
 
     static constexpr bool conversionHasSideEffects = false;
 
-    static JSC::JSValue convert(JSC::ExecState&, JSC::JSValue value)
+    static JSC::JSValue convert(JSC::JSGlobalObject&, JSC::JSValue value)
     {
         return value;
     }
 
     static JSC::JSValue convert(const JSC::Strong<JSC::Unknown>& value)
@@ -62,16 +62,16 @@
 };
 
 template<> struct VariadicConverter<IDLAny> {
     using Item = typename IDLAny::ImplementationType;
 
-    static Optional<Item> convert(JSC::ExecState& state, JSC::JSValue value)
+    static Optional<Item> convert(JSC::JSGlobalObject& lexicalGlobalObject, JSC::JSValue value)
     {
-        auto& vm = state.vm();
+        auto& vm = JSC::getVM(&lexicalGlobalObject);
         auto scope = DECLARE_THROW_SCOPE(vm);
 
-        auto result = Converter<IDLAny>::convert(state, value);
+        auto result = Converter<IDLAny>::convert(lexicalGlobalObject, value);
         RETURN_IF_EXCEPTION(scope, WTF::nullopt);
 
         return Item { vm, result };
     }
 };
