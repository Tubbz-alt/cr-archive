diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLIndexExpression.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLIndexExpression.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLIndexExpression.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLIndexExpression.h
@@ -43,37 +43,30 @@
 public:
     IndexExpression(CodeLocation location, UniqueRef<Expression>&& base, UniqueRef<Expression>&& index)
         : PropertyAccessExpression(location, Kind::Index, WTFMove(base))
         , m_index(WTFMove(index))
     {
+#if CPU(ADDRESS32)
+        UNUSED_PARAM(m_padding);
+#endif
     }
 
     ~IndexExpression() = default;
 
     IndexExpression(const IndexExpression&) = delete;
     IndexExpression(IndexExpression&&) = default;
 
-    String getterFunctionName() const
-    {
-        return "operator[]"_str;
-    }
-
-    String setterFunctionName() const
-    {
-        return "operator[]="_str;
-    }
-
-    String anderFunctionName() const
-    {
-        return "operator&[]"_str;
-    }
-
     Expression& indexExpression() { return m_index; }
+    UniqueRef<Expression>& indexReference() { return m_index; }
     UniqueRef<Expression> takeIndex() { return WTFMove(m_index); }
 
 private:
     UniqueRef<Expression> m_index;
+#if CPU(ADDRESS32)
+    // This is used to allow for replaceWith into a bigger type.
+    char m_padding[4];
+#endif
 };
 
 } // namespace AST
 
 }
