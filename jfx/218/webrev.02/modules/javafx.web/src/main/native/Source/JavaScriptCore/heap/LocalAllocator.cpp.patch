diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/LocalAllocator.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/LocalAllocator.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/LocalAllocator.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/LocalAllocator.cpp
@@ -108,16 +108,15 @@
 {
     stopAllocating();
     reset();
 }
 
-void* LocalAllocator::allocateSlowCase(GCDeferralContext* deferralContext, AllocationFailureMode failureMode)
+void* LocalAllocator::allocateSlowCase(Heap& heap, GCDeferralContext* deferralContext, AllocationFailureMode failureMode)
 {
     SuperSamplerScope superSamplerScope(false);
-    Heap& heap = *m_directory->m_heap;
     ASSERT(heap.vm().currentThreadIsHoldingAPILock());
-    doTestCollectionsIfNeeded(deferralContext);
+    doTestCollectionsIfNeeded(heap, deferralContext);
 
     ASSERT(!m_directory->markedSpace().isIterating());
     heap.didAllocate(m_freeList.originalSize());
 
     didConsumeFreeList();
@@ -127,18 +126,24 @@
     heap.collectIfNecessaryOrDefer(deferralContext);
 
     // Goofy corner case: the GC called a callback and now this directory has a currentBlock. This only
     // happens when running WebKit tests, which inject a callback into the GC's finalization.
     if (UNLIKELY(m_currentBlock))
-        return allocate(deferralContext, failureMode);
+        return allocate(heap, deferralContext, failureMode);
 
     void* result = tryAllocateWithoutCollecting();
 
-    if (LIKELY(result != 0))
+    if (LIKELY(result != nullptr))
         return result;
 
-    MarkedBlock::Handle* block = m_directory->tryAllocateBlock();
+    Subspace* subspace = m_directory->m_subspace;
+    if (subspace->isIsoSubspace()) {
+        if (void* result = static_cast<IsoSubspace*>(subspace)->tryAllocateFromLowerTier())
+            return result;
+    }
+
+    MarkedBlock::Handle* block = m_directory->tryAllocateBlock(heap);
     if (!block) {
         if (failureMode == AllocationFailureMode::Assert)
             RELEASE_ASSERT_NOT_REACHED();
         else
             return nullptr;
@@ -241,22 +246,22 @@
     m_directory->setIsEden(NoLockingNecessary, m_currentBlock, true);
     m_directory->markedSpace().didAllocateInBlock(m_currentBlock);
     return result;
 }
 
-void LocalAllocator::doTestCollectionsIfNeeded(GCDeferralContext* deferralContext)
+void LocalAllocator::doTestCollectionsIfNeeded(Heap& heap, GCDeferralContext* deferralContext)
 {
     if (!Options::slowPathAllocsBetweenGCs())
         return;
 
     static unsigned allocationCount = 0;
     if (!allocationCount) {
-        if (!m_directory->m_heap->isDeferred()) {
+        if (!heap.isDeferred()) {
             if (deferralContext)
                 deferralContext->m_shouldGC = true;
             else
-                m_directory->m_heap->collectNow(Sync, CollectionScope::Full);
+                heap.collectNow(Sync, CollectionScope::Full);
         }
     }
     if (++allocationCount >= Options::slowPathAllocsBetweenGCs())
         allocationCount = 0;
 }
