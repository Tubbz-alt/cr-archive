diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLNativeTypeWriter.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLNativeTypeWriter.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLNativeTypeWriter.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/Metal/WHLSLNativeTypeWriter.cpp
@@ -94,29 +94,18 @@
         ASSERT(WTF::holds_alternative<Ref<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]));
         auto& typeReference = WTF::get<Ref<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]);
         auto& unifyNode = typeReference->unifyNode();
         auto& namedType = downcast<AST::NamedType>(unifyNode);
         auto& parameterType = downcast<AST::NativeTypeDeclaration>(namedType);
-        auto prefix = ([&]() -> String {
+        auto prefix = ([&] {
             if (parameterType.name() == "bool")
                 return "bool";
             ASSERT(parameterType.name() == "float");
             return "float";
         })();
 
-        ASSERT(WTF::holds_alternative<AST::ConstantExpression>(nativeTypeDeclaration.typeArguments()[1]));
-        auto& constantExpression1 = WTF::get<AST::ConstantExpression>(nativeTypeDeclaration.typeArguments()[1]);
-        auto& integerLiteral1 = constantExpression1.integerLiteral();
-        unsigned rows = integerLiteral1.value();
-        ASSERT(rows == 2 || rows == 3 || rows == 4);
-
-        ASSERT(WTF::holds_alternative<AST::ConstantExpression>(nativeTypeDeclaration.typeArguments()[2]));
-        auto& constantExpression2 = WTF::get<AST::ConstantExpression>(nativeTypeDeclaration.typeArguments()[2]);
-        auto& integerLiteral2 = constantExpression2.integerLiteral();
-        unsigned columns = integerLiteral2.value();
-        ASSERT(columns == 2 || columns == 3 || columns == 4);
-        return makeString("array<", prefix, ", ", columns * rows, ">");
+        return makeString("WSLMatrix<", prefix, ", ", nativeTypeDeclaration.numberOfMatrixColumns(), ", ", nativeTypeDeclaration.numberOfMatrixRows(), ">");
     }
     ASSERT(nativeTypeDeclaration.typeArguments().size() == 1);
     ASSERT(WTF::holds_alternative<Ref<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]));
     auto& typeReference = WTF::get<Ref<AST::TypeReference>>(nativeTypeDeclaration.typeArguments()[0]);
     auto prefix = ([&]() -> String {
