diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/cf/StringImplCF.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/cf/StringImplCF.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/cf/StringImplCF.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/cf/StringImplCF.cpp
@@ -22,18 +22,23 @@
 #include <wtf/text/StringImpl.h>
 
 #if USE(CF)
 
 #include <CoreFoundation/CoreFoundation.h>
+#include <wtf/DebugHeap.h>
 #include <wtf/MainThread.h>
+#include <wtf/NeverDestroyed.h>
 #include <wtf/RetainPtr.h>
 #include <wtf/Threading.h>
 
 namespace WTF {
 
 namespace StringWrapperCFAllocator {
 
+    DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(StringWrapperCFAllocator);
+    DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(StringWrapperCFAllocator);
+
     static StringImpl* currentString;
 
     static const void* retain(const void* info)
     {
         return info;
@@ -58,42 +63,42 @@
             if (underlyingString) {
                 currentString = 0;
                 underlyingString->ref(); // Balanced by call to deref in deallocate below.
             }
         }
-        StringImpl** header = static_cast<StringImpl**>(fastMalloc(sizeof(StringImpl*) + size));
+        StringImpl** header = static_cast<StringImpl**>(StringWrapperCFAllocatorMalloc::malloc(sizeof(StringImpl*) + size));
         *header = underlyingString;
         return header + 1;
     }
 
     static void* reallocate(void* pointer, CFIndex newSize, CFOptionFlags, void*)
     {
         size_t newAllocationSize = sizeof(StringImpl*) + newSize;
         StringImpl** header = static_cast<StringImpl**>(pointer) - 1;
         ASSERT(!*header);
-        header = static_cast<StringImpl**>(fastRealloc(header, newAllocationSize));
+        header = static_cast<StringImpl**>(StringWrapperCFAllocatorMalloc::realloc(header, newAllocationSize));
         return header + 1;
     }
 
     static void deallocate(void* pointer, void*)
     {
         StringImpl** header = static_cast<StringImpl**>(pointer) - 1;
         StringImpl* underlyingString = *header;
         if (!underlyingString)
-            fastFree(header);
+            StringWrapperCFAllocatorMalloc::free(header);
         else {
             if (isMainThread()) {
                 underlyingString->deref(); // Balanced by call to ref in allocate above.
-                fastFree(header);
+                StringWrapperCFAllocatorMalloc::free(header);
                 return;
             }
 
             callOnMainThread([header] {
                 StringImpl* underlyingString = *header;
                 ASSERT(underlyingString);
                 underlyingString->deref(); // Balanced by call to ref in allocate above.
-                fastFree(header);
+                StringWrapperCFAllocatorMalloc::free(header);
             });
         }
     }
 
     static CFIndex preferredSize(CFIndex size, CFOptionFlags, void*)
@@ -120,11 +125,11 @@
 
 }
 
 RetainPtr<CFStringRef> StringImpl::createCFString()
 {
-    if (!m_length || !isMainThreadIfInitialized()) {
+    if (!m_length || !isMainThread()) {
         if (is8Bit())
             return adoptCF(CFStringCreateWithBytes(0, reinterpret_cast<const UInt8*>(characters8()), m_length, kCFStringEncodingISOLatin1, false));
         return adoptCF(CFStringCreateWithCharacters(0, reinterpret_cast<const UniChar*>(characters16()), m_length));
     }
     CFAllocatorRef allocator = StringWrapperCFAllocator::allocator();
