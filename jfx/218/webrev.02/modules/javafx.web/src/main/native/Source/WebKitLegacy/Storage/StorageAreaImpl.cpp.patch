diff a/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/StorageAreaImpl.cpp b/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/StorageAreaImpl.cpp
--- a/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/StorageAreaImpl.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebKitLegacy/Storage/StorageAreaImpl.cpp
@@ -48,13 +48,10 @@
 inline StorageAreaImpl::StorageAreaImpl(StorageType storageType, const SecurityOriginData& origin, RefPtr<StorageSyncManager>&& syncManager, unsigned quota)
     : m_storageType(storageType)
     , m_securityOrigin(origin)
     , m_storageMap(StorageMap::create(quota))
     , m_storageSyncManager(WTFMove(syncManager))
-#ifndef NDEBUG
-    , m_isShutdown(false)
-#endif
     , m_accessCount(0)
     , m_closeDatabaseTimer(*this, &StorageAreaImpl::closeDatabaseTimerFired)
 {
     ASSERT(isMainThread());
     ASSERT(m_storageMap);
@@ -85,11 +82,11 @@
 StorageAreaImpl::StorageAreaImpl(const StorageAreaImpl& area)
     : m_storageType(area.m_storageType)
     , m_securityOrigin(area.m_securityOrigin)
     , m_storageMap(area.m_storageMap)
     , m_storageSyncManager(area.m_storageSyncManager)
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     , m_isShutdown(area.m_isShutdown)
 #endif
     , m_accessCount(0)
     , m_closeDatabaseTimer(*this, &StorageAreaImpl::closeDatabaseTimerFired)
 {
@@ -195,20 +192,21 @@
 }
 
 void StorageAreaImpl::importItems(HashMap<String, String>&& items)
 {
     ASSERT(!m_isShutdown);
+    ASSERT(!isMainThread());
 
     m_storageMap->importItems(WTFMove(items));
 }
 
 void StorageAreaImpl::close()
 {
     if (m_storageAreaSync)
         m_storageAreaSync->scheduleFinalSync();
 
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     m_isShutdown = true;
 #endif
 }
 
 void StorageAreaImpl::clearForOriginDeletion()
@@ -294,10 +292,13 @@
 
 void StorageAreaImpl::sessionChanged(bool isNewSessionPersistent)
 {
     ASSERT(isMainThread());
 
+    // If import is not completed, background storage thread may be modifying m_storageMap.
+    blockUntilImportComplete();
+
     unsigned quota = m_storageMap->quota();
     m_storageMap = StorageMap::create(quota);
 
     if (isNewSessionPersistent && !m_storageAreaSync && m_storageSyncManager) {
         m_storageAreaSync = StorageAreaSync::create(m_storageSyncManager.get(), *this, m_securityOrigin.databaseIdentifier());
