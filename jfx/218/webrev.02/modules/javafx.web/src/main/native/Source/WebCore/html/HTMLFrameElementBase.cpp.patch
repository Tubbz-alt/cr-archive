diff a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameElementBase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameElementBase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameElementBase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/HTMLFrameElementBase.cpp
@@ -91,22 +91,29 @@
 
     RefPtr<Frame> parentFrame = document().frame();
     if (!parentFrame)
         return;
 
+    document().willLoadFrameElement(parentFrame->document()->completeURL(m_URL));
+
     String frameName = getNameAttribute();
     if (frameName.isNull() && UNLIKELY(document().settings().needsFrameNameFallbackToIdQuirk()))
         frameName = getIdAttribute();
 
     parentFrame->loader().subframeLoader().requestFrame(*this, m_URL, frameName, lockHistory, lockBackForwardList);
 }
 
 void HTMLFrameElementBase::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
-    if (name == srcdocAttr)
-        setLocation("about:srcdoc");
-    else if (name == srcAttr && !hasAttributeWithoutSynchronization(srcdocAttr))
+    if (name == srcdocAttr) {
+        if (value.isNull()) {
+            const AtomString& srcValue = attributeWithoutSynchronization(srcAttr);
+            if (!srcValue.isNull())
+                setLocation(stripLeadingAndTrailingHTMLSpaces(srcValue));
+        } else
+            setLocation("about:srcdoc");
+    } else if (name == srcAttr && !hasAttributeWithoutSynchronization(srcdocAttr))
         setLocation(stripLeadingAndTrailingHTMLSpaces(value));
     else
         HTMLFrameOwnerElement::parseAttribute(name, value);
 }
 
@@ -159,11 +166,11 @@
 
     if (isConnected())
         openURL(LockHistory::No, LockBackForwardList::No);
 }
 
-void HTMLFrameElementBase::setLocation(JSC::ExecState& state, const String& newLocation)
+void HTMLFrameElementBase::setLocation(JSC::JSGlobalObject& state, const String& newLocation)
 {
     if (WTF::protocolIsJavaScript(stripLeadingAndTrailingHTMLSpaces(newLocation))) {
         if (!BindingSecurity::shouldAllowAccessToNode(state, contentDocument()))
             return;
     }
