diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderObject.h b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderObject.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderObject.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/RenderObject.h
@@ -51,11 +51,10 @@
 class HitTestRequest;
 class HitTestResult;
 class InlineBox;
 class Path;
 class Position;
-class PseudoStyleRequest;
 class RenderBoxModelObject;
 class RenderInline;
 class RenderBlock;
 class RenderElement;
 class RenderFragmentedFlow;
@@ -83,10 +82,14 @@
 
 enum class ShouldAllowCrossOriginScrolling { No, Yes };
 
 struct ScrollRectToVisibleOptions;
 
+namespace Style {
+class PseudoElementRequest;
+}
+
 // Base class for all rendering tree objects.
 class RenderObject : public CachedImageClient, public CanMakeWeakPtr<RenderObject> {
     WTF_MAKE_ISO_ALLOCATED(RenderObject);
     friend class RenderBlock;
     friend class RenderBlockFlow;
@@ -160,11 +163,11 @@
     }
 
     WEBCORE_EXPORT bool useDarkAppearance() const;
     OptionSet<StyleColor::Options> styleColorOptions() const;
 
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     void setHasAXObject(bool flag) { m_hasAXObject = flag; }
     bool hasAXObject() const { return m_hasAXObject; }
 
     // Helper class forbidding calls to setNeedsLayout() during its lifetime.
     class SetLayoutNeededForbiddenScope {
@@ -173,11 +176,11 @@
         ~SetLayoutNeededForbiddenScope();
     private:
         RenderObject* m_renderObject;
         bool m_preexistingForbidden;
     };
-#endif
+#endif // ASSERT_ENABLED
 
     // Obtains the nearest enclosing block (including this block) that contributes a first-line style to our inline
     // children.
     virtual RenderBlock* firstLineBlock() const;
 
@@ -682,10 +685,12 @@
         OptionSet<VisibleRectContextOption> m_options;
     };
     virtual Optional<LayoutRect> computeVisibleRectInContainer(const LayoutRect&, const RenderLayerModelObject* repaintContainer, VisibleRectContext) const;
     virtual Optional<FloatRect> computeFloatVisibleRectInContainer(const FloatRect&, const RenderLayerModelObject* repaintContainer, VisibleRectContext) const;
 
+    WEBCORE_EXPORT bool hasNonEmptyVisibleRectRespectingParentFrames() const;
+
     virtual unsigned int length() const { return 1; }
 
     bool isFloatingOrOutOfFlowPositioned() const { return (isFloating() || isOutOfFlowPositioned()); }
 
     enum SelectionState {
@@ -719,11 +724,11 @@
      * @param extraWidthToEndOfLine optional out arg to give extra width to end of line -
      * useful for character range rect computations
      */
     virtual LayoutRect localCaretRect(InlineBox*, unsigned caretOffset, LayoutUnit* extraWidthToEndOfLine = nullptr);
 
-    // When performing a global document tear-down, or when going into the page cache, the renderer of the document is cleared.
+    // When performing a global document tear-down, or when going into the back/forward cache, the renderer of the document is cleared.
     bool renderTreeBeingDestroyed() const;
 
     void destroy();
 
     // Virtual function helpers for the deprecated Flexible Box Layout (display: -webkit-box).
@@ -806,11 +811,11 @@
     {
         return VisibleRectContext(false, false, { VisibleRectContextOption::ApplyContainerClip, VisibleRectContextOption::ApplyCompositedContainerScrolls });
     }
 
 private:
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     bool isSetNeedsLayoutForbidden() const { return m_setNeedsLayoutForbidden; }
     void setNeedsLayoutIsForbidden(bool flag) { m_setNeedsLayoutForbidden = flag; }
 #endif
 
     void addAbsoluteRectForLayer(LayoutRect& result);
@@ -826,21 +831,21 @@
     void setEverHadLayout(bool b) { m_bitfields.setEverHadLayout(b); }
 
     bool hasRareData() const { return m_bitfields.hasRareData(); }
     void setHasRareData(bool b) { m_bitfields.setHasRareData(b); }
 
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     void checkBlockPositionedObjectsNeedLayout();
 #endif
 
     Node& m_node;
 
     RenderElement* m_parent;
     RenderObject* m_previous;
     RenderObject* m_next;
 
-#ifndef NDEBUG
+#if ASSERT_ENABLED
     bool m_hasAXObject             : 1;
     bool m_setNeedsLayoutForbidden : 1;
 #endif
 
 #define ADD_BOOLEAN_BITFIELD(name, Name) \
