diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3CheckSpecial.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3CheckSpecial.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3CheckSpecial.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3CheckSpecial.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015-2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -25,11 +25,10 @@
 
 #pragma once
 
 #if ENABLE(B3_JIT)
 
-#include "AirArg.h"
 #include "AirKind.h"
 #include "B3StackmapSpecial.h"
 #include <wtf/HashMap.h>
 
 namespace JSC { namespace B3 {
@@ -127,11 +126,11 @@
     Optional<unsigned> shouldTryAliasingDef(Air::Inst&) final;
 
     // NOTE: the generate method will generate the hidden branch and then register a LatePath that
     // generates the stackmap. Super crazy dude!
 
-    CCallHelpers::Jump generate(Air::Inst&, CCallHelpers&, Air::GenerationContext&) final;
+    MacroAssembler::Jump generate(Air::Inst&, CCallHelpers&, Air::GenerationContext&) final;
 
     void dumpImpl(PrintStream&) const final;
     void deepDumpImpl(PrintStream&) const final;
 
 private:
@@ -141,11 +140,11 @@
 };
 
 struct CheckSpecialKeyHash {
     static unsigned hash(const CheckSpecial::Key& key) { return key.hash(); }
     static bool equal(const CheckSpecial::Key& a, const CheckSpecial::Key& b) { return a == b; }
-    static const bool safeToCompareToEmptyOrDeleted = true;
+    static constexpr bool safeToCompareToEmptyOrDeleted = true;
 };
 
 } } // namespace JSC::B3
 
 namespace WTF {
@@ -156,11 +155,11 @@
 };
 
 template<typename T> struct HashTraits;
 template<> struct HashTraits<JSC::B3::CheckSpecial::Key> : SimpleClassHashTraits<JSC::B3::CheckSpecial::Key> {
     // I don't want to think about this very hard, it's not worth it. I'm a be conservative.
-    static const bool emptyValueIsZero = false;
+    static constexpr bool emptyValueIsZero = false;
 };
 
 } // namespace WTF
 
 #endif // ENABLE(B3_JIT)
