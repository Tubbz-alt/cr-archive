diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/CryptoRandom.cpp b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/CryptoRandom.cpp
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/CryptoRandom.cpp
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/CryptoRandom.cpp
@@ -59,11 +59,11 @@
     uint8_t s[256];
 };
 
 class ARC4RandomNumberGenerator : public StaticPerProcess<ARC4RandomNumberGenerator> {
 public:
-    ARC4RandomNumberGenerator(const std::lock_guard<Mutex>&);
+    ARC4RandomNumberGenerator(const LockHolder&);
 
     uint32_t randomNumber();
     void randomValues(void* buffer, size_t length);
 
 private:
@@ -84,11 +84,11 @@
         s[n] = n;
     i = 0;
     j = 0;
 }
 
-ARC4RandomNumberGenerator::ARC4RandomNumberGenerator(const std::lock_guard<Mutex>&)
+ARC4RandomNumberGenerator::ARC4RandomNumberGenerator(const LockHolder&)
     : m_count(0)
 {
 }
 
 void ARC4RandomNumberGenerator::addRandomData(unsigned char* data, int length)
@@ -162,11 +162,11 @@
     return (m_stream.s[(si + sj) & 0xff]);
 }
 
 void ARC4RandomNumberGenerator::randomValues(void* buffer, size_t length)
 {
-    std::lock_guard<Mutex> lock(mutex());
+    LockHolder lock(mutex());
 
     unsigned char* result = reinterpret_cast<unsigned char*>(buffer);
     stirIfNeeded();
     while (length--) {
         m_count--;
