diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/SmallPtrSet.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/SmallPtrSet.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/SmallPtrSet.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/SmallPtrSet.h
@@ -30,10 +30,12 @@
 #include <wtf/HashFunctions.h>
 #include <wtf/Noncopyable.h>
 
 namespace WTF {
 
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(SmallPtrSet);
+
 template<typename PtrType, unsigned SmallArraySize = 8>
 class SmallPtrSet {
     WTF_MAKE_FAST_ALLOCATED;
     WTF_MAKE_NONCOPYABLE(SmallPtrSet);
     static_assert(std::is_trivially_destructible<PtrType>::value, "We currently don't support non-trivially destructible pointer types.");
@@ -70,11 +72,11 @@
     }
 
     ~SmallPtrSet()
     {
         if (!isSmall())
-            fastFree(m_buffer);
+            SmallPtrSetMalloc::free(m_buffer);
     }
 
     inline void add(PtrType ptr)
     {
         ASSERT(isValidEntry(ptr));
@@ -207,11 +209,11 @@
 
         size_t allocationSize = sizeof(void*) * size;
         bool wasSmall = isSmall();
         void** oldBuffer = wasSmall ? m_smallStorage : m_buffer;
         unsigned oldCapacity = m_capacity;
-        m_buffer = static_cast<void**>(fastMalloc(allocationSize));
+        m_buffer = static_cast<void**>(SmallPtrSetMalloc::malloc(allocationSize));
         memset(m_buffer, -1, allocationSize);
         m_capacity = size;
 
         for (unsigned i = 0; i < oldCapacity; i++) {
             if (oldBuffer[i] != emptyValue()) {
@@ -219,11 +221,11 @@
                 *ptr = oldBuffer[i];
             }
         }
 
         if (!wasSmall)
-            fastFree(oldBuffer);
+            SmallPtrSetMalloc::free(oldBuffer);
     }
 
 
     inline void** bucket(PtrType target) const
     {
