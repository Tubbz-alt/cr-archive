diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/protocol/Page.json b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/protocol/Page.json
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/protocol/Page.json
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/protocol/Page.json
@@ -1,9 +1,10 @@
 {
     "domain": "Page",
     "description": "Actions and events related to the inspected page belong to the page domain.",
-    "availability": ["web"],
+    "debuggableTypes": ["page", "web-page"],
+    "targetTypes": ["page"],
     "types": [
         {
             "id": "Setting",
             "type": "string",
             "description": "List of settings able to be overridden by WebInspector. Keep this in sync with FOR_EACH_INSPECTOR_OVERRIDE_SETTING.",
@@ -13,10 +14,12 @@
                 "ImagesEnabled",
                 "MediaCaptureRequiresSecureConnection",
                 "MockCaptureDevicesEnabled",
                 "NeedsSiteSpecificQuirks",
                 "ScriptEnabled",
+                "ShowDebugBorders",
+                "ShowRepaintCounter",
                 "WebRTCEncryptionEnabled",
                 "WebSecurityEnabled"
             ]
         },
         {
@@ -180,10 +183,16 @@
             "returns": [
                 { "name": "content", "type": "string", "description": "Resource content." },
                 { "name": "base64Encoded", "type": "boolean", "description": "True, if content was served as base64." }
             ]
         },
+        {
+            "name": "setBootstrapScript",
+            "parameters": [
+                { "name": "source", "type": "string", "optional": true, "description": "If `source` is provided (and not empty), it will be injected into all future global objects as soon as they're created. Omitting `source` will stop this from happening." }
+            ]
+        },
         {
             "name": "searchInResource",
             "description": "Searches for given string in resource content.",
             "parameters": [
                 { "name": "frameId", "$ref": "Network.FrameId", "description": "Frame id for resource to search in." },
@@ -235,24 +244,10 @@
             "description": "Forces the given appearance for the page.",
             "parameters": [
                 { "name": "appearance", "$ref": "Appearance", "description": "Appearance name to force. Empty string disables the override." }
             ]
         },
-        {
-            "name": "getCompositingBordersVisible",
-            "description": "Indicates the visibility of compositing borders.",
-            "returns": [
-                { "name": "result", "type": "boolean", "description": "If true, compositing borders are visible." }
-            ]
-        },
-        {
-            "name": "setCompositingBordersVisible",
-            "description": "Controls the visibility of compositing borders.",
-            "parameters": [
-                { "name": "visible", "type": "boolean", "description": "True for showing compositing borders." }
-            ]
-        },
         {
             "name": "snapshotNode",
             "description": "Capture a snapshot of the specified node that does not include unrelated layers.",
             "parameters": [
                 { "name": "nodeId", "$ref": "DOM.NodeId", "description": "Id of the node to snapshot." }
