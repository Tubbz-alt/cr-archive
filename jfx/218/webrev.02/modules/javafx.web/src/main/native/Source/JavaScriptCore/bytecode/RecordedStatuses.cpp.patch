diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/RecordedStatuses.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/RecordedStatuses.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/RecordedStatuses.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/RecordedStatuses.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2018-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -49,14 +49,14 @@
     CallLinkStatus* result = statusPtr.get();
     calls.append(std::make_pair(codeOrigin, WTFMove(statusPtr)));
     return result;
 }
 
-GetByIdStatus* RecordedStatuses::addGetByIdStatus(const CodeOrigin& codeOrigin, const GetByIdStatus& status)
+GetByStatus* RecordedStatuses::addGetByStatus(const CodeOrigin& codeOrigin, const GetByStatus& status)
 {
-    auto statusPtr = makeUnique<GetByIdStatus>(status);
-    GetByIdStatus* result = statusPtr.get();
+    auto statusPtr = makeUnique<GetByStatus>(status);
+    GetByStatus* result = statusPtr.get();
     gets.append(std::make_pair(codeOrigin, WTFMove(statusPtr)));
     return result;
 }
 
 PutByIdStatus* RecordedStatuses::addPutByIdStatus(const CodeOrigin& codeOrigin, const PutByIdStatus& status)
@@ -73,10 +73,16 @@
     InByIdStatus* result = statusPtr.get();
     ins.append(std::make_pair(codeOrigin, WTFMove(statusPtr)));
     return result;
 }
 
+void RecordedStatuses::visitAggregate(SlotVisitor& slotVisitor)
+{
+    for (auto& pair : gets)
+        pair.second->visitAggregate(slotVisitor);
+}
+
 void RecordedStatuses::markIfCheap(SlotVisitor& slotVisitor)
 {
     for (auto& pair : gets)
         pair.second->markIfCheap(slotVisitor);
     for (auto& pair : puts)
