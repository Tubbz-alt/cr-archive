diff a/modules/javafx.web/src/main/native/Source/WebCore/editing/EditorCommand.cpp b/modules/javafx.web/src/main/native/Source/WebCore/editing/EditorCommand.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/editing/EditorCommand.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/editing/EditorCommand.cpp
@@ -1080,12 +1080,11 @@
 
 static bool executeStrikethrough(Frame& frame, Event*, EditorCommandSource source, const String&)
 {
     Ref<EditingStyle> style = EditingStyle::create();
     style->setStrikeThroughChange(textDecorationChangeForToggling(frame.editor(), CSSPropertyWebkitTextDecorationsInEffect, "line-through"_s));
-    // FIXME: Needs a new EditAction!
-    return applyCommandToFrame(frame, source, EditAction::Underline, WTFMove(style));
+    return applyCommandToFrame(frame, source, EditAction::StrikeThrough, WTFMove(style));
 }
 
 static bool executeStyleWithCSS(Frame& frame, Event*, EditorCommandSource, const String& value)
 {
     frame.editor().setShouldStyleWithCSS(!equalLettersIgnoringASCIICase(value, "false"));
@@ -1233,17 +1232,25 @@
 
     EditorClient* client = frame->editor().client();
     return client ? client->canCopyCut(frame, defaultValue) : defaultValue;
 }
 
+static bool defaultValueForSupportedPaste(Frame& frame)
+{
+    auto& settings = frame.settings();
+    if (settings.javaScriptCanAccessClipboard() && settings.DOMPasteAllowed())
+        return true;
+
+    return settings.domPasteAccessRequestsEnabled();
+}
+
 static bool supportedPaste(Frame* frame)
 {
     if (!frame)
         return false;
 
-    auto& settings = frame->settings();
-    bool defaultValue = (settings.javaScriptCanAccessClipboard() && settings.DOMPasteAllowed()) || settings.domPasteAccessRequestsEnabled();
+    bool defaultValue = defaultValueForSupportedPaste(*frame);
 
     EditorClient* client = frame->editor().client();
     return client ? client->canPaste(frame, defaultValue) : defaultValue;
 }
 
@@ -1368,13 +1375,30 @@
 {
     const VisibleSelection& selection = frame.selection().selection();
     return selection.isCaretOrRange() && selection.isContentRichlyEditable() && selection.rootEditableElement();
 }
 
-static bool enabledPaste(Frame& frame, Event*, EditorCommandSource)
+static bool allowPasteFromDOM(Frame& frame)
+{
+    auto& settings = frame.settings();
+    if (settings.javaScriptCanAccessClipboard() && settings.DOMPasteAllowed())
+        return true;
+
+    return settings.domPasteAccessRequestsEnabled() && UserGestureIndicator::processingUserGesture();
+}
+
+static bool enabledPaste(Frame& frame, Event*, EditorCommandSource source)
 {
-    return frame.editor().canPaste();
+    switch (source) {
+    case CommandFromMenuOrKeyBinding:
+        return frame.editor().canDHTMLPaste() || frame.editor().canPaste();
+    case CommandFromDOM:
+    case CommandFromDOMWithUserInterface:
+        return allowPasteFromDOM(frame) && (frame.editor().canDHTMLPaste() || frame.editor().canPaste());
+    }
+    ASSERT_NOT_REACHED();
+    return false;
 }
 
 static bool enabledRangeInEditableText(Frame& frame, Event*, EditorCommandSource)
 {
     return frame.selection().isRange() && frame.selection().selection().isContentEditable();
