diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchRequest.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchRequest.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchRequest.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchRequest.cpp
@@ -159,11 +159,11 @@
 
 ExceptionOr<void> FetchRequest::initializeWith(const String& url, Init&& init)
 {
     ASSERT(scriptExecutionContext());
     // FIXME: Tighten the URL parsing algorithm according https://url.spec.whatwg.org/#concept-url-parser.
-    URL requestURL = scriptExecutionContext()->completeURL(url);
+    URL requestURL = scriptExecutionContext()->completeURL(url, ScriptExecutionContext::ForceUTF8::Yes);
     if (!requestURL.isValid() || !requestURL.user().isEmpty() || !requestURL.pass().isEmpty())
         return Exception { TypeError, "URL is not valid or contains user credentials."_s };
 
     m_options.mode = Mode::Cors;
     m_options.credentials = Credentials::SameOrigin;
@@ -220,13 +220,16 @@
         }
 
     } else
         m_signal->follow(input.m_signal.get());
 
-    auto fillResult = init.headers ? m_headers->fill(*init.headers) : m_headers->fill(input.headers());
-    if (fillResult.hasException())
-        return fillResult;
+    if (init.hasMembers()) {
+        auto fillResult = init.headers ? m_headers->fill(*init.headers) : m_headers->fill(input.headers());
+        if (fillResult.hasException())
+            return fillResult;
+    } else
+        m_headers->setInternalHeaders(HTTPHeaderMap { input.headers().internalHeaders() });
 
     auto setBodyResult = init.body ? setBody(WTFMove(*init.body)) : setBody(input);
     if (setBodyResult.hasException())
         return setBodyResult;
 
@@ -306,11 +309,11 @@
 
     ResourceRequest request = m_request;
     request.setHTTPHeaderFields(m_headers->internalHeaders());
 
     if (!isBodyNull())
-        request.setHTTPBody(body().bodyAsFormData(*scriptExecutionContext()));
+        request.setHTTPBody(body().bodyAsFormData());
 
     return request;
 }
 
 ExceptionOr<Ref<FetchRequest>> FetchRequest::clone(ScriptExecutionContext& context)
@@ -327,13 +330,7 @@
 const char* FetchRequest::activeDOMObjectName() const
 {
     return "Request";
 }
 
-bool FetchRequest::canSuspendForDocumentSuspension() const
-{
-    // FIXME: We can probably do the same strategy as XHR.
-    return !isActive();
-}
-
 } // namespace WebCore
 
