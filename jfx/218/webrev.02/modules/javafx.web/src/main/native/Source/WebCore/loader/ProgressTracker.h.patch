diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/ProgressTracker.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/ProgressTracker.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/ProgressTracker.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/ProgressTracker.h
@@ -28,24 +28,28 @@
 #include "Timer.h"
 #include <wtf/Forward.h>
 #include <wtf/HashMap.h>
 #include <wtf/Noncopyable.h>
 #include <wtf/RefPtr.h>
+#include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
 class Frame;
 class ResourceResponse;
 class ProgressTrackerClient;
 struct ProgressItem;
 
 class ProgressTracker {
-    WTF_MAKE_NONCOPYABLE(ProgressTracker); WTF_MAKE_FAST_ALLOCATED;
+    WTF_MAKE_NONCOPYABLE(ProgressTracker);
+    WTF_MAKE_FAST_ALLOCATED;
 public:
-    explicit ProgressTracker(ProgressTrackerClient&);
+    explicit ProgressTracker(UniqueRef<ProgressTrackerClient>&&);
     ~ProgressTracker();
 
+    ProgressTrackerClient& client() { return m_client.get(); }
+
     static unsigned long createUniqueIdentifier();
 
     WEBCORE_EXPORT double estimatedProgress() const;
 
     void progressStarted(Frame&);
@@ -67,11 +71,11 @@
     void progressHeartbeatTimerFired();
     bool isAlwaysOnLoggingAllowed() const;
 
     static unsigned long s_uniqueIdentifier;
 
-    ProgressTrackerClient& m_client;
+    UniqueRef<ProgressTrackerClient> m_client;
     RefPtr<Frame> m_originatingProgressFrame;
     HashMap<unsigned long, std::unique_ptr<ProgressItem>> m_progressItems;
     Timer m_progressHeartbeatTimer;
 
     long long m_totalPageAndResourceBytesToLoad { 0 };
