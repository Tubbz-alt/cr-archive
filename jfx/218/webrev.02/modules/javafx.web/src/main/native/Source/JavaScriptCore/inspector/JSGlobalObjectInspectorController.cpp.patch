diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectInspectorController.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectInspectorController.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectInspectorController.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectInspectorController.cpp
@@ -55,14 +55,14 @@
 #if ENABLE(REMOTE_INSPECTOR)
 #include "JSGlobalObjectDebuggable.h"
 #include "RemoteInspector.h"
 #endif
 
-using namespace JSC;
-
 namespace Inspector {
 
+using namespace JSC;
+
 JSGlobalObjectInspectorController::JSGlobalObjectInspectorController(JSGlobalObject& globalObject)
     : m_globalObject(globalObject)
     , m_injectedScriptManager(makeUnique<InjectedScriptManager>(*this, InjectedScriptHost::create()))
     , m_executionStopwatch(Stopwatch::create())
     , m_scriptDebugServer(globalObject)
@@ -154,12 +154,12 @@
     m_backendDispatcher->dispatch(message);
 }
 
 void JSGlobalObjectInspectorController::appendAPIBacktrace(ScriptCallStack& callStack)
 {
-    static const int framesToShow = 31;
-    static const int framesToSkip = 3; // WTFGetBacktrace, appendAPIBacktrace, reportAPIException.
+    static constexpr int framesToShow = 31;
+    static constexpr int framesToSkip = 3; // WTFGetBacktrace, appendAPIBacktrace, reportAPIException.
 
     void* samples[framesToShow + framesToSkip];
     int frames = framesToShow + framesToSkip;
     WTFGetBacktrace(samples, &frames);
 
@@ -172,26 +172,26 @@
         else
             callStack.append(ScriptCallFrame("?"_s, "[native code]"_s, noSourceID, 0, 0));
     }
 }
 
-void JSGlobalObjectInspectorController::reportAPIException(ExecState* exec, Exception* exception)
+void JSGlobalObjectInspectorController::reportAPIException(JSGlobalObject* globalObject, Exception* exception)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     if (isTerminatedExecutionException(vm, exception))
         return;
 
     auto scope = DECLARE_CATCH_SCOPE(vm);
     ErrorHandlingScope errorScope(vm);
 
-    Ref<ScriptCallStack> callStack = createScriptCallStackFromException(exec, exception);
+    Ref<ScriptCallStack> callStack = createScriptCallStackFromException(globalObject, exception);
     if (includesNativeCallStackWhenReportingExceptions())
         appendAPIBacktrace(callStack.get());
 
     // FIXME: <http://webkit.org/b/115087> Web Inspector: Should not evaluate JavaScript handling exceptions
     // If this is a custom exception object, call toString on it to try and get a nice string representation for the exception.
-    String errorMessage = exception->value().toWTFString(exec);
+    String errorMessage = exception->value().toWTFString(globalObject);
     scope.clearException();
 
     if (JSGlobalObjectConsoleClient::logToSystemConsole()) {
         if (callStack->size()) {
             const ScriptCallFrame& callFrame = callStack->at(0);
