diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/AtomStringImpl.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/AtomStringImpl.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/AtomStringImpl.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/AtomStringImpl.h
@@ -68,11 +68,11 @@
         if (!string)
             return nullptr;
         return add(*stringTableProvider.atomStringTable(), *string);
     }
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     WTF_EXPORT_PRIVATE static bool isInAtomStringTable(StringImpl*);
 #endif
 
 private:
     AtomStringImpl() = delete;
@@ -99,11 +99,11 @@
     WTF_EXPORT_PRIVATE static Ref<AtomStringImpl> addSlowCase(AtomStringTable&, StringImpl&);
 
     WTF_EXPORT_PRIVATE static RefPtr<AtomStringImpl> lookUpSlowCase(StringImpl&);
 };
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
 
 // AtomStringImpls created from StaticStringImpl will ASSERT in the generic ValueCheck<T>::checkConsistency,
 // as they are not allocated by fastMalloc. We don't currently have any way to detect that case, so we don't
 // do any consistency check for AtomStringImpl*.
 
@@ -113,10 +113,10 @@
 
 template<> struct ValueCheck<const AtomStringImpl*> {
     static void checkConsistency(const AtomStringImpl*) { }
 };
 
-#endif
+#endif // ASSERT_ENABLED
 
 }
 
 using WTF::AtomStringImpl;
