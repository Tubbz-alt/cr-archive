diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/TreeScopeOrderedMap.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/TreeScopeOrderedMap.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/TreeScopeOrderedMap.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/TreeScopeOrderedMap.cpp
@@ -57,11 +57,11 @@
     Map::AddResult addResult = m_map.ensure(&key, [&element] {
         return MapEntry(&element);
     });
     MapEntry& entry = addResult.iterator->value;
 
-#if !ASSERT_DISABLED || ENABLE(SECURITY_ASSERTIONS)
+#if ASSERT_ENABLED || ENABLE(SECURITY_ASSERTIONS)
     ASSERT_WITH_SECURITY_IMPLICATION(!entry.registeredElements.contains(&element));
     entry.registeredElements.add(&element);
 #endif
 
     if (addResult.isNewEntry)
@@ -120,11 +120,11 @@
         RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(&element.treeScope() == &scope);
         ASSERT_WITH_SECURITY_IMPLICATION(entry.registeredElements.contains(entry.element));
         return &element;
     }
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // FormAssociatedElement may call getElementById to find its owner form in the middle of a tree removal.
     if (auto* currentScope = ContainerChildRemovalScope::currentScope()) {
         ASSERT(&scope.rootNode() == &currentScope->parentOfRemovedTree().rootNode());
         Node& removedTree = currentScope->removedChild();
         ASSERT(is<ContainerNode>(removedTree));
@@ -135,11 +135,11 @@
             ASSERT(removedFromAncestorHasNotBeenCalledYet);
             return nullptr;
         }
     }
     ASSERT_NOT_REACHED();
-#endif
+#endif // ASSERT_ENABLED
 
     return nullptr;
 }
 
 Element* TreeScopeOrderedMap::getElementById(const AtomStringImpl& key, const TreeScope& scope) const
