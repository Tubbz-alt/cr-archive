diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/ContentFilter.h b/modules/javafx.web/src/main/native/Source/WebCore/loader/ContentFilter.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/ContentFilter.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/ContentFilter.h
@@ -30,14 +30,16 @@
 #include "CachedResourceHandle.h"
 #include "PlatformContentFilter.h"
 #include "ResourceError.h"
 #include <functional>
 #include <wtf/Forward.h>
+#include <wtf/UniqueRef.h>
 
 namespace WebCore {
 
 class CachedRawResource;
+class ContentFilterClient;
 class DocumentLoader;
 class ResourceRequest;
 class ResourceResponse;
 class SubstituteData;
 
@@ -46,11 +48,11 @@
     WTF_MAKE_NONCOPYABLE(ContentFilter);
 
 public:
     template <typename T> static void addType() { types().append(type<T>()); }
 
-    static std::unique_ptr<ContentFilter> create(DocumentLoader&);
+    static std::unique_ptr<ContentFilter> create(ContentFilterClient&);
     ~ContentFilter();
 
     static const char* urlScheme() { return "x-apple-content-filter"; }
 
     void startFilteringMainResource(CachedRawResource&);
@@ -67,27 +69,27 @@
 
 private:
     using State = PlatformContentFilter::State;
 
     struct Type {
-        const std::function<std::unique_ptr<PlatformContentFilter>()> create;
+        Function<UniqueRef<PlatformContentFilter>()> create;
     };
     template <typename T> static Type type();
     WEBCORE_EXPORT static Vector<Type>& types();
 
-    using Container = Vector<std::unique_ptr<PlatformContentFilter>>;
-    friend std::unique_ptr<ContentFilter> std::make_unique<ContentFilter>(Container&&, DocumentLoader&);
-    ContentFilter(Container&&, DocumentLoader&);
+    using Container = Vector<UniqueRef<PlatformContentFilter>>;
+    friend std::unique_ptr<ContentFilter> std::make_unique<ContentFilter>(Container&&, ContentFilterClient&);
+    ContentFilter(Container&&, ContentFilterClient&);
 
     template <typename Function> void forEachContentFilterUntilBlocked(Function&&);
     void didDecide(State);
     void deliverResourceData(CachedResource&);
 
-    const Container m_contentFilters;
-    DocumentLoader& m_documentLoader;
+    Container m_contentFilters;
+    ContentFilterClient& m_client;
     CachedResourceHandle<CachedRawResource> m_mainResource;
-    PlatformContentFilter* m_blockingContentFilter { nullptr };
+    const PlatformContentFilter* m_blockingContentFilter { nullptr };
     State m_state { State::Stopped };
     ResourceError m_blockedError;
     bool m_isLoadingBlockedPage { false };
 };
 
