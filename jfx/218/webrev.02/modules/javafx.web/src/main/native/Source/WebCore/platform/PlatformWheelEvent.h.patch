diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformWheelEvent.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformWheelEvent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformWheelEvent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/PlatformWheelEvent.h
@@ -32,10 +32,14 @@
 
 #if PLATFORM(GTK)
 typedef struct _GdkEventScroll GdkEventScroll;
 #endif
 
+namespace WTF {
+class TextStream;
+}
+
 namespace WebCore {
 
 // The ScrollByPixelWheelEvent is a fine-grained event that specifies the precise number of pixels to scroll.
 // It is sent directly by touch pads on macOS, or synthesized when platforms generate line-by-line scrolling events.
 //
@@ -58,10 +62,12 @@
     PlatformWheelEventPhaseEnded = 1 << 3,
     PlatformWheelEventPhaseCancelled = 1 << 4,
     PlatformWheelEventPhaseMayBegin = 1 << 5,
 };
 
+WTF::TextStream& operator<<(WTF::TextStream&, PlatformWheelEventPhase);
+
 #endif
 
 #if PLATFORM(WIN)
 // How many pixels should we scroll per line? Gecko uses the height of the
 // current line, which means scroll distance changes as you go through the
@@ -154,11 +160,10 @@
     FloatPoint swipeVelocity() const;
 #endif
 
 #if PLATFORM(WIN)
     PlatformWheelEvent(HWND, WPARAM, LPARAM, bool isMouseHWheel);
-    PlatformWheelEvent(HWND, const FloatSize& delta, const FloatPoint& location);
 #endif
 
 #if PLATFORM(JAVA)
     PlatformWheelEvent(const IntPoint& pos, const IntPoint& globalPos,
                        float deltaX, float deltaY,
@@ -236,6 +241,8 @@
     return isTransitioningToMomentumScroll() ? FloatPoint(m_wheelTicksX, m_wheelTicksY) : FloatPoint();
 }
 
 #endif // ENABLE(KINETIC_SCROLLING)
 
+WTF::TextStream& operator<<(WTF::TextStream&, const PlatformWheelEvent&);
+
 } // namespace WebCore
