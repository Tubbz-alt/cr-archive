diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableEvent.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableEvent.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableEvent.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableEvent.h
@@ -28,10 +28,11 @@
 #if ENABLE(DFG_JIT)
 
 #include "DFGMinifiedID.h"
 #include "DataFormat.h"
 #include "MacroAssembler.h"
+#include "Operands.h"
 #include "VirtualRegister.h"
 #include <stdio.h>
 
 namespace JSC { namespace DFG {
 
@@ -66,19 +67,23 @@
     // purposes.
     InvalidEventKind
 };
 
 union VariableRepresentation {
+    VariableRepresentation()
+        : operand()
+    { }
+
     MacroAssembler::RegisterID gpr;
     MacroAssembler::FPRegisterID fpr;
 #if USE(JSVALUE32_64)
     struct {
         MacroAssembler::RegisterID tagGPR;
         MacroAssembler::RegisterID payloadGPR;
     } pair;
 #endif
-    int32_t virtualReg;
+    Operand operand;
 };
 
 class VariableEvent {
 public:
     VariableEvent()
@@ -160,11 +165,11 @@
         ASSERT(kind == BirthToSpill || kind == Spill);
         VariableEvent event;
         WhichType which;
         which.id = id.bits();
         VariableRepresentation representation;
-        representation.virtualReg = virtualRegister.offset();
+        representation.operand = virtualRegister;
         event.m_kind = kind;
         event.m_dataFormat = format;
         event.m_which = WTFMove(which);
         event.m_representation = WTFMove(representation);
         return event;
@@ -179,31 +184,31 @@
         event.m_which = WTFMove(which);
         return event;
     }
 
     static VariableEvent setLocal(
-        VirtualRegister bytecodeReg, VirtualRegister machineReg, DataFormat format)
+        Operand bytecodeOperand, VirtualRegister machineReg, DataFormat format)
     {
         VariableEvent event;
         WhichType which;
         which.virtualReg = machineReg.offset();
         VariableRepresentation representation;
-        representation.virtualReg = bytecodeReg.offset();
+        representation.operand = bytecodeOperand;
         event.m_kind = SetLocalEvent;
         event.m_dataFormat = format;
         event.m_which = WTFMove(which);
         event.m_representation = WTFMove(representation);
         return event;
     }
 
-    static VariableEvent movHint(MinifiedID id, VirtualRegister bytecodeReg)
+    static VariableEvent movHint(MinifiedID id, Operand bytecodeReg)
     {
         VariableEvent event;
         WhichType which;
         which.id = id.bits();
         VariableRepresentation representation;
-        representation.virtualReg = bytecodeReg.offset();
+        representation.operand = bytecodeReg;
         event.m_kind = MovHintEvent;
         event.m_which = WTFMove(which);
         event.m_representation = WTFMove(representation);
         return event;
     }
@@ -263,17 +268,17 @@
     }
 
     VirtualRegister spillRegister() const
     {
         ASSERT(m_kind == BirthToSpill || m_kind == Spill);
-        return VirtualRegister(m_representation.get().virtualReg);
+        return m_representation.get().operand.virtualRegister();
     }
 
-    VirtualRegister bytecodeRegister() const
+    Operand operand() const
     {
         ASSERT(m_kind == SetLocalEvent || m_kind == MovHintEvent);
-        return VirtualRegister(m_representation.get().virtualReg);
+        return m_representation.get().operand;
     }
 
     VirtualRegister machineRegister() const
     {
         ASSERT(m_kind == SetLocalEvent);
