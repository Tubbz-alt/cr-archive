diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/AccessCaseSnippetParams.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/AccessCaseSnippetParams.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/AccessCaseSnippetParams.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/AccessCaseSnippetParams.cpp
@@ -53,15 +53,16 @@
         // We spill (1) the used registers by IC and (2) the used registers by Snippet.
         AccessGenerationState::SpillState spillState = state.preserveLiveRegistersToStackForCall(usedRegistersBySnippet);
 
         jit.store32(
             CCallHelpers::TrustedImm32(state.callSiteIndexForExceptionHandlingOrOriginal().bits()),
-            CCallHelpers::tagFor(static_cast<VirtualRegister>(CallFrameSlot::argumentCount)));
+            CCallHelpers::tagFor(CallFrameSlot::argumentCountIncludingThis));
 
         jit.makeSpaceOnStackForCCall();
 
         jit.setupArguments<FunctionType>(std::get<ArgumentsIndex>(m_arguments)...);
+        jit.prepareCallOperation(state.m_vm);
 
         CCallHelpers::Call operationCall = jit.call(OperationPtrTag);
         auto function = m_function;
         jit.addLinkTask([=] (LinkBuffer& linkBuffer) {
             linkBuffer.link(operationCall, FunctionPtr<OperationPtrTag>(function));
