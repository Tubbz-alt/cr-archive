diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/cocoa/SoftLinking.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/cocoa/SoftLinking.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/cocoa/SoftLinking.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/cocoa/SoftLinking.h
@@ -529,26 +529,26 @@
     bool canLoad_##framework##_##functionName(); \
     bool init_##framework##_##functionName(); \
     resultType softLink_##framework##_##functionName parameterDeclarations; \
     }
 
-#define SOFT_LINK_FUNCTION_MAY_FAIL_FOR_SOURCE(functionNamespace, framework, functionName, resultType, parameterDeclarations, parameterNames) \
+#define SOFT_LINK_FUNCTION_MAY_FAIL_FOR_SOURCE_WITH_EXPORT(functionNamespace, framework, functionName, resultType, parameterDeclarations, parameterNames, export) \
     WTF_EXTERN_C_BEGIN \
     resultType functionName parameterDeclarations; \
     WTF_EXTERN_C_END \
     namespace functionNamespace { \
-    resultType (*softLink##framework##functionName) parameterDeclarations = 0; \
+    export resultType (*softLink##framework##functionName) parameterDeclarations = 0; \
     bool init_##framework##_##functionName(); \
     bool init_##framework##_##functionName() \
     { \
         ASSERT(!softLink##framework##functionName); \
         softLink##framework##functionName = (resultType (*) parameterDeclarations) dlsym(framework##Library(), #functionName); \
         return !!softLink##framework##functionName; \
     } \
     \
     bool canLoad_##framework##_##functionName(); \
-    bool canLoad_##framework##_##functionName() \
+    export bool canLoad_##framework##_##functionName() \
     { \
         static bool loaded = init_##framework##_##functionName(); \
         return loaded; \
     } \
     \
@@ -558,10 +558,13 @@
         ASSERT(softLink##framework##functionName); \
         return softLink##framework##functionName parameterNames; \
     } \
     }
 
+#define SOFT_LINK_FUNCTION_MAY_FAIL_FOR_SOURCE(functionNamespace, framework, functionName, resultType, parameterDeclarations, parameterNames) \
+    SOFT_LINK_FUNCTION_MAY_FAIL_FOR_SOURCE_WITH_EXPORT(functionNamespace, framework, functionName, resultType, parameterDeclarations, parameterNames, )
+
 #define SOFT_LINK_POINTER_FOR_HEADER(functionNamespace, framework, variableName, variableType) \
     namespace functionNamespace { \
     extern variableType (*get_##framework##_##variableName)(); \
     }
 
