diff a/modules/javafx.web/src/main/native/Source/WebCore/css/FontFace.h b/modules/javafx.web/src/main/native/Source/WebCore/css/FontFace.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/FontFace.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/FontFace.h
@@ -23,64 +23,65 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include "ActiveDOMObject.h"
 #include "CSSFontFace.h"
 #include "CSSPropertyNames.h"
-#include "DOMPromiseProxy.h"
+#include "IDLTypes.h"
+#include <wtf/UniqueRef.h>
 #include <wtf/Variant.h>
 #include <wtf/WeakPtr.h>
 
 namespace JSC {
 class ArrayBuffer;
 class ArrayBufferView;
 }
 
 namespace WebCore {
 
-class FontFace final : public RefCounted<FontFace>, public CanMakeWeakPtr<FontFace>, private CSSFontFace::Client {
+template<typename IDLType> class DOMPromiseProxyWithResolveCallback;
+
+class FontFace final : public RefCounted<FontFace>, public CanMakeWeakPtr<FontFace>, public ActiveDOMObject, private CSSFontFace::Client {
 public:
     struct Descriptors {
         String style;
         String weight;
         String stretch;
         String unicodeRange;
-        String variant;
         String featureSettings;
         String display;
     };
 
     using Source = Variant<String, RefPtr<JSC::ArrayBuffer>, RefPtr<JSC::ArrayBufferView>>;
-    static ExceptionOr<Ref<FontFace>> create(Document&, const String& family, Source&&, const Descriptors&);
+    static Ref<FontFace> create(Document&, const String& family, Source&&, const Descriptors&);
     static Ref<FontFace> create(CSSFontFace&);
     virtual ~FontFace();
 
     ExceptionOr<void> setFamily(Document&, const String&);
     ExceptionOr<void> setStyle(const String&);
     ExceptionOr<void> setWeight(const String&);
     ExceptionOr<void> setStretch(const String&);
     ExceptionOr<void> setUnicodeRange(const String&);
-    ExceptionOr<void> setVariant(const String&);
     ExceptionOr<void> setFeatureSettings(const String&);
     ExceptionOr<void> setDisplay(const String&);
 
     String family() const;
     String style() const;
     String weight() const;
     String stretch() const;
     String unicodeRange() const;
-    String variant() const;
     String featureSettings() const;
     String display() const;
 
     enum class LoadStatus { Unloaded, Loading, Loaded, Error };
     LoadStatus status() const;
 
     using LoadedPromise = DOMPromiseProxyWithResolveCallback<IDLInterface<FontFace>>;
-    LoadedPromise& loaded() { return m_loadedPromise; }
-    LoadedPromise& load();
+    LoadedPromise& loadedForBindings();
+    LoadedPromise& loadForBindings();
 
     void adopt(CSSFontFace&);
 
     CSSFontFace& backing() { return m_backing; }
 
@@ -89,17 +90,22 @@
     void fontStateChanged(CSSFontFace&, CSSFontFace::Status oldState, CSSFontFace::Status newState) final;
 
     void ref() final { RefCounted::ref(); }
     void deref() final { RefCounted::deref(); }
 
+    bool hasPendingActivity() const final;
+
 private:
     explicit FontFace(CSSFontSelector&);
     explicit FontFace(CSSFontFace&);
 
+    const char* activeDOMObjectName() const final;
+
     // Callback for LoadedPromise.
     FontFace& loadedPromiseResolve();
-
+    void setErrorState();
     Ref<CSSFontFace> m_backing;
-    LoadedPromise m_loadedPromise;
+    UniqueRef<LoadedPromise> m_loadedPromise;
+    bool m_mayLoadedPromiseBeScriptObservable { false };
 };
 
 }
