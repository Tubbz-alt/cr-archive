diff a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityTable.cpp b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityTable.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityTable.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/accessibility/AccessibilityTable.cpp
@@ -536,11 +536,11 @@
 
     // Sometimes m_columns can be reset during the iteration, we cache it here to be safe.
     AccessibilityChildrenVector columnsCopy = m_columns;
 
     for (const auto& column : columnsCopy) {
-        if (AccessibilityObject* header = downcast<AccessibilityTableColumn>(*column).headerObject())
+        if (AXCoreObject* header = downcast<AccessibilityTableColumn>(*column).headerObject())
             headers.append(header);
     }
 }
 
 void AccessibilityTable::rowHeaders(AccessibilityChildrenVector& headers)
@@ -552,11 +552,11 @@
 
     // Sometimes m_rows can be reset during the iteration, we cache it here to be safe.
     AccessibilityChildrenVector rowsCopy = m_rows;
 
     for (const auto& row : rowsCopy) {
-        if (AccessibilityObject* header = downcast<AccessibilityTableRow>(*row).headerObject())
+        if (AXCoreObject* header = downcast<AccessibilityTableRow>(*row).headerObject())
             headers.append(header);
     }
 }
 
 void AccessibilityTable::visibleRows(AccessibilityChildrenVector& rows)
@@ -620,11 +620,11 @@
         const auto& children = m_rows[rowIndex]->children();
         // Since some cells may have colspans, we have to check the actual range of each
         // cell to determine which is the right one.
         for (unsigned colIndexCounter = std::min(static_cast<unsigned>(children.size()), column + 1); colIndexCounter > 0; --colIndexCounter) {
             unsigned colIndex = colIndexCounter - 1;
-            AccessibilityObject* child = children[colIndex].get();
+            AXCoreObject* child = children[colIndex].get();
             ASSERT(is<AccessibilityTableCell>(*child));
             if (!is<AccessibilityTableCell>(*child))
                 continue;
 
             std::pair<unsigned, unsigned> columnRange;
