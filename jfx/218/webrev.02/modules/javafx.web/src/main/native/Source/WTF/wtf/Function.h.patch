diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/Function.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/Function.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/Function.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/Function.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -60,12 +60,17 @@
 
 template <typename Out, typename... In>
 class Function<Out(In...)> {
     WTF_MAKE_FAST_ALLOCATED;
 public:
+    using Impl = Detail::CallableWrapperBase<Out, In...>;
+
     Function() = default;
     Function(std::nullptr_t) { }
+    Function(Impl* impl)
+        : m_callableWrapper(impl)
+    { }
 
     template<typename CallableType, class = typename std::enable_if<!(std::is_pointer<CallableType>::value && std::is_function<typename std::remove_pointer<CallableType>::type>::value) && std::is_rvalue_reference<CallableType&&>::value>::type>
     Function(CallableType&& callable)
         : m_callableWrapper(makeUnique<Detail::CallableWrapper<CallableType, Out, In...>>(WTFMove(callable))) { }
 
@@ -99,12 +104,17 @@
     {
         m_callableWrapper = nullptr;
         return *this;
     }
 
+    Impl* leakImpl()
+    {
+        return m_callableWrapper.release();
+    }
+
 private:
-    std::unique_ptr<Detail::CallableWrapperBase<Out, In...>> m_callableWrapper;
+    std::unique_ptr<Impl> m_callableWrapper;
 };
 
 } // namespace WTF
 
 using WTF::Function;
