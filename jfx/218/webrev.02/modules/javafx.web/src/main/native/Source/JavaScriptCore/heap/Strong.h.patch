diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/Strong.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/Strong.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/Strong.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/Strong.h
@@ -26,20 +26,21 @@
 #pragma once
 
 #include <wtf/Assertions.h>
 #include "Handle.h"
 #include "HandleSet.h"
+#include "JSLock.h"
 
 namespace JSC {
 
 class VM;
 
 // A strongly referenced handle that prevents the object it points to from being garbage collected.
-template <typename T> class Strong : public Handle<T> {
+template <typename T, ShouldStrongDestructorGrabLock shouldStrongDestructorGrabLock = ShouldStrongDestructorGrabLock::No> class Strong : public Handle<T> {
     using Handle<T>::slot;
     using Handle<T>::setSlot;
-    template <typename U> friend class Strong;
+    template <typename U, ShouldStrongDestructorGrabLock> friend class Strong;
 
 public:
     typedef typename Handle<T>::ExternalType ExternalType;
 
     Strong()
@@ -118,12 +119,20 @@
 
     void clear()
     {
         if (!slot())
             return;
-        HandleSet::heapFor(slot())->deallocate(slot());
-        setSlot(0);
+
+        auto* heap = HandleSet::heapFor(slot());
+        if (shouldStrongDestructorGrabLock == ShouldStrongDestructorGrabLock::Yes) {
+            JSLockHolder holder(heap->vm());
+            heap->deallocate(slot());
+            setSlot(0);
+        } else {
+            heap->deallocate(slot());
+            setSlot(0);
+        }
     }
 
 private:
     static HandleSlot hashTableDeletedValue() { return reinterpret_cast<HandleSlot>(-1); }
 
@@ -144,11 +153,11 @@
 } // namespace JSC
 
 namespace WTF {
 
 template<typename T> struct VectorTraits<JSC::Strong<T>> : SimpleClassVectorTraits {
-    static const bool canCompareWithMemcmp = false;
+    static constexpr bool canCompareWithMemcmp = false;
 };
 
 template<typename P> struct HashTraits<JSC::Strong<P>> : SimpleClassHashTraits<JSC::Strong<P>> { };
 
 } // namespace WTF
