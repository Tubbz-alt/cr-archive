diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITInlineCacheGenerator.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITInlineCacheGenerator.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITInlineCacheGenerator.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITInlineCacheGenerator.cpp
@@ -36,11 +36,11 @@
 
 namespace JSC {
 
 static StructureStubInfo* garbageStubInfo()
 {
-    static StructureStubInfo* stubInfo = new StructureStubInfo(AccessType::Get);
+    static StructureStubInfo* stubInfo = new StructureStubInfo(AccessType::GetById);
     return stubInfo;
 }
 
 JITInlineCacheGenerator::JITInlineCacheGenerator(
     CodeBlock* codeBlock, CodeOrigin codeOrigin, CallSiteIndex callSite, AccessType accessType,
@@ -49,38 +49,38 @@
 {
     m_stubInfo = m_codeBlock ? m_codeBlock->addStubInfo(accessType) : garbageStubInfo();
     m_stubInfo->codeOrigin = codeOrigin;
     m_stubInfo->callSiteIndex = callSite;
 
-    m_stubInfo->patch.usedRegisters = usedRegisters;
+    m_stubInfo->usedRegisters = usedRegisters;
 }
 
 void JITInlineCacheGenerator::finalize(
     LinkBuffer& fastPath, LinkBuffer& slowPath, CodeLocationLabel<JITStubRoutinePtrTag> start)
 {
-    m_stubInfo->patch.start = start;
+    m_stubInfo->start = start;
 
-    m_stubInfo->patch.doneLocation = fastPath.locationOf<JSInternalPtrTag>(m_done);
+    m_stubInfo->doneLocation = fastPath.locationOf<JSInternalPtrTag>(m_done);
 
-    m_stubInfo->patch.slowPathCallLocation = slowPath.locationOf<JSInternalPtrTag>(m_slowPathCall);
-    m_stubInfo->patch.slowPathStartLocation = slowPath.locationOf<JITStubRoutinePtrTag>(m_slowPathBegin);
+    m_stubInfo->slowPathCallLocation = slowPath.locationOf<JSInternalPtrTag>(m_slowPathCall);
+    m_stubInfo->slowPathStartLocation = slowPath.locationOf<JITStubRoutinePtrTag>(m_slowPathBegin);
 }
 
 JITByIdGenerator::JITByIdGenerator(
     CodeBlock* codeBlock, CodeOrigin codeOrigin, CallSiteIndex callSite, AccessType accessType,
     const RegisterSet& usedRegisters, JSValueRegs base, JSValueRegs value)
     : JITInlineCacheGenerator(codeBlock, codeOrigin, callSite, accessType, usedRegisters)
     , m_base(base)
     , m_value(value)
 {
-    m_stubInfo->patch.baseGPR = base.payloadGPR();
-    m_stubInfo->patch.valueGPR = value.payloadGPR();
-    m_stubInfo->patch.thisGPR = InvalidGPRReg;
+    m_stubInfo->baseGPR = base.payloadGPR();
+    m_stubInfo->valueGPR = value.payloadGPR();
+    m_stubInfo->regs.thisGPR = InvalidGPRReg;
 #if USE(JSVALUE32_64)
-    m_stubInfo->patch.baseTagGPR = base.tagGPR();
-    m_stubInfo->patch.valueTagGPR = value.tagGPR();
-    m_stubInfo->patch.thisTagGPR = InvalidGPRReg;
+    m_stubInfo->baseTagGPR = base.tagGPR();
+    m_stubInfo->valueTagGPR = value.tagGPR();
+    m_stubInfo->v.thisTagGPR = InvalidGPRReg;
 #endif
 }
 
 void JITByIdGenerator::finalize(LinkBuffer& fastPath, LinkBuffer& slowPath)
 {
@@ -115,18 +115,18 @@
     generateFastCommon(jit, m_isLengthAccess ? InlineAccess::sizeForLengthAccess() : InlineAccess::sizeForPropertyAccess());
 }
 
 JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(
     CodeBlock* codeBlock, CodeOrigin codeOrigin, CallSiteIndex callSite, const RegisterSet& usedRegisters,
-    UniquedStringImpl*, JSValueRegs value, JSValueRegs base, JSValueRegs thisRegs, AccessType accessType)
-    : JITByIdGenerator(codeBlock, codeOrigin, callSite, accessType, usedRegisters, base, value)
+    UniquedStringImpl*, JSValueRegs value, JSValueRegs base, JSValueRegs thisRegs)
+    : JITByIdGenerator(codeBlock, codeOrigin, callSite, AccessType::GetByIdWithThis, usedRegisters, base, value)
 {
     RELEASE_ASSERT(thisRegs.payloadGPR() != thisRegs.tagGPR());
 
-    m_stubInfo->patch.thisGPR = thisRegs.payloadGPR();
+    m_stubInfo->regs.thisGPR = thisRegs.payloadGPR();
 #if USE(JSVALUE32_64)
-    m_stubInfo->patch.thisTagGPR = thisRegs.tagGPR();
+    m_stubInfo->v.thisTagGPR = thisRegs.tagGPR();
 #endif
 }
 
 void JITGetByIdWithThisGenerator::generateFastPath(MacroAssembler& jit)
 {
@@ -140,19 +140,19 @@
     : JITByIdGenerator(
         codeBlock, codeOrigin, callSite, AccessType::Put, usedRegisters, base, value)
     , m_ecmaMode(ecmaMode)
     , m_putKind(putKind)
 {
-    m_stubInfo->patch.usedRegisters.clear(scratch);
+    m_stubInfo->usedRegisters.clear(scratch);
 }
 
 void JITPutByIdGenerator::generateFastPath(MacroAssembler& jit)
 {
     generateFastCommon(jit, InlineAccess::sizeForPropertyReplace());
 }
 
-V_JITOperation_ESsiJJI JITPutByIdGenerator::slowPathFunction()
+V_JITOperation_GSsiJJI JITPutByIdGenerator::slowPathFunction()
 {
     if (m_ecmaMode == StrictMode) {
         if (m_putKind == Direct)
             return operationPutByIdDirectStrictOptimize;
         return operationPutByIdStrictOptimize;
@@ -182,26 +182,28 @@
     const RegisterSet& usedRegisters, GPRReg result, GPRReg value, GPRReg prototype,
     GPRReg scratch1, GPRReg scratch2, bool prototypeIsKnownObject)
     : JITInlineCacheGenerator(
         codeBlock, codeOrigin, callSiteIndex, AccessType::InstanceOf, usedRegisters)
 {
-    m_stubInfo->patch.baseGPR = value;
-    m_stubInfo->patch.valueGPR = result;
-    m_stubInfo->patch.thisGPR = prototype;
+    m_stubInfo->baseGPR = value;
+    m_stubInfo->valueGPR = result;
+    m_stubInfo->regs.prototypeGPR = prototype;
 #if USE(JSVALUE32_64)
-    m_stubInfo->patch.baseTagGPR = InvalidGPRReg;
-    m_stubInfo->patch.valueTagGPR = InvalidGPRReg;
-    m_stubInfo->patch.thisTagGPR = InvalidGPRReg;
+    m_stubInfo->baseTagGPR = InvalidGPRReg;
+    m_stubInfo->valueTagGPR = InvalidGPRReg;
+    m_stubInfo->v.thisTagGPR = InvalidGPRReg;
 #endif
 
-    m_stubInfo->patch.usedRegisters.clear(result);
+    m_stubInfo->usedRegisters.clear(result);
     if (scratch1 != InvalidGPRReg)
-        m_stubInfo->patch.usedRegisters.clear(scratch1);
+        m_stubInfo->usedRegisters.clear(scratch1);
     if (scratch2 != InvalidGPRReg)
-        m_stubInfo->patch.usedRegisters.clear(scratch2);
+        m_stubInfo->usedRegisters.clear(scratch2);
 
     m_stubInfo->prototypeIsKnownObject = prototypeIsKnownObject;
+
+    m_stubInfo->hasConstantIdentifier = false;
 }
 
 void JITInstanceOfGenerator::generateFastPath(MacroAssembler& jit)
 {
     m_jump = jit.patchableJump();
@@ -215,9 +217,41 @@
         fastPath.locationOf<JITStubRoutinePtrTag>(m_jump));
 
     fastPath.link(m_jump.m_jump, slowPath.locationOf<NoPtrTag>(m_slowPathBegin));
 }
 
+JITGetByValGenerator::JITGetByValGenerator(CodeBlock* codeBlock, CodeOrigin codeOrigin, CallSiteIndex callSiteIndex, const RegisterSet& usedRegisters, JSValueRegs base, JSValueRegs property, JSValueRegs result)
+    : Base(codeBlock, codeOrigin, callSiteIndex, AccessType::GetByVal, usedRegisters)
+    , m_base(base)
+    , m_result(result)
+{
+    m_stubInfo->hasConstantIdentifier = false;
+
+    m_stubInfo->baseGPR = base.payloadGPR();
+    m_stubInfo->regs.propertyGPR = property.payloadGPR();
+    m_stubInfo->valueGPR = result.payloadGPR();
+#if USE(JSVALUE32_64)
+    m_stubInfo->baseTagGPR = base.tagGPR();
+    m_stubInfo->valueTagGPR = result.tagGPR();
+    m_stubInfo->v.propertyTagGPR = property.tagGPR();
+#endif
+}
+
+void JITGetByValGenerator::generateFastPath(MacroAssembler& jit)
+{
+    m_start = jit.label();
+    m_slowPathJump = jit.patchableJump();
+    m_done = jit.label();
+}
+
+void JITGetByValGenerator::finalize(
+    LinkBuffer& fastPath, LinkBuffer& slowPath)
+{
+    ASSERT(m_start.isSet());
+    Base::finalize(
+        fastPath, slowPath, fastPath.locationOf<JITStubRoutinePtrTag>(m_start));
+}
+
 } // namespace JSC
 
 #endif // ENABLE(JIT)
 
