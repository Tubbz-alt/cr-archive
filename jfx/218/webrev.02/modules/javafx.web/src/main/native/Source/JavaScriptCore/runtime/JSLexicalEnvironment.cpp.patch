diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLexicalEnvironment.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLexicalEnvironment.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLexicalEnvironment.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLexicalEnvironment.cpp
@@ -64,18 +64,18 @@
         if (toValue && toValue.isCell())
             analyzer.analyzeVariableNameEdge(thisObject, toValue.asCell(), it->key.get());
     }
 }
 
-void JSLexicalEnvironment::getOwnNonIndexPropertyNames(JSObject* object, ExecState* exec, PropertyNameArray& propertyNames, EnumerationMode mode)
+void JSLexicalEnvironment::getOwnNonIndexPropertyNames(JSObject* object, JSGlobalObject* globalObject, PropertyNameArray& propertyNames, EnumerationMode mode)
 {
     JSLexicalEnvironment* thisObject = jsCast<JSLexicalEnvironment*>(object);
 
     {
         ConcurrentJSLocker locker(thisObject->symbolTable()->m_lock);
         SymbolTable::Map::iterator end = thisObject->symbolTable()->end(locker);
-        VM& vm = exec->vm();
+        VM& vm = globalObject->vm();
         for (SymbolTable::Map::iterator it = thisObject->symbolTable()->begin(locker); it != end; ++it) {
             if (it->value.getAttributes() & PropertyAttribute::DontEnum && !mode.includeDontEnumProperties())
                 continue;
             if (!thisObject->isValidScopeOffset(it->value.scopeOffset()))
                 continue;
@@ -83,21 +83,21 @@
                 continue;
             propertyNames.add(Identifier::fromUid(vm, it->key.get()));
         }
     }
     // Skip the JSSymbolTableObject's implementation of getOwnNonIndexPropertyNames
-    JSObject::getOwnNonIndexPropertyNames(thisObject, exec, propertyNames, mode);
+    JSObject::getOwnNonIndexPropertyNames(thisObject, globalObject, propertyNames, mode);
 }
 
-bool JSLexicalEnvironment::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
+bool JSLexicalEnvironment::getOwnPropertySlot(JSObject* object, JSGlobalObject* globalObject, PropertyName propertyName, PropertySlot& slot)
 {
     JSLexicalEnvironment* thisObject = jsCast<JSLexicalEnvironment*>(object);
 
     if (symbolTableGet(thisObject, propertyName, slot))
         return true;
 
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     unsigned attributes;
     if (JSValue value = thisObject->getDirect(vm, propertyName, attributes)) {
         slot.setValue(thisObject, attributes, value);
         return true;
     }
@@ -107,33 +107,33 @@
     ASSERT(!thisObject->hasGetterSetterProperties(vm));
     ASSERT(thisObject->getPrototypeDirect(vm).isNull());
     return false;
 }
 
-bool JSLexicalEnvironment::put(JSCell* cell, ExecState* exec, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
+bool JSLexicalEnvironment::put(JSCell* cell, JSGlobalObject* globalObject, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
 {
     JSLexicalEnvironment* thisObject = jsCast<JSLexicalEnvironment*>(cell);
     ASSERT(!Heap::heap(value) || Heap::heap(value) == Heap::heap(thisObject));
 
     bool shouldThrowReadOnlyError = slot.isStrictMode() || thisObject->isLexicalScope();
     bool ignoreReadOnlyErrors = false;
     bool putResult = false;
-    if (symbolTablePutInvalidateWatchpointSet(thisObject, exec, propertyName, value, shouldThrowReadOnlyError, ignoreReadOnlyErrors, putResult))
+    if (symbolTablePutInvalidateWatchpointSet(thisObject, globalObject, propertyName, value, shouldThrowReadOnlyError, ignoreReadOnlyErrors, putResult))
         return putResult;
 
     // We don't call through to JSObject because __proto__ and getter/setter
     // properties are non-standard extensions that other implementations do not
     // expose in the lexicalEnvironment object.
-    ASSERT(!thisObject->hasGetterSetterProperties(exec->vm()));
-    return thisObject->putOwnDataProperty(exec->vm(), propertyName, value, slot);
+    ASSERT(!thisObject->hasGetterSetterProperties(globalObject->vm()));
+    return thisObject->putOwnDataProperty(globalObject->vm(), propertyName, value, slot);
 }
 
-bool JSLexicalEnvironment::deleteProperty(JSCell* cell, ExecState* exec, PropertyName propertyName)
+bool JSLexicalEnvironment::deleteProperty(JSCell* cell, JSGlobalObject* globalObject, PropertyName propertyName)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     if (propertyName == vm.propertyNames->arguments)
         return false;
 
-    return Base::deleteProperty(cell, exec, propertyName);
+    return Base::deleteProperty(cell, globalObject, propertyName);
 }
 
 } // namespace JSC
