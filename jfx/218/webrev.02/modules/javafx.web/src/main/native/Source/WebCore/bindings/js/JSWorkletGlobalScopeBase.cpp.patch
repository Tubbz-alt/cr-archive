diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSWorkletGlobalScopeBase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSWorkletGlobalScopeBase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSWorkletGlobalScopeBase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSWorkletGlobalScopeBase.cpp
@@ -29,10 +29,11 @@
 
 #if ENABLE(CSS_PAINTING_API)
 
 #include "DOMWrapperWorld.h"
 #include "JSDOMGlobalObjectTask.h"
+#include "JSDOMGuardedObject.h"
 #include "JSWorkletGlobalScope.h"
 #include "WorkletGlobalScope.h"
 #include "WorkletScriptController.h"
 #include <JavaScriptCore/JSCInlines.h>
 #include <JavaScriptCore/JSCJSValueInlines.h>
@@ -46,11 +47,11 @@
 
 const GlobalObjectMethodTable JSWorkletGlobalScopeBase::s_globalObjectMethodTable = {
     &supportsRichSourceInfo,
     &shouldInterruptScript,
     &javaScriptRuntimeFlags,
-    nullptr, // queueTaskToEventLoop
+    nullptr, // queueMicrotaskToEventLoop
     &shouldInterruptScriptBeforeTimeout,
     nullptr, // moduleLoaderImportModule
     nullptr, // moduleLoaderResolve
     nullptr, // moduleLoaderFetch
     nullptr, // moduleLoaderCreateImportMetaProperties
@@ -119,16 +120,16 @@
 {
     auto* thisObject = jsCast<const JSWorkletGlobalScopeBase*>(object);
     return thisObject->m_wrapped->jsRuntimeFlags();
 }
 
-JSValue toJS(ExecState* exec, JSDOMGlobalObject*, WorkletGlobalScope& workletGlobalScope)
+JSValue toJS(JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject*, WorkletGlobalScope& workletGlobalScope)
 {
-    return toJS(exec, workletGlobalScope);
+    return toJS(lexicalGlobalObject, workletGlobalScope);
 }
 
-JSValue toJS(ExecState*, WorkletGlobalScope& workletGlobalScope)
+JSValue toJS(JSGlobalObject*, WorkletGlobalScope& workletGlobalScope)
 {
     if (!workletGlobalScope.script())
         return jsUndefined();
     auto* contextWrapper = workletGlobalScope.script()->workletGlobalScopeWrapper();
     if (!contextWrapper)
