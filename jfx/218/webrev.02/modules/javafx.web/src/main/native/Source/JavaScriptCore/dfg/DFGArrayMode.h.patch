diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGArrayMode.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGArrayMode.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGArrayMode.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGArrayMode.h
@@ -428,25 +428,25 @@
         ArrayModes result;
         switch (type()) {
         case Array::Generic:
             return ALL_ARRAY_MODES;
         case Array::Int32:
-            result = arrayModesWithIndexingShape(Int32Shape);
+            result = arrayModesWithIndexingShapes(Int32Shape);
             break;
         case Array::Double:
-            result = arrayModesWithIndexingShape(DoubleShape);
+            result = arrayModesWithIndexingShapes(DoubleShape);
             break;
         case Array::Contiguous:
-            result = arrayModesWithIndexingShape(ContiguousShape);
+            result = arrayModesWithIndexingShapes(ContiguousShape);
             break;
         case Array::ArrayStorage:
-            return arrayModesWithIndexingShape(ArrayStorageShape);
+            return arrayModesWithIndexingShapes(ArrayStorageShape);
         case Array::SlowPutArrayStorage:
             return arrayModesWithIndexingShapes(SlowPutArrayStorageShape, ArrayStorageShape);
         case Array::DirectArguments:
         case Array::ScopedArguments:
-            return arrayModesWithIndexingShapes(ArrayStorageShape, NonArray);
+            return arrayModesWithIndexingShapes(ArrayStorageShape, SlowPutArrayStorageShape, NonArray);
         case Array::Int8Array:
             return Int8ArrayMode;
         case Array::Int16Array:
             return Int16ArrayMode;
         case Array::Int32Array:
@@ -510,11 +510,11 @@
     explicit ArrayMode(unsigned word)
     {
         u.asWord = word;
     }
 
-    ArrayModes arrayModesWithIndexingShape(IndexingType shape) const
+    ArrayModes arrayModesWithIndexingShapes(IndexingType shape) const
     {
         switch (arrayClass()) {
         case Array::NonArray:
         case Array::OriginalNonArray:
             return asArrayModesIgnoringTypedArrays(shape);
@@ -535,14 +535,15 @@
             // This is only necessary for C++ compilers that don't understand enums.
             return 0;
         }
     }
 
-    ArrayModes arrayModesWithIndexingShapes(IndexingType shape1, IndexingType shape2) const
+    template <typename... Args>
+    ArrayModes arrayModesWithIndexingShapes(IndexingType shape1, Args... args) const
     {
-        ArrayModes arrayMode1 = arrayModesWithIndexingShape(shape1);
-        ArrayModes arrayMode2 = arrayModesWithIndexingShape(shape2);
+        ArrayModes arrayMode1 = arrayModesWithIndexingShapes(shape1);
+        ArrayModes arrayMode2 = arrayModesWithIndexingShapes(args...);
         return arrayMode1 | arrayMode2;
     }
 
     bool alreadyChecked(Graph&, Node*, const AbstractValue&, IndexingType shape) const;
 
