diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/MachineContext.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/MachineContext.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/MachineContext.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/MachineContext.h
@@ -56,13 +56,17 @@
 #endif // !ENABLE(C_LOOP)
 
 #if HAVE(MACHINE_CONTEXT)
 
 #if !USE(PLATFORM_REGISTERS_WITH_PROFILE)
+
+#if !USE(DARWIN_REGISTER_MACROS)
 static inline void*& stackPointerImpl(mcontext_t&);
-static inline void*& framePointerImpl(mcontext_t&);
 static inline void*& instructionPointerImpl(mcontext_t&);
+#endif // !USE(DARWIN_REGISTER_MACROS)
+
+static inline void*& framePointerImpl(mcontext_t&);
 #endif // !USE(PLATFORM_REGISTERS_WITH_PROFILE)
 
 template<typename T = void*> T stackPointer(const mcontext_t&);
 template<typename T = void*> void setStackPointer(mcontext_t&, T);
 template<typename T = void*> T framePointer(const mcontext_t&);
@@ -79,11 +83,11 @@
 #endif // HAVE(MACHINE_CONTEXT)
 #endif // OS(WINDOWS) || HAVE(MACHINE_CONTEXT)
 
 #if OS(WINDOWS) || HAVE(MACHINE_CONTEXT)
 
-#if !USE(PLATFORM_REGISTERS_WITH_PROFILE)
+#if !USE(PLATFORM_REGISTERS_WITH_PROFILE) && !USE(DARWIN_REGISTER_MACROS)
 static inline void*& stackPointerImpl(PlatformRegisters& regs)
 {
 #if OS(DARWIN)
 #if __DARWIN_UNIX03
 
@@ -91,11 +95,11 @@
     return reinterpret_cast<void*&>(regs.__esp);
 #elif CPU(X86_64)
     return reinterpret_cast<void*&>(regs.__rsp);
 #elif CPU(PPC) || CPU(PPC64)
     return reinterpret_cast<void*&>(regs.__r1);
-#elif CPU(ARM_THUMB2) || CPU(ARM) || CPU(ARM64)
+#elif CPU(ARM_THUMB2) || CPU(ARM)
     return reinterpret_cast<void*&>(regs.__sp);
 #else
 #error Unknown Architecture
 #endif
 
@@ -138,10 +142,12 @@
 {
 #if USE(PLATFORM_REGISTERS_WITH_PROFILE)
     void* value = WTF_READ_PLATFORM_REGISTERS_SP_WITH_PROFILE(regs);
     assertIsNotTagged(value);
     return bitwise_cast<T>(value);
+#elif USE(DARWIN_REGISTER_MACROS)
+    return bitwise_cast<T>(reinterpret_cast<void*>(__darwin_arm_thread_state64_get_sp(regs)));
 #else
     return bitwise_cast<T>(stackPointerImpl(const_cast<PlatformRegisters&>(regs)));
 #endif
 }
 
@@ -149,10 +155,12 @@
 inline void setStackPointer(PlatformRegisters& regs, T value)
 {
 #if USE(PLATFORM_REGISTERS_WITH_PROFILE)
     assertIsNotTagged(bitwise_cast<void*>(value));
     WTF_WRITE_PLATFORM_REGISTERS_SP_WITH_PROFILE(regs, bitwise_cast<void*>(value));
+#elif USE(DARWIN_REGISTER_MACROS)
+    __darwin_arm_thread_state64_set_sp(regs, value);
 #else
     stackPointerImpl(regs) = bitwise_cast<void*>(value);
 #endif
 }
 
@@ -165,11 +173,11 @@
 }
 #endif // OS(WINDOWS) || HAVE(MACHINE_CONTEXT)
 
 #if HAVE(MACHINE_CONTEXT)
 
-#if !USE(PLATFORM_REGISTERS_WITH_PROFILE)
+#if !USE(PLATFORM_REGISTERS_WITH_PROFILE) && !USE(DARWIN_REGISTER_MACROS)
 static inline void*& stackPointerImpl(mcontext_t& machineContext)
 {
 #if OS(DARWIN)
     return stackPointerImpl(machineContext->__ss);
 #elif OS(FREEBSD)
@@ -212,10 +220,12 @@
 {
 #if USE(PLATFORM_REGISTERS_WITH_PROFILE)
     void* value = WTF_READ_MACHINE_CONTEXT_SP_WITH_PROFILE(machineContext);
     assertIsNotTagged(value);
     return bitwise_cast<T>(value);
+#elif USE(DARWIN_REGISTER_MACROS)
+    return stackPointer(machineContext->__ss);
 #else
     return bitwise_cast<T>(stackPointerImpl(const_cast<mcontext_t&>(machineContext)));
 #endif
 }
 
@@ -223,10 +233,12 @@
 inline void setStackPointer(mcontext_t& machineContext, T value)
 {
 #if USE(PLATFORM_REGISTERS_WITH_PROFILE)
     assertIsNotTagged(bitwise_cast<void*>(value));
     WTF_WRITE_MACHINE_CONTEXT_SP_WITH_PROFILE(machineContext, bitwise_cast<void*>(value));
+#elif USE(DARWIN_REGISTER_MACROS)
+    return setStackPointer(machineContext->__ss, value);
 #else
     stackPointerImpl(machineContext) = bitwise_cast<void*>(value);
 #endif
 }
 #endif // HAVE(MACHINE_CONTEXT)
@@ -383,21 +395,21 @@
 #endif // HAVE(MACHINE_CONTEXT)
 
 
 #if OS(WINDOWS) || HAVE(MACHINE_CONTEXT)
 
-#if !USE(PLATFORM_REGISTERS_WITH_PROFILE)
+#if !USE(PLATFORM_REGISTERS_WITH_PROFILE) && !USE(DARWIN_REGISTER_MACROS)
 static inline void*& instructionPointerImpl(PlatformRegisters& regs)
 {
 #if OS(DARWIN)
 #if __DARWIN_UNIX03
 
 #if CPU(X86)
     return reinterpret_cast<void*&>(regs.__eip);
 #elif CPU(X86_64)
     return reinterpret_cast<void*&>(regs.__rip);
-#elif CPU(ARM_THUMB2) || CPU(ARM) || CPU(ARM64)
+#elif CPU(ARM_THUMB2) || CPU(ARM)
     return reinterpret_cast<void*&>(regs.__pc);
 #else
 #error Unknown Architecture
 #endif
 
@@ -434,10 +446,12 @@
 
 inline Optional<MacroAssemblerCodePtr<PlatformRegistersPCPtrTag>> instructionPointer(const PlatformRegisters& regs)
 {
 #if USE(PLATFORM_REGISTERS_WITH_PROFILE)
     void* value = WTF_READ_PLATFORM_REGISTERS_PC_WITH_PROFILE(regs);
+#elif USE(DARWIN_REGISTER_MACROS)
+    void* value = __darwin_arm_thread_state64_get_pc_fptr(regs);
 #else
     void* value = instructionPointerImpl(const_cast<PlatformRegisters&>(regs));
 #endif
     if (!value)
         return MacroAssemblerCodePtr<PlatformRegistersPCPtrTag>(nullptr);
@@ -450,20 +464,22 @@
 
 inline void setInstructionPointer(PlatformRegisters& regs, MacroAssemblerCodePtr<CFunctionPtrTag> value)
 {
 #if USE(PLATFORM_REGISTERS_WITH_PROFILE)
     WTF_WRITE_PLATFORM_REGISTERS_PC_WITH_PROFILE(regs, value.executableAddress());
+#elif USE(DARWIN_REGISTER_MACROS)
+    __darwin_arm_thread_state64_set_pc_fptr(regs, value.executableAddress());
 #else
     instructionPointerImpl(regs) = value.executableAddress();
 #endif
 }
 #endif // OS(WINDOWS) || HAVE(MACHINE_CONTEXT)
 
 
 #if HAVE(MACHINE_CONTEXT)
 
-#if !USE(PLATFORM_REGISTERS_WITH_PROFILE)
+#if !USE(PLATFORM_REGISTERS_WITH_PROFILE) && !USE(DARWIN_REGISTER_MACROS)
 static inline void*& instructionPointerImpl(mcontext_t& machineContext)
 {
 #if OS(DARWIN)
     return instructionPointerImpl(machineContext->__ss);
 #elif OS(FREEBSD)
@@ -505,56 +521,57 @@
 }
 #endif // !USE(PLATFORM_REGISTERS_WITH_PROFILE)
 
 inline MacroAssemblerCodePtr<PlatformRegistersPCPtrTag> instructionPointer(const mcontext_t& machineContext)
 {
+#if USE(DARWIN_REGISTER_MACROS)
+    return *instructionPointer(machineContext->__ss);
+#else
+
 #if USE(PLATFORM_REGISTERS_WITH_PROFILE)
     void* value = WTF_READ_MACHINE_CONTEXT_PC_WITH_PROFILE(machineContext);
 #else
     void* value = instructionPointerImpl(const_cast<mcontext_t&>(machineContext));
 #endif
+
     return MacroAssemblerCodePtr<PlatformRegistersPCPtrTag>(value);
+#endif
 }
 
 inline void setInstructionPointer(mcontext_t& machineContext, MacroAssemblerCodePtr<CFunctionPtrTag> value)
 {
 #if USE(PLATFORM_REGISTERS_WITH_PROFILE)
     WTF_WRITE_MACHINE_CONTEXT_PC_WITH_PROFILE(machineContext, value.executableAddress());
+#elif USE(DARWIN_REGISTER_MACROS)
+    setInstructionPointer(machineContext->__ss, value);
 #else
     instructionPointerImpl(machineContext) = value.executableAddress();
 #endif
 }
 #endif // HAVE(MACHINE_CONTEXT)
 
 
 #if OS(WINDOWS) || HAVE(MACHINE_CONTEXT)
 
 #if OS(DARWIN) && __DARWIN_UNIX03 && CPU(ARM64)
-#if !USE(PLATFORM_REGISTERS_WITH_PROFILE)
-inline void*& linkRegisterImpl(PlatformRegisters& regs)
-{
-    return reinterpret_cast<void*&>(regs.__lr);
-}
-#endif // USE(PLATFORM_REGISTERS_WITH_PROFILE)
-
 
 inline MacroAssemblerCodePtr<PlatformRegistersLRPtrTag> linkRegister(const PlatformRegisters& regs)
 {
 #if USE(PLATFORM_REGISTERS_WITH_PROFILE)
     void* value = WTF_READ_PLATFORM_REGISTERS_LR_WITH_PROFILE(regs);
 #else
-    void* value = linkRegisterImpl(const_cast<PlatformRegisters&>(regs));
+    void* value = __darwin_arm_thread_state64_get_lr_fptr(regs);
 #endif
     return MacroAssemblerCodePtr<PlatformRegistersLRPtrTag>(value);
 }
 
 inline void setLinkRegister(PlatformRegisters& regs, MacroAssemblerCodePtr<CFunctionPtrTag> value)
 {
 #if USE(PLATFORM_REGISTERS_WITH_PROFILE)
     WTF_WRITE_PLATFORM_REGISTERS_PC_WITH_PROFILE(regs, value.executableAddress());
 #else
-    linkRegisterImpl(regs) = value.executableAddress();
+    __darwin_arm_thread_state64_set_lr_fptr(regs, value.executableAddress());
 #endif
 }
 #endif // OS(DARWIN) && __DARWIN_UNIX03 && CPU(ARM64)
 
 #if HAVE(MACHINE_CONTEXT)
