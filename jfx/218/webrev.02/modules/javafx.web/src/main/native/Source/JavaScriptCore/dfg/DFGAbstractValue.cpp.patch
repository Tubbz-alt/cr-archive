diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractValue.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractValue.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractValue.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractValue.cpp
@@ -264,18 +264,19 @@
     filterValueByType();
 
     return normalizeClarity(graph);
 }
 
-FiltrationResult AbstractValue::filterArrayModes(ArrayModes arrayModes)
+FiltrationResult AbstractValue::filterArrayModes(ArrayModes arrayModes, SpeculatedType admittedTypes)
 {
     ASSERT(arrayModes);
+    ASSERT(!(admittedTypes & SpecCell));
 
     if (isClear())
         return FiltrationOK;
 
-    m_type &= SpecCell;
+    m_type &= SpecCell | admittedTypes;
     m_arrayModes &= arrayModes;
     return normalizeClarity();
 }
 
 FiltrationResult AbstractValue::filterClassInfo(Graph& graph, const ClassInfo* classInfo)
@@ -439,11 +440,11 @@
     FiltrationResult result = normalizeClarity();
     assertIsRegistered(graph);
     return result;
 }
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
 void AbstractValue::checkConsistency() const
 {
     if (!(m_type & SpecCell)) {
         RELEASE_ASSERT(m_structure.isClear());
         RELEASE_ASSERT(!m_arrayModes);
@@ -463,11 +464,11 @@
 
 void AbstractValue::assertIsRegistered(Graph& graph) const
 {
     m_structure.assertIsRegistered(graph);
 }
-#endif // !ASSERT_DISABLED
+#endif // ASSERT_ENABLED
 
 ResultType AbstractValue::resultType() const
 {
     ASSERT(isType(SpecBytecodeTop));
     if (isType(SpecBoolean))
