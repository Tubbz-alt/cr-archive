diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlCollator.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlCollator.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlCollator.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/IntlCollator.cpp
@@ -1,9 +1,9 @@
 /*
  * Copyright (C) 2015 Andy VanWagoner (andy@vanwagoner.family)
  * Copyright (C) 2015 Sukolsak Sakshuwong (sukolsak@gmail.com)
- * Copyright (C) 2016-2019 Apple Inc. All Rights Reserved.
+ * Copyright (C) 2016-2020 Apple Inc. All Rights Reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -68,25 +68,20 @@
 {
     return Structure::create(vm, globalObject, prototype, TypeInfo(ObjectType, StructureFlags), info());
 }
 
 IntlCollator::IntlCollator(VM& vm, Structure* structure)
-    : JSDestructibleObject(vm, structure)
+    : Base(vm, structure)
 {
 }
 
 void IntlCollator::finishCreation(VM& vm)
 {
     Base::finishCreation(vm);
     ASSERT(inherits(vm, info()));
 }
 
-void IntlCollator::destroy(JSCell* cell)
-{
-    static_cast<IntlCollator*>(cell)->IntlCollator::~IntlCollator();
-}
-
 void IntlCollator::visitChildren(JSCell* cell, SlotVisitor& visitor)
 {
     IntlCollator* thisObject = jsCast<IntlCollator*>(cell);
     ASSERT_GC_OBJECT_INHERITS(thisObject, info());
 
@@ -171,30 +166,28 @@
         ASSERT_NOT_REACHED();
     }
     return keyLocaleData;
 }
 
-void IntlCollator::initializeCollator(ExecState& state, JSValue locales, JSValue optionsValue)
+void IntlCollator::initializeCollator(JSGlobalObject* globalObject, JSValue locales, JSValue optionsValue)
 {
-    VM& vm = state.vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     // 10.1.1 InitializeCollator (collator, locales, options) (ECMA-402)
     // https://tc39.github.io/ecma402/#sec-initializecollator
 
-    auto requestedLocales = canonicalizeLocaleList(state, locales);
+    auto requestedLocales = canonicalizeLocaleList(globalObject, locales);
     RETURN_IF_EXCEPTION(scope, void());
 
-    JSObject* options;
-    if (optionsValue.isUndefined())
-        options = constructEmptyObject(&state, state.lexicalGlobalObject()->nullPrototypeObjectStructure());
-    else {
-        options = optionsValue.toObject(&state);
+    JSValue options = optionsValue;
+    if (!optionsValue.isUndefined()) {
+        options = optionsValue.toObject(globalObject);
         RETURN_IF_EXCEPTION(scope, void());
     }
 
-    String usageString = intlStringOption(state, options, vm.propertyNames->usage, { "sort", "search" }, "usage must be either \"sort\" or \"search\"", "sort");
+    String usageString = intlStringOption(globalObject, options, vm.propertyNames->usage, { "sort", "search" }, "usage must be either \"sort\" or \"search\"", "sort");
     RETURN_IF_EXCEPTION(scope, void());
     if (usageString == "sort")
         m_usage = Usage::Sort;
     else if (usageString == "search")
         m_usage = Usage::Search;
@@ -203,37 +196,37 @@
 
     auto localeData = (m_usage == Usage::Sort) ? sortLocaleData : searchLocaleData;
 
     HashMap<String, String> opt;
 
-    String matcher = intlStringOption(state, options, vm.propertyNames->localeMatcher, { "lookup", "best fit" }, "localeMatcher must be either \"lookup\" or \"best fit\"", "best fit");
+    String matcher = intlStringOption(globalObject, options, vm.propertyNames->localeMatcher, { "lookup", "best fit" }, "localeMatcher must be either \"lookup\" or \"best fit\"", "best fit");
     RETURN_IF_EXCEPTION(scope, void());
     opt.add("localeMatcher"_s, matcher);
 
     {
         String numericString;
         bool usesFallback;
-        bool numeric = intlBooleanOption(state, options, vm.propertyNames->numeric, usesFallback);
+        bool numeric = intlBooleanOption(globalObject, options, vm.propertyNames->numeric, usesFallback);
         RETURN_IF_EXCEPTION(scope, void());
         if (!usesFallback)
             numericString = numeric ? "true"_s : "false"_s;
         if (!numericString.isNull())
             opt.add("kn"_s, numericString);
     }
     {
-        String caseFirst = intlStringOption(state, options, vm.propertyNames->caseFirst, { "upper", "lower", "false" }, "caseFirst must be either \"upper\", \"lower\", or \"false\"", nullptr);
+        String caseFirst = intlStringOption(globalObject, options, vm.propertyNames->caseFirst, { "upper", "lower", "false" }, "caseFirst must be either \"upper\", \"lower\", or \"false\"", nullptr);
         RETURN_IF_EXCEPTION(scope, void());
         if (!caseFirst.isNull())
             opt.add("kf"_s, caseFirst);
     }
 
-    auto& availableLocales = state.jsCallee()->globalObject(vm)->intlCollatorAvailableLocales();
-    auto result = resolveLocale(state, availableLocales, requestedLocales, opt, relevantCollatorExtensionKeys, WTF_ARRAY_LENGTH(relevantCollatorExtensionKeys), localeData);
+    auto& availableLocales = intlCollatorAvailableLocales();
+    auto result = resolveLocale(globalObject, availableLocales, requestedLocales, opt, relevantCollatorExtensionKeys, WTF_ARRAY_LENGTH(relevantCollatorExtensionKeys), localeData);
 
     m_locale = result.get("locale"_s);
     if (m_locale.isEmpty()) {
-        throwTypeError(&state, scope, "failed to initialize Collator due to invalid locale"_s);
+        throwTypeError(globalObject, scope, "failed to initialize Collator due to invalid locale"_s);
         return;
     }
 
     const String& collation = result.get("co"_s);
     m_collation = collation.isNull() ? "default"_s : collation;
@@ -245,11 +238,11 @@
     else if (caseFirst == "upper")
         m_caseFirst = CaseFirst::Upper;
     else
         m_caseFirst = CaseFirst::False;
 
-    String sensitivityString = intlStringOption(state, options, vm.propertyNames->sensitivity, { "base", "accent", "case", "variant" }, "sensitivity must be either \"base\", \"accent\", \"case\", or \"variant\"", nullptr);
+    String sensitivityString = intlStringOption(globalObject, options, vm.propertyNames->sensitivity, { "base", "accent", "case", "variant" }, "sensitivity must be either \"base\", \"accent\", \"case\", or \"variant\"", nullptr);
     RETURN_IF_EXCEPTION(scope, void());
     if (sensitivityString == "base")
         m_sensitivity = Sensitivity::Base;
     else if (sensitivityString == "accent")
         m_sensitivity = Sensitivity::Accent;
@@ -257,27 +250,27 @@
         m_sensitivity = Sensitivity::Case;
     else
         m_sensitivity = Sensitivity::Variant;
 
     bool usesFallback;
-    bool ignorePunctuation = intlBooleanOption(state, options, vm.propertyNames->ignorePunctuation, usesFallback);
+    bool ignorePunctuation = intlBooleanOption(globalObject, options, vm.propertyNames->ignorePunctuation, usesFallback);
     if (usesFallback)
         ignorePunctuation = false;
     RETURN_IF_EXCEPTION(scope, void());
     m_ignorePunctuation = ignorePunctuation;
 
     m_initializedCollator = true;
 }
 
-void IntlCollator::createCollator(ExecState& state)
+void IntlCollator::createCollator(JSGlobalObject* globalObject)
 {
-    VM& vm = state.vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_CATCH_SCOPE(vm);
     ASSERT(!m_collator);
 
     if (!m_initializedCollator) {
-        initializeCollator(state, jsUndefined(), jsUndefined());
+        initializeCollator(globalObject, jsUndefined(), jsUndefined());
         scope.assertNoException();
     }
 
     UErrorCode status = U_ZERO_ERROR;
     auto collator = std::unique_ptr<UCollator, UCollatorDeleter>(ucol_open(m_locale.utf8().data(), &status));
@@ -327,28 +320,43 @@
         return;
 
     m_collator = WTFMove(collator);
 }
 
-JSValue IntlCollator::compareStrings(ExecState& state, StringView x, StringView y)
+JSValue IntlCollator::compareStrings(JSGlobalObject* globalObject, StringView x, StringView y)
 {
-    VM& vm = state.vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     // 10.3.4 CompareStrings abstract operation (ECMA-402 2.0)
     if (!m_collator) {
-        createCollator(state);
+        createCollator(globalObject);
         if (!m_collator)
-            return throwException(&state, scope, createError(&state, "Failed to compare strings."_s));
+            return throwException(globalObject, scope, createError(globalObject, "Failed to compare strings."_s));
     }
 
     UErrorCode status = U_ZERO_ERROR;
-    UCharIterator iteratorX = createIterator(x);
-    UCharIterator iteratorY = createIterator(y);
-    auto result = ucol_strcollIter(m_collator.get(), &iteratorX, &iteratorY, &status);
+    UCollationResult result = UCOL_EQUAL;
+    if (x.is8Bit() && y.is8Bit() && x.isAllASCII() && y.isAllASCII())
+        result = ucol_strcollUTF8(m_collator.get(), bitwise_cast<const char*>(x.characters8()), x.length(), bitwise_cast<const char*>(y.characters8()), y.length(), &status);
+    else {
+        auto getCharacters = [&] (const StringView& view, Vector<UChar>& buffer) -> const UChar* {
+            if (!view.is8Bit())
+                return view.characters16();
+            buffer.resize(view.length());
+            StringImpl::copyCharacters(buffer.data(), view.characters8(), view.length());
+            return buffer.data();
+        };
+
+        Vector<UChar> xBuffer;
+        Vector<UChar> yBuffer;
+        const UChar* xCharacters = getCharacters(x, xBuffer);
+        const UChar* yCharacters = getCharacters(y, yBuffer);
+        result = ucol_strcoll(m_collator.get(), xCharacters, x.length(), yCharacters, y.length());
+    }
     if (U_FAILURE(status))
-        return throwException(&state, scope, createError(&state, "Failed to compare strings."_s));
+        return throwException(globalObject, scope, createError(globalObject, "Failed to compare strings."_s));
     return jsNumber(result);
 }
 
 ASCIILiteral IntlCollator::usageString(Usage usage)
 {
@@ -390,13 +398,13 @@
     }
     ASSERT_NOT_REACHED();
     return ASCIILiteral::null();
 }
 
-JSObject* IntlCollator::resolvedOptions(ExecState& state)
+JSObject* IntlCollator::resolvedOptions(JSGlobalObject* globalObject)
 {
-    VM& vm = state.vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
     // 10.3.5 Intl.Collator.prototype.resolvedOptions() (ECMA-402 2.0)
     // The function returns a new object whose properties and attributes are set as if
     // constructed by an object literal assigning to each of the following properties the
@@ -405,15 +413,15 @@
     // in Table 1 whose keys are included in the %Collator%[[relevantExtensionKeys]]
     // internal slot of the standard built-in object that is the initial value of
     // Intl.Collator.
 
     if (!m_initializedCollator) {
-        initializeCollator(state, jsUndefined(), jsUndefined());
+        initializeCollator(globalObject, jsUndefined(), jsUndefined());
         scope.assertNoException();
     }
 
-    JSObject* options = constructEmptyObject(&state);
+    JSObject* options = constructEmptyObject(globalObject);
     options->putDirect(vm, vm.propertyNames->locale, jsString(vm, m_locale));
     options->putDirect(vm, vm.propertyNames->usage, jsNontrivialString(vm, usageString(m_usage)));
     options->putDirect(vm, vm.propertyNames->sensitivity, jsNontrivialString(vm, sensitivityString(m_sensitivity)));
     options->putDirect(vm, vm.propertyNames->ignorePunctuation, jsBoolean(m_ignorePunctuation));
     options->putDirect(vm, vm.propertyNames->collation, jsString(vm, m_collation));
