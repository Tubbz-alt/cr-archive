diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchResponse.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchResponse.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchResponse.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/fetch/FetchResponse.cpp
@@ -52,10 +52,11 @@
     bool isSynthetic = response.type() == ResourceResponse::Type::Default || response.type() == ResourceResponse::Type::Error;
     bool isOpaque = response.tainting() == ResourceResponse::Tainting::Opaque;
     auto headers = isOpaque ? FetchHeaders::create(guard) : FetchHeaders::create(guard, HTTPHeaderMap { response.httpHeaderFields() });
 
     auto fetchResponse = adoptRef(*new FetchResponse(context, WTFMove(body), WTFMove(headers), WTFMove(response)));
+    fetchResponse->updateContentType();
     if (!isSynthetic)
         fetchResponse->m_filteredResponse = ResourceResponseBase::filter(fetchResponse->m_internalResponse);
     if (isOpaque)
         fetchResponse->setBodyAsOpaque();
     return fetchResponse;
@@ -304,10 +305,12 @@
         if (!m_response.m_readableStreamSource->isCancelling())
             m_response.m_readableStreamSource->error(*m_response.loadingException());
         m_response.m_readableStreamSource = nullptr;
     }
 #endif
+    if (m_response.m_body)
+        m_response.m_body->loadingFailed(*m_response.loadingException());
 
     // Check whether didFail is called as part of FetchLoader::start.
     if (m_loader && m_loader->isStarted()) {
         Ref<FetchResponse> protector(m_response);
         m_response.m_bodyLoader = nullptr;
@@ -531,16 +534,10 @@
 const char* FetchResponse::activeDOMObjectName() const
 {
     return "Response";
 }
 
-bool FetchResponse::canSuspendForDocumentSuspension() const
-{
-    // FIXME: We can probably do the same strategy as XHR.
-    return !isActive();
-}
-
 ResourceResponse FetchResponse::resourceResponse() const
 {
     auto response = m_internalResponse;
 
     if (headers().guard() != FetchHeaders::Guard::Immutable) {
