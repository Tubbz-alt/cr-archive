diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSFunctionInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSFunctionInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSFunctionInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSFunctionInlines.h
@@ -38,26 +38,25 @@
     return createImpl(vm, executable, scope, selectStructureForNewFuncExp(scope->globalObject(vm), executable));
 }
 
 inline JSFunction::JSFunction(VM& vm, FunctionExecutable* executable, JSScope* scope, Structure* structure)
     : Base(vm, scope, structure)
-    , m_executable(vm, this, executable)
-    , m_rareData()
+    , m_executableOrRareData(bitwise_cast<uintptr_t>(executable))
 {
     assertTypeInfoFlagInvariants();
 }
 
 inline FunctionExecutable* JSFunction::jsExecutable() const
 {
     ASSERT(!isHostFunctionNonInline());
-    return static_cast<FunctionExecutable*>(m_executable.get());
+    return static_cast<FunctionExecutable*>(executable());
 }
 
 inline bool JSFunction::isHostFunction() const
 {
-    ASSERT(m_executable);
-    return m_executable->isHostFunction();
+    ASSERT(executable());
+    return executable()->isHostFunction();
 }
 
 inline Intrinsic JSFunction::intrinsic() const
 {
     return executable()->intrinsic();
@@ -66,15 +65,10 @@
 inline bool JSFunction::isBuiltinFunction() const
 {
     return !isHostFunction() && jsExecutable()->isBuiltinFunction();
 }
 
-inline bool JSFunction::isAnonymousBuiltinFunction() const
-{
-    return !isHostFunction() && jsExecutable()->isAnonymousBuiltinFunction();
-}
-
 inline bool JSFunction::isHostOrBuiltinFunction() const
 {
     return isHostFunction() || isBuiltinFunction();
 }
 
@@ -84,17 +78,17 @@
 }
 
 inline TaggedNativeFunction JSFunction::nativeFunction()
 {
     ASSERT(isHostFunctionNonInline());
-    return static_cast<NativeExecutable*>(m_executable.get())->function();
+    return static_cast<NativeExecutable*>(executable())->function();
 }
 
 inline TaggedNativeFunction JSFunction::nativeConstructor()
 {
     ASSERT(isHostFunctionNonInline());
-    return static_cast<NativeExecutable*>(m_executable.get())->constructor();
+    return static_cast<NativeExecutable*>(executable())->constructor();
 }
 
 inline bool isHostFunction(JSValue value, TaggedNativeFunction nativeFunction)
 {
     JSFunction* function = jsCast<JSFunction*>(getJSFunction(value));
@@ -103,16 +97,32 @@
     return function->nativeFunction() == nativeFunction;
 }
 
 inline bool JSFunction::hasReifiedLength() const
 {
-    return m_rareData ? m_rareData->hasReifiedLength() : false;
+    if (FunctionRareData* rareData = this->rareData())
+        return rareData->hasReifiedLength();
+    return false;
 }
 
 inline bool JSFunction::hasReifiedName() const
 {
-    return m_rareData ? m_rareData->hasReifiedName() : false;
+    if (FunctionRareData* rareData = this->rareData())
+        return rareData->hasReifiedName();
+    return false;
+}
+
+inline bool JSFunction::areNameAndLengthOriginal(VM&)
+{
+    FunctionRareData* rareData = this->rareData();
+    if (!rareData)
+        return true;
+    if (rareData->hasModifiedName())
+        return false;
+    if (rareData->hasModifiedLength())
+        return false;
+    return true;
 }
 
 inline bool JSFunction::canUseAllocationProfile()
 {
     if (isHostOrBuiltinFunction()) {
@@ -131,16 +141,17 @@
     // as a getter. JS semantics require that the getter is called every
     // time |construct| occurs with this function as new.target.
     return jsExecutable()->hasPrototypeProperty();
 }
 
-inline FunctionRareData* JSFunction::ensureRareDataAndAllocationProfile(ExecState* exec, unsigned inlineCapacity)
+inline FunctionRareData* JSFunction::ensureRareDataAndAllocationProfile(JSGlobalObject* globalObject, unsigned inlineCapacity)
 {
     ASSERT(canUseAllocationProfile());
-    if (UNLIKELY(!m_rareData))
-        return allocateAndInitializeRareData(exec, inlineCapacity);
-    if (UNLIKELY(!m_rareData->isObjectAllocationProfileInitialized()))
-        return initializeRareData(exec, inlineCapacity);
-    return m_rareData.get();
+    FunctionRareData* rareData = this->rareData();
+    if (!rareData)
+        return allocateAndInitializeRareData(globalObject, inlineCapacity);
+    if (UNLIKELY(!rareData->isObjectAllocationProfileInitialized()))
+        return initializeRareData(globalObject, inlineCapacity);
+    return rareData;
 }
 
 } // namespace JSC
