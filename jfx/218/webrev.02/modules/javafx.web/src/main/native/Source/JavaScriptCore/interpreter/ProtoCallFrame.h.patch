diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/ProtoCallFrame.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/ProtoCallFrame.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/ProtoCallFrame.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/ProtoCallFrame.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2018 Apple Inc. All Rights Reserved.
+ * Copyright (C) 2013-2019 Apple Inc. All Rights Reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -43,18 +43,23 @@
     Register argCountAndCodeOriginValue;
     Register thisArg;
     uint32_t paddedArgCount;
     bool hasArityMismatch;
     JSValue *args;
+    JSGlobalObject* globalObject;
 
-    void init(CodeBlock*, JSObject*, JSValue, int, JSValue* otherArgs = 0);
+    inline void init(CodeBlock*, JSGlobalObject*, JSObject*, JSValue, int, JSValue* otherArgs = 0);
 
-    CodeBlock* codeBlock() const { return codeBlockValue.Register::codeBlock(); }
-    void setCodeBlock(CodeBlock* codeBlock) { codeBlockValue = codeBlock; }
+    inline CodeBlock* codeBlock() const;
+    inline void setCodeBlock(CodeBlock*);
 
-    JSObject* callee() const { return calleeValue.Register::object(); }
-    void setCallee(JSObject* callee) { calleeValue = callee; }
+    inline JSObject* callee() const;
+    inline void setCallee(JSObject*);
+    void setGlobalObject(JSGlobalObject* object)
+    {
+        globalObject = object;
+    }
 
     int argumentCountIncludingThis() const { return argCountAndCodeOriginValue.payload(); }
     int argumentCount() const { return argumentCountIncludingThis() - 1; }
     void setArgumentCountIncludingThis(int count) { argCountAndCodeOriginValue.payload() = count; }
     void setPaddedArgCount(uint32_t argCount) { paddedArgCount = argCount; }
@@ -76,24 +81,6 @@
         ASSERT(static_cast<int>(argumentIndex) < argumentCount());
         args[argumentIndex] = value;
     }
 };
 
-inline void ProtoCallFrame::init(CodeBlock* codeBlock, JSObject* callee, JSValue thisValue, int argCountIncludingThis, JSValue* otherArgs)
-{
-    this->args = otherArgs;
-    this->setCodeBlock(codeBlock);
-    this->setCallee(callee);
-    this->setArgumentCountIncludingThis(argCountIncludingThis);
-    if (codeBlock && argCountIncludingThis < codeBlock->numParameters())
-        this->hasArityMismatch = true;
-    else
-        this->hasArityMismatch = false;
-
-    // Round up argCountIncludingThis to keep the stack frame size aligned.
-    size_t paddedArgsCount = roundArgumentCountToAlignFrame(argCountIncludingThis);
-    this->setPaddedArgCount(paddedArgsCount);
-    this->clearCurrentVPC();
-    this->setThisValue(thisValue);
-}
-
 } // namespace JSC
