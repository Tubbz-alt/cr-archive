diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuilder.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuilder.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuilder.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/StringBuilder.h
@@ -140,22 +140,20 @@
 #endif
 #if USE(CF) && defined(__OBJC__)
     void append(NSString *string) { append((__bridge CFStringRef)string); }
 #endif
 
-    void appendSubstring(const String& string, unsigned offset, unsigned length)
+    void appendSubstring(const String& string, unsigned offset, unsigned length = String::MaxLength)
     {
-        if (!string.length())
-            return;
-
-        if ((offset + length) > string.length())
+        if (offset >= string.length())
             return;
 
+        unsigned clampedLength = std::min(length, string.length() - offset);
         if (string.is8Bit())
-            appendCharacters(string.characters8() + offset, length);
+            appendCharacters(string.characters8() + offset, clampedLength);
         else
-            appendCharacters(string.characters16() + offset, length);
+            appendCharacters(string.characters16() + offset, clampedLength);
     }
 
     void append(const char* characters)
     {
         if (characters)
@@ -228,15 +226,10 @@
     WTF_EXPORT_PRIVATE void appendNumber(long long);
     WTF_EXPORT_PRIVATE void appendNumber(unsigned long long);
     WTF_EXPORT_PRIVATE void appendNumber(float);
     WTF_EXPORT_PRIVATE void appendNumber(double);
 
-    WTF_EXPORT_PRIVATE void appendFixedPrecisionNumber(float, unsigned precision = 6, TrailingZerosTruncatingPolicy = TruncateTrailingZeros);
-    WTF_EXPORT_PRIVATE void appendFixedPrecisionNumber(double, unsigned precision = 6, TrailingZerosTruncatingPolicy = TruncateTrailingZeros);
-    WTF_EXPORT_PRIVATE void appendFixedWidthNumber(float, unsigned decimalPlaces);
-    WTF_EXPORT_PRIVATE void appendFixedWidthNumber(double, unsigned decimalPlaces);
-
     template<typename... StringTypes> void append(StringTypes...);
 
     String toString()
     {
         if (!m_string.isNull()) {
@@ -375,11 +368,11 @@
         UChar* m_bufferCharacters16;
     };
     static_assert(String::MaxLength == std::numeric_limits<int32_t>::max(), "");
     Checked<int32_t, ConditionalCrashOnOverflow> m_length;
     bool m_is8Bit { true };
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     mutable bool m_isReified { false };
 #endif
 };
 
 template<>
