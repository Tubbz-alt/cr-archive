diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScriptModuleLoader.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScriptModuleLoader.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScriptModuleLoader.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ScriptModuleLoader.h
@@ -26,20 +26,21 @@
 #pragma once
 
 #include "CachedModuleScriptLoader.h"
 #include "CachedModuleScriptLoaderClient.h"
 #include <JavaScriptCore/JSCJSValue.h>
+#include <wtf/HashSet.h>
 #include <wtf/Noncopyable.h>
-#include <wtf/URL.h>
 #include <wtf/URLHash.h>
 
 namespace JSC {
 
-class ExecState;
+class CallFrame;
 class JSGlobalObject;
 class JSInternalPromise;
 class JSModuleLoader;
+class JSModuleRecord;
 class SourceOrigin;
 
 }
 
 namespace WebCore {
@@ -53,19 +54,19 @@
     explicit ScriptModuleLoader(Document&);
     ~ScriptModuleLoader();
 
     Document& document() { return m_document; }
 
-    JSC::Identifier resolve(JSC::JSGlobalObject*, JSC::ExecState*, JSC::JSModuleLoader*, JSC::JSValue moduleName, JSC::JSValue importerModuleKey, JSC::JSValue scriptFetcher);
-    JSC::JSInternalPromise* fetch(JSC::JSGlobalObject*, JSC::ExecState*, JSC::JSModuleLoader*, JSC::JSValue moduleKey, JSC::JSValue parameters, JSC::JSValue scriptFetcher);
-    JSC::JSValue evaluate(JSC::JSGlobalObject*, JSC::ExecState*, JSC::JSModuleLoader*, JSC::JSValue moduleKey, JSC::JSValue moduleRecord, JSC::JSValue scriptFetcher);
-    JSC::JSInternalPromise* importModule(JSC::JSGlobalObject*, JSC::ExecState*, JSC::JSModuleLoader*, JSC::JSString*, JSC::JSValue parameters, const JSC::SourceOrigin&);
-    JSC::JSObject* createImportMetaProperties(JSC::JSGlobalObject*, JSC::ExecState*, JSC::JSModuleLoader*, JSC::JSValue, JSC::JSModuleRecord*, JSC::JSValue);
+    JSC::Identifier resolve(JSC::JSGlobalObject*, JSC::JSModuleLoader*, JSC::JSValue moduleName, JSC::JSValue importerModuleKey, JSC::JSValue scriptFetcher);
+    JSC::JSInternalPromise* fetch(JSC::JSGlobalObject*, JSC::JSModuleLoader*, JSC::JSValue moduleKey, JSC::JSValue parameters, JSC::JSValue scriptFetcher);
+    JSC::JSValue evaluate(JSC::JSGlobalObject*, JSC::JSModuleLoader*, JSC::JSValue moduleKey, JSC::JSValue moduleRecord, JSC::JSValue scriptFetcher);
+    JSC::JSInternalPromise* importModule(JSC::JSGlobalObject*, JSC::JSModuleLoader*, JSC::JSString*, JSC::JSValue parameters, const JSC::SourceOrigin&);
+    JSC::JSObject* createImportMetaProperties(JSC::JSGlobalObject*, JSC::JSModuleLoader*, JSC::JSValue, JSC::JSModuleRecord*, JSC::JSValue);
 
 private:
     void notifyFinished(CachedModuleScriptLoader&, RefPtr<DeferredPromise>) final;
-    URL moduleURL(JSC::ExecState&, JSC::JSValue);
+    URL moduleURL(JSC::JSGlobalObject&, JSC::JSValue);
 
     Document& m_document;
     HashMap<URL, URL> m_requestURLToResponseURLMap;
     HashSet<Ref<CachedModuleScriptLoader>> m_loaders;
 };
