diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/CustomElementReactionQueue.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/CustomElementReactionQueue.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/CustomElementReactionQueue.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/CustomElementReactionQueue.h
@@ -30,11 +30,12 @@
 #include <wtf/Noncopyable.h>
 #include <wtf/Vector.h>
 
 namespace JSC {
 
-class ExecState;
+class JSGlobalObject;
+class CallFrame;
 
 }
 
 namespace WebCore {
 
@@ -42,10 +43,27 @@
 class Document;
 class Element;
 class JSCustomElementInterface;
 class QualifiedName;
 
+// https://html.spec.whatwg.org/multipage/custom-elements.html#element-queue
+class CustomElementQueue {
+    WTF_MAKE_FAST_ALLOCATED;
+    WTF_MAKE_NONCOPYABLE(CustomElementQueue);
+public:
+    CustomElementQueue() = default;
+
+    void add(Element&);
+    void processQueue(JSC::JSGlobalObject*);
+
+private:
+    void invokeAll();
+
+    Vector<GCReachableRef<Element>> m_elements;
+    bool m_invoking { false };
+};
+
 class CustomElementReactionQueue {
     WTF_MAKE_FAST_ALLOCATED;
     WTF_MAKE_NONCOPYABLE(CustomElementReactionQueue);
 public:
     CustomElementReactionQueue(JSCustomElementInterface&);
@@ -61,56 +79,42 @@
 
     bool observesStyleAttribute() const;
     void invokeAll(Element&);
     void clear();
 
-    static void processBackupQueue();
-
-    class ElementQueue {
-    public:
-        void add(Element&);
-        void processQueue(JSC::ExecState*);
-
-    private:
-        void invokeAll();
-
-        Vector<GCReachableRef<Element>> m_elements;
-        bool m_invoking { false };
-    };
+    static void processBackupQueue(CustomElementQueue&);
 
 private:
     static void enqueueElementOnAppropriateElementQueue(Element&);
-    static ElementQueue& ensureBackupQueue();
-    static ElementQueue& backupElementQueue();
 
     Ref<JSCustomElementInterface> m_interface;
     Vector<CustomElementReactionQueueItem> m_items;
 };
 
 class CustomElementReactionDisallowedScope {
 public:
     CustomElementReactionDisallowedScope()
     {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         s_customElementReactionDisallowedCount++;
 #endif
     }
 
     ~CustomElementReactionDisallowedScope()
     {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         ASSERT(s_customElementReactionDisallowedCount);
         s_customElementReactionDisallowedCount--;
 #endif
     }
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     static bool isReactionAllowed() { return !s_customElementReactionDisallowedCount; }
 #endif
 
     class AllowedScope {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     public:
         AllowedScope()
             : m_originalCount(s_customElementReactionDisallowedCount)
         {
             s_customElementReactionDisallowedCount = 0;
@@ -121,31 +125,31 @@
             s_customElementReactionDisallowedCount = m_originalCount;
         }
 
     private:
         unsigned m_originalCount;
-#endif
+#endif // ASSERT_ENABLED
     };
 
 private:
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     WEBCORE_EXPORT static unsigned s_customElementReactionDisallowedCount;
 
     friend class AllowedScope;
 #endif
 };
 
 class CustomElementReactionStack : public CustomElementReactionDisallowedScope::AllowedScope {
 public:
-    ALWAYS_INLINE CustomElementReactionStack(JSC::ExecState* state)
+    ALWAYS_INLINE CustomElementReactionStack(JSC::JSGlobalObject* state)
         : m_previousProcessingStack(s_currentProcessingStack)
         , m_state(state)
     {
         s_currentProcessingStack = this;
     }
 
-    ALWAYS_INLINE CustomElementReactionStack(JSC::ExecState& state)
+    ALWAYS_INLINE CustomElementReactionStack(JSC::JSGlobalObject& state)
         : CustomElementReactionStack(&state)
     { }
 
     ALWAYS_INLINE ~CustomElementReactionStack()
     {
@@ -153,15 +157,15 @@
             processQueue(m_state);
         s_currentProcessingStack = m_previousProcessingStack;
     }
 
 private:
-    WEBCORE_EXPORT void processQueue(JSC::ExecState*);
+    WEBCORE_EXPORT void processQueue(JSC::JSGlobalObject*);
 
-    CustomElementReactionQueue::ElementQueue* m_queue { nullptr }; // Use raw pointer to avoid generating delete in the destructor.
+    CustomElementQueue* m_queue { nullptr }; // Use raw pointer to avoid generating delete in the destructor.
     CustomElementReactionStack* m_previousProcessingStack;
-    JSC::ExecState* m_state;
+    JSC::JSGlobalObject* m_state;
 
     WEBCORE_EXPORT static CustomElementReactionStack* s_currentProcessingStack;
 
     friend CustomElementReactionQueue;
 };
