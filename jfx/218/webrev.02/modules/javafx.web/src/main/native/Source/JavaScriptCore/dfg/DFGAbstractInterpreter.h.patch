diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractInterpreter.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractInterpreter.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractInterpreter.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGAbstractInterpreter.h
@@ -180,13 +180,13 @@
     {
         return filter(forNode(node), set, admittedTypes);
     }
 
     template<typename T>
-    FiltrationResult filterArrayModes(T node, ArrayModes arrayModes)
+    FiltrationResult filterArrayModes(T node, ArrayModes arrayModes, SpeculatedType admittedTypes = SpecNone)
     {
-        return filterArrayModes(forNode(node), arrayModes);
+        return filterArrayModes(forNode(node), arrayModes, admittedTypes);
     }
 
     template<typename T>
     FiltrationResult filter(T node, SpeculatedType type)
     {
@@ -204,33 +204,35 @@
     {
         return filterClassInfo(forNode(node), classInfo);
     }
 
     FiltrationResult filter(AbstractValue&, const RegisteredStructureSet&, SpeculatedType admittedTypes = SpecNone);
-    FiltrationResult filterArrayModes(AbstractValue&, ArrayModes);
+    FiltrationResult filterArrayModes(AbstractValue&, ArrayModes, SpeculatedType admittedTypes = SpecNone);
     FiltrationResult filter(AbstractValue&, SpeculatedType);
     FiltrationResult filterByValue(AbstractValue&, FrozenValue);
     FiltrationResult filterClassInfo(AbstractValue&, const ClassInfo*);
 
     PhiChildren* phiChildren() { return m_phiChildren.get(); }
 
     void filterICStatus(Node*);
 
-private:
     void clobberWorld();
     void didFoldClobberWorld();
+private:
 
     bool handleConstantBinaryBitwiseOp(Node*);
 
     template<typename Functor>
     void forAllValues(unsigned indexInBlock, Functor&);
 
     void clobberStructures();
     void didFoldClobberStructures();
 
     void observeTransition(unsigned indexInBlock, RegisteredStructure from, RegisteredStructure to);
+public:
     void observeTransitions(unsigned indexInBlock, const TransitionVector&);
+private:
 
     enum BooleanResult {
         UnknownBooleanResult,
         DefinitelyFalse,
         DefinitelyTrue
@@ -245,11 +247,11 @@
     }
 
     void setConstant(Node* node, FrozenValue value)
     {
         setBuiltInConstant(node, value);
-        m_state.setFoundConstants(true);
+        m_state.setShouldTryConstantFolding(true);
     }
 
     ALWAYS_INLINE void filterByType(Edge& edge, SpeculatedType type);
 
     void verifyEdge(Node*, Edge);
