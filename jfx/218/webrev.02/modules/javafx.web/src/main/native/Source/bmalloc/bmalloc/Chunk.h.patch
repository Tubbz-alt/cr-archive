diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Chunk.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Chunk.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Chunk.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/Chunk.h
@@ -36,10 +36,11 @@
 namespace bmalloc {
 
 class Chunk : public ListNode<Chunk> {
 public:
     static Chunk* get(void*);
+    static size_t metadataSize(size_t pageSize);
 
     Chunk(size_t pageSize);
 
     void ref() { ++m_refCount; }
     void deref() { BASSERT(m_refCount); --m_refCount; }
@@ -71,17 +72,20 @@
         return static_cast<unsigned>(
             reinterpret_cast<uintptr_t>(key) / chunkSize);
     }
 };
 
-template<typename Function> void forEachPage(Chunk* chunk, size_t pageSize, Function function)
+inline size_t Chunk::metadataSize(size_t pageSize)
 {
     // We align to at least the page size so we can service aligned allocations
     // at equal and smaller powers of two, and also so we can vmDeallocatePhysicalPages().
-    size_t metadataSize = roundUpToMultipleOfNonPowerOfTwo(pageSize, sizeof(Chunk));
+    return roundUpToMultipleOfNonPowerOfTwo(pageSize, sizeof(Chunk));
+}
 
-    Object begin(chunk, metadataSize);
+template<typename Function> void forEachPage(Chunk* chunk, size_t pageSize, Function function)
+{
+    Object begin(chunk, Chunk::metadataSize(pageSize));
     Object end(chunk, chunkSize);
 
     for (auto it = begin; it + pageSize <= end; it = it + pageSize)
         function(it.page());
 }
