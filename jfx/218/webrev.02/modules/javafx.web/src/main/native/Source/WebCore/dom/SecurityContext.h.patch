diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/SecurityContext.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/SecurityContext.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/SecurityContext.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/SecurityContext.h
@@ -75,10 +75,15 @@
     // Explicitly override the security origin for this security context.
     // Note: It is dangerous to change the security origin of a script context
     //       that already contains content.
     void setSecurityOriginPolicy(RefPtr<SecurityOriginPolicy>&&);
 
+    // Explicitly override the content security policy for this security context.
+    // Note: It is dangerous to change the content security policy of a script
+    //       context that already contains content.
+    void setContentSecurityPolicy(std::unique_ptr<ContentSecurityPolicy>&&);
+
     WEBCORE_EXPORT SecurityOrigin* securityOrigin() const;
 
     static SandboxFlags parseSandboxPolicy(const String& policy, String& invalidTokensErrorMessage);
     static bool isSupportedSandboxPolicy(StringView);
 
@@ -103,12 +108,10 @@
 
 protected:
     SecurityContext();
     virtual ~SecurityContext();
 
-    void setContentSecurityPolicy(std::unique_ptr<ContentSecurityPolicy>);
-
     // It's only appropriate to call this during security context initialization; it's needed for
     // flags that can't be disabled with allow-* attributes, such as SandboxNavigation.
     void disableSandboxFlags(SandboxFlags mask) { m_sandboxFlags &= ~mask; }
 
     void didFailToInitializeSecurityOrigin() { m_haveInitializedSecurityOrigin = false; }
