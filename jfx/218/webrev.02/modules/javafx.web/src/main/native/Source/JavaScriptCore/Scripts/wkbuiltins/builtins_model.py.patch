diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_model.py b/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_model.py
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_model.py
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/Scripts/wkbuiltins/builtins_model.py
@@ -42,10 +42,11 @@
     },
 }
 
 functionHeadRegExp = re.compile(r"(?:@[\w|=\[\] \"\.]+\s*\n)*(?:async\s+)?function\s+\w+\s*\(.*?\)", re.MULTILINE | re.DOTALL)
 functionGlobalPrivateRegExp = re.compile(r".*^@globalPrivate", re.MULTILINE | re.DOTALL)
+functionNakedConstructorRegExp = re.compile(r".*^@nakedConstructor", re.MULTILINE | re.DOTALL)
 functionIntrinsicRegExp = re.compile(r".*^@intrinsic=(\w+)", re.MULTILINE | re.DOTALL)
 functionIsConstructorRegExp = re.compile(r".*^@constructor", re.MULTILINE | re.DOTALL)
 functionIsGetterRegExp = re.compile(r".*^@getter", re.MULTILINE | re.DOTALL)
 functionIsAsyncRegExp = re.compile(r"(async)?\s*function", re.MULTILINE | re.DOTALL)
 functionNameRegExp = re.compile(r"function\s+(\w+)\s*\(", re.MULTILINE | re.DOTALL)
@@ -99,16 +100,17 @@
         for function in self.functions:
             function.object = self
 
 
 class BuiltinFunction:
-    def __init__(self, function_name, function_source, parameters, is_async, is_constructor, is_global_private, intrinsic, overridden_name):
+    def __init__(self, function_name, function_source, parameters, is_async, is_constructor, is_global_private, is_naked_constructor, intrinsic, overridden_name):
         self.function_name = function_name
         self.function_source = function_source
         self.parameters = parameters
         self.is_async = is_async
         self.is_constructor = is_constructor
+        self.is_naked_constructor = is_naked_constructor
         self.is_global_private = is_global_private
         self.intrinsic = intrinsic
         self.overridden_name = overridden_name
         self.object = None  # Set by the owning BuiltinObject
 
@@ -138,21 +140,24 @@
         async_match = functionIsAsyncRegExp.match(function_source)
         is_async = async_match != None and async_match.group(1) == "async"
         is_constructor = functionIsConstructorRegExp.match(function_source) != None
         is_getter = functionIsGetterRegExp.match(function_source) != None
         is_global_private = functionGlobalPrivateRegExp.match(function_source) != None
+        is_naked_constructor = functionNakedConstructorRegExp.match(function_source) != None
+        if is_naked_constructor:
+            is_constructor = True
         parameters = [s.strip() for s in functionParameterFinder.findall(function_source)[0].split(',')]
         if len(parameters[0]) == 0:
             parameters = []
 
         if is_getter and not overridden_name:
             overridden_name = "\"get %s\"" % (function_name)
 
         if not overridden_name:
             overridden_name = "static_cast<const char*>(nullptr)"
 
-        return BuiltinFunction(function_name, function_source, parameters, is_async, is_constructor, is_global_private, intrinsic, overridden_name)
+        return BuiltinFunction(function_name, function_source, parameters, is_async, is_constructor, is_global_private, is_naked_constructor, intrinsic, overridden_name)
 
     def __str__(self):
         interface = "%s(%s)" % (self.function_name, ', '.join(self.parameters))
         if self.is_constructor:
             interface = interface + " [Constructor]"
