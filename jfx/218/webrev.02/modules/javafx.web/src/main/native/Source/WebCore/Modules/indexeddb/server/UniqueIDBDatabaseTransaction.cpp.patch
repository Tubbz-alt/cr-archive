diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/UniqueIDBDatabaseTransaction.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/UniqueIDBDatabaseTransaction.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/UniqueIDBDatabaseTransaction.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/server/UniqueIDBDatabaseTransaction.cpp
@@ -26,11 +26,10 @@
 #include "config.h"
 #include "UniqueIDBDatabaseTransaction.h"
 
 #if ENABLE(INDEXED_DATABASE)
 
-#include "IDBError.h"
 #include "IDBIterateCursorData.h"
 #include "IDBResultData.h"
 #include "IDBServer.h"
 #include "Logging.h"
 #include "UniqueIDBDatabase.h"
@@ -42,30 +41,25 @@
 {
     return adoptRef(*new UniqueIDBDatabaseTransaction(connection, info));
 }
 
 UniqueIDBDatabaseTransaction::UniqueIDBDatabaseTransaction(UniqueIDBDatabaseConnection& connection, const IDBTransactionInfo& info)
-    : m_databaseConnection(connection)
+    : m_databaseConnection(&connection)
     , m_transactionInfo(info)
 {
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
     if (m_transactionInfo.mode() == IDBTransactionMode::Versionchange)
         m_originalDatabaseInfo = makeUnique<IDBDatabaseInfo>(database->info());
 
-    if (auto* server = m_databaseConnection->server())
-        server->registerTransaction(*this);
+    m_databaseConnection->server()->registerTransaction(*this);
 }
 
 UniqueIDBDatabaseTransaction::~UniqueIDBDatabaseTransaction()
 {
-    if (auto database = m_databaseConnection->database())
-        database->transactionDestroyed(*this);
-
-    if (auto* server = m_databaseConnection->server())
-        server->unregisterTransaction(*this);
+    m_databaseConnection->server()->unregisterTransaction(*this);
 }
 
 IDBDatabaseInfo* UniqueIDBDatabaseTransaction::originalDatabaseInfo() const
 {
     ASSERT(m_transactionInfo.mode() == IDBTransactionMode::Versionchange);
@@ -74,17 +68,16 @@
 
 void UniqueIDBDatabaseTransaction::abort()
 {
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::abort");
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->abortTransaction(*this, UniqueIDBDatabase::WaitForPendingTasks::Yes, [this, protectedThis](const IDBError& error) {
+    database->abortTransaction(*this, [this](auto& error) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::abort (callback)");
+
         m_databaseConnection->didAbortTransaction(*this, error);
     });
 }
 
 void UniqueIDBDatabaseTransaction::abortWithoutCallback()
@@ -106,18 +99,15 @@
 
 void UniqueIDBDatabaseTransaction::commit()
 {
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::commit");
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
-    if (!database || database->hardClosedForUserDelete())
-        return;
 
-    database->commitTransaction(*this, [this, protectedThis](const IDBError& error) {
+    database->commitTransaction(*this, [this](auto& error) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::commit (callback)");
+
         m_databaseConnection->didCommitTransaction(*this, error);
     });
 }
 
 void UniqueIDBDatabaseTransaction::createObjectStore(const IDBRequestData& requestData, const IDBObjectStoreInfo& info)
@@ -125,17 +115,16 @@
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::createObjectStore");
 
     ASSERT(isVersionChange());
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->createObjectStore(*this, info, [this, protectedThis, requestData](const IDBError& error) {
+    database->createObjectStore(*this, info, [this, requestData](auto& error) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::createObjectStore (callback)");
+
         if (error.isNull())
             m_databaseConnection->didCreateObjectStore(IDBResultData::createObjectStoreSuccess(requestData.requestIdentifier()));
         else
             m_databaseConnection->didCreateObjectStore(IDBResultData::error(requestData.requestIdentifier(), error));
     });
@@ -146,17 +135,16 @@
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::deleteObjectStore");
 
     ASSERT(isVersionChange());
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->deleteObjectStore(*this, objectStoreName, [this, protectedThis, requestData](const IDBError& error) {
+    database->deleteObjectStore(*this, objectStoreName, [this, requestData](const IDBError& error) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::deleteObjectStore (callback)");
+
         if (error.isNull())
             m_databaseConnection->didDeleteObjectStore(IDBResultData::deleteObjectStoreSuccess(requestData.requestIdentifier()));
         else
             m_databaseConnection->didDeleteObjectStore(IDBResultData::error(requestData.requestIdentifier(), error));
     });
@@ -167,17 +155,16 @@
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::renameObjectStore");
 
     ASSERT(isVersionChange());
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->renameObjectStore(*this, objectStoreIdentifier, newName, [this, protectedThis, requestData](const IDBError& error) {
+    database->renameObjectStore(*this, objectStoreIdentifier, newName, [this, requestData](auto& error) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::renameObjectStore (callback)");
+
         if (error.isNull())
             m_databaseConnection->didRenameObjectStore(IDBResultData::renameObjectStoreSuccess(requestData.requestIdentifier()));
         else
             m_databaseConnection->didRenameObjectStore(IDBResultData::error(requestData.requestIdentifier(), error));
     });
@@ -187,17 +174,16 @@
 {
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::clearObjectStore");
 
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->clearObjectStore(*this, objectStoreIdentifier, [this, protectedThis, requestData](const IDBError& error) {
+    database->clearObjectStore(*this, objectStoreIdentifier, [this, requestData](auto& error) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::clearObjectStore (callback)");
+
         if (error.isNull())
             m_databaseConnection->didClearObjectStore(IDBResultData::clearObjectStoreSuccess(requestData.requestIdentifier()));
         else
             m_databaseConnection->didClearObjectStore(IDBResultData::error(requestData.requestIdentifier(), error));
     });
@@ -208,17 +194,16 @@
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::createIndex");
 
     ASSERT(isVersionChange());
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->createIndex(*this, info, [this, protectedThis, requestData](const IDBError& error) {
+    database->createIndex(*this, info, [this, requestData](auto& error) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::createIndex (callback)");
+
         if (error.isNull())
             m_databaseConnection->didCreateIndex(IDBResultData::createIndexSuccess(requestData.requestIdentifier()));
         else
             m_databaseConnection->didCreateIndex(IDBResultData::error(requestData.requestIdentifier(), error));
     });
@@ -229,17 +214,16 @@
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::deleteIndex");
 
     ASSERT(isVersionChange());
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->deleteIndex(*this, objectStoreIdentifier, indexName, [this, protectedThis, requestData](const IDBError& error) {
+    database->deleteIndex(*this, objectStoreIdentifier, indexName, [this, requestData](auto& error) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::createIndex (callback)");
+
         if (error.isNull())
             m_databaseConnection->didDeleteIndex(IDBResultData::deleteIndexSuccess(requestData.requestIdentifier()));
         else
             m_databaseConnection->didDeleteIndex(IDBResultData::error(requestData.requestIdentifier(), error));
     });
@@ -250,17 +234,16 @@
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::renameIndex");
 
     ASSERT(isVersionChange());
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->renameIndex(*this, objectStoreIdentifier, indexIdentifier, newName, [this, protectedThis, requestData](const IDBError& error) {
+    database->renameIndex(*this, objectStoreIdentifier, indexIdentifier, newName, [this, requestData](auto& error) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::renameIndex (callback)");
+
         if (error.isNull())
             m_databaseConnection->didRenameIndex(IDBResultData::renameIndexSuccess(requestData.requestIdentifier()));
         else
             m_databaseConnection->didRenameIndex(IDBResultData::error(requestData.requestIdentifier(), error));
     });
@@ -272,16 +255,14 @@
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::putOrAdd");
 
     ASSERT(!isReadOnly());
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->putOrAdd(requestData, keyData, value, overwriteMode, [this, protectedThis, requestData](const IDBError& error, const IDBKeyData& key) {
+    database->putOrAdd(requestData, keyData, value, overwriteMode, [this, requestData](auto& error, const IDBKeyData& key) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::putOrAdd (callback)");
 
         if (error.isNull())
             m_databaseConnection->connectionToClient().didPutOrAdd(IDBResultData::putOrAddSuccess(requestData.requestIdentifier(), key));
         else
@@ -293,16 +274,14 @@
 {
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::getRecord");
 
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->getRecord(requestData, getRecordData, [this, protectedThis, requestData](const IDBError& error, const IDBGetResult& result) {
+    database->getRecord(requestData, getRecordData, [this, requestData](auto& error, const IDBGetResult& result) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::getRecord (callback)");
 
         if (error.isNull())
             m_databaseConnection->connectionToClient().didGetRecord(IDBResultData::getRecordSuccess(requestData.requestIdentifier(), result));
         else
@@ -314,16 +293,14 @@
 {
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::getAllRecords");
 
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->getAllRecords(requestData, getAllRecordsData, [this, protectedThis, requestData](const IDBError& error, const IDBGetAllResult& result) {
+    database->getAllRecords(requestData, getAllRecordsData, [this, requestData](auto& error, const IDBGetAllResult& result) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::getAllRecords (callback)");
 
         if (error.isNull())
             m_databaseConnection->connectionToClient().didGetAllRecords(IDBResultData::getAllRecordsSuccess(requestData.requestIdentifier(), result));
         else
@@ -335,16 +312,14 @@
 {
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::getCount");
 
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->getCount(requestData, keyRangeData, [this, protectedThis, requestData](const IDBError& error, uint64_t count) {
+    database->getCount(requestData, keyRangeData, [this, requestData](auto& error, uint64_t count) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::getCount (callback)");
 
         if (error.isNull())
             m_databaseConnection->connectionToClient().didGetCount(IDBResultData::getCountSuccess(requestData.requestIdentifier(), count));
         else
@@ -356,16 +331,14 @@
 {
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::deleteRecord");
 
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->deleteRecord(requestData, keyRangeData, [this, protectedThis, requestData](const IDBError& error) {
+    database->deleteRecord(requestData, keyRangeData, [this, requestData](auto& error) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::deleteRecord (callback)");
 
         if (error.isNull())
             m_databaseConnection->connectionToClient().didDeleteRecord(IDBResultData::deleteRecordSuccess(requestData.requestIdentifier()));
         else
@@ -377,16 +350,14 @@
 {
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::openCursor");
 
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->openCursor(requestData, info, [this, protectedThis, requestData](const IDBError& error, const IDBGetResult& result) {
+    database->openCursor(requestData, info, [this, requestData](auto& error, const IDBGetResult& result) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::openCursor (callback)");
 
         if (error.isNull())
             m_databaseConnection->connectionToClient().didOpenCursor(IDBResultData::openCursorSuccess(requestData.requestIdentifier(), result));
         else
@@ -398,18 +369,19 @@
 {
     LOG(IndexedDB, "UniqueIDBDatabaseTransaction::iterateCursor");
 
     ASSERT(m_transactionInfo.identifier() == requestData.transactionIdentifier());
 
-    RefPtr<UniqueIDBDatabaseTransaction> protectedThis(this);
-
     auto database = m_databaseConnection->database();
     ASSERT(database);
 
-    database->iterateCursor(requestData, data, [this, protectedThis, requestData](const IDBError& error, const IDBGetResult& result) {
+    database->iterateCursor(requestData, data, [this, requestData, option = data.option](auto& error, const IDBGetResult& result) {
         LOG(IndexedDB, "UniqueIDBDatabaseTransaction::iterateCursor (callback)");
 
+        if (option == IndexedDB::CursorIterateOption::DoNotReply)
+            return;
+
         if (error.isNull())
             m_databaseConnection->connectionToClient().didIterateCursor(IDBResultData::iterateCursorSuccess(requestData.requestIdentifier(), result));
         else
             m_databaseConnection->connectionToClient().didIterateCursor(IDBResultData::error(requestData.requestIdentifier(), error));
     });
