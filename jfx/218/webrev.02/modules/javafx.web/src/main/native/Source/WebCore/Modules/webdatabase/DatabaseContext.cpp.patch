diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseContext.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseContext.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseContext.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webdatabase/DatabaseContext.cpp
@@ -33,12 +33,12 @@
 #include "Database.h"
 #include "DatabaseManager.h"
 #include "DatabaseTask.h"
 #include "DatabaseThread.h"
 #include "Document.h"
+#include "LegacySchemeRegistry.h"
 #include "Page.h"
-#include "SchemeRegistry.h"
 #include "ScriptExecutionContext.h"
 #include "SecurityOrigin.h"
 #include "SecurityOriginData.h"
 
 namespace WebCore {
@@ -128,18 +128,10 @@
 void DatabaseContext::stop()
 {
     stopDatabases();
 }
 
-bool DatabaseContext::canSuspendForDocumentSuspension() const
-{
-    if (!hasOpenDatabases() || !m_databaseThread)
-        return true;
-
-    return !m_databaseThread->hasPendingDatabaseActivity();
-}
-
 DatabaseThread* DatabaseContext::databaseThread()
 {
     if (!m_databaseThread && !m_hasOpenDatabases) {
         // It's OK to ask for the m_databaseThread after we've requested
         // termination because we're still using it to execute the closing
@@ -187,11 +179,11 @@
 
 bool DatabaseContext::allowDatabaseAccess() const
 {
     if (is<Document>(*m_scriptExecutionContext)) {
         Document& document = downcast<Document>(*m_scriptExecutionContext);
-        if (!document.page() || (document.page()->usesEphemeralSession() && !SchemeRegistry::allowsDatabaseAccessInPrivateBrowsing(document.securityOrigin().protocol())))
+        if (!document.page() || (document.page()->usesEphemeralSession() && !LegacySchemeRegistry::allowsDatabaseAccessInPrivateBrowsing(document.securityOrigin().protocol())))
             return false;
         return true;
     }
     ASSERT(m_scriptExecutionContext->isWorkerGlobalScope());
     // allowDatabaseAccess is not yet implemented for workers.
