diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextStream.cpp b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextStream.cpp
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextStream.cpp
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextStream.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2004, 2008, 2010 Apple Inc. All rights reserved.
+ * Copyright (C) 2004-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -29,25 +29,31 @@
 #include <wtf/MathExtras.h>
 #include <wtf/text/WTFString.h>
 
 namespace WTF {
 
-static const size_t printBufferSize = 100; // large enough for any integer or floating point value in string format, including trailing null character
+static constexpr size_t printBufferSize = 100; // large enough for any integer or floating point value in string format, including trailing null character
 
 static inline bool hasFractions(double val)
 {
-    static const double s_epsilon = 0.0001;
+    static constexpr double s_epsilon = 0.0001;
     int ival = static_cast<int>(val);
     double dval = static_cast<double>(ival);
     return fabs(val - dval) > s_epsilon;
 }
 
 TextStream& TextStream::operator<<(bool b)
 {
     return *this << (b ? "1" : "0");
 }
 
+TextStream& TextStream::operator<<(char c)
+{
+    m_text.append(c);
+    return *this;
+}
+
 TextStream& TextStream::operator<<(int i)
 {
     m_text.appendNumber(i);
     return *this;
 }
@@ -85,20 +91,20 @@
 TextStream& TextStream::operator<<(float f)
 {
     if (m_formattingFlags & Formatting::NumberRespectingIntegers)
         return *this << FormatNumberRespectingIntegers(f);
 
-    m_text.appendFixedWidthNumber(f, 2);
+    m_text.append(FormattedNumber::fixedWidth(f, 2));
     return *this;
 }
 
 TextStream& TextStream::operator<<(double d)
 {
     if (m_formattingFlags & Formatting::NumberRespectingIntegers)
         return *this << FormatNumberRespectingIntegers(d);
 
-    m_text.appendFixedWidthNumber(d, 2);
+    m_text.append(FormattedNumber::fixedWidth(d, 2));
     return *this;
 }
 
 TextStream& TextStream::operator<<(const char* string)
 {
@@ -120,11 +126,11 @@
 }
 
 TextStream& TextStream::operator<<(const FormatNumberRespectingIntegers& numberToFormat)
 {
     if (hasFractions(numberToFormat.value)) {
-        m_text.appendFixedWidthNumber(numberToFormat.value, 2);
+        m_text.append(FormattedNumber::fixedWidth(numberToFormat.value, 2));
         return *this;
     }
 
     m_text.appendNumber(static_cast<int>(numberToFormat.value));
     return *this;
