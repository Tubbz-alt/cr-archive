diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimateElementBase.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimateElementBase.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimateElementBase.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGAnimateElementBase.cpp
@@ -73,11 +73,15 @@
     return m_hasInvalidCSSAttributeType.value();
 }
 
 bool SVGAnimateElementBase::isDiscreteAnimator() const
 {
-    return hasValidAttributeType() && animatorIfExists() && animatorIfExists()->isDiscrete();
+    if (!hasValidAttributeType())
+        return false;
+
+    auto* animator = this->animator();
+    return animator && animator->isDiscrete();
 }
 
 void SVGAnimateElementBase::setTargetElement(SVGElement* target)
 {
     SVGAnimationElement::setTargetElement(target);
@@ -140,20 +144,20 @@
         return true;
     }
     return false;
 }
 
-void SVGAnimateElementBase::resetAnimatedType()
+void SVGAnimateElementBase::startAnimation()
 {
     if (!targetElement())
         return;
 
     if (auto protectedAnimator = makeRefPtr(this->animator()))
         protectedAnimator->start(targetElement());
 }
 
-void SVGAnimateElementBase::calculateAnimatedValue(float progress, unsigned repeatCount, SVGSMILElement*)
+void SVGAnimateElementBase::calculateAnimatedValue(float progress, unsigned repeatCount)
 {
     if (!targetElement())
         return;
 
     ASSERT(progress >= 0 && progress <= 1);
@@ -174,11 +178,11 @@
 
     if (auto* animator = this->animator())
         animator->apply(targetElement());
 }
 
-void SVGAnimateElementBase::clearAnimatedType(SVGElement* targetElement)
+void SVGAnimateElementBase::stopAnimation(SVGElement* targetElement)
 {
     if (!targetElement)
         return;
 
     if (auto* animator = this->animatorIfExists())
