diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/SlowPathCall.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/SlowPathCall.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/SlowPathCall.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/SlowPathCall.h
@@ -47,29 +47,23 @@
 #if ENABLE(OPCODE_SAMPLING)
         if (m_jit->m_bytecodeOffset != std::numeric_limits<unsigned>::max())
             m_jit->sampleInstruction(&m_jit->m_codeBlock->instructions()[m_jit->m_bytecodeOffset], true);
 #endif
         m_jit->updateTopCallFrame();
-#if CPU(X86) && USE(JSVALUE32_64)
-        m_jit->addPtr(MacroAssembler::TrustedImm32(-8), MacroAssembler::stackPointerRegister);
-        m_jit->push(JIT::TrustedImm32(JIT::TrustedImmPtr(m_pc)));
-        m_jit->push(JIT::callFrameRegister);
-#elif CPU(X86_64) && OS(WINDOWS)
+#if CPU(X86_64) && OS(WINDOWS)
         m_jit->addPtr(MacroAssembler::TrustedImm32(-16), MacroAssembler::stackPointerRegister);
         m_jit->move(MacroAssembler::stackPointerRegister, JIT::argumentGPR0);
         m_jit->move(JIT::callFrameRegister, JIT::argumentGPR1);
         m_jit->move(JIT::TrustedImmPtr(m_pc), JIT::argumentGPR2);
 #else
         m_jit->move(JIT::callFrameRegister, JIT::argumentGPR0);
         m_jit->move(JIT::TrustedImmPtr(m_pc), JIT::argumentGPR1);
 #endif
         JIT::Call call = m_jit->call(OperationPtrTag);
-        m_jit->m_calls.append(CallRecord(call, m_jit->m_bytecodeOffset, FunctionPtr<OperationPtrTag>(m_slowPathFunction)));
+        m_jit->m_calls.append(CallRecord(call, m_jit->m_bytecodeIndex, FunctionPtr<OperationPtrTag>(m_slowPathFunction)));
 
-#if CPU(X86) && USE(JSVALUE32_64)
-        m_jit->addPtr(MacroAssembler::TrustedImm32(16), MacroAssembler::stackPointerRegister);
-#elif CPU(X86_64) && OS(WINDOWS)
+#if CPU(X86_64) && OS(WINDOWS)
         m_jit->pop(JIT::regT0); // vPC
         m_jit->pop(JIT::regT1); // callFrame register
 #endif
 
 #if ENABLE(OPCODE_SAMPLING)
