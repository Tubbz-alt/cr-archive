diff a/modules/javafx.web/src/main/native/Source/WebCore/style/StyleInvalidator.h b/modules/javafx.web/src/main/native/Source/WebCore/style/StyleInvalidator.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/style/StyleInvalidator.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/style/StyleInvalidator.h
@@ -24,46 +24,71 @@
  */
 
 #pragma once
 
 #include "RuleFeature.h"
+#include "RuleSet.h"
 #include <wtf/Forward.h>
+#include <wtf/HashMap.h>
 
 namespace WebCore {
 
 class Document;
 class Element;
 class MediaQueryEvaluator;
-class RuleSet;
+class Scope;
 class SelectorFilter;
 class ShadowRoot;
 class StyleSheetContents;
 
 namespace Style {
 
+struct InvalidationRuleSet;
+
 class Invalidator {
 public:
     Invalidator(const Vector<StyleSheetContents*>&, const MediaQueryEvaluator&);
-    Invalidator(const RuleSet&);
+    Invalidator(const InvalidationRuleSetVector&);
+
+    ~Invalidator();
 
     bool dirtiesAllStyle() const { return m_dirtiesAllStyle; }
-    bool hasShadowPseudoElementRulesInAuthorSheet() const { return m_hasShadowPseudoElementRulesInAuthorSheet; }
     void invalidateStyle(Document&);
+    void invalidateStyle(Scope&);
     void invalidateStyle(ShadowRoot&);
     void invalidateStyle(Element&);
-    void invalidateStyleWithMatchElement(Element&, MatchElement);
+
+    static void invalidateShadowParts(ShadowRoot&);
+
+    using MatchElementRuleSets = HashMap<MatchElement, InvalidationRuleSetVector, WTF::IntHash<MatchElement>, WTF::StrongEnumHashTraits<MatchElement>>;
+    static void addToMatchElementRuleSets(Invalidator::MatchElementRuleSets&, const InvalidationRuleSet&);
+    static void invalidateWithMatchElementRuleSets(Element&, const MatchElementRuleSets&);
+    static void invalidateAllStyle(Scope&);
+    static void invalidateHostAndSlottedStyleIfNeeded(ShadowRoot&);
 
 private:
     enum class CheckDescendants { Yes, No };
     CheckDescendants invalidateIfNeeded(Element&, const SelectorFilter*);
     void invalidateStyleForTree(Element&, SelectorFilter*);
     void invalidateStyleForDescendants(Element&, SelectorFilter*);
+    void invalidateInShadowTreeIfNeeded(Element&);
+    void invalidateStyleWithMatchElement(Element&, MatchElement);
+
+    struct RuleInformation {
+        bool hasSlottedPseudoElementRules { false };
+        bool hasHostPseudoClassRules { false };
+        bool hasShadowPseudoElementRules { false };
+        bool hasPartPseudoElementRules { false };
+    };
+    RuleInformation collectRuleInformation();
+
+    RefPtr<RuleSet> m_ownedRuleSet;
+    const InvalidationRuleSetVector m_ruleSets;
+
+    RuleInformation m_ruleInformation;
 
-    std::unique_ptr<RuleSet> m_ownedRuleSet;
-    const RuleSet& m_ruleSet;
     bool m_dirtiesAllStyle { false };
-    bool m_hasShadowPseudoElementRulesInAuthorSheet { false };
     bool m_didInvalidateHostChildren { false };
 };
 
 }
 }
