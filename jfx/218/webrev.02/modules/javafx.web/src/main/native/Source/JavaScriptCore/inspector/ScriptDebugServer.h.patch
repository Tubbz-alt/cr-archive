diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ScriptDebugServer.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ScriptDebugServer.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ScriptDebugServer.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ScriptDebugServer.h
@@ -36,11 +36,11 @@
 #include <wtf/HashMap.h>
 #include <wtf/HashSet.h>
 #include <wtf/text/WTFString.h>
 
 namespace JSC {
-class ExecState;
+class CallFrame;
 class JSGlobalObject;
 class VM;
 }
 
 namespace Inspector {
@@ -60,20 +60,20 @@
     void addListener(ScriptDebugListener*);
     void removeListener(ScriptDebugListener*, bool isBeingDestroyed);
 
 protected:
     ScriptDebugServer(JSC::VM&);
-    ~ScriptDebugServer();
+    ~ScriptDebugServer() override;
 
     virtual void attachDebugger() = 0;
     virtual void detachDebugger(bool isBeingDestroyed) = 0;
 
     virtual void didPause(JSC::JSGlobalObject*) = 0;
     virtual void didContinue(JSC::JSGlobalObject*) = 0;
     virtual void runEventLoopWhilePaused() = 0;
-    virtual bool isContentScript(JSC::ExecState*) const = 0;
-    virtual void reportException(JSC::ExecState*, JSC::Exception*) const = 0;
+    virtual bool isContentScript(JSC::JSGlobalObject*) const = 0;
+    virtual void reportException(JSC::JSGlobalObject*, JSC::Exception*) const = 0;
 
     bool evaluateBreakpointAction(const ScriptBreakpointAction&);
 
     bool canDispatchFunctionToListeners() const;
     void dispatchFunctionToListeners(Function<void(ScriptDebugListener&)> callback);
@@ -81,19 +81,19 @@
     bool m_doneProcessingDebuggerEvents { true };
 
 private:
     typedef HashMap<JSC::BreakpointID, BreakpointActions> BreakpointIDToActionsMap;
 
-    void sourceParsed(JSC::ExecState*, JSC::SourceProvider*, int errorLine, const String& errorMsg) final;
+    void sourceParsed(JSC::JSGlobalObject*, JSC::SourceProvider*, int errorLine, const String& errorMsg) final;
     void willRunMicrotask() final;
     void didRunMicrotask() final;
     void handleBreakpointHit(JSC::JSGlobalObject*, const JSC::Breakpoint&) final;
-    void handleExceptionInBreakpointCondition(JSC::ExecState*, JSC::Exception*) const final;
+    void handleExceptionInBreakpointCondition(JSC::JSGlobalObject*, JSC::Exception*) const final;
     void handlePause(JSC::JSGlobalObject*, JSC::Debugger::ReasonForPause) final;
     void notifyDoneProcessingDebuggerEvents() final;
 
-    JSC::JSValue exceptionOrCaughtValue(JSC::ExecState*);
+    JSC::JSValue exceptionOrCaughtValue(JSC::JSGlobalObject*);
 
     BreakpointIDToActionsMap m_breakpointIDToActions;
     HashSet<ScriptDebugListener*> m_listeners;
     bool m_callingListeners { false };
     unsigned m_nextProbeSampleId { 1 };
