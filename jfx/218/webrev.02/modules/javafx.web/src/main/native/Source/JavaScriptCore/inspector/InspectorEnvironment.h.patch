diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InspectorEnvironment.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InspectorEnvironment.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InspectorEnvironment.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/InspectorEnvironment.h
@@ -38,18 +38,18 @@
 }
 
 namespace Inspector {
 
 class ScriptDebugServer;
-typedef JSC::JSValue (*InspectorFunctionCallHandler)(JSC::ExecState* exec, JSC::JSValue functionObject, JSC::CallType callType, const JSC::CallData& callData, JSC::JSValue thisValue, const JSC::ArgList& args, NakedPtr<JSC::Exception>& returnedException);
-typedef JSC::JSValue (*InspectorEvaluateHandler)(JSC::ExecState*, const JSC::SourceCode&, JSC::JSValue thisValue, NakedPtr<JSC::Exception>& returnedException);
+typedef JSC::JSValue (*InspectorFunctionCallHandler)(JSC::JSGlobalObject* globalObject, JSC::JSValue functionObject, JSC::CallType callType, const JSC::CallData& callData, JSC::JSValue thisValue, const JSC::ArgList& args, NakedPtr<JSC::Exception>& returnedException);
+typedef JSC::JSValue (*InspectorEvaluateHandler)(JSC::JSGlobalObject*, const JSC::SourceCode&, JSC::JSValue thisValue, NakedPtr<JSC::Exception>& returnedException);
 
 class InspectorEnvironment {
 public:
     virtual ~InspectorEnvironment() { }
     virtual bool developerExtrasEnabled() const = 0;
-    virtual bool canAccessInspectedScriptState(JSC::ExecState*) const = 0;
+    virtual bool canAccessInspectedScriptState(JSC::JSGlobalObject*) const = 0;
     virtual InspectorFunctionCallHandler functionCallHandler() const = 0;
     virtual InspectorEvaluateHandler evaluateHandler() const = 0;
     virtual void frontendInitialized() = 0;
     virtual Ref<WTF::Stopwatch> executionStopwatch() = 0;
     virtual ScriptDebugServer& scriptDebugServer() = 0;
