diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/debugger/DebuggerCallFrame.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/debugger/DebuggerCallFrame.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/debugger/DebuggerCallFrame.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/debugger/DebuggerCallFrame.h
@@ -46,23 +46,23 @@
     enum Type { ProgramType, FunctionType };
 
     static Ref<DebuggerCallFrame> create(VM&, CallFrame*);
 
     JS_EXPORT_PRIVATE RefPtr<DebuggerCallFrame> callerFrame();
-    ExecState* globalExec();
+    JSGlobalObject* globalObject();
     JS_EXPORT_PRIVATE SourceID sourceID() const;
 
     // line and column are in base 0 e.g. the first line is line 0.
     int line() const { return m_position.m_line.zeroBasedInt(); }
     int column() const { return m_position.m_column.zeroBasedInt(); }
     JS_EXPORT_PRIVATE const TextPosition& position() const { return m_position; }
 
-    JS_EXPORT_PRIVATE JSGlobalObject* vmEntryGlobalObject() const;
+    JS_EXPORT_PRIVATE JSGlobalObject* deprecatedVMEntryGlobalObject() const;
     JS_EXPORT_PRIVATE DebuggerScope* scope();
     JS_EXPORT_PRIVATE String functionName() const;
     JS_EXPORT_PRIVATE Type type() const;
-    JS_EXPORT_PRIVATE JSValue thisValue() const;
+    JS_EXPORT_PRIVATE JSValue thisValue(VM&) const;
     JSValue evaluateWithScopeExtension(const String&, JSObject* scopeExtensionObject, NakedPtr<Exception>&);
 
     bool isValid() const { return !!m_validMachineFrame || isTailDeleted(); }
     JS_EXPORT_PRIVATE void invalidate();
 
