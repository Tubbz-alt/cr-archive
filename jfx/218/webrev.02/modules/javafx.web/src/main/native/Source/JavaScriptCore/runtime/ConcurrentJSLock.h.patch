diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ConcurrentJSLock.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ConcurrentJSLock.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ConcurrentJSLock.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ConcurrentJSLock.h
@@ -30,17 +30,12 @@
 #include <wtf/NoLock.h>
 #include <wtf/Optional.h>
 
 namespace JSC {
 
-#if ENABLE(CONCURRENT_JS)
-typedef Lock ConcurrentJSLock;
-typedef LockHolder ConcurrentJSLockerImpl;
-#else
-typedef NoLock ConcurrentJSLock;
-typedef NoLockLocker ConcurrentJSLockerImpl;
-#endif
+using ConcurrentJSLock = Lock;
+using ConcurrentJSLockerImpl = LockHolder;
 
 static_assert(sizeof(ConcurrentJSLock) == 1, "Regardless of status of concurrent JS flag, size of ConurrentJSLock is always one byte.");
 
 class ConcurrentJSLockerBase : public AbstractLocker {
     WTF_MAKE_NONCOPYABLE(ConcurrentJSLockerBase);
@@ -101,35 +96,35 @@
 
 class ConcurrentJSLocker : public ConcurrentJSLockerBase {
 public:
     ConcurrentJSLocker(ConcurrentJSLock& lockable)
         : ConcurrentJSLockerBase(lockable)
-#if ENABLE(CONCURRENT_JS) && !defined(NDEBUG)
+#if !defined(NDEBUG)
         , m_disallowGC(std::in_place)
 #endif
     {
     }
 
     ConcurrentJSLocker(ConcurrentJSLock* lockable)
         : ConcurrentJSLockerBase(lockable)
-#if ENABLE(CONCURRENT_JS) && !defined(NDEBUG)
+#if !defined(NDEBUG)
         , m_disallowGC(std::in_place)
 #endif
     {
     }
 
     ConcurrentJSLocker(NoLockingNecessaryTag)
         : ConcurrentJSLockerBase(NoLockingNecessary)
-#if ENABLE(CONCURRENT_JS) && !defined(NDEBUG)
+#if !defined(NDEBUG)
         , m_disallowGC(WTF::nullopt)
 #endif
     {
     }
 
     ConcurrentJSLocker(int) = delete;
 
-#if ENABLE(CONCURRENT_JS) && !defined(NDEBUG)
+#if !defined(NDEBUG)
 private:
     Optional<DisallowGC> m_disallowGC;
 #endif
 };
 
