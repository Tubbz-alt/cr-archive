diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArgumentsTable.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArgumentsTable.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArgumentsTable.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ScopedArgumentsTable.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -25,10 +25,11 @@
 
 #pragma once
 
 #include "JSCast.h"
 #include "ScopeOffset.h"
+#include "VM.h"
 #include <wtf/Assertions.h>
 #include <wtf/CagedUniquePtr.h>
 
 namespace JSC {
 
@@ -40,22 +41,28 @@
 // "delete arguments[i]" or some variant of defineOwnProperty.
 class ScopedArgumentsTable final : public JSCell {
     friend class CachedScopedArgumentsTable;
 
 public:
-    typedef JSCell Base;
-    static const unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
+    using Base = JSCell;
+    static constexpr unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;
+    static constexpr bool needsDestruction = true;
+
+    template<typename CellType, SubspaceAccess mode>
+    static IsoSubspace* subspaceFor(VM& vm)
+    {
+        return vm.scopedArgumentsTableSpace<mode>();
+    }
 
 private:
     ScopedArgumentsTable(VM&);
     ~ScopedArgumentsTable();
 
 public:
     static ScopedArgumentsTable* create(VM&);
     static ScopedArgumentsTable* create(VM&, uint32_t length);
 
-    static const bool needsDestruction = true;
     static void destroy(JSCell*);
 
     ScopedArgumentsTable* clone(VM&);
 
     uint32_t length() const { return m_length; }
