diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCustomGetterSetterFunction.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCustomGetterSetterFunction.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCustomGetterSetterFunction.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSCustomGetterSetterFunction.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2015-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2015-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -36,11 +36,11 @@
     typedef JSFunction Base;
 
     // The Type is set to the number of arguments the resultant function will have.
     enum class Type { Getter = 0, Setter = 1 };
 
-    static const unsigned StructureFlags = Base::StructureFlags;
+    static constexpr unsigned StructureFlags = Base::StructureFlags;
 
     template<typename CellType, SubspaceAccess mode>
     static IsoSubspace* subspaceFor(VM& vm)
     {
         return vm.customGetterSetterFunctionSpace<mode>();
@@ -58,14 +58,14 @@
 
 protected:
     static void visitChildren(JSCell*, SlotVisitor&);
 
 private:
-    JSCustomGetterSetterFunction(VM&, JSGlobalObject*, Structure*, Type, const PropertyName&);
+    JSCustomGetterSetterFunction(VM&, NativeExecutable*, JSGlobalObject*, Structure*, Type, const PropertyName&);
     void finishCreation(VM&, NativeExecutable*, CustomGetterSetter*, const String&);
 
-    static EncodedJSValue JSC_HOST_CALL customGetterSetterFunctionCall(ExecState*);
+    static EncodedJSValue JSC_HOST_CALL customGetterSetterFunctionCall(JSGlobalObject*, CallFrame*);
 
     CustomGetterSetter* customGetterSetter() const { return m_getterSetter.get(); }
     bool isSetter() const { return m_type == Type::Setter; }
     const PropertyName& propertyName() const { return m_propertyName; }
 
