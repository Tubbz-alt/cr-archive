diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontTaggedSettings.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontTaggedSettings.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontTaggedSettings.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/FontTaggedSettings.h
@@ -50,11 +50,11 @@
     static const bool emptyValueIsZero = true;
     static void constructDeletedValue(FontTag& slot) { new (NotNull, std::addressof(slot)) FontTag({{ ff, ff, ff, ff }}); }
     static bool isDeletedValue(const FontTag& value) { return value == FontTag({{ ff, ff, ff, ff }}); }
 
 private:
-    const static char ff = static_cast<char>(0xFF);
+    static constexpr char ff = static_cast<char>(0xFF);
 };
 
 template <typename T>
 class FontTaggedSetting {
 public:
@@ -68,10 +68,13 @@
 
     const FontTag& tag() const { return m_tag; }
     T value() const { return m_value; }
     bool enabled() const { return value(); }
 
+    template<class Encoder> void encode(Encoder&) const;
+    template<class Decoder> static Optional<FontTaggedSetting<T>> decode(Decoder&);
+
 private:
     FontTag m_tag;
     T m_value;
 };
 
@@ -99,10 +102,58 @@
 bool FontTaggedSetting<T>::operator<(const FontTaggedSetting<T>& other) const
 {
     return (m_tag < other.m_tag) || (m_tag == other.m_tag && m_value < other.m_value);
 }
 
+template <typename T>
+template <class Encoder>
+void FontTaggedSetting<T>::encode(Encoder& encoder) const
+{
+    encoder << static_cast<uint8_t>(m_tag[0]);
+    encoder << static_cast<uint8_t>(m_tag[1]);
+    encoder << static_cast<uint8_t>(m_tag[2]);
+    encoder << static_cast<uint8_t>(m_tag[3]);
+    encoder << m_value;
+}
+
+template <typename T>
+template <class Decoder>
+Optional<FontTaggedSetting<T>> FontTaggedSetting<T>::decode(Decoder& decoder)
+{
+    Optional<uint8_t> char0;
+    decoder >> char0;
+    if (!char0)
+        return WTF::nullopt;
+
+    Optional<uint8_t> char1;
+    decoder >> char1;
+    if (!char1)
+        return WTF::nullopt;
+
+    Optional<uint8_t> char2;
+    decoder >> char2;
+    if (!char2)
+        return WTF::nullopt;
+
+    Optional<uint8_t> char3;
+    decoder >> char3;
+    if (!char3)
+        return WTF::nullopt;
+
+    Optional<T> value;
+    decoder >> value;
+    if (!value)
+        return WTF::nullopt;
+
+    return FontTaggedSetting<T>({{
+        static_cast<char>(*char0),
+        static_cast<char>(*char1),
+        static_cast<char>(*char2),
+        static_cast<char>(*char3)
+    }}, *value);
+}
+
 template <typename T>
 class FontTaggedSettings {
 public:
     void insert(FontTaggedSetting<T>&&);
     bool operator==(const FontTaggedSettings<T>& other) const { return m_list == other.m_list; }
@@ -116,10 +167,13 @@
     typename Vector<FontTaggedSetting<T>>::const_iterator begin() const { return m_list.begin(); }
     typename Vector<FontTaggedSetting<T>>::const_iterator end() const { return m_list.end(); }
 
     unsigned hash() const;
 
+    template<class Encoder> void encode(Encoder&) const;
+    template<class Decoder> static Optional<FontTaggedSettings<T>> decode(Decoder&);
+
 private:
     Vector<FontTaggedSetting<T>> m_list;
 };
 
 template <typename T>
@@ -134,10 +188,31 @@
     if (i < m_list.size() && feature.tag() == m_list[i].tag())
         m_list.remove(i);
     m_list.insert(i, WTFMove(feature));
 }
 
+template <typename T>
+template <class Encoder>
+void FontTaggedSettings<T>::encode(Encoder& encoder) const
+{
+    encoder << m_list;
+}
+
+template <typename T>
+template <class Decoder>
+Optional<FontTaggedSettings<T>> FontTaggedSettings<T>::decode(Decoder& decoder)
+{
+    Optional<Vector<FontTaggedSetting<T>>> list;
+    decoder >> list;
+    if (!list)
+        return WTF::nullopt;
+
+    FontTaggedSettings result;
+    result.m_list = WTFMove(*list);
+    return result;
+}
+
 typedef FontTaggedSetting<int> FontFeature;
 typedef FontTaggedSettings<int> FontFeatureSettings;
 
 template <> unsigned FontFeatureSettings::hash() const;
 
