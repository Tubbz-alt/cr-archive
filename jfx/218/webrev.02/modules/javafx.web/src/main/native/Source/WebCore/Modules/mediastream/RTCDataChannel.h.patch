diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCDataChannel.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCDataChannel.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCDataChannel.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/RTCDataChannel.h
@@ -29,10 +29,11 @@
 
 #include "ActiveDOMObject.h"
 #include "Event.h"
 #include "EventTarget.h"
 #include "ExceptionOr.h"
+#include "NetworkSendQueue.h"
 #include "RTCDataChannelHandler.h"
 #include "RTCDataChannelHandlerClient.h"
 #include "ScriptWrappable.h"
 #include "Timer.h"
 
@@ -47,11 +48,11 @@
 class RTCPeerConnectionHandler;
 
 class RTCDataChannel final : public ActiveDOMObject, public RTCDataChannelHandlerClient, public EventTargetWithInlineData {
     WTF_MAKE_ISO_ALLOCATED(RTCDataChannel);
 public:
-    static Ref<RTCDataChannel> create(ScriptExecutionContext&, std::unique_ptr<RTCDataChannelHandler>&&, String&&, RTCDataChannelInit&&);
+    static Ref<RTCDataChannel> create(Document&, std::unique_ptr<RTCDataChannelHandler>&&, String&&, RTCDataChannelInit&&);
 
     bool ordered() const { return *m_options.ordered; }
     Optional<unsigned short> maxPacketLifeTime() const { return m_options.maxPacketLifeTime; }
     Optional<unsigned short> maxRetransmits() const { return m_options.maxRetransmits; }
     String protocol() const { return m_options.protocol; }
@@ -76,27 +77,25 @@
 
     using RTCDataChannelHandlerClient::ref;
     using RTCDataChannelHandlerClient::deref;
 
 private:
-    RTCDataChannel(ScriptExecutionContext&, std::unique_ptr<RTCDataChannelHandler>&&, String&&, RTCDataChannelInit&&);
+    RTCDataChannel(Document&, std::unique_ptr<RTCDataChannelHandler>&&, String&&, RTCDataChannelInit&&);
+
+    static NetworkSendQueue createMessageQueue(Document&, RTCDataChannel&);
 
     void scheduleDispatchEvent(Ref<Event>&&);
-    void scheduledEventTimerFired();
 
     EventTargetInterface eventTargetInterface() const final { return RTCDataChannelEventTargetInterfaceType; }
     ScriptExecutionContext* scriptExecutionContext() const final { return m_scriptExecutionContext; }
 
     void refEventTarget() final { ref(); }
     void derefEventTarget() final { deref(); }
 
-    ExceptionOr<void> sendRawData(const char* data, size_t length);
-
     // ActiveDOMObject API
     void stop() final;
     const char* activeDOMObjectName() const final { return "RTCDataChannel"; }
-    bool canSuspendForDocumentSuspension() const final { return m_readyState == RTCDataChannelState::Closed; }
 
     // RTCDataChannelHandlerClient API
     void didChangeReadyState(RTCDataChannelState) final;
     void didReceiveStringData(const String&) final;
     void didReceiveRawData(const char*, size_t) final;
@@ -110,16 +109,15 @@
     RTCDataChannelState m_readyState { RTCDataChannelState::Connecting };
 
     enum class BinaryType { Blob, ArrayBuffer };
     BinaryType m_binaryType { BinaryType::ArrayBuffer };
 
-    Timer m_scheduledEventTimer;
-    Vector<Ref<Event>> m_scheduledEvents;
-
     String m_label;
     RTCDataChannelInit m_options;
     size_t m_bufferedAmountLowThreshold { 0 };
+
+    NetworkSendQueue m_messageQueue;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(WEB_RTC)
