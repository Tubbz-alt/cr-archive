diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ConsoleMessage.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ConsoleMessage.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ConsoleMessage.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/ConsoleMessage.h
@@ -29,18 +29,20 @@
  */
 
 #pragma once
 
 #include "ConsoleTypes.h"
+#include "Strong.h"
 #include <wtf/FastMalloc.h>
 #include <wtf/Forward.h>
 #include <wtf/Logger.h>
 #include <wtf/Noncopyable.h>
 #include <wtf/text/WTFString.h>
 
 namespace JSC {
-class ExecState;
+class CallFrame;
+class JSGlobalObject;
 }
 
 namespace Inspector {
 
 class ConsoleFrontendDispatcher;
@@ -51,15 +53,15 @@
 class JS_EXPORT_PRIVATE ConsoleMessage {
     WTF_MAKE_NONCOPYABLE(ConsoleMessage);
     WTF_MAKE_FAST_ALLOCATED;
 public:
     ConsoleMessage(MessageSource, MessageType, MessageLevel, const String& message, unsigned long requestIdentifier = 0);
-    ConsoleMessage(MessageSource, MessageType, MessageLevel, const String& message, const String& url, unsigned line, unsigned column, JSC::ExecState* = nullptr, unsigned long requestIdentifier = 0);
+    ConsoleMessage(MessageSource, MessageType, MessageLevel, const String& message, const String& url, unsigned line, unsigned column, JSC::JSGlobalObject* = nullptr, unsigned long requestIdentifier = 0);
     ConsoleMessage(MessageSource, MessageType, MessageLevel, const String& message, Ref<ScriptCallStack>&&, unsigned long requestIdentifier = 0);
     ConsoleMessage(MessageSource, MessageType, MessageLevel, const String& message, Ref<ScriptArguments>&&, Ref<ScriptCallStack>&&, unsigned long requestIdentifier = 0);
-    ConsoleMessage(MessageSource, MessageType, MessageLevel, const String& message, Ref<ScriptArguments>&&, JSC::ExecState* = nullptr, unsigned long requestIdentifier = 0);
-    ConsoleMessage(MessageSource, MessageType, MessageLevel, Vector<JSONLogValue>&&, JSC::ExecState*, unsigned long requestIdentifier = 0);
+    ConsoleMessage(MessageSource, MessageType, MessageLevel, const String& message, Ref<ScriptArguments>&&, JSC::JSGlobalObject* = nullptr, unsigned long requestIdentifier = 0);
+    ConsoleMessage(MessageSource, MessageType, MessageLevel, Vector<JSONLogValue>&&, JSC::JSGlobalObject*, unsigned long requestIdentifier = 0);
     ~ConsoleMessage();
 
     void addToFrontend(ConsoleFrontendDispatcher&, InjectedScriptManager&, bool generatePreview);
     void updateRepeatCountInConsole(ConsoleFrontendDispatcher&);
 
@@ -69,11 +71,11 @@
     const String& message() const { return m_message; }
     const String& url() const { return m_url; }
     unsigned line() const { return m_line; }
     unsigned column() const { return m_column; }
 
-    JSC::ExecState* scriptState() const;
+    JSC::JSGlobalObject* globalObject() const;
 
     void incrementCount() { ++m_repeatCount; }
 
     const RefPtr<ScriptArguments>& arguments() const { return m_arguments; }
     unsigned argumentCount() const;
@@ -81,21 +83,21 @@
     bool isEqual(ConsoleMessage* msg) const;
 
     void clear();
 
 private:
-    void autogenerateMetadata(JSC::ExecState* = nullptr);
+    void autogenerateMetadata(JSC::JSGlobalObject* = nullptr);
 
     MessageSource m_source;
     MessageType m_type;
     MessageLevel m_level;
     String m_message;
     RefPtr<ScriptArguments> m_arguments;
     RefPtr<ScriptCallStack> m_callStack;
     Vector<JSONLogValue> m_jsonLogValues;
     String m_url;
-    JSC::ExecState* m_scriptState { nullptr };
+    JSC::Strong<JSC::JSGlobalObject> m_globalObject;
     unsigned m_line { 0 };
     unsigned m_column { 0 };
     unsigned m_repeatCount { 1 };
     String m_requestId;
 };
