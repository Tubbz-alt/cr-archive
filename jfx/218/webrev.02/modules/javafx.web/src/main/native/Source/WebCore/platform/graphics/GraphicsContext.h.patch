diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsContext.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsContext.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsContext.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsContext.h
@@ -33,12 +33,14 @@
 #include "GraphicsTypes.h"
 #include "Image.h"
 #include "ImageOrientation.h"
 #include "ImagePaintingOptions.h"
 #include "Pattern.h"
+#include "RenderingMode.h"
 #include <wtf/Function.h>
 #include <wtf/Noncopyable.h>
+#include <wtf/OptionSet.h>
 
 #if USE(CG)
 typedef struct CGContext PlatformGraphicsContext;
 #elif USE(DIRECT2D)
 interface ID2D1DCRenderTarget;
@@ -94,11 +96,11 @@
 class GraphicsContextImpl;
 class GraphicsContextPlatformPrivate;
 class ImageBuffer;
 class IntRect;
 class RoundedRect;
-class GraphicsContext3D;
+class GraphicsContextGLOpenGL;
 class Path;
 class TextRun;
 class TransformationMatrix;
 
 enum TextDrawingMode {
@@ -126,12 +128,38 @@
         Grammar,
         AutocorrectionReplacement,
         DictationAlternatives
     } mode;
     bool shouldUseDarkAppearance { false };
+
+    template<class Encoder> void encode(Encoder&) const;
+    template<class Decoder> static Optional<DocumentMarkerLineStyle> decode(Decoder&);
 };
 
+template<class Encoder>
+void DocumentMarkerLineStyle::encode(Encoder& encoder) const
+{
+    encoder << mode;
+    encoder << shouldUseDarkAppearance;
+}
+
+template<class Decoder>
+Optional<DocumentMarkerLineStyle> DocumentMarkerLineStyle::decode(Decoder& decoder)
+{
+    Optional<Mode> mode;
+    decoder >> mode;
+    if (!mode)
+        return WTF::nullopt;
+
+    Optional<bool> shouldUseDarkAppearance;
+    decoder >> shouldUseDarkAppearance;
+    if (!shouldUseDarkAppearance)
+        return WTF::nullopt;
+
+    return {{ *mode, *shouldUseDarkAppearance }};
+}
+
 namespace DisplayList {
 class Recorder;
 }
 
 struct GraphicsContextState {
@@ -151,37 +179,35 @@
         , drawLuminanceMask(false)
     {
     }
 
     enum Change : uint32_t {
-        NoChange                                = 0,
         StrokeGradientChange                    = 1 << 1,
         StrokePatternChange                     = 1 << 2,
         FillGradientChange                      = 1 << 3,
         FillPatternChange                       = 1 << 4,
         StrokeThicknessChange                   = 1 << 5,
         StrokeColorChange                       = 1 << 6,
         StrokeStyleChange                       = 1 << 7,
         FillColorChange                         = 1 << 8,
         FillRuleChange                          = 1 << 9,
         ShadowChange                            = 1 << 10,
-        ShadowColorChange                       = 1 << 11,
-        ShadowsIgnoreTransformsChange           = 1 << 12,
-        AlphaChange                             = 1 << 13,
-        CompositeOperationChange                = 1 << 14,
-        BlendModeChange                         = 1 << 15,
-        TextDrawingModeChange                   = 1 << 16,
-        ShouldAntialiasChange                   = 1 << 17,
-        ShouldSmoothFontsChange                 = 1 << 18,
-        ShouldSubpixelQuantizeFontsChange       = 1 << 19,
-        DrawLuminanceMaskChange                 = 1 << 20,
-        ImageInterpolationQualityChange         = 1 << 21,
+        ShadowsIgnoreTransformsChange           = 1 << 11,
+        AlphaChange                             = 1 << 12,
+        CompositeOperationChange                = 1 << 13,
+        BlendModeChange                         = 1 << 14,
+        TextDrawingModeChange                   = 1 << 15,
+        ShouldAntialiasChange                   = 1 << 16,
+        ShouldSmoothFontsChange                 = 1 << 17,
+        ShouldSubpixelQuantizeFontsChange       = 1 << 18,
+        DrawLuminanceMaskChange                 = 1 << 19,
+        ImageInterpolationQualityChange         = 1 << 20,
 #if HAVE(OS_DARK_MODE_SUPPORT)
-        UseDarkAppearanceChange                 = 1 << 22,
+        UseDarkAppearanceChange                 = 1 << 21,
 #endif
     };
-    typedef uint32_t StateChangeFlags;
+    typedef OptionSet<Change> StateChangeFlags;
 
     RefPtr<Gradient> strokeGradient;
     RefPtr<Pattern> strokePattern;
 
     RefPtr<Gradient> fillGradient;
@@ -200,13 +226,13 @@
 
     StrokeStyle strokeStyle { SolidStroke };
     WindRule fillRule { WindRule::NonZero };
 
     float alpha { 1 };
-    CompositeOperator compositeOperator { CompositeSourceOver };
+    CompositeOperator compositeOperator { CompositeOperator::SourceOver };
     BlendMode blendMode { BlendMode::Normal };
-    InterpolationQuality imageInterpolationQuality { InterpolationDefault };
+    InterpolationQuality imageInterpolationQuality { InterpolationQuality::Default };
 
     bool shouldAntialias : 1;
     bool shouldSmoothFonts : 1;
     bool shouldSubpixelQuantizeFonts : 1;
     bool shadowsIgnoreTransforms : 1;
@@ -237,11 +263,11 @@
     void apply(GraphicsContext&) const;
 
     void dump(WTF::TextStream&) const;
 
     GraphicsContextState m_state;
-    GraphicsContextState::StateChangeFlags m_changeFlags { GraphicsContextState::NoChange };
+    GraphicsContextState::StateChangeFlags m_changeFlags;
 };
 
 WTF::TextStream& operator<<(WTF::TextStream&, const GraphicsContextStateChange&);
 
 
@@ -335,11 +361,11 @@
     bool isCALayerContext() const;
 
     WEBCORE_EXPORT void setIsAcceleratedContext(bool);
 #endif
     bool isAcceleratedContext() const;
-    RenderingMode renderingMode() const { return isAcceleratedContext() ? Accelerated : Unaccelerated; }
+    RenderingMode renderingMode() const { return isAcceleratedContext() ? RenderingMode::Accelerated : RenderingMode::Unaccelerated; }
 
     WEBCORE_EXPORT void save();
     WEBCORE_EXPORT void restore();
 
     unsigned stackSize() const { return m_stack.size(); }
@@ -369,13 +395,13 @@
 
     WEBCORE_EXPORT void clearRect(const FloatRect&);
 
     WEBCORE_EXPORT void strokeRect(const FloatRect&, float lineWidth);
 
-    WEBCORE_EXPORT ImageDrawResult drawImage(Image&, const FloatPoint& destination, const ImagePaintingOptions& = { });
-    WEBCORE_EXPORT ImageDrawResult drawImage(Image&, const FloatRect& destination, const ImagePaintingOptions& = { });
-    ImageDrawResult drawImage(Image&, const FloatRect& destination, const FloatRect& source, const ImagePaintingOptions& = { });
+    WEBCORE_EXPORT ImageDrawResult drawImage(Image&, const FloatPoint& destination, const ImagePaintingOptions& = { ImageOrientation::FromImage });
+    WEBCORE_EXPORT ImageDrawResult drawImage(Image&, const FloatRect& destination, const ImagePaintingOptions& = { ImageOrientation::FromImage });
+    ImageDrawResult drawImage(Image&, const FloatRect& destination, const FloatRect& source, const ImagePaintingOptions& = { ImageOrientation::FromImage });
 
     ImageDrawResult drawTiledImage(Image&, const FloatRect& destination, const FloatPoint& source, const FloatSize& tileSize, const FloatSize& spacing, const ImagePaintingOptions& = { });
     ImageDrawResult drawTiledImage(Image&, const FloatRect& destination, const FloatRect& source, const FloatSize& tileScaleFactor, Image::TileRule, Image::TileRule, const ImagePaintingOptions& = { });
 
     WEBCORE_EXPORT void drawImageBuffer(ImageBuffer&, const FloatPoint& destination, const ImagePaintingOptions& = { });
@@ -412,11 +438,11 @@
     float drawText(const FontCascade&, const TextRun&, const FloatPoint&, unsigned from = 0, Optional<unsigned> to = WTF::nullopt);
     void drawGlyphs(const Font&, const GlyphBuffer&, unsigned from, unsigned numGlyphs, const FloatPoint&, FontSmoothingMode);
     void drawEmphasisMarks(const FontCascade&, const TextRun&, const AtomString& mark, const FloatPoint&, unsigned from = 0, Optional<unsigned> to = WTF::nullopt);
     void drawBidiText(const FontCascade&, const TextRun&, const FloatPoint&, FontCascade::CustomFontNotReadyAction = FontCascade::DoNotPaintIfFontNotReady);
 
-    void applyState(const GraphicsContextState&);
+    void builderState(const GraphicsContextState&);
 
     enum RoundingMode {
         RoundAllSides,
         RoundOriginAndDimensions
     };
@@ -488,11 +514,11 @@
 
     void concatCTM(const AffineTransform&);
     void setCTM(const AffineTransform&);
 
     enum IncludeDeviceScale { DefinitelyIncludeDeviceScale, PossiblyIncludeDeviceScale };
-    AffineTransform getCTM(IncludeDeviceScale includeScale = PossiblyIncludeDeviceScale) const;
+    WEBCORE_EXPORT AffineTransform getCTM(IncludeDeviceScale includeScale = PossiblyIncludeDeviceScale) const;
 
     // This function applies the device scale factor to the context, making the context capable of
     // acting as a base-level context for a HiDPI environment.
     WEBCORE_EXPORT void applyDeviceScaleFactor(float);
     void platformApplyDeviceScaleFactor(float);
@@ -694,11 +720,11 @@
     { }
 
     ~GraphicsContextStateStackChecker()
     {
         if (m_context.stackSize() != m_stackSize)
-            WTFLogAlways("GraphicsContext %p stack changed by %d", this, (int)m_context.stackSize() - (int)m_stackSize);
+            WTFLogAlways("GraphicsContext %p stack changed by %d", &m_context, (int)m_context.stackSize() - (int)m_stackSize);
     }
 
 private:
     GraphicsContext& m_context;
     unsigned m_stackSize;
@@ -709,11 +735,11 @@
 class InterpolationQualityMaintainer {
 public:
     explicit InterpolationQualityMaintainer(GraphicsContext& graphicsContext, InterpolationQuality interpolationQualityToUse)
         : m_graphicsContext(graphicsContext)
         , m_currentInterpolationQuality(graphicsContext.imageInterpolationQuality())
-        , m_interpolationQualityChanged(interpolationQualityToUse != InterpolationDefault && m_currentInterpolationQuality != interpolationQualityToUse)
+        , m_interpolationQualityChanged(interpolationQualityToUse != InterpolationQuality::Default && m_currentInterpolationQuality != interpolationQualityToUse)
     {
         if (m_interpolationQualityChanged)
             m_graphicsContext.setImageInterpolationQuality(interpolationQualityToUse);
     }
 
@@ -733,5 +759,20 @@
     InterpolationQuality m_currentInterpolationQuality;
     bool m_interpolationQualityChanged;
 };
 
 } // namespace WebCore
+
+namespace WTF {
+
+template<> struct EnumTraits<WebCore::DocumentMarkerLineStyle::Mode> {
+    using values = EnumValues<
+    WebCore::DocumentMarkerLineStyle::Mode,
+    WebCore::DocumentMarkerLineStyle::Mode::TextCheckingDictationPhraseWithAlternatives,
+    WebCore::DocumentMarkerLineStyle::Mode::Spelling,
+    WebCore::DocumentMarkerLineStyle::Mode::Grammar,
+    WebCore::DocumentMarkerLineStyle::Mode::AutocorrectionReplacement,
+    WebCore::DocumentMarkerLineStyle::Mode::DictationAlternatives
+    >;
+};
+
+} // namespace WTF
