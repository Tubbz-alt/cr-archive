diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLNativeTypeDeclaration.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLNativeTypeDeclaration.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLNativeTypeDeclaration.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webgpu/WHLSL/AST/WHLSLNativeTypeDeclaration.h
@@ -65,10 +65,11 @@
     bool isOpaqueType() const { return m_isOpaqueType; }
     bool isTexture() const { return m_isTexture; }
     bool isTextureArray() const { return m_isTextureArray; }
     bool isDepthTexture() const { return m_isDepthTexture; }
     bool isWritableTexture() const { return m_isWritableTexture; }
+    bool isCubeTexture() const { return m_isCubeTexture; }
     uint textureDimension() const { return m_textureDimension; }
     bool isSigned() const { return m_isSigned; }
     const std::function<bool(int)>& canRepresentInteger() const { return m_canRepresentInteger; }
     const std::function<bool(unsigned)>& canRepresentUnsignedInteger() const { return m_canRepresentUnsignedInteger; }
     const std::function<bool(float)>& canRepresentFloat() const { return m_canRepresentFloat; }
@@ -84,15 +85,33 @@
         return WTF::get<AST::ConstantExpression>(typeArguments()[typeArgumentIndex]).integerLiteral().value();
     }
 public:
     unsigned numberOfMatrixRows()
     {
-        return matrixDimension(1);
+        return matrixDimension(2);
     }
     unsigned numberOfMatrixColumns()
     {
-        return matrixDimension(2);
+        return matrixDimension(1);
+    }
+
+    TypeReference& vectorTypeArgument()
+    {
+        ASSERT(isVector());
+        return WTF::get<Ref<AST::TypeReference>>(typeArguments()[0]);
+    }
+
+    unsigned vectorSize()
+    {
+        ASSERT(isVector());
+        return WTF::get<AST::ConstantExpression>(typeArguments()[1]).integerLiteral().value();
+    }
+
+    TypeReference& matrixTypeArgument()
+    {
+        ASSERT(isMatrix());
+        return WTF::get<Ref<AST::TypeReference>>(typeArguments()[0]);
     }
 
     void setIsInt() { m_isInt = true; }
     void setIsNumber() { m_isNumber = true; }
     void setIsFloating() { m_isFloating = true; }
@@ -102,10 +121,11 @@
     void setIsOpaqueType() { m_isOpaqueType = true; }
     void setIsTexture() { m_isTexture = true; }
     void setIsTextureArray() { m_isTextureArray = true; }
     void setIsDepthTexture() { m_isDepthTexture = true; }
     void setIsWritableTexture() { m_isWritableTexture = true; }
+    void setIsCubeTexture() { m_isCubeTexture = true; }
     void setTextureDimension(uint textureDimension) { m_textureDimension = textureDimension; }
     void setIsSigned() { m_isSigned = true; }
     void setCanRepresentInteger(std::function<bool(int)>&& canRepresent) { m_canRepresentInteger = WTFMove(canRepresent); }
     void setCanRepresentUnsignedInteger(std::function<bool(unsigned)>&& canRepresent) { m_canRepresentUnsignedInteger = WTFMove(canRepresent); }
     void setCanRepresentFloat(std::function<bool(float)>&& canRepresent) { m_canRepresentFloat = WTFMove(canRepresent); }
@@ -133,10 +153,11 @@
     bool m_isOpaqueType { false };
     bool m_isTexture { false };
     bool m_isTextureArray { false };
     bool m_isDepthTexture { false };
     bool m_isWritableTexture { false };
+    bool m_isCubeTexture { false };
     bool m_isSigned { false };
 };
 
 } // namespace AST
 
