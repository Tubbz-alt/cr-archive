diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/cv/TextureCacheCV.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/cv/TextureCacheCV.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/cv/TextureCacheCV.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/cv/TextureCacheCV.h
@@ -25,11 +25,11 @@
 
 #pragma once
 
 #if HAVE(CORE_VIDEO)
 
-#include "GraphicsTypes3D.h"
+#include "GraphicsTypesGL.h"
 #include <wtf/Ref.h>
 #include <wtf/RetainPtr.h>
 #include <wtf/WeakPtr.h>
 
 typedef struct __CVBuffer* CVImageBufferRef;
@@ -39,32 +39,32 @@
 typedef struct __CVOpenGLTextureCache *CVOpenGLTextureCacheRef;
 typedef struct __CVOpenGLESTextureCache *CVOpenGLESTextureCacheRef;
 
 namespace WebCore {
 
-class GraphicsContext3D;
+class GraphicsContextGLOpenGL;
 
 class TextureCacheCV : public CanMakeWeakPtr<TextureCacheCV> {
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    static std::unique_ptr<TextureCacheCV> create(GraphicsContext3D&);
+    static std::unique_ptr<TextureCacheCV> create(GraphicsContextGLOpenGL&);
 
 #if USE(OPENGL_ES)
     using TextureCacheType = CVOpenGLESTextureCacheRef;
     using TextureType = CVOpenGLESTextureRef;
 #else
     using TextureCacheType = CVOpenGLTextureCacheRef;
     using TextureType = CVOpenGLTextureRef;
 #endif
 
-    TextureCacheCV(GraphicsContext3D&, RetainPtr<TextureCacheType>&&);
+    TextureCacheCV(GraphicsContextGLOpenGL&, RetainPtr<TextureCacheType>&&);
 
-    RetainPtr<TextureType> textureFromImage(CVPixelBufferRef, GC3Denum outputTarget, GC3Dint level, GC3Denum internalFormat, GC3Denum format, GC3Denum type);
-    GraphicsContext3D& context() { return m_context.get(); }
+    RetainPtr<TextureType> textureFromImage(CVPixelBufferRef, GCGLenum outputTarget, GCGLint level, GCGLenum internalFormat, GCGLenum format, GCGLenum type);
+    GraphicsContextGLOpenGL& context() { return m_context.get(); }
 
 private:
-    Ref<GraphicsContext3D> m_context;
+    Ref<GraphicsContextGLOpenGL> m_context;
     RetainPtr<TextureCacheType> m_cache;
 };
 
 }
 
