diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorIndexedDBAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorIndexedDBAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorIndexedDBAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/InspectorIndexedDBAgent.cpp
@@ -220,11 +220,11 @@
     static Ref<DatabaseLoader> create(ScriptExecutionContext* context, Ref<RequestDatabaseCallback>&& requestCallback)
     {
         return adoptRef(*new DatabaseLoader(context, WTFMove(requestCallback)));
     }
 
-    virtual ~DatabaseLoader() = default;
+    ~DatabaseLoader() override = default;
 
     void execute(IDBDatabase& database) override
     {
         if (!requestCallback().isActive())
             return;
@@ -354,11 +354,11 @@
     static Ref<OpenCursorCallback> create(InjectedScript injectedScript, Ref<RequestDataCallback>&& requestCallback, int skipCount, unsigned pageSize)
     {
         return adoptRef(*new OpenCursorCallback(injectedScript, WTFMove(requestCallback), skipCount, pageSize));
     }
 
-    virtual ~OpenCursorCallback() = default;
+    ~OpenCursorCallback() override = default;
 
     bool operator==(const EventListener& other) const override
     {
         return this == &other;
     }
@@ -402,14 +402,14 @@
         if (cursor->continueFunction(nullptr).hasException()) {
             m_requestCallback->sendFailure("Could not continue cursor.");
             return;
         }
 
-        auto* state = context.execState();
-        auto key =  toJS(*state, *state->lexicalGlobalObject(), cursor->key());
-        auto primaryKey = toJS(*state, *state->lexicalGlobalObject(), cursor->primaryKey());
-        auto value = deserializeIDBValueToJSValue(*state, cursor->value());
+        auto* lexicalGlobalObject = context.execState();
+        auto key =  toJS(*lexicalGlobalObject, *lexicalGlobalObject, cursor->key());
+        auto primaryKey = toJS(*lexicalGlobalObject, *lexicalGlobalObject, cursor->primaryKey());
+        auto value = deserializeIDBValueToJSValue(*lexicalGlobalObject, cursor->value());
         auto dataEntry = DataEntry::create()
             .setKey(m_injectedScript.wrapObject(key, String(), true))
             .setPrimaryKey(m_injectedScript.wrapObject(primaryKey, String(), true))
             .setValue(m_injectedScript.wrapObject(value, String(), true))
             .release();
@@ -445,11 +445,11 @@
     static Ref<DataLoader> create(ScriptExecutionContext* context, Ref<RequestDataCallback>&& requestCallback, const InjectedScript& injectedScript, const String& objectStoreName, const String& indexName, RefPtr<IDBKeyRange>&& idbKeyRange, int skipCount, unsigned pageSize)
     {
         return adoptRef(*new DataLoader(context, WTFMove(requestCallback), injectedScript, objectStoreName, indexName, WTFMove(idbKeyRange), skipCount, pageSize));
     }
 
-    virtual ~DataLoader() = default;
+    ~DataLoader() override = default;
 
     void execute(IDBDatabase& database) override
     {
         if (!requestCallback().isActive())
             return;
@@ -649,11 +649,11 @@
     static Ref<ClearObjectStoreListener> create(Ref<ClearObjectStoreCallback> requestCallback)
     {
         return adoptRef(*new ClearObjectStoreListener(WTFMove(requestCallback)));
     }
 
-    virtual ~ClearObjectStoreListener() = default;
+    ~ClearObjectStoreListener() override = default;
 
     bool operator==(const EventListener& other) const override
     {
         return this == &other;
     }
