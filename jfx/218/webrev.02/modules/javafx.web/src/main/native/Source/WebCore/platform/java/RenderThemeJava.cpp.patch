diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/java/RenderThemeJava.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/java/RenderThemeJava.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/java/RenderThemeJava.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/java/RenderThemeJava.cpp
@@ -206,11 +206,11 @@
         env->CallObjectMethod(jobject(*jRenderTheme), mid,
             ptr_to_jlong(&object),
             (jint)widgetIndex,
             (jint)state,
             (jint)rect.width(), (jint)rect.height(),
-            (jint)bgColor,
+            (jint)bgColor.value(),
             (jobject)JLObject(extParams.isEmpty()
                 ? nullptr
                 : env->NewDirectByteBuffer(
                     extParams.data(),
                     extParams.size())))
@@ -318,31 +318,31 @@
 bool RenderThemeJava::paintButton(const RenderObject&o, const PaintInfo& i, const IntRect& rect)
 {
     return paintWidget(JNI_EXPAND(BUTTON), o, i, rect);
 }
 
-void RenderThemeJava::adjustTextFieldStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderThemeJava::adjustTextFieldStyle(RenderStyle&, const Element*) const
 {
     notImplemented();
 }
 
 bool RenderThemeJava::paintTextField(const RenderObject&o, const PaintInfo& i, const FloatRect& rect)
 {
     return paintWidget(JNI_EXPAND(TEXT_FIELD), o, i, rect);
 }
 
-void RenderThemeJava::adjustSearchFieldStyle(StyleResolver&, RenderStyle&, const Element*) const
+void RenderThemeJava::adjustSearchFieldStyle(RenderStyle&, const Element*) const
 {
     notImplemented();
 }
 
 bool RenderThemeJava::paintSearchField(const RenderObject&o, const PaintInfo& i, const IntRect& rect)
 {
     return paintWidget(JNI_EXPAND(TEXT_FIELD), o, i, rect);
 }
 
-void RenderThemeJava::adjustTextAreaStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderThemeJava::adjustTextAreaStyle(RenderStyle& style, const Element*) const
 {
     if (style.paddingTop().isIntrinsicOrAuto())
         style.setPaddingTop(Length(1, Fixed));
     if (style.paddingBottom().isIntrinsicOrAuto())
         style.setPaddingBottom(Length(1, Fixed));
@@ -351,11 +351,11 @@
 bool RenderThemeJava::paintTextArea(const RenderObject&o, const PaintInfo& i, const FloatRect& r)
 {
     return paintTextField(o, i, r);
 }
 
-void RenderThemeJava::adjustButtonStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderThemeJava::adjustButtonStyle(RenderStyle& style, const Element*) const
 {
     if (style.appearance() == PushButtonPart) {
         // Ignore line-height.
         style.setLineHeight(RenderStyle::initialLineHeight());
     }
@@ -434,14 +434,14 @@
         cachedDesc->setItalic(normalItalicValue());
     }
     fontDescription = *cachedDesc;
 }
 
-void RenderThemeJava::adjustSliderTrackStyle(StyleResolver& selector, RenderStyle& style, const Element* element) const
+void RenderThemeJava::adjustSliderTrackStyle(RenderStyle& style, const Element* element) const
 {
     //utatodo: we need to measure the control in Java theme.
-    RenderTheme::adjustSliderTrackStyle(selector, style, element);
+    RenderTheme::adjustSliderTrackStyle(style, element);
 }
 
 bool RenderThemeJava::paintSliderTrack(const RenderObject&object, const PaintInfo& info, const IntRect& rect)
 {
     return paintWidget(JNI_EXPAND(SLIDER), object, info, rect);
@@ -501,11 +501,11 @@
 {
     // We've already painted it in paintSliderTrack(), no need to do anything here.
     return false;
 }
 
-void RenderThemeJava::adjustMenuListStyle(StyleResolver&, RenderStyle& style, const Element*) const
+void RenderThemeJava::adjustMenuListStyle(RenderStyle& style, const Element*) const
 {
     // Add in the padding that we'd like to use.
     style.setPaddingRight(Length(20.0f + style.paddingRight().value(), Fixed));
     style.setPaddingLeft(Length(2.0f + style.paddingLeft().value(), Fixed));
 }
@@ -513,14 +513,14 @@
 bool RenderThemeJava::paintMenuList(const RenderObject& o, const PaintInfo& i, const FloatRect& rect)
 {
     return paintWidget(JNI_EXPAND(MENU_LIST), o, i, rect);
 }
 
-void RenderThemeJava::adjustMenuListButtonStyle(StyleResolver& selector, RenderStyle& style, const Element* e) const
+void RenderThemeJava::adjustMenuListButtonStyle(RenderStyle& style, const Element* e) const
 {
     style.resetBorderRadius();
-    adjustMenuListStyle(selector, style, e);
+    adjustMenuListStyle(style, e);
 }
 
 bool RenderThemeJava::paintMenuListButtonDecorations(const RenderBox& o, const PaintInfo& i, const FloatRect& r)
 {
     IntRect rect(r.x() + r.width(), r.y(), r.height(), r.height());
