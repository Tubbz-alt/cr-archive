diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/AbstractModuleRecord.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/AbstractModuleRecord.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/AbstractModuleRecord.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/AbstractModuleRecord.h
@@ -35,14 +35,22 @@
 class JSModuleNamespaceObject;
 class JSMap;
 
 // Based on the Source Text Module Record
 // http://www.ecma-international.org/ecma-262/6.0/#sec-source-text-module-records
-class AbstractModuleRecord : public JSDestructibleObject {
+class AbstractModuleRecord : public JSNonFinalObject {
     friend class LLIntOffsetsExtractor;
 public:
-    typedef JSDestructibleObject Base;
+    using Base = JSNonFinalObject;
+
+    static constexpr bool needsDestruction = true;
+
+    template<typename CellType, SubspaceAccess>
+    static void subspaceFor(VM&)
+    {
+        RELEASE_ASSERT_NOT_REACHED();
+    }
 
     // https://tc39.github.io/ecma262/#sec-source-text-module-records
     struct ExportEntry {
         enum class Type {
             Local,
@@ -99,16 +107,16 @@
         Type type;
         AbstractModuleRecord* moduleRecord;
         Identifier localName;
     };
 
-    Resolution resolveExport(ExecState*, const Identifier& exportName);
-    Resolution resolveImport(ExecState*, const Identifier& localName);
+    Resolution resolveExport(JSGlobalObject*, const Identifier& exportName);
+    Resolution resolveImport(JSGlobalObject*, const Identifier& localName);
 
-    AbstractModuleRecord* hostResolveImportedModule(ExecState*, const Identifier& moduleName);
+    AbstractModuleRecord* hostResolveImportedModule(JSGlobalObject*, const Identifier& moduleName);
 
-    JSModuleNamespaceObject* getModuleNamespace(ExecState*);
+    JSModuleNamespaceObject* getModuleNamespace(JSGlobalObject*);
 
     JSModuleEnvironment* moduleEnvironment()
     {
         ASSERT(m_moduleEnvironment);
         return m_moduleEnvironment.get();
@@ -117,25 +125,24 @@
     JSModuleEnvironment* moduleEnvironmentMayBeNull()
     {
         return m_moduleEnvironment.get();
     }
 
-    void link(ExecState*, JSValue scriptFetcher);
-    JS_EXPORT_PRIVATE JSValue evaluate(ExecState*);
+    void link(JSGlobalObject*, JSValue scriptFetcher);
+    JS_EXPORT_PRIVATE JSValue evaluate(JSGlobalObject*);
 
 protected:
     AbstractModuleRecord(VM&, Structure*, const Identifier&);
-    void finishCreation(ExecState*, VM&);
+    void finishCreation(JSGlobalObject*, VM&);
 
     static void visitChildren(JSCell*, SlotVisitor&);
-    static void destroy(JSCell*);
 
     WriteBarrier<JSModuleEnvironment> m_moduleEnvironment;
 
 private:
     struct ResolveQuery;
-    static Resolution resolveExportImpl(ExecState*, const ResolveQuery&);
+    static Resolution resolveExportImpl(JSGlobalObject*, const ResolveQuery&);
     Optional<Resolution> tryGetCachedResolution(UniquedStringImpl* exportName);
     void cacheResolution(UniquedStringImpl* exportName, const Resolution&);
 
     // The loader resolves the given module name to the module key. The module key is the unique value to represent this module.
     Identifier m_moduleKey;
