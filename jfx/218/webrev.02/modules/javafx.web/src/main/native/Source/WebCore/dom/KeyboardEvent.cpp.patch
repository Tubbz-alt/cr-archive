diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/KeyboardEvent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/KeyboardEvent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/KeyboardEvent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/KeyboardEvent.cpp
@@ -29,13 +29,16 @@
 #include "EventHandler.h"
 #include "EventNames.h"
 #include "Frame.h"
 #include "PlatformKeyboardEvent.h"
 #include "WindowsKeyboardCodes.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(KeyboardEvent);
+
 static inline const AtomString& eventTypeForKeyboardEventType(PlatformEvent::Type type)
 {
     switch (type) {
         case PlatformEvent::KeyUp:
             return eventNames().keyupEvent;
@@ -76,17 +79,23 @@
         return KeyboardEvent::DOM_KEY_LOCATION_NUMPAD;
 
     switch (key.windowsVirtualKeyCode()) {
     case VK_LCONTROL:
     case VK_LSHIFT:
-    case VK_LMENU:
-    case VK_LWIN:
+    case VK_LMENU: // Left Option/Alt
+    case VK_LWIN: // Left Command/Windows key (Natural keyboard)
         return KeyboardEvent::DOM_KEY_LOCATION_LEFT;
     case VK_RCONTROL:
     case VK_RSHIFT:
-    case VK_RMENU:
-    case VK_RWIN:
+    case VK_RMENU: // Right Option/Alt
+    case VK_RWIN: // Right Windows key (Natural keyboard)
+#if PLATFORM(COCOA)
+    // FIXME: WebCore maps the right command key to VK_APPS even though the USB HID spec.,
+    // <https://www.usb.org/sites/default/files/documents/hut1_12v2.pdf>, states that it
+    // should map to the same key as the right Windows key (VK_RWIN).
+    case VK_APPS: // Right Command
+#endif
         return KeyboardEvent::DOM_KEY_LOCATION_RIGHT;
     default:
         return KeyboardEvent::DOM_KEY_LOCATION_STANDARD;
     }
 }
@@ -95,16 +104,12 @@
 
 inline KeyboardEvent::KeyboardEvent(const PlatformKeyboardEvent& key, RefPtr<WindowProxy>&& view)
     : UIEventWithKeyState(eventTypeForKeyboardEventType(key.type()), CanBubble::Yes, IsCancelable::Yes, IsComposed::Yes,
         key.timestamp().approximateMonotonicTime(), view.copyRef(), 0, key.modifiers(), IsTrusted::Yes)
     , m_underlyingPlatformEvent(makeUnique<PlatformKeyboardEvent>(key))
-#if ENABLE(KEYBOARD_KEY_ATTRIBUTE)
     , m_key(key.key())
-#endif
-#if ENABLE(KEYBOARD_CODE_ATTRIBUTE)
     , m_code(key.code())
-#endif
     , m_keyIdentifier(key.keyIdentifier())
     , m_location(keyLocationCode(key))
     , m_repeat(key.isAutoRepeat())
     , m_isComposing(view && is<DOMWindow>(view->window()) && downcast<DOMWindow>(*view->window()).frame() && downcast<DOMWindow>(*view->window()).frame()->editor().hasComposition())
 #if USE(APPKIT) || USE(UIKIT_KEYBOARD_ADDITIONS)
@@ -116,16 +121,12 @@
 {
 }
 
 inline KeyboardEvent::KeyboardEvent(const AtomString& eventType, const Init& initializer)
     : UIEventWithKeyState(eventType, initializer)
-#if ENABLE(KEYBOARD_KEY_ATTRIBUTE)
     , m_key(initializer.key)
-#endif
-#if ENABLE(KEYBOARD_CODE_ATTRIBUTE)
     , m_code(initializer.code)
-#endif
     , m_keyIdentifier(initializer.keyIdentifier)
     , m_location(initializer.keyLocation ? *initializer.keyLocation : initializer.location)
     , m_repeat(initializer.repeat)
     , m_isComposing(initializer.isComposing)
     , m_charCode(initializer.charCode)
@@ -168,18 +169,12 @@
     m_isComposing = false;
     m_keyCode = WTF::nullopt;
     m_repeat = false;
     m_underlyingPlatformEvent = nullptr;
     m_which = WTF::nullopt;
-
-#if ENABLE(KEYBOARD_CODE_ATTRIBUTE)
     m_code = { };
-#endif
-
-#if ENABLE(KEYBOARD_KEY_ATTRIBUTE)
     m_key = { };
-#endif
 
 #if PLATFORM(COCOA)
     m_handledByInputMethod = false;
     m_keypressCommands = { };
 #endif
