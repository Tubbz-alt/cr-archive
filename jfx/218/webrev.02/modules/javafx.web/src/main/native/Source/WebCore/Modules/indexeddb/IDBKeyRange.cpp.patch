diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBKeyRange.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBKeyRange.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBKeyRange.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBKeyRange.cpp
@@ -67,34 +67,34 @@
         return Exception { DataError };
 
     return create(WTFMove(key));
 }
 
-ExceptionOr<Ref<IDBKeyRange>> IDBKeyRange::only(ExecState& state, JSValue keyValue)
+ExceptionOr<Ref<IDBKeyRange>> IDBKeyRange::only(JSGlobalObject& state, JSValue keyValue)
 {
     return only(scriptValueToIDBKey(state, keyValue));
 }
 
-ExceptionOr<Ref<IDBKeyRange>> IDBKeyRange::lowerBound(ExecState& state, JSValue boundValue, bool open)
+ExceptionOr<Ref<IDBKeyRange>> IDBKeyRange::lowerBound(JSGlobalObject& state, JSValue boundValue, bool open)
 {
     auto bound = scriptValueToIDBKey(state, boundValue);
     if (!bound->isValid())
         return Exception { DataError };
 
     return create(WTFMove(bound), nullptr, open, true);
 }
 
-ExceptionOr<Ref<IDBKeyRange>> IDBKeyRange::upperBound(ExecState& state, JSValue boundValue, bool open)
+ExceptionOr<Ref<IDBKeyRange>> IDBKeyRange::upperBound(JSGlobalObject& state, JSValue boundValue, bool open)
 {
     auto bound = scriptValueToIDBKey(state, boundValue);
     if (!bound->isValid())
         return Exception { DataError };
 
     return create(nullptr, WTFMove(bound), true, open);
 }
 
-ExceptionOr<Ref<IDBKeyRange>> IDBKeyRange::bound(ExecState& state, JSValue lowerValue, JSValue upperValue, bool lowerOpen, bool upperOpen)
+ExceptionOr<Ref<IDBKeyRange>> IDBKeyRange::bound(JSGlobalObject& state, JSValue lowerValue, JSValue upperValue, bool lowerOpen, bool upperOpen)
 {
     auto lower = scriptValueToIDBKey(state, lowerValue);
     if (!lower->isValid())
         return Exception { DataError };
     auto upper = scriptValueToIDBKey(state, upperValue);
@@ -111,11 +111,11 @@
 bool IDBKeyRange::isOnlyKey() const
 {
     return m_lower && m_upper && !m_isLowerOpen && !m_isUpperOpen && m_lower->isEqual(*m_upper);
 }
 
-ExceptionOr<bool> IDBKeyRange::includes(JSC::ExecState& state, JSC::JSValue keyValue)
+ExceptionOr<bool> IDBKeyRange::includes(JSC::JSGlobalObject& state, JSC::JSValue keyValue)
 {
     auto key = scriptValueToIDBKey(state, keyValue);
     if (!key->isValid())
         return Exception { DataError, "Failed to execute 'includes' on 'IDBKeyRange': The passed-in value is not a valid IndexedDB key." };
 
