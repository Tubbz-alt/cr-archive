diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediasession/WebMediaSessionManager.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediasession/WebMediaSessionManager.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediasession/WebMediaSessionManager.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediasession/WebMediaSessionManager.h
@@ -37,27 +37,31 @@
 
 namespace WebCore {
 
 struct ClientState;
 class IntRect;
+class WebMediaSessionLogger;
 class WebMediaSessionManagerClient;
 
 class WebMediaSessionManager : public MediaPlaybackTargetPicker::Client {
     WTF_MAKE_NONCOPYABLE(WebMediaSessionManager);
 public:
 
     WEBCORE_EXPORT static WebMediaSessionManager& shared();
 
     WEBCORE_EXPORT void setMockMediaPlaybackTargetPickerEnabled(bool);
     WEBCORE_EXPORT void setMockMediaPlaybackTargetPickerState(const String&, MediaPlaybackTargetContext::State);
+    WEBCORE_EXPORT void mockMediaPlaybackTargetPickerDismissPopup();
 
     WEBCORE_EXPORT uint64_t addPlaybackTargetPickerClient(WebMediaSessionManagerClient&, uint64_t);
     WEBCORE_EXPORT void removePlaybackTargetPickerClient(WebMediaSessionManagerClient&, uint64_t);
     WEBCORE_EXPORT void removeAllPlaybackTargetPickerClients(WebMediaSessionManagerClient&);
     WEBCORE_EXPORT void showPlaybackTargetPicker(WebMediaSessionManagerClient&, uint64_t, const IntRect&, bool, bool);
     WEBCORE_EXPORT void clientStateDidChange(WebMediaSessionManagerClient&, uint64_t, WebCore::MediaProducer::MediaStateFlags);
 
+    bool alwaysOnLoggingAllowed() const;
+
 protected:
     WebMediaSessionManager();
     virtual ~WebMediaSessionManager();
 
     virtual WebCore::MediaPlaybackTargetPicker& platformPicker() = 0;
@@ -69,10 +73,11 @@
     WebCore::MediaPlaybackTargetPickerMock& mockPicker();
 
     // MediaPlaybackTargetPicker::Client
     void setPlaybackTarget(Ref<WebCore::MediaPlaybackTarget>&&) override;
     void externalOutputDeviceAvailableDidChange(bool) override;
+    void playbackTargetPickerWasDismissed() override;
 
     size_t find(WebMediaSessionManagerClient*, uint64_t);
 
     void configurePlaybackTargetClients();
     void configureNewClients();
@@ -92,21 +97,37 @@
     void scheduleDelayedTask(ConfigurationTasks);
     void taskTimerFired();
 
     void watchdogTimerFired();
 
+    WebMediaSessionLogger& logger();
+
     RunLoop::Timer<WebMediaSessionManager> m_taskTimer;
     RunLoop::Timer<WebMediaSessionManager> m_watchdogTimer;
 
     Vector<std::unique_ptr<ClientState>> m_clientState;
     RefPtr<MediaPlaybackTarget> m_playbackTarget;
     std::unique_ptr<WebCore::MediaPlaybackTargetPickerMock> m_pickerOverride;
     ConfigurationTasks m_taskFlags { NoTask };
+    std::unique_ptr<WebMediaSessionLogger> m_logger;
     Seconds m_currentWatchdogInterval;
     bool m_externalOutputDeviceAvailable { false };
     bool m_targetChanged { false };
+    bool m_playbackTargetPickerDismissed { false };
     bool m_mockPickerEnabled { false };
 };
 
+String mediaProducerStateString(WebCore::MediaProducer::MediaStateFlags);
+
 } // namespace WebCore
 
+namespace WTF {
+
+template<typename> struct LogArgument;
+
+template<> struct LogArgument<WebCore::MediaProducer::MediaStateFlags> {
+    static String toString(WebCore::MediaProducer::MediaStateFlags flags) { return WebCore::mediaProducerStateString(flags); }
+};
+
+} // namespace WTF
+
 #endif // ENABLE(WIRELESS_PLAYBACK_TARGET) && !PLATFORM(IOS_FAMILY)
