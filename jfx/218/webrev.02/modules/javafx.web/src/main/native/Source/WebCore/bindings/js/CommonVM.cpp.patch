diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/CommonVM.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/CommonVM.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/CommonVM.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/CommonVM.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2016-2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2016-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -72,28 +72,29 @@
     return vm;
 }
 
 Frame* lexicalFrameFromCommonVM()
 {
-    if (auto* topCallFrame = commonVM().topCallFrame) {
+    JSC::VM& vm = commonVM();
+    if (auto* topCallFrame = vm.topCallFrame) {
 #if PLATFORM(JAVA) && ENABLE(C_LOOP)
         if (!topCallFrame->codeBlock()) {
             return nullptr;
         }
 #endif
-        if (auto* globalObject = JSC::jsCast<JSDOMGlobalObject*>(topCallFrame->lexicalGlobalObject())) {
-            if (auto* window = JSC::jsDynamicCast<JSDOMWindow*>(commonVM(), globalObject)) {
+        if (auto* globalObject = JSC::jsCast<JSDOMGlobalObject*>(topCallFrame->lexicalGlobalObject(vm))) {
+            if (auto* window = JSC::jsDynamicCast<JSDOMWindow*>(vm, globalObject)) {
                 if (auto* frame = window->wrapped().frame())
                     return frame;
             }
         }
     }
     return nullptr;
 }
 
 void addImpureProperty(const AtomString& propertyName)
 {
-    commonVM().addImpureProperty(propertyName);
+    commonVM().addImpureProperty(propertyName.impl());
 }
 
 } // namespace WebCore
 
