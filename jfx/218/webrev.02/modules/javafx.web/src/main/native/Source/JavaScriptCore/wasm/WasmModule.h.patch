diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmModule.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmModule.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmModule.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmModule.h
@@ -35,13 +35,13 @@
 #include <wtf/SharedTask.h>
 #include <wtf/ThreadSafeRefCounted.h>
 
 namespace JSC { namespace Wasm {
 
+class LLIntPlan;
 struct Context;
 struct ModuleInformation;
-class Plan;
 
 using SignatureIndex = uint64_t;
 
 class Module : public ThreadSafeRefCounted<Module> {
 public:
@@ -50,30 +50,32 @@
     using AsyncValidationCallback = RefPtr<SharedTask<CallbackType>>;
 
     static ValidationResult validateSync(Context*, Vector<uint8_t>&& source);
     static void validateAsync(Context*, Vector<uint8_t>&& source, Module::AsyncValidationCallback&&);
 
-    static Ref<Module> create(Ref<ModuleInformation>&& moduleInformation)
+    static Ref<Module> create(LLIntPlan& plan)
     {
-        return adoptRef(*new Module(WTFMove(moduleInformation)));
+        return adoptRef(*new Module(plan));
     }
 
     Wasm::SignatureIndex signatureIndexFromFunctionIndexSpace(unsigned functionIndexSpace) const;
     const Wasm::ModuleInformation& moduleInformation() const { return m_moduleInformation.get(); }
 
-    Ref<CodeBlock> compileSync(Context*, MemoryMode, CreateEmbedderWrapper&&, ThrowWasmException);
-    void compileAsync(Context*, MemoryMode, CodeBlock::AsyncCompilationCallback&&, CreateEmbedderWrapper&&, ThrowWasmException);
+    Ref<CodeBlock> compileSync(Context*, MemoryMode);
+    void compileAsync(Context*, MemoryMode, CodeBlock::AsyncCompilationCallback&&);
 
     JS_EXPORT_PRIVATE ~Module();
 
     CodeBlock* codeBlockFor(MemoryMode mode) { return m_codeBlocks[static_cast<uint8_t>(mode)].get(); }
 private:
-    Ref<CodeBlock> getOrCreateCodeBlock(Context*, MemoryMode, CreateEmbedderWrapper&&, ThrowWasmException);
+    Ref<CodeBlock> getOrCreateCodeBlock(Context*, MemoryMode);
 
-    Module(Ref<ModuleInformation>&&);
+    Module(LLIntPlan&);
     Ref<ModuleInformation> m_moduleInformation;
     RefPtr<CodeBlock> m_codeBlocks[Wasm::NumberOfMemoryModes];
+    RefPtr<LLIntCallees> m_llintCallees;
+    MacroAssemblerCodeRef<B3CompilationPtrTag> m_llintEntryThunks;
     Lock m_lock;
 };
 
 } } // namespace JSC::Wasm
 
