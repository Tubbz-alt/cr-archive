diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/PasteboardItemInfo.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/PasteboardItemInfo.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/PasteboardItemInfo.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/PasteboardItemInfo.h
@@ -59,27 +59,28 @@
         return WTF::nullopt;
 
     if (!decoder.decode(result.height))
         return WTF::nullopt;
 
-    return WTFMove(result);
+    return result;
 }
 
 struct PasteboardItemInfo {
     Vector<String> pathsForFileUpload;
-    Vector<String> contentTypesForFileUpload;
-    Vector<String> contentTypesByFidelity;
+    Vector<String> platformTypesForFileUpload;
+    Vector<String> platformTypesByFidelity;
     String suggestedFileName;
     PresentationSize preferredPresentationSize;
     bool isNonTextType { false };
     bool containsFileURLAndFileUploadContent { false };
+    Vector<String> webSafeTypesByFidelity;
     PasteboardItemPresentationStyle preferredPresentationStyle { PasteboardItemPresentationStyle::Unspecified };
 
     String pathForContentType(const String& type) const
     {
-        ASSERT(pathsForFileUpload.size() == contentTypesForFileUpload.size());
-        auto index = contentTypesForFileUpload.find(type);
+        ASSERT(pathsForFileUpload.size() == platformTypesForFileUpload.size());
+        auto index = platformTypesForFileUpload.find(type);
         if (index == notFound)
             return { };
 
         return pathsForFileUpload[index];
     }
@@ -102,14 +103,14 @@
         return false;
     }
 
     String contentTypeForHighestFidelityItem() const
     {
-        if (contentTypesForFileUpload.isEmpty())
+        if (platformTypesForFileUpload.isEmpty())
             return { };
 
-        return contentTypesForFileUpload.first();
+        return platformTypesForFileUpload.first();
     }
 
     String pathForHighestFidelityItem() const
     {
         if (pathsForFileUpload.isEmpty())
@@ -123,25 +124,25 @@
 };
 
 template<class Encoder>
 void PasteboardItemInfo::encode(Encoder& encoder) const
 {
-    encoder << pathsForFileUpload << contentTypesForFileUpload << contentTypesByFidelity << suggestedFileName << preferredPresentationSize << isNonTextType << containsFileURLAndFileUploadContent;
+    encoder << pathsForFileUpload << platformTypesForFileUpload << platformTypesByFidelity << suggestedFileName << preferredPresentationSize << isNonTextType << containsFileURLAndFileUploadContent << webSafeTypesByFidelity;
     encoder.encodeEnum(preferredPresentationStyle);
 }
 
 template<class Decoder>
 Optional<PasteboardItemInfo> PasteboardItemInfo::decode(Decoder& decoder)
 {
     PasteboardItemInfo result;
     if (!decoder.decode(result.pathsForFileUpload))
         return WTF::nullopt;
 
-    if (!decoder.decode(result.contentTypesForFileUpload))
+    if (!decoder.decode(result.platformTypesForFileUpload))
         return WTF::nullopt;
 
-    if (!decoder.decode(result.contentTypesByFidelity))
+    if (!decoder.decode(result.platformTypesByFidelity))
         return WTF::nullopt;
 
     if (!decoder.decode(result.suggestedFileName))
         return WTF::nullopt;
 
@@ -152,14 +153,17 @@
         return WTF::nullopt;
 
     if (!decoder.decode(result.containsFileURLAndFileUploadContent))
         return WTF::nullopt;
 
+    if (!decoder.decode(result.webSafeTypesByFidelity))
+        return WTF::nullopt;
+
     if (!decoder.decodeEnum(result.preferredPresentationStyle))
         return WTF::nullopt;
 
-    return WTFMove(result);
+    return result;
 }
 
 }
 
 namespace WTF {
