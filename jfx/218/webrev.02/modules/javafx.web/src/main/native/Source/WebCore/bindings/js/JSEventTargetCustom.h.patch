diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSEventTargetCustom.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSEventTargetCustom.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSEventTargetCustom.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSEventTargetCustom.h
@@ -53,30 +53,30 @@
 std::unique_ptr<JSEventTargetWrapper> jsEventTargetCast(JSC::VM&, JSC::JSValue thisValue);
 
 template<> class IDLOperation<JSEventTarget> {
 public:
     using ClassParameter = JSEventTargetWrapper*;
-    using Operation = JSC::EncodedJSValue(JSC::ExecState*, ClassParameter, JSC::ThrowScope&);
+    using Operation = JSC::EncodedJSValue(JSC::JSGlobalObject*, JSC::CallFrame*, ClassParameter, JSC::ThrowScope&);
 
     template<Operation operation, CastedThisErrorBehavior = CastedThisErrorBehavior::Throw>
-    static JSC::EncodedJSValue call(JSC::ExecState& state, const char* operationName)
+    static JSC::EncodedJSValue call(JSC::JSGlobalObject& lexicalGlobalObject, JSC::CallFrame& callFrame, const char* operationName)
     {
-        auto& vm = state.vm();
+        auto& vm = JSC::getVM(&lexicalGlobalObject);
         auto throwScope = DECLARE_THROW_SCOPE(vm);
 
-        auto thisObject = jsEventTargetCast(vm, state.thisValue().toThis(&state, JSC::NotStrictMode));
+        auto thisObject = jsEventTargetCast(vm, callFrame.thisValue().toThis(&lexicalGlobalObject, JSC::NotStrictMode));
         if (UNLIKELY(!thisObject))
-            return throwThisTypeError(state, throwScope, "EventTarget", operationName);
+            return throwThisTypeError(lexicalGlobalObject, throwScope, "EventTarget", operationName);
 
         auto& wrapped = thisObject->wrapped();
         if (is<DOMWindow>(wrapped)) {
             auto& window = downcast<DOMWindow>(wrapped);
-            if (!window.frame() || !BindingSecurity::shouldAllowAccessToDOMWindow(&state, window, ThrowSecurityError))
+            if (!window.frame() || !BindingSecurity::shouldAllowAccessToDOMWindow(&lexicalGlobalObject, window, ThrowSecurityError))
                 return JSC::JSValue::encode(JSC::jsUndefined());
         }
 
-        return operation(&state, thisObject.get(), throwScope);
+        return operation(&lexicalGlobalObject, &callFrame, thisObject.get(), throwScope);
     }
 
 };
 
 
