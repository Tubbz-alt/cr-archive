diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/SetupVarargsFrame.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/SetupVarargsFrame.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/SetupVarargsFrame.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/SetupVarargsFrame.cpp
@@ -86,11 +86,11 @@
 
     // Before touching stack values, we should update the stack pointer to protect them from signal stack.
     jit.addPtr(CCallHelpers::TrustedImm32(sizeof(CallerFrameAndPC)), scratchGPR2, CCallHelpers::stackPointerRegister);
 
     // Initialize ArgumentCount.
-    jit.store32(scratchGPR1, CCallHelpers::Address(scratchGPR2, CallFrameSlot::argumentCount * static_cast<int>(sizeof(Register)) + PayloadOffset));
+    jit.store32(scratchGPR1, CCallHelpers::Address(scratchGPR2, CallFrameSlot::argumentCountIncludingThis * static_cast<int>(sizeof(Register)) + PayloadOffset));
 
     // Copy arguments.
     jit.signExtend32ToPtr(scratchGPR1, scratchGPR1);
     CCallHelpers::Jump done = jit.branchSubPtr(CCallHelpers::Zero, CCallHelpers::TrustedImm32(1), scratchGPR1);
     // scratchGPR1: argumentCount
@@ -126,11 +126,11 @@
             firstArgumentReg = inlineCallFrame->argumentsWithFixup[1].virtualRegister();
         else
             firstArgumentReg = VirtualRegister(0);
     } else {
         argumentCountRecovery = ValueRecovery::displacedInJSStack(
-            VirtualRegister(CallFrameSlot::argumentCount), DataFormatInt32);
+            CallFrameSlot::argumentCountIncludingThis, DataFormatInt32);
         firstArgumentReg = VirtualRegister(CallFrame::argumentOffset(0));
     }
     emitSetupVarargsFrameFastCase(vm, jit, numUsedSlotsGPR, scratchGPR1, scratchGPR2, scratchGPR3, argumentCountRecovery, firstArgumentReg, firstVarArgOffset, slowCase);
 }
 
