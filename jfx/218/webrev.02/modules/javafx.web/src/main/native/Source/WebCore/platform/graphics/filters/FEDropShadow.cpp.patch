diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/filters/FEDropShadow.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/filters/FEDropShadow.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/filters/FEDropShadow.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/filters/FEDropShadow.cpp
@@ -106,17 +106,28 @@
 
     contextShadow.blurLayerImage(srcPixelArray->data(), shadowArea.size(), 4 * shadowArea.size().width());
 
     resultImage->putByteArray(*srcPixelArray, AlphaPremultiplication::Premultiplied, shadowArea.size(), shadowArea, IntPoint(), ImageBuffer::BackingStoreCoordinateSystem);
 
-    resultContext.setCompositeOperation(CompositeSourceIn);
+    resultContext.setCompositeOperation(CompositeOperator::SourceIn);
     resultContext.fillRect(FloatRect(FloatPoint(), absolutePaintRect().size()), m_shadowColor);
-    resultContext.setCompositeOperation(CompositeDestinationOver);
+    resultContext.setCompositeOperation(CompositeOperator::DestinationOver);
 
     resultImage->context().drawImageBuffer(*sourceImage, drawingRegion);
 }
 
+IntOutsets FEDropShadow::outsets() const
+{
+    IntSize outsetSize = FEGaussianBlur::calculateOutsetSize({ m_stdX, m_stdY });
+    return {
+        std::max<int>(0, outsetSize.height() - m_dy),
+        std::max<int>(0, outsetSize.width() + m_dx),
+        std::max<int>(0, outsetSize.height() + m_dy),
+        std::max<int>(0, outsetSize.width() - m_dx)
+    };
+}
+
 TextStream& FEDropShadow::externalRepresentation(TextStream& ts, RepresentationType representation) const
 {
     ts << indent <<"[feDropShadow";
     FilterEffect::externalRepresentation(ts, representation);
     ts << " stdDeviation=\"" << m_stdX << ", " << m_stdY << "\" dx=\"" << m_dx << "\" dy=\"" << m_dy << "\" flood-color=\"" << m_shadowColor.nameForRenderTreeAsText() <<"\" flood-opacity=\"" << m_shadowOpacity << "]\n";
