diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentRequest.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentRequest.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentRequest.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentRequest.h
@@ -28,11 +28,11 @@
 #if ENABLE(PAYMENT_REQUEST)
 
 #include "ActiveDOMObject.h"
 #include "EventTarget.h"
 #include "ExceptionOr.h"
-#include "JSDOMPromiseDeferred.h"
+#include "IDLTypes.h"
 #include "PaymentDetailsInit.h"
 #include "PaymentMethodChangeEvent.h"
 #include "PaymentOptions.h"
 #include "PaymentResponse.h"
 #include <wtf/URL.h>
@@ -47,10 +47,11 @@
 class PaymentResponse;
 enum class PaymentComplete;
 enum class PaymentShippingType;
 struct PaymentDetailsUpdate;
 struct PaymentMethodData;
+template<typename IDLType> class DOMPromiseDeferred;
 
 class PaymentRequest final : public ActiveDOMObject, public CanMakeWeakPtr<PaymentRequest>, public EventTargetWithInlineData, public RefCounted<PaymentRequest> {
     WTF_MAKE_ISO_ALLOCATED(PaymentRequest);
 public:
     using AbortPromise = DOMPromiseDeferred<void>;
@@ -123,12 +124,12 @@
     void settleShowPromise(ExceptionOr<PaymentResponse&>&&);
     void closeActivePaymentHandler();
 
     // ActiveDOMObject
     const char* activeDOMObjectName() const final { return "PaymentRequest"; }
-    bool canSuspendForDocumentSuspension() const final;
     void stop() final;
+    void suspend(ReasonForSuspension) final;
 
     // EventTarget
     EventTargetInterface eventTargetInterface() const final { return PaymentRequestEventTargetInterfaceType; }
     ScriptExecutionContext* scriptExecutionContext() const final { return ActiveDOMObject::scriptExecutionContext(); }
     bool isPaymentRequest() const final { return true; }
@@ -140,11 +141,11 @@
     Vector<String> m_serializedModifierData;
     Vector<Method> m_serializedMethodData;
     String m_shippingOption;
     RefPtr<PaymentAddress> m_shippingAddress;
     State m_state { State::Created };
-    Optional<ShowPromise> m_showPromise;
+    std::unique_ptr<ShowPromise> m_showPromise;
     Optional<PaymentHandlerWithPendingActivity> m_activePaymentHandler;
     RefPtr<DOMPromise> m_detailsPromise;
     RefPtr<DOMPromise> m_merchantSessionPromise;
     RefPtr<PaymentResponse> m_response;
     bool m_isUpdating { false };
