diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/SVGRenderStyle.h b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/SVGRenderStyle.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/SVGRenderStyle.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/SVGRenderStyle.h
@@ -28,18 +28,20 @@
 #include "SVGRenderStyleDefs.h"
 #include "WindRule.h"
 
 namespace WebCore {
 
+DECLARE_ALLOCATOR_WITH_HEAP_IDENTIFIER(SVGRenderStyle);
 class SVGRenderStyle : public RefCounted<SVGRenderStyle> {
+    WTF_MAKE_FAST_ALLOCATED_WITH_HEAP_IDENTIFIER(SVGRenderStyle);
 public:
     static Ref<SVGRenderStyle> createDefaultStyle();
     static Ref<SVGRenderStyle> create() { return adoptRef(*new SVGRenderStyle); }
     Ref<SVGRenderStyle> copy() const;
     ~SVGRenderStyle();
 
-    bool inheritedNotEqual(const SVGRenderStyle&) const;
+    bool inheritedEqual(const SVGRenderStyle&) const;
     void inheritFrom(const SVGRenderStyle&);
     void copyNonInheritedFrom(const SVGRenderStyle&);
 
     StyleDifference diff(const SVGRenderStyle&) const;
 
@@ -74,18 +76,17 @@
     static Color initialStopColor() { return Color(0, 0, 0); }
     static float initialFloodOpacity() { return 1; }
     static Color initialFloodColor() { return Color(0, 0, 0); }
     static Color initialLightingColor() { return Color(255, 255, 255); }
     static ShadowData* initialShadow() { return nullptr; }
-    static String initialClipperResource() { return String(); }
     static String initialMaskerResource() { return String(); }
     static String initialMarkerStartResource() { return String(); }
     static String initialMarkerMidResource() { return String(); }
     static String initialMarkerEndResource() { return String(); }
     static MaskType initialMaskType() { return MaskType::Luminance; }
-    static SVGLengthValue initialBaselineShiftValue();
-    static SVGLengthValue initialKerning();
+    static SVGLengthValue initialBaselineShiftValue() { return SVGLengthValue(0, SVGLengthType::Number); }
+    static SVGLengthValue initialKerning() { return SVGLengthValue(0, SVGLengthType::Number); }
 
     // SVG CSS Property setters
     void setAlignmentBaseline(AlignmentBaseline val) { m_nonInheritedFlags.flagBits.alignmentBaseline = static_cast<unsigned>(val); }
     void setDominantBaseline(DominantBaseline val) { m_nonInheritedFlags.flagBits.dominantBaseline = static_cast<unsigned>(val); }
     void setBaselineShift(BaselineShift val) { m_nonInheritedFlags.flagBits.baselineShift = static_cast<unsigned>(val); }
@@ -124,11 +125,10 @@
     void setBaselineShiftValue(const SVGLengthValue&);
 
     void setShadow(std::unique_ptr<ShadowData>&& data) { m_shadowData.access().shadow = WTFMove(data); }
 
     // Setters for non-inherited resources
-    void setClipperResource(const String&);
     void setMaskerResource(const String&);
 
     // Setters for inherited resources
     void setMarkerStartResource(const String&);
     void setMarkerMidResource(const String&);
@@ -172,11 +172,10 @@
     const Length& r() const { return m_layoutData->r; }
     const Length& rx() const { return m_layoutData->rx; }
     const Length& ry() const { return m_layoutData->ry; }
     const Length& x() const { return m_layoutData->x; }
     const Length& y() const { return m_layoutData->y; }
-    const String& clipperResource() const { return m_nonInheritedResourceData->clipper; }
     const String& maskerResource() const { return m_nonInheritedResourceData->masker; }
     const String& markerStartResource() const { return m_inheritedResourceData->markerStart; }
     const String& markerMidResource() const { return m_inheritedResourceData->markerMid; }
     const String& markerEndResource() const { return m_inheritedResourceData->markerEnd; }
     MaskType maskType() const { return static_cast<MaskType>(m_nonInheritedFlags.flagBits.maskType); }
@@ -187,11 +186,10 @@
     SVGPaintType visitedLinkStrokePaintType() const { return static_cast<SVGPaintType>(m_strokeData->visitedLinkPaintType); }
     const Color& visitedLinkStrokePaintColor() const { return m_strokeData->visitedLinkPaintColor; }
     const String& visitedLinkStrokePaintUri() const { return m_strokeData->visitedLinkPaintUri; }
 
     // convenience
-    bool hasClipper() const { return !clipperResource().isEmpty(); }
     bool hasMasker() const { return !maskerResource().isEmpty(); }
     bool hasMarkers() const { return !markerStartResource().isEmpty() || !markerMidResource().isEmpty() || !markerEndResource().isEmpty(); }
     bool hasStroke() const { return strokePaintType() != SVGPaintType::None; }
     bool hasFill() const { return fillPaintType() != SVGPaintType::None; }
     bool isolatesBlending() const { return hasMasker() || shadow(); }
@@ -254,24 +252,10 @@
     DataRef<StyleShadowSVGData> m_shadowData;
     DataRef<StyleLayoutData> m_layoutData;
     DataRef<StyleResourceData> m_nonInheritedResourceData;
 };
 
-inline SVGLengthValue SVGRenderStyle::initialBaselineShiftValue()
-{
-    SVGLengthValue length;
-    length.newValueSpecifiedUnits(LengthTypeNumber, 0);
-    return length;
-}
-
-inline SVGLengthValue SVGRenderStyle::initialKerning()
-{
-    SVGLengthValue length;
-    length.newValueSpecifiedUnits(LengthTypeNumber, 0);
-    return length;
-}
-
 inline void SVGRenderStyle::setCx(const Length& length)
 {
     if (!(m_layoutData->cx == length))
         m_layoutData.access().cx = length;
 }
@@ -416,16 +400,10 @@
 {
     if (!(m_miscData->baselineShiftValue == shiftValue))
         m_miscData.access().baselineShiftValue = shiftValue;
 }
 
-inline void SVGRenderStyle::setClipperResource(const String& resource)
-{
-    if (!(m_nonInheritedResourceData->clipper == resource))
-        m_nonInheritedResourceData.access().clipper = resource;
-}
-
 inline void SVGRenderStyle::setMaskerResource(const String& resource)
 {
     if (!(m_nonInheritedResourceData->masker == resource))
         m_nonInheritedResourceData.access().masker = resource;
 }
