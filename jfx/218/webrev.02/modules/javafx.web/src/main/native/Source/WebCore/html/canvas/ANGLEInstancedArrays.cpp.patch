diff a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/ANGLEInstancedArrays.cpp b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/ANGLEInstancedArrays.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/ANGLEInstancedArrays.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/html/canvas/ANGLEInstancedArrays.cpp
@@ -26,19 +26,22 @@
 #include "config.h"
 
 #if ENABLE(WEBGL)
 #include "ANGLEInstancedArrays.h"
 
-#if PLATFORM(GTK)
-#include "Extensions3D.h"
+#if PLATFORM(GTK) || USE(ANGLE)
+#include "ExtensionsGL.h"
 #endif
 
 namespace WebCore {
 
 ANGLEInstancedArrays::ANGLEInstancedArrays(WebGLRenderingContextBase& context)
     : WebGLExtension(context)
 {
+#if USE(ANGLE)
+    context.graphicsContextGL()->getExtensions().ensureEnabled("GL_ANGLE_instanced_arrays");
+#endif
 }
 
 ANGLEInstancedArrays::~ANGLEInstancedArrays() = default;
 
 WebGLExtension::ExtensionName ANGLEInstancedArrays::getName() const
@@ -47,35 +50,39 @@
 }
 
 bool ANGLEInstancedArrays::supported(WebGLRenderingContextBase& context)
 {
 #if PLATFORM(COCOA)
+#if USE(ANGLE)
+    return context.graphicsContextGL()->getExtensions().supports("GL_ANGLE_instanced_arrays");
+#else
     UNUSED_PARAM(context);
     return true;
+#endif
 #elif PLATFORM(GTK)
-    return context.graphicsContext3D()->getExtensions().supports("GL_ANGLE_instanced_arrays");
+    return context.graphicsContextGL()->getExtensions().supports("GL_ANGLE_instanced_arrays");
 #else
     UNUSED_PARAM(context);
     return false;
 #endif
 }
 
-void ANGLEInstancedArrays::drawArraysInstancedANGLE(GC3Denum mode, GC3Dint first, GC3Dsizei count, GC3Dsizei primcount)
+void ANGLEInstancedArrays::drawArraysInstancedANGLE(GCGLenum mode, GCGLint first, GCGLsizei count, GCGLsizei primcount)
 {
     if (m_context.isContextLost())
         return;
     m_context.drawArraysInstanced(mode, first, count, primcount);
 }
 
-void ANGLEInstancedArrays::drawElementsInstancedANGLE(GC3Denum mode, GC3Dsizei count, GC3Denum type, long long offset, GC3Dsizei primcount)
+void ANGLEInstancedArrays::drawElementsInstancedANGLE(GCGLenum mode, GCGLsizei count, GCGLenum type, long long offset, GCGLsizei primcount)
 {
     if (m_context.isContextLost())
         return;
     m_context.drawElementsInstanced(mode, count, type, offset, primcount);
 }
 
-void ANGLEInstancedArrays::vertexAttribDivisorANGLE(GC3Duint index, GC3Duint divisor)
+void ANGLEInstancedArrays::vertexAttribDivisorANGLE(GCGLuint index, GCGLuint divisor)
 {
     if (m_context.isContextLost())
         return;
     m_context.vertexAttribDivisor(index, divisor);
 }
