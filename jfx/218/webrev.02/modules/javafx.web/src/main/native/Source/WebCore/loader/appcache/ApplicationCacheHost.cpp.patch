diff a/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.cpp b/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/loader/appcache/ApplicationCacheHost.cpp
@@ -61,10 +61,15 @@
         m_applicationCache->group()->disassociateDocumentLoader(m_documentLoader);
     else if (m_candidateApplicationCacheGroup)
         m_candidateApplicationCacheGroup->disassociateDocumentLoader(m_documentLoader);
 }
 
+ApplicationCacheGroup* ApplicationCacheHost::candidateApplicationCacheGroup() const
+{
+    return m_candidateApplicationCacheGroup.get();
+}
+
 void ApplicationCacheHost::selectCacheWithoutManifest()
 {
     ASSERT(m_documentLoader.frame());
     ApplicationCacheGroup::selectCacheWithoutManifestURL(*m_documentLoader.frame());
 }
@@ -73,10 +78,17 @@
 {
     ASSERT(m_documentLoader.frame());
     ApplicationCacheGroup::selectCache(*m_documentLoader.frame(), manifestURL);
 }
 
+bool ApplicationCacheHost::canLoadMainResource(const ResourceRequest& request)
+{
+    if (!isApplicationCacheEnabled() || isApplicationCacheBlockedForRequest(request))
+        return false;
+    return !!ApplicationCacheGroup::cacheForMainRequest(request, &m_documentLoader);
+}
+
 void ApplicationCacheHost::maybeLoadMainResource(const ResourceRequest& request, SubstituteData& substituteData)
 {
     // Check if this request should be loaded from the application cache
     if (!substituteData.isValid() && isApplicationCacheEnabled() && !isApplicationCacheBlockedForRequest(request)) {
         ASSERT(!m_mainResourceApplicationCache);
@@ -142,11 +154,11 @@
 {
 }
 
 void ApplicationCacheHost::failedLoadingMainResource()
 {
-    auto* group = m_candidateApplicationCacheGroup;
+    auto* group = m_candidateApplicationCacheGroup.get();
     if (!group && m_applicationCache) {
         if (mainResourceApplicationCache()) {
             // Even when the main resource is being loaded from an application cache, loading can fail if aborted.
             return;
         }
@@ -287,11 +299,11 @@
             data = resource->data().copy();
         }
     }
 }
 
-bool ApplicationCacheHost::canCacheInPageCache()
+bool ApplicationCacheHost::canCacheInBackForwardCache()
 {
     return !applicationCache() && !candidateApplicationCacheGroup();
 }
 
 void ApplicationCacheHost::setDOMApplicationCache(DOMApplicationCache* domApplicationCache)
@@ -387,11 +399,11 @@
 }
 
 void ApplicationCacheHost::setCandidateApplicationCacheGroup(ApplicationCacheGroup* group)
 {
     ASSERT(!m_applicationCache);
-    m_candidateApplicationCacheGroup = group;
+    m_candidateApplicationCacheGroup = makeWeakPtr(group);
 }
 
 void ApplicationCacheHost::setApplicationCache(RefPtr<ApplicationCache>&& applicationCache)
 {
     if (m_candidateApplicationCacheGroup) {
@@ -518,22 +530,26 @@
 {
     auto* cache = applicationCache();
     if (!cache)
         return false;
 
+    auto* group = cache->group();
+    if (!group)
+        return false;
+
     // If the group of application caches to which cache belongs has the lifecycle status obsolete, unassociate document from cache.
-    if (cache->group()->isObsolete()) {
-        cache->group()->disassociateDocumentLoader(m_documentLoader);
+    if (group->isObsolete()) {
+        group->disassociateDocumentLoader(m_documentLoader);
         return true;
     }
 
     // If there is no newer cache, raise an InvalidStateError exception.
-    auto* newestCache = cache->group()->newestCache();
-    if (cache == newestCache)
+    auto* newestCache = group->newestCache();
+    if (!newestCache || cache == newestCache)
         return false;
 
-    ASSERT(cache->group() == newestCache->group());
+    ASSERT(group == newestCache->group());
     setApplicationCache(newestCache);
     InspectorInstrumentation::updateApplicationCacheStatus(m_documentLoader.frame());
     return true;
 }
 
