diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSLock.cpp
@@ -51,12 +51,12 @@
 GlobalJSLock::~GlobalJSLock()
 {
     s_sharedInstanceMutex.unlock();
 }
 
-JSLockHolder::JSLockHolder(ExecState* exec)
-    : JSLockHolder(exec->vm())
+JSLockHolder::JSLockHolder(JSGlobalObject* globalObject)
+    : JSLockHolder(globalObject->vm())
 {
 }
 
 JSLockHolder::JSLockHolder(VM* vm)
     : JSLockHolder(*vm)
@@ -202,10 +202,11 @@
 
 void JSLock::willReleaseLock()
 {
     RefPtr<VM> vm = m_vm;
     if (vm) {
+        RELEASE_ASSERT_WITH_MESSAGE(!vm->hasCheckpointOSRSideState(), "Releasing JSLock but pending checkpoint side state still available");
         vm->drainMicrotasks();
 
         if (!vm->topCallFrame)
             vm->clearLastException();
 
@@ -220,18 +221,18 @@
         Thread::current().setCurrentAtomStringTable(m_entryAtomStringTable);
         m_entryAtomStringTable = nullptr;
     }
 }
 
-void JSLock::lock(ExecState* exec)
+void JSLock::lock(JSGlobalObject* globalObject)
 {
-    exec->vm().apiLock().lock();
+    globalObject->vm().apiLock().lock();
 }
 
-void JSLock::unlock(ExecState* exec)
+void JSLock::unlock(JSGlobalObject* globalObject)
 {
-    exec->vm().apiLock().unlock();
+    globalObject->vm().apiLock().unlock();
 }
 
 // This function returns the number of locks that were dropped.
 unsigned JSLock::dropAllLocks(DropAllLocks* dropper)
 {
@@ -277,20 +278,20 @@
 JSLock::DropAllLocks::DropAllLocks(VM* vm)
     : m_droppedLockCount(0)
     // If the VM is in the middle of being destroyed then we don't want to resurrect it
     // by allowing DropAllLocks to ref it. By this point the JSLock has already been
     // released anyways, so it doesn't matter that DropAllLocks is a no-op.
-    , m_vm(vm->refCount() ? vm : nullptr)
+    , m_vm(vm->heap.isShuttingDown() ? nullptr : vm)
 {
     if (!m_vm)
         return;
     RELEASE_ASSERT(!m_vm->apiLock().currentThreadIsHoldingLock() || !m_vm->isCollectorBusyOnCurrentThread());
     m_droppedLockCount = m_vm->apiLock().dropAllLocks(this);
 }
 
-JSLock::DropAllLocks::DropAllLocks(ExecState* exec)
-    : DropAllLocks(exec ? &exec->vm() : nullptr)
+JSLock::DropAllLocks::DropAllLocks(JSGlobalObject* globalObject)
+    : DropAllLocks(globalObject ? &globalObject->vm() : nullptr)
 {
 }
 
 JSLock::DropAllLocks::DropAllLocks(VM& vm)
     : DropAllLocks(&vm)
