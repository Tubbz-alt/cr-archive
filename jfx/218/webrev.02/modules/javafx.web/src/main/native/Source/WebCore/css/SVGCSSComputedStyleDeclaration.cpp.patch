diff a/modules/javafx.web/src/main/native/Source/WebCore/css/SVGCSSComputedStyleDeclaration.cpp b/modules/javafx.web/src/main/native/Source/WebCore/css/SVGCSSComputedStyleDeclaration.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/css/SVGCSSComputedStyleDeclaration.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/css/SVGCSSComputedStyleDeclaration.cpp
@@ -33,17 +33,17 @@
 
 static RefPtr<CSSPrimitiveValue> glyphOrientationToCSSPrimitiveValue(GlyphOrientation orientation)
 {
     switch (orientation) {
     case GlyphOrientation::Degrees0:
-        return CSSPrimitiveValue::create(0.0f, CSSPrimitiveValue::CSS_DEG);
+        return CSSPrimitiveValue::create(0.0f, CSSUnitType::CSS_DEG);
     case GlyphOrientation::Degrees90:
-        return CSSPrimitiveValue::create(90.0f, CSSPrimitiveValue::CSS_DEG);
+        return CSSPrimitiveValue::create(90.0f, CSSUnitType::CSS_DEG);
     case GlyphOrientation::Degrees180:
-        return CSSPrimitiveValue::create(180.0f, CSSPrimitiveValue::CSS_DEG);
+        return CSSPrimitiveValue::create(180.0f, CSSUnitType::CSS_DEG);
     case GlyphOrientation::Degrees270:
-        return CSSPrimitiveValue::create(270.0f, CSSPrimitiveValue::CSS_DEG);
+        return CSSPrimitiveValue::create(270.0f, CSSUnitType::CSS_DEG);
     case GlyphOrientation::Auto:
         return nullptr;
     }
 
     RELEASE_ASSERT_NOT_REACHED();
@@ -63,11 +63,11 @@
 
 Ref<CSSValue> ComputedStyleExtractor::adjustSVGPaintForCurrentColor(SVGPaintType paintType, const String& url, const Color& color, const Color& currentColor) const
 {
     if (paintType >= SVGPaintType::URINone) {
         auto values = CSSValueList::createSpaceSeparated();
-        values->append(CSSPrimitiveValue::create(url, CSSPrimitiveValue::UnitType::CSS_URI));
+        values->append(CSSPrimitiveValue::create(url, CSSUnitType::CSS_URI));
         if (paintType == SVGPaintType::URINone)
             values->append(CSSPrimitiveValue::createIdentifier(CSSValueNone));
         else if (paintType == SVGPaintType::URICurrentColor)
             values->append(CSSPrimitiveValue::create(currentColor));
         else if (paintType == SVGPaintType::URIRGBColor)
@@ -95,40 +95,36 @@
 
     switch (propertyID) {
     case CSSPropertyClipRule:
         return CSSPrimitiveValue::create(svgStyle.clipRule());
     case CSSPropertyFloodOpacity:
-        return CSSPrimitiveValue::create(svgStyle.floodOpacity(), CSSPrimitiveValue::CSS_NUMBER);
+        return CSSPrimitiveValue::create(svgStyle.floodOpacity(), CSSUnitType::CSS_NUMBER);
     case CSSPropertyStopOpacity:
-        return CSSPrimitiveValue::create(svgStyle.stopOpacity(), CSSPrimitiveValue::CSS_NUMBER);
+        return CSSPrimitiveValue::create(svgStyle.stopOpacity(), CSSUnitType::CSS_NUMBER);
     case CSSPropertyColorInterpolation:
         return CSSPrimitiveValue::create(svgStyle.colorInterpolation());
     case CSSPropertyColorInterpolationFilters:
         return CSSPrimitiveValue::create(svgStyle.colorInterpolationFilters());
     case CSSPropertyFillOpacity:
-        return CSSPrimitiveValue::create(svgStyle.fillOpacity(), CSSPrimitiveValue::CSS_NUMBER);
+        return CSSPrimitiveValue::create(svgStyle.fillOpacity(), CSSUnitType::CSS_NUMBER);
     case CSSPropertyFillRule:
         return CSSPrimitiveValue::create(svgStyle.fillRule());
     case CSSPropertyColorRendering:
         return CSSPrimitiveValue::create(svgStyle.colorRendering());
     case CSSPropertyShapeRendering:
         return CSSPrimitiveValue::create(svgStyle.shapeRendering());
     case CSSPropertyStrokeOpacity:
-        return CSSPrimitiveValue::create(svgStyle.strokeOpacity(), CSSPrimitiveValue::CSS_NUMBER);
+        return CSSPrimitiveValue::create(svgStyle.strokeOpacity(), CSSUnitType::CSS_NUMBER);
     case CSSPropertyAlignmentBaseline:
         return CSSPrimitiveValue::create(svgStyle.alignmentBaseline());
     case CSSPropertyDominantBaseline:
         return CSSPrimitiveValue::create(svgStyle.dominantBaseline());
     case CSSPropertyTextAnchor:
         return CSSPrimitiveValue::create(svgStyle.textAnchor());
-    case CSSPropertyClipPath:
-        if (!svgStyle.clipperResource().isEmpty())
-            return CSSPrimitiveValue::create(svgStyle.clipperResource(), CSSPrimitiveValue::CSS_URI);
-        return CSSPrimitiveValue::createIdentifier(CSSValueNone);
     case CSSPropertyMask:
         if (!svgStyle.maskerResource().isEmpty())
-            return CSSPrimitiveValue::create(svgStyle.maskerResource(), CSSPrimitiveValue::CSS_URI);
+            return CSSPrimitiveValue::create(svgStyle.maskerResource(), CSSUnitType::CSS_URI);
         return CSSPrimitiveValue::createIdentifier(CSSValueNone);
     case CSSPropertyFloodColor:
         return currentColorOrValidColor(style, svgStyle.floodColor());
     case CSSPropertyLightingColor:
         return currentColorOrValidColor(style, svgStyle.lightingColor());
@@ -138,19 +134,19 @@
         return adjustSVGPaintForCurrentColor(svgStyle.fillPaintType(), svgStyle.fillPaintUri(), svgStyle.fillPaintColor(), style->color());
     case CSSPropertyKerning:
         return SVGLengthValue::toCSSPrimitiveValue(svgStyle.kerning());
     case CSSPropertyMarkerEnd:
         if (!svgStyle.markerEndResource().isEmpty())
-            return CSSPrimitiveValue::create(svgStyle.markerEndResource(), CSSPrimitiveValue::CSS_URI);
+            return CSSPrimitiveValue::create(svgStyle.markerEndResource(), CSSUnitType::CSS_URI);
         return CSSPrimitiveValue::createIdentifier(CSSValueNone);
     case CSSPropertyMarkerMid:
         if (!svgStyle.markerMidResource().isEmpty())
-            return CSSPrimitiveValue::create(svgStyle.markerMidResource(), CSSPrimitiveValue::CSS_URI);
+            return CSSPrimitiveValue::create(svgStyle.markerMidResource(), CSSUnitType::CSS_URI);
         return CSSPrimitiveValue::createIdentifier(CSSValueNone);
     case CSSPropertyMarkerStart:
         if (!svgStyle.markerStartResource().isEmpty())
-            return CSSPrimitiveValue::create(svgStyle.markerStartResource(), CSSPrimitiveValue::CSS_URI);
+            return CSSPrimitiveValue::create(svgStyle.markerStartResource(), CSSUnitType::CSS_URI);
         return CSSPrimitiveValue::createIdentifier(CSSValueNone);
     case CSSPropertyStroke:
         return adjustSVGPaintForCurrentColor(svgStyle.strokePaintType(), svgStyle.strokePaintUri(), svgStyle.strokePaintColor(), style->color());
     case CSSPropertyStrokeDasharray:
         return strokeDashArrayToCSSValueList(svgStyle.strokeDashArray());
@@ -193,10 +189,9 @@
     default:
         // If you crash here, it's because you added a css property and are not handling it
         // in either this switch statement or the one in CSSComputedStyleDelcaration::getPropertyCSSValue
         ASSERT_WITH_MESSAGE(0, "unimplemented propertyID: %d", propertyID);
     }
-    LOG_ERROR("unimplemented propertyID: %d", propertyID);
     return nullptr;
 }
 
 }
