diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGBasicBlock.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGBasicBlock.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGBasicBlock.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGBasicBlock.cpp
@@ -30,33 +30,33 @@
 
 #include "JSCInlines.h"
 
 namespace JSC { namespace DFG {
 
-BasicBlock::BasicBlock(
-    unsigned bytecodeBegin, unsigned numArguments, unsigned numLocals, float executionCount)
+DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(BasicBlock);
+
+BasicBlock::BasicBlock(BytecodeIndex bytecodeBegin, unsigned numArguments, unsigned numLocals, unsigned numTmps, float executionCount)
     : bytecodeBegin(bytecodeBegin)
     , index(NoBlock)
     , cfaStructureClobberStateAtHead(StructuresAreWatched)
     , cfaStructureClobberStateAtTail(StructuresAreWatched)
     , cfaBranchDirection(InvalidBranchDirection)
     , cfaHasVisited(false)
     , cfaShouldRevisit(false)
-    , cfaFoundConstants(false)
     , cfaDidFinish(true)
     , intersectionOfCFAHasVisited(true)
     , isOSRTarget(false)
     , isCatchEntrypoint(false)
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     , isLinked(false)
 #endif
     , isReachable(false)
-    , variablesAtHead(numArguments, numLocals)
-    , variablesAtTail(numArguments, numLocals)
-    , valuesAtHead(numArguments, numLocals)
-    , valuesAtTail(numArguments, numLocals)
-    , intersectionOfPastValuesAtHead(numArguments, numLocals, AbstractValue::fullTop())
+    , variablesAtHead(numArguments, numLocals, numTmps)
+    , variablesAtTail(numArguments, numLocals, numTmps)
+    , valuesAtHead(numArguments, numLocals, numTmps)
+    , valuesAtTail(numArguments, numLocals, numTmps)
+    , intersectionOfPastValuesAtHead(numArguments, numLocals, numTmps, AbstractValue::fullTop())
     , executionCount(executionCount)
 {
 }
 
 BasicBlock::~BasicBlock()
@@ -70,10 +70,19 @@
     valuesAtHead.ensureLocals(newNumLocals);
     valuesAtTail.ensureLocals(newNumLocals);
     intersectionOfPastValuesAtHead.ensureLocals(newNumLocals, AbstractValue::fullTop());
 }
 
+void BasicBlock::ensureTmps(unsigned newNumTmps)
+{
+    variablesAtHead.ensureTmps(newNumTmps);
+    variablesAtTail.ensureTmps(newNumTmps);
+    valuesAtHead.ensureTmps(newNumTmps);
+    valuesAtTail.ensureTmps(newNumTmps);
+    intersectionOfPastValuesAtHead.ensureTmps(newNumTmps, AbstractValue::fullTop());
+}
+
 void BasicBlock::replaceTerminal(Graph& graph, Node* node)
 {
     NodeAndIndex result = findTerminal();
     if (!result)
         append(node);
