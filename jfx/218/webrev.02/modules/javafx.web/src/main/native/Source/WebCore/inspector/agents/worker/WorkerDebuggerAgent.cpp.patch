diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/worker/WorkerDebuggerAgent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/worker/WorkerDebuggerAgent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/worker/WorkerDebuggerAgent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/worker/WorkerDebuggerAgent.cpp
@@ -46,22 +46,22 @@
     ASSERT(context.workerGlobalScope.isContextThread());
 }
 
 WorkerDebuggerAgent::~WorkerDebuggerAgent() = default;
 
-void WorkerDebuggerAgent::breakpointActionLog(ExecState& state, const String& message)
+void WorkerDebuggerAgent::breakpointActionLog(JSGlobalObject* lexicalGlobalObject, const String& message)
 {
-    m_workerGlobalScope.addConsoleMessage(makeUnique<ConsoleMessage>(MessageSource::JS, MessageType::Log, MessageLevel::Log, message, createScriptCallStack(&state)));
+    m_workerGlobalScope.addConsoleMessage(makeUnique<ConsoleMessage>(MessageSource::JS, MessageType::Log, MessageLevel::Log, message, createScriptCallStack(lexicalGlobalObject)));
 }
 
 InjectedScript WorkerDebuggerAgent::injectedScriptForEval(ErrorString& errorString, const int* executionContextId)
 {
     if (executionContextId) {
         errorString = "executionContextId is not supported for workers as there is only one execution context"_s;
         return InjectedScript();
     }
 
-    JSC::ExecState* scriptState = execStateFromWorkerGlobalScope(m_workerGlobalScope);
+    JSC::JSGlobalObject* scriptState = execStateFromWorkerGlobalScope(m_workerGlobalScope);
     return injectedScriptManager().injectedScriptFor(scriptState);
 }
 
 } // namespace WebCore
