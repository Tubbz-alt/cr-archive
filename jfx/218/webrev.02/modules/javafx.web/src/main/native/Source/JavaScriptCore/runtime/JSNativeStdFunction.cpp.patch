diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSNativeStdFunction.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSNativeStdFunction.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSNativeStdFunction.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/JSNativeStdFunction.cpp
@@ -28,50 +28,47 @@
 
 #include "JSCInlines.h"
 #include "JSFunction.h"
 #include "JSFunctionInlines.h"
 #include "JSObject.h"
-#include "NativeStdFunctionCell.h"
 #include "VM.h"
 
 namespace JSC {
 
 const ClassInfo JSNativeStdFunction::s_info = { "Function", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSNativeStdFunction) };
 
-JSNativeStdFunction::JSNativeStdFunction(VM& vm, JSGlobalObject* globalObject, Structure* structure)
-    : Base(vm, globalObject, structure)
+JSNativeStdFunction::JSNativeStdFunction(VM& vm, NativeExecutable* executable, JSGlobalObject* globalObject, Structure* structure, NativeStdFunction&& function)
+    : Base(vm, executable, globalObject, structure)
+    , m_function(WTFMove(function))
 {
 }
 
 void JSNativeStdFunction::visitChildren(JSCell* cell, SlotVisitor& visitor)
 {
     JSNativeStdFunction* thisObject = jsCast<JSNativeStdFunction*>(cell);
     ASSERT_GC_OBJECT_INHERITS(thisObject, info());
     Base::visitChildren(thisObject, visitor);
-    visitor.append(thisObject->m_functionCell);
 }
 
-void JSNativeStdFunction::finishCreation(VM& vm, NativeExecutable* executable, int length, const String& name, NativeStdFunctionCell* functionCell)
+void JSNativeStdFunction::finishCreation(VM& vm, NativeExecutable* executable, int length, const String& name)
 {
     Base::finishCreation(vm, executable, length, name);
     ASSERT(inherits(vm, info()));
-    m_functionCell.set(vm, this, functionCell);
 }
 
-static EncodedJSValue JSC_HOST_CALL runStdFunction(ExecState* state)
+static EncodedJSValue JSC_HOST_CALL runStdFunction(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    JSNativeStdFunction* function = jsCast<JSNativeStdFunction*>(state->jsCallee());
+    JSNativeStdFunction* function = jsCast<JSNativeStdFunction*>(callFrame->jsCallee());
     ASSERT(function);
-    return function->nativeStdFunctionCell()->function()(state);
+    return function->function()(globalObject, callFrame);
 }
 
 JSNativeStdFunction* JSNativeStdFunction::create(VM& vm, JSGlobalObject* globalObject, int length, const String& name, NativeStdFunction&& nativeStdFunction, Intrinsic intrinsic, NativeFunction nativeConstructor)
 {
     NativeExecutable* executable = vm.getHostFunction(runStdFunction, intrinsic, nativeConstructor, nullptr, name);
-    NativeStdFunctionCell* functionCell = NativeStdFunctionCell::create(vm, WTFMove(nativeStdFunction));
     Structure* structure = globalObject->nativeStdFunctionStructure();
-    JSNativeStdFunction* function = new (NotNull, allocateCell<JSNativeStdFunction>(vm.heap)) JSNativeStdFunction(vm, globalObject, structure);
-    function->finishCreation(vm, executable, length, name, functionCell);
+    JSNativeStdFunction* function = new (NotNull, allocateCell<JSNativeStdFunction>(vm.heap)) JSNativeStdFunction(vm, executable, globalObject, structure, WTFMove(nativeStdFunction));
+    function->finishCreation(vm, executable, length, name);
     return function;
 }
 
 } // namespace JSC
