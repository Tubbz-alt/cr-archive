diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPURenderPipeline.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPURenderPipeline.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPURenderPipeline.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/gpu/GPURenderPipeline.h
@@ -25,11 +25,12 @@
 
 #pragma once
 
 #if ENABLE(WEBGPU)
 
-#include "GPUObjectBase.h"
+#include "GPUPipeline.h"
+#include "GPUProgrammableStageDescriptor.h"
 #include "GPURenderPipelineDescriptor.h"
 #include <wtf/Optional.h>
 #include <wtf/RefCounted.h>
 #include <wtf/RefPtr.h>
 #include <wtf/RetainPtr.h>
@@ -40,34 +41,47 @@
 #endif // USE(METAL)
 
 namespace WebCore {
 
 class GPUDevice;
+class GPUErrorScopes;
 
 using PlatformRenderPipeline = MTLRenderPipelineState;
 using PlatformRenderPipelineSmartPtr = RetainPtr<MTLRenderPipelineState>;
 
-class GPURenderPipeline : public GPUObjectBase {
+class GPURenderPipeline final : public GPUPipeline {
 public:
+    virtual ~GPURenderPipeline();
+
     static RefPtr<GPURenderPipeline> tryCreate(const GPUDevice&, const GPURenderPipelineDescriptor&, GPUErrorScopes&);
 
+    bool isRenderPipeline() const { return true; }
+
+    bool recompile(const GPUDevice&, GPUProgrammableStageDescriptor&& vertexStage, Optional<GPUProgrammableStageDescriptor>&& fragmentStage);
+
 #if USE(METAL)
     MTLDepthStencilState *depthStencilState() const { return m_depthStencilState.get(); }
 #endif
     PlatformRenderPipeline* platformRenderPipeline() const { return m_platformRenderPipeline.get(); }
     GPUPrimitiveTopology primitiveTopology() const { return m_primitiveTopology; }
     Optional<GPUIndexFormat> indexFormat() const { return m_indexFormat; }
 
 private:
 #if USE(METAL)
-    GPURenderPipeline(RetainPtr<MTLDepthStencilState>&&, PlatformRenderPipelineSmartPtr&&, GPUPrimitiveTopology, Optional<GPUIndexFormat>, GPUErrorScopes&);
+    GPURenderPipeline(RetainPtr<MTLDepthStencilState>&&, PlatformRenderPipelineSmartPtr&&, GPUPrimitiveTopology, Optional<GPUIndexFormat>, const RefPtr<GPUPipelineLayout>&, const GPURenderPipelineDescriptorBase&);
 
     RetainPtr<MTLDepthStencilState> m_depthStencilState;
 #endif // USE(METAL)
     PlatformRenderPipelineSmartPtr m_platformRenderPipeline;
     GPUPrimitiveTopology m_primitiveTopology;
     Optional<GPUIndexFormat> m_indexFormat;
+
+    // Preserved for Web Inspector recompilation.
+    RefPtr<GPUPipelineLayout> m_layout;
+    GPURenderPipelineDescriptorBase m_renderDescriptorBase;
 };
 
 } // namespace WebCore
 
+SPECIALIZE_TYPE_TRAITS_GPUPIPELINE(WebCore::GPURenderPipeline, isRenderPipeline())
+
 #endif // ENABLE(WEBGPU)
