diff a/modules/javafx.web/src/main/native/Source/WebCore/crypto/algorithms/CryptoAlgorithmECDH.h b/modules/javafx.web/src/main/native/Source/WebCore/crypto/algorithms/CryptoAlgorithmECDH.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/crypto/algorithms/CryptoAlgorithmECDH.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/crypto/algorithms/CryptoAlgorithmECDH.h
@@ -37,20 +37,21 @@
 public:
     static constexpr const char* s_name = "ECDH";
     static constexpr CryptoAlgorithmIdentifier s_identifier = CryptoAlgorithmIdentifier::ECDH;
     static Ref<CryptoAlgorithm> create();
 
+    // Operations can be performed directly.
+    WEBCORE_EXPORT static Optional<Vector<uint8_t>> platformDeriveBits(const CryptoKeyEC&, const CryptoKeyEC&);
+
 private:
     CryptoAlgorithmECDH() = default;
     CryptoAlgorithmIdentifier identifier() const final;
 
     void generateKey(const CryptoAlgorithmParameters&, bool extractable, CryptoKeyUsageBitmap, KeyOrKeyPairCallback&&, ExceptionCallback&&, ScriptExecutionContext&) final;
     void deriveBits(const CryptoAlgorithmParameters&, Ref<CryptoKey>&&, size_t length, VectorCallback&&, ExceptionCallback&&, ScriptExecutionContext&, WorkQueue&) final;
     void importKey(CryptoKeyFormat, KeyData&&, const CryptoAlgorithmParameters&, bool extractable, CryptoKeyUsageBitmap, KeyCallback&&, ExceptionCallback&&) final;
     void exportKey(CryptoKeyFormat, Ref<CryptoKey>&&, KeyDataCallback&&, ExceptionCallback&&) final;
-
-    static Optional<Vector<uint8_t>> platformDeriveBits(const CryptoKeyEC&, const CryptoKeyEC&);
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(WEB_CRYPTO)
