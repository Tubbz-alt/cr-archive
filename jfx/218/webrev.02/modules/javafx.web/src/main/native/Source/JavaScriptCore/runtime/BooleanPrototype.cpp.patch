diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BooleanPrototype.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BooleanPrototype.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BooleanPrototype.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/BooleanPrototype.cpp
@@ -28,12 +28,12 @@
 #include "ObjectPrototype.h"
 #include "JSCInlines.h"
 
 namespace JSC {
 
-static EncodedJSValue JSC_HOST_CALL booleanProtoFuncToString(ExecState*);
-static EncodedJSValue JSC_HOST_CALL booleanProtoFuncValueOf(ExecState*);
+static EncodedJSValue JSC_HOST_CALL booleanProtoFuncToString(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL booleanProtoFuncValueOf(JSGlobalObject*, CallFrame*);
 
 }
 
 #include "BooleanPrototype.lut.h"
 
@@ -63,43 +63,43 @@
     ASSERT(inherits(vm, info()));
 }
 
 // ------------------------------ Functions ---------------------------
 
-EncodedJSValue JSC_HOST_CALL booleanProtoFuncToString(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL booleanProtoFuncToString(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
-    JSValue thisValue = exec->thisValue();
+    JSValue thisValue = callFrame->thisValue();
     if (thisValue == jsBoolean(false))
         return JSValue::encode(vm.smallStrings.falseString());
 
     if (thisValue == jsBoolean(true))
         return JSValue::encode(vm.smallStrings.trueString());
 
     auto* thisObject = jsDynamicCast<BooleanObject*>(vm, thisValue);
     if (UNLIKELY(!thisObject))
-        return throwVMTypeError(exec, scope);
+        return throwVMTypeError(globalObject, scope);
 
     if (thisObject->internalValue() == jsBoolean(false))
         return JSValue::encode(vm.smallStrings.falseString());
 
     ASSERT(thisObject->internalValue() == jsBoolean(true));
     return JSValue::encode(vm.smallStrings.trueString());
 }
 
-EncodedJSValue JSC_HOST_CALL booleanProtoFuncValueOf(ExecState* exec)
+EncodedJSValue JSC_HOST_CALL booleanProtoFuncValueOf(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
-    JSValue thisValue = exec->thisValue();
+    JSValue thisValue = callFrame->thisValue();
     if (thisValue.isBoolean())
         return JSValue::encode(thisValue);
 
     auto* thisObject = jsDynamicCast<BooleanObject*>(vm, thisValue);
     if (UNLIKELY(!thisObject))
-        return throwVMTypeError(exec, scope);
+        return throwVMTypeError(globalObject, scope);
 
     return JSValue::encode(thisObject->internalValue());
 }
 
 } // namespace JSC
