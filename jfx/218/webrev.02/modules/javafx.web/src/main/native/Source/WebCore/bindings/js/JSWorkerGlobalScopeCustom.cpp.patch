diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSWorkerGlobalScopeCustom.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSWorkerGlobalScopeCustom.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSWorkerGlobalScopeCustom.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSWorkerGlobalScopeCustom.cpp
@@ -24,14 +24,14 @@
  */
 
 #include "config.h"
 #include "JSWorkerGlobalScope.h"
 
+#include "JSDOMExceptionHandling.h"
 #include "WorkerGlobalScope.h"
 #include <JavaScriptCore/JSMicrotask.h>
 
-
 namespace WebCore {
 using namespace JSC;
 
 void JSWorkerGlobalScope::visitAdditionalChildren(SlotVisitor& visitor)
 {
@@ -46,21 +46,21 @@
     // even though WorkerGlobalScope is an EventTarget, JSWorkerGlobalScope does not subclass
     // JSEventTarget, so we need to do this here.
     wrapped().visitJSEventListeners(visitor);
 }
 
-JSValue JSWorkerGlobalScope::queueMicrotask(ExecState& state)
+JSValue JSWorkerGlobalScope::queueMicrotask(JSGlobalObject& lexicalGlobalObject, CallFrame& callFrame)
 {
-    VM& vm = state.vm();
+    VM& vm = lexicalGlobalObject.vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
 
-    if (UNLIKELY(state.argumentCount() < 1))
-        return throwException(&state, scope, createNotEnoughArgumentsError(&state));
+    if (UNLIKELY(callFrame.argumentCount() < 1))
+        return throwException(&lexicalGlobalObject, scope, createNotEnoughArgumentsError(&lexicalGlobalObject));
 
-    JSValue functionValue = state.uncheckedArgument(0);
+    JSValue functionValue = callFrame.uncheckedArgument(0);
     if (UNLIKELY(!functionValue.isFunction(vm)))
-        return JSValue::decode(throwArgumentMustBeFunctionError(state, scope, 0, "callback", "WorkerGlobalScope", "queueMicrotask"));
+        return JSValue::decode(throwArgumentMustBeFunctionError(lexicalGlobalObject, scope, 0, "callback", "WorkerGlobalScope", "queueMicrotask"));
 
     scope.release();
     Base::queueMicrotask(JSC::createJSMicrotask(vm, functionValue));
     return jsUndefined();
 }
