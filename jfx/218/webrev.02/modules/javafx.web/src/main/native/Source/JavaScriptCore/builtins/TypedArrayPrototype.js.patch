diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/TypedArrayPrototype.js b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/TypedArrayPrototype.js
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/TypedArrayPrototype.js
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/TypedArrayPrototype.js
@@ -33,11 +33,11 @@
 // constructor every time.
 @globalPrivate
 function typedArraySpeciesConstructor(value)
 {
     "use strict";
-    let constructor = value.constructor;
+    var constructor = value.constructor;
     if (constructor === @undefined)
         return @typedArrayGetOriginalConstructor(value);
 
     if (!@isObject(constructor))
         @throwTypeError("|this|.constructor is not an Object or undefined");
@@ -58,39 +58,18 @@
     "use strict";
 
     if (value === @undefined)
         return undefinedValue;
 
-    let int = @toInteger(value);
+    var int = @toInteger(value);
     if (int < 0) {
         int += length;
         return int < 0 ? 0 : int;
     }
     return int > length ? length : int;
 }
 
-function values()
-{
-    "use strict";
-    @typedArrayLength(this);
-    return new @ArrayIterator(this, "value", @arrayIteratorValueNext);
-}
-
-function keys()
-{
-    "use strict";
-    @typedArrayLength(this);
-    return new @ArrayIterator(this, "key", @arrayIteratorKeyNext);
-}
-
-function entries()
-{
-    "use strict";
-    @typedArrayLength(this);
-    return new @ArrayIterator(this, "key+value", @arrayIteratorKeyValueNext);
-}
-
 function every(callback /*, thisArg */)
 {
     "use strict";
     var length = @typedArrayLength(this);
     var thisArg = @argument(1);
@@ -108,19 +87,19 @@
 
 function fill(value /* [, start [, end]] */)
 {
     "use strict";
 
-    let length = @typedArrayLength(this);
+    var length = @typedArrayLength(this);
 
-    let start = @argument(1);
-    let end = @argument(2);
+    var start = @argument(1);
+    var end = @argument(2);
 
     start = @typedArrayClampArgumentToStartOrEnd(start, length, 0);
     end = @typedArrayClampArgumentToStartOrEnd(end, length, length);
 
-    for (let i = start; i < end; i++)
+    for (var i = start; i < end; i++)
         this[i] = value;
     return this;
 }
 
 function find(callback /* [, thisArg] */)
@@ -131,11 +110,11 @@
 
     if (typeof callback !== "function")
         @throwTypeError("TypedArray.prototype.find callback must be a function");
 
     for (var i = 0; i < length; i++) {
-        let elem = this[i];
+        var elem = this[i];
         if (callback.@call(thisArg, elem, i, this))
             return elem;
     }
     return @undefined;
 }
@@ -257,16 +236,16 @@
     "use strict";
 
     if (!@isTypedArrayView(this))
         @throwTypeError("|this| should be a typed array view");
 
-    let start = @toInteger(begin);
-    let finish;
+    var start = @toInteger(begin);
+    var finish;
     if (end !== @undefined)
         finish = @toInteger(end);
 
-    let constructor = @typedArraySpeciesConstructor(this);
+    var constructor = @typedArraySpeciesConstructor(this);
 
     return @typedArraySubarrayCreate.@call(this, start, finish, constructor);
 }
 
 function reduce(callback /* [, initialValue] */)
