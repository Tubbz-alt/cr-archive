diff a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextStream.h b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextStream.h
--- a/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextStream.h
+++ b/modules/javafx.web/src/main/native/Source/WTF/wtf/text/TextStream.h
@@ -24,10 +24,12 @@
  */
 
 #pragma once
 
 #include <wtf/Forward.h>
+#include <wtf/Markable.h>
+#include <wtf/Optional.h>
 #include <wtf/text/StringBuilder.h>
 
 namespace WTF {
 
 class TextStream {
@@ -55,10 +57,11 @@
         , m_multiLineMode(lineMode == LineMode::MultipleLine)
     {
     }
 
     WTF_EXPORT_PRIVATE TextStream& operator<<(bool);
+    WTF_EXPORT_PRIVATE TextStream& operator<<(char);
     WTF_EXPORT_PRIVATE TextStream& operator<<(int);
     WTF_EXPORT_PRIVATE TextStream& operator<<(unsigned);
     WTF_EXPORT_PRIVATE TextStream& operator<<(long);
     WTF_EXPORT_PRIVATE TextStream& operator<<(unsigned long);
     WTF_EXPORT_PRIVATE TextStream& operator<<(long long);
@@ -171,10 +174,28 @@
 {
     ts.writeIndent();
     return ts;
 }
 
+template<typename Item>
+TextStream& operator<<(TextStream& ts, const Optional<Item>& item)
+{
+    if (item)
+        return ts << item.value();
+
+    return ts << "nullopt";
+}
+
+template<typename T, typename Traits>
+TextStream& operator<<(TextStream& ts, const Markable<T, Traits>& item)
+{
+    if (item)
+        return ts << item.value();
+
+    return ts << "unset";
+}
+
 template<typename Item>
 TextStream& operator<<(TextStream& ts, const Vector<Item>& vector)
 {
     ts << "[";
 
@@ -186,10 +207,42 @@
     }
 
     return ts << "]";
 }
 
+template<typename KeyArg, typename MappedArg, typename HashArg, typename KeyTraitsArg, typename MappedTraitsArg>
+TextStream& operator<<(TextStream& ts, const HashMap<KeyArg, MappedArg, HashArg, KeyTraitsArg, MappedTraitsArg>& map)
+{
+    ts << "{";
+
+    bool first = true;
+    for (const auto& keyValuePair : map) {
+        ts << keyValuePair.key << ": " << keyValuePair.value;
+        if (!first)
+            ts << ", ";
+        first = false;
+    }
+
+    return ts << "}";
+}
+
+template<typename ValueArg, typename HashArg, typename TraitsArg>
+TextStream& operator<<(TextStream& ts, const HashSet<ValueArg, HashArg, TraitsArg>& set)
+{
+    ts << "[";
+
+    bool first = true;
+    for (const auto& item : set) {
+        ts << item;
+        if (!first)
+            ts << ", ";
+        first = false;
+    }
+
+    return ts << "]";
+}
+
 template<typename Option>
 TextStream& operator<<(TextStream& ts, const OptionSet<Option>& options)
 {
     ts << "[";
     bool needComma = false;
