diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGRenderTreeAsText.cpp b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGRenderTreeAsText.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGRenderTreeAsText.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/svg/SVGRenderTreeAsText.cpp
@@ -200,10 +200,15 @@
             writeIfNotDefault(ts, "line join", style.joinStyle(), MiterJoin);
             writeIfNotDefault(ts, "dash offset", dashOffset, 0.0);
             if (!dashArray.isEmpty())
                 writeNameValuePair(ts, "dash array", dashArray);
 
+            if (is<SVGGeometryElement>(shape.graphicsElement())) {
+                double pathLength = downcast<SVGGeometryElement>(shape.graphicsElement()).pathLength();
+                writeIfNotDefault(ts, "path length", pathLength, 0.0);
+            }
+
             ts << "}]";
         }
 
         if (RenderSVGResource* fillPaintingResource = RenderSVGResource::fillPaintingResource(const_cast<RenderSVGShape&>(shape), shape.style(), fallbackColor)) {
             TextStreamSeparator s(" ");
@@ -561,14 +566,16 @@
             ts << " ";
             writeStandardPrefix(ts, *masker, behavior, WriteIndentOrNot::No);
             ts << " " << masker->resourceBoundingBox(renderer) << "\n";
         }
     }
-    if (!svgStyle.clipperResource().isEmpty()) {
-        if (RenderSVGResourceClipper* clipper = getRenderSVGResourceById<RenderSVGResourceClipper>(renderer.document(), svgStyle.clipperResource())) {
+    if (style.clipPath() && is<ReferenceClipPathOperation>(style.clipPath())) {
+        auto resourceClipPath = downcast<ReferenceClipPathOperation>(style.clipPath());
+        AtomString id = resourceClipPath->fragment();
+        if (RenderSVGResourceClipper* clipper = getRenderSVGResourceById<RenderSVGResourceClipper>(renderer.document(), id)) {
             ts << indent << " ";
-            writeNameAndQuotedValue(ts, "clipPath", svgStyle.clipperResource());
+            writeNameAndQuotedValue(ts, "clipPath", resourceClipPath->fragment());
             ts << " ";
             writeStandardPrefix(ts, *clipper, behavior, WriteIndentOrNot::No);
             ts << " " << clipper->resourceBoundingBox(renderer) << "\n";
         }
     }
