diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/ThreadTimers.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/ThreadTimers.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/ThreadTimers.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/ThreadTimers.h
@@ -54,17 +54,20 @@
     ThreadTimerHeap& timerHeap() { return m_timerHeap; }
 
     void updateSharedTimer();
     void fireTimersInNestedEventLoop();
 
+    unsigned nextHeapInsertionCount() { return m_currentHeapInsertionOrder++; }
+
 private:
     void sharedTimerFiredInternal();
     void fireTimersInNestedEventLoopInternal();
 
     ThreadTimerHeap m_timerHeap;
     SharedTimer* m_sharedTimer { nullptr }; // External object, can be a run loop on a worker thread. Normally set/reset by worker thread.
     bool m_firingTimers { false }; // Reentrancy guard.
+    unsigned m_currentHeapInsertionOrder { 0 };
     MonotonicTime m_pendingSharedTimerFireTime;
 };
 
 struct ThreadTimerHeapItem : ThreadSafeRefCounted<ThreadTimerHeapItem> {
     static RefPtr<ThreadTimerHeapItem> create(TimerBase&, MonotonicTime, unsigned);
