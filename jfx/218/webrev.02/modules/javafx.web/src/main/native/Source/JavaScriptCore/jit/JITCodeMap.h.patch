diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITCodeMap.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITCodeMap.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITCodeMap.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/jit/JITCodeMap.h
@@ -32,51 +32,67 @@
 #include <wtf/Vector.h>
 
 namespace JSC {
 
 class JITCodeMap {
-private:
-    struct Entry {
-        Entry() { }
+public:
+    static_assert(std::is_trivially_destructible_v<BytecodeIndex>);
+    static_assert(std::is_trivially_destructible_v<CodeLocationLabel<JSEntryPtrTag>>);
+    static_assert(alignof(CodeLocationLabel<JSEntryPtrTag>) >= alignof(BytecodeIndex), "Putting CodeLocationLabel vector first since we can avoid alignment consideration of BytecodeIndex vector");
+    JITCodeMap() = default;
+    JITCodeMap(Vector<BytecodeIndex>&& indexes, Vector<CodeLocationLabel<JSEntryPtrTag>>&& codeLocations)
+        : m_size(indexes.size())
+    {
+        ASSERT(indexes.size() == codeLocations.size());
+        m_pointer = MallocPtr<uint8_t>::malloc(sizeof(CodeLocationLabel<JSEntryPtrTag>) * m_size + sizeof(BytecodeIndex) * m_size);
+        std::copy(codeLocations.begin(), codeLocations.end(), this->codeLocations());
+        std::copy(indexes.begin(), indexes.end(), this->indexes());
+    }
 
-        Entry(unsigned bytecodeIndex, CodeLocationLabel<JSEntryPtrTag> codeLocation)
-            : m_bytecodeIndex(bytecodeIndex)
-            , m_codeLocation(codeLocation)
-        { }
+    CodeLocationLabel<JSEntryPtrTag> find(BytecodeIndex bytecodeIndex) const
+    {
+        auto* index = binarySearch<BytecodeIndex, BytecodeIndex>(indexes(), m_size, bytecodeIndex, [] (BytecodeIndex* index) { return *index; });
+        if (!index)
+            return CodeLocationLabel<JSEntryPtrTag>();
+        return codeLocations()[index - indexes()];
+    }
 
-        inline unsigned bytecodeIndex() const { return m_bytecodeIndex; }
-        inline CodeLocationLabel<JSEntryPtrTag> codeLocation() { return m_codeLocation; }
+    explicit operator bool() const { return m_size; }
 
-    private:
-        unsigned m_bytecodeIndex;
-        CodeLocationLabel<JSEntryPtrTag> m_codeLocation;
-    };
+private:
+    CodeLocationLabel<JSEntryPtrTag>* codeLocations() const
+    {
+        return bitwise_cast<CodeLocationLabel<JSEntryPtrTag>*>(m_pointer.get());
+    }
 
-public:
-    void append(unsigned bytecodeIndex, CodeLocationLabel<JSEntryPtrTag> codeLocation)
+    BytecodeIndex* indexes() const
     {
-        m_entries.append({ bytecodeIndex, codeLocation });
+        return bitwise_cast<BytecodeIndex*>(m_pointer.get() + sizeof(CodeLocationLabel<JSEntryPtrTag>) * m_size);
     }
 
-    void finish() { m_entries.shrinkToFit(); }
+    MallocPtr<uint8_t> m_pointer;
+    unsigned m_size { 0 };
+};
 
-    CodeLocationLabel<JSEntryPtrTag> find(unsigned bytecodeIndex) const
+class JITCodeMapBuilder {
+    WTF_MAKE_NONCOPYABLE(JITCodeMapBuilder);
+public:
+    JITCodeMapBuilder() = default;
+    void append(BytecodeIndex bytecodeIndex, CodeLocationLabel<JSEntryPtrTag> codeLocation)
     {
-        auto* entry =
-            binarySearch<Entry, unsigned>(m_entries,
-                m_entries.size(), bytecodeIndex, [] (Entry* entry) {
-                    return entry->bytecodeIndex();
-                });
-        if (!entry)
-            return CodeLocationLabel<JSEntryPtrTag>();
-        return entry->codeLocation();
+        m_indexes.append(bytecodeIndex);
+        m_codeLocations.append(codeLocation);
     }
 
-    explicit operator bool() const { return m_entries.size(); }
+    JITCodeMap finalize()
+    {
+        return JITCodeMap(WTFMove(m_indexes), WTFMove(m_codeLocations));
+    }
 
 private:
-    Vector<Entry> m_entries;
+    Vector<BytecodeIndex> m_indexes;
+    Vector<CodeLocationLabel<JSEntryPtrTag>> m_codeLocations;
 };
 
 } // namespace JSC
 
 #endif // ENABLE(JIT)
