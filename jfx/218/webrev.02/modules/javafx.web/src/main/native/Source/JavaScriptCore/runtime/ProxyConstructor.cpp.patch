diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ProxyConstructor.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ProxyConstructor.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ProxyConstructor.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/ProxyConstructor.cpp
@@ -46,68 +46,68 @@
     ProxyConstructor* constructor = new (NotNull, allocateCell<ProxyConstructor>(vm.heap)) ProxyConstructor(vm, structure);
     constructor->finishCreation(vm, "Proxy", structure->globalObject());
     return constructor;
 }
 
-static EncodedJSValue JSC_HOST_CALL callProxy(ExecState*);
-static EncodedJSValue JSC_HOST_CALL constructProxyObject(ExecState*);
+static EncodedJSValue JSC_HOST_CALL callProxy(JSGlobalObject*, CallFrame*);
+static EncodedJSValue JSC_HOST_CALL constructProxyObject(JSGlobalObject*, CallFrame*);
 
 ProxyConstructor::ProxyConstructor(VM& vm, Structure* structure)
     : Base(vm, structure, callProxy, constructProxyObject)
 {
 }
 
-static EncodedJSValue JSC_HOST_CALL makeRevocableProxy(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL makeRevocableProxy(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    VM& vm = exec->vm();
+    VM& vm = globalObject->vm();
     auto scope = DECLARE_THROW_SCOPE(vm);
-    if (exec->argumentCount() < 2)
-        return throwVMTypeError(exec, scope, "Proxy.revocable needs to be called with two arguments: the target and the handler"_s);
+    if (callFrame->argumentCount() < 2)
+        return throwVMTypeError(globalObject, scope, "Proxy.revocable needs to be called with two arguments: the target and the handler"_s);
 
-    ArgList args(exec);
+    ArgList args(callFrame);
     JSValue target = args.at(0);
     JSValue handler = args.at(1);
-    ProxyObject* proxy = ProxyObject::create(exec, exec->lexicalGlobalObject(), target, handler);
+    ProxyObject* proxy = ProxyObject::create(globalObject, target, handler);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
-    ProxyRevoke* revoke = ProxyRevoke::create(vm, exec->lexicalGlobalObject()->proxyRevokeStructure(), proxy);
+    ProxyRevoke* revoke = ProxyRevoke::create(vm, globalObject->proxyRevokeStructure(), proxy);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
 
-    JSObject* result = constructEmptyObject(exec);
+    JSObject* result = constructEmptyObject(globalObject);
     RETURN_IF_EXCEPTION(scope, encodedJSValue());
     result->putDirect(vm, makeIdentifier(vm, "proxy"), proxy, static_cast<unsigned>(PropertyAttribute::None));
     result->putDirect(vm, makeIdentifier(vm, "revoke"), revoke, static_cast<unsigned>(PropertyAttribute::None));
 
     return JSValue::encode(result);
 }
 
-static EncodedJSValue JSC_HOST_CALL proxyRevocableConstructorThrowError(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL proxyRevocableConstructorThrowError(JSGlobalObject* globalObject, CallFrame*)
 {
-    auto scope = DECLARE_THROW_SCOPE(exec->vm());
-    return throwVMTypeError(exec, scope, "Proxy.revocable cannot be constructed. It can only be called"_s);
+    auto scope = DECLARE_THROW_SCOPE(globalObject->vm());
+    return throwVMTypeError(globalObject, scope, "Proxy.revocable cannot be constructed. It can only be called"_s);
 }
 
 void ProxyConstructor::finishCreation(VM& vm, const char* name, JSGlobalObject* globalObject)
 {
-    Base::finishCreation(vm, name, NameVisibility::Visible, NameAdditionMode::WithStructureTransition);
+    Base::finishCreation(vm, name, NameAdditionMode::WithStructureTransition);
     putDirect(vm, vm.propertyNames->length, jsNumber(2), PropertyAttribute::DontEnum | PropertyAttribute::ReadOnly);
     putDirect(vm, makeIdentifier(vm, "revocable"), JSFunction::create(vm, globalObject, 2, "revocable"_s, makeRevocableProxy, NoIntrinsic, proxyRevocableConstructorThrowError));
 }
 
-static EncodedJSValue JSC_HOST_CALL constructProxyObject(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL constructProxyObject(JSGlobalObject* globalObject, CallFrame* callFrame)
 {
-    auto scope = DECLARE_THROW_SCOPE(exec->vm());
-    if (exec->newTarget().isUndefined())
-        return throwVMTypeError(exec, scope, "new.target of Proxy construct should not be undefined"_s);
+    auto scope = DECLARE_THROW_SCOPE(globalObject->vm());
+    if (callFrame->newTarget().isUndefined())
+        return throwVMTypeError(globalObject, scope, "new.target of Proxy construct should not be undefined"_s);
 
-    ArgList args(exec);
+    ArgList args(callFrame);
     JSValue target = args.at(0);
     JSValue handler = args.at(1);
-    RELEASE_AND_RETURN(scope, JSValue::encode(ProxyObject::create(exec, exec->lexicalGlobalObject(), target, handler)));
+    RELEASE_AND_RETURN(scope, JSValue::encode(ProxyObject::create(globalObject, target, handler)));
 }
 
-static EncodedJSValue JSC_HOST_CALL callProxy(ExecState* exec)
+static EncodedJSValue JSC_HOST_CALL callProxy(JSGlobalObject* globalObject, CallFrame*)
 {
-    auto scope = DECLARE_THROW_SCOPE(exec->vm());
-    return JSValue::encode(throwConstructorCannotBeCalledAsFunctionTypeError(exec, scope, "Proxy"));
+    auto scope = DECLARE_THROW_SCOPE(globalObject->vm());
+    return JSValue::encode(throwConstructorCannotBeCalledAsFunctionTypeError(globalObject, scope, "Proxy"));
 }
 
 } // namespace JSC
