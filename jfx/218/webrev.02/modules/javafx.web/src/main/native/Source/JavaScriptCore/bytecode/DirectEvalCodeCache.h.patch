diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/DirectEvalCodeCache.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/DirectEvalCodeCache.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/DirectEvalCodeCache.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/DirectEvalCodeCache.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2008, 2009 Apple Inc. All rights reserved.
+ * Copyright (C) 2008-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  *
@@ -72,11 +72,11 @@
                 }
                 static bool equal(const CacheKey& lhs, const CacheKey& rhs)
                 {
                     return lhs == rhs;
                 }
-                static const bool safeToCompareToEmptyOrDeleted = false;
+                static constexpr bool safeToCompareToEmptyOrDeleted = false;
             };
 
             typedef SimpleClassHashTraits<CacheKey> HashTraits;
 
         private:
@@ -87,26 +87,26 @@
         DirectEvalExecutable* tryGet(const String& evalSource, CallSiteIndex callSiteIndex)
         {
             return m_cacheMap.inlineGet(CacheKey(evalSource, callSiteIndex)).get();
         }
 
-        void set(ExecState* exec, JSCell* owner, const String& evalSource, CallSiteIndex callSiteIndex, DirectEvalExecutable* evalExecutable)
+        void set(JSGlobalObject* globalObject, JSCell* owner, const String& evalSource, CallSiteIndex callSiteIndex, DirectEvalExecutable* evalExecutable)
         {
             if (m_cacheMap.size() < maxCacheEntries)
-                setSlow(exec, owner, evalSource, callSiteIndex, evalExecutable);
+                setSlow(globalObject, owner, evalSource, callSiteIndex, evalExecutable);
         }
 
         bool isEmpty() const { return m_cacheMap.isEmpty(); }
 
         void visitAggregate(SlotVisitor&);
 
         void clear();
 
     private:
-        static const int maxCacheEntries = 64;
+        static constexpr int maxCacheEntries = 64;
 
-        void setSlow(ExecState*, JSCell* owner, const String& evalSource, CallSiteIndex, DirectEvalExecutable*);
+        void setSlow(JSGlobalObject*, JSCell* owner, const String& evalSource, CallSiteIndex, DirectEvalExecutable*);
 
         typedef HashMap<CacheKey, WriteBarrier<DirectEvalExecutable>, CacheKey::Hash, CacheKey::HashTraits> EvalCacheMap;
         EvalCacheMap m_cacheMap;
         Lock m_lock;
     };
