diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSAuthenticatorResponseCustom.cpp b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSAuthenticatorResponseCustom.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSAuthenticatorResponseCustom.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSAuthenticatorResponseCustom.cpp
@@ -33,22 +33,22 @@
 #include "JSDOMBinding.h"
 
 namespace WebCore {
 using namespace JSC;
 
-JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<AuthenticatorResponse>&& response)
+JSValue toJSNewlyCreated(JSC::JSGlobalObject*, JSDOMGlobalObject* globalObject, Ref<AuthenticatorResponse>&& response)
 {
     if (is<AuthenticatorAttestationResponse>(response))
         return createWrapper<AuthenticatorAttestationResponse>(globalObject, WTFMove(response));
     if (is<AuthenticatorAssertionResponse>(response))
         return createWrapper<AuthenticatorAssertionResponse>(globalObject, WTFMove(response));
     return createWrapper<AuthenticatorResponse>(globalObject, WTFMove(response));
 }
 
-JSValue toJS(ExecState* state, JSDOMGlobalObject* globalObject, AuthenticatorResponse& response)
+JSValue toJS(JSGlobalObject* lexicalGlobalObject, JSDOMGlobalObject* globalObject, AuthenticatorResponse& response)
 {
-    return wrap(state, globalObject, response);
+    return wrap(lexicalGlobalObject, globalObject, response);
 }
 
 } // namespace WebCore
 
 #endif // ENABLE(WEB_AUTHN)
