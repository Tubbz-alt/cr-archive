diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Procedure.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Procedure.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Procedure.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3Procedure.h
@@ -31,11 +31,10 @@
 #include "B3Origin.h"
 #include "B3PCToOriginMap.h"
 #include "B3SparseCollection.h"
 #include "B3Type.h"
 #include "B3ValueKey.h"
-#include "CCallHelpers.h"
 #include "PureNaN.h"
 #include "RegisterAtOffsetList.h"
 #include <wtf/Bag.h>
 #include <wtf/FastMalloc.h>
 #include <wtf/HashSet.h>
@@ -44,11 +43,15 @@
 #include <wtf/PrintStream.h>
 #include <wtf/SharedTask.h>
 #include <wtf/TriState.h>
 #include <wtf/Vector.h>
 
-namespace JSC { namespace B3 {
+namespace JSC {
+
+class CCallHelpers;
+
+namespace B3 {
 
 class BackwardsCFG;
 class BackwardsDominators;
 class BasicBlock;
 class BlockInsertionSet;
@@ -116,11 +119,12 @@
     const Vector<Vector<Type>>& tuples() const { return m_tuples; };
     bool isValidTuple(Type tuple) const;
     Type extractFromTuple(Type tuple, unsigned index) const;
     const Vector<Type>& tupleForType(Type tuple) const;
 
-    unsigned returnCount(Type type) const { return type.isTuple() ? tupleForType(type).size() : type.isNumeric(); }
+    unsigned resultCount(Type type) const { return type.isTuple() ? tupleForType(type).size() : type.isNumeric(); }
+    Type typeAtOffset(Type type, unsigned index) const { ASSERT(index < resultCount(type)); return type.isTuple() ? extractFromTuple(type, index) : type; }
 
     template<typename ValueType, typename... Arguments>
     ValueType* add(Arguments...);
 
     Value* clone(Value*);
@@ -194,15 +198,10 @@
     bool isFastConstant(const ValueKey&);
 
     unsigned numEntrypoints() const { return m_numEntrypoints; }
     JS_EXPORT_PRIVATE void setNumEntrypoints(unsigned);
 
-    // Only call this after code generation is complete. Note that the label for the 0th entrypoint
-    // should point to exactly where the code generation cursor was before you started generating
-    // code.
-    JS_EXPORT_PRIVATE CCallHelpers::Label entrypointLabel(unsigned entrypointIndex) const;
-
     // The name has to be a string literal, since we don't do any memory management for the string.
     void setLastPhaseName(const char* name)
     {
         m_lastPhaseName = name;
     }
