diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/LiteralParser.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/LiteralParser.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/LiteralParser.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/LiteralParser.h
@@ -90,12 +90,13 @@
 ALWAYS_INLINE void setParserTokenString(LiteralParserToken<CharType>&, const CharType* string);
 
 template <typename CharType>
 class LiteralParser {
 public:
-    LiteralParser(ExecState* exec, const CharType* characters, unsigned length, ParserMode mode)
-        : m_exec(exec)
+    LiteralParser(JSGlobalObject* globalObject, const CharType* characters, unsigned length, ParserMode mode, CodeBlock* nullOrCodeBlock = nullptr)
+        : m_globalObject(globalObject)
+        , m_nullOrCodeBlock(nullOrCodeBlock)
         , m_lexer(characters, length, mode)
         , m_mode(mode)
     {
     }
 
@@ -131,11 +132,11 @@
         {
         }
 
         TokenType next();
 
-#if ASSERT_DISABLED
+#if !ASSERT_ENABLED
         typedef const LiteralParserToken<CharType>* LiteralParserTokenPtr;
 
         LiteralParserTokenPtr currentToken()
         {
             return &m_currentToken;
@@ -164,11 +165,11 @@
 
         LiteralParserTokenPtr currentToken()
         {
             return LiteralParserTokenPtr(*this);
         }
-#endif
+#endif // ASSERT_ENABLED
 
         String getErrorMessage() { return m_lexErrorMessage; }
 
     private:
         String m_lexErrorMessage;
@@ -180,19 +181,20 @@
         LiteralParserToken<CharType> m_currentToken;
         ParserMode m_mode;
         const CharType* m_ptr;
         const CharType* m_end;
         StringBuilder m_builder;
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
         unsigned m_currentTokenID { 0 };
 #endif
     };
 
     class StackGuard;
     JSValue parse(ParserState);
 
-    ExecState* m_exec;
+    JSGlobalObject* m_globalObject;
+    CodeBlock* m_nullOrCodeBlock;
     typename LiteralParser<CharType>::Lexer m_lexer;
     ParserMode m_mode;
     String m_parseErrorMessage;
     static unsigned const MaximumCachableCharacter = 128;
     std::array<Identifier, MaximumCachableCharacter> m_shortIdentifiers;
