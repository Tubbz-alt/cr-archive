diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/ElementIterator.h b/modules/javafx.web/src/main/native/Source/WebCore/dom/ElementIterator.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/ElementIterator.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/ElementIterator.h
@@ -25,11 +25,11 @@
 
 #pragma once
 
 #include "ElementTraversal.h"
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
 #include "ElementIteratorAssertions.h"
 #endif
 
 namespace WebCore {
 
@@ -56,11 +56,11 @@
 
 private:
     const ContainerNode* m_root;
     ElementType* m_current;
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     ElementIteratorAssertions m_assertions;
 #endif
 };
 
 template <typename ElementType>
@@ -86,11 +86,11 @@
 
 private:
     const ContainerNode* m_root;
     const ElementType* m_current;
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     ElementIteratorAssertions m_assertions;
 #endif
 };
 
 // ElementIterator
@@ -104,11 +104,11 @@
 
 template <typename ElementType>
 inline ElementIterator<ElementType>::ElementIterator(const ContainerNode* root, ElementType* current)
     : m_root(root)
     , m_current(current)
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     , m_assertions(current)
 #endif
 {
 }
 
@@ -116,11 +116,11 @@
 inline ElementIterator<ElementType>& ElementIterator<ElementType>::traverseNext()
 {
     ASSERT(m_current);
     ASSERT(!m_assertions.domTreeHasMutated());
     m_current = Traversal<ElementType>::next(*m_current, m_root);
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // Drop the assertion when the iterator reaches the end.
     if (!m_current)
         m_assertions.dropEventDispatchAssertion();
 #endif
     return *this;
@@ -130,11 +130,11 @@
 inline ElementIterator<ElementType>& ElementIterator<ElementType>::traversePrevious()
 {
     ASSERT(m_current);
     ASSERT(!m_assertions.domTreeHasMutated());
     m_current = Traversal<ElementType>::previous(*m_current, m_root);
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // Drop the assertion when the iterator reaches the end.
     if (!m_current)
         m_assertions.dropEventDispatchAssertion();
 #endif
     return *this;
@@ -144,11 +144,11 @@
 inline ElementIterator<ElementType>& ElementIterator<ElementType>::traverseNextSibling()
 {
     ASSERT(m_current);
     ASSERT(!m_assertions.domTreeHasMutated());
     m_current = Traversal<ElementType>::nextSibling(*m_current);
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // Drop the assertion when the iterator reaches the end.
     if (!m_current)
         m_assertions.dropEventDispatchAssertion();
 #endif
     return *this;
@@ -158,11 +158,11 @@
 inline ElementIterator<ElementType>& ElementIterator<ElementType>::traversePreviousSibling()
 {
     ASSERT(m_current);
     ASSERT(!m_assertions.domTreeHasMutated());
     m_current = Traversal<ElementType>::previousSibling(*m_current);
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // Drop the assertion when the iterator reaches the end.
     if (!m_current)
         m_assertions.dropEventDispatchAssertion();
 #endif
     return *this;
@@ -172,22 +172,22 @@
 inline ElementIterator<ElementType>& ElementIterator<ElementType>::traverseNextSkippingChildren()
 {
     ASSERT(m_current);
     ASSERT(!m_assertions.domTreeHasMutated());
     m_current = Traversal<ElementType>::nextSkippingChildren(*m_current, m_root);
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // Drop the assertion when the iterator reaches the end.
     if (!m_current)
         m_assertions.dropEventDispatchAssertion();
 #endif
     return *this;
 }
 
 template <typename ElementType>
 inline void ElementIterator<ElementType>::dropAssertions()
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     m_assertions.clear();
 #endif
 }
 
 template <typename ElementType>
@@ -211,11 +211,11 @@
 {
     ASSERT(m_current);
     ASSERT(m_current != m_root);
     ASSERT(!m_assertions.domTreeHasMutated());
     m_current = findElementAncestorOfType<ElementType>(*m_current);
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // Drop the assertion when the iterator reaches the end.
     if (!m_current)
         m_assertions.dropEventDispatchAssertion();
 #endif
     return *this;
@@ -262,11 +262,11 @@
 
 template <typename ElementType>
 inline ElementConstIterator<ElementType>::ElementConstIterator(const ContainerNode* root, const ElementType* current)
     : m_root(root)
     , m_current(current)
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     , m_assertions(current)
 #endif
 {
 }
 
@@ -274,11 +274,11 @@
 inline ElementConstIterator<ElementType>& ElementConstIterator<ElementType>::traverseNext()
 {
     ASSERT(m_current);
     ASSERT(!m_assertions.domTreeHasMutated());
     m_current = Traversal<ElementType>::next(*m_current, m_root);
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // Drop the assertion when the iterator reaches the end.
     if (!m_current)
         m_assertions.dropEventDispatchAssertion();
 #endif
     return *this;
@@ -288,11 +288,11 @@
 inline ElementConstIterator<ElementType>& ElementConstIterator<ElementType>::traversePrevious()
 {
     ASSERT(m_current);
     ASSERT(!m_assertions.domTreeHasMutated());
     m_current = Traversal<ElementType>::previous(*m_current, m_root);
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // Drop the assertion when the iterator reaches the end.
     if (!m_current)
         m_assertions.dropEventDispatchAssertion();
 #endif
     return *this;
@@ -302,11 +302,11 @@
 inline ElementConstIterator<ElementType>& ElementConstIterator<ElementType>::traverseNextSibling()
 {
     ASSERT(m_current);
     ASSERT(!m_assertions.domTreeHasMutated());
     m_current = Traversal<ElementType>::nextSibling(*m_current);
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // Drop the assertion when the iterator reaches the end.
     if (!m_current)
         m_assertions.dropEventDispatchAssertion();
 #endif
     return *this;
@@ -316,11 +316,11 @@
 inline ElementConstIterator<ElementType>& ElementConstIterator<ElementType>::traversePreviousSibling()
 {
     ASSERT(m_current);
     ASSERT(!m_assertions.domTreeHasMutated());
     m_current = Traversal<ElementType>::previousSibling(*m_current);
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // Drop the assertion when the iterator reaches the end.
     if (!m_current)
         m_assertions.dropEventDispatchAssertion();
 #endif
     return *this;
@@ -330,11 +330,11 @@
 inline ElementConstIterator<ElementType>& ElementConstIterator<ElementType>::traverseNextSkippingChildren()
 {
     ASSERT(m_current);
     ASSERT(!m_assertions.domTreeHasMutated());
     m_current = Traversal<ElementType>::nextSkippingChildren(*m_current, m_root);
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // Drop the assertion when the iterator reaches the end.
     if (!m_current)
         m_assertions.dropEventDispatchAssertion();
 #endif
     return *this;
@@ -345,22 +345,22 @@
 {
     ASSERT(m_current);
     ASSERT(m_current != m_root);
     ASSERT(!m_assertions.domTreeHasMutated());
     m_current = findElementAncestorOfType<const ElementType>(*m_current);
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     // Drop the assertion when the iterator reaches the end.
     if (!m_current)
         m_assertions.dropEventDispatchAssertion();
 #endif
     return *this;
 }
 
 template <typename ElementType>
 inline void ElementConstIterator<ElementType>::dropAssertions()
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     m_assertions.clear();
 #endif
 }
 
 template <typename ElementType>
