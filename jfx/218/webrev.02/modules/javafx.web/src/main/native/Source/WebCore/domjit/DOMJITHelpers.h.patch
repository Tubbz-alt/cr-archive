diff a/modules/javafx.web/src/main/native/Source/WebCore/domjit/DOMJITHelpers.h b/modules/javafx.web/src/main/native/Source/WebCore/domjit/DOMJITHelpers.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/domjit/DOMJITHelpers.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/domjit/DOMJITHelpers.h
@@ -31,10 +31,12 @@
 #include <JavaScriptCore/FrameTracers.h>
 #include <JavaScriptCore/SnippetParams.h>
 
 #if ENABLE(JIT)
 
+IGNORE_WARNINGS_BEGIN("frame-address")
+
 namespace WebCore { namespace DOMJIT {
 
 using JSC::CCallHelpers;
 using JSC::GPRReg;
 using JSC::JSValueRegs;
@@ -51,17 +53,18 @@
 {
     return jit.branchTestPtr(CCallHelpers::NonZero, CCallHelpers::Address(weakImpl, JSC::WeakImpl::offsetOfWeakHandleOwner()), CCallHelpers::TrustedImm32(JSC::WeakImpl::StateMask));
 }
 
 template<typename WrappedNode>
-JSC::EncodedJSValue JIT_OPERATION toWrapperSlow(JSC::ExecState* exec, JSC::JSGlobalObject* globalObject, void* result)
+JSC::EncodedJSValue JIT_OPERATION toWrapperSlow(JSC::JSGlobalObject* globalObject, void* result)
 {
-    ASSERT(exec);
     ASSERT(result);
     ASSERT(globalObject);
-    JSC::NativeCallFrameTracer tracer(globalObject->vm(), exec);
-    return JSC::JSValue::encode(toJS(exec, static_cast<JSDOMGlobalObject*>(globalObject), *static_cast<WrappedNode*>(result)));
+    JSC::VM& vm = globalObject->vm();
+    JSC::CallFrame* callFrame = DECLARE_CALL_FRAME(vm);
+    JSC::JITOperationPrologueCallFrameTracer tracer(vm, callFrame);
+    return JSC::JSValue::encode(toJS(globalObject, static_cast<JSDOMGlobalObject*>(globalObject), *static_cast<WrappedNode*>(result)));
 }
 
 template<typename WrappedType>
 void tryLookUpWrapperCache(CCallHelpers& jit, CCallHelpers::JumpList& failureCases, GPRReg wrapped, GPRReg resultGPR)
 {
@@ -136,19 +139,19 @@
 }
 
 inline CCallHelpers::Jump branchIfElement(CCallHelpers& jit, GPRReg target)
 {
     return jit.branch8(
-        CCallHelpers::AboveOrEqual,
+        CCallHelpers::Equal,
         CCallHelpers::Address(target, JSC::JSCell::typeInfoTypeOffset()),
         CCallHelpers::TrustedImm32(JSC::JSType(JSElementType)));
 }
 
 inline CCallHelpers::Jump branchIfNotElement(CCallHelpers& jit, GPRReg target)
 {
     return jit.branch8(
-        CCallHelpers::Below,
+        CCallHelpers::NotEqual,
         CCallHelpers::Address(target, JSC::JSCell::typeInfoTypeOffset()),
         CCallHelpers::TrustedImm32(JSC::JSType(JSElementType)));
 }
 
 inline CCallHelpers::Jump branchIfDocumentFragment(CCallHelpers& jit, GPRReg target)
@@ -195,6 +198,8 @@
     return jit.branchTest32(condition, CCallHelpers::Address(nodeAddress, Node::nodeFlagsMemoryOffset()), CCallHelpers::TrustedImm32(Node::flagIsHTML()));
 }
 
 } }
 
+IGNORE_WARNINGS_END
+
 #endif
