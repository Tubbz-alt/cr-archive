diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorTargetAgent.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorTargetAgent.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorTargetAgent.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/agents/InspectorTargetAgent.h
@@ -25,10 +25,11 @@
 
 #pragma once
 
 #include "InspectorAgentBase.h"
 #include "InspectorBackendDispatchers.h"
+#include "InspectorFrontendChannel.h"
 #include "InspectorFrontendDispatchers.h"
 #include <wtf/Forward.h>
 
 namespace Inspector {
 
@@ -38,38 +39,40 @@
 
 class JS_EXPORT_PRIVATE InspectorTargetAgent : public InspectorAgentBase, public TargetBackendDispatcherHandler {
     WTF_MAKE_NONCOPYABLE(InspectorTargetAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
-    virtual ~InspectorTargetAgent();
+    InspectorTargetAgent(FrontendRouter&, BackendDispatcher&);
+    ~InspectorTargetAgent() override;
 
     // InspectorAgentBase
     void didCreateFrontendAndBackend(FrontendRouter*, BackendDispatcher*) final;
     void willDestroyFrontendAndBackend(DisconnectReason) final;
 
     // TargetBackendDispatcherHandler
-    void exists(ErrorString&) final;
+    void setPauseOnStart(ErrorString&, bool pauseOnStart) override;
+    void resume(ErrorString&, const String& targetId) override;
     void sendMessageToTarget(ErrorString&, const String& targetId, const String& message) final;
 
     // Target lifecycle.
     void targetCreated(InspectorTarget&);
     void targetDestroyed(InspectorTarget&);
+    void didCommitProvisionalTarget(const String& oldTargetID, const String& committedTargetID);
 
     // Target messages.
     void sendMessageFromTargetToFrontend(const String& targetId, const String& message);
 
-protected:
-    InspectorTargetAgent(FrontendRouter&, BackendDispatcher&);
-
-    virtual FrontendChannel& frontendChannel() = 0;
-
 private:
+    // FrontendChannel
+    FrontendChannel::ConnectionType connectionType() const;
     void connectToTargets();
     void disconnectFromTargets();
 
+    Inspector::FrontendRouter& m_router;
     std::unique_ptr<TargetFrontendDispatcher> m_frontendDispatcher;
     Ref<TargetBackendDispatcher> m_backendDispatcher;
     HashMap<String, InspectorTarget*> m_targets;
     bool m_isConnected { false };
+    bool m_shouldPauseOnStart { false };
 };
 
 } // namespace Inspector
