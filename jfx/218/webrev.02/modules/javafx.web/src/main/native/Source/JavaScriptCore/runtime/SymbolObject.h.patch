diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolObject.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolObject.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolObject.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/SymbolObject.h
@@ -28,10 +28,16 @@
 
 class SymbolObject final : public JSWrapperObject {
 public:
     using Base = JSWrapperObject;
 
+    template<typename, SubspaceAccess mode>
+    static IsoSubspace* subspaceFor(VM& vm)
+    {
+        return vm.symbolObjectSpace<mode>();
+    }
+
     static SymbolObject* create(VM& vm, Structure* structure)
     {
         Symbol* symbol = Symbol::create(vm);
         SymbolObject* object = new (NotNull, allocateCell<SymbolObject>(vm.heap)) SymbolObject(vm, structure);
         object->finishCreation(vm, symbol);
@@ -52,13 +58,13 @@
     static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)
     {
         return Structure::create(vm, globalObject, prototype, TypeInfo(ObjectType, StructureFlags), info());
     }
 
-    static JSValue defaultValue(const JSObject*, ExecState*, PreferredPrimitiveType);
+    static JSValue defaultValue(const JSObject*, JSGlobalObject*, PreferredPrimitiveType);
 
-    static String toStringName(const JSObject*, ExecState*);
+    static String toStringName(const JSObject*, JSGlobalObject*);
 
 protected:
     JS_EXPORT_PRIVATE void finishCreation(VM&, Symbol*);
     JS_EXPORT_PRIVATE SymbolObject(VM&, Structure*);
 };
