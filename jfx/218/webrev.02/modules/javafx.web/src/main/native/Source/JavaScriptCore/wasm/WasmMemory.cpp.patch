diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmMemory.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmMemory.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmMemory.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmMemory.cpp
@@ -118,12 +118,11 @@
             return MemoryResult(
                 result,
                 m_fastMemories.size() >= m_maxFastMemoryCount / 2 ? MemoryResult::SuccessAndNotifyMemoryPressure : MemoryResult::Success);
         }();
 
-        if (Options::logWebAssemblyMemory())
-            dataLog("Allocated virtual: ", result, "; state: ", *this, "\n");
+        dataLogLnIf(Options::logWebAssemblyMemory(), "Allocated virtual: ", result, "; state: ", *this);
 
         return result;
     }
 
     void freeFastMemory(void* basePtr)
@@ -132,12 +131,11 @@
             auto holder = holdLock(m_lock);
             Gigacage::freeVirtualPages(Gigacage::Primitive, basePtr, Memory::fastMappedBytes());
             m_fastMemories.removeFirst(basePtr);
         }
 
-        if (Options::logWebAssemblyMemory())
-            dataLog("Freed virtual; state: ", *this, "\n");
+        dataLogLnIf(Options::logWebAssemblyMemory(), "Freed virtual; state: ", *this);
     }
 
     bool isAddressInFastMemory(void* address)
     {
         // NOTE: This can be called from a signal handler, but only after we proved that we're in JIT code.
@@ -170,12 +168,11 @@
                 return MemoryResult::SuccessAndNotifyMemoryPressure;
 
             return MemoryResult::Success;
         }();
 
-        if (Options::logWebAssemblyMemory())
-            dataLog("Allocated physical: ", bytes, ", ", MemoryResult::toString(result), "; state: ", *this, "\n");
+        dataLogLnIf(Options::logWebAssemblyMemory(), "Allocated physical: ", bytes, ", ", MemoryResult::toString(result), "; state: ", *this);
 
         return result;
     }
 
     void freePhysicalBytes(size_t bytes)
@@ -183,12 +180,11 @@
         {
             auto holder = holdLock(m_lock);
             m_physicalBytes -= bytes;
         }
 
-        if (Options::logWebAssemblyMemory())
-            dataLog("Freed physical: ", bytes, "; state: ", *this, "\n");
+        dataLogLnIf(Options::logWebAssemblyMemory(), "Freed physical: ", bytes, "; state: ", *this);
     }
 
     void dump(PrintStream& out) const
     {
         out.print("fast memories =  ", m_fastMemories.size(), "/", m_maxFastMemoryCount, ", bytes = ", m_physicalBytes, "/", memoryLimit());
