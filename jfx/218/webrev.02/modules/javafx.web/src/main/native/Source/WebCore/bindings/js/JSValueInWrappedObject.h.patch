diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSValueInWrappedObject.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSValueInWrappedObject.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSValueInWrappedObject.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSValueInWrappedObject.h
@@ -51,11 +51,11 @@
     using Value = Variant<JSC::JSValue, Weak>;
     static Value makeValue(JSC::JSValue);
     Value m_value;
 };
 
-JSC::JSValue cachedPropertyValue(JSC::ExecState&, const JSDOMObject& owner, JSValueInWrappedObject& cacheSlot, const WTF::Function<JSC::JSValue()>&);
+JSC::JSValue cachedPropertyValue(JSC::JSGlobalObject&, const JSDOMObject& owner, JSValueInWrappedObject& cacheSlot, const WTF::Function<JSC::JSValue()>&);
 
 inline auto JSValueInWrappedObject::makeValue(JSC::JSValue value) -> Value
 {
     if (!value.isCell())
         return value;
@@ -112,15 +112,15 @@
     WTF::switchOn(m_value, [] (Weak& value) {
         value.clear();
     }, [] (auto&) { });
 }
 
-inline JSC::JSValue cachedPropertyValue(JSC::ExecState& state, const JSDOMObject& owner, JSValueInWrappedObject& cachedValue, const WTF::Function<JSC::JSValue()>& function)
+inline JSC::JSValue cachedPropertyValue(JSC::JSGlobalObject& lexicalGlobalObject, const JSDOMObject& owner, JSValueInWrappedObject& cachedValue, const WTF::Function<JSC::JSValue()>& function)
 {
-    if (cachedValue && isWorldCompatible(state, cachedValue))
+    if (cachedValue && isWorldCompatible(lexicalGlobalObject, cachedValue))
         return cachedValue;
-    cachedValue = cloneAcrossWorlds(state, owner, function());
-    ASSERT(isWorldCompatible(state, cachedValue));
+    cachedValue = cloneAcrossWorlds(lexicalGlobalObject, owner, function());
+    ASSERT(isWorldCompatible(lexicalGlobalObject, cachedValue));
     return cachedValue;
 }
 
 } // namespace WebCore
