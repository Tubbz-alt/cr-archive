diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/UserAgentQuirks.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/UserAgentQuirks.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/UserAgentQuirks.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/UserAgentQuirks.cpp
@@ -34,41 +34,73 @@
 // When editing the quirks in this file, be sure to update
 // Tools/TestWebKitAPI/Tests/WebCore/UserAgentQuirks.cpp.
 
 static bool isGoogle(const URL& url)
 {
-    String baseDomain = topPrivatelyControlledDomain(url.host().toString());
+    String domain = url.host().toString();
+    String baseDomain = topPrivatelyControlledDomain(domain);
 
     // Our Google UA is *very* complicated to get right. Read
-    // https://webkit.org/b/142074 carefully before changing. Test that Earth
-    // view is available in Google Maps. Test Google Calendar. Test downloading
-    // the Hangouts browser plugin. Test logging out and logging in to a Google
-    // account. Change platformVersionForUAString() to return "FreeBSD amd64"
-    // and test everything again.
+    // https://webkit.org/b/142074 carefully before changing. Test that 3D
+    // view is available in Google Maps. Test Google Calendar. Test logging out
+    // and logging in to a Google account. Change platformVersionForUAString()
+    // to return "FreeBSD amd64" and test everything again.
     if (baseDomain.startsWith("google."))
         return true;
     if (baseDomain == "gstatic.com")
         return true;
-    if (baseDomain == "googleapis.com")
-        return true;
     if (baseDomain == "googleusercontent.com")
         return true;
+    // googleapis.com is in the public suffix list, which is confusing. E.g.
+    // fonts.googleapis.com is actually a base domain.
+    if (domain.endsWith(".googleapis.com"))
+        return true;
 
     return false;
 }
 
 // Be careful with this quirk: it's an invitation for sites to use JavaScript
 // that works in Chrome that WebKit cannot handle. Prefer other quirks instead.
 static bool urlRequiresChromeBrowser(const URL& url)
 {
-    String baseDomain = topPrivatelyControlledDomain(url.host().toString());
+    String domain = url.host().toString();
+    String baseDomain = topPrivatelyControlledDomain(domain);
 
     // Needed for fonts on many sites to work with WebKit.
     // https://bugs.webkit.org/show_bug.cgi?id=147296
     if (baseDomain == "typekit.net" || baseDomain == "typekit.com")
         return true;
 
+    // This site completely blocks the login page with WebKitGTK's standard user
+    // agent and ask users to use Google Chrome or Microsoft Internet Explorer.
+    if (domain == "auth.mayohr.com")
+        return true;
+
+    return false;
+}
+
+// Prefer using the macOS platform quirk rather than the Firefox quirk. This
+// quirk is good for websites that do macOS-specific things we don't want on
+// other platforms, and when the risk of the website doing Firefox-specific
+// things is relatively low.
+static bool urlRequiresFirefoxBrowser(const URL& url)
+{
+    String domain = url.host().toString();
+
+    // This quirk actually has nothing to do with YouTube. It's needed to avoid
+    // unsupported browser warnings on Google Docs. After removing this quirk,
+    // to reproduce the warnings you will need to sign out of Google, then click
+    // on a link to a non-public document that requires signing in. The
+    // unsupported browser warning will be displayed after signing in.
+    if (domain == "accounts.youtube.com" || domain == "docs.google.com")
+        return true;
+
+    // Google Drive shows an unsupported browser warning with WebKitGTK's
+    // standard user agent.
+    if (domain == "drive.google.com")
+        return true;
+
     return false;
 }
 
 static bool urlRequiresMacintoshPlatform(const URL& url)
 {
@@ -102,40 +134,33 @@
     if (domain == "outlook.live.com"
         || domain == "mail.ntu.edu.tw"
         || domain == "exchange.tu-berlin.de")
         return true;
 
-    // Google Docs and Google Drive both show a scary unsupported browser
-    // warning with WebKitGTK's standard user agent.
-    if (domain == "docs.google.com"
-        || domain == "drive.google.com")
-        return true;
-
     // Bank of America shows an unsupported browser warning with WebKitGTK's
     // standard user agent.
     if (baseDomain == "bankofamerica.com")
         return true;
 
     return false;
 }
 
 static bool urlRequiresLinuxDesktopPlatform(const URL& url)
 {
-    // docs.google.com and drive.google.com require the macOS platform quirk.
-    return isGoogle(url)
-        && url.host() != "docs.google.com"
-        && url.host() != "drive.google.com";
+    return isGoogle(url);
 }
 
 UserAgentQuirks UserAgentQuirks::quirksForURL(const URL& url)
 {
     ASSERT(!url.isNull());
 
     UserAgentQuirks quirks;
 
     if (urlRequiresChromeBrowser(url))
         quirks.add(UserAgentQuirks::NeedsChromeBrowser);
+    else if (urlRequiresFirefoxBrowser(url))
+        quirks.add(UserAgentQuirks::NeedsFirefoxBrowser);
 
     if (urlRequiresMacintoshPlatform(url))
         quirks.add(UserAgentQuirks::NeedsMacintoshPlatform);
     else if (urlRequiresLinuxDesktopPlatform(url))
         quirks.add(UserAgentQuirks::NeedsLinuxDesktopPlatform);
@@ -146,11 +171,13 @@
 String UserAgentQuirks::stringForQuirk(UserAgentQuirk quirk)
 {
     switch (quirk) {
     case NeedsChromeBrowser:
         // Get versions from https://chromium.googlesource.com/chromium/src.git
-        return "Chrome/75.0.3770.141"_s;
+        return "Chrome/83.0.4096.4"_s;
+    case NeedsFirefoxBrowser:
+        return "; rv:76.0) Gecko/20100101 Firefox/76.0"_s;
     case NeedsMacintoshPlatform:
         return "Macintosh; Intel Mac OS X 10_15"_s;
     case NeedsLinuxDesktopPlatform:
         return "X11; Linux x86_64"_s;
     case NumUserAgentQuirks:
