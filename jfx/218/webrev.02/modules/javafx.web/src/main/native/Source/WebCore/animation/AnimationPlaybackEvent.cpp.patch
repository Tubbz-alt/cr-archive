diff a/modules/javafx.web/src/main/native/Source/WebCore/animation/AnimationPlaybackEvent.cpp b/modules/javafx.web/src/main/native/Source/WebCore/animation/AnimationPlaybackEvent.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/animation/AnimationPlaybackEvent.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/animation/AnimationPlaybackEvent.cpp
@@ -25,15 +25,18 @@
 
 #include "config.h"
 #include "AnimationPlaybackEvent.h"
 
 #include "WebAnimationUtilities.h"
+#include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
+WTF_MAKE_ISO_ALLOCATED_IMPL(AnimationPlaybackEvent);
+
 AnimationPlaybackEvent::AnimationPlaybackEvent(const AtomString& type, const AnimationPlaybackEventInit& initializer, IsTrusted isTrusted)
-    : Event(type, initializer, isTrusted)
+    : AnimationEventBase(type, initializer, isTrusted)
 {
     if (initializer.currentTime)
         m_currentTime = Seconds::fromMilliseconds(*initializer.currentTime);
     else
         m_currentTime = WTF::nullopt;
@@ -42,14 +45,13 @@
         m_timelineTime = Seconds::fromMilliseconds(*initializer.timelineTime);
     else
         m_timelineTime = WTF::nullopt;
 }
 
-AnimationPlaybackEvent::AnimationPlaybackEvent(const AtomString& type, Optional<Seconds> currentTime, Optional<Seconds> timelineTime)
-    : Event(type, CanBubble::Yes, IsCancelable::No)
+AnimationPlaybackEvent::AnimationPlaybackEvent(const AtomString& type, Optional<Seconds> currentTime, Optional<Seconds> timelineTime, WebAnimation* animation)
+    : AnimationEventBase(type, animation, timelineTime)
     , m_currentTime(currentTime)
-    , m_timelineTime(timelineTime)
 {
 }
 
 AnimationPlaybackEvent::~AnimationPlaybackEvent() = default;
 
@@ -60,11 +62,11 @@
     return secondsToWebAnimationsAPITime(m_currentTime.value());
 }
 
 Optional<double> AnimationPlaybackEvent::bindingsTimelineTime() const
 {
-    if (!m_timelineTime)
+    if (!timelineTime())
         return WTF::nullopt;
-    return secondsToWebAnimationsAPITime(m_timelineTime.value());
+    return secondsToWebAnimationsAPITime(timelineTime().value());
 }
 
 } // namespace WebCore
