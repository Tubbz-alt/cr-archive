diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/DocumentStorageAccess.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/DocumentStorageAccess.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/DocumentStorageAccess.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/DocumentStorageAccess.cpp
@@ -29,23 +29,30 @@
 #if ENABLE(RESOURCE_LOAD_STATISTICS)
 
 #include "Chrome.h"
 #include "ChromeClient.h"
 #include "Document.h"
+#include "EventLoop.h"
 #include "Frame.h"
 #include "FrameLoader.h"
 #include "FrameLoaderClient.h"
 #include "JSDOMPromiseDeferred.h"
-#include "Microtasks.h"
 #include "Page.h"
 #include "RegistrableDomain.h"
 #include "SecurityOrigin.h"
 #include "Settings.h"
 #include "UserGestureIndicator.h"
 
 namespace WebCore {
 
+DocumentStorageAccess::DocumentStorageAccess(Document& document)
+    : m_document(document)
+{
+}
+
+DocumentStorageAccess::~DocumentStorageAccess() = default;
+
 DocumentStorageAccess* DocumentStorageAccess::from(Document& document)
 {
     auto* supplement = static_cast<DocumentStorageAccess*>(Supplement<Document>::from(&document, supplementName()));
     if (!supplement) {
         auto newSupplement = makeUnique<DocumentStorageAccess>(document);
@@ -72,21 +79,22 @@
 
 void DocumentStorageAccess::hasStorageAccess(Ref<DeferredPromise>&& promise)
 {
     ASSERT(m_document.settings().storageAccessAPIEnabled());
 
-    if (m_document.frame() && hasFrameSpecificStorageAccess()) {
+    auto* frame = m_document.frame();
+    if (frame && hasFrameSpecificStorageAccess()) {
         promise->resolve<IDLBoolean>(true);
         return;
     }
 
-    if (!m_document.frame() || m_document.securityOrigin().isUnique()) {
+    if (!frame || m_document.securityOrigin().isUnique()) {
         promise->resolve<IDLBoolean>(false);
         return;
     }
 
-    if (m_document.frame()->isMainFrame()) {
+    if (frame->isMainFrame()) {
         promise->resolve<IDLBoolean>(true);
         return;
     }
 
     auto& securityOrigin = m_document.securityOrigin();
@@ -94,48 +102,42 @@
     if (securityOrigin.equal(&topSecurityOrigin)) {
         promise->resolve<IDLBoolean>(true);
         return;
     }
 
-    auto frameID = m_document.frame()->loader().client().frameID();
-    auto pageID = m_document.frame()->loader().client().pageID();
-    if (!frameID || !pageID) {
+    auto* page = frame->page();
+    if (!page) {
         promise->reject();
         return;
     }
 
-    if (Page* page = m_document.page()) {
-        auto subFrameDomain = RegistrableDomain::uncheckedCreateFromHost(securityOrigin.host());
-        auto topFrameDomain = RegistrableDomain::uncheckedCreateFromHost(topSecurityOrigin.host());
-        page->chrome().client().hasStorageAccess(WTFMove(subFrameDomain), WTFMove(topFrameDomain), frameID.value(), pageID.value(), [weakThis = makeWeakPtr(*this), promise = WTFMove(promise)] (bool hasAccess) {
-            DocumentStorageAccess* document = weakThis.get();
-            if (!document)
-                return;
-
-            promise->resolve<IDLBoolean>(hasAccess);
-        });
-        return;
-    }
+    auto subFrameDomain = RegistrableDomain::uncheckedCreateFromHost(securityOrigin.host());
+    auto topFrameDomain = RegistrableDomain::uncheckedCreateFromHost(topSecurityOrigin.host());
+    page->chrome().client().hasStorageAccess(WTFMove(subFrameDomain), WTFMove(topFrameDomain), *frame, [weakThis = makeWeakPtr(*this), promise = WTFMove(promise)] (bool hasAccess) {
+        if (!weakThis)
+            return;
 
-    promise->reject();
+        promise->resolve<IDLBoolean>(hasAccess);
+    });
 }
 
 void DocumentStorageAccess::requestStorageAccess(Ref<DeferredPromise>&& promise)
 {
     ASSERT(m_document.settings().storageAccessAPIEnabled());
 
-    if (m_document.frame() && hasFrameSpecificStorageAccess()) {
+    auto* frame = m_document.frame();
+    if (frame && hasFrameSpecificStorageAccess()) {
         promise->resolve();
         return;
     }
 
-    if (!m_document.frame() || m_document.securityOrigin().isUnique() || !isAllowedToRequestFrameSpecificStorageAccess()) {
+    if (!frame || m_document.securityOrigin().isUnique() || !isAllowedToRequestFrameSpecificStorageAccess()) {
         promise->reject();
         return;
     }
 
-    if (m_document.frame()->isMainFrame()) {
+    if (frame->isMainFrame()) {
         promise->resolve();
         return;
     }
 
     auto& topDocument = m_document.topDocument();
@@ -161,50 +163,46 @@
     if (!UserGestureIndicator::processingUserGesture()) {
         promise->reject();
         return;
     }
 
-    Page* page = m_document.page();
-    auto frameID = m_document.frame()->loader().client().frameID();
-    auto pageID = m_document.frame()->loader().client().pageID();
-    if (!page || !frameID || !pageID) {
+    auto* page = frame->page();
+    if (!page) {
         promise->reject();
         return;
     }
 
     auto subFrameDomain = RegistrableDomain::uncheckedCreateFromHost(securityOrigin.host());
     auto topFrameDomain = RegistrableDomain::uncheckedCreateFromHost(topSecurityOrigin.host());
 
-    page->chrome().client().requestStorageAccess(WTFMove(subFrameDomain), WTFMove(topFrameDomain), frameID.value(), pageID.value(), [documentReference = makeWeakPtr(*this), promise = WTFMove(promise)] (StorageAccessWasGranted wasGranted, StorageAccessPromptWasShown promptWasShown) mutable {
-        DocumentStorageAccess* document = documentReference.get();
-        if (!document)
+    page->chrome().client().requestStorageAccess(WTFMove(subFrameDomain), WTFMove(topFrameDomain), *frame, [this, weakThis = makeWeakPtr(*this), promise = WTFMove(promise)] (StorageAccessWasGranted wasGranted, StorageAccessPromptWasShown promptWasShown) mutable {
+        if (!weakThis)
             return;
 
         // Consume the user gesture only if the user explicitly denied access.
         bool shouldPreserveUserGesture = wasGranted == StorageAccessWasGranted::Yes || promptWasShown == StorageAccessPromptWasShown::No;
 
         if (shouldPreserveUserGesture) {
-            MicrotaskQueue::mainThreadQueue().append(makeUnique<VoidMicrotask>([documentReference = makeWeakPtr(*document)] () {
-                if (auto* document = documentReference.get())
-                    document->enableTemporaryTimeUserGesture();
-            }));
+            m_document.eventLoop().queueMicrotask([this, weakThis = makeWeakPtr(*this)] {
+                if (weakThis)
+                    enableTemporaryTimeUserGesture();
+            });
         }
 
-        if (wasGranted == StorageAccessWasGranted::Yes) {
-            document->setHasFrameSpecificStorageAccess(true);
+        if (wasGranted == StorageAccessWasGranted::Yes)
             promise->resolve();
-        } else {
+        else {
             if (promptWasShown == StorageAccessPromptWasShown::Yes)
-                document->setWasExplicitlyDeniedFrameSpecificStorageAccess();
+                setWasExplicitlyDeniedFrameSpecificStorageAccess();
             promise->reject();
         }
 
         if (shouldPreserveUserGesture) {
-            MicrotaskQueue::mainThreadQueue().append(makeUnique<VoidMicrotask>([documentReference = WTFMove(documentReference)] () {
-                if (auto* document = documentReference.get())
-                    document->consumeTemporaryTimeUserGesture();
-            }));
+            m_document.eventLoop().queueMicrotask([this, weakThis = makeWeakPtr(*this)] {
+                if (weakThis)
+                    consumeTemporaryTimeUserGesture();
+            });
         }
     });
 }
 
 void DocumentStorageAccess::enableTemporaryTimeUserGesture()
@@ -221,14 +219,8 @@
 {
     auto* frame = m_document.frame();
     return frame && frame->loader().client().hasFrameSpecificStorageAccess();
 }
 
-void DocumentStorageAccess::setHasFrameSpecificStorageAccess(bool value)
-{
-    if (auto* frame = m_document.frame())
-        frame->loader().client().setHasFrameSpecificStorageAccess(value);
-}
-
 } // namespace WebCore
 
 #endif // ENABLE(RESOURCE_LOAD_STATISTICS)
