diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/encryptedmedia/CDMInstance.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/encryptedmedia/CDMInstance.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/encryptedmedia/CDMInstance.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/encryptedmedia/CDMInstance.h
@@ -31,19 +31,31 @@
 #include "CDMMessageType.h"
 #include "CDMSessionType.h"
 #include <utility>
 #include <wtf/Forward.h>
 #include <wtf/RefCounted.h>
+#include <wtf/ThreadSafeRefCounted.h>
 #include <wtf/TypeCasts.h>
 
 namespace WebCore {
 
 class SharedBuffer;
 
 class CDMInstanceSession;
+class ProxyCDM;
+
+// Handle to a "real" CDM, not the JavaScript facade. This can be used
+// from background threads (i.e. decryptors).
+class ProxyCDM : public ThreadSafeRefCounted<ProxyCDM> {
+public:
+    virtual ~ProxyCDM() = default;
+};
+
 struct CDMKeySystemConfiguration;
 
+// JavaScript's handle to a CDMInstance, must be used from the
+// main-thread only!
 class CDMInstance : public RefCounted<CDMInstance> {
 public:
     virtual ~CDMInstance() = default;
 
     enum class ImplementationType {
@@ -63,10 +75,11 @@
     virtual SuccessValue setPersistentStateAllowed(bool) = 0;
     virtual SuccessValue setServerCertificate(Ref<SharedBuffer>&&) = 0;
     virtual SuccessValue setStorageDirectory(const String&) = 0;
     virtual const String& keySystem() const = 0;
     virtual RefPtr<CDMInstanceSession> createSession() = 0;
+    virtual RefPtr<ProxyCDM> proxyCDM() const = 0;
 
     enum class HDCPStatus {
         Unknown,
         Valid,
         OutputRestricted,
