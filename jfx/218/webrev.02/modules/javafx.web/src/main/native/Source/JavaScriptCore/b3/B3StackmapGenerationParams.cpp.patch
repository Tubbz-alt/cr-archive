diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapGenerationParams.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapGenerationParams.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapGenerationParams.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/b3/B3StackmapGenerationParams.cpp
@@ -28,10 +28,11 @@
 
 #if ENABLE(B3_JIT)
 
 #include "AirCode.h"
 #include "AirGenerationContext.h"
+#include "B3Procedure.h"
 #include "B3StackmapValue.h"
 
 namespace JSC { namespace B3 {
 
 const RegisterSet& StackmapGenerationParams::usedRegisters() const
@@ -56,16 +57,16 @@
         result.clear(fpr);
 
     return result;
 }
 
-Vector<Box<CCallHelpers::Label>> StackmapGenerationParams::successorLabels() const
+Vector<Box<MacroAssembler::Label>> StackmapGenerationParams::successorLabels() const
 {
     RELEASE_ASSERT(m_context.indexInBlock == m_context.currentBlock->size() - 1);
     RELEASE_ASSERT(m_value->effects().terminal);
 
-    Vector<Box<CCallHelpers::Label>> result(m_context.currentBlock->numSuccessors());
+    Vector<Box<MacroAssembler::Label>> result(m_context.currentBlock->numSuccessors());
     for (unsigned i = m_context.currentBlock->numSuccessors(); i--;)
         result[i] = m_context.blockLabels[m_context.currentBlock->successorBlock(i)];
     return result;
 }
 
@@ -82,10 +83,15 @@
 Procedure& StackmapGenerationParams::proc() const
 {
     return m_context.code->proc();
 }
 
+Air::Code& StackmapGenerationParams::code() const
+{
+    return proc().code();
+}
+
 StackmapGenerationParams::StackmapGenerationParams(
     StackmapValue* value, const Vector<ValueRep>& reps, Air::GenerationContext& context)
     : m_value(value)
     , m_reps(reps)
     , m_context(context)
