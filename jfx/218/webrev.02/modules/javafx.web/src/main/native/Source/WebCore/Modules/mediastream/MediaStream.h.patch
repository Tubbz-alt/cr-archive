diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaStream.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaStream.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaStream.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/mediastream/MediaStream.h
@@ -33,11 +33,10 @@
 #include "EventTarget.h"
 #include "MediaCanStartListener.h"
 #include "MediaProducer.h"
 #include "MediaStreamPrivate.h"
 #include "MediaStreamTrack.h"
-#include "PlatformMediaSession.h"
 #include "ScriptWrappable.h"
 #include "Timer.h"
 #include "URLRegistry.h"
 #include <wtf/HashMap.h>
 #include <wtf/LoggerHelper.h>
@@ -52,11 +51,10 @@
     : public EventTargetWithInlineData
     , public ActiveDOMObject
     , public MediaStreamTrack::Observer
     , public MediaStreamPrivate::Observer
     , private MediaCanStartListener
-    , private PlatformMediaSessionClient
 #if !RELEASE_LOG_DISABLED
     , private LoggerHelper
 #endif
     , public RefCounted<MediaStream> {
     WTF_MAKE_ISO_ALLOCATED(MediaStream);
@@ -143,30 +141,13 @@
     MediaProducer::MediaStateFlags mediaState() const;
 
     // MediaCanStartListener
     void mediaCanStart(Document&) final;
 
-    // PlatformMediaSessionClient
-    PlatformMediaSession::MediaType mediaType() const final;
-    PlatformMediaSession::MediaType presentationType() const final;
-    PlatformMediaSession::CharacteristicsFlags characteristics() const final;
-    void mayResumePlayback(bool shouldResume) final;
-    void suspendPlayback() final;
-    bool canReceiveRemoteControlCommands() const final { return false; }
-    void didReceiveRemoteControlCommand(PlatformMediaSession::RemoteControlCommandType, const PlatformMediaSession::RemoteCommandArgument*) final { }
-    bool supportsSeeking() const final { return false; }
-    bool shouldOverrideBackgroundPlaybackRestriction(PlatformMediaSession::InterruptionType) const final { return false; }
-    String sourceApplicationIdentifier() const final;
-    bool canProduceAudio() const final;
-    Document* hostingDocument() const final { return document(); }
-    bool processingUserGestureForMedia() const final;
-    bool shouldOverridePauseDuringRouteChange() const final { return true; }
-
     // ActiveDOMObject API.
     void stop() final;
     const char* activeDOMObjectName() const final;
-    bool canSuspendForDocumentSuspension() const final;
 
     void updateActiveState();
     void activityEventTimerFired();
     void setIsActive(bool);
     void statusDidChange();
@@ -176,11 +157,10 @@
     Ref<MediaStreamPrivate> m_private;
 
     HashMap<String, RefPtr<MediaStreamTrack>> m_trackSet;
 
     Vector<Observer*> m_observers;
-    std::unique_ptr<PlatformMediaSession> m_mediaSession;
 
     MediaProducer::MediaStateFlags m_state { MediaProducer::IsNotPlaying };
 
     bool m_isActive { false };
     bool m_isProducingData { false };
