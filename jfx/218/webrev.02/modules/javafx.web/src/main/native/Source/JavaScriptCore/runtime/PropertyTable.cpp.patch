diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyTable.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyTable.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyTable.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/PropertyTable.cpp
@@ -28,10 +28,12 @@
 
 #include "JSCInlines.h"
 
 namespace JSC {
 
+DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(PropertyTable);
+
 const ClassInfo PropertyTable::s_info = { "PropertyTable", nullptr, nullptr, nullptr, CREATE_METHOD_TABLE(PropertyTable) };
 
 PropertyTable* PropertyTable::create(VM& vm, unsigned initialCapacity)
 {
     PropertyTable* table = new (NotNull, allocateCell<PropertyTable>(vm.heap)) PropertyTable(vm, initialCapacity);
@@ -55,22 +57,22 @@
 
 PropertyTable::PropertyTable(VM& vm, unsigned initialCapacity)
     : JSCell(vm, vm.propertyTableStructure.get())
     , m_indexSize(sizeForCapacity(initialCapacity))
     , m_indexMask(m_indexSize - 1)
-    , m_index(static_cast<unsigned*>(fastZeroedMalloc(dataSize())))
+    , m_index(static_cast<unsigned*>(PropertyTableMalloc::zeroedMalloc(dataSize())))
     , m_keyCount(0)
     , m_deletedCount(0)
 {
     ASSERT(isPowerOf2(m_indexSize));
 }
 
 PropertyTable::PropertyTable(VM& vm, const PropertyTable& other)
     : JSCell(vm, vm.propertyTableStructure.get())
     , m_indexSize(other.m_indexSize)
     , m_indexMask(other.m_indexMask)
-    , m_index(static_cast<unsigned*>(fastMalloc(dataSize())))
+    , m_index(static_cast<unsigned*>(PropertyTableMalloc::malloc(dataSize())))
     , m_keyCount(other.m_keyCount)
     , m_deletedCount(other.m_deletedCount)
 {
     ASSERT(isPowerOf2(m_indexSize));
 
@@ -88,11 +90,11 @@
 
 PropertyTable::PropertyTable(VM& vm, unsigned initialCapacity, const PropertyTable& other)
     : JSCell(vm, vm.propertyTableStructure.get())
     , m_indexSize(sizeForCapacity(initialCapacity))
     , m_indexMask(m_indexSize - 1)
-    , m_index(static_cast<unsigned*>(fastZeroedMalloc(dataSize())))
+    , m_index(static_cast<unsigned*>(PropertyTableMalloc::zeroedMalloc(dataSize())))
     , m_keyCount(0)
     , m_deletedCount(0)
 {
     ASSERT(isPowerOf2(m_indexSize));
     ASSERT(initialCapacity >= other.m_keyCount);
@@ -119,10 +121,11 @@
 {
     iterator end = this->end();
     for (iterator iter = begin(); iter != end; ++iter)
         iter->key->deref();
 
-    fastFree(m_index);
+    PropertyTableMalloc::free(m_index);
+
 }
 
 } // namespace JSC
 
