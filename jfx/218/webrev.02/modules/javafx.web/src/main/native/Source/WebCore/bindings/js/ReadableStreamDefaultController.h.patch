diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ReadableStreamDefaultController.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ReadableStreamDefaultController.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ReadableStreamDefaultController.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/ReadableStreamDefaultController.h
@@ -43,25 +43,24 @@
 
 class ReadableStreamDefaultController {
 public:
     explicit ReadableStreamDefaultController(JSReadableStreamDefaultController* controller) : m_jsController(controller) { }
 
-    static JSC::JSValue invoke(JSC::ExecState&, JSC::JSObject&, const char*, JSC::JSValue);
+    static JSC::JSValue invoke(JSC::JSGlobalObject&, JSC::JSObject&, const char*, JSC::JSValue);
 
     bool enqueue(RefPtr<JSC::ArrayBuffer>&&);
 
     void error(const Exception&);
 
-    void close() { invoke(*globalObject().globalExec(), jsController(), "close", JSC::jsUndefined()); }
+    void close() { invoke(globalObject(), jsController(), "close", JSC::jsUndefined()); }
 
 private:
-    void error(JSC::ExecState& state, JSC::JSValue value) { invoke(state, jsController(), "error", value); }
-    void enqueue(JSC::ExecState& state, JSC::JSValue value) { invoke(state, jsController(), "enqueue", value); }
+    void error(JSC::JSGlobalObject& lexicalGlobalObject, JSC::JSValue value) { invoke(lexicalGlobalObject, jsController(), "error", value); }
+    void enqueue(JSC::JSGlobalObject& lexicalGlobalObject, JSC::JSValue value) { invoke(lexicalGlobalObject, jsController(), "enqueue", value); }
     JSReadableStreamDefaultController& jsController() const;
 
     JSDOMGlobalObject& globalObject() const;
-    JSC::ExecState& globalExec() const;
 
     // The owner of ReadableStreamDefaultController is responsible to keep uncollected the JSReadableStreamDefaultController.
     JSReadableStreamDefaultController* m_jsController { nullptr };
 };
 
@@ -76,40 +75,34 @@
     ASSERT(m_jsController);
     ASSERT(m_jsController->globalObject());
     return *static_cast<JSDOMGlobalObject*>(m_jsController->globalObject());
 }
 
-inline JSC::ExecState& ReadableStreamDefaultController::globalExec() const
-{
-    ASSERT(globalObject().globalExec());
-    return *globalObject().globalExec();
-}
-
 inline bool ReadableStreamDefaultController::enqueue(RefPtr<JSC::ArrayBuffer>&& buffer)
 {
     auto& globalObject = this->globalObject();
     JSC::VM& vm = globalObject.vm();
     JSC::JSLockHolder locker(vm);
     auto scope = DECLARE_THROW_SCOPE(vm);
-    JSC::ExecState& state = globalExec();
+    JSC::JSGlobalObject& lexicalGlobalObject = globalObject;
 
     if (!buffer) {
-        error(state, createOutOfMemoryError(&state));
+        error(lexicalGlobalObject, createOutOfMemoryError(&lexicalGlobalObject));
         return false;
     }
     auto length = buffer->byteLength();
     auto chunk = JSC::Uint8Array::create(WTFMove(buffer), 0, length);
-    enqueue(state, toJS(&state, &globalObject, chunk.ptr()));
+    enqueue(lexicalGlobalObject, toJS(&lexicalGlobalObject, &globalObject, chunk.ptr()));
     scope.assertNoException();
     return true;
 }
 
 inline void ReadableStreamDefaultController::error(const Exception& exception)
 {
-    JSC::ExecState& state = globalExec();
-    JSC::JSLockHolder locker(&state);
-    error(state, createDOMException(&state, exception.code(), exception.message()));
+    JSC::JSGlobalObject& lexicalGlobalObject = globalObject();
+    JSC::JSLockHolder locker(&lexicalGlobalObject);
+    error(lexicalGlobalObject, createDOMException(&lexicalGlobalObject, exception.code(), exception.message()));
 }
 
 } // namespace WebCore
 
 #endif // ENABLE(STREAMS_API)
