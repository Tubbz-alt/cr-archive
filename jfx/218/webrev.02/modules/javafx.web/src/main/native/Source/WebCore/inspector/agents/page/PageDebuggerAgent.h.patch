diff a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageDebuggerAgent.h b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageDebuggerAgent.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageDebuggerAgent.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/inspector/agents/page/PageDebuggerAgent.h
@@ -33,63 +33,48 @@
 
 #include "WebDebuggerAgent.h"
 
 namespace WebCore {
 
+class DOMWrapperWorld;
 class Document;
-class EventListener;
-class EventTarget;
+class Frame;
 class Page;
-class RegisteredEventListener;
-class TimerBase;
 
 class PageDebuggerAgent final : public WebDebuggerAgent {
     WTF_MAKE_NONCOPYABLE(PageDebuggerAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
     PageDebuggerAgent(PageAgentContext&);
-    virtual ~PageDebuggerAgent();
+    ~PageDebuggerAgent() override;
+    bool enabled() const final;
 
     // DebuggerBackendDispatcherHandler
-    void evaluateOnCallFrame(ErrorString&, const String& callFrameId, const String& expression, const String* objectGroup, const bool* includeCommandLineAPI, const bool* doNotPauseOnExceptionsAndMuteConsole, const bool* returnByValue, const bool* generatePreview, const bool* saveResult, const bool* emulateUserGesture, RefPtr<Inspector::Protocol::Runtime::RemoteObject>& result, Optional<bool>& wasThrown, Optional<int>& savedResultIndex);
+    void evaluateOnCallFrame(ErrorString&, const String& callFrameId, const String& expression, const String* objectGroup, const bool* includeCommandLineAPI, const bool* doNotPauseOnExceptionsAndMuteConsole, const bool* returnByValue, const bool* generatePreview, const bool* saveResult, const bool* emulateUserGesture, RefPtr<Inspector::Protocol::Runtime::RemoteObject>& result, Optional<bool>& wasThrown, Optional<int>& savedResultIndex) override;
 
     // ScriptDebugListener
-    void breakpointActionLog(JSC::ExecState&, const String&);
+    void breakpointActionLog(JSC::JSGlobalObject*, const String&) override;
 
     // InspectorInstrumentation
-    void didClearMainFrameWindowObject();
+    void didClearWindowObjectInWorld(Frame&, DOMWrapperWorld&);
     void mainFrameStartedLoading();
     void mainFrameStoppedLoading();
     void mainFrameNavigated();
     void didRequestAnimationFrame(int callbackId, Document&);
     void willFireAnimationFrame(int callbackId);
     void didCancelAnimationFrame(int callbackId);
-    void didAddEventListener(EventTarget&, const AtomString& eventType, EventListener&, bool capture);
-    void willRemoveEventListener(EventTarget&, const AtomString& eventType, EventListener&, bool capture);
-    void willHandleEvent(const RegisteredEventListener&);
-    void didPostMessage(const TimerBase&, JSC::ExecState&);
-    void didFailPostMessage(const TimerBase&);
-    void willDispatchPostMessage(const TimerBase&);
-    void didDispatchPostMessage(const TimerBase&);
 
 private:
-    void enable();
-    void disable(bool isBeingDestroyed);
+    void enable() override;
+    void disable(bool isBeingDestroyed) override;
 
-    String sourceMapURLForScript(const Script&);
+    String sourceMapURLForScript(const Script&) override;
 
-    void didClearAsyncStackTraceData();
+    void muteConsole() override;
+    void unmuteConsole() override;
 
-    void muteConsole();
-    void unmuteConsole();
-
-    Inspector::InjectedScript injectedScriptForEval(ErrorString&, const int* executionContextId);
+    Inspector::InjectedScript injectedScriptForEval(ErrorString&, const int* executionContextId) override;
 
     Page& m_inspectedPage;
-
-    HashMap<const RegisteredEventListener*, int> m_registeredEventListeners;
-    HashMap<const TimerBase*, int> m_postMessageTimers;
-    int m_nextEventListenerIdentifier { 1 };
-    int m_nextPostMessageIdentifier { 1 };
 };
 
 } // namespace WebCore
