diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsTypes.cpp b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsTypes.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsTypes.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/graphics/GraphicsTypes.cpp
@@ -26,10 +26,11 @@
  */
 
 #include "config.h"
 #include "GraphicsTypes.h"
 
+#include "AlphaPremultiplication.h"
 #include <wtf/Assertions.h>
 #include <wtf/text/TextStream.h>
 #include <wtf/text/WTFString.h>
 
 namespace WebCore {
@@ -69,12 +70,12 @@
     "color",
     "luminosity",
     "plus-darker",
     "plus-lighter"
 };
-const int numCompositeOperatorNames = WTF_ARRAY_LENGTH(compositeOperatorNames);
-const unsigned numBlendOperatorNames = WTF_ARRAY_LENGTH(blendOperatorNames);
+const uint8_t numCompositeOperatorNames = WTF_ARRAY_LENGTH(compositeOperatorNames);
+const uint8_t numBlendOperatorNames = WTF_ARRAY_LENGTH(blendOperatorNames);
 
 bool parseBlendMode(const String& s, BlendMode& blendMode)
 {
     for (unsigned i = 0; i < numBlendOperatorNames; i++) {
         if (s == blendOperatorNames[i]) {
@@ -96,28 +97,28 @@
         }
     }
 
     if (parseBlendMode(s, blendOp)) {
         // For now, blending will always assume source-over. This will be fixed in the future
-        op = CompositeSourceOver;
+        op = CompositeOperator::SourceOver;
         return true;
     }
 
     return false;
 }
 
 // FIXME: when we support blend modes in combination with compositing other than source-over
 // this routine needs to be updated.
 String compositeOperatorName(CompositeOperator op, BlendMode blendOp)
 {
-    ASSERT(op >= 0);
-    ASSERT(op < numCompositeOperatorNames);
+    ASSERT(op >= CompositeOperator::Clear);
+    ASSERT(static_cast<uint8_t>(op) < numCompositeOperatorNames);
     ASSERT(blendOp >= BlendMode::Normal);
-    ASSERT(static_cast<unsigned>(blendOp) <= numBlendOperatorNames);
+    ASSERT(static_cast<uint8_t>(blendOp) <= numBlendOperatorNames);
     if (blendOp > BlendMode::Normal)
         return blendOperatorNames[static_cast<unsigned>(blendOp) - static_cast<unsigned>(BlendMode::Normal)];
-    return compositeOperatorNames[op];
+    return compositeOperatorNames[static_cast<unsigned>(op)];
 }
 
 String blendModeName(BlendMode blendOp)
 {
     ASSERT(blendOp >= BlendMode::Normal);
