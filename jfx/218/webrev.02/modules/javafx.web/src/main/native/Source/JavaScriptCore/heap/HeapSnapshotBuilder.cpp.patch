diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapSnapshotBuilder.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapSnapshotBuilder.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapSnapshotBuilder.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/HeapSnapshotBuilder.cpp
@@ -148,10 +148,12 @@
 void HeapSnapshotBuilder::setOpaqueRootReachabilityReasonForCell(JSCell* cell, const char* reason)
 {
     if (!reason || !*reason || m_snapshotType != SnapshotType::GCDebuggingSnapshot)
         return;
 
+    std::lock_guard<Lock> lock(m_buildingEdgeMutex);
+
     m_rootData.ensure(cell, [] () -> RootData {
         return { };
     }).iterator->value.reachabilityFromOpaqueRootReasons = reason;
 }
 
@@ -398,13 +400,12 @@
             // Skip calculating a class name if this object has a `constructor` own property.
             // These cases are typically F.prototype objects and we want to treat these as
             // "Object" in snapshots and not get the name of the prototype's parent.
             JSObject* object = asObject(node.cell);
             if (JSGlobalObject* globalObject = object->globalObject(vm)) {
-                ExecState* exec = globalObject->globalExec();
                 PropertySlot slot(object, PropertySlot::InternalMethodType::VMInquiry);
-                if (!object->getOwnPropertySlot(object, exec, vm.propertyNames->constructor, slot))
+                if (!object->getOwnPropertySlot(object, globalObject, vm.propertyNames->constructor, slot))
                     className = JSObject::calculatedClassName(object);
             }
         }
 
         auto result = classNameIndexes.add(className, nextClassNameIndex);
@@ -461,13 +462,13 @@
         json.appendNumber(flags);
         if (m_snapshotType == SnapshotType::GCDebuggingSnapshot) {
             json.append(',');
             json.appendNumber(labelIndex);
             json.appendLiteral(",\"0x");
-            appendUnsignedAsHex(reinterpret_cast<uintptr_t>(node.cell), json, Lowercase);
+            json.append(hex(reinterpret_cast<uintptr_t>(node.cell), Lowercase));
             json.appendLiteral("\",\"0x");
-            appendUnsignedAsHex(reinterpret_cast<uintptr_t>(wrappedAddress), json, Lowercase);
+            json.append(hex(reinterpret_cast<uintptr_t>(wrappedAddress), Lowercase));
             json.append('"');
         }
     };
 
     bool firstEdge = true;
