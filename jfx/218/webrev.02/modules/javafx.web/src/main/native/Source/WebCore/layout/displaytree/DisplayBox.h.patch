diff a/modules/javafx.web/src/main/native/Source/WebCore/layout/displaytree/DisplayBox.h b/modules/javafx.web/src/main/native/Source/WebCore/layout/displaytree/DisplayBox.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/layout/displaytree/DisplayBox.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/layout/displaytree/DisplayBox.h
@@ -27,44 +27,20 @@
 
 #if ENABLE(LAYOUT_FORMATTING_CONTEXT)
 
 #include "DisplayRect.h"
 #include "LayoutUnits.h"
-#include "RenderStyleConstants.h"
 #include <wtf/IsoMalloc.h>
 
 namespace WebCore {
-
-class RenderStyle;
-
-namespace Layout {
-class BlockFormattingContext;
-class FloatAvoider;
-class FloatBox;
-class FormattingContext;
-class FloatingContext;
-class InlineFormattingContext;
-class LayoutState;
-class TableFormattingContext;
-}
-
 namespace Display {
 
 class Box {
     WTF_MAKE_ISO_ALLOCATED(Box);
 public:
-    friend class Layout::BlockFormattingContext;
-    friend class Layout::FloatAvoider;
-    friend class Layout::FloatBox;
-    friend class Layout::FormattingContext;
-    friend class Layout::FloatingContext;
-    friend class Layout::InlineFormattingContext;
-    friend class Layout::LayoutState;
-    friend class Layout::TableFormattingContext;
-
-    Box(const RenderStyle&);
     Box(const Box&);
+    Box() = default;
     ~Box();
 
     LayoutUnit top() const;
     LayoutUnit left() const;
     LayoutUnit bottom() const { return top() + height(); }
@@ -74,10 +50,11 @@
     LayoutPoint bottomRight() const { return { right(), bottom() }; }
 
     LayoutSize size() const { return { width(), height() }; }
     LayoutUnit width() const { return borderLeft() + paddingBoxWidth() + borderRight(); }
     LayoutUnit height() const { return borderTop() + paddingBoxHeight() + borderBottom(); }
+    bool isEmpty() const { return size().isEmpty(); }
     Rect rect() const { return { top(), left(), width(), height() }; }
     Rect rectWithMargin() const;
 
     Layout::UsedVerticalMargin verticalMargin() const;
     Layout::UsedHorizontalMargin horizontalMargin() const;
@@ -133,26 +110,21 @@
 
     Rect borderBox() const;
     Rect paddingBox() const;
     Rect contentBox() const;
 
-#if !ASSERT_DISABLED
-    void setHasEstimatedMarginBefore() { m_hasEstimatedMarginBefore = true; }
+#if ASSERT_ENABLED
+    void setHasPrecomputedMarginBefore() { m_hasPrecomputedMarginBefore = true; }
 #endif
 
-private:
-    struct Style {
-        Style(const RenderStyle&);
-
-        BoxSizing boxSizing { BoxSizing::ContentBox };
-    };
-
     void setTopLeft(const LayoutPoint&);
     void setTop(LayoutUnit);
     void setLeft(LayoutUnit);
     void moveHorizontally(LayoutUnit offset) { m_topLeft.move(offset, 0_lu); }
     void moveVertically(LayoutUnit offset) { m_topLeft.move(0_lu, offset); }
+    void move(const LayoutSize& size) { m_topLeft.move(size); }
+    void moveBy(LayoutPoint offset) { m_topLeft.moveBy(offset); }
 
     void setContentBoxHeight(LayoutUnit);
     void setContentBoxWidth(LayoutUnit);
 
     void setHorizontalMargin(Layout::UsedHorizontalMargin);
@@ -161,15 +133,16 @@
     void setHasClearance() { m_hasClearance = true; }
 
     void setBorder(Layout::Edges);
     void setPadding(Optional<Layout::Edges>);
 
-#if !ASSERT_DISABLED
+private:
+#if ASSERT_ENABLED
     void invalidateMargin();
     void invalidateBorder() { m_hasValidBorder = false; }
     void invalidatePadding() { m_hasValidPadding = false; }
-    void invalidateEstimatedMarginBefore() { m_hasEstimatedMarginBefore = false; }
+    void invalidatePrecomputedMarginBefore() { m_hasPrecomputedMarginBefore = false; }
 
     void setHasValidTop() { m_hasValidTop = true; }
     void setHasValidLeft() { m_hasValidLeft = true; }
     void setHasValidVerticalMargin() { m_hasValidVerticalMargin = true; }
     void setHasValidVerticalNonCollapsedMargin() { m_hasValidVerticalNonCollapsedMargin = true; }
@@ -179,13 +152,11 @@
     void setHasValidBorder() { m_hasValidBorder = true; }
     void setHasValidPadding() { m_hasValidPadding = true; }
 
     void setHasValidContentHeight() { m_hasValidContentHeight = true; }
     void setHasValidContentWidth() { m_hasValidContentWidth = true; }
-#endif
-
-    const Style m_style;
+#endif // ASSERT_ENABLED
 
     LayoutPoint m_topLeft;
     LayoutUnit m_contentWidth;
     LayoutUnit m_contentHeight;
 
@@ -195,36 +166,36 @@
     bool m_hasClearance { false };
 
     Layout::Edges m_border;
     Optional<Layout::Edges> m_padding;
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     bool m_hasValidTop { false };
     bool m_hasValidLeft { false };
     bool m_hasValidHorizontalMargin { false };
     bool m_hasValidVerticalMargin { false };
     bool m_hasValidVerticalNonCollapsedMargin { false };
     bool m_hasValidHorizontalComputedMargin { false };
     bool m_hasValidBorder { false };
     bool m_hasValidPadding { false };
     bool m_hasValidContentHeight { false };
     bool m_hasValidContentWidth { false };
-    bool m_hasEstimatedMarginBefore { false };
-#endif
+    bool m_hasPrecomputedMarginBefore { false };
+#endif // ASSERT_ENABLED
 };
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
 inline void Box::invalidateMargin()
 {
     m_hasValidHorizontalMargin = false;
     m_hasValidVerticalMargin = false;
 }
 #endif
 
 inline LayoutUnit Box::top() const
 {
-    ASSERT(m_hasValidTop && (m_hasEstimatedMarginBefore || m_hasValidVerticalMargin));
+    ASSERT(m_hasValidTop && (m_hasPrecomputedMarginBefore || m_hasValidVerticalMargin));
     return m_topLeft.y();
 }
 
 inline LayoutUnit Box::left() const
 {
@@ -232,51 +203,51 @@
     return m_topLeft.x();
 }
 
 inline LayoutPoint Box::topLeft() const
 {
-    ASSERT(m_hasValidTop && (m_hasEstimatedMarginBefore || m_hasValidVerticalMargin));
+    ASSERT(m_hasValidTop && (m_hasPrecomputedMarginBefore || m_hasValidVerticalMargin));
     ASSERT(m_hasValidLeft && m_hasValidHorizontalMargin);
     return m_topLeft;
 }
 
 inline void Box::setTopLeft(const LayoutPoint& topLeft)
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     setHasValidTop();
     setHasValidLeft();
 #endif
     m_topLeft = topLeft;
 }
 
 inline void Box::setTop(LayoutUnit top)
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     setHasValidTop();
 #endif
     m_topLeft.setY(top);
 }
 
 inline void Box::setLeft(LayoutUnit left)
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     setHasValidLeft();
 #endif
     m_topLeft.setX(left);
 }
 
 inline void Box::setContentBoxHeight(LayoutUnit height)
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     setHasValidContentHeight();
 #endif
     m_contentHeight = height;
 }
 
 inline void Box::setContentBoxWidth(LayoutUnit width)
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     setHasValidContentWidth();
 #endif
     m_contentWidth = width;
 }
 
@@ -292,45 +263,45 @@
     return m_contentWidth;
 }
 
 inline void Box::setHorizontalMargin(Layout::UsedHorizontalMargin margin)
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     setHasValidHorizontalMargin();
 #endif
     m_horizontalMargin = margin;
 }
 
 inline void Box::setVerticalMargin(Layout::UsedVerticalMargin margin)
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     setHasValidVerticalMargin();
     setHasValidVerticalNonCollapsedMargin();
-    invalidateEstimatedMarginBefore();
+    invalidatePrecomputedMarginBefore();
 #endif
     m_verticalMargin = margin;
 }
 
 inline void Box::setHorizontalComputedMargin(Layout::ComputedHorizontalMargin margin)
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     setHasValidHorizontalComputedMargin();
 #endif
     m_horizontalComputedMargin = margin;
 }
 
 inline void Box::setBorder(Layout::Edges border)
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     setHasValidBorder();
 #endif
     m_border = border;
 }
 
 inline void Box::setPadding(Optional<Layout::Edges> padding)
 {
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     setHasValidPadding();
 #endif
     m_padding = padding;
 }
 
