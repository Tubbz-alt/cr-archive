diff a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/BasicShapes.h b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/BasicShapes.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/BasicShapes.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/rendering/style/BasicShapes.h
@@ -35,10 +35,14 @@
 #include <wtf/RefCounted.h>
 #include <wtf/RefPtr.h>
 #include <wtf/TypeCasts.h>
 #include <wtf/Vector.h>
 
+namespace WTF {
+class TextStream;
+}
+
 namespace WebCore {
 
 class FloatRect;
 class Path;
 class RenderBox;
@@ -46,16 +50,16 @@
 
 class BasicShape : public RefCounted<BasicShape> {
 public:
     virtual ~BasicShape() = default;
 
-    enum Type {
-        BasicShapePolygonType,
-        BasicShapePathType,
-        BasicShapeCircleType,
-        BasicShapeEllipseType,
-        BasicShapeInsetType
+    enum class Type {
+        Polygon,
+        Path,
+        Circle,
+        Ellipse,
+        Inset
     };
 
     virtual Type type() const = 0;
 
     virtual const Path& path(const FloatRect&) = 0;
@@ -63,22 +67,22 @@
 
     virtual bool canBlend(const BasicShape&) const = 0;
     virtual Ref<BasicShape> blend(const BasicShape& from, double) const = 0;
 
     virtual bool operator==(const BasicShape&) const = 0;
+
+    virtual void dump(TextStream&) const = 0;
 };
 
 class BasicShapeCenterCoordinate {
 public:
     enum Direction {
         TopLeft,
         BottomRight
     };
 
     BasicShapeCenterCoordinate()
-        : m_direction(TopLeft)
-        , m_length(Undefined)
     {
         updateComputedLength();
     }
 
     BasicShapeCenterCoordinate(Direction direction, Length length)
@@ -105,26 +109,24 @@
     }
 
 private:
     void updateComputedLength();
 
-    Direction m_direction;
-    Length m_length;
+    Direction m_direction { TopLeft };
+    Length m_length { Undefined };
     Length m_computedLength;
 };
 
 class BasicShapeRadius {
 public:
     enum Type {
         Value,
         ClosestSide,
         FarthestSide
     };
-    BasicShapeRadius()
-        : m_value(Undefined),
-        m_type(ClosestSide)
-    { }
+
+    BasicShapeRadius() = default;
 
     explicit BasicShapeRadius(Length v)
         : m_value(v)
         , m_type(Value)
     { }
@@ -154,13 +156,12 @@
     {
         return m_value == other.m_value && m_type == other.m_type;
     }
 
 private:
-    Length m_value;
-    Type m_type;
-
+    Length m_value { Undefined };
+    Type m_type { ClosestSide };
 };
 
 class BasicShapeCircle final : public BasicShape {
 public:
     static Ref<BasicShapeCircle> create() { return adoptRef(*new BasicShapeCircle); }
@@ -175,19 +176,21 @@
     void setRadius(BasicShapeRadius radius) { m_radius = WTFMove(radius); }
 
 private:
     BasicShapeCircle() = default;
 
-    Type type() const override { return BasicShapeCircleType; }
+    Type type() const override { return Type::Circle; }
 
     const Path& path(const FloatRect&) override;
 
     bool canBlend(const BasicShape&) const override;
     Ref<BasicShape> blend(const BasicShape& from, double) const override;
 
     bool operator==(const BasicShape&) const override;
 
+    void dump(TextStream&) const final;
+
     BasicShapeCenterCoordinate m_centerX;
     BasicShapeCenterCoordinate m_centerY;
     BasicShapeRadius m_radius;
 };
 
@@ -207,19 +210,21 @@
     void setRadiusY(BasicShapeRadius radiusY) { m_radiusY = WTFMove(radiusY); }
 
 private:
     BasicShapeEllipse() = default;
 
-    Type type() const override { return BasicShapeEllipseType; }
+    Type type() const override { return Type::Ellipse; }
 
     const Path& path(const FloatRect&) override;
 
     bool canBlend(const BasicShape&) const override;
     Ref<BasicShape> blend(const BasicShape& from, double) const override;
 
     bool operator==(const BasicShape&) const override;
 
+    void dump(TextStream&) const final;
+
     BasicShapeCenterCoordinate m_centerX;
     BasicShapeCenterCoordinate m_centerY;
     BasicShapeRadius m_radiusX;
     BasicShapeRadius m_radiusY;
 };
@@ -238,19 +243,21 @@
     WindRule windRule() const override { return m_windRule; }
 
 private:
     BasicShapePolygon() = default;
 
-    Type type() const override { return BasicShapePolygonType; }
+    Type type() const override { return Type::Polygon; }
 
     const Path& path(const FloatRect&) override;
 
     bool canBlend(const BasicShape&) const override;
     Ref<BasicShape> blend(const BasicShape& from, double) const override;
 
     bool operator==(const BasicShape&) const override;
 
+    void dump(TextStream&) const final;
+
     WindRule m_windRule { WindRule::NonZero };
     Vector<Length> m_values;
 };
 
 class BasicShapePath final : public BasicShape {
@@ -266,19 +273,21 @@
     const SVGPathByteStream* pathData() const { return m_byteStream.get(); }
 
 private:
     BasicShapePath(std::unique_ptr<SVGPathByteStream>&&);
 
-    Type type() const override { return BasicShapePathType; }
+    Type type() const override { return Type::Path; }
 
     const Path& path(const FloatRect&) override;
 
     bool canBlend(const BasicShape&) const override;
     Ref<BasicShape> blend(const BasicShape& from, double) const override;
 
     bool operator==(const BasicShape&) const override;
 
+    void dump(TextStream&) const final;
+
     std::unique_ptr<SVGPathByteStream> m_byteStream;
     WindRule m_windRule { WindRule::NonZero };
 };
 
 class BasicShapeInset final : public BasicShape {
@@ -306,19 +315,21 @@
     void setBottomLeftRadius(LengthSize radius) { m_bottomLeftRadius = WTFMove(radius); }
 
 private:
     BasicShapeInset() = default;
 
-    Type type() const override { return BasicShapeInsetType; }
+    Type type() const override { return Type::Inset; }
 
     const Path& path(const FloatRect&) override;
 
     bool canBlend(const BasicShape&) const override;
     Ref<BasicShape> blend(const BasicShape& from, double) const override;
 
     bool operator==(const BasicShape&) const override;
 
+    void dump(TextStream&) const final;
+
     Length m_right;
     Length m_top;
     Length m_bottom;
     Length m_left;
 
@@ -326,17 +337,21 @@
     LengthSize m_topRightRadius;
     LengthSize m_bottomRightRadius;
     LengthSize m_bottomLeftRadius;
 };
 
+WTF::TextStream& operator<<(WTF::TextStream&, const BasicShapeRadius&);
+WTF::TextStream& operator<<(WTF::TextStream&, const BasicShapeCenterCoordinate&);
+WTF::TextStream& operator<<(WTF::TextStream&, const BasicShape&);
+
 } // namespace WebCore
 
 #define SPECIALIZE_TYPE_TRAITS_BASIC_SHAPE(ToValueTypeName, predicate) \
 SPECIALIZE_TYPE_TRAITS_BEGIN(WebCore::ToValueTypeName) \
     static bool isType(const WebCore::BasicShape& basicShape) { return basicShape.type() == WebCore::predicate; } \
 SPECIALIZE_TYPE_TRAITS_END()
 
-SPECIALIZE_TYPE_TRAITS_BASIC_SHAPE(BasicShapeCircle, BasicShape::BasicShapeCircleType)
-SPECIALIZE_TYPE_TRAITS_BASIC_SHAPE(BasicShapeEllipse, BasicShape::BasicShapeEllipseType)
-SPECIALIZE_TYPE_TRAITS_BASIC_SHAPE(BasicShapePolygon, BasicShape::BasicShapePolygonType)
-SPECIALIZE_TYPE_TRAITS_BASIC_SHAPE(BasicShapePath, BasicShape::BasicShapePathType)
-SPECIALIZE_TYPE_TRAITS_BASIC_SHAPE(BasicShapeInset, BasicShape::BasicShapeInsetType)
+SPECIALIZE_TYPE_TRAITS_BASIC_SHAPE(BasicShapeCircle, BasicShape::Type::Circle)
+SPECIALIZE_TYPE_TRAITS_BASIC_SHAPE(BasicShapeEllipse, BasicShape::Type::Ellipse)
+SPECIALIZE_TYPE_TRAITS_BASIC_SHAPE(BasicShapePolygon, BasicShape::Type::Polygon)
+SPECIALIZE_TYPE_TRAITS_BASIC_SHAPE(BasicShapePath, BasicShape::Type::Path)
+SPECIALIZE_TYPE_TRAITS_BASIC_SHAPE(BasicShapeInset, BasicShape::Type::Inset)
