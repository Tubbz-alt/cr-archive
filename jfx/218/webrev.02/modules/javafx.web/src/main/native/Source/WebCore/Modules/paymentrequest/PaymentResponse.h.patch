diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentResponse.h b/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentResponse.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentResponse.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/paymentrequest/PaymentResponse.h
@@ -28,11 +28,10 @@
 #if ENABLE(PAYMENT_REQUEST)
 
 #include "ActiveDOMObject.h"
 #include "ContextDestructionObserver.h"
 #include "EventTarget.h"
-#include "JSDOMPromiseDeferred.h"
 #include "JSValueInWrappedObject.h"
 #include "PaymentAddress.h"
 #include "PaymentComplete.h"
 #include <wtf/WeakPtr.h>
 
@@ -40,14 +39,16 @@
 
 class Document;
 class PaymentRequest;
 struct PaymentValidationErrors;
 
+template<typename IDLType> class DOMPromiseDeferred;
+
 class PaymentResponse final : public ActiveDOMObject, public EventTargetWithInlineData, public RefCounted<PaymentResponse> {
     WTF_MAKE_ISO_ALLOCATED(PaymentResponse);
 public:
-    using DetailsFunction = Function<JSC::Strong<JSC::JSObject>(JSC::ExecState&)>;
+    using DetailsFunction = Function<JSC::Strong<JSC::JSObject>(JSC::JSGlobalObject&)>;
 
     static Ref<PaymentResponse> create(ScriptExecutionContext* context, PaymentRequest& request)
     {
         auto response = adoptRef(*new PaymentResponse(context, request));
         response->finishConstruction();
@@ -95,12 +96,12 @@
     PaymentResponse(ScriptExecutionContext*, PaymentRequest&);
     void finishConstruction();
 
     // ActiveDOMObject
     const char* activeDOMObjectName() const final { return "PaymentResponse"; }
-    bool canSuspendForDocumentSuspension() const final;
     void stop() final;
+    void suspend(ReasonForSuspension) final;
 
     // EventTarget
     EventTargetInterface eventTargetInterface() const final { return PaymentResponseEventTargetInterfaceType; }
     ScriptExecutionContext* scriptExecutionContext() const final { return ActiveDOMObject::scriptExecutionContext(); }
     void refEventTarget() final { ref(); }
@@ -121,11 +122,11 @@
     String m_shippingOption;
     String m_payerName;
     String m_payerEmail;
     String m_payerPhone;
     State m_state { State::Created };
-    Optional<DOMPromiseDeferred<void>> m_retryPromise;
+    std::unique_ptr<DOMPromiseDeferred<void>> m_retryPromise;
     RefPtr<PendingActivity<PaymentResponse>> m_pendingActivity;
 };
 
 } // namespace WebCore
 
