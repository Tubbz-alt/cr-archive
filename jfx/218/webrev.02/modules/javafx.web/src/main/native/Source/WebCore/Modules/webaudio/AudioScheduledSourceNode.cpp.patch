diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/AudioScheduledSourceNode.cpp b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/AudioScheduledSourceNode.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/AudioScheduledSourceNode.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/webaudio/AudioScheduledSourceNode.cpp
@@ -35,10 +35,11 @@
 #include "ScriptController.h"
 #include "ScriptExecutionContext.h"
 #include <algorithm>
 #include <wtf/IsoMallocInlines.h>
 #include <wtf/MathExtras.h>
+#include <wtf/Scope.h>
 
 #if PLATFORM(IOS_FAMILY)
 #include "ScriptController.h"
 #endif
 
@@ -48,12 +49,15 @@
 
 const double AudioScheduledSourceNode::UnknownTime = -1;
 
 AudioScheduledSourceNode::AudioScheduledSourceNode(AudioContext& context, float sampleRate)
     : AudioNode(context, sampleRate)
+    , ActiveDOMObject(context.scriptExecutionContext())
     , m_endTime(UnknownTime)
 {
+    suspendIfNeeded();
+    m_pendingActivity = makePendingActivity(*this);
 }
 
 void AudioScheduledSourceNode::updateSchedulingInfo(size_t quantumFrameSize, AudioBus& outputBus, size_t& quantumFrameOffset, size_t& nonSilentFramesToProcess)
 {
     nonSilentFramesToProcess = 0;
@@ -130,11 +134,11 @@
 
         finish();
     }
 }
 
-ExceptionOr<void> AudioScheduledSourceNode::start(double when)
+ExceptionOr<void> AudioScheduledSourceNode::startLater(double when)
 {
     ASSERT(isMainThread());
     ALWAYS_LOG(LOGIDENTIFIER, when);
 
     context().nodeWillBeginPlayback();
@@ -148,11 +152,11 @@
     m_playbackState = SCHEDULED_STATE;
 
     return { };
 }
 
-ExceptionOr<void> AudioScheduledSourceNode::stop(double when)
+ExceptionOr<void> AudioScheduledSourceNode::stopLater(double when)
 {
     ASSERT(isMainThread());
     ALWAYS_LOG(LOGIDENTIFIER, when);
 
     if (m_playbackState == UNSCHEDULED_STATE || m_endTime != UnknownTime)
@@ -163,49 +167,35 @@
     m_endTime = when;
 
     return { };
 }
 
-void AudioScheduledSourceNode::finish()
+void AudioScheduledSourceNode::didBecomeMarkedForDeletion()
 {
-    if (m_playbackState != FINISHED_STATE) {
-        // Let the context dereference this AudioNode.
-        context().notifyNodeFinishedProcessing(this);
-        m_playbackState = FINISHED_STATE;
-        context().decrementActiveSourceCount();
-    }
+    ASSERT(context().isGraphOwner());
+    m_pendingActivity = nullptr;
+    ASSERT(!hasPendingActivity());
+}
 
-    if (!m_hasEndedListener)
-        return;
+void AudioScheduledSourceNode::finish()
+{
+    ASSERT(!hasFinished());
+    // Let the context dereference this AudioNode.
+    context().notifyNodeFinishedProcessing(this);
+    m_playbackState = FINISHED_STATE;
+    context().decrementActiveSourceCount();
 
     context().postTask([this, protectedThis = makeRef(*this)] {
+        auto release = makeScopeExit([&] () {
+            AudioContext::AutoLocker locker(context());
+            m_pendingActivity = nullptr;
+            ASSERT(!hasPendingActivity());
+        });
         if (context().isStopped())
             return;
         this->dispatchEvent(Event::create(eventNames().endedEvent, Event::CanBubble::No, Event::IsCancelable::No));
     });
 }
 
-bool AudioScheduledSourceNode::addEventListener(const AtomString& eventType, Ref<EventListener>&& listener, const AddEventListenerOptions& options)
-{
-    bool success = AudioNode::addEventListener(eventType, WTFMove(listener), options);
-    if (success && eventType == eventNames().endedEvent)
-        m_hasEndedListener = hasEventListeners(eventNames().endedEvent);
-    return success;
-}
-
-bool AudioScheduledSourceNode::removeEventListener(const AtomString& eventType, EventListener& listener, const ListenerOptions& options)
-{
-    bool success = AudioNode::removeEventListener(eventType, listener, options);
-    if (success && eventType == eventNames().endedEvent)
-        m_hasEndedListener = hasEventListeners(eventNames().endedEvent);
-    return success;
-}
-
-void AudioScheduledSourceNode::removeAllEventListeners()
-{
-    m_hasEndedListener = false;
-    AudioNode::removeAllEventListeners();
-}
-
 } // namespace WebCore
 
 #endif // ENABLE(WEB_AUDIO)
