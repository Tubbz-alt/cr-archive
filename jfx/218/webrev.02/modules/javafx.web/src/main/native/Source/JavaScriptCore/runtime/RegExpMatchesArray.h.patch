diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpMatchesArray.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpMatchesArray.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpMatchesArray.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpMatchesArray.h
@@ -22,10 +22,11 @@
 #include "ButterflyInlines.h"
 #include "GCDeferralContextInlines.h"
 #include "JSArray.h"
 #include "JSCInlines.h"
 #include "JSGlobalObject.h"
+#include "ObjectConstructor.h"
 #include "RegExpInlines.h"
 #include "RegExpObject.h"
 
 namespace JSC {
 
@@ -80,27 +81,22 @@
     // FIXME: This should handle array allocation errors gracefully.
     // https://bugs.webkit.org/show_bug.cgi?id=155144
 
     unsigned numSubpatterns = regExp->numSubpatterns();
     bool hasNamedCaptures = regExp->hasNamedCaptures();
-    JSObject* groups = nullptr;
+    JSObject* groups = hasNamedCaptures ? constructEmptyObject(vm, globalObject->nullPrototypeObjectStructure()) : nullptr;
     Structure* matchStructure = globalObject->regExpMatchesArrayStructure();
-    if (hasNamedCaptures) {
-        groups = JSFinalObject::create(vm, JSFinalObject::createStructure(vm, globalObject, globalObject->objectPrototype(), 0));
-        matchStructure = globalObject->regExpMatchesArrayWithGroupsStructure();
-    }
 
     auto setProperties = [&] () {
         array->putDirect(vm, RegExpMatchesArrayIndexPropertyOffset, jsNumber(result.start));
         array->putDirect(vm, RegExpMatchesArrayInputPropertyOffset, input);
-        if (hasNamedCaptures)
-            array->putDirect(vm, RegExpMatchesArrayGroupsPropertyOffset, groups);
+        array->putDirect(vm, RegExpMatchesArrayGroupsPropertyOffset, hasNamedCaptures ? groups : jsUndefined());
 
         ASSERT(!array->butterfly()->indexingHeader()->preCapacity(matchStructure));
         auto capacity = matchStructure->outOfLineCapacity();
         auto size = matchStructure->outOfLineSize();
-        memset(array->butterfly()->base(0, capacity), 0, (capacity - size) * sizeof(JSValue));
+        gcSafeZeroMemory(static_cast<JSValue*>(array->butterfly()->base(0, capacity)), (capacity - size) * sizeof(JSValue));
     };
 
     if (UNLIKELY(globalObject->isHavingABadTime())) {
         GCDeferralContext deferralContext(vm.heap);
         ObjectInitializationScope scope(vm);
@@ -153,27 +149,31 @@
 
     // Now the object is safe to scan by GC.
 
     // We initialize the groups object late as it could allocate, which with the current API could cause
     // allocations.
-    if (groups) {
+    if (hasNamedCaptures) {
         for (unsigned i = 1; i <= numSubpatterns; ++i) {
             String groupName = regExp->getCaptureGroupName(i);
             if (!groupName.isEmpty())
                 groups->putDirect(vm, Identifier::fromString(vm, groupName), array->getIndexQuickly(i));
         }
     }
     return array;
 }
 
-inline JSArray* createRegExpMatchesArray(ExecState* exec, JSGlobalObject* globalObject, JSString* string, RegExp* regExp, unsigned startOffset)
+inline JSArray* createRegExpMatchesArray(JSGlobalObject* globalObject, JSString* string, RegExp* regExp, unsigned startOffset)
 {
+    VM& vm = getVM(globalObject);
+    auto scope = DECLARE_THROW_SCOPE(vm);
+
     MatchResult ignoredResult;
-    return createRegExpMatchesArray(globalObject->vm(), globalObject, string, string->value(exec), regExp, startOffset, ignoredResult);
+    String input = string->value(globalObject);
+    RETURN_IF_EXCEPTION(scope, { });
+
+    RELEASE_AND_RETURN(scope, createRegExpMatchesArray(vm, globalObject, string, input, regExp, startOffset, ignoredResult));
 }
 JSArray* createEmptyRegExpMatchesArray(JSGlobalObject*, JSString*, RegExp*);
 Structure* createRegExpMatchesArrayStructure(VM&, JSGlobalObject*);
 Structure* createRegExpMatchesArraySlowPutStructure(VM&, JSGlobalObject*);
-Structure* createRegExpMatchesArrayWithGroupsStructure(VM&, JSGlobalObject*);
-Structure* createRegExpMatchesArrayWithGroupsSlowPutStructure(VM&, JSGlobalObject*);
 
 } // namespace JSC
