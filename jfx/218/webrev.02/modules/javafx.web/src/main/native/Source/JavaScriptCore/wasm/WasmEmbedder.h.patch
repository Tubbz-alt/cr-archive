diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmEmbedder.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmEmbedder.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmEmbedder.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/WasmEmbedder.h
@@ -34,11 +34,12 @@
 
 #include <memory>
 
 namespace JSC {
 
-class ExecState;
+class CCallHelpers;
+class CallFrame;
 
 namespace Wasm {
 
 struct CompilationContext;
 class Instance;
@@ -46,13 +47,13 @@
 struct ModuleInformation;
 class Signature;
 struct UnlinkedWasmToWasmCall;
 
 // Create wrapper code to call from embedder -> WebAssembly.
-using CreateEmbedderWrapper = WTF::Function<std::unique_ptr<InternalFunction>(CompilationContext&, const Signature&, Vector<UnlinkedWasmToWasmCall>*, const ModuleInformation&, MemoryMode, uint32_t)>;
+using CreateEmbedderWrapper = WTF::Function<std::unique_ptr<InternalFunction>(CCallHelpers&, const Signature&, Vector<UnlinkedWasmToWasmCall>*, const ModuleInformation&, MemoryMode, uint32_t)>;
 
 // Called as soon as an exception is detected. The return value is the PC to continue at.
-using ThrowWasmException = void* (*)(ExecState*, Wasm::ExceptionType, Instance*);
+using ThrowWasmException = void* (*)(CallFrame*, Wasm::ExceptionType, Instance*);
 
 } } // namespace JSC::Wasm
 
 #endif // ENABLE(WEBASSEMBLY)
