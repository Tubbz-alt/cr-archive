diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/StringIteratorPrototype.js b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/StringIteratorPrototype.js
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/StringIteratorPrototype.js
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/builtins/StringIteratorPrototype.js
@@ -25,25 +25,22 @@
 
 function next()
 {
     "use strict";
 
-    if (@isUndefinedOrNull(this))
-        @throwTypeError("%StringIteratorPrototype%.next requires that |this| not be null or undefined");
-
-    var position = @getByIdDirectPrivate(this, "stringIteratorNextIndex");
-    if (position === @undefined)
+    if (!@isStringIterator(this))
         @throwTypeError("%StringIteratorPrototype%.next requires that |this| be a String Iterator instance");
 
     var done = true;
     var value = @undefined;
 
-    var string = @getByIdDirectPrivate(this, "iteratedString");
-    if (string !== @undefined) {
+    var position = @getStringIteratorInternalField(this, @stringIteratorFieldIndex);
+    if (position !== -1) {
+        var string = @getStringIteratorInternalField(this, @stringIteratorFieldIteratedString);
         var length = string.length >>> 0;
         if (position >= length)
-            @putByIdDirectPrivate(this, "iteratedString", @undefined);
+            @putStringIteratorInternalField(this, @stringIteratorFieldIndex, -1);
         else {
             done = false;
 
             var first = string.@charCodeAt(position);
             if (first < 0xD800 || first > 0xDBFF || position + 1 === length)
@@ -53,12 +50,11 @@
                 if (second < 0xDC00 || second > 0xDFFF)
                     value = string[position];
                 else
                     value = string[position] + string[position + 1];
             }
-
-            @putByIdDirectPrivate(this, "stringIteratorNextIndex", position + value.length);
+            @putStringIteratorInternalField(this, @stringIteratorFieldIndex, position + value.length);
         }
     }
 
     return { value, done };
 }
