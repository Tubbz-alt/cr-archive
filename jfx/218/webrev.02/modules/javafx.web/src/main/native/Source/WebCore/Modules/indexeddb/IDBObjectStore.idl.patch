diff a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBObjectStore.idl b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBObjectStore.idl
--- a/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBObjectStore.idl
+++ b/modules/javafx.web/src/main/native/Source/WebCore/Modules/indexeddb/IDBObjectStore.idl
@@ -26,10 +26,11 @@
 // NOTE: This type is specified as 'any' in the IndexedDB specification, but is always
 // constrained to this union.
 typedef (DOMString or sequence<DOMString>) IDBKeyPath;
 
 [
+    ActiveDOMObject,
     Conditional=INDEXED_DATABASE,
     GenerateIsReachable=Impl,
     JSCustomMarkFunction,
     SkipVTableValidation,
 ] interface IDBObjectStore {
@@ -37,32 +38,32 @@
     readonly attribute IDBKeyPath? keyPath;
     readonly attribute DOMStringList indexNames;
     readonly attribute IDBTransaction transaction;
     readonly attribute boolean autoIncrement;
 
-    [CallWith=ExecState, MayThrowException] IDBRequest put(any value, optional any key);
-    [CallWith=ExecState, MayThrowException] IDBRequest add(any value, optional any key);
-    [CallWith=ExecState, ImplementedAs=deleteFunction, MayThrowException] IDBRequest delete(IDBKeyRange? keyRange);
-    [CallWith=ExecState, ImplementedAs=deleteFunction, MayThrowException] IDBRequest delete(any key);
-    [CallWith=ExecState, MayThrowException] IDBRequest get(IDBKeyRange? key);
-    [CallWith=ExecState, MayThrowException] IDBRequest get(any key);
-    [CallWith=ExecState, MayThrowException] IDBRequest getKey(IDBKeyRange? key);
-    [CallWith=ExecState, MayThrowException] IDBRequest getKey(any key);
-    [CallWith=ExecState, MayThrowException] IDBRequest clear();
-    [CallWith=ExecState, MayThrowException] IDBRequest openCursor(optional IDBKeyRange? range = null, optional IDBCursorDirection direction = "next");
-    [CallWith=ExecState, MayThrowException] IDBRequest openCursor(any key, optional IDBCursorDirection direction = "next");
-    [CallWith=ExecState, MayThrowException] IDBRequest openKeyCursor(optional IDBKeyRange? range = null, optional IDBCursorDirection direction = "next");
-    [CallWith=ExecState, MayThrowException] IDBRequest openKeyCursor(any key, optional IDBCursorDirection direction = "next");
-    [CallWith=ExecState, MayThrowException] IDBRequest getAll(optional IDBKeyRange? range = null, optional [EnforceRange] unsigned long count);
-    [CallWith=ExecState, MayThrowException] IDBRequest getAll(any key, optional [EnforceRange] unsigned long count);
-    [CallWith=ExecState, MayThrowException] IDBRequest getAllKeys(optional IDBKeyRange? range = null, optional [EnforceRange] unsigned long count);
-    [CallWith=ExecState, MayThrowException] IDBRequest getAllKeys(any key, optional [EnforceRange] unsigned long count);
-    [CallWith=ExecState, MayThrowException] IDBIndex createIndex(DOMString name, (DOMString or sequence<DOMString>) keyPath, optional IDBIndexParameters options);
+    [CallWith=GlobalObject, MayThrowException] IDBRequest put(any value, optional any key);
+    [CallWith=GlobalObject, MayThrowException] IDBRequest add(any value, optional any key);
+    [CallWith=GlobalObject, ImplementedAs=deleteFunction, MayThrowException] IDBRequest delete(IDBKeyRange? keyRange);
+    [CallWith=GlobalObject, ImplementedAs=deleteFunction, MayThrowException] IDBRequest delete(any key);
+    [CallWith=GlobalObject, MayThrowException] IDBRequest get(IDBKeyRange? key);
+    [CallWith=GlobalObject, MayThrowException] IDBRequest get(any key);
+    [CallWith=GlobalObject, MayThrowException] IDBRequest getKey(IDBKeyRange? key);
+    [CallWith=GlobalObject, MayThrowException] IDBRequest getKey(any key);
+    [CallWith=GlobalObject, MayThrowException] IDBRequest clear();
+    [CallWith=GlobalObject, MayThrowException] IDBRequest openCursor(optional IDBKeyRange? range = null, optional IDBCursorDirection direction = "next");
+    [CallWith=GlobalObject, MayThrowException] IDBRequest openCursor(any key, optional IDBCursorDirection direction = "next");
+    [CallWith=GlobalObject, MayThrowException] IDBRequest openKeyCursor(optional IDBKeyRange? range = null, optional IDBCursorDirection direction = "next");
+    [CallWith=GlobalObject, MayThrowException] IDBRequest openKeyCursor(any key, optional IDBCursorDirection direction = "next");
+    [CallWith=GlobalObject, MayThrowException] IDBRequest getAll(optional IDBKeyRange? range = null, optional [EnforceRange] unsigned long count);
+    [CallWith=GlobalObject, MayThrowException] IDBRequest getAll(any key, optional [EnforceRange] unsigned long count);
+    [CallWith=GlobalObject, MayThrowException] IDBRequest getAllKeys(optional IDBKeyRange? range = null, optional [EnforceRange] unsigned long count);
+    [CallWith=GlobalObject, MayThrowException] IDBRequest getAllKeys(any key, optional [EnforceRange] unsigned long count);
+    [CallWith=GlobalObject, MayThrowException] IDBIndex createIndex(DOMString name, (DOMString or sequence<DOMString>) keyPath, optional IDBIndexParameters options);
     [MayThrowException] IDBIndex index(DOMString name);
     [MayThrowException] void deleteIndex(DOMString name);
-    [CallWith=ExecState, MayThrowException] IDBRequest count(optional IDBKeyRange? range = null);
-    [CallWith=ExecState, MayThrowException] IDBRequest count(any key);
+    [CallWith=GlobalObject, MayThrowException] IDBRequest count(optional IDBKeyRange? range = null);
+    [CallWith=GlobalObject, MayThrowException] IDBRequest count(any key);
 };
 
 dictionary IDBIndexParameters {
     boolean unique = false;
     boolean multiEntry = false;
