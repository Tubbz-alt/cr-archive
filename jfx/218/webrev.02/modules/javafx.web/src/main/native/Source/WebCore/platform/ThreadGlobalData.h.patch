diff a/modules/javafx.web/src/main/native/Source/WebCore/platform/ThreadGlobalData.h b/modules/javafx.web/src/main/native/Source/WebCore/platform/ThreadGlobalData.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/platform/ThreadGlobalData.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/platform/ThreadGlobalData.h
@@ -29,68 +29,73 @@
 
 #include <wtf/ThreadSafeRefCounted.h>
 #include <wtf/text/StringHash.h>
 
 namespace JSC {
-class ExecState;
+class CallFrame;
+class JSGlobalObject;
 }
 
 namespace WebCore {
 
-    class QualifiedNameCache;
-    class ThreadTimers;
+class QualifiedNameCache;
+class ThreadTimers;
 
-    struct CachedResourceRequestInitiators;
-    struct EventNames;
-    struct ICUConverterWrapper;
+struct CachedResourceRequestInitiators;
+struct EventNames;
+struct ICUConverterWrapper;
+struct MIMETypeRegistryThreadGlobalData;
 
 #if USE(WEB_THREAD)
-    class ThreadGlobalData : public ThreadSafeRefCounted<ThreadGlobalData> {
+class ThreadGlobalData : public ThreadSafeRefCounted<ThreadGlobalData> {
 #else
-    class ThreadGlobalData {
+class ThreadGlobalData {
 #endif
-        WTF_MAKE_NONCOPYABLE(ThreadGlobalData);
-        WTF_MAKE_FAST_ALLOCATED;
-    public:
-        WEBCORE_EXPORT ThreadGlobalData();
-        WEBCORE_EXPORT ~ThreadGlobalData();
-        void destroy(); // called on workers to clean up the ThreadGlobalData before the thread exits.
+    WTF_MAKE_NONCOPYABLE(ThreadGlobalData);
+    WTF_MAKE_FAST_ALLOCATED;
+public:
+    WEBCORE_EXPORT ThreadGlobalData();
+    WEBCORE_EXPORT ~ThreadGlobalData();
+    void destroy(); // called on workers to clean up the ThreadGlobalData before the thread exits.
 
-        const CachedResourceRequestInitiators& cachedResourceRequestInitiators() { return *m_cachedResourceRequestInitiators; }
-        EventNames& eventNames() { return *m_eventNames; }
-        ThreadTimers& threadTimers() { return *m_threadTimers; }
-        QualifiedNameCache& qualifiedNameCache() { return *m_qualifiedNameCache; }
+    const CachedResourceRequestInitiators& cachedResourceRequestInitiators() { return *m_cachedResourceRequestInitiators; }
+    EventNames& eventNames() { return *m_eventNames; }
+    ThreadTimers& threadTimers() { return *m_threadTimers; }
+    QualifiedNameCache& qualifiedNameCache() { return *m_qualifiedNameCache; }
 
-        ICUConverterWrapper& cachedConverterICU() { return *m_cachedConverterICU; }
+    ICUConverterWrapper& cachedConverterICU() { return *m_cachedConverterICU; }
 
-        JSC::ExecState* currentState() const { return m_currentState; }
-        void setCurrentState(JSC::ExecState* state) { m_currentState = state; }
+    JSC::JSGlobalObject* currentState() const { return m_currentState; }
+    void setCurrentState(JSC::JSGlobalObject* state) { m_currentState = state; }
 
 #if USE(WEB_THREAD)
-        void setWebCoreThreadData();
+    void setWebCoreThreadData();
 #endif
 
-        bool isInRemoveAllEventListeners() const { return m_isInRemoveAllEventListeners; }
-        void setIsInRemoveAllEventListeners(bool value) { m_isInRemoveAllEventListeners = value; }
+    bool isInRemoveAllEventListeners() const { return m_isInRemoveAllEventListeners; }
+    void setIsInRemoveAllEventListeners(bool value) { m_isInRemoveAllEventListeners = value; }
 
-    private:
-        std::unique_ptr<CachedResourceRequestInitiators> m_cachedResourceRequestInitiators;
-        std::unique_ptr<EventNames> m_eventNames;
-        std::unique_ptr<ThreadTimers> m_threadTimers;
-        std::unique_ptr<QualifiedNameCache> m_qualifiedNameCache;
-        JSC::ExecState* m_currentState { nullptr };
+    const MIMETypeRegistryThreadGlobalData& mimeTypeRegistryThreadGlobalData();
+
+private:
+    std::unique_ptr<CachedResourceRequestInitiators> m_cachedResourceRequestInitiators;
+    std::unique_ptr<EventNames> m_eventNames;
+    std::unique_ptr<ThreadTimers> m_threadTimers;
+    std::unique_ptr<QualifiedNameCache> m_qualifiedNameCache;
+    JSC::JSGlobalObject* m_currentState { nullptr };
 
 #ifndef NDEBUG
-        bool m_isMainThread;
+    bool m_isMainThread;
 #endif
 
-        bool m_isInRemoveAllEventListeners { false };
+    bool m_isInRemoveAllEventListeners { false };
 
-        std::unique_ptr<ICUConverterWrapper> m_cachedConverterICU;
+    std::unique_ptr<ICUConverterWrapper> m_cachedConverterICU;
+    std::unique_ptr<MIMETypeRegistryThreadGlobalData> m_MIMETypeRegistryThreadGlobalData;
 
-        WEBCORE_EXPORT friend ThreadGlobalData& threadGlobalData();
-    };
+    WEBCORE_EXPORT friend ThreadGlobalData& threadGlobalData();
+};
 
 #if USE(WEB_THREAD)
 WEBCORE_EXPORT ThreadGlobalData& threadGlobalData();
 #else
 WEBCORE_EXPORT ThreadGlobalData& threadGlobalData() PURE_FUNCTION;
