diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/GCSegmentedArrayInlines.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/GCSegmentedArrayInlines.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/GCSegmentedArrayInlines.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/heap/GCSegmentedArrayInlines.h
@@ -60,11 +60,11 @@
         m_segments.remove(current);
         GCArraySegment<T>::destroy(current);
     }
     m_top = 0;
     m_numberOfSegments = 1;
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     m_segments.head()->m_top = 0;
 #endif
 }
 
 template <typename T>
@@ -73,11 +73,11 @@
     ASSERT(m_segments.head()->m_top == s_segmentCapacity);
 
     GCArraySegment<T>* nextSegment = GCArraySegment<T>::create();
     m_numberOfSegments++;
 
-#if !ASSERT_DISABLED
+#if ASSERT_ENABLED
     nextSegment->m_top = 0;
 #endif
 
     m_segments.push(nextSegment);
     setTopForEmptySegment();
@@ -124,18 +124,18 @@
 }
 
 template <typename T>
 inline GCArraySegment<T>* GCArraySegment<T>::create()
 {
-    return new (NotNull, fastMalloc(blockSize)) GCArraySegment<T>();
+    return new (NotNull, GCSegmentedArrayMalloc::malloc(blockSize)) GCArraySegment<T>();
 }
 
 template <typename T>
 inline void GCArraySegment<T>::destroy(GCArraySegment* segment)
 {
     segment->~GCArraySegment();
-    fastFree(segment);
+    GCSegmentedArrayMalloc::free(segment);
 }
 
 template <typename T>
 inline size_t GCSegmentedArray<T>::postIncTop()
 {
@@ -172,21 +172,21 @@
     ASSERT(m_top == m_segments.head()->m_top);
     return m_top;
 }
 
 template <typename T>
-#if ASSERT_DISABLED
-inline void GCSegmentedArray<T>::validatePrevious() { }
-#else
+#if ASSERT_ENABLED
 inline void GCSegmentedArray<T>::validatePrevious()
 {
     unsigned count = 0;
     for (GCArraySegment<T>* current = m_segments.head(); current; current = current->next())
         count++;
     ASSERT(m_segments.size() == m_numberOfSegments);
 }
-#endif
+#else
+inline void GCSegmentedArray<T>::validatePrevious() { }
+#endif // ASSERT_ENABLED
 
 template <typename T>
 inline void GCSegmentedArray<T>::append(T value)
 {
     if (m_top == s_segmentCapacity)
