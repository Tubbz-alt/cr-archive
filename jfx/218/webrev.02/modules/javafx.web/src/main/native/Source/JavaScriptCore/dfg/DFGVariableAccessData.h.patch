diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableAccessData.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableAccessData.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableAccessData.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGVariableAccessData.h
@@ -46,16 +46,16 @@
 class VariableAccessData : public UnionFind<VariableAccessData> {
     WTF_MAKE_FAST_ALLOCATED;
     WTF_MAKE_NONCOPYABLE(VariableAccessData);
 public:
     VariableAccessData();
-    VariableAccessData(VirtualRegister local);
+    VariableAccessData(Operand);
 
-    VirtualRegister local()
+    Operand operand()
     {
-        ASSERT(m_local == find()->m_local);
-        return m_local;
+        ASSERT(m_operand == find()->m_operand);
+        return m_operand;
     }
 
     VirtualRegister& machineLocal()
     {
         ASSERT(find() == this);
@@ -206,14 +206,14 @@
     // This is slightly space-inefficient, since anything we're unified with
     // will have the same operand and should have the same prediction. But
     // putting them here simplifies the code, and we don't expect DFG space
     // usage for variable access nodes do be significant.
 
-    VirtualRegister m_local;
-    VirtualRegister m_machineLocal;
     SpeculatedType m_prediction;
     SpeculatedType m_argumentAwarePrediction;
+    Operand m_operand;
+    VirtualRegister m_machineLocal;
     NodeFlags m_flags;
 
     bool m_shouldNeverUnbox;
     bool m_structureCheckHoistingFailed;
     bool m_checkArrayHoistingFailed;
