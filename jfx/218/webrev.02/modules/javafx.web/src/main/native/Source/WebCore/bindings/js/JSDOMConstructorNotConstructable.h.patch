diff a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConstructorNotConstructable.h b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConstructorNotConstructable.h
--- a/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConstructorNotConstructable.h
+++ b/modules/javafx.web/src/main/native/Source/WebCore/bindings/js/JSDOMConstructorNotConstructable.h
@@ -21,11 +21,11 @@
 
 #include "JSDOMConstructorBase.h"
 
 namespace WebCore {
 
-template<typename JSClass> class JSDOMConstructorNotConstructable : public JSDOMConstructorBase {
+template<typename JSClass> class JSDOMConstructorNotConstructable final : public JSDOMConstructorBase {
 public:
     using Base = JSDOMConstructorBase;
 
     static JSDOMConstructorNotConstructable* create(JSC::VM&, JSC::Structure*, JSDOMGlobalObject&);
     static JSC::Structure* createStructure(JSC::VM&, JSC::JSGlobalObject&, JSC::JSValue prototype);
@@ -44,15 +44,15 @@
     void finishCreation(JSC::VM&, JSDOMGlobalObject&);
 
     // Usually defined for each specialization class.
     void initializeProperties(JSC::VM&, JSDOMGlobalObject&) { }
 
-    static JSC::EncodedJSValue JSC_HOST_CALL callThrowTypeError(JSC::ExecState* exec)
+    static JSC::EncodedJSValue JSC_HOST_CALL callThrowTypeError(JSC::JSGlobalObject* globalObject, JSC::CallFrame*)
     {
-        JSC::VM& vm = exec->vm();
+        JSC::VM& vm = globalObject->vm();
         auto scope = DECLARE_THROW_SCOPE(vm);
-        JSC::throwTypeError(exec, scope, "Illegal constructor"_s);
+        JSC::throwTypeError(globalObject, scope, "Illegal constructor"_s);
         return JSC::JSValue::encode(JSC::jsNull());
     }
 
     static JSC::CallType getCallData(JSC::JSCell*, JSC::CallData& callData)
     {
