diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/scripts/codegen/generate_js_backend_commands.py b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/scripts/codegen/generate_js_backend_commands.py
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/scripts/codegen/generate_js_backend_commands.py
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/scripts/codegen/generate_js_backend_commands.py
@@ -63,93 +63,101 @@
         sections.extend(list(map(self.generate_domain, self.domains_to_generate())))
         return "\n\n".join(sections)
 
     def generate_domain(self, domain):
         lines = []
-        args = {
-            'domain': domain.domain_name
-        }
 
-        lines.append('// %(domain)s.' % args)
+        comment_args = {
+            'domainName': domain.domain_name,
+        }
+        lines.append('// %(domainName)s' % comment_args)
 
         version = self.version_for_domain(domain)
         type_declarations = self.type_declarations_for_domain(domain)
         commands = self.commands_for_domain(domain)
         events = self.events_for_domain(domain)
 
-        has_async_commands = any([command.is_async for command in commands])
-        if len(events) > 0 or has_async_commands:
-            lines.append('InspectorBackend.register%(domain)sDispatcher = InspectorBackend.registerDomainDispatcher.bind(InspectorBackend, "%(domain)s");' % args)
+        domain_args = {
+            'domainName': domain.domain_name,
+            'targetTypes': json.dumps(domain.target_types),
+        }
+        lines.append('InspectorBackend.registerDomain("%(domainName)s", %(targetTypes)s);' % domain_args)
 
         if isinstance(version, int):
             version_args = {
-                'domain': domain.domain_name,
+                'domainName': domain.domain_name,
                 'version': version
             }
-            lines.append('InspectorBackend.registerVersion("%(domain)s", %(version)s);' % version_args)
+            lines.append('InspectorBackend.registerVersion("%(domainName)s", %(version)s);' % version_args)
 
         for declaration in type_declarations:
             if declaration.type.is_enum():
                 enum_args = {
-                    'domain': domain.domain_name,
+                    'domainName': domain.domain_name,
                     'enumName': declaration.type_name,
                     'enumMap': ", ".join(['%s: "%s"' % (Generator.stylized_name_for_enum_value(enum_value), enum_value) for enum_value in declaration.type.enum_values()])
                 }
-                lines.append('InspectorBackend.registerEnum("%(domain)s.%(enumName)s", {%(enumMap)s});' % enum_args)
+                lines.append('InspectorBackend.registerEnum("%(domainName)s.%(enumName)s", {%(enumMap)s});' % enum_args)
 
             def is_anonymous_enum_member(type_member):
                 return isinstance(type_member.type, EnumType) and type_member.type.is_anonymous
 
             for _member in filter(is_anonymous_enum_member, declaration.type_members):
                 enum_args = {
-                    'domain': domain.domain_name,
+                    'domainName': domain.domain_name,
                     'enumName': '%s%s' % (declaration.type_name, ucfirst(_member.member_name)),
                     'enumMap': ", ".join(['%s: "%s"' % (Generator.stylized_name_for_enum_value(enum_value), enum_value) for enum_value in _member.type.enum_values()])
                 }
-                lines.append('InspectorBackend.registerEnum("%(domain)s.%(enumName)s", {%(enumMap)s});' % enum_args)
+                lines.append('InspectorBackend.registerEnum("%(domainName)s.%(enumName)s", {%(enumMap)s});' % enum_args)
 
         def is_anonymous_enum_param(param):
             return isinstance(param.type, EnumType) and param.type.is_anonymous
 
-        for event in events:
-            for param in filter(is_anonymous_enum_param, event.event_parameters):
-                enum_args = {
-                    'domain': domain.domain_name,
-                    'enumName': '%s%s' % (ucfirst(event.event_name), ucfirst(param.parameter_name)),
-                    'enumMap': ", ".join(['%s: "%s"' % (Generator.stylized_name_for_enum_value(enum_value), enum_value) for enum_value in param.type.enum_values()])
-                }
-                lines.append('InspectorBackend.registerEnum("%(domain)s.%(enumName)s", {%(enumMap)s});' % enum_args)
-
-            event_args = {
-                'domain': domain.domain_name,
-                'eventName': event.event_name,
-                'params': ", ".join(['"%s"' % parameter.parameter_name for parameter in event.event_parameters])
-            }
-            lines.append('InspectorBackend.registerEvent("%(domain)s.%(eventName)s", [%(params)s]);' % event_args)
-
         for command in commands:
             def generate_parameter_object(parameter):
-                optional_string = "true" if parameter.is_optional else "false"
                 pairs = []
                 pairs.append('"name": "%s"' % parameter.parameter_name)
                 pairs.append('"type": "%s"' % Generator.js_name_for_parameter_type(parameter.type))
-                pairs.append('"optional": %s' % optional_string)
+                if parameter.is_optional:
+                    pairs.append('"optional": true')
                 return "{%s}" % ", ".join(pairs)
 
             command_args = {
-                'domain': domain.domain_name,
+                'domainName': domain.domain_name,
                 'commandName': command.command_name,
+                'targetTypes': json.dumps(command.target_types),
                 'callParams': ", ".join([generate_parameter_object(parameter) for parameter in command.call_parameters]),
                 'returnParams': ", ".join(['"%s"' % parameter.parameter_name for parameter in command.return_parameters]),
             }
-            lines.append('InspectorBackend.registerCommand("%(domain)s.%(commandName)s", [%(callParams)s], [%(returnParams)s]);' % command_args)
+            lines.append('InspectorBackend.registerCommand("%(domainName)s.%(commandName)s", %(targetTypes)s, [%(callParams)s], [%(returnParams)s]);' % command_args)
+
+        for event in events:
+            for param in filter(is_anonymous_enum_param, event.event_parameters):
+                enum_args = {
+                    'domainName': domain.domain_name,
+                    'enumName': '%s%s' % (ucfirst(event.event_name), ucfirst(param.parameter_name)),
+                    'enumMap': ", ".join(['%s: "%s"' % (Generator.stylized_name_for_enum_value(enum_value), enum_value) for enum_value in param.type.enum_values()]),
+                }
+                lines.append('InspectorBackend.registerEnum("%(domainName)s.%(enumName)s", {%(enumMap)s});' % enum_args)
+
+            event_args = {
+                'domainName': domain.domain_name,
+                'eventName': event.event_name,
+                'targetTypes': json.dumps(event.target_types),
+                'params': ", ".join(['"%s"' % parameter.parameter_name for parameter in event.event_parameters]),
+            }
+            lines.append('InspectorBackend.registerEvent("%(domainName)s.%(eventName)s", %(targetTypes)s, [%(params)s]);' % event_args)
+
+        has_async_commands = any([command.is_async for command in commands])
+        if len(events) > 0 or has_async_commands:
+            dispatcher_args = {
+                'domainName': domain.domain_name,
+            }
+            lines.append('InspectorBackend.register%(domainName)sDispatcher = InspectorBackend.registerDispatcher.bind(InspectorBackend, "%(domainName)s");' % dispatcher_args)
 
         activate_args = {
-            'domain': domain.domain_name,
-            'availability': json.dumps(domain.availability) if domain.availability else '',
+            'domainName': domain.domain_name,
+            'debuggableTypes': json.dumps(domain.debuggable_types),
         }
-        if domain.availability:
-            lines.append('InspectorBackend.activateDomain("%(domain)s", %(availability)s);' % activate_args)
-        else:
-            lines.append('InspectorBackend.activateDomain("%(domain)s");' % activate_args)
+        lines.append('InspectorBackend.activateDomain("%(domainName)s", %(debuggableTypes)s);' % activate_args)
 
         return "\n".join(lines)
