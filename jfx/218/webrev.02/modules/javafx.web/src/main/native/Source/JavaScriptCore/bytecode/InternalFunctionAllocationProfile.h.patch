diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InternalFunctionAllocationProfile.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InternalFunctionAllocationProfile.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InternalFunctionAllocationProfile.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/bytecode/InternalFunctionAllocationProfile.h
@@ -43,22 +43,22 @@
 
 private:
     WriteBarrier<Structure> m_structure;
 };
 
-inline Structure* InternalFunctionAllocationProfile::createAllocationStructureFromBase(VM& vm, JSGlobalObject* globalObject, JSCell* owner, JSObject* prototype, Structure* baseStructure)
+inline Structure* InternalFunctionAllocationProfile::createAllocationStructureFromBase(VM& vm, JSGlobalObject* baseGlobalObject, JSCell* owner, JSObject* prototype, Structure* baseStructure)
 {
-    ASSERT(!m_structure || m_structure.get()->classInfo() != baseStructure->classInfo());
+    ASSERT(!m_structure || m_structure.get()->classInfo() != baseStructure->classInfo() || m_structure->globalObject() != baseGlobalObject);
     ASSERT(baseStructure->hasMonoProto());
 
     Structure* structure;
     // FIXME: Implement polymorphic prototypes for subclasses of builtin types:
     // https://bugs.webkit.org/show_bug.cgi?id=177318
     if (prototype == baseStructure->storedPrototype())
         structure = baseStructure;
     else
-        structure = vm.structureCache.emptyStructureForPrototypeFromBaseStructure(globalObject, prototype, baseStructure);
+        structure = vm.structureCache.emptyStructureForPrototypeFromBaseStructure(baseGlobalObject, prototype, baseStructure);
 
     // Ensure that if another thread sees the structure, it will see it properly created.
     WTF::storeStoreFence();
 
     m_structure.set(vm, owner, structure);
