diff a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeapInlines.h b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeapInlines.h
--- a/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeapInlines.h
+++ b/modules/javafx.web/src/main/native/Source/bmalloc/bmalloc/IsoHeapInlines.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2017 Apple Inc. All rights reserved.
+ * Copyright (C) 2017-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -41,10 +41,20 @@
 #include "IsoTLSEntryInlines.h"
 #include "IsoTLSInlines.h"
 
 namespace bmalloc { namespace api {
 
+#if BENABLE_MALLOC_HEAP_BREAKDOWN
+template<typename Type>
+IsoHeap<Type>::IsoHeap(const char* heapClass)
+    : m_zone(malloc_create_zone(0, 0))
+{
+    if (heapClass)
+        malloc_set_zone_name(m_zone, heapClass);
+}
+#endif
+
 template<typename Type>
 void* IsoHeap<Type>::allocate()
 {
     bool abortOnFailure = true;
     return IsoTLS::allocate(*this, abortOnFailure);
@@ -83,10 +93,11 @@
     // IsoHeap::isInitialized gets m_impl with "acquire", and IsoHeap::initialize stores
     // the value to m_impl with "release". To make IsoHeap changes visible to any threads
     // when IsoHeap::isInitialized returns true, we need to store the value to m_impl *after*
     // all the initialization finishes.
     auto* heap = new IsoHeapImpl<Config>();
+    heap->addToAllIsoHeaps();
     setAllocatorOffset(heap->allocatorOffset());
     setDeallocatorOffset(heap->deallocatorOffset());
     auto* atomic = reinterpret_cast<std::atomic<IsoHeapImpl<Config>*>*>(&m_impl);
     atomic->store(heap, std::memory_order_release);
 }
@@ -101,11 +112,11 @@
 // This is most appropraite for template classes.
 #define MAKE_BISO_MALLOCED_INLINE(isoType) \
 public: \
     static ::bmalloc::api::IsoHeap<isoType>& bisoHeap() \
     { \
-        static ::bmalloc::api::IsoHeap<isoType> heap; \
+        static ::bmalloc::api::IsoHeap<isoType> heap("WebKit_"#isoType); \
         return heap; \
     } \
     \
     void* operator new(size_t, void* p) { return p; } \
     void* operator new[](size_t, void* p) { return p; } \
@@ -128,11 +139,11 @@
 using __makeBisoMallocedInlineMacroSemicolonifier = int
 
 #define MAKE_BISO_MALLOCED_IMPL(isoType) \
 ::bmalloc::api::IsoHeap<isoType>& isoType::bisoHeap() \
 { \
-    static ::bmalloc::api::IsoHeap<isoType> heap; \
+    static ::bmalloc::api::IsoHeap<isoType> heap("WebKit "#isoType); \
     return heap; \
 } \
 \
 void* isoType::operator new(size_t size) \
 { \
@@ -149,11 +160,11 @@
 
 #define MAKE_BISO_MALLOCED_IMPL_TEMPLATE(isoType) \
 template<> \
 ::bmalloc::api::IsoHeap<isoType>& isoType::bisoHeap() \
 { \
-    static ::bmalloc::api::IsoHeap<isoType> heap; \
+    static ::bmalloc::api::IsoHeap<isoType> heap("WebKit_"#isoType); \
     return heap; \
 } \
 \
 template<> \
 void* isoType::operator new(size_t size) \
