diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpGlobalData.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpGlobalData.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpGlobalData.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/runtime/RegExpGlobalData.h
@@ -36,19 +36,19 @@
     RegExpCachedResult& cachedResult() { return m_cachedResult; }
 
     void setMultiline(bool multiline) { m_multiline = multiline; }
     bool multiline() const { return m_multiline; }
 
-    void setInput(ExecState*, JSGlobalObject* owner, JSString*);
+    void setInput(JSGlobalObject*, JSString*);
     JSString* input() { return m_cachedResult.input(); }
 
     void visitAggregate(SlotVisitor&);
 
-    JSValue getBackref(ExecState*, JSGlobalObject* owner, unsigned);
-    JSValue getLastParen(ExecState*, JSGlobalObject* owner);
-    JSValue getLeftContext(ExecState*, JSGlobalObject* owner);
-    JSValue getRightContext(ExecState*, JSGlobalObject* owner);
+    JSValue getBackref(JSGlobalObject*, unsigned);
+    JSValue getLastParen(JSGlobalObject*);
+    JSValue getLeftContext(JSGlobalObject*);
+    JSValue getRightContext(JSGlobalObject*);
 
     MatchResult performMatch(VM&, JSGlobalObject*, RegExp*, JSString*, const String&, int startOffset, int** ovector);
     MatchResult performMatch(VM&, JSGlobalObject*, RegExp*, JSString*, const String&, int startOffset);
     void recordMatch(VM&, JSGlobalObject*, RegExp*, JSString*, const MatchResult&);
 
