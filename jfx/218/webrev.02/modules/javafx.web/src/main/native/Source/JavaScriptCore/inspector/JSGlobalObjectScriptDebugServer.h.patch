diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectScriptDebugServer.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectScriptDebugServer.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectScriptDebugServer.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/inspector/JSGlobalObjectScriptDebugServer.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2014 Apple Inc. All rights reserved.
+ * Copyright (C) 2014-2019 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -24,35 +24,38 @@
  */
 
 #pragma once
 
 #include "ScriptDebugServer.h"
+#include <wtf/RunLoop.h>
 
 namespace Inspector {
 
 class JSGlobalObjectScriptDebugServer final : public ScriptDebugServer {
     WTF_MAKE_NONCOPYABLE(JSGlobalObjectScriptDebugServer);
     WTF_MAKE_FAST_ALLOCATED;
 public:
     JSGlobalObjectScriptDebugServer(JSC::JSGlobalObject&);
-    virtual ~JSGlobalObjectScriptDebugServer() { }
+    ~JSGlobalObjectScriptDebugServer() override { }
 
     JSC::JSGlobalObject& globalObject() const { return m_globalObject; }
 
+    static RunLoopMode runLoopMode();
+
 private:
     void attachDebugger() override;
     void detachDebugger(bool isBeingDestroyed) override;
 
     void didPause(JSC::JSGlobalObject*) override { }
     void didContinue(JSC::JSGlobalObject*) override { }
     void runEventLoopWhilePaused() override;
-    bool isContentScript(JSC::ExecState*) const override { return false; }
+    bool isContentScript(JSC::JSGlobalObject*) const override { return false; }
 
     // NOTE: Currently all exceptions are reported at the API boundary through reportAPIException.
     // Until a time comes where an exception can be caused outside of the API (e.g. setTimeout
     // or some other async operation in a pure JSContext) we can ignore exceptions reported here.
-    void reportException(JSC::ExecState*, JSC::Exception*) const override { }
+    void reportException(JSC::JSGlobalObject*, JSC::Exception*) const override { }
 
     JSC::JSGlobalObject& m_globalObject;
 };
 
 } // namespace Inspector
