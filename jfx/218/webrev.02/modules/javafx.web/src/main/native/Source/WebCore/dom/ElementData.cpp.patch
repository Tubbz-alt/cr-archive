diff a/modules/javafx.web/src/main/native/Source/WebCore/dom/ElementData.cpp b/modules/javafx.web/src/main/native/Source/WebCore/dom/ElementData.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/dom/ElementData.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/dom/ElementData.cpp
@@ -31,10 +31,13 @@
 #include "StyleProperties.h"
 #include "XMLNames.h"
 
 namespace WebCore {
 
+DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(ElementData);
+DEFINE_ALLOCATOR_WITH_HEAP_IDENTIFIER(ShareableElementData);
+
 void ElementData::destroy()
 {
     if (is<UniqueElementData>(*this))
         delete downcast<UniqueElementData>(this);
     else
@@ -63,11 +66,11 @@
     return sizeof(ShareableElementData) + sizeof(Attribute) * count;
 }
 
 Ref<ShareableElementData> ShareableElementData::createWithAttributes(const Vector<Attribute>& attributes)
 {
-    void* slot = WTF::fastMalloc(sizeForShareableElementDataWithAttributeCount(attributes.size()));
+    void* slot = ShareableElementDataMalloc::malloc(sizeForShareableElementDataWithAttributeCount(attributes.size()));
     return adoptRef(*new (NotNull, slot) ShareableElementData(attributes));
 }
 
 Ref<UniqueElementData> UniqueElementData::create()
 {
@@ -155,11 +158,11 @@
     return adoptRef(*new UniqueElementData(static_cast<const ShareableElementData&>(*this)));
 }
 
 Ref<ShareableElementData> UniqueElementData::makeShareableCopy() const
 {
-    void* slot = WTF::fastMalloc(sizeForShareableElementDataWithAttributeCount(m_attributeVector.size()));
+    void* slot = ShareableElementDataMalloc::malloc(sizeForShareableElementDataWithAttributeCount(m_attributeVector.size()));
     return adoptRef(*new (NotNull, slot) ShareableElementData(*this));
 }
 
 bool ElementData::isEquivalent(const ElementData* other) const
 {
