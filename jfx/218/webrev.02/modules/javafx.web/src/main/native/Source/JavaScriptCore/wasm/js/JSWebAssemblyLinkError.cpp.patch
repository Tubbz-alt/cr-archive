diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/js/JSWebAssemblyLinkError.cpp b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/js/JSWebAssemblyLinkError.cpp
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/js/JSWebAssemblyLinkError.cpp
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/wasm/js/JSWebAssemblyLinkError.cpp
@@ -30,16 +30,16 @@
 
 #include "JSCInlines.h"
 
 namespace JSC {
 
-JSWebAssemblyLinkError* JSWebAssemblyLinkError::create(ExecState* exec, VM& vm, Structure* structure, const String& message)
+JSWebAssemblyLinkError* JSWebAssemblyLinkError::create(JSGlobalObject* globalObject, VM& vm, Structure* structure, const String& message)
 {
     auto* instance = new (NotNull, allocateCell<JSWebAssemblyLinkError>(vm.heap)) JSWebAssemblyLinkError(vm, structure);
     instance->m_sourceAppender = defaultSourceAppender;
     bool useCurrentFrame = true;
-    instance->finishCreation(exec, vm, message, useCurrentFrame);
+    instance->finishCreation(globalObject, vm, message, useCurrentFrame);
     return instance;
 }
 
 JSWebAssemblyLinkError::JSWebAssemblyLinkError(VM& vm, Structure* structure)
     : Base(vm, structure)
@@ -47,15 +47,14 @@
 }
 
 const ClassInfo JSWebAssemblyLinkError::s_info = { "WebAssembly.LinkError", &Base::s_info, nullptr, nullptr, CREATE_METHOD_TABLE(JSWebAssemblyLinkError) };
 
 
-JSObject* createJSWebAssemblyLinkError(ExecState* exec, VM& vm, const String& message)
+JSObject* createJSWebAssemblyLinkError(JSGlobalObject* globalObject, VM& vm, const String& message)
 {
     ASSERT(!message.isEmpty());
-    JSGlobalObject* globalObject = exec->lexicalGlobalObject();
-    return JSWebAssemblyLinkError::create(exec, vm, globalObject->webAssemblyLinkErrorStructure(), message);
+    return JSWebAssemblyLinkError::create(globalObject, vm, globalObject->webAssemblyLinkErrorStructure(), message);
 }
 
 } // namespace JSC
 
 #endif // ENABLE(WEBASSEMBLY)
