diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGPlan.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGPlan.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGPlan.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/dfg/DFGPlan.h
@@ -1,7 +1,7 @@
 /*
- * Copyright (C) 2013-2018 Apple Inc. All rights reserved.
+ * Copyright (C) 2013-2020 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
@@ -54,11 +54,11 @@
 
 class Plan : public ThreadSafeRefCounted<Plan> {
 public:
     Plan(
         CodeBlock* codeBlockToCompile, CodeBlock* profiledDFGCodeBlock,
-        CompilationMode, unsigned osrEntryBytecodeIndex,
+        CompilationMode, BytecodeIndex osrEntryBytecodeIndex,
         const Operands<Optional<JSValue>>& mustHandleValues);
     ~Plan();
 
     void compileInThread(ThreadData*);
 
@@ -85,11 +85,11 @@
 
     CodeBlock* codeBlock() { return m_codeBlock; }
 
     bool isFTL() const { return DFG::isFTL(m_mode); }
     CompilationMode mode() const { return m_mode; }
-    unsigned osrEntryBytecodeIndex() const { return m_osrEntryBytecodeIndex; }
+    BytecodeIndex osrEntryBytecodeIndex() const { return m_osrEntryBytecodeIndex; }
     const Operands<Optional<JSValue>>& mustHandleValues() const { return m_mustHandleValues; }
     ThreadData* threadData() const { return m_threadData; }
     Profiler::Compilation* compilation() const { return m_compilation.get(); }
 
     Finalizer* finalizer() const { return m_finalizer.get(); }
@@ -104,12 +104,12 @@
     RecordedStatuses& recordedStatuses() { return m_recordedStatuses; }
 
     bool willTryToTierUp() const { return m_willTryToTierUp; }
     void setWillTryToTierUp(bool willTryToTierUp) { m_willTryToTierUp = willTryToTierUp; }
 
-    HashMap<unsigned, Vector<unsigned>>& tierUpInLoopHierarchy() { return m_tierUpInLoopHierarchy; }
-    Vector<unsigned>& tierUpAndOSREnterBytecodes() { return m_tierUpAndOSREnterBytecodes; }
+    HashMap<BytecodeIndex, Vector<BytecodeIndex>>& tierUpInLoopHierarchy() { return m_tierUpInLoopHierarchy; }
+    Vector<BytecodeIndex>& tierUpAndOSREnterBytecodes() { return m_tierUpAndOSREnterBytecodes; }
 
     enum Stage { Preparing, Compiling, Ready, Cancelled };
     Stage stage() const { return m_stage; }
 
     DeferredCompilationCallback* callback() const { return m_callback.get(); }
@@ -141,11 +141,11 @@
     bool m_mustHandleValuesMayIncludeGarbage { true };
     Lock m_mustHandleValueCleaningLock;
 
     bool m_willTryToTierUp { false };
 
-    const unsigned m_osrEntryBytecodeIndex;
+    const BytecodeIndex m_osrEntryBytecodeIndex;
 
     ThreadData* m_threadData;
 
     RefPtr<Profiler::Compilation> m_compilation;
 
@@ -157,12 +157,12 @@
     DesiredWeakReferences m_weakReferences;
     DesiredTransitions m_transitions;
     DesiredGlobalProperties m_globalProperties;
     RecordedStatuses m_recordedStatuses;
 
-    HashMap<unsigned, Vector<unsigned>> m_tierUpInLoopHierarchy;
-    Vector<unsigned> m_tierUpAndOSREnterBytecodes;
+    HashMap<BytecodeIndex, Vector<BytecodeIndex>> m_tierUpInLoopHierarchy;
+    Vector<BytecodeIndex> m_tierUpAndOSREnterBytecodes;
 
     Stage m_stage;
 
     RefPtr<DeferredCompilationCallback> m_callback;
 
