diff a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGViewElement.cpp b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGViewElement.cpp
--- a/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGViewElement.cpp
+++ b/modules/javafx.web/src/main/native/Source/WebCore/svg/SVGViewElement.cpp
@@ -20,45 +20,54 @@
  */
 
 #include "config.h"
 #include "SVGViewElement.h"
 
+#include "RenderSVGResource.h"
 #include "SVGNames.h"
+#include "SVGSVGElement.h"
 #include "SVGStringList.h"
 #include <wtf/IsoMallocInlines.h>
 
 namespace WebCore {
 
 WTF_MAKE_ISO_ALLOCATED_IMPL(SVGViewElement);
 
 inline SVGViewElement::SVGViewElement(const QualifiedName& tagName, Document& document)
     : SVGElement(tagName, document)
-    , SVGExternalResourcesRequired(this)
     , SVGFitToViewBox(this)
 {
     ASSERT(hasTagName(SVGNames::viewTag));
-
-    static std::once_flag onceFlag;
-    std::call_once(onceFlag, [] {
-        PropertyRegistry::registerProperty<SVGNames::viewTargetAttr, &SVGViewElement::m_viewTarget>();
-    });
 }
 
 Ref<SVGViewElement> SVGViewElement::create(const QualifiedName& tagName, Document& document)
 {
     return adoptRef(*new SVGViewElement(tagName, document));
 }
 
 void SVGViewElement::parseAttribute(const QualifiedName& name, const AtomString& value)
 {
-    if (name == SVGNames::viewTargetAttr) {
-        m_viewTarget->reset(value);
-        return;
-    }
-
     SVGElement::parseAttribute(name, value);
-    SVGExternalResourcesRequired::parseAttribute(name, value);
     SVGFitToViewBox::parseAttribute(name, value);
     SVGZoomAndPan::parseAttribute(name, value);
 }
 
+void SVGViewElement::svgAttributeChanged(const QualifiedName& attrName)
+{
+    // We ignore changes to SVGNames::viewTargetAttr, which is deprecated and unused in WebCore.
+    if (PropertyRegistry::isKnownAttribute(attrName))
+        return;
+
+    if (SVGFitToViewBox::isKnownAttribute(attrName)) {
+        if (m_targetElement) {
+            m_targetElement->inheritViewAttributes(*this);
+            if (auto* renderer = m_targetElement->renderer())
+                RenderSVGResource::markForLayoutAndParentResourceInvalidation(*renderer);
+        }
+
+        return;
+    }
+
+    SVGElement::svgAttributeChanged(attrName);
+}
+
 }
