diff a/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/StackVisitor.h b/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/StackVisitor.h
--- a/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/StackVisitor.h
+++ b/modules/javafx.web/src/main/native/Source/JavaScriptCore/interpreter/StackVisitor.h
@@ -23,10 +23,11 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #pragma once
 
+#include "BytecodeIndex.h"
 #include "CalleeBits.h"
 #include "WasmIndexOrName.h"
 #include <wtf/Function.h>
 #include <wtf/Indenter.h>
 #include <wtf/text/WTFString.h>
@@ -34,21 +35,19 @@
 namespace JSC {
 
 struct EntryFrame;
 struct InlineCallFrame;
 
+class CallFrame;
 class CodeBlock;
 class CodeOrigin;
-class ExecState;
 class JSCell;
 class JSFunction;
 class ClonedArguments;
 class Register;
 class RegisterAtOffsetList;
 
-typedef ExecState CallFrame;
-
 class StackVisitor {
 public:
     class Frame {
     public:
         enum CodeType {
@@ -64,11 +63,11 @@
         size_t argumentCountIncludingThis() const { return m_argumentCountIncludingThis; }
         bool callerIsEntryFrame() const { return m_callerIsEntryFrame; }
         CallFrame* callerFrame() const { return m_callerFrame; }
         CalleeBits callee() const { return m_callee; }
         CodeBlock* codeBlock() const { return m_codeBlock; }
-        unsigned bytecodeOffset() const { return m_bytecodeOffset; }
+        BytecodeIndex bytecodeIndex() const { return m_bytecodeIndex; }
         InlineCallFrame* inlineCallFrame() const {
 #if ENABLE(DFG_JIT)
             return m_inlineCallFrame;
 #else
             return nullptr;
@@ -96,11 +95,11 @@
 
 #if ENABLE(ASSEMBLER)
         Optional<RegisterAtOffsetList> calleeSaveRegistersForUnwinding();
 #endif
 
-        ClonedArguments* createArguments();
+        ClonedArguments* createArguments(VM&);
         CallFrame* callFrame() const { return m_callFrame; }
 
         void dump(PrintStream&, Indenter = Indenter()) const;
         void dump(PrintStream&, Indenter, WTF::Function<void(PrintStream&)> prefix) const;
 
@@ -120,11 +119,11 @@
         CallFrame* m_callerFrame;
         CalleeBits m_callee;
         CodeBlock* m_codeBlock;
         size_t m_index;
         size_t m_argumentCountIncludingThis;
-        unsigned m_bytecodeOffset;
+        BytecodeIndex m_bytecodeIndex;
         bool m_callerIsEntryFrame : 1;
         bool m_isWasmFrame : 1;
         Wasm::IndexOrName m_wasmFunctionIndexOrName;
 
         friend class StackVisitor;
@@ -142,11 +141,11 @@
         ContinueIfTopEntryFrameIsEmpty,
         TerminateIfTopEntryFrameIsEmpty,
     };
 
     template <EmptyEntryFrameAction action = ContinueIfTopEntryFrameIsEmpty, typename Functor>
-    static void visit(CallFrame* startFrame, VM* vm, const Functor& functor)
+    static void visit(CallFrame* startFrame, VM& vm, const Functor& functor)
     {
         StackVisitor visitor(startFrame, vm);
         if (action == TerminateIfTopEntryFrameIsEmpty && visitor.topEntryFrameIsEmpty())
             return;
         while (visitor->callFrame()) {
@@ -162,11 +161,11 @@
     void unwindToMachineCodeBlockFrame();
 
     bool topEntryFrameIsEmpty() const { return m_topEntryFrameIsEmpty; }
 
 private:
-    JS_EXPORT_PRIVATE StackVisitor(CallFrame* startFrame, VM*);
+    JS_EXPORT_PRIVATE StackVisitor(CallFrame* startFrame, VM&);
 
     JS_EXPORT_PRIVATE void gotoNextFrame();
 
     void readFrame(CallFrame*);
     void readNonInlinedFrame(CallFrame*, CodeOrigin* = 0);
