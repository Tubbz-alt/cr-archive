diff a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/drt/DumpRenderTree.java b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/drt/DumpRenderTree.java
--- a/modules/javafx.web/src/main/java/com/sun/javafx/webkit/drt/DumpRenderTree.java
+++ b/modules/javafx.web/src/main/java/com/sun/javafx/webkit/drt/DumpRenderTree.java
@@ -43,10 +43,12 @@
 import java.net.URL;
 import java.nio.ByteBuffer;
 import java.util.Date;
 import java.util.Map;
 import java.util.List;
+import java.util.Timer;
+import java.util.TimerTask;
 import java.util.concurrent.CountDownLatch;
 import javafx.scene.web.WebEngine;
 
 public final class DumpRenderTree {
     private final static PlatformLogger log = PlatformLogger.getLogger("DumpRenderTree");
@@ -68,15 +70,31 @@
     private final WebPage webPage;
     private final UIClientImpl uiClient;
     private EventSender eventSender;
 
     private CountDownLatch latch;
+    private Timer timer;
     private String testPath;
     private boolean loaded;
     private boolean waiting;
     private boolean complete;
 
+    static class RenderUpdateHelper extends TimerTask {
+        private WebPage webPage;
+
+        public RenderUpdateHelper(WebPage webPage) {
+            this.webPage = webPage;
+        }
+
+        @Override
+        public void run() {
+            Invoker.getInvoker().invokeOnEventThread(() -> {
+                    webPage.forceRepaint();
+            });
+        }
+    };
+
     static class ThemeClientImplStub extends ThemeClient {
         @Override
         protected RenderTheme createRenderTheme() {
             return new RenderThemeStub();
         }
@@ -151,11 +169,11 @@
         if ((t > 0) && (t < testString.length() - 1)) {
             pixelsHash = testString.substring(t + 1);
             testString = testString.substring(0, t);
         }
         this.testPath = testString;
-        init(testString, pixelsHash);
+        initTest(testString, pixelsHash);
         return testString;
     }
 
     protected String getTestURL() {
         return testPath;
@@ -179,12 +197,19 @@
 
     private static void initPlatform() throws Exception {
         // initialize default toolkit
         final CountDownLatch latch = new CountDownLatch(1);
         PlatformImpl.startup(() -> {
-            new WebEngine();    // initialize Webkit classes
+            // initialize Webkit classes
+            try {
+                Class.forName(WebEngine.class.getName());
+                Class.forName(WebPage.class.getName());
+            } catch (Exception e) {}
+
             System.loadLibrary("DumpRenderTreeJava");
+            initDRT();
+            new WebEngine();
             drt = new DumpRenderTree();
             PageCache.setCapacity(1);
             latch.countDown();
         });
         // wait for libraries to load
@@ -192,20 +217,21 @@
     }
 
     boolean complete() { return this.complete; }
 
     private void resetToConsistentStateBeforeTesting(final TestOptions options) {
+        // Reset native objects associated with WebPage
+        webPage.resetToConsistentStateBeforeTesting();
+
         // Assign default values for all supported TestOptions
         webPage.overridePreference("experimental:CSSCustomPropertiesAndValuesEnabled", "false");
         webPage.overridePreference("enableColorFilter", "false");
         webPage.overridePreference("enableIntersectionObserver", "false");
         // Enable features based on TestOption
         for (Map.Entry<String, String> option : options.getOptions().entrySet()) {
             webPage.overridePreference(option.getKey(), option.getValue());
         }
-        // Reset native objects associated with WebPage
-        webPage.resetToConsistentStateBeforeTesting();
     }
 
     private void reset(final TestOptions options) {
         mlog("reset");
         // newly create EventSender for each test
@@ -243,17 +269,26 @@
     private void runTest(final String testString) throws Exception {
         final CountDownLatch l = new CountDownLatch(1);
         Invoker.getInvoker().invokeOnEventThread(() -> {
             run(testString, l);
         });
+
+        timer = new Timer();
+        TimerTask task = new RenderUpdateHelper(webPage);
+        timer.schedule(task, 1000/60, 1000/60);
         // wait until test is finished
         l.await();
+        task.cancel();
+        timer.cancel();
+        final CountDownLatch latchForEvents = new CountDownLatch(1);
         Invoker.getInvoker().invokeOnEventThread(() -> {
             mlog("dispose");
             webPage.stop();
             dispose();
+            latchForEvents.countDown();
         });
+        latchForEvents.await();
     }
 
     // called from native
     private static void waitUntilDone() {
         mlog("waitUntilDone");
@@ -332,11 +367,12 @@
         complete = true;
         // notify main thread that test is finished
         this.latch.countDown();
     }
 
-    private static native void init(String testPath, String pixelsHash);
+    private static native void initDRT();
+    private static native void initTest(String testPath, String pixelsHash);
     private static native void didClearWindowObject(long pContext,
             long pWindowObject, EventSender eventSender);
     private static native void dispose();
 
     private static native boolean dumpAsText();
