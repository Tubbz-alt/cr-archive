diff a/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java b/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java
--- a/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java
+++ b/modules/javafx.controls/src/test/java/test/javafx/scene/control/MenuBarTest.java
@@ -112,14 +112,46 @@
     @Test public void defaultConstructorHasFalseFocusTraversable() {
         assertFalse(menuBar.isFocusTraversable());
     }
 
     @Test public void defaultConstructorButSetTrueFocusTraversable() {
-            menuBar.setFocusTraversable(true);
+        menuBar.setFocusTraversable(true);
         assertTrue(menuBar.isFocusTraversable());
     }
 
+    @Test public void testFocusOnEmptyMenubar() {
+        menuBar.setFocusTraversable(true);
+
+        AnchorPane root = new AnchorPane();
+        root.getChildren().add(menuBar);
+        startApp(root);
+
+        MenuBarSkin skin = (MenuBarSkin)menuBar.getSkin();
+        assertTrue(skin != null);
+
+        menuBar.getScene().getWindow().requestFocus();
+
+        int focusedIndex = MenuBarSkinShim.getFocusedMenuIndex(skin);
+        assertEquals(-1, focusedIndex);
+    }
+
+    @Test public void testSimulateTraverseIntoEmptyMenubar() {
+        menuBar.setFocusTraversable(true);
+
+        AnchorPane root = new AnchorPane();
+        root.getChildren().add(menuBar);
+        startApp(root);
+
+        MenuBarSkin skin = (MenuBarSkin)menuBar.getSkin();
+        assertTrue(skin != null);
+
+        // simulate notification from traversalListener
+        MenuBarSkinShim.setFocusedMenuIndex(skin, 0);
+        int focusedIndex = MenuBarSkinShim.getFocusedMenuIndex(skin);
+        assertEquals(-1, focusedIndex);
+    }
+
     @Test public void getMenusHasSizeZero() {
         assertEquals(0, menuBar.getMenus().size());
     }
 
     @Test public void getMenusIsAddable() {
@@ -291,12 +323,12 @@
         assertTrue(!menu.isShowing());
         keyboard.doKeyPress(KeyCode.LEFT);
         tk.firePulse();
 
         // check if focusedMenuIndex is reset to -1 so navigation happens.
-        int focusedIndex = MenuBarSkinShim.getFocusedIndex(skin);
-        assertEquals(focusedIndex, -1);
+        int focusedIndex = MenuBarSkinShim.getFocusedMenuIndex(skin);
+        assertEquals(-1, focusedIndex);
     }
 
     @Test public void testMenuOnShownEventFiringWithKeyNavigation() {
         final MouseEventGenerator generator = new MouseEventGenerator();
         VBox root = new VBox();
@@ -676,9 +708,9 @@
         SceneHelper.processMouseEvent(scene,
             MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_RELEASED, xval+20, yval+20));
         assertFalse(menu1.isShowing());
 
         // check if focusedMenuIndex is 0 (menu1 is still in selected state).
-        int focusedIndex = MenuBarSkinShim.getFocusedIndex(skin);
-        assertEquals(focusedIndex, 0);
+        int focusedIndex = MenuBarSkinShim.getFocusedMenuIndex(skin);
+        assertEquals(0, focusedIndex);
     }
 }
