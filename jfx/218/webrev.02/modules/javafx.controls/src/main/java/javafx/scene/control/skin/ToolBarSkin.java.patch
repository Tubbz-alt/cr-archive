diff a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ToolBarSkin.java b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ToolBarSkin.java
--- a/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ToolBarSkin.java
+++ b/modules/javafx.controls/src/main/java/javafx/scene/control/skin/ToolBarSkin.java
@@ -103,11 +103,11 @@
     private ObservableList<MenuItem> overflowMenuItems;
     private boolean needsUpdate = false;
     private final ParentTraversalEngine engine;
     private final BehaviorBase<ToolBar> behavior;
 
-
+    private ListChangeListener<Node> itemsListener;
 
     /***************************************************************************
      *                                                                         *
      * Constructors                                                            *
      *                                                                         *
@@ -226,12 +226,12 @@
                 return selectPrev(box.getChildren().size() - 1, context);
             }
         });
         ParentHelper.setTraversalEngine(getSkinnable(), engine);
 
-        control.focusedProperty().addListener((observable, oldValue, newValue) -> {
-            if (newValue) {
+        registerChangeListener(control.focusedProperty(), ov -> {
+            if (getSkinnable().isFocused()) {
                 // TODO need to detect the focus direction
                 // to selected the first control in the toolbar when TAB is pressed
                 // or select the last control in the toolbar when SHIFT TAB is pressed.
                 if (!box.getChildren().isEmpty()) {
                     box.getChildren().get(0).requestFocus();
@@ -239,20 +239,21 @@
                     overflowMenu.requestFocus();
                 }
             }
         });
 
-        control.getItems().addListener((ListChangeListener<Node>) c -> {
+        itemsListener = (ListChangeListener<Node>) c -> {
             while (c.next()) {
                 for (Node n: c.getRemoved()) {
                     box.getChildren().remove(n);
                 }
                 box.getChildren().addAll(c.getAddedSubList());
             }
             needsUpdate = true;
             getSkinnable().requestLayout();
-        });
+        };
+        control.getItems().addListener(itemsListener);
     }
 
 
 
     /***************************************************************************
@@ -363,10 +364,12 @@
      *                                                                         *
      **************************************************************************/
 
     /** {@inheritDoc} */
     @Override public void dispose() {
+        if (getSkinnable() == null) return;
+        getSkinnable().getItems().removeListener(itemsListener);
         super.dispose();
 
         if (behavior != null) {
             behavior.dispose();
         }
