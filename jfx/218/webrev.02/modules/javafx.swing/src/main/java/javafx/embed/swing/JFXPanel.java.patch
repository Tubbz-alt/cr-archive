diff a/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java b/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
--- a/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
+++ b/modules/javafx.swing/src/main/java/javafx/embed/swing/JFXPanel.java
@@ -447,12 +447,14 @@
             if (isFocusable() && !hasFocus()) {
                 requestFocus();
                 // The extra simulated mouse pressed event is removed by making the JavaFX scene focused.
                 // It is safe, because in JavaFX only the method "setFocused(true)" is called,
                 // which doesn't have any side-effects when called multiple times.
-                int focusCause = AbstractEvents.FOCUSEVENT_ACTIVATED;
-                stagePeer.setFocused(true, focusCause);
+                if (stagePeer != null) {
+                    int focusCause = AbstractEvents.FOCUSEVENT_ACTIVATED;
+                    stagePeer.setFocused(true, focusCause);
+                }
             }
         }
 
         sendMouseEventToFX(e);
         super.processMouseEvent(e);
@@ -683,12 +685,12 @@
                                              scenePeer.getPixelFormat(), null, false));
             if (oldIm != null) {
                 double ratioX = newScaleFactorX / scaleFactorX;
                 double ratioY = newScaleFactorY / scaleFactorY;
                 // Transform old size to the new coordinate space.
-                int oldW = (int)Math.round(oldIm.getWidth() * ratioX);
-                int oldH = (int)Math.round(oldIm.getHeight() * ratioY);
+                int oldW = (int)Math.ceil(oldIm.getWidth() * ratioX);
+                int oldH = (int)Math.ceil(oldIm.getHeight() * ratioY);
 
                 Graphics g = pixelsIm.getGraphics();
                 try {
                     g.drawImage(oldIm, 0, 0, oldW, oldH, null);
                 } finally {
@@ -928,10 +930,15 @@
 
     private void invokeOnClientEDT(Runnable r) {
         jfxPanelIOP.postEvent(this, new InvocationEvent(this, r));
     }
 
+    // Package scope method for testing
+    final BufferedImage test_getPixelsIm() {
+        return pixelsIm;
+    }
+
     private class HostContainer implements HostInterface {
 
         @Override
         public void setEmbeddedStage(EmbeddedStageInterface embeddedStage) {
             stagePeer = embeddedStage;
