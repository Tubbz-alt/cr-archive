diff a/tests/system/src/test/java/test/robot/javafx/scene/TabPaneDragPolicyTest.java b/tests/system/src/test/java/test/robot/javafx/scene/TabPaneDragPolicyTest.java
--- a/tests/system/src/test/java/test/robot/javafx/scene/TabPaneDragPolicyTest.java
+++ b/tests/system/src/test/java/test/robot/javafx/scene/TabPaneDragPolicyTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -22,10 +22,12 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package test.robot.javafx.scene;
 
+import com.sun.javafx.PlatformUtil;
+
 import javafx.application.Application;
 import javafx.application.Platform;
 import javafx.collections.ListChangeListener;
 import javafx.scene.Scene;
 import javafx.scene.control.Tab;
@@ -45,10 +47,11 @@
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import static org.junit.Assert.fail;
+import static org.junit.Assume.assumeTrue;
 
 import test.util.Util;
 
 /*
  * Unit test for verifying DragPolicies.
@@ -136,10 +139,12 @@
         exit();
     }
 
     @Test
     public void testReorderTop() {
+        // Disable on Mac until JDK-8213136 is fixed
+        assumeTrue(!PlatformUtil.isMac());
         expectedTab = tabs[1];
         setDragPolicyAndSide(TabPane.TabDragPolicy.REORDER, Side.TOP);
         tabPane.getTabs().addListener(reorderListener);
         testReorder(DX, DY, 1, 0, false);
         tabPane.getTabs().removeListener(reorderListener);
@@ -149,10 +154,12 @@
         Assert.assertTrue("Incorrect permutation change received", listenerTestResult);
     }
 
     @Test
     public void testReorderBottom() {
+        // Disable on Mac until JDK-8213136 is fixed
+        assumeTrue(!PlatformUtil.isMac());
         expectedTab = tabs[1];
         setDragPolicyAndSide(TabPane.TabDragPolicy.REORDER, Side.BOTTOM);
         tabPane.getTabs().addListener(reorderListener);
         testReorder(DX, SCENE_HEIGHT - DY, 1, 0, false);
         tabPane.getTabs().removeListener(reorderListener);
@@ -162,10 +169,12 @@
         Assert.assertTrue("Incorrect permutation change received", listenerTestResult);
     }
 
     @Test
     public void testReorderLeft() {
+        // Disable on Mac until JDK-8213136 is fixed
+        assumeTrue(!PlatformUtil.isMac());
         expectedTab = tabs[1];
         setDragPolicyAndSide(TabPane.TabDragPolicy.REORDER, Side.LEFT);
         tabPane.getTabs().addListener(reorderListener);
         testReorder(DX, DY, 0, 1, false);
         tabPane.getTabs().removeListener(reorderListener);
@@ -175,10 +184,12 @@
         Assert.assertTrue("Incorrect permutation change received", listenerTestResult);
     }
 
     @Test
     public void testReorderRight() {
+        // Disable on Mac until JDK-8213136 is fixed
+        assumeTrue(!PlatformUtil.isMac());
         expectedTab = tabs[1];
         setDragPolicyAndSide(TabPane.TabDragPolicy.REORDER, Side.RIGHT);
         tabPane.getTabs().addListener(reorderListener);
         testReorder(SCENE_WIDTH - DX, DY, 0, 1, false);
         tabPane.getTabs().removeListener(reorderListener);
@@ -288,11 +299,11 @@
             releaseLatch.countDown();
         });
         waitForLatch(releaseLatch, 5, "Timeout waiting for robot.mouseRelease(Robot.MOUSE_LEFT_BTN).");
 
         if (isFixed) {
-            tabPane.getSelectionModel().select(tabs[2]);
+            Util.runAndWait(() -> tabPane.getSelectionModel().select(tabs[2]));
             waitForLatch(latches[2], 5, "Timeout waiting tabs[2] to get selected.");
             latches[0] = new CountDownLatch(1);
         }
 
         Platform.runLater(() -> {
