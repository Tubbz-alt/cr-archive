diff a/tests/system/src/test/java/test/javafx/scene/web/SVGTest.java b/tests/system/src/test/java/test/javafx/scene/web/SVGTest.java
--- a/tests/system/src/test/java/test/javafx/scene/web/SVGTest.java
+++ b/tests/system/src/test/java/test/javafx/scene/web/SVGTest.java
@@ -35,14 +35,14 @@
 import javafx.scene.web.WebView;
 import javafx.stage.Stage;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
 import org.junit.Test;
 import test.util.Util;
 
+import static javafx.concurrent.Worker.State.SUCCEEDED;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
 public class SVGTest {
@@ -94,11 +94,10 @@
     /**
      * @test
      * @bug 8223298
      * summary Checks if svg pattern is displayed properly
      */
-    @Ignore("JDK-8243110")
     @Test public void testSVGRenderingWithPattern() {
         final CountDownLatch webViewStateLatch = new CountDownLatch(1);
         final String htmlSVGContent = "\n"
             + "<html>\n"
             + "<body style='margin: 0px 0px;'>\n"
@@ -112,16 +111,30 @@
             + "</svg>\n"
             + "</body>\n"
             + "</html>";
 
         Util.runAndWait(() -> {
+            webView.getEngine().getLoadWorker().stateProperty().
+                addListener((observable, oldValue, newValue) -> {
+                if (newValue == SUCCEEDED) {
+                    webView.requestFocus();
+                }
+            });
+
             assertNotNull(webView);
             webView.getEngine().loadContent(htmlSVGContent);
-            webViewStateLatch.countDown();
+
+            webView.focusedProperty().
+                addListener((observable, oldValue, newValue) -> {
+                if (newValue) {
+                    webViewStateLatch.countDown();
+                }
+            });
         });
 
         assertTrue("Timeout when waiting for focus change ", Util.await(webViewStateLatch));
+        Util.sleep(1000);
 
         Util.runAndWait(() -> {
             WritableImage snapshot = svgTestApp.primaryStage.getScene().snapshot(null);
             PixelReader pr = snapshot.getPixelReader();
 
