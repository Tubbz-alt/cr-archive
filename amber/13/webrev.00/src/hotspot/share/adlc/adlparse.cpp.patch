diff a/src/hotspot/share/adlc/adlparse.cpp b/src/hotspot/share/adlc/adlparse.cpp
--- a/src/hotspot/share/adlc/adlparse.cpp
+++ b/src/hotspot/share/adlc/adlparse.cpp
@@ -2879,11 +2879,11 @@
   if (!inst._is_postalloc_expand) {
     // Define a MacroAssembler instance for use by the encoding.  The
     // name is chosen to match the __ idiom used for assembly in other
     // parts of hotspot and assumes the existence of the standard
     // #define __ _masm.
-    encoding->add_code("    MacroAssembler _masm(&cbuf);\n");
+    encoding->add_code("    C2_MacroAssembler _masm(&cbuf);\n");
   }
 
   // Parse the following %{ }% block
   ins_encode_parse_block_impl(inst, encoding, ec_name);
 
@@ -3002,13 +3002,13 @@
 //   %}
 //
 // which synthesizes a new encoding class taking the same arguments as
 // the InstructForm, and automatically prefixes the definition with:
 //
-//    MacroAssembler masm(&cbuf);\n");
+//    C2_MacroAssembler masm(&cbuf);\n");
 //
-//  making it more compact to take advantage of the MacroAssembler and
+//  making it more compact to take advantage of the C2_MacroAssembler and
 //  placing the assembly closer to it's use by instructions.
 void ADLParser::ins_encode_parse(InstructForm& inst) {
 
   // Parse encode class name
   skipws();                        // Skip whitespace
@@ -3372,11 +3372,11 @@
   if (_AD._adlocation_debug) {
     encoding->add_code(get_line_string());
   }
 
   // Start code line.
-  encoding->add_code("    _constant = C->constant_table().add");
+  encoding->add_code("    _constant = C->output()->constant_table().add");
 
   // Parse everything in ( ) expression.
   encoding->add_code("(this, ");
   next_char();  // Skip '('
   int parens_depth = 1;
