diff a/src/hotspot/share/gc/g1/heapRegionRemSet.cpp b/src/hotspot/share/gc/g1/heapRegionRemSet.cpp
--- a/src/hotspot/share/gc/g1/heapRegionRemSet.cpp
+++ b/src/hotspot/share/gc/g1/heapRegionRemSet.cpp
@@ -67,11 +67,11 @@
 
 OtherRegionsTable::OtherRegionsTable(Mutex* m) :
   _g1h(G1CollectedHeap::heap()),
   _m(m),
   _num_occupied(0),
-  _coarse_map(G1CollectedHeap::heap()->max_regions(), mtGC),
+  _coarse_map(mtGC),
   _n_coarse_entries(0),
   _fine_grain_regions(NULL),
   _n_fine_entries(0),
   _first_all_fine_prts(NULL),
   _last_all_fine_prts(NULL),
@@ -100,64 +100,24 @@
 
 void OtherRegionsTable::link_to_all(PerRegionTable* prt) {
   // We always append to the beginning of the list for convenience;
   // the order of entries in this list does not matter.
   if (_first_all_fine_prts != NULL) {
-    assert(_first_all_fine_prts->prev() == NULL, "invariant");
-    _first_all_fine_prts->set_prev(prt);
     prt->set_next(_first_all_fine_prts);
   } else {
     // this is the first element we insert. Adjust the "last" pointer
     _last_all_fine_prts = prt;
     assert(prt->next() == NULL, "just checking");
   }
-  // the new element is always the first element without a predecessor
-  prt->set_prev(NULL);
   _first_all_fine_prts = prt;
 
-  assert(prt->prev() == NULL, "just checking");
   assert(_first_all_fine_prts == prt, "just checking");
   assert((_first_all_fine_prts == NULL && _last_all_fine_prts == NULL) ||
          (_first_all_fine_prts != NULL && _last_all_fine_prts != NULL),
          "just checking");
   assert(_last_all_fine_prts == NULL || _last_all_fine_prts->next() == NULL,
          "just checking");
-  assert(_first_all_fine_prts == NULL || _first_all_fine_prts->prev() == NULL,
-         "just checking");
-}
-
-void OtherRegionsTable::unlink_from_all(PerRegionTable* prt) {
-  if (prt->prev() != NULL) {
-    assert(_first_all_fine_prts != prt, "just checking");
-    prt->prev()->set_next(prt->next());
-    // removing the last element in the list?
-    if (_last_all_fine_prts == prt) {
-      _last_all_fine_prts = prt->prev();
-    }
-  } else {
-    assert(_first_all_fine_prts == prt, "just checking");
-    _first_all_fine_prts = prt->next();
-    // list is empty now?
-    if (_first_all_fine_prts == NULL) {
-      _last_all_fine_prts = NULL;
-    }
-  }
-
-  if (prt->next() != NULL) {
-    prt->next()->set_prev(prt->prev());
-  }
-
-  prt->set_next(NULL);
-  prt->set_prev(NULL);
-
-  assert((_first_all_fine_prts == NULL && _last_all_fine_prts == NULL) ||
-         (_first_all_fine_prts != NULL && _last_all_fine_prts != NULL),
-         "just checking");
-  assert(_last_all_fine_prts == NULL || _last_all_fine_prts->next() == NULL,
-         "just checking");
-  assert(_first_all_fine_prts == NULL || _first_all_fine_prts->prev() == NULL,
-         "just checking");
 }
 
 CardIdx_t OtherRegionsTable::card_within_region(OopOrNarrowOopStar within_region, HeapRegion* hr) {
   assert(hr->is_in_reserved(within_region),
          "HeapWord " PTR_FORMAT " is outside of region %u [" PTR_FORMAT ", " PTR_FORMAT ")",
@@ -170,11 +130,11 @@
   // Note that this may be a continued H region.
   HeapRegion* from_hr = _g1h->heap_region_containing(from);
   RegionIdx_t from_hrm_ind = (RegionIdx_t) from_hr->hrm_index();
 
   // If the region is already coarsened, return.
-  if (_coarse_map.at(from_hrm_ind)) {
+  if (is_region_coarsened(from_hrm_ind)) {
     assert(contains_reference(from), "We just found " PTR_FORMAT " in the Coarse table", p2i(from));
     return;
   }
 
   size_t num_added_by_coarsening = 0;
@@ -238,11 +198,10 @@
   // Note that we can't assert "prt->hr() == from_hr", because of the
   // possibility of concurrent reuse.  But see head comment of
   // OtherRegionsTable for why this is OK.
   assert(prt != NULL, "Inv");
 
-  bool added = prt->add_reference(from);
   if (prt->add_reference(from)) {
     num_added_by_coarsening++;
   }
   Atomic::add(&_num_occupied, num_added_by_coarsening, memory_order_relaxed);
   assert(contains_reference(from), "We just added " PTR_FORMAT " to the PRT (%d)", p2i(from), prt->contains_reference(from));
@@ -265,11 +224,10 @@
   assert(_m->owned_by_self(), "Precondition");
   assert(_n_fine_entries == _max_fine_entries, "Precondition");
   PerRegionTable* max = NULL;
   jint max_occ = 0;
   PerRegionTable** max_prev = NULL;
-  size_t max_ind;
 
   size_t i = _fine_eviction_start;
   for (size_t k = 0; k < _fine_eviction_sample_size; k++) {
     size_t ii = i;
     // Make sure we get a non-NULL sample.
@@ -283,11 +241,10 @@
     while (cur != NULL) {
       jint cur_occ = cur->occupied();
       if (max == NULL || cur_occ > max_occ) {
         max = cur;
         max_prev = prev;
-        max_ind = i;
         max_occ = cur_occ;
       }
       prev = cur->collision_list_next_addr();
       cur = cur->collision_list_next();
     }
@@ -304,11 +261,19 @@
   guarantee(max != NULL, "Since _n_fine_entries > 0");
   guarantee(max_prev != NULL, "Since max != NULL.");
 
   // Set the corresponding coarse bit.
   size_t max_hrm_index = (size_t) max->hr()->hrm_index();
-  if (!_coarse_map.at(max_hrm_index)) {
+  if (_n_coarse_entries == 0) {
+    // This will lazily initialize an uninitialized bitmap
+    _coarse_map.reinitialize(G1CollectedHeap::heap()->max_regions());
+    _coarse_map.at_put(max_hrm_index, true);
+    // Release store guarantees that the bitmap has initialized before any
+    // concurrent reader will ever see a non-zero value for _n_coarse_entries
+    // (when read with load_acquire)
+    Atomic::release_store(&_n_coarse_entries, _n_coarse_entries + 1);
+  } else if (!_coarse_map.at(max_hrm_index)) {
     _coarse_map.at_put(max_hrm_index, true);
     _n_coarse_entries++;
   }
 
   added_by_deleted = HeapRegion::CardsPerRegion - max_occ;
@@ -383,23 +348,29 @@
 
 bool OtherRegionsTable::contains_reference_locked(OopOrNarrowOopStar from) const {
   HeapRegion* hr = _g1h->heap_region_containing(from);
   RegionIdx_t hr_ind = (RegionIdx_t) hr->hrm_index();
   // Is this region in the coarse map?
-  if (_coarse_map.at(hr_ind)) return true;
+  if (is_region_coarsened(hr_ind)) return true;
 
   PerRegionTable* prt = find_region_table(hr_ind & _mod_max_fine_entries_mask,
                                           hr);
   if (prt != NULL) {
     return prt->contains_reference(from);
-
   } else {
     CardIdx_t card_index = card_within_region(from, hr);
     return _sparse_table.contains_card(hr_ind, card_index);
   }
 }
 
+// A load_acquire on _n_coarse_entries - coupled with the release_store in
+// delete_region_table - guarantees we don't access _coarse_map before
+// it's been properly initialized.
+bool OtherRegionsTable::is_region_coarsened(RegionIdx_t from_hrm_ind) const {
+  return Atomic::load_acquire(&_n_coarse_entries) > 0 && _coarse_map.at(from_hrm_ind);
+}
+
 HeapRegionRemSet::HeapRegionRemSet(G1BlockOffsetTable* bot,
                                    HeapRegion* hr)
   : _bot(bot),
     _code_roots(),
     _m(Mutex::leaf, FormatBuffer<128>("HeapRegionRemSet lock #%u", hr->hrm_index()), true, Mutex::_safepoint_check_never),
