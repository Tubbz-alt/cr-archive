diff a/src/hotspot/share/gc/g1/g1VMOperations.cpp b/src/hotspot/share/gc/g1/g1VMOperations.cpp
--- a/src/hotspot/share/gc/g1/g1VMOperations.cpp
+++ b/src/hotspot/share/gc/g1/g1VMOperations.cpp
@@ -25,10 +25,12 @@
 #include "precompiled.hpp"
 #include "gc/g1/g1CollectedHeap.inline.hpp"
 #include "gc/g1/g1ConcurrentMarkThread.inline.hpp"
 #include "gc/g1/g1Policy.hpp"
 #include "gc/g1/g1VMOperations.hpp"
+#include "gc/shared/concurrentGCBreakpoints.hpp"
+#include "gc/shared/gcCause.hpp"
 #include "gc/shared/gcId.hpp"
 #include "gc/shared/gcTimer.hpp"
 #include "gc/shared/gcTraceTime.inline.hpp"
 #include "gc/shared/isGCActiveMark.hpp"
 #include "memory/universe.hpp"
@@ -45,10 +47,11 @@
                                                    double target_pause_time_ms) :
   VM_GC_Operation(gc_count_before, gc_cause),
   _target_pause_time_ms(target_pause_time_ms),
   _transient_failure(false),
   _cycle_already_in_progress(false),
+  _whitebox_attached(false),
   _terminating(false),
   _gc_succeeded(false)
 {}
 
 bool VM_G1TryInitiateConcMark::doit_prologue() {
@@ -80,10 +83,17 @@
   } else if (!g1h->policy()->force_initial_mark_if_outside_cycle(_gc_cause)) {
     // Failure to force the next GC pause to be an initial mark indicates
     // there is already a concurrent marking cycle in progress.  Set flag
     // to notify the caller and return immediately.
     _cycle_already_in_progress = true;
+  } else if ((_gc_cause != GCCause::_wb_breakpoint) &&
+             ConcurrentGCBreakpoints::is_controlled()) {
+    // WhiteBox wants to be in control of concurrent cycles, so don't try to
+    // start one.  This check is after the force_initial_mark_xxx so that a
+    // request will be remembered for a later partial collection, even though
+    // we've rejected this request.
+    _whitebox_attached = true;
   } else if (g1h->do_collection_pause_at_safepoint(_target_pause_time_ms)) {
     _gc_succeeded = true;
   } else {
     // Failure to perform the collection at all occurs because GCLocker is
     // active, and we have the bad luck to be the collection request that
@@ -135,11 +145,17 @@
 
 void VM_G1Concurrent::doit() {
   GCIdMark gc_id_mark(_gc_id);
   GCTraceCPUTime tcpu;
   G1CollectedHeap* g1h = G1CollectedHeap::heap();
-  GCTraceTime(Info, gc) t(_message, g1h->concurrent_mark()->gc_timer_cm(), GCCause::_no_gc, true);
+
+  // GCTraceTime(...) only supports sub-phases, so a more verbose version
+  // is needed when we report the top-level pause phase.
+  GCTraceTimeLogger(Info, gc) logger(_message, GCCause::_no_gc, true);
+  GCTraceTimePauseTimer       timer(_message, g1h->concurrent_mark()->gc_timer_cm());
+  GCTraceTimeDriver           t(&logger, &timer);
+
   TraceCollectorStats tcs(g1h->g1mm()->conc_collection_counters());
   SvcGCMarker sgcm(SvcGCMarker::CONCURRENT);
   IsGCActiveMark x;
   _cl->do_void();
 }
