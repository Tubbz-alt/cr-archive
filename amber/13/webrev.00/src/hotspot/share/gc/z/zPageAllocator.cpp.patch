diff a/src/hotspot/share/gc/z/zPageAllocator.cpp b/src/hotspot/share/gc/z/zPageAllocator.cpp
--- a/src/hotspot/share/gc/z/zPageAllocator.cpp
+++ b/src/hotspot/share/gc/z/zPageAllocator.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -34,10 +34,11 @@
 #include "gc/z/zSafeDelete.inline.hpp"
 #include "gc/z/zStat.hpp"
 #include "gc/z/zTask.hpp"
 #include "gc/z/zTracer.inline.hpp"
 #include "gc/z/zWorkers.hpp"
+#include "jfr/jfrEvents.hpp"
 #include "runtime/globals.hpp"
 #include "runtime/init.hpp"
 #include "runtime/java.hpp"
 #include "utilities/debug.hpp"
 
@@ -420,21 +421,24 @@
   // Create new page
   return create_page(type, size);
 }
 
 ZPage* ZPageAllocator::alloc_page_common(uint8_t type, size_t size, ZAllocationFlags flags) {
+  EventZPageAllocation event;
+
   ZPage* const page = alloc_page_common_inner(type, size, flags.no_reserve());
   if (page == NULL) {
     // Out of memory
     return NULL;
   }
 
   // Update used statistics
   increase_used(size, flags.relocation());
 
   // Send trace event
-  ZTracer::tracer()->report_page_alloc(size, _used, max_available(flags.no_reserve()), _cache.available(), flags);
+  event.commit(type, size, _used, max_available(flags.no_reserve()),
+               _cache.available(), flags.non_blocking(), flags.no_reserve());
 
   return page;
 }
 
 void ZPageAllocator::check_out_of_memory_during_initialization() {
@@ -459,10 +463,11 @@
   _lock.unlock();
 
   if (page == NULL) {
     // Allocation failed
     ZStatTimer timer(ZCriticalPhaseAllocationStall);
+    EventZAllocationStall event;
 
     // We can only block if VM is fully initialized
     check_out_of_memory_during_initialization();
 
     do {
@@ -488,10 +493,12 @@
       // 2) Guard the list of satisfied pages.
       //
       ZLocker<ZLock> locker(&_lock);
       _satisfied.remove(&request);
     }
+
+    event.commit(type, size);
   }
 
   return page;
 }
 
@@ -569,11 +576,13 @@
 
   // Try satisfy blocked allocations
   satisfy_alloc_queue();
 }
 
-size_t ZPageAllocator::flush_cache(ZPageCacheFlushClosure* cl) {
+size_t ZPageAllocator::flush_cache(ZPageCacheFlushClosure* cl, bool for_allocation) {
+  EventZPageCacheFlush event;
+
   ZList<ZPage> list;
 
   // Flush pages
   _cache.flush(cl, &list);
 
@@ -589,10 +598,13 @@
   for (ZPage* page = list.remove_first(); page != NULL; page = list.remove_first()) {
     flushed += page->size();
     destroy_page(page);
   }
 
+  // Send event
+  event.commit(flushed, for_allocation);
+
   return flushed;
 }
 
 class ZPageCacheFlushForAllocationClosure : public ZPageCacheFlushClosure {
 public:
@@ -614,11 +626,11 @@
 void ZPageAllocator::flush_cache_for_allocation(size_t requested) {
   assert(requested <= _cache.available(), "Invalid request");
 
   // Flush pages
   ZPageCacheFlushForAllocationClosure cl(requested);
-  const size_t flushed = flush_cache(&cl);
+  const size_t flushed = flush_cache(&cl, true /* for_allocation */);
 
   assert(requested == flushed, "Failed to flush");
 
   const size_t cached_after = _cache.available();
   const size_t cached_before = cached_after + flushed;
@@ -676,10 +688,11 @@
   if (!_uncommit) {
     // Disabled
     return timeout;
   }
 
+  EventZUncommit event;
   size_t capacity_before;
   size_t capacity_after;
   size_t uncommitted;
 
   {
@@ -696,11 +709,11 @@
     const size_t flush = uncommittable - uncommit;
 
     if (flush > 0) {
       // Flush pages to uncommit
       ZPageCacheFlushForUncommitClosure cl(flush, delay);
-      uncommit += flush_cache(&cl);
+      uncommit += flush_cache(&cl, false /* for_allocation */);
       timeout = cl.timeout();
     }
 
     // Uncommit
     uncommitted = _physical.uncommit(uncommit);
@@ -715,10 +728,13 @@
                        "Uncommitted: " SIZE_FORMAT "M",
                        capacity_before / M, percent_of(capacity_before, max_capacity()),
                        capacity_after / M, percent_of(capacity_after, max_capacity()),
                        uncommitted / M);
 
+    // Send event
+    event.commit(capacity_before, capacity_after, uncommitted);
+
     // Update statistics
     ZStatInc(ZCounterUncommit, uncommitted);
   }
 
   return timeout;
