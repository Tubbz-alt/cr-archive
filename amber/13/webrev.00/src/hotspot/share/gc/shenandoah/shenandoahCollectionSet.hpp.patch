diff a/src/hotspot/share/gc/shenandoah/shenandoahCollectionSet.hpp b/src/hotspot/share/gc/shenandoah/shenandoahCollectionSet.hpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahCollectionSet.hpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahCollectionSet.hpp
@@ -26,10 +26,11 @@
 #define SHARE_GC_SHENANDOAH_SHENANDOAHCOLLECTIONSET_HPP
 
 #include "memory/allocation.hpp"
 #include "gc/shenandoah/shenandoahHeap.hpp"
 #include "gc/shenandoah/shenandoahHeapRegion.hpp"
+#include "gc/shenandoah/shenandoahPadding.hpp"
 
 class ShenandoahCollectionSet : public CHeapObj<mtGC> {
   friend class ShenandoahHeap;
 private:
   size_t const          _map_size;
@@ -44,28 +45,19 @@
   size_t                _garbage;
   size_t                _live_data;
   size_t                _used;
   size_t                _region_count;
 
-  DEFINE_PAD_MINUS_SIZE(0, DEFAULT_CACHE_LINE_SIZE, sizeof(volatile size_t));
+  shenandoah_padding(0);
   volatile jint         _current_index;
-  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, 0);
+  shenandoah_padding(1);
 
 public:
   ShenandoahCollectionSet(ShenandoahHeap* heap, char* heap_base, size_t size);
 
   // Add region to collection set
   void add_region(ShenandoahHeapRegion* r);
-  bool add_region_check_for_duplicates(ShenandoahHeapRegion* r);
-
-  // Bring per-region statuses to consistency with this collection.
-  // TODO: This is a transitional interface that bridges the gap between
-  // region statuses and this collection. Should go away after we merge them.
-  void update_region_status();
-
-  // Remove region from collection set
-  void remove_region(ShenandoahHeapRegion* r);
 
   // MT version
   ShenandoahHeapRegion* claim_next();
 
   // Single-thread version
@@ -77,13 +69,13 @@
   void clear_current_index() {
     _current_index = 0;
   }
 
   inline bool is_in(ShenandoahHeapRegion* r) const;
-  inline bool is_in(size_t region_number)    const;
-  inline bool is_in(HeapWord* loc)           const;
+  inline bool is_in(size_t region_idx)       const;
   inline bool is_in(oop obj)                 const;
+  inline bool is_in_loc(void* loc)           const;
 
   void print_on(outputStream* out) const;
 
   size_t used()      const { return _used; }
   size_t live_data() const { return _live_data; }
