diff a/src/hotspot/share/gc/shenandoah/heuristics/shenandoahAdaptiveHeuristics.cpp b/src/hotspot/share/gc/shenandoah/heuristics/shenandoahAdaptiveHeuristics.cpp
--- a/src/hotspot/share/gc/shenandoah/heuristics/shenandoahAdaptiveHeuristics.cpp
+++ b/src/hotspot/share/gc/shenandoah/heuristics/shenandoahAdaptiveHeuristics.cpp
@@ -25,20 +25,17 @@
 #include "precompiled.hpp"
 
 #include "gc/shenandoah/heuristics/shenandoahAdaptiveHeuristics.hpp"
 #include "gc/shenandoah/shenandoahCollectionSet.hpp"
 #include "gc/shenandoah/shenandoahFreeSet.hpp"
-#include "gc/shenandoah/shenandoahHeapRegion.hpp"
+#include "gc/shenandoah/shenandoahHeapRegion.inline.hpp"
 #include "logging/log.hpp"
 #include "logging/logTag.hpp"
 #include "utilities/quickSort.hpp"
 
 ShenandoahAdaptiveHeuristics::ShenandoahAdaptiveHeuristics() :
-  ShenandoahHeuristics(),
-  _cycle_gap_history(new TruncatedSeq(5)),
-  _conc_mark_duration_history(new TruncatedSeq(5)),
-  _conc_uprefs_duration_history(new TruncatedSeq(5)) {}
+  ShenandoahHeuristics() {}
 
 ShenandoahAdaptiveHeuristics::~ShenandoahAdaptiveHeuristics() {}
 
 void ShenandoahAdaptiveHeuristics::choose_collection_set_from_regiondata(ShenandoahCollectionSet* cset,
                                                                          RegionData* data, size_t size,
@@ -61,13 +58,13 @@
   // before we meet min_garbage. Then we add all candidates that fit with a garbage threshold before
   // we hit max_cset. When max_cset is hit, we terminate the cset selection. Note that in this scheme,
   // ShenandoahGarbageThreshold is the soft threshold which would be ignored until min_garbage is hit.
 
   size_t capacity    = ShenandoahHeap::heap()->max_capacity();
-  size_t free_target = capacity / 100 * ShenandoahMinFreeThreshold;
-  size_t min_garbage = free_target > actual_free ? (free_target - actual_free) : 0;
   size_t max_cset    = (size_t)((1.0 * capacity / 100 * ShenandoahEvacReserve) / ShenandoahEvacWaste);
+  size_t free_target = (capacity / 100 * ShenandoahMinFreeThreshold) + max_cset;
+  size_t min_garbage = (free_target > actual_free ? (free_target - actual_free) : 0);
 
   log_info(gc, ergo)("Adaptive CSet Selection. Target Free: " SIZE_FORMAT "%s, Actual Free: "
                      SIZE_FORMAT "%s, Max CSet: " SIZE_FORMAT "%s, Min Garbage: " SIZE_FORMAT "%s",
                      byte_size_in_proper_unit(free_target), proper_unit_for_byte_size(free_target),
                      byte_size_in_proper_unit(actual_free), proper_unit_for_byte_size(actual_free),
@@ -77,11 +74,10 @@
   // Better select garbage-first regions
   QuickSort::sort<RegionData>(data, (int)size, compare_by_garbage, false);
 
   size_t cur_cset = 0;
   size_t cur_garbage = 0;
-  _bytes_in_cset = 0;
 
   for (size_t idx = 0; idx < size; idx++) {
     ShenandoahHeapRegion* r = data[idx]._region;
 
     size_t new_cset    = cur_cset + r->get_live_data_bytes();
@@ -91,29 +87,18 @@
       break;
     }
 
     if ((new_garbage < min_garbage) || (r->garbage() > garbage_threshold)) {
       cset->add_region(r);
-      _bytes_in_cset += r->used();
       cur_cset = new_cset;
       cur_garbage = new_garbage;
     }
   }
 }
 
 void ShenandoahAdaptiveHeuristics::record_cycle_start() {
   ShenandoahHeuristics::record_cycle_start();
-  double last_cycle_gap = (_cycle_start - _last_cycle_end);
-  _cycle_gap_history->add(last_cycle_gap);
-}
-
-void ShenandoahAdaptiveHeuristics::record_phase_time(ShenandoahPhaseTimings::Phase phase, double secs) {
-  if (phase == ShenandoahPhaseTimings::conc_mark) {
-    _conc_mark_duration_history->add(secs);
-  } else if (phase == ShenandoahPhaseTimings::conc_update_refs) {
-    _conc_uprefs_duration_history->add(secs);
-  } // Else ignore
 }
 
 bool ShenandoahAdaptiveHeuristics::should_start_gc() const {
   ShenandoahHeap* heap = ShenandoahHeap::heap();
   size_t capacity = heap->max_capacity();
@@ -174,33 +159,10 @@
   }
 
   return ShenandoahHeuristics::should_start_gc();
 }
 
-bool ShenandoahAdaptiveHeuristics::should_start_update_refs() {
-  if (! _update_refs_adaptive) {
-    return _update_refs_early;
-  }
-
-  double cycle_gap_avg = _cycle_gap_history->avg();
-  double conc_mark_avg = _conc_mark_duration_history->avg();
-  double conc_uprefs_avg = _conc_uprefs_duration_history->avg();
-
-  if (_update_refs_early) {
-    double threshold = ShenandoahMergeUpdateRefsMinGap / 100.0;
-    if (conc_mark_avg + conc_uprefs_avg > cycle_gap_avg * threshold) {
-      _update_refs_early = false;
-    }
-  } else {
-    double threshold = ShenandoahMergeUpdateRefsMaxGap / 100.0;
-    if (conc_mark_avg + conc_uprefs_avg < cycle_gap_avg * threshold) {
-      _update_refs_early = true;
-    }
-  }
-  return _update_refs_early;
-}
-
 const char* ShenandoahAdaptiveHeuristics::name() {
   return "adaptive";
 }
 
 bool ShenandoahAdaptiveHeuristics::is_diagnostic() {
