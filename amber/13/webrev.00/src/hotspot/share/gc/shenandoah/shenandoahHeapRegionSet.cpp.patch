diff a/src/hotspot/share/gc/shenandoah/shenandoahHeapRegionSet.cpp b/src/hotspot/share/gc/shenandoah/shenandoahHeapRegionSet.cpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahHeapRegionSet.cpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahHeapRegionSet.cpp
@@ -57,11 +57,11 @@
   FREE_C_HEAP_ARRAY(jbyte, _set_map);
 }
 
 void ShenandoahHeapRegionSet::add_region(ShenandoahHeapRegion* r) {
   assert(!is_in(r), "Already in collection set");
-  _set_map[r->region_number()] = 1;
+  _set_map[r->index()] = 1;
   _region_count++;
 }
 
 bool ShenandoahHeapRegionSet::add_region_check_for_duplicates(ShenandoahHeapRegion* r) {
   if (!is_in(r)) {
@@ -74,11 +74,11 @@
 
 void ShenandoahHeapRegionSet::remove_region(ShenandoahHeapRegion* r) {
   assert(ShenandoahSafepoint::is_at_shenandoah_safepoint(), "Must be at a safepoint");
   assert(Thread::current()->is_VM_thread(), "Must be VMThread");
   assert(is_in(r), "Not in region set");
-  _set_map[r->region_number()] = 0;
+  _set_map[r->index()] = 0;
   _region_count --;
 }
 
 void ShenandoahHeapRegionSet::clear() {
   assert(ShenandoahSafepoint::is_at_shenandoah_safepoint(), "Must be at a safepoint");
