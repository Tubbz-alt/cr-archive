diff a/src/hotspot/share/gc/shenandoah/shenandoahSharedVariables.hpp b/src/hotspot/share/gc/shenandoah/shenandoahSharedVariables.hpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahSharedVariables.hpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahSharedVariables.hpp
@@ -23,10 +23,11 @@
  */
 
 #ifndef SHARE_GC_SHENANDOAH_SHENANDOAHSHAREDVARIABLES_HPP
 #define SHARE_GC_SHENANDOAH_SHENANDOAHSHAREDVARIABLES_HPP
 
+#include "gc/shenandoah/shenandoahPadding.hpp"
 #include "memory/allocation.hpp"
 #include "runtime/atomic.hpp"
 
 typedef jbyte ShenandoahSharedValue;
 
@@ -37,13 +38,13 @@
   enum {
     UNSET = 0,
     SET = 1
   };
 
-  DEFINE_PAD_MINUS_SIZE(0, DEFAULT_CACHE_LINE_SIZE, sizeof(volatile ShenandoahSharedValue));
+  shenandoah_padding(0);
   volatile ShenandoahSharedValue value;
-  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, 0);
+  shenandoah_padding(1);
 
   ShenandoahSharedFlag() {
     unset();
   }
 
@@ -105,13 +106,13 @@
   bool operator<=(ShenandoahSharedFlag& other) { fatal("Use is_set() instead"); return false; }
 
 } ShenandoahSharedFlag;
 
 typedef struct ShenandoahSharedBitmap {
-  DEFINE_PAD_MINUS_SIZE(0, DEFAULT_CACHE_LINE_SIZE, sizeof(volatile ShenandoahSharedValue));
+  shenandoah_padding(0);
   volatile ShenandoahSharedValue value;
-  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, 0);
+  shenandoah_padding(1);
 
   ShenandoahSharedBitmap() {
     clear();
   }
 
@@ -199,13 +200,13 @@
 
 } ShenandoahSharedBitmap;
 
 template<class T>
 struct ShenandoahSharedEnumFlag {
-  DEFINE_PAD_MINUS_SIZE(0, DEFAULT_CACHE_LINE_SIZE, sizeof(volatile ShenandoahSharedValue));
+  shenandoah_padding(0);
   volatile ShenandoahSharedValue value;
-  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, 0);
+  shenandoah_padding(1);
 
   ShenandoahSharedEnumFlag() {
     value = 0;
   }
 
