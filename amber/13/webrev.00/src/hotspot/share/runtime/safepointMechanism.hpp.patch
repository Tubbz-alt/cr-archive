diff a/src/hotspot/share/runtime/safepointMechanism.hpp b/src/hotspot/share/runtime/safepointMechanism.hpp
--- a/src/hotspot/share/runtime/safepointMechanism.hpp
+++ b/src/hotspot/share/runtime/safepointMechanism.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -32,10 +32,11 @@
 
 // This is the abstracted interface for the safepoint implementation
 class SafepointMechanism : public AllStatic {
   static void* _poll_armed_value;
   static void* _poll_disarmed_value;
+  static address _polling_page;
 
   static void* poll_armed_value()                     { return _poll_armed_value; }
   static void* poll_disarmed_value()                  { return _poll_disarmed_value; }
 
   static inline bool local_poll_armed(JavaThread* thread);
@@ -57,18 +58,12 @@
   // between the armed and disarmed value by masking out this bit.
   const static intptr_t _poll_bit = 8;
 public:
   static intptr_t poll_bit() { return _poll_bit; }
 
-  static bool uses_global_page_poll() { return !uses_thread_local_poll(); }
-  static bool uses_thread_local_poll() {
-#ifdef THREAD_LOCAL_POLL
-    return true;
-#else
-    return false;
-#endif
-  }
+  static address get_polling_page()             { return _polling_page; }
+  static bool    is_poll_address(address addr)  { return addr >= _polling_page && addr < (_polling_page + os::vm_page_size()); }
 
   // Call this method to see if this thread should block for a safepoint or process handshake.
   static inline bool should_block(Thread* thread);
 
   // Blocks a thread until safepoint/handshake is completed.
