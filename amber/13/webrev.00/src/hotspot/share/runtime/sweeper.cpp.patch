diff a/src/hotspot/share/runtime/sweeper.cpp b/src/hotspot/share/runtime/sweeper.cpp
--- a/src/hotspot/share/runtime/sweeper.cpp
+++ b/src/hotspot/share/runtime/sweeper.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -248,16 +248,12 @@
   }
 }
 
 CodeBlobClosure* NMethodSweeper::prepare_mark_active_nmethods() {
 #ifdef ASSERT
-  if (SafepointMechanism::uses_thread_local_poll()) {
-    assert(Thread::current()->is_Code_cache_sweeper_thread(), "must be executed under CodeCache_lock and in sweeper thread");
-    assert_lock_strong(CodeCache_lock);
-  } else {
-    assert(SafepointSynchronize::is_at_safepoint(), "must be executed at a safepoint");
-  }
+  assert(Thread::current()->is_Code_cache_sweeper_thread(), "must be executed under CodeCache_lock and in sweeper thread");
+  assert_lock_strong(CodeCache_lock);
 #endif
 
   // If we do not want to reclaim not-entrant or zombie methods there is no need
   // to scan stacks
   if (!MethodFlushing) {
@@ -315,23 +311,18 @@
   * methods. Stack scanning is mandatory for the sweeper to make progress.
   */
 void NMethodSweeper::do_stack_scanning() {
   assert(!CodeCache_lock->owned_by_self(), "just checking");
   if (wait_for_stack_scanning()) {
-    if (SafepointMechanism::uses_thread_local_poll()) {
-      CodeBlobClosure* code_cl;
-      {
-        MutexLocker ccl(CodeCache_lock, Mutex::_no_safepoint_check_flag);
-        code_cl = prepare_mark_active_nmethods();
-      }
-      if (code_cl != NULL) {
-        NMethodMarkingClosure nm_cl(code_cl);
-        Handshake::execute(&nm_cl);
-      }
-    } else {
-      VM_MarkActiveNMethods op;
-      VMThread::execute(&op);
+    CodeBlobClosure* code_cl;
+    {
+      MutexLocker ccl(CodeCache_lock, Mutex::_no_safepoint_check_flag);
+      code_cl = prepare_mark_active_nmethods();
+    }
+    if (code_cl != NULL) {
+      NMethodMarkingClosure nm_cl(code_cl);
+      Handshake::execute(&nm_cl);
     }
   }
 }
 
 void NMethodSweeper::sweeper_loop() {
