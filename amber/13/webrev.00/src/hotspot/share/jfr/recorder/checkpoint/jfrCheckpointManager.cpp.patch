diff a/src/hotspot/share/jfr/recorder/checkpoint/jfrCheckpointManager.cpp b/src/hotspot/share/jfr/recorder/checkpoint/jfrCheckpointManager.cpp
--- a/src/hotspot/share/jfr/recorder/checkpoint/jfrCheckpointManager.cpp
+++ b/src/hotspot/share/jfr/recorder/checkpoint/jfrCheckpointManager.cpp
@@ -52,10 +52,26 @@
 
 typedef JfrCheckpointManager::Buffer* BufferPtr;
 
 static JfrCheckpointManager* _instance = NULL;
 
+static volatile bool constant_pending = false;
+
+static bool is_constant_pending() {
+  if (Atomic::load_acquire(&constant_pending)) {
+    Atomic::release_store(&constant_pending, false); // reset
+    return true;
+  }
+  return false;
+}
+
+static void set_constant_pending() {
+  if (!Atomic::load_acquire(&constant_pending)) {
+    Atomic::release_store(&constant_pending, true);
+  }
+}
+
 JfrCheckpointManager& JfrCheckpointManager::instance() {
   return *_instance;
 }
 
 JfrCheckpointManager* JfrCheckpointManager::create(JfrChunkWriter& cw) {
@@ -213,10 +229,11 @@
   assert(old != NULL, "invariant");
   assert(old->lease(), "invariant");
   if (0 == requested) {
     // indicates a lease is being returned
     release(old, thread);
+    set_constant_pending();
     return NULL;
   }
   // migration of in-flight information
   BufferPtr const new_buffer = lease_buffer(old, thread, used + requested);
   if (new_buffer != NULL) {
@@ -359,20 +376,10 @@
 
 size_t JfrCheckpointManager::write_epoch_transition_mspace() {
   return write_mspace<ExclusiveOp, CompositeOperation>(_epoch_transition_mspace, _chunkwriter);
 }
 
-typedef MutexedWriteOp<WriteOperation> FlushOperation;
-
-size_t JfrCheckpointManager::flush() {
-  WriteOperation wo(_chunkwriter);
-  FlushOperation fo(wo);
-  assert(_free_list_mspace->is_full_empty(), "invariant");
-  process_free_list(fo, _free_list_mspace);
-  return wo.processed();
-}
-
 typedef DiscardOp<DefaultDiscarder<JfrBuffer> > DiscardOperation;
 size_t JfrCheckpointManager::clear() {
   clear_type_set();
   DiscardOperation discarder(mutexed); // mutexed discard mode
   process_free_list(discarder, _free_list_mspace);
@@ -392,14 +399,10 @@
   buffer->set_lease();
   DEBUG_ONLY(assert_free_lease(buffer);)
   return buffer;
 }
 
-bool JfrCheckpointManager::is_static_type_set_required() {
-  return JfrTypeManager::has_new_static_type();
-}
-
 size_t JfrCheckpointManager::write_static_type_set() {
   Thread* const t = Thread::current();
   ResourceMark rm(t);
   HandleMark hm(t);
   JfrCheckpointWriter writer(t, get_epoch_transition_buffer(_epoch_transition_mspace, t), STATICS);
@@ -470,31 +473,30 @@
     // discard by rewind
     writer.set_context(ctx);
   }
 }
 
-bool JfrCheckpointManager::is_type_set_required() {
-  return JfrTraceIdEpoch::has_changed_tag_state();
-}
+typedef MutexedWriteOp<WriteOperation> FlushOperation;
 
 size_t JfrCheckpointManager::flush_type_set() {
   size_t elements = 0;
-  {
+  if (JfrTraceIdEpoch::has_changed_tag_state()) {
     JfrCheckpointWriter writer(Thread::current());
     // can safepoint here
     MutexLocker cld_lock(ClassLoaderDataGraph_lock);
     MutexLocker module_lock(Module_lock);
     elements = JfrTypeSet::serialize(&writer, NULL, false, true);
   }
-  flush();
+  if (is_constant_pending()) {
+    WriteOperation wo(_chunkwriter);
+    FlushOperation fo(wo);
+    assert(_free_list_mspace->is_full_empty(), "invariant");
+    process_free_list(fo, _free_list_mspace);
+  }
   return elements;
 }
 
-void JfrCheckpointManager::flush_static_type_set() {
-  flush();
-}
-
 void JfrCheckpointManager::create_thread_blob(Thread* t) {
   JfrTypeManager::create_thread_blob(t);
 }
 
 void JfrCheckpointManager::write_thread_checkpoint(Thread* t) {
