diff a/src/hotspot/cpu/sparc/c1_LIRAssembler_sparc.cpp b/src/hotspot/cpu/sparc/c1_LIRAssembler_sparc.cpp
--- a/src/hotspot/cpu/sparc/c1_LIRAssembler_sparc.cpp
+++ b/src/hotspot/cpu/sparc/c1_LIRAssembler_sparc.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -1426,28 +1426,20 @@
 
 void LIR_Assembler::return_op(LIR_Opr result) {
   if (StackReservedPages > 0 && compilation()->has_reserved_stack_access()) {
     __ reserved_stack_check();
   }
-  if (SafepointMechanism::uses_thread_local_poll()) {
-    __ ld_ptr(Address(G2_thread, Thread::polling_page_offset()), L0);
-  } else {
-    __ set((intptr_t)os::get_polling_page(), L0);
-  }
+  __ ld_ptr(Address(G2_thread, Thread::polling_page_offset()), L0);
   __ relocate(relocInfo::poll_return_type);
   __ ld_ptr(L0, 0, G0);
   __ ret();
   __ delayed()->restore();
 }
 
 
 int LIR_Assembler::safepoint_poll(LIR_Opr tmp, CodeEmitInfo* info) {
-  if (SafepointMechanism::uses_thread_local_poll()) {
-    __ ld_ptr(Address(G2_thread, Thread::polling_page_offset()), tmp->as_register());
-  } else {
-    __ set((intptr_t)os::get_polling_page(), tmp->as_register());
-  }
+  __ ld_ptr(Address(G2_thread, Thread::polling_page_offset()), tmp->as_register());
   if (info != NULL) {
     add_debug_info_for_branch(info);
   }
   int offset = __ offset();
 
