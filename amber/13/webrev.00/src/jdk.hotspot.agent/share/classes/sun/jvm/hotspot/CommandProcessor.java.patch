diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/CommandProcessor.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/CommandProcessor.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/CommandProcessor.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/CommandProcessor.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -25,10 +25,11 @@
 package sun.jvm.hotspot;
 
 import java.io.BufferedOutputStream;
 import java.io.BufferedReader;
 import java.io.ByteArrayOutputStream;
+import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.io.PrintStream;
@@ -72,15 +73,18 @@
 import sun.jvm.hotspot.runtime.JavaThread;
 import sun.jvm.hotspot.runtime.JavaVFrame;
 import sun.jvm.hotspot.runtime.Threads;
 import sun.jvm.hotspot.runtime.VM;
 import sun.jvm.hotspot.tools.ObjectHistogram;
+import sun.jvm.hotspot.tools.JMap;
 import sun.jvm.hotspot.tools.PMap;
 import sun.jvm.hotspot.tools.PStack;
 import sun.jvm.hotspot.tools.StackTrace;
+import sun.jvm.hotspot.tools.SysPropsDumper;
 import sun.jvm.hotspot.tools.jcore.ClassDump;
 import sun.jvm.hotspot.tools.jcore.ClassFilter;
+import sun.jvm.hotspot.tools.jcore.ClassWriter;
 import sun.jvm.hotspot.types.CIntegerType;
 import sun.jvm.hotspot.types.Field;
 import sun.jvm.hotspot.types.Type;
 import sun.jvm.hotspot.types.basic.BasicType;
 import sun.jvm.hotspot.ui.classbrowser.HTMLGenerator;
@@ -1700,10 +1704,133 @@
                 } else {
                     Assert.ASSERTS_ENABLED = Boolean.valueOf(t.nextToken()).booleanValue();
                 }
             }
         },
+        new Command("dumpclass", "dumpclass {address | name} [directory]", false) {
+            public void doit(Tokens t) {
+                int tokenCount = t.countTokens();
+                if (tokenCount != 1 && tokenCount != 2) {
+                    usage();
+                    return;
+                }
+
+                /* Find the InstanceKlass for specified class name or class address. */
+                InstanceKlass ik = null;
+                String classname = t.nextToken();
+                if (classname.startsWith("0x")) {
+                    // treat it as address
+                    VM vm = VM.getVM();
+                    Address addr = vm.getDebugger().parseAddress(classname);
+                    Metadata metadata = Metadata.instantiateWrapperFor(addr.addOffsetTo(0));
+                    if (metadata instanceof InstanceKlass) {
+                        ik = (InstanceKlass) metadata;
+                    } else {
+                        System.out.println("Specified address is not an InstanceKlass");
+                        return;
+                    }
+                } else {
+                    ik = SystemDictionaryHelper.findInstanceKlass(classname);
+                    if (ik == null) {
+                        System.out.println("class not found: " + classname);
+                        return;
+                    }
+                }
+
+                /* Compute filename for class. */
+                StringBuffer buf = new StringBuffer();
+                if (tokenCount > 1) {
+                    buf.append(t.nextToken());
+                } else {
+                    buf.append('.');
+                }
+                buf.append(File.separatorChar);
+                buf.append(ik.getName().asString().replace('/', File.separatorChar));
+                buf.append(".class");
+                String fileName = buf.toString();
+                File file = new File(fileName);
+
+                /* Dump the class file. */
+                try {
+                    int index = fileName.lastIndexOf(File.separatorChar);
+                    File dir = new File(fileName.substring(0, index));
+                    dir.mkdirs();
+                    try (FileOutputStream fos = new FileOutputStream(file)) {
+                        ClassWriter cw = new ClassWriter(ik, fos);
+                        cw.write();
+                    }
+                } catch (Exception e) {
+                    err.println("Error: " + e);
+                    if (verboseExceptions) {
+                        e.printStackTrace(err);
+                    }
+                }
+            }
+        },
+        new Command("sysprops", "sysprops", false) {
+            public void doit(Tokens t) {
+                if (t.countTokens() != 0) {
+                    usage();
+                    return;
+                }
+                SysPropsDumper sysProps = new SysPropsDumper();
+                sysProps.run();
+            }
+        },
+        new Command("dumpheap", "dumpheap [filename]", false) {
+            public void doit(Tokens t) {
+                if (t.countTokens() > 1) {
+                    usage();
+                } else {
+                    JMap jmap = new JMap();
+                    String filename;
+                    if (t.countTokens() == 1) {
+                        filename = t.nextToken();
+                    } else {
+                        filename = "heap.bin";;
+                    }
+                    try {
+                        jmap.writeHeapHprofBin(filename);
+                    } catch (Exception e) {
+                        err.println("Error: " + e);
+                        if (verboseExceptions) {
+                            e.printStackTrace(err);
+                        }
+                    }
+                }
+            }
+        },
+        new Command("class", "class name", false) {
+            public void doit(Tokens t) {
+                if (t.countTokens() != 1) {
+                    usage();
+                    return;
+                }
+                String classname = t.nextToken();
+                InstanceKlass ik = SystemDictionaryHelper.findInstanceKlass(classname);
+                if (ik == null) {
+                    System.out.println("class not found: " + classname);
+                } else {
+                    System.out.println(ik.getName().asString() + " @" + ik.getAddress());
+                }
+            }
+        },
+        new Command("classes", "classes", false) {
+            public void doit(Tokens t) {
+                if (t.countTokens() != 0) {
+                    usage();
+                    return;
+                }
+                ClassLoaderDataGraph cldg = VM.getVM().getClassLoaderDataGraph();
+                cldg.classesDo(new ClassLoaderDataGraph.ClassVisitor() {
+                        public void visit(Klass k) {
+                            System.out.println(k.getName().asString() + " @" + k.getAddress());
+                        }
+                    }
+                );
+            }
+        },
     };
 
     private boolean verboseExceptions = false;
     private ArrayList history = new ArrayList();
     private HashMap commands = new HashMap();
