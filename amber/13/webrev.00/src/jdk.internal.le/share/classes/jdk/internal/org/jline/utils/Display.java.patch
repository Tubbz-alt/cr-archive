diff a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/utils/Display.java b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/utils/Display.java
--- a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/utils/Display.java
+++ b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/utils/Display.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002-2018, the original author or authors.
+ * Copyright (c) 2002-2020, the original author or authors.
  *
  * This software is distributable under the BSD license. See the terms of the
  * BSD license in the documentation provided with this software.
  *
  * https://opensource.org/licenses/BSD-3-Clause
@@ -213,21 +213,19 @@
                 cursorPos++;
                 if (newLength == 0 || newLine.isHidden(0)) {
                     // go to next line column zero
                     rawPrint(new AttributedString(" \b"));
                 } else {
-                    AttributedString firstChar =
-                        newLine.columnSubSequence(0, 1);
+                    AttributedString firstChar = newLine.substring(0, 1);
                     // go to next line column one
                     rawPrint(firstChar);
-                    cursorPos++;
-                    int firstLength = firstChar.length(); // normally 1
-                    newLine = newLine.substring(firstLength, newLength);
-                    newLength -= firstLength;
-                    if (oldLength >= firstLength) {
-                        oldLine = oldLine.substring(firstLength, oldLength);
-                        oldLength -= firstLength;
+                    cursorPos += firstChar.columnLength(); // normally 1
+                    newLine = newLine.substring(1, newLength);
+                    newLength--;
+                    if (oldLength > 0) {
+                        oldLine = oldLine.substring(1, oldLength);
+                        oldLength--;
                     }
                     currentPos = cursorPos;
                 }
             }
             List<DiffHelper.Diff> diffs = DiffHelper.diff(oldLine, newLine);
@@ -327,11 +325,10 @@
                     cursorPos = curCol;
                 }
                 currentPos = cursorPos;
             }
         }
-        int was = cursorPos;
         if (cursorPos != targetCursorPos) {
             moveVisualCursorTo(targetCursorPos < 0 ? currentPos : targetCursorPos, newLines);
         }
         oldLines = newLines;
 
@@ -494,9 +491,9 @@
     void rawPrint(AttributedString str) {
         str.print(terminal);
     }
 
     public int wcwidth(String str) {
-        return AttributedString.fromAnsi(str).columnLength();
+        return str != null ? AttributedString.fromAnsi(str).columnLength() : 0;
     }
 
 }
