diff a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/terminal/TerminalBuilder.java b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/terminal/TerminalBuilder.java
--- a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/terminal/TerminalBuilder.java
+++ b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/terminal/TerminalBuilder.java
@@ -17,13 +17,15 @@
 import java.lang.reflect.Method;
 import java.nio.charset.Charset;
 import java.nio.charset.UnsupportedCharsetException;
 import java.util.Optional;
 import java.util.ServiceLoader;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Function;
 
 import jdk.internal.org.jline.terminal.impl.AbstractPosixTerminal;
+import jdk.internal.org.jline.terminal.impl.AbstractTerminal;
 import jdk.internal.org.jline.terminal.impl.DumbTerminal;
 import jdk.internal.org.jline.terminal.impl.ExecPty;
 import jdk.internal.org.jline.terminal.impl.ExternalTerminal;
 import jdk.internal.org.jline.terminal.impl.PosixPtyTerminal;
 import jdk.internal.org.jline.terminal.impl.PosixSysTerminal;
@@ -83,10 +85,12 @@
      */
     public static TerminalBuilder builder() {
         return new TerminalBuilder();
     }
 
+    private static final AtomicReference<Terminal> SYSTEM_TERMINAL = new AtomicReference<>();
+
     private String name;
     private InputStream in;
     private OutputStream out;
     private String type;
     private Charset encoding;
@@ -316,10 +320,11 @@
         if ((system != null && system) || (system == null && in == null && out == null)) {
             if (attributes != null || size != null) {
                 Log.warn("Attributes and size fields are ignored when creating a system terminal");
             }
             IllegalStateException exception = new IllegalStateException("Unable to create a system terminal");
+            Terminal terminal = null;
             if (OSUtils.IS_WINDOWS) {
                 boolean cygwinTerm = "cygwin".equals(System.getenv("TERM"));
                 boolean ansiPassThrough = OSUtils.IS_CONEMU;
                 //
                 // Cygwin support
@@ -330,65 +335,82 @@
                         // Cygwin defaults to XTERM, but actually supports 256 colors,
                         // so if the value comes from the environment, change it to xterm-256color
                         if ("xterm".equals(type) && this.type == null && System.getProperty(PROP_TYPE) == null) {
                             type = "xterm-256color";
                         }
-                        return new PosixSysTerminal(name, type, pty, inputStreamWrapper.apply(pty.getSlaveInput()), pty.getSlaveOutput(), encoding, nativeSignals, signalHandler);
+                        terminal = new PosixSysTerminal(name, type, pty, inputStreamWrapper.apply(pty.getSlaveInput()), pty.getSlaveOutput(), encoding, nativeSignals, signalHandler);
                     } catch (IOException e) {
                         // Ignore if not a tty
                         Log.debug("Error creating EXEC based terminal: ", e.getMessage(), e);
                         exception.addSuppressed(e);
                     }
                 }
                 if (jna) {
                     try {
-                        return load(JnaSupport.class).winSysTerminal(name, type, ansiPassThrough, encoding, codepage, nativeSignals, signalHandler, paused, inputStreamWrapper);
+                        terminal = load(JnaSupport.class).winSysTerminal(name, type, ansiPassThrough, encoding, codepage, nativeSignals, signalHandler, paused, inputStreamWrapper);
                     } catch (Throwable t) {
                         Log.debug("Error creating JNA based terminal: ", t.getMessage(), t);
                         exception.addSuppressed(t);
                     }
                 }
                 if (jansi) {
                     try {
-                        return load(JansiSupport.class).winSysTerminal(name, type, ansiPassThrough, encoding, codepage, nativeSignals, signalHandler, paused);
+                        terminal = load(JansiSupport.class).winSysTerminal(name, type, ansiPassThrough, encoding, codepage, nativeSignals, signalHandler, paused);
                     } catch (Throwable t) {
                         Log.debug("Error creating JANSI based terminal: ", t.getMessage(), t);
                         exception.addSuppressed(t);
                     }
                 }
             } else {
                 if (jna) {
                     try {
                         Pty pty = load(JnaSupport.class).current();
-                        return new PosixSysTerminal(name, type, pty, inputStreamWrapper.apply(pty.getSlaveInput()), pty.getSlaveOutput(), encoding, nativeSignals, signalHandler);
+                        terminal = new PosixSysTerminal(name, type, pty, inputStreamWrapper.apply(pty.getSlaveInput()), pty.getSlaveOutput(), encoding, nativeSignals, signalHandler);
                     } catch (Throwable t) {
                         // ignore
                         Log.debug("Error creating JNA based terminal: ", t.getMessage(), t);
                         exception.addSuppressed(t);
                     }
                 }
                 if (jansi) {
                     try {
                         Pty pty = load(JansiSupport.class).current();
-                        return new PosixSysTerminal(name, type, pty, inputStreamWrapper.apply(pty.getSlaveInput()), pty.getSlaveOutput(), encoding, nativeSignals, signalHandler);
+                        terminal = new PosixSysTerminal(name, type, pty, inputStreamWrapper.apply(pty.getSlaveInput()), pty.getSlaveOutput(), encoding, nativeSignals, signalHandler);
                     } catch (Throwable t) {
                         Log.debug("Error creating JANSI based terminal: ", t.getMessage(), t);
                         exception.addSuppressed(t);
                     }
                 }
                 if (exec) {
                     try {
                         Pty pty = ExecPty.current();
-                        return new PosixSysTerminal(name, type, pty, inputStreamWrapper.apply(pty.getSlaveInput()), pty.getSlaveOutput(), encoding, nativeSignals, signalHandler);
+                        terminal = new PosixSysTerminal(name, type, pty, inputStreamWrapper.apply(pty.getSlaveInput()), pty.getSlaveOutput(), encoding, nativeSignals, signalHandler);
                     } catch (Throwable t) {
                         // Ignore if not a tty
                         Log.debug("Error creating EXEC based terminal: ", t.getMessage(), t);
                         exception.addSuppressed(t);
                     }
                 }
             }
-            if (dumb == null || dumb) {
+            if (terminal instanceof AbstractTerminal) {
+                AbstractTerminal t = (AbstractTerminal) terminal;
+                if (SYSTEM_TERMINAL.compareAndSet(null, t)) {
+                    t.setOnClose(new Runnable() {
+                        @Override
+                        public void run() {
+                            SYSTEM_TERMINAL.compareAndSet(t, null);
+                        }
+                    });
+                } else {
+                    exception.addSuppressed(new IllegalStateException("A system terminal is already running. " +
+                            "Make sure to use the created system Terminal on the LineReaderBuilder if you're using one " +
+                            "or that previously created system Terminals have been correctly closed."));
+                    terminal.close();
+                    terminal = null;
+                }
+            }
+            if (terminal == null && (dumb == null || dumb)) {
                 // forced colored dumb terminal
                 boolean color = getBoolean(PROP_DUMB_COLOR, false);
                 // detect emacs using the env variable
                 if (!color) {
                     color = System.getenv("INSIDE_EMACS") != null;
@@ -403,17 +425,19 @@
                         Log.warn("Creating a dumb terminal", exception);
                     } else {
                         Log.warn("Unable to create a system terminal, creating a dumb terminal (enable debug logging for more information)");
                     }
                 }
-                return new DumbTerminal(name, color ? Terminal.TYPE_DUMB_COLOR : Terminal.TYPE_DUMB,
+                terminal = new DumbTerminal(name, color ? Terminal.TYPE_DUMB_COLOR : Terminal.TYPE_DUMB,
                         new FileInputStream(FileDescriptor.in),
                         new FileOutputStream(FileDescriptor.out),
                         encoding, signalHandler);
-            } else {
+            }
+            if (terminal == null) {
                 throw exception;
             }
+            return terminal;
         } else {
             if (jna) {
                 try {
                     Pty pty = load(JnaSupport.class).open(attributes, size);
                     return new PosixPtyTerminal(name, type, pty, in, out, encoding, signalHandler, paused);
@@ -427,18 +451,11 @@
                     return new PosixPtyTerminal(name, type, pty, in, out, encoding, signalHandler, paused);
                 } catch (Throwable t) {
                     Log.debug("Error creating JANSI based terminal: ", t.getMessage(), t);
                 }
             }
-            Terminal terminal = new ExternalTerminal(name, type, in, out, encoding, signalHandler, paused);
-            if (attributes != null) {
-                terminal.setAttributes(attributes);
-            }
-            if (size != null) {
-                terminal.setSize(size);
-            }
-            return terminal;
+            return new ExternalTerminal(name, type, in, out, encoding, signalHandler, paused, attributes, size);
         }
     }
 
     private static String getParentProcessCommand() {
         try {
