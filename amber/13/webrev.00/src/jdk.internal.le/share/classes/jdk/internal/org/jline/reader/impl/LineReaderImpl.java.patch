diff a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/impl/LineReaderImpl.java b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/impl/LineReaderImpl.java
--- a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/impl/LineReaderImpl.java
+++ b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/impl/LineReaderImpl.java
@@ -1,25 +1,29 @@
 /*
- * Copyright (c) 2002-2019, the original author or authors.
+ * Copyright (c) 2002-2020, the original author or authors.
  *
  * This software is distributable under the BSD license. See the terms of the
  * BSD license in the documentation provided with this software.
  *
  * https://opensource.org/licenses/BSD-3-Clause
  */
 package jdk.internal.org.jline.reader.impl;
 
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
 import java.io.Flushable;
 import java.io.IOError;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InterruptedIOException;
+import java.lang.reflect.Constructor;
 import java.time.Instant;
 import java.util.*;
 import java.util.Map.Entry;
 import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.*;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
@@ -84,10 +88,12 @@
     public static final String DEFAULT_ORIGINAL_GROUP_NAME = "original";
     public static final String DEFAULT_COMPLETION_STYLE_STARTING = "36";    // cyan
     public static final String DEFAULT_COMPLETION_STYLE_DESCRIPTION = "90"; // dark gray
     public static final String DEFAULT_COMPLETION_STYLE_GROUP = "35;1";     // magenta
     public static final String DEFAULT_COMPLETION_STYLE_SELECTION = "7";    // inverted
+    public static final int    DEFAULT_INDENTATION = 0;
+    public static final int    DEFAULT_FEATURES_MAX_BUFFER_SIZE = 1000;
 
     private static final int MIN_ROWS = 3;
 
     public static final String BRACKETED_PASTE_ON = "\033[?2004h";
     public static final String BRACKETED_PASTE_OFF = "\033[?2004l";
@@ -107,10 +113,14 @@
         NORMAL,
         /**
          * readLine should exit and return the buffer content
          */
         DONE,
+        /**
+         * readLine should exit and return empty String
+         */
+        IGNORE,
         /**
          * readLine should exit and throw an EOFException
          */
         EOF,
         /**
@@ -158,10 +168,12 @@
     //
 
     protected final Map<Option, Boolean> options = new HashMap<>();
 
     protected final Buffer buf = new BufferImpl();
+    protected String tailTip = "";
+    protected SuggestionType autosuggestion = SuggestionType.NONE;
 
     protected final Size size = new Size();
 
     protected AttributedString prompt = AttributedString.EMPTY;
     protected AttributedString rightPrompt = AttributedString.EMPTY;
@@ -173,10 +185,11 @@
     protected CharSequence searchBuffer;
     protected StringBuffer searchTerm = null;
     protected boolean searchFailing;
     protected boolean searchBackward;
     protected int searchIndex = -1;
+    protected boolean doAutosuggestion;
 
 
     // Reading buffers
     protected final BindingReader bindingReader;
 
@@ -244,17 +257,20 @@
     protected boolean overTyping = false;
 
     protected String keyMap;
 
     protected int smallTerminalOffset = 0;
-
     /*
      * accept-and-infer-next-history, accept-and-hold & accept-line-and-down-history
      */
     protected boolean nextCommandFromHistory = false;
     protected int nextHistoryId = -1;
 
+    /*
+     * execute commands from commandsBuffer
+     */
+    protected List<String> commandsBuffer = new ArrayList<>();
 
     public LineReaderImpl(Terminal terminal) throws IOException {
         this(terminal, null, null);
     }
 
@@ -311,10 +327,30 @@
     @Override
     public Buffer getBuffer() {
         return buf;
     }
 
+    @Override
+    public void setAutosuggestion(SuggestionType type) {
+        this.autosuggestion = type;
+    }
+
+    @Override
+    public SuggestionType getAutosuggestion() {
+        return autosuggestion;
+    }
+
+    @Override
+    public String getTailTip() {
+        return tailTip;
+    }
+
+    @Override
+    public void setTailTip(String tailTip) {
+        this.tailTip = tailTip;
+    }
+
     @Override
     public void runMacro(String macro) {
         bindingReader.runMacro(macro);
     }
 
@@ -469,10 +505,36 @@
      */
     public String readLine(String prompt, String rightPrompt, MaskingCallback maskingCallback, String buffer) throws UserInterruptException, EndOfFileException {
         // prompt may be null
         // maskingCallback may be null
         // buffer may be null
+        if (!commandsBuffer.isEmpty()) {
+            String cmd = commandsBuffer.remove(0);
+            boolean done = false;
+            do {
+                try {
+                    parser.parse(cmd, cmd.length() + 1, ParseContext.ACCEPT_LINE);
+                    done = true;
+                } catch (EOFError e) {
+                    if (commandsBuffer.isEmpty()) {
+                        throw new IllegalArgumentException("Incompleted command: \n" + cmd);
+                    }
+                    cmd += "\n";
+                    cmd += commandsBuffer.remove(0);
+                } catch (SyntaxError e) {
+                    done = true;
+                } catch (Exception e) {
+                    commandsBuffer.clear();
+                    throw new IllegalArgumentException(e.getMessage());
+                }
+            } while (!done);
+            AttributedStringBuilder sb = new AttributedStringBuilder();
+            sb.styled(AttributedStyle::bold, cmd);
+            sb.toAttributedString().println(terminal);
+            terminal.flush();
+            return finish(cmd);
+        }
 
         if (!startedReading.compareAndSet(false, true)) {
             throw new IllegalStateException();
         }
 
@@ -596,22 +658,25 @@
                 }
 
                 try {
                     lock.lock();
                     // Get executable widget
-                    Buffer copy = buf.copy();
+                    Buffer copy = buf.length() <= getInt(FEATURES_MAX_BUFFER_SIZE, DEFAULT_FEATURES_MAX_BUFFER_SIZE) ? buf.copy() : null;
                     Widget w = getWidget(o);
                     if (!w.apply()) {
                         beep();
                     }
-                    if (!isUndo && !copy.toString().equals(buf.toString())) {
+                    if (!isUndo && copy != null && buf.length() <= getInt(FEATURES_MAX_BUFFER_SIZE, DEFAULT_FEATURES_MAX_BUFFER_SIZE)
+                            && !copy.toString().equals(buf.toString())) {
                         undo.newState(buf.copy());
                     }
 
                     switch (state) {
                         case DONE:
                             return finishBuffer();
+                        case IGNORE:
+                            return "";
                         case EOF:
                             throw new EndOfFileException();
                         case INTERRUPT:
                             throw new UserInterruptException(buf.toString());
                     }
@@ -663,16 +728,16 @@
             }
             startedReading.set(false);
         }
     }
 
-    private boolean isTerminalDumb(){
+    private boolean isTerminalDumb() {
         return Terminal.TYPE_DUMB.equals(terminal.getType())
                 || Terminal.TYPE_DUMB_COLOR.equals(terminal.getType());
     }
 
-    private void doDisplay(){
+    private void doDisplay() {
         // Cache terminal size for the duration of the call to readLine()
         // It will eventually be updated with WINCH signals
         size.copy(terminal.getBufferSize());
 
         display = new Display(terminal, false);
@@ -847,10 +912,23 @@
         } else {
             return bindingReader.readBinding(keys, local);
         }
     }
 
+    protected String doReadStringUntil(String sequence) {
+        if (lock.isHeldByCurrentThread()) {
+            try {
+                lock.unlock();
+                return bindingReader.readStringUntil(sequence);
+            } finally {
+                lock.lock();
+            }
+        } else {
+            return bindingReader.readStringUntil(sequence);
+        }
+    }
+
     /**
      * Read from the input stream and decode an operation from the key map.
      *
      * The input stream will be read character by character until a matching
      * binding can be found.  Characters that can't possibly be matched to
@@ -887,14 +965,16 @@
     @Override
     public ParsedLine getParsedLine() {
         return parsedLine;
     }
 
+    @Override
     public String getLastBinding() {
         return bindingReader.getLastBinding();
     }
 
+    @Override
     public String getSearchTerm() {
         return searchTerm != null ? searchTerm.toString() : null;
     }
 
     @Override
@@ -981,11 +1061,30 @@
     @Override
     public void unsetOpt(Option option) {
         options.put(option, Boolean.FALSE);
     }
 
+    @Override
+    public void addCommandsInBuffer(Collection<String> commands) {
+        commandsBuffer.addAll(commands);
+    }
 
+    @Override
+    public void editAndAddInBuffer(File file) throws Exception {
+        Constructor<?> ctor = Class.forName("org.jline.builtins.Nano").getConstructor(Terminal.class, File.class);
+        Editor editor = (Editor) ctor.newInstance(terminal, new File(file.getParent()));
+        editor.setRestricted(true);
+        editor.open(Arrays.asList(file.getName()));
+        editor.run();
+        BufferedReader br = new BufferedReader(new FileReader(file));
+        String line;
+        commandsBuffer.clear();
+        while ((line = br.readLine()) != null) {
+            commandsBuffer.add(line);
+        }
+        br.close();
+    }
 
     //
     // Widget implementation
     //
 
@@ -993,11 +1092,14 @@
      * Clear the buffer and add its contents to the history.
      *
      * @return the former contents of the buffer.
      */
     protected String finishBuffer() {
-        String str = buf.toString();
+        return finish(buf.toString());
+    }
+
+    protected String finish(String str) {
         String historyLine = str;
 
         if (!isSet(Option.DISABLE_EVENT_EXPANSION)) {
             StringBuilder sb = new StringBuilder();
             boolean escaped = false;
@@ -1027,18 +1129,20 @@
         }
         return str;
     }
 
     protected void handleSignal(Signal signal) {
+        doAutosuggestion = false;
         if (signal == Signal.WINCH) {
             Status status = Status.getStatus(terminal, false);
             if (status != null) {
                 status.hardReset();
             }
             size.copy(terminal.getBufferSize());
             display.resize(size.getRows(), size.getColumns());
-            redrawLine();
+            // restores prompt but also prevents scrolling in consoleZ, see #492
+            // redrawLine();
             redisplay();
         }
         else if (signal == Signal.CONT) {
             terminal.enterRawMode();
             size.copy(terminal.getBufferSize());
@@ -2070,25 +2174,47 @@
     protected boolean insertClose(String s) {
         putString(s);
 
         long blink = getLong(BLINK_MATCHING_PAREN, DEFAULT_BLINK_MATCHING_PAREN);
         if (blink <= 0) {
+            removeIndentation();
             return true;
         }
 
         int closePosition = buf.cursor();
 
         buf.move(-1);
         doViMatchBracket();
         redisplay();
 
         peekCharacter(blink);
-
+        int blinkPosition = buf.cursor();
         buf.cursor(closePosition);
+
+        if (blinkPosition != closePosition - 1) {
+            removeIndentation();
+        }
         return true;
     }
 
+    private void removeIndentation() {
+        int indent = getInt(INDENTATION, DEFAULT_INDENTATION);
+        if (indent > 0) {
+            buf.move(-1);
+            for (int i = 0; i < indent; i++) {
+                buf.move(-1);
+                if (buf.currChar() == ' ') {
+                    buf.delete();
+                } else {
+                    buf.move(1);
+                    break;
+                }
+            }
+            buf.move(1);
+        }
+    }
+
     protected boolean viMatchBracket() {
         return doViMatchBracket();
     }
 
     protected boolean undefinedKey() {
@@ -2422,10 +2548,11 @@
 
     protected void doCleanup(boolean nl) {
         buf.cursor(buf.length());
         post = null;
         if (size.getColumns() > 0 || size.getRows() > 0) {
+            doAutosuggestion = false;
             redisplay(false);
             if (nl) {
                 println();
             }
             terminal.puts(Capability.keypad_local);
@@ -2833,10 +2960,11 @@
         return nextCommandFromHistory;
     }
 
     protected boolean acceptLine() {
         parsedLine = null;
+        int curPos = 0;
         if (!isSet(Option.DISABLE_EVENT_EXPANSION)) {
             try {
                 String str = buf.toString();
                 String exp = expander.expandHistory(history, str);
                 if (!exp.equals(str)) {
@@ -2849,22 +2977,39 @@
             } catch (IllegalArgumentException e) {
                 // Ignore
             }
         }
         try {
+            curPos = buf.cursor();
             parsedLine = parser.parse(buf.toString(), buf.cursor(), ParseContext.ACCEPT_LINE);
         } catch (EOFError e) {
-            buf.write("\n");
+            StringBuilder sb = new StringBuilder("\n");
+            indention(e.getOpenBrackets(), sb);
+            int curMove = sb.length();
+            if (isSet(Option.INSERT_BRACKET) && e.getOpenBrackets() > 1 && e.getNextClosingBracket() != null) {
+                sb.append('\n');
+                indention(e.getOpenBrackets() - 1, sb);
+                sb.append(e.getNextClosingBracket());
+            }
+            buf.write(sb.toString());
+            buf.cursor(curPos + curMove);
             return true;
         } catch (SyntaxError e) {
             // do nothing
         }
         callWidget(CALLBACK_FINISH);
         state = State.DONE;
         return true;
     }
 
+    void indention(int nb, StringBuilder sb) {
+        int indent = getInt(INDENTATION, DEFAULT_INDENTATION)*nb;
+        for (int i = 0; i < indent; i++) {
+            sb.append(' ');
+        }
+    }
+
     protected boolean selfInsert() {
         for (int count = this.count; count > 0; count--) {
             putString(getLastBinding());
         }
         return true;
@@ -3462,10 +3607,31 @@
             return sb.toAttributedString();
         };
         return true;
     }
 
+    protected boolean editAndExecute() {
+        boolean out = true;
+        File file = null;
+        try {
+            file = File.createTempFile("jline-execute-", null);
+            FileWriter writer = new FileWriter(file);
+            writer.write(buf.toString());
+            writer.close();
+            editAndAddInBuffer(file);
+        } catch (Exception e) {
+            e.printStackTrace(terminal.writer());
+            out = false;
+        } finally {
+            state = State.IGNORE;
+            if (file != null && file.exists()) {
+                file.delete();
+            }
+        }
+        return out;
+    }
+
     protected Map<String, Widget> builtinWidgets() {
         Map<String, Widget> widgets = new HashMap<>();
         addBuiltinWidget(widgets, ACCEPT_AND_INFER_NEXT_HISTORY, this::acceptAndInferNextHistory);
         addBuiltinWidget(widgets, ACCEPT_AND_HOLD, this::acceptAndHold);
         addBuiltinWidget(widgets, ACCEPT_LINE, this::acceptLine);
@@ -3497,10 +3663,11 @@
         addBuiltinWidget(widgets, DOWN_CASE_WORD, this::downCaseWord);
         addBuiltinWidget(widgets, DOWN_LINE, this::downLine);
         addBuiltinWidget(widgets, DOWN_LINE_OR_HISTORY, this::downLineOrHistory);
         addBuiltinWidget(widgets, DOWN_LINE_OR_SEARCH, this::downLineOrSearch);
         addBuiltinWidget(widgets, DOWN_HISTORY, this::downHistory);
+        addBuiltinWidget(widgets, EDIT_AND_EXECUTE_COMMAND, this::editAndExecute);
         addBuiltinWidget(widgets, EMACS_EDITING_MODE, this::emacsEditingMode);
         addBuiltinWidget(widgets, EMACS_BACKWARD_WORD, this::emacsBackwardWord);
         addBuiltinWidget(widgets, EMACS_FORWARD_WORD, this::emacsForwardWord);
         addBuiltinWidget(widgets, END_OF_BUFFER_OR_HISTORY, this::endOfBufferOrHistory);
         addBuiltinWidget(widgets, END_OF_HISTORY, this::endOfHistory);
@@ -3614,11 +3781,11 @@
         addBuiltinWidget(widgets, FOCUS_OUT, this::focusOut);
         return widgets;
     }
 
     private void addBuiltinWidget(Map<String, Widget> widgets, String name, Widget widget) {
-        widgets.put(name, namedWidget(name, widget));
+        widgets.put(name, namedWidget("." + name, widget));
     }
 
     private Widget namedWidget(String name, Widget widget) {
         return new Widget() {
             @Override
@@ -3789,10 +3956,42 @@
             }
         }
         sb.append(lines.get(lines.size() - 1));
     }
 
+    private String matchPreviousCommand(String buffer) {
+        if (buffer.length() == 0) {
+            return "";
+        }
+        History history = getHistory();
+        StringBuilder sb = new StringBuilder();
+        char prev = '0';
+        for (char c: buffer.toCharArray()) {
+            if ((c == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c == '}' || c == '^') && prev != '\\' ) {
+                sb.append('\\');
+            }
+            sb.append(c);
+            prev = c;
+        }
+        Pattern pattern = Pattern.compile(sb.toString() + ".*", Pattern.DOTALL);
+        Iterator<History.Entry> iter = history.reverseIterator(history.last());
+        String suggestion = "";
+        int tot = 0;
+        while (iter.hasNext()) {
+            History.Entry entry = iter.next();
+            Matcher matcher = pattern.matcher(entry.line());
+            if (matcher.matches()) {
+                suggestion = entry.line().substring(buffer.length());
+                break;
+            } else if (tot > 200) {
+                break;
+            }
+            tot++;
+        }
+        return suggestion;
+    }
+
     /**
      * Compute the full string to be displayed with the left, right and secondary prompts
      * @param secondaryPrompts a list to store the secondary prompts
      * @return the displayed string including the buffer, left prompts and the help below
      */
@@ -3801,22 +4000,64 @@
 
         AttributedString tNewBuf = insertSecondaryPrompts(attBuf, secondaryPrompts);
         AttributedStringBuilder full = new AttributedStringBuilder().tabs(TAB_WIDTH);
         full.append(prompt);
         full.append(tNewBuf);
+        if (doAutosuggestion) {
+            String lastBinding = getLastBinding() != null ? getLastBinding() : "";
+            if (autosuggestion == SuggestionType.HISTORY) {
+                AttributedStringBuilder sb = new AttributedStringBuilder();
+                tailTip = matchPreviousCommand(buf.toString());
+                sb.styled(AttributedStyle::faint, tailTip);
+                full.append(sb.toAttributedString());
+            } else if (autosuggestion == SuggestionType.COMPLETER) {
+                if (buf.length() > 0 && buf.length() == buf.cursor()
+                    && (!lastBinding.equals("\t") || buf.prevChar() == ' ' || buf.prevChar() == '=')) {
+                    clearChoices();
+                    listChoices(true);
+                } else if (!lastBinding.equals("\t")) {
+                    clearChoices();
+                }
+            } else if (autosuggestion == SuggestionType.TAIL_TIP) {
+                if (buf.length() == buf.cursor()) {
+                    if (!lastBinding.equals("\t") || buf.prevChar() == ' ') {
+                        clearChoices();
+                    }
+                    AttributedStringBuilder sb = new AttributedStringBuilder();
+                    if (buf.prevChar() != ' ') {
+                        if (!tailTip.startsWith("[")) {
+                            int idx = tailTip.indexOf(' ');
+                            int idb = buf.toString().lastIndexOf(' ');
+                            int idd = buf.toString().lastIndexOf('-');
+                            if (idx > 0 && ((idb == -1 && idb == idd) || (idb >= 0 && idb > idd))) {
+                                tailTip = tailTip.substring(idx);
+                            } else if (idb >= 0 && idb < idd) {
+                                sb.append(" ");
+                            }
+                        } else {
+                            sb.append(" ");
+                        }
+                    }
+                    sb.styled(AttributedStyle::faint, tailTip);
+                    full.append(sb.toAttributedString());
+                }
+            }
+        }
         if (post != null) {
             full.append("\n");
             full.append(post.get());
         }
+        doAutosuggestion = true;
         return full.toAttributedString();
     }
 
     private AttributedString getHighlightedBuffer(String buffer) {
         if (maskingCallback != null) {
             buffer = maskingCallback.display(buffer);
         }
-        if (highlighter != null && !isSet(Option.DISABLE_HIGHLIGHTER)) {
+        if (highlighter != null && !isSet(Option.DISABLE_HIGHLIGHTER)
+                && buffer.length() < getInt(FEATURES_MAX_BUFFER_SIZE, DEFAULT_FEATURES_MAX_BUFFER_SIZE)) {
             return highlighter.highlight(this, buffer);
         }
         return new AttributedString(buffer);
     }
 
@@ -3934,11 +4175,12 @@
     private AttributedString insertSecondaryPrompts(AttributedString strAtt, List<AttributedString> prompts, boolean computePrompts) {
         Objects.requireNonNull(prompts);
         List<AttributedString> lines = strAtt.columnSplitLength(Integer.MAX_VALUE);
         AttributedStringBuilder sb = new AttributedStringBuilder();
         String secondaryPromptPattern = getString(SECONDARY_PROMPT_PATTERN, DEFAULT_SECONDARY_PROMPT_PATTERN);
-        boolean needsMessage = secondaryPromptPattern.contains("%M");
+        boolean needsMessage = secondaryPromptPattern.contains("%M")
+                && strAtt.length() < getInt(FEATURES_MAX_BUFFER_SIZE, DEFAULT_FEATURES_MAX_BUFFER_SIZE);
         AttributedStringBuilder buf = new AttributedStringBuilder();
         int width = 0;
         List<String> missings = new ArrayList<>();
         if (computePrompts && secondaryPromptPattern.contains("%P")) {
             width = prompt.columnLength();
@@ -4100,11 +4342,15 @@
             return doComplete(CompletionType.Complete, isSet(Option.MENU_COMPLETE), true);
         }
     }
 
     protected boolean listChoices() {
-        return doComplete(CompletionType.List, isSet(Option.MENU_COMPLETE), false);
+        return listChoices(false);
+    }
+
+    private boolean listChoices(boolean forSuggestion) {
+        return doComplete(CompletionType.List, isSet(Option.MENU_COMPLETE), false, forSuggestion);
     }
 
     protected boolean deleteCharOrList() {
         if (buf.cursor() != buf.length() || buf.length() == 0) {
             return deleteChar();
@@ -4112,10 +4358,14 @@
             return doComplete(CompletionType.List, isSet(Option.MENU_COMPLETE), false);
         }
     }
 
     protected boolean doComplete(CompletionType lst, boolean useMenu, boolean prefix) {
+        return doComplete(lst, useMenu, prefix, false);
+    }
+
+    protected boolean doComplete(CompletionType lst, boolean useMenu, boolean prefix, boolean forSuggestion) {
         // If completion is disabled, just bail out
         if (getBoolean(DISABLE_COMPLETION, false)) {
             return true;
         }
         // Try to expand history first
@@ -4210,15 +4460,21 @@
             );
             exact = s -> caseInsensitive ? s.equalsIgnoreCase(wd) : s.equals(wd);
         } else {
             String wd = line.word();
             String wdi = caseInsensitive ? wd.toLowerCase() : wd;
-            matchers = Arrays.asList(
-                    simpleMatcher(s -> (caseInsensitive ? s.toLowerCase() : s).startsWith(wdi)),
-                    simpleMatcher(s -> (caseInsensitive ? s.toLowerCase() : s).contains(wdi)),
-                    typoMatcher(wdi, errors, caseInsensitive)
-            );
+            if (isSet(Option.EMPTY_WORD_OPTIONS) || wd.length() > 0) {
+                matchers = Arrays.asList(
+                        simpleMatcher(s -> (caseInsensitive ? s.toLowerCase() : s).startsWith(wdi)),
+                        simpleMatcher(s -> (caseInsensitive ? s.toLowerCase() : s).contains(wdi)),
+                        typoMatcher(wdi, errors, caseInsensitive)
+                );
+            } else {
+                matchers = Arrays.asList(
+                        simpleMatcher(s -> !s.startsWith("-"))
+                );
+            }
             exact = s -> caseInsensitive ? s.equalsIgnoreCase(wd) : s.equals(wd);
         }
         // Find matching candidates
         Map<String, List<Candidate>> matching = Collections.emptyMap();
         for (Function<Map<String, List<Candidate>>,
@@ -4238,11 +4494,11 @@
             // If we only need to display the list, do it now
             if (lst == CompletionType.List) {
                 List<Candidate> possible = matching.entrySet().stream()
                         .flatMap(e -> e.getValue().stream())
                         .collect(Collectors.toList());
-                doList(possible, line.word(), false, line::escape);
+                doList(possible, line.word(), false, line::escape, forSuggestion);
                 return !possible.isEmpty();
             }
 
             // Check if there's a single possible match
             Candidate completion = null;
@@ -4321,10 +4577,11 @@
             boolean hasUnambiguous = commonPrefix.startsWith(current) && !commonPrefix.equals(current);
 
             if (hasUnambiguous) {
                 buf.backspace(line.rawWordLength());
                 buf.write(line.escape(commonPrefix, false));
+                callWidget(REDISPLAY);
                 current = commonPrefix;
                 if ((!isSet(Option.AUTO_LIST) && isSet(Option.AUTO_MENU))
                         || (isSet(Option.AUTO_LIST) && isSet(Option.LIST_AMBIGUOUS))) {
                     if (!nextBindingIsComplete()) {
                         return true;
@@ -4385,11 +4642,10 @@
     protected Comparator<Candidate> getCandidateComparator(boolean caseInsensitive, String word) {
         String wdi = caseInsensitive ? word.toLowerCase() : word;
         ToIntFunction<String> wordDistance = w -> distance(wdi, caseInsensitive ? w.toLowerCase() : w);
         return Comparator
                 .comparing(Candidate::value, Comparator.comparingInt(wordDistance))
-                .thenComparing(Candidate::value, Comparator.comparingInt(String::length))
                 .thenComparing(Comparator.naturalOrder());
     }
 
     protected String getOthersGroupName() {
         return getString(OTHERS_GROUP_NAME, DEFAULT_OTHERS_GROUP_NAME);
@@ -4594,12 +4850,14 @@
 
             // Compute displayed prompt
             PostResult pr = computePost(possible, completion(), null, completed);
             AttributedString text = insertSecondaryPrompts(AttributedStringBuilder.append(prompt, buf.toString()), new ArrayList<>());
             int promptLines = text.columnSplitLength(size.getColumns(), false, display.delayLineWrap()).size();
-            if (pr.lines > size.getRows() - promptLines) {
-                int displayed = size.getRows() - promptLines - 1;
+            Status status = Status.getStatus(terminal, false);
+            int displaySize = size.getRows() - (status != null ? status.size() : 0) - promptLines;
+            if (pr.lines > displaySize) {
+                int displayed = displaySize - 1;
                 if (pr.selectedLine >= 0) {
                     if (pr.selectedLine < topLine) {
                         topLine = pr.selectedLine;
                     } else if (pr.selectedLine >= topLine + displayed) {
                         topLine = pr.selectedLine - displayed + 1;
@@ -4646,11 +4904,11 @@
         computePost(original, null, possible, completed);
 
         // Build menu support
         MenuSupport menuSupport = new MenuSupport(original, completed, escaper);
         post = menuSupport;
-        redisplay();
+        callWidget(REDISPLAY);
 
         // Loop
         KeyMap<Binding> keyMap = keyMaps.get(MENU);
         Binding operation;
         while ((operation = readBinding(getKeys(), keyMap)) != null) {
@@ -4702,16 +4960,28 @@
                     }
                     post = null;
                     return true;
                 }
             }
-            redisplay();
+            doAutosuggestion = false;
+            callWidget(REDISPLAY);
         }
         return false;
     }
 
-    protected boolean doList(List<Candidate> possible, String completed, boolean runLoop, BiFunction<CharSequence, Boolean, CharSequence> escaper) {
+    protected boolean clearChoices() {
+        return doList(new ArrayList<Candidate>(), "", false, null, false);
+    }
+
+    protected boolean doList(List<Candidate> possible
+                           , String completed, boolean runLoop, BiFunction<CharSequence, Boolean, CharSequence> escaper) {
+        return doList(possible, completed, runLoop, escaper, false);
+    }
+
+    protected boolean doList(List<Candidate> possible
+                           , String completed
+                           , boolean runLoop, BiFunction<CharSequence, Boolean, CharSequence> escaper, boolean forSuggestion) {
         // If we list only and if there's a big
         // number of items, we should ask the user
         // for confirmation, display the list
         // and redraw the line at the bottom
         mergeCandidates(possible);
@@ -4720,17 +4990,21 @@
         PostResult postResult = computePost(possible, null, null, completed);
         int lines = postResult.lines;
         int listMax = getInt(LIST_MAX, DEFAULT_LIST_MAX);
         if (listMax > 0 && possible.size() >= listMax
                 || lines >= size.getRows() - promptLines) {
-            // prompt
-            post = () -> new AttributedString(getAppName() + ": do you wish to see all " + possible.size()
-                    + " possibilities (" + lines + " lines)?");
-            redisplay(true);
-            int c = readCharacter();
-            if (c != 'y' && c != 'Y' && c != '\t') {
-                post = null;
+            if (!forSuggestion) {
+                // prompt
+                post = () -> new AttributedString(getAppName() + ": do you wish to see all " + possible.size()
+                        + " possibilities (" + lines + " lines)?");
+                redisplay(true);
+                int c = readCharacter();
+                if (c != 'y' && c != 'Y' && c != '\t') {
+                    post = null;
+                    return false;
+                }
+            } else {
                 return false;
             }
         }
 
         boolean caseInsensitive = isSet(Option.CASE_INSENSITIVE);
@@ -4787,11 +5061,11 @@
                         sb.setLength(sb.length() - 1);
                         buf.backspace();
                     }
                 } else if (SELF_INSERT.equals(name)) {
                     sb.append(getLastBinding());
-                    buf.write(getLastBinding());
+                    callWidget(name);
                     if (cands.isEmpty()) {
                         post = null;
                         return false;
                     }
                 } else if ("\t".equals(getLastBinding())) {
@@ -5368,32 +5642,14 @@
         }
         return true;
     }
 
     public boolean beginPaste() {
-        final Object SELF_INSERT = new Object();
-        final Object END_PASTE = new Object();
-        KeyMap<Object> keyMap = new KeyMap<>();
-        keyMap.setUnicode(SELF_INSERT);
-        keyMap.setNomatch(SELF_INSERT);
-        keyMap.setAmbiguousTimeout(0);
-        keyMap.bind(END_PASTE, BRACKETED_PASTE_END);
-        StringBuilder sb = new StringBuilder();
-        while (true) {
-            Object b = doReadBinding(keyMap, null);
-            if (b == END_PASTE) {
-                break;
-            }
-            String s = getLastBinding();
-            if ("\r".equals(s)) {
-                s = "\n";
-            }
-            sb.append(s);
-        }
+        String str = doReadStringUntil(BRACKETED_PASTE_END);
         regionActive = RegionType.PASTE;
         regionMark = getBuffer().cursor();
-        getBuffer().write(sb);
+        getBuffer().write(str.replace('\r', '\n'));
         return true;
     }
 
     public boolean focusIn() {
         return false;
@@ -5585,10 +5841,11 @@
         bind(emacs, INSERT_CLOSE_SQUARE,                    "]");
         bind(emacs, INSERT_CLOSE_CURLY,                     "}");
         bind(emacs, BACKWARD_DELETE_CHAR,                   del());
         bind(emacs, VI_MATCH_BRACKET,                       translate("^X^B"));
         bind(emacs, SEND_BREAK,                             translate("^X^G"));
+        bind(emacs, EDIT_AND_EXECUTE_COMMAND,               translate("^X^E"));
         bind(emacs, VI_FIND_NEXT_CHAR,                      translate("^X^F"));
         bind(emacs, VI_JOIN,                                translate("^X^J"));
         bind(emacs, KILL_BUFFER,                            translate("^X^K"));
         bind(emacs, INFER_NEXT_HISTORY,                     translate("^X^N"));
         bind(emacs, OVERWRITE_MODE,                         translate("^X^O"));
@@ -5885,7 +6142,6 @@
             bind(keyMap, SELF_INSERT, prevBinding);
             keyMap.bind(ref, Character.toString(newBinding));
         }
     }
 
-
 }
