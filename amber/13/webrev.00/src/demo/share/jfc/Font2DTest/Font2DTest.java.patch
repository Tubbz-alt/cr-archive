diff a/src/demo/share/jfc/Font2DTest/Font2DTest.java b/src/demo/share/jfc/Font2DTest/Font2DTest.java
--- a/src/demo/share/jfc/Font2DTest/Font2DTest.java
+++ b/src/demo/share/jfc/Font2DTest/Font2DTest.java
@@ -65,11 +65,10 @@
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
-import java.util.EnumSet;
 import java.util.StringTokenizer;
 import java.util.BitSet;
 import javax.swing.*;
 import javax.swing.event.*;
 
@@ -99,12 +98,12 @@
     private final ChoiceV2 textMenu;
     private int currentTextChoice = 0;
     private final ChoiceV2 transformMenu;
     private final ChoiceV2 transformMenuG2;
     private final ChoiceV2 methodsMenu;
-    private final JComboBox antiAliasMenu;
-    private final JComboBox fracMetricsMenu;
+    private final JComboBox<FontPanel.AAValues> antiAliasMenu;
+    private final JComboBox<FontPanel.FMValues> fracMetricsMenu;
 
     private final JSlider contrastSlider;
 
     /// CheckboxMenuItems
     private CheckboxMenuItemV2 displayGridCBMI;
@@ -149,14 +148,14 @@
         transformMenu = new ChoiceV2( this );
         transformMenuG2 = new ChoiceV2( this );
         methodsMenu = new ChoiceV2( this );
 
         antiAliasMenu =
-            new JComboBox(EnumSet.allOf(FontPanel.AAValues.class).toArray());
+            new JComboBox<>(FontPanel.AAValues.values());
         antiAliasMenu.addActionListener(this);
         fracMetricsMenu =
-            new JComboBox(EnumSet.allOf(FontPanel.FMValues.class).toArray());
+            new JComboBox<>(FontPanel.FMValues.values());
         fracMetricsMenu.addActionListener(this);
 
         contrastSlider = new JSlider(JSlider.HORIZONTAL, 100, 250,
                                  FontPanel.getDefaultLCDContrast().intValue());
         contrastSlider.setEnabled(false);
@@ -357,11 +356,11 @@
         userTextDialog.getContentPane().add( "Center", userTextAreaSP );
         userTextDialog.getContentPane().add( "South", dialogBottomPanel );
         userTextDialog.pack();
         userTextDialog.addWindowListener( new WindowAdapter() {
             public void windowClosing( WindowEvent e ) {
-                userTextDialog.hide();
+                userTextDialog.setVisible(false);
             }
         });
 
         /// Prepare printing dialog...
         printCBGroup = new ButtonGroup();
@@ -383,11 +382,11 @@
 
         printDialog = new JDialog( parent, "Print...", true );
         printDialog.setResizable( false );
         printDialog.addWindowListener( new WindowAdapter() {
             public void windowClosing( WindowEvent e ) {
-                printDialog.hide();
+                printDialog.setVisible(false);
             }
         });
         printDialog.getContentPane().setLayout( new GridLayout( printModeCBs.length + 2, 1 ));
         printDialog.getContentPane().add( l );
         for ( int i = 0; i < printModeCBs.length; i++ ) {
@@ -400,11 +399,11 @@
         /// Prepare font information dialog...
         fontInfoDialog = new JDialog( parent, "Font info", false );
         fontInfoDialog.setResizable( false );
         fontInfoDialog.addWindowListener( new WindowAdapter() {
             public void windowClosing( WindowEvent e ) {
-                fontInfoDialog.hide();
+                fontInfoDialog.setVisible(false);
                 showFontInfoCBMI.setState( false );
             }
         });
         JPanel fontInfoPanel = new JPanel();
         fontInfoPanel.setLayout( new GridLayout( fontInfos.length, 1 ));
@@ -465,11 +464,11 @@
         }
 
         int style = fontStyles[styleMenu.getSelectedIndex()];
         Font f;
         for (int i = 0; i < listCount; i++) {
-            String fontName = (String)fontMenu.getItemAt(i);
+            String fontName = fontMenu.getItemAt(i);
             f = new Font(fontName, style, size);
             if ((rm.getSelectedIndex() != RangeMenu.SURROGATES_AREA_INDEX) &&
                 canDisplayRange(f, rangeStart, rangeEnd)) {
                 fontMenu.setBit(i, true);
             }
@@ -671,13 +670,13 @@
     private void updateGUI() {
         int selectedText = textMenu.getSelectedIndex();
 
         /// Set the visibility of User Text dialog
         if ( selectedText == fp.USER_TEXT )
-          userTextDialog.show();
+          userTextDialog.setVisible(true);
         else
-          userTextDialog.hide();
+          userTextDialog.setVisible(false);
         /// Change the visibility/status/availability of Print JDialog buttons
         printModeCBs[ fp.ONE_PAGE ].setSelected( true );
         if ( selectedText == fp.FILE_TEXT || selectedText == fp.USER_TEXT ) {
             /// ABP
             /// update methodsMenu to show that TextLayout.draw is being used
@@ -791,14 +790,14 @@
                             textToUseOpt, drawMethodOpt,
                             antialiasOpt, fractionalOpt,
                             lcdContrast, userTextOpt );
             if ( showFontInfoOpt ) {
                 fireUpdateFontInfo();
-                fontInfoDialog.show();
+                fontInfoDialog.setVisible(true);
             }
             else
-              fontInfoDialog.hide();
+              fontInfoDialog.setVisible(false);
         }
         catch ( Exception ex ) {
             fireChangeStatus( "ERROR: Failed to Load Options File; See Stack Trace", true );
             ex.printStackTrace();
         }
@@ -817,11 +816,11 @@
                 public void windowClosing( WindowEvent e ) {
                     ( (JFrame) e.getSource() ).dispose();
                 }
             });
             f.pack();
-            f.show();
+            f.setVisible(true);
         }
         catch ( Exception ex ) {
             fireChangeStatus( "ERROR: Failed to Load PNG File; See Stack Trace", true );
             ex.printStackTrace();
         }
@@ -859,11 +858,11 @@
                   loadComparisonPNG( fileName );
             }
             else if ( itemName.equals( "Page Setup..." ))
               fp.doPageSetup();
             else if ( itemName.equals( "Print..." ))
-              printDialog.show();
+              printDialog.setVisible(true);
             else if ( itemName.equals( "Close" ))
               parent.dispose();
             else if ( itemName.equals( "Exit" ))
               System.exit(0);
         }
@@ -891,23 +890,23 @@
             String itemName = ( (JButton) source ).getText();
             /// Print dialog buttons...
             if ( itemName.equals( "Print" )) {
                 for ( int i = 0; i < printModeCBs.length; i++ )
                   if ( printModeCBs[i].isSelected() ) {
-                      printDialog.hide();
+                      printDialog.setVisible(false);
                       fp.doPrint( i );
                   }
             }
             else if ( itemName.equals( "Cancel" ))
-              printDialog.hide();
+              printDialog.setVisible(false);
             /// Update button from Usert Text JDialog...
             else if ( itemName.equals( "Update" ))
               fp.setTextToDraw( fp.USER_TEXT, null,
                                 parseUserText( userTextArea.getText() ), null );
         }
         else if ( source instanceof JComboBox ) {
-            JComboBox c = (JComboBox) source;
+            JComboBox<?> c = (JComboBox<?>) source;
 
             /// RangeMenu handles actions by itself and then calls fireRangeChanged,
             /// so it is not listed or handled here
             if ( c == fontMenu || c == styleMenu || c == transformMenu ) {
                 float sz = 12f;
@@ -994,14 +993,14 @@
             else if ( cbmi == force16ColsCBMI )
               fp.setForce16Columns( force16ColsCBMI.getState() );
             else if ( cbmi == showFontInfoCBMI ) {
                 if ( showFontInfoCBMI.getState() ) {
                     fireUpdateFontInfo();
-                    fontInfoDialog.show();
+                    fontInfoDialog.setVisible(true);
                 }
                 else
-                  fontInfoDialog.hide();
+                  fontInfoDialog.setVisible(false);
             }
         }
     }
 
     private static void printUsage() {
@@ -1037,11 +1036,11 @@
             public void windowClosing( WindowEvent e ) { System.exit(0); }
         });
 
         f.getContentPane().add( f2dt );
         f.pack();
-        f.show();
+        f.setVisible(true);
     }
 
     /// Inner class definitions...
 
     /// Class to display just an image file
@@ -1068,11 +1067,11 @@
             super( name );
             this.addActionListener( al );
         }
     }
 
-    private final class ChoiceV2 extends JComboBox {
+    private final class ChoiceV2 extends JComboBox<String> {
 
         private BitSet bitSet = null;
 
         public ChoiceV2() {;}
 
@@ -1139,11 +1138,11 @@
             yesImage = new ImageIcon(yes);
             blankImage = new ImageIcon(blank);
             this.choice = choice;
         }
 
-        public Component getListCellRendererComponent(JList list,
+        public Component getListCellRendererComponent(JList<?> list,
                                                       Object value,
                                                       int index,
                                                       boolean isSelected,
                                                       boolean cellHasFocus) {
 
