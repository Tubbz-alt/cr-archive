diff a/src/java.base/macosx/classes/apple/security/KeychainStore.java b/src/java.base/macosx/classes/apple/security/KeychainStore.java
--- a/src/java.base/macosx/classes/apple/security/KeychainStore.java
+++ b/src/java.base/macosx/classes/apple/security/KeychainStore.java
@@ -125,11 +125,11 @@
      * its own integrity
      */
     public KeychainStore() { }
 
     /**
-        * Returns the key associated with the given alias, using the given
+     * Returns the key associated with the given alias, using the given
      * password to recover it.
      *
      * @param alias the alias name
      * @param password the password for recovering the key. This password is
      *        used internally as the key is exported in a PKCS12 format.
@@ -238,14 +238,14 @@
      * Returns the certificate chain associated with the given alias.
      *
      * @param alias the alias name
      *
      * @return the certificate chain (ordered with the user's certificate first
-                                      * and the root certificate authority last), or null if the given alias
+     * and the root certificate authority last), or null if the given alias
      * does not exist or does not contain a certificate chain (i.e., the given
-                                                               * alias identifies either a <i>trusted certificate entry</i> or a
-                                                               * <i>key entry</i> without a certificate chain).
+     * alias identifies either a <i>trusted certificate entry</i> or a
+     * <i>key entry</i> without a certificate chain).
      */
     public Certificate[] engineGetCertificateChain(String alias) {
         permissionCheck();
 
         Object entry = entries.get(alias.toLowerCase());
@@ -295,11 +295,11 @@
             return null;
         }
     }
 
     /**
-        * Returns the creation date of the entry identified by the given alias.
+     * Returns the creation date of the entry identified by the given alias.
      *
      * @param alias the alias name
      *
      * @return the creation date of this entry, or null if the given alias does
      * not exist
@@ -319,27 +319,27 @@
             return null;
         }
     }
 
     /**
-        * Assigns the given key to the given alias, protecting it with the given
+     * Assigns the given key to the given alias, protecting it with the given
      * password.
      *
      * <p>If the given key is of type <code>java.security.PrivateKey</code>,
      * it must be accompanied by a certificate chain certifying the
      * corresponding public key.
      *
      * <p>If the given alias already exists, the keystore information
      * associated with it is overridden by the given key (and possibly
-                                                          * certificate chain).
+     * certificate chain).
      *
      * @param alias the alias name
      * @param key the key to be associated with the alias
      * @param password the password to protect the key
      * @param chain the certificate chain for the corresponding public
      * key (only required if the given key is of type
-            * <code>java.security.PrivateKey</code>).
+     * <code>java.security.PrivateKey</code>).
      *
      * @exception KeyStoreException if the given key cannot be protected, or
      * this operation fails for some other reason
      */
     public void engineSetKeyEntry(String alias, Key key, char[] password,
@@ -389,11 +389,11 @@
             }
         }
     }
 
     /**
-        * Assigns the given key (that has already been protected) to the given
+     * Assigns the given key (that has already been protected) to the given
      * alias.
      *
      * <p>If the protected key is of type
      * <code>java.security.PrivateKey</code>, it must be accompanied by a
      * certificate chain certifying the corresponding public key. If the
@@ -401,17 +401,17 @@
      * <code>key</code> must be encoded as an
      * <code>EncryptedPrivateKeyInfo</code> as defined in the PKCS #8 standard.
      *
      * <p>If the given alias already exists, the keystore information
      * associated with it is overridden by the given key (and possibly
-                                                          * certificate chain).
+     * certificate chain).
      *
      * @param alias the alias name
      * @param key the key (in protected format) to be associated with the alias
      * @param chain the certificate chain for the corresponding public
      * key (only useful if the protected key is of type
-            * <code>java.security.PrivateKey</code>).
+     * <code>java.security.PrivateKey</code>).
      *
      * @exception KeyStoreException if this operation fails.
      */
     public void engineSetKeyEntry(String alias, byte[] key,
                                   Certificate[] chain)
@@ -447,11 +447,11 @@
             addedEntries.put(lowerAlias, entry);
         }
     }
 
     /**
-        * Assigns the given certificate to the given alias.
+     * Assigns the given certificate to the given alias.
      *
      * <p>If the given alias already exists in this keystore and identifies a
      * <i>trusted certificate entry</i>, the certificate associated with it is
      * overridden by the given certificate.
      *
@@ -499,11 +499,11 @@
             addedEntries.put(lowerAlias, trustedCertEntry);
         }
     }
 
     /**
-        * Deletes the entry identified by the given alias from this keystore.
+     * Deletes the entry identified by the given alias from this keystore.
      *
      * @param alias the alias name
      *
      * @exception KeyStoreException if the entry cannot be removed.
      */
@@ -517,21 +517,21 @@
             deletedEntries.put(alias.toLowerCase(), entry);
         }
     }
 
     /**
-        * Lists all the alias names of this keystore.
+     * Lists all the alias names of this keystore.
      *
      * @return enumeration of the alias names
      */
     public Enumeration<String> engineAliases() {
         permissionCheck();
         return entries.keys();
     }
 
     /**
-        * Checks if the given alias exists in this keystore.
+     * Checks if the given alias exists in this keystore.
      *
      * @param alias the alias name
      *
      * @return true if the alias exists, false otherwise
      */
@@ -539,21 +539,21 @@
         permissionCheck();
         return entries.containsKey(alias.toLowerCase());
     }
 
     /**
-        * Retrieves the number of entries in this keystore.
+     * Retrieves the number of entries in this keystore.
      *
      * @return the number of entries in this keystore
      */
     public int engineSize() {
         permissionCheck();
         return entries.size();
     }
 
     /**
-        * Returns true if the entry identified by the given alias is a
+     * Returns true if the entry identified by the given alias is a
      * <i>key entry</i>, and false otherwise.
      *
      * @return true if the entry identified by the given alias is a
      * <i>key entry</i>, false otherwise.
      */
@@ -566,11 +566,11 @@
             return false;
         }
     }
 
     /**
-        * Returns true if the entry identified by the given alias is a
+     * Returns true if the entry identified by the given alias is a
      * <i>trusted certificate entry</i>, and false otherwise.
      *
      * @return true if the entry identified by the given alias is a
      * <i>trusted certificate entry</i>, false otherwise.
      */
@@ -583,11 +583,11 @@
             return false;
         }
     }
 
     /**
-        * Returns the (alias) name of the first keystore entry whose certificate
+     * Returns the (alias) name of the first keystore entry whose certificate
      * matches the given certificate.
      *
      * <p>This method attempts to match the given certificate with each
      * keystore entry. If the entry being considered
      * is a <i>trusted certificate entry</i>, the given certificate is
@@ -622,11 +622,11 @@
         }
         return null;
     }
 
     /**
-        * Stores this keystore to the given output stream, and protects its
+     * Stores this keystore to the given output stream, and protects its
      * integrity with the given password.
      *
      * @param stream Ignored. the output stream to which this keystore is written.
      * @param password the password to generate the keystore integrity check
      *
@@ -716,11 +716,11 @@
     private native long _addItemToKeychain(String alias, boolean isCertificate, byte[] datablob, char[] password);
     private native int _removeItemFromKeychain(long certRef);
     private native void _releaseKeychainItemRef(long keychainItemRef);
 
     /**
-      * Loads the keystore from the Keychain.
+     * Loads the keystore from the Keychain.
      *
      * @param stream Ignored - here for API compatibility.
      * @param password Ignored - if user needs to unlock keychain Security
      * framework will post any dialogs.
      *
@@ -916,11 +916,11 @@
         if (version != 3) {
             throw new IOException("PKCS12 keystore not in version 3 format");
         }
 
         /*
-            * Read the authSafe.
+         * Read the authSafe.
          */
         byte[] authSafeData;
         ContentInfo authSafe = new ContentInfo(s);
         ObjectIdentifier contentType = authSafe.getContentType();
 
@@ -1001,11 +1001,11 @@
 
         return returnValue;
     }
 
     /*
-        * Generate PBE Algorithm Parameters
+     * Generate PBE Algorithm Parameters
      */
     private AlgorithmParameters getAlgorithmParameters(String algorithm)
         throws IOException
     {
         AlgorithmParameters algParams = null;
