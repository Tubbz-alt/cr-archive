diff a/src/java.base/share/classes/sun/reflect/generics/repository/ClassRepository.java b/src/java.base/share/classes/sun/reflect/generics/repository/ClassRepository.java
--- a/src/java.base/share/classes/sun/reflect/generics/repository/ClassRepository.java
+++ b/src/java.base/share/classes/sun/reflect/generics/repository/ClassRepository.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -46,11 +46,11 @@
     private volatile Type superclass;
 
     /** The generic superinterface info.  Lazily initialized. */
     private volatile Type[] superInterfaces;
 
- // private, to enforce use of static factory
+    // private, to enforce use of static factory
     private ClassRepository(String rawSig, GenericsFactory f) {
         super(rawSig, f);
     }
 
     protected ClassSignature parse(String s) {
@@ -68,19 +68,19 @@
      */
     public static ClassRepository make(String rawSig, GenericsFactory f) {
         return new ClassRepository(rawSig, f);
     }
 
- /*
- * When queried for a particular piece of type information, the
- * general pattern is to consult the corresponding cached value.
- * If the corresponding field is non-null, it is returned.
- * If not, it is created lazily. This is done by selecting the appropriate
- * part of the tree and transforming it into a reflective object
- * using a visitor, which is created by feeding it the factory
- * with which the repository was created.
- */
+    /*
+     * When queried for a particular piece of type information, the
+     * general pattern is to consult the corresponding cached value.
+     * If the corresponding field is non-null, it is returned.
+     * If not, it is created lazily. This is done by selecting the appropriate
+     * part of the tree and transforming it into a reflective object
+     * using a visitor, which is created by feeding it the factory
+     * with which the repository was created.
+     */
 
     public Type getSuperclass() {
         Type value = superclass;
         if (value == null) {
             value = computeSuperclass();
