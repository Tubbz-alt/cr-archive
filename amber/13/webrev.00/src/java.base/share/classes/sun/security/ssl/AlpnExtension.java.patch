diff a/src/java.base/share/classes/sun/security/ssl/AlpnExtension.java b/src/java.base/share/classes/sun/security/ssl/AlpnExtension.java
--- a/src/java.base/share/classes/sun/security/ssl/AlpnExtension.java
+++ b/src/java.base/share/classes/sun/security/ssl/AlpnExtension.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -70,33 +70,37 @@
         private AlpnSpec(String[] applicationProtocols) {
             this.applicationProtocols = Collections.unmodifiableList(
                     Arrays.asList(applicationProtocols));
         }
 
-        private AlpnSpec(ByteBuffer buffer) throws IOException {
+        private AlpnSpec(HandshakeContext hc,
+                ByteBuffer buffer) throws IOException {
             // ProtocolName protocol_name_list<2..2^16-1>, RFC 7301.
             if (buffer.remaining() < 2) {
-                throw new SSLProtocolException(
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
                     "Invalid application_layer_protocol_negotiation: " +
-                    "insufficient data (length=" + buffer.remaining() + ")");
+                    "insufficient data (length=" + buffer.remaining() + ")"));
             }
 
             int listLen = Record.getInt16(buffer);
             if (listLen < 2 || listLen != buffer.remaining()) {
-                throw new SSLProtocolException(
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
                     "Invalid application_layer_protocol_negotiation: " +
-                    "incorrect list length (length=" + listLen + ")");
+                    "incorrect list length (length=" + listLen + ")"));
             }
 
             List<String> protocolNames = new LinkedList<>();
             while (buffer.hasRemaining()) {
                 // opaque ProtocolName<1..2^8-1>, RFC 7301.
                 byte[] bytes = Record.getBytes8(buffer);
                 if (bytes.length == 0) {
-                    throw new SSLProtocolException(
+                    throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                            new SSLProtocolException(
                         "Invalid application_layer_protocol_negotiation " +
-                        "extension: empty application protocol name");
+                        "extension: empty application protocol name"));
                 }
 
                 String appProtocol = new String(bytes, StandardCharsets.UTF_8);
                 protocolNames.add(appProtocol);
             }
@@ -111,13 +115,13 @@
         }
     }
 
     private static final class AlpnStringizer implements SSLStringizer {
         @Override
-        public String toString(ByteBuffer buffer) {
+        public String toString(HandshakeContext hc, ByteBuffer buffer) {
             try {
-                return (new AlpnSpec(buffer)).toString();
+                return (new AlpnSpec(hc, buffer)).toString();
             } catch (IOException ioe) {
                 // For debug logging only, so please swallow exceptions.
                 return ioe.getMessage();
             }
         }
@@ -280,16 +284,11 @@
                 }
                 return;     // ignore the extension
             }
 
             // Parse the extension.
-            AlpnSpec spec;
-            try {
-                spec = new AlpnSpec(buffer);
-            } catch (IOException ioe) {
-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
+            AlpnSpec spec = new AlpnSpec(shc, buffer);
 
             // Update the context.
             if (noAPSelector) {     // noAlpnProtocols is false
                 List<String> protocolNames = spec.applicationProtocols;
                 boolean matched = false;
@@ -461,16 +460,11 @@
                 throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE,
                     "Unexpected " + SSLExtension.CH_ALPN.name + " extension");
             }
 
             // Parse the extension.
-            AlpnSpec spec;
-            try {
-                spec = new AlpnSpec(buffer);
-            } catch (IOException ioe) {
-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
+            AlpnSpec spec = new AlpnSpec(chc, buffer);
 
             // Only one application protocol is allowed.
             if (spec.applicationProtocols.size() != 1) {
                 throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE,
                     "Invalid " + SSLExtension.CH_ALPN.name + " extension: " +
