diff a/src/java.base/share/classes/sun/security/ssl/CookieExtension.java b/src/java.base/share/classes/sun/security/ssl/CookieExtension.java
--- a/src/java.base/share/classes/sun/security/ssl/CookieExtension.java
+++ b/src/java.base/share/classes/sun/security/ssl/CookieExtension.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -61,15 +61,17 @@
      * The "cookie" extension.
      */
     static class CookieSpec implements SSLExtensionSpec {
         final byte[] cookie;
 
-        private CookieSpec(ByteBuffer m) throws IOException {
+        private CookieSpec(HandshakeContext hc,
+                ByteBuffer m) throws IOException {
             // opaque cookie<1..2^16-1>;
             if (m.remaining() < 3) {
-                throw new SSLProtocolException(
-                    "Invalid cookie extension: insufficient data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid cookie extension: insufficient data"));
             }
 
             this.cookie = Record.getBytes16(m);
         }
 
@@ -88,13 +90,13 @@
         }
     }
 
     private static final class CookieStringizer implements SSLStringizer {
         @Override
-        public String toString(ByteBuffer buffer) {
+        public String toString(HandshakeContext hc, ByteBuffer buffer) {
             try {
-                return (new CookieSpec(buffer)).toString();
+                return (new CookieSpec(hc, buffer)).toString();
             } catch (IOException ioe) {
                 // For debug logging only, so please swallow exceptions.
                 return ioe.getMessage();
             }
         }
@@ -157,17 +159,11 @@
                             "Ignore unavailable cookie extension");
                 }
                 return;     // ignore the extension
             }
 
-            CookieSpec spec;
-            try {
-                spec = new CookieSpec(buffer);
-            } catch (IOException ioe) {
-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
-
+            CookieSpec spec = new CookieSpec(shc, buffer);
             shc.handshakeExtensions.put(SSLExtension.CH_COOKIE, spec);
 
             // No impact on session resumption.
             //
             // Note that the protocol version negotiation happens before the
@@ -262,17 +258,11 @@
                             "Ignore unavailable cookie extension");
                 }
                 return;     // ignore the extension
             }
 
-            CookieSpec spec;
-            try {
-                spec = new CookieSpec(buffer);
-            } catch (IOException ioe) {
-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
-
+            CookieSpec spec = new CookieSpec(chc, buffer);
             chc.handshakeExtensions.put(SSLExtension.HRR_COOKIE, spec);
         }
     }
 
     private static final
