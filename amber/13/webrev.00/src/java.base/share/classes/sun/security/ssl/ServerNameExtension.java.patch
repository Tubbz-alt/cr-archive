diff a/src/java.base/share/classes/sun/security/ssl/ServerNameExtension.java b/src/java.base/share/classes/sun/security/ssl/ServerNameExtension.java
--- a/src/java.base/share/classes/sun/security/ssl/ServerNameExtension.java
+++ b/src/java.base/share/classes/sun/security/ssl/ServerNameExtension.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -91,20 +91,23 @@
         private CHServerNamesSpec(List<SNIServerName> serverNames) {
             this.serverNames = Collections.<SNIServerName>unmodifiableList(
                     new ArrayList<>(serverNames));
         }
 
-        private CHServerNamesSpec(ByteBuffer buffer) throws IOException {
+        private CHServerNamesSpec(HandshakeContext hc,
+                ByteBuffer buffer) throws IOException {
             if (buffer.remaining() < 2) {
-                throw new SSLProtocolException(
-                    "Invalid server_name extension: insufficient data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid server_name extension: insufficient data"));
             }
 
             int sniLen = Record.getInt16(buffer);
             if ((sniLen == 0) || sniLen != buffer.remaining()) {
-                throw new SSLProtocolException(
-                    "Invalid server_name extension: incomplete data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid server_name extension: incomplete data"));
             }
 
             Map<Integer, SNIServerName> sniMap = new LinkedHashMap<>();
             while (buffer.hasRemaining()) {
                 int nameType = Record.getInt8(buffer);
@@ -119,12 +122,13 @@
                 // 16-bit length field.  TLS MAY treat provided server names as
                 // opaque data and pass the names and types to the application.
                 byte[] encoded = Record.getBytes16(buffer);
                 if (nameType == StandardConstants.SNI_HOST_NAME) {
                     if (encoded.length == 0) {
-                        throw new SSLProtocolException(
-                            "Empty HostName in server_name extension");
+                        throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                                new SSLProtocolException(
+                            "Empty HostName in server_name extension"));
                     }
 
                     try {
                         serverName = new SNIHostName(encoded);
                     } catch (IllegalArgumentException iae) {
@@ -132,29 +136,32 @@
                             "Illegal server name, type=host_name(" +
                             nameType + "), name=" +
                             (new String(encoded, StandardCharsets.UTF_8)) +
                             ", value={" +
                             Utilities.toHexString(encoded) + "}");
-                        throw (SSLProtocolException)spe.initCause(iae);
+                        throw hc.conContext.fatal(Alert.ILLEGAL_PARAMETER,
+                                (SSLProtocolException)spe.initCause(iae));
                     }
                 } else {
                     try {
                         serverName = new UnknownServerName(nameType, encoded);
                     } catch (IllegalArgumentException iae) {
                         SSLProtocolException spe = new SSLProtocolException(
                             "Illegal server name, type=(" + nameType +
                             "), value={" +
                             Utilities.toHexString(encoded) + "}");
-                        throw (SSLProtocolException)spe.initCause(iae);
+                        throw hc.conContext.fatal(Alert.ILLEGAL_PARAMETER,
+                                (SSLProtocolException)spe.initCause(iae));
                     }
                 }
 
                 // check for duplicated server name type
                 if (sniMap.put(serverName.getType(), serverName) != null) {
-                    throw new SSLProtocolException(
+                        throw hc.conContext.fatal(Alert.ILLEGAL_PARAMETER,
+                                new SSLProtocolException(
                             "Duplicated server name of type " +
-                            serverName.getType());
+                            serverName.getType()));
                 }
             }
 
             this.serverNames = new ArrayList<>(sniMap.values());
         }
@@ -181,13 +188,13 @@
         }
     }
 
     private static final class CHServerNamesStringizer implements SSLStringizer {
         @Override
-        public String toString(ByteBuffer buffer) {
+        public String toString(HandshakeContext hc, ByteBuffer buffer) {
             try {
-                return (new CHServerNamesSpec(buffer)).toString();
+                return (new CHServerNamesSpec(hc, buffer)).toString();
             } catch (IOException ioe) {
                 // For debug logging only, so please swallow exceptions.
                 return ioe.getMessage();
             }
         }
@@ -289,16 +296,11 @@
                 }
                 return;     // ignore the extension
             }
 
             // Parse the extension.
-            CHServerNamesSpec spec;
-            try {
-                spec = new CHServerNamesSpec(buffer);
-            } catch (IOException ioe) {
-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
+            CHServerNamesSpec spec = new CHServerNamesSpec(shc, buffer);
 
             // Update the context.
             shc.handshakeExtensions.put(CH_SERVER_NAME, spec);
 
             // Does the server match the server name request?
@@ -388,14 +390,16 @@
 
         private SHServerNamesSpec() {
             // blank
         }
 
-        private SHServerNamesSpec(ByteBuffer buffer) throws IOException {
+        private SHServerNamesSpec(HandshakeContext hc,
+                ByteBuffer buffer) throws IOException {
             if (buffer.remaining() != 0) {
-                throw new SSLProtocolException(
-                    "Invalid ServerHello server_name extension: not empty");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid ServerHello server_name extension: not empty"));
             }
         }
 
         @Override
         public String toString() {
@@ -403,13 +407,13 @@
         }
     }
 
     private static final class SHServerNamesStringizer implements SSLStringizer {
         @Override
-        public String toString(ByteBuffer buffer) {
+        public String toString(HandshakeContext hc, ByteBuffer buffer) {
             try {
-                return (new SHServerNamesSpec(buffer)).toString();
+                return (new SHServerNamesSpec(hc, buffer)).toString();
             } catch (IOException ioe) {
                 // For debug logging only, so please swallow exceptions.
                 return ioe.getMessage();
             }
         }
