diff a/src/java.base/share/classes/sun/security/ssl/SupportedVersionsExtension.java b/src/java.base/share/classes/sun/security/ssl/SupportedVersionsExtension.java
--- a/src/java.base/share/classes/sun/security/ssl/SupportedVersionsExtension.java
+++ b/src/java.base/share/classes/sun/security/ssl/SupportedVersionsExtension.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -71,26 +71,30 @@
 
         private CHSupportedVersionsSpec(int[] requestedProtocols) {
             this.requestedProtocols = requestedProtocols;
         }
 
-        private CHSupportedVersionsSpec(ByteBuffer m) throws IOException  {
+        private CHSupportedVersionsSpec(HandshakeContext hc,
+                ByteBuffer m) throws IOException  {
             if (m.remaining() < 3) {        //  1: the length of the list
                                             // +2: one version at least
-                throw new SSLProtocolException(
-                    "Invalid supported_versions extension: insufficient data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid supported_versions extension: insufficient data"));
             }
 
             byte[] vbs = Record.getBytes8(m);   // Get the version bytes.
             if (m.hasRemaining()) {
-                throw new SSLProtocolException(
-                    "Invalid supported_versions extension: unknown extra data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid supported_versions extension: unknown extra data"));
             }
 
             if (vbs == null || vbs.length == 0 || (vbs.length & 0x01) != 0) {
-                throw new SSLProtocolException(
-                    "Invalid supported_versions extension: incomplete data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid supported_versions extension: incomplete data"));
             }
 
             int[] protocols = new int[vbs.length >> 1];
             for (int i = 0, j = 0; i < vbs.length;) {
                 byte major = vbs[i++];
@@ -134,13 +138,13 @@
     }
 
     private static final
             class CHSupportedVersionsStringizer implements SSLStringizer {
         @Override
-        public String toString(ByteBuffer buffer) {
+        public String toString(HandshakeContext hc, ByteBuffer buffer) {
             try {
-                return (new CHSupportedVersionsSpec(buffer)).toString();
+                return (new CHSupportedVersionsSpec(hc, buffer)).toString();
             } catch (IOException ioe) {
                 // For debug logging only, so please swallow exceptions.
                 return ioe.getMessage();
             }
         }
@@ -219,16 +223,12 @@
                 }
                 return;     // ignore the extension
             }
 
             // Parse the extension.
-            CHSupportedVersionsSpec spec;
-            try {
-                spec = new CHSupportedVersionsSpec(buffer);
-            } catch (IOException ioe) {
-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
+            CHSupportedVersionsSpec spec =
+                    new CHSupportedVersionsSpec(shc, buffer);
 
             // Update the context.
             shc.handshakeExtensions.put(CH_SUPPORTED_VERSIONS, spec);
 
             // No impact on session resumption.
@@ -247,14 +247,16 @@
 
         private SHSupportedVersionsSpec(ProtocolVersion selectedVersion) {
             this.selectedVersion = selectedVersion.id;
         }
 
-        private SHSupportedVersionsSpec(ByteBuffer m) throws IOException  {
+        private SHSupportedVersionsSpec(HandshakeContext hc,
+                ByteBuffer m) throws IOException  {
             if (m.remaining() != 2) {       // 2: the selected version
-                throw new SSLProtocolException(
-                    "Invalid supported_versions: insufficient data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid supported_versions: insufficient data"));
             }
 
             byte major = m.get();
             byte minor = m.get();
             this.selectedVersion = ((major & 0xFF) << 8) | (minor & 0xFF);
@@ -273,13 +275,13 @@
     }
 
     private static final
             class SHSupportedVersionsStringizer implements SSLStringizer {
         @Override
-        public String toString(ByteBuffer buffer) {
+        public String toString(HandshakeContext hc, ByteBuffer buffer) {
             try {
-                return (new SHSupportedVersionsSpec(buffer)).toString();
+                return (new SHSupportedVersionsSpec(hc, buffer)).toString();
             } catch (IOException ioe) {
                 // For debug logging only, so please swallow exceptions.
                 return ioe.getMessage();
             }
         }
@@ -361,16 +363,12 @@
                 }
                 return;     // ignore the extension
             }
 
             // Parse the extension.
-            SHSupportedVersionsSpec spec;
-            try {
-                spec = new SHSupportedVersionsSpec(buffer);
-            } catch (IOException ioe) {
-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
+            SHSupportedVersionsSpec spec =
+                    new SHSupportedVersionsSpec(chc, buffer);
 
             // Update the context.
             chc.handshakeExtensions.put(SH_SUPPORTED_VERSIONS, spec);
 
             // No impact on session resumption.
@@ -450,16 +448,12 @@
                 }
                 return;     // ignore the extension
             }
 
             // Parse the extension.
-            SHSupportedVersionsSpec spec;
-            try {
-                spec = new SHSupportedVersionsSpec(buffer);
-            } catch (IOException ioe) {
-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
+            SHSupportedVersionsSpec spec =
+                    new SHSupportedVersionsSpec(chc, buffer);
 
             // Update the context.
             chc.handshakeExtensions.put(HRR_SUPPORTED_VERSIONS, spec);
 
             // No impact on session resumption.
