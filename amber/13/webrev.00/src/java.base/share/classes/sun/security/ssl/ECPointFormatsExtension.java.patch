diff a/src/java.base/share/classes/sun/security/ssl/ECPointFormatsExtension.java b/src/java.base/share/classes/sun/security/ssl/ECPointFormatsExtension.java
--- a/src/java.base/share/classes/sun/security/ssl/ECPointFormatsExtension.java
+++ b/src/java.base/share/classes/sun/security/ssl/ECPointFormatsExtension.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -62,15 +62,17 @@
 
         ECPointFormatsSpec(byte[] formats) {
             this.formats = formats;
         }
 
-        private ECPointFormatsSpec(ByteBuffer m) throws IOException {
+        private ECPointFormatsSpec(HandshakeContext hc,
+                ByteBuffer m) throws IOException {
             if (!m.hasRemaining()) {
-                throw new SSLProtocolException(
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
                     "Invalid ec_point_formats extension: " +
-                    "insufficient data");
+                    "insufficient data"));
             }
 
             this.formats = Record.getBytes8(m);
         }
 
@@ -115,13 +117,13 @@
         }
     }
 
     private static final class ECPointFormatsStringizer implements SSLStringizer {
         @Override
-        public String toString(ByteBuffer buffer) {
+        public String toString(HandshakeContext hc, ByteBuffer buffer) {
             try {
-                return (new ECPointFormatsSpec(buffer)).toString();
+                return (new ECPointFormatsSpec(hc, buffer)).toString();
             } catch (IOException ioe) {
                 // For debug logging only, so please swallow exceptions.
                 return ioe.getMessage();
             }
         }
@@ -225,16 +227,11 @@
                 }
                 return;     // ignore the extension
             }
 
             // Parse the extension.
-            ECPointFormatsSpec spec;
-            try {
-                spec = new ECPointFormatsSpec(buffer);
-            } catch (IOException ioe) {
-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
+            ECPointFormatsSpec spec = new ECPointFormatsSpec(shc, buffer);
 
             // per RFC 4492, uncompressed points must always be supported.
             if (!spec.hasUncompressedFormat()) {
                 throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE,
                     "Invalid ec_point_formats extension data: " +
@@ -274,16 +271,11 @@
                 throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE,
                     "Unexpected ec_point_formats extension in ServerHello");
             }
 
             // Parse the extension.
-            ECPointFormatsSpec spec;
-            try {
-                spec = new ECPointFormatsSpec(buffer);
-            } catch (IOException ioe) {
-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
+            ECPointFormatsSpec spec = new ECPointFormatsSpec(chc, buffer);
 
             // per RFC 4492, uncompressed points must always be supported.
             if (!spec.hasUncompressedFormat()) {
                 throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE,
                         "Invalid ec_point_formats extension data: " +
