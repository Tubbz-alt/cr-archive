diff a/src/java.base/share/classes/sun/security/ssl/SignatureAlgorithmsExtension.java b/src/java.base/share/classes/sun/security/ssl/SignatureAlgorithmsExtension.java
--- a/src/java.base/share/classes/sun/security/ssl/SignatureAlgorithmsExtension.java
+++ b/src/java.base/share/classes/sun/security/ssl/SignatureAlgorithmsExtension.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -80,25 +80,29 @@
             } else {
                 this.signatureSchemes = new int[0];
             }
         }
 
-        SignatureSchemesSpec(ByteBuffer buffer) throws IOException {
+        SignatureSchemesSpec(HandshakeContext hc,
+                ByteBuffer buffer) throws IOException {
             if (buffer.remaining() < 2) {      // 2: the length of the list
-                throw new SSLProtocolException(
-                    "Invalid signature_algorithms: insufficient data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid signature_algorithms: insufficient data"));
             }
 
             byte[] algs = Record.getBytes16(buffer);
             if (buffer.hasRemaining()) {
-                throw new SSLProtocolException(
-                    "Invalid signature_algorithms: unknown extra data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid signature_algorithms: unknown extra data"));
             }
 
             if (algs == null || algs.length == 0 || (algs.length & 0x01) != 0) {
-                throw new SSLProtocolException(
-                    "Invalid signature_algorithms: incomplete data");
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
+                    "Invalid signature_algorithms: incomplete data"));
             }
 
             int[] schemes = new int[algs.length / 2];
             for (int i = 0, j = 0; i < algs.length;) {
                 byte hash = algs[i++];
@@ -142,13 +146,13 @@
     }
 
     private static final
             class SignatureSchemesStringizer implements SSLStringizer {
         @Override
-        public String toString(ByteBuffer buffer) {
+        public String toString(HandshakeContext hc, ByteBuffer buffer) {
             try {
-                return (new SignatureSchemesSpec(buffer)).toString();
+                return (new SignatureSchemesSpec(hc, buffer)).toString();
             } catch (IOException ioe) {
                 // For debug logging only, so please swallow exceptions.
                 return ioe.getMessage();
             }
         }
@@ -232,16 +236,11 @@
                 }
                 return;     // ignore the extension
             }
 
             // Parse the extension.
-            SignatureSchemesSpec spec;
-            try {
-                spec = new SignatureSchemesSpec(buffer);
-            } catch (IOException ioe) {
-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
+            SignatureSchemesSpec spec = new SignatureSchemesSpec(shc, buffer);
 
             // Update the context.
             shc.handshakeExtensions.put(
                     SSLExtension.CH_SIGNATURE_ALGORITHMS, spec);
 
@@ -456,16 +455,11 @@
                         "No available signature_algorithms extension " +
                         "for client certificate authentication");
             }
 
             // Parse the extension.
-            SignatureSchemesSpec spec;
-            try {
-                spec = new SignatureSchemesSpec(buffer);
-            } catch (IOException ioe) {
-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
+            SignatureSchemesSpec spec = new SignatureSchemesSpec(chc, buffer);
 
             List<SignatureScheme> knownSignatureSchemes = new LinkedList<>();
             for (int id : spec.signatureSchemes) {
                 SignatureScheme ss = SignatureScheme.valueOf(id);
                 if (ss != null) {
