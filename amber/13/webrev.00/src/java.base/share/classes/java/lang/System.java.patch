diff a/src/java.base/share/classes/java/lang/System.java b/src/java.base/share/classes/java/lang/System.java
--- a/src/java.base/share/classes/java/lang/System.java
+++ b/src/java.base/share/classes/java/lang/System.java
@@ -47,11 +47,10 @@
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 import java.nio.channels.Channel;
 import java.nio.channels.spi.SelectorProvider;
 import java.nio.charset.Charset;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Properties;
 import java.util.PropertyPermission;
@@ -583,32 +582,14 @@
      */
     @HotSpotIntrinsicCandidate
     public static native int identityHashCode(Object x);
 
     /**
-     * System properties. The following properties are guaranteed to be defined:
-     * <dl>
-     * <dt>java.version         <dd>Java version number
-     * <dt>java.version.date    <dd>Java version date
-     * <dt>java.vendor          <dd>Java vendor specific string
-     * <dt>java.vendor.url      <dd>Java vendor URL
-     * <dt>java.vendor.version  <dd>Java vendor version
-     * <dt>java.home            <dd>Java installation directory
-     * <dt>java.class.version   <dd>Java class version number
-     * <dt>java.class.path      <dd>Java classpath
-     * <dt>os.name              <dd>Operating System Name
-     * <dt>os.arch              <dd>Operating System Architecture
-     * <dt>os.version           <dd>Operating System Version
-     * <dt>file.separator       <dd>File separator ("/" on Unix)
-     * <dt>path.separator       <dd>Path separator (":" on Unix)
-     * <dt>line.separator       <dd>Line separator ("\n" on Unix)
-     * <dt>user.name            <dd>User account name
-     * <dt>user.home            <dd>User home directory
-     * <dt>user.dir             <dd>User's current working directory
-     * </dl>
+     * System properties.
+     *
+     * See {@linkplain #getProperties getProperties} for details.
      */
-
     private static Properties props;
 
     /**
      * Determines the current system properties.
      *
@@ -1616,11 +1597,11 @@
          * Returns the {@code LoggerFinder} instance. There is one
          * single system-wide {@code LoggerFinder} instance in
          * the Java Runtime.  See the class specification of how the
          * {@link LoggerFinder LoggerFinder} implementation is located and
          * loaded.
-
+         *
          * @return the {@link LoggerFinder LoggerFinder} instance.
          * @throws SecurityException if a security manager is present and its
          *         {@code checkPermission} method doesn't allow the
          *         {@code RuntimePermission("loggerFinder")}.
          */
@@ -1880,12 +1861,12 @@
      * JNI_OnLoad_{@code libname} function exported by the library is invoked.
      * See the <a href="{@docRoot}/../specs/jni/index.html"> JNI Specification</a>
      * for more details.
      *
      * Otherwise, the libname argument is loaded from a system library
-     * location and mapped to a native library image in an implementation-
-     * dependent manner.
+     * location and mapped to a native library image in an
+     * implementation-dependent manner.
      * <p>
      * The call {@code System.loadLibrary(name)} is effectively
      * equivalent to the call
      * <blockquote><pre>
      * Runtime.getRuntime().loadLibrary(name)
@@ -2274,13 +2255,8 @@
             }
 
             public void setCause(Throwable t, Throwable cause) {
                 t.setCause(cause);
             }
-
-            public void loadLibrary(Class<?> caller, String library) {
-                assert library.indexOf(java.io.File.separatorChar) < 0;
-                ClassLoader.loadLibrary(caller, library, false);
-            }
         });
     }
 }
