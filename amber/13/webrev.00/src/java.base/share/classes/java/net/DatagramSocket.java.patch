diff a/src/java.base/share/classes/java/net/DatagramSocket.java b/src/java.base/share/classes/java/net/DatagramSocket.java
--- a/src/java.base/share/classes/java/net/DatagramSocket.java
+++ b/src/java.base/share/classes/java/net/DatagramSocket.java
@@ -186,10 +186,13 @@
                 security.checkConnect(address.getHostAddress(), port);
                 security.checkAccept(address.getHostAddress(), port);
             }
         }
 
+        if (port == 0) {
+            throw new SocketException("Can't connect to port 0");
+        }
         if (!isBound())
           bind(new InetSocketAddress(0));
 
         // old impls do not support connect/disconnect
         if (oldImpl || (impl instanceof AbstractPlainDatagramSocketImpl &&
@@ -770,10 +773,13 @@
                     } else {
                         security.checkConnect(packetAddress.getHostAddress(),
                                 packetPort);
                     }
                 }
+                if (packetPort == 0) {
+                    throw new SocketException("Can't send to port 0");
+                }
             } else {
                 // we're connected
                 if (packetAddress == null) {
                     p.setAddress(connectedAddress);
                     p.setPort(connectedPort);
@@ -1481,12 +1487,12 @@
         if (isClosed())
             throw new SocketException("Socket is closed");
         return getImpl().getOption(name);
     }
 
-    private static Set<SocketOption<?>> options;
-    private static boolean optionsSet = false;
+    private volatile Set<SocketOption<?>> options;
+    private final Object optionsLock = new Object();
 
     /**
      * Returns a set of the socket options supported by this socket.
      *
      * This method will continue to return the set of options even after
@@ -1496,20 +1502,24 @@
      *        may be empty if the socket's DatagramSocketImpl cannot be created.
      *
      * @since 9
      */
     public Set<SocketOption<?>> supportedOptions() {
-        synchronized(DatagramSocket.class) {
-            if (optionsSet) {
+        Set<SocketOption<?>> options = this.options;
+        if (options != null)
+            return options;
+
+        synchronized (optionsLock) {
+            options = this.options;
+            if (options != null)
                 return options;
-            }
+
             try {
                 DatagramSocketImpl impl = getImpl();
                 options = Collections.unmodifiableSet(impl.supportedOptions());
             } catch (IOException e) {
                 options = Collections.emptySet();
             }
-            optionsSet = true;
-            return options;
+            return this.options = options;
         }
     }
 }
