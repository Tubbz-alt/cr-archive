diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core/src/org/graalvm/compiler/core/LIRGenerationPhase.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core/src/org/graalvm/compiler/core/LIRGenerationPhase.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core/src/org/graalvm/compiler/core/LIRGenerationPhase.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.core/src/org/graalvm/compiler/core/LIRGenerationPhase.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -26,15 +26,17 @@
 
 import java.util.List;
 
 import org.graalvm.compiler.core.common.cfg.AbstractBlockBase;
 import org.graalvm.compiler.core.common.cfg.BlockMap;
+import org.graalvm.compiler.core.gen.NodeLIRBuilder;
 import org.graalvm.compiler.debug.CounterKey;
 import org.graalvm.compiler.debug.DebugContext;
 import org.graalvm.compiler.graph.Node;
 import org.graalvm.compiler.lir.LIR;
 import org.graalvm.compiler.lir.gen.LIRGenerationResult;
+import org.graalvm.compiler.lir.gen.LIRGenerator;
 import org.graalvm.compiler.lir.gen.LIRGeneratorTool;
 import org.graalvm.compiler.lir.phases.LIRPhase;
 import org.graalvm.compiler.lir.ssa.SSAUtil;
 import org.graalvm.compiler.nodes.StructuredGraph;
 import org.graalvm.compiler.nodes.StructuredGraph.ScheduleResult;
@@ -44,17 +46,17 @@
 import jdk.vm.ci.code.TargetDescription;
 
 public class LIRGenerationPhase extends LIRPhase<LIRGenerationPhase.LIRGenerationContext> {
 
     public static final class LIRGenerationContext {
-        private final NodeLIRBuilderTool nodeLirBuilder;
+        private final NodeLIRBuilder nodeLirBuilder;
         private final LIRGeneratorTool lirGen;
         private final StructuredGraph graph;
         private final ScheduleResult schedule;
 
         public LIRGenerationContext(LIRGeneratorTool lirGen, NodeLIRBuilderTool nodeLirBuilder, StructuredGraph graph, ScheduleResult schedule) {
-            this.nodeLirBuilder = nodeLirBuilder;
+            this.nodeLirBuilder = (NodeLIRBuilder) nodeLirBuilder;
             this.lirGen = lirGen;
             this.graph = graph;
             this.schedule = schedule;
         }
     }
@@ -62,21 +64,21 @@
     private static final CounterKey instructionCounter = DebugContext.counter("GeneratedLIRInstructions");
     private static final CounterKey nodeCount = DebugContext.counter("FinalNodeCount");
 
     @Override
     protected final void run(TargetDescription target, LIRGenerationResult lirGenRes, LIRGenerationPhase.LIRGenerationContext context) {
-        NodeLIRBuilderTool nodeLirBuilder = context.nodeLirBuilder;
+        NodeLIRBuilder nodeLirBuilder = context.nodeLirBuilder;
         StructuredGraph graph = context.graph;
         ScheduleResult schedule = context.schedule;
         AbstractBlockBase<?>[] blocks = lirGenRes.getLIR().getControlFlowGraph().getBlocks();
         for (AbstractBlockBase<?> b : blocks) {
-            matchBlock(nodeLirBuilder, (Block) b, graph, schedule);
+            matchBlock(nodeLirBuilder, (Block) b, schedule);
         }
         for (AbstractBlockBase<?> b : blocks) {
             emitBlock(nodeLirBuilder, lirGenRes, (Block) b, graph, schedule.getBlockToNodesMap());
         }
-        context.lirGen.beforeRegisterAllocation();
+        ((LIRGenerator) context.lirGen).beforeRegisterAllocation();
         assert SSAUtil.verifySSAForm(lirGenRes.getLIR());
         nodeCount.add(graph.getDebug(), graph.getNodeCount());
     }
 
     private static void emitBlock(NodeLIRBuilderTool nodeLirGen, LIRGenerationResult lirGenRes, Block b, StructuredGraph graph, BlockMap<List<Node>> blockMap) {
@@ -86,12 +88,12 @@
         LIR lir = lirGenRes.getLIR();
         DebugContext debug = lir.getDebug();
         instructionCounter.add(debug, lir.getLIRforBlock(b).size());
     }
 
-    private static void matchBlock(NodeLIRBuilderTool nodeLirGen, Block b, StructuredGraph graph, ScheduleResult schedule) {
-        nodeLirGen.matchBlock(b, graph, schedule);
+    private static void matchBlock(NodeLIRBuilder nodeLirGen, Block b, ScheduleResult schedule) {
+        nodeLirGen.matchBlock(b, schedule);
     }
 
     private static boolean verifyPredecessors(LIRGenerationResult lirGenRes, Block block) {
         for (Block pred : block.getPredecessors()) {
             if (!block.isLoopHeader() || !pred.isLoopEnd()) {
