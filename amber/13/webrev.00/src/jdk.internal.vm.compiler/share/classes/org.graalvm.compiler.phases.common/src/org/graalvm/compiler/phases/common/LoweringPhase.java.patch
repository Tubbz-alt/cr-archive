diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.phases.common/src/org/graalvm/compiler/phases/common/LoweringPhase.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.phases.common/src/org/graalvm/compiler/phases/common/LoweringPhase.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.phases.common/src/org/graalvm/compiler/phases/common/LoweringPhase.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.phases.common/src/org/graalvm/compiler/phases/common/LoweringPhase.java
@@ -315,16 +315,18 @@
                  * graph or if the new kill location doesn't connect into the existing graph.
                  */
                 boolean isAny = false;
                 if (n instanceof SingleMemoryKill) {
                     isAny = ((SingleMemoryKill) n).getKilledLocationIdentity().isAny();
-                } else {
+                } else if (n instanceof MultiMemoryKill) {
                     for (LocationIdentity ident : ((MultiMemoryKill) n).getKilledLocationIdentities()) {
                         if (ident.isAny()) {
                             isAny = true;
                         }
                     }
+                } else {
+                    throw GraalError.shouldNotReachHere("Unknown type of memory kill " + n);
                 }
                 if (isAny && n instanceof FixedWithNextNode) {
                     /*
                      * Check if the next kill location leads directly to a ControlSinkNode in the
                      * new part of the graph. This is a fairly conservative test that could be made
