diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements.amd64/src/org/graalvm/compiler/replacements/amd64/AMD64StringLatin1InflateNode.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements.amd64/src/org/graalvm/compiler/replacements/amd64/AMD64StringLatin1InflateNode.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements.amd64/src/org/graalvm/compiler/replacements/amd64/AMD64StringLatin1InflateNode.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements.amd64/src/org/graalvm/compiler/replacements/amd64/AMD64StringLatin1InflateNode.java
@@ -35,11 +35,11 @@
 import org.graalvm.compiler.nodes.FixedWithNextNode;
 import org.graalvm.compiler.nodes.NamedLocationIdentity;
 import org.graalvm.compiler.nodes.ValueNode;
 import org.graalvm.compiler.nodes.ValueNodeUtil;
 import org.graalvm.compiler.nodes.memory.MemoryAccess;
-import org.graalvm.compiler.nodes.memory.MemoryNode;
+import org.graalvm.compiler.nodes.memory.MemoryKill;
 import org.graalvm.compiler.nodes.memory.MultiMemoryKill;
 import org.graalvm.compiler.nodes.spi.LIRLowerable;
 import org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool;
 import jdk.internal.vm.compiler.word.LocationIdentity;
 import jdk.internal.vm.compiler.word.Pointer;
@@ -57,11 +57,11 @@
     @Input private ValueNode dst;
     @Input private ValueNode len;
 
     private final JavaKind writeKind;
 
-    @OptionalInput(Memory) private MemoryNode lla; // Last access location registered.
+    @OptionalInput(Memory) private MemoryKill lla; // Last access location registered.
 
     // java.lang.StringLatin1.inflate([BI[CII)V
     //
     // void inflate(byte[] src, int src_indx, char[] dst, int dst_indx, int len)
     //
@@ -92,16 +92,16 @@
         LIRGeneratorTool lgt = gen.getLIRGeneratorTool();
         lgt.emitStringLatin1Inflate(gen.operand(src), gen.operand(dst), gen.operand(len));
     }
 
     @Override
-    public MemoryNode getLastLocationAccess() {
+    public MemoryKill getLastLocationAccess() {
         return lla;
     }
 
     @Override
-    public void setLastLocationAccess(MemoryNode newlla) {
+    public void setLastLocationAccess(MemoryKill newlla) {
         updateUsages(ValueNodeUtil.asNode(lla), ValueNodeUtil.asNode(newlla));
         lla = newlla;
     }
 
     @NodeIntrinsic
