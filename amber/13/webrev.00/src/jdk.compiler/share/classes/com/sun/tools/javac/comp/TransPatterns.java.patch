diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TransPatterns.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TransPatterns.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TransPatterns.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TransPatterns.java
@@ -27,10 +27,11 @@
 
 import com.sun.tools.javac.code.Flags;
 import com.sun.tools.javac.code.Kinds.Kind;
 import com.sun.tools.javac.code.Symbol;
 import com.sun.tools.javac.code.Symbol.BindingSymbol;
+import com.sun.tools.javac.code.Symbol.ClassSymbol;
 import com.sun.tools.javac.code.Symbol.VarSymbol;
 import com.sun.tools.javac.code.Symtab;
 import com.sun.tools.javac.code.Types;
 import com.sun.tools.javac.tree.JCTree.JCAssign;
 import com.sun.tools.javac.tree.JCTree.JCBinary;
@@ -55,10 +56,11 @@
 import com.sun.tools.javac.util.Names;
 import com.sun.tools.javac.util.Options;
 
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.LinkedHashMap;
 
 import com.sun.tools.javac.code.Symbol.MethodSymbol;
 import com.sun.tools.javac.code.Symbol.RecordComponent;
 import com.sun.tools.javac.code.Type;
 import static com.sun.tools.javac.code.TypeTag.BOT;
@@ -71,11 +73,10 @@
 import com.sun.tools.javac.tree.JCTree.JCPattern;
 import com.sun.tools.javac.tree.JCTree.JCLambda;
 import com.sun.tools.javac.tree.JCTree.JCStatement;
 import com.sun.tools.javac.tree.JCTree.LetExpr;
 import com.sun.tools.javac.util.List;
-import java.util.HashMap;
 
 /**
  * This pass translates pattern-matching constructs, such as instanceof <pattern>.
  */
 public class TransPatterns extends TreeTranslator {
@@ -133,11 +134,11 @@
 
     JCLabeledStatement pendingMatchLabel = null;
 
     boolean debugTransPatterns;
 
-    private JCClassDecl currentClass;
+    private ClassSymbol currentClass;
     private Symbol currentOwnerSym = null;
 
     protected TransPatterns(Context context) {
         context.put(transPatternsKey, this);
         syms = Symtab.instance(context);
@@ -153,74 +154,112 @@
 
     @Override
     public void visitTypeTest(JCInstanceOf tree) {
         if (tree.pattern.hasTag(Tag.BINDINGPATTERN) || tree.pattern.hasTag(Tag.DECONSTRUCTIONPATTERN)) {
             //E instanceof T N
+            //E instanceof T(PATT1, PATT2, ...)
             //=>
-            //(let T' N$temp = E; N$temp instanceof T && (N = (T) N$temp == (T) N$temp))
+            //(let T' N$temp = E; N$temp instanceof T && <pattern extractor>)
             Type tempType = tree.expr.type.hasTag(BOT) ?
                     syms.objectType
                     : tree.expr.type;
             VarSymbol temp = new VarSymbol(Flags.SYNTHETIC,
-                    names.fromString("e" + target.syntheticNameChar() + tree.pos),
+                    names.fromString(target.syntheticNameChar() + "e" + target.syntheticNameChar()),
                     tempType,
                     currentOwnerSym);
             JCExpression translatedExpr = translate(tree.expr);
             Type castTargetType;
             //TODO: use rule switch (when boot JDK is 14):
             switch (tree.pattern.getTag()) {
-                case BINDINGPATTERN: castTargetType = ((JCBindingPattern)tree.pattern).symbol.type; break;
-                case DECONSTRUCTIONPATTERN: castTargetType = ((JCDeconstructionPattern)tree.pattern).type; break;
-                default: throw new AssertionError("Unexpected pattern type: " + tree.pattern.getTag());
+                case BINDINGPATTERN:
+                    castTargetType = ((JCBindingPattern)tree.pattern).symbol.type;
+                    break;
+                case DECONSTRUCTIONPATTERN:
+                    castTargetType = ((JCDeconstructionPattern)tree.pattern).type;
+                    break;
+                default:
+                    throw new AssertionError("Unexpected pattern type: " + tree.pattern.getTag());
             }
 
             castTargetType = types.boxedTypeOrType(types.erasure(castTargetType));
 
-            result = makeTypeTest(make.Ident(temp), make.Type(castTargetType));
-            result = makeBinary(Tag.AND, (JCExpression)result, preparePatternExtractor(tree.getPattern(), temp, castTargetType));
-            result = make.at(tree.pos).LetExpr(make.VarDef(temp, translatedExpr), (JCExpression)result).setType(syms.booleanType);
+            result = makeTypeTest(make.at(tree.pos).Ident(temp), make.Type(castTargetType));
+            result = makeBinary(Tag.AND, (JCExpression)result,
+                                         preparePatternExtractor(tree, tree.getPattern(), temp, castTargetType));
+            result = make.at(tree.pos).LetExpr(make.VarDef(temp, translatedExpr),
+                                               (JCExpression)result).setType(syms.booleanType);
             ((LetExpr) result).needsCond = true;
         } else {
             super.visitTypeTest(tree);
         }
     }
-    
-    private JCExpression preparePatternExtractor(JCPattern patt, VarSymbol temp, Type targetType) {
+
+    private JCExpression preparePatternExtractor(JCInstanceOf tree, JCPattern patt, VarSymbol temp, Type targetType) {
         if (targetType == syms.botType) {
             targetType = syms.objectType;
         }
         if (patt.hasTag(Tag.BINDINGPATTERN)) {
+            //type test already done, finish handling of type test patterns ("T N")
+            //=>
+            //(let N = (T) N$temp; true)
             VarSymbol bindingVar = bindingContext.bindingDeclared(((JCBindingPattern) patt).symbol);
             if (bindingVar != null) { //TODO: cannot be null here?
-                JCAssign fakeInit = (JCAssign)make.at(patt.pos).Assign(
+                JCAssign fakeInit = (JCAssign)make.at(tree.pos).Assign(
                         make.Ident(bindingVar), convert(make.Ident(temp), targetType)).setType(bindingVar.erasure(types));
                 LetExpr nestedLE = make.LetExpr(List.of(make.Exec(fakeInit)),
                                                 make.Literal(true));
                 nestedLE.needsCond = true;
                 nestedLE.setType(syms.booleanType);
                 return nestedLE;
             }
-            return make.Literal(true);//XXX
+            return make.Literal(true);
         } else if (patt.hasTag(Tag.DECONSTRUCTIONPATTERN)) {
+            //type test already done, finish handling of deconstruction patterns ("T(PATT1, PATT2, ...)")
+            //=>
+            //<PATT1-handling> && <PATT2-handling> && ...
             JCDeconstructionPattern dpatt = (JCDeconstructionPattern) patt;
             List<? extends RecordComponent> components = dpatt.record.getRecordComponents();
             List<? extends JCPattern> nestedPatterns = dpatt.nested;
             JCExpression test = null;
             while (components.nonEmpty() && nestedPatterns.nonEmpty()) {
+                //PATTn for record component COMPn of type Tn;
+                //PATTn is a type test pattern or a deconstruction pattern:
+                //=>
+                //(let Tn $c$COMPn = ((T) N$temp).COMPn(); <PATTn extractor>)
+                //or
+                //(let Tn $c$COMPn = ((T) N$temp).COMPn(); $c$COMPn != null && <PATTn extractor>)
+                //or
+                //(let Tn $c$COMPn = ((T) N$temp).COMPn(); $c$COMPn instanceof T' && <PATTn extractor>)
                 RecordComponent component = components.head;
                 JCPattern nested = nestedPatterns.head;
                 VarSymbol nestedTemp = new VarSymbol(Flags.SYNTHETIC,
-                    names.fromString("e" + target.syntheticNameChar() + nested.pos),
+                    names.fromString(target.syntheticNameChar() + "c" + target.syntheticNameChar() + component.name),
                                      component.erasure(types),
                                      currentOwnerSym);
-                Symbol accessor = dpatt.record.members().findFirst(component.name, s -> s.kind == Kind.MTH && ((MethodSymbol) s).params.isEmpty());
-                LetExpr getAndRun = make.LetExpr(make.VarDef(nestedTemp, make.App(make.Select(convert(make.Ident(temp), dpatt.type), accessor))), preparePatternExtractor(nested, nestedTemp, nestedTemp.type));
+                Symbol accessor = dpatt.record
+                                       .members()
+                                       .findFirst(component.name, s -> s.kind == Kind.MTH &&
+                                                                       ((MethodSymbol) s).params.isEmpty());
+                JCVariableDecl nestedTempVar =
+                        make.VarDef(nestedTemp,
+                                    make.App(make.Select(convert(make.Ident(temp), dpatt.type),
+                                                         accessor)));
+                JCExpression extracted =
+                        preparePatternExtractor(tree, nested, nestedTemp, nested.type);
+                JCExpression extraTest = null;
+                if (!types.isAssignable(nestedTemp.type, nested.type)) {
+                    extraTest = makeTypeTest(make.Ident(nestedTemp),
+                                             make.Type(nested.type));
+                } else if (nested.type.isReference()) {
+                    extraTest = makeBinary(Tag.NE, make.Ident(nestedTemp), makeNull());
+                }
+                if (extraTest != null) {
+                    extracted = makeBinary(Tag.AND, extraTest, extracted);
+                }
+                LetExpr getAndRun = make.LetExpr(nestedTempVar, extracted);
                 getAndRun.needsCond = true;
                 getAndRun.setType(syms.booleanType);
-                if (!types.isAssignable(nestedTemp.type, nested.type)) { //TODO: erasure? primitives?
-                    getAndRun.expr = makeBinary(Tag.AND, makeTypeTest(make.Ident(nestedTemp), make.Type(nested.type)), getAndRun.expr);
-                }
                 if (test == null) {
                     test = getAndRun;
                 } else {
                     test = makeBinary(Tag.AND, test, getAndRun);
                 }
@@ -231,11 +270,11 @@
             return test != null ? test : make.Literal(true);
         } else {
             throw new IllegalStateException();
         }
     }
-    
+
     @Override
     public void visitBinary(JCBinary tree) {
         bindingContext = new BasicBindingContext();
         try {
             super.visitBinary(tree);
@@ -298,21 +337,10 @@
         } finally {
             bindingContext.pop();
         }
     }
 
-    @Override
-    public void visitClassDef(JCTree.JCClassDecl tree) {
-        JCClassDecl prevCurrentClass = currentClass;
-        try {
-            currentClass = tree;
-            super.visitClassDef(tree);
-        } finally {
-            currentClass = prevCurrentClass;
-        }
-    }
-
     @Override
     public void visitMethodDef(JCMethodDecl tree) {
         Symbol prevOwnerSym = currentOwnerSym;
         try {
             currentOwnerSym = tree.sym;
@@ -333,10 +361,21 @@
         } finally {
             currentOwnerSym = prevOwnerSym;
         }
     }
 
+    @Override
+    public void visitClassDef(JCClassDecl tree) {
+        ClassSymbol prevCurrentClass = currentClass;
+        try {
+            currentClass = tree.sym;
+            super.visitClassDef(tree);
+        } finally {
+            currentClass = prevCurrentClass;
+        }
+    }
+
     @Override
     public void visitIdent(JCIdent tree) {
         VarSymbol bindingVar = null;
         if ((tree.sym.flags() & Flags.MATCH_BINDING) != 0) {
             bindingVar = bindingContext.getBindingFor((BindingSymbol)tree.sym);
@@ -370,19 +409,26 @@
                 hoistedVarMap.put(binding, var.sym);
                 statements.append(var);
                 return true;
             }
         };
+        Symbol prevOwnerSym = currentOwnerSym;
         try {
+            if (currentOwnerSym == null) {
+                currentOwnerSym = new MethodSymbol(tree.flags | Flags.BLOCK,
+                                 names.empty, null,
+                                 currentClass);
+            }
             for (List<JCStatement> l = tree.stats; l.nonEmpty(); l = l.tail) {
                 statements.append(translate(l.head));
             }
 
             tree.stats = statements.toList();
             result = tree;
         } finally {
             bindingContext.pop();
+            currentOwnerSym = prevOwnerSym;
         }
     }
 
     @Override
     public void visitLambda(JCLambda tree) {
@@ -428,10 +474,26 @@
         tree.operator = operators.resolveBinary(tree, optag, lhs.type, rhs.type);
         tree.type = tree.operator.type.getReturnType();
         return tree;
     }
 
+    /** Make an attributed tree representing a literal. This will be an
+     *  Ident node in the case of boolean literals, a Literal node in all
+     *  other cases.
+     *  @param type       The literal's type.
+     *  @param value      The literal's value.
+     */
+    JCExpression makeLit(Type type, Object value) {
+        return make.Literal(type.getTag(), value).setType(type.constType(value));
+    }
+
+    /** Make an attributed tree representing null.
+     */
+    JCExpression makeNull() {
+        return makeLit(syms.botType, null);
+    }
+
     JCExpression convert(JCExpression expr, Type target) {
         JCExpression result = make.at(expr.pos()).TypeCast(make.Type(target), expr);
         result.type = target;
         return result;
     }
@@ -449,18 +511,18 @@
         Map<BindingSymbol, VarSymbol> hoistedVarMap;
         BindingContext parent;
 
         public BasicBindingContext() {
             this.parent = bindingContext;
-            this.hoistedVarMap = new HashMap<>();
+            this.hoistedVarMap = new LinkedHashMap<>();
         }
 
         @Override
         VarSymbol bindingDeclared(BindingSymbol varSymbol) {
             VarSymbol res = parent.bindingDeclared(varSymbol);
             if (res == null) {
-                res = new VarSymbol(varSymbol.flags() & ~Flags.MATCH_BINDING, varSymbol.name, varSymbol.type, varSymbol.owner);
+                res = new VarSymbol(varSymbol.flags(), varSymbol.name, varSymbol.type, varSymbol.owner);
                 res.setTypeAttributes(varSymbol.getRawTypeAttributes());
                 hoistedVarMap.put(varSymbol, res);
             }
             return res;
         }
