diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Check.java
@@ -155,10 +155,13 @@
                 enforceMandatoryWarnings, "unchecked", LintCategory.UNCHECKED);
         sunApiHandler = new MandatoryWarningHandler(log, false,
                 enforceMandatoryWarnings, "sunapi", null);
 
         deferredLintHandler = DeferredLintHandler.instance(context);
+
+        allowRecords = (!preview.isPreview(Feature.RECORDS) || preview.isEnabled()) &&
+                Feature.RECORDS.allowedInSource(source);
     }
 
     /** Character for synthetic names
      */
     char syntheticNameChar;
@@ -186,10 +189,14 @@
 
     /** A handler for deferred lint warnings.
      */
     private DeferredLintHandler deferredLintHandler;
 
+    /** Are records allowed
+     */
+    private final boolean allowRecords;
+
 /* *************************************************************************
  * Errors and Warnings
  **************************************************************************/
 
     Lint setLint(Lint newLint) {
@@ -614,18 +621,27 @@
      */
     Type checkCastable(DiagnosticPosition pos, Type found, Type req) {
         return checkCastable(pos, found, req, basicHandler);
     }
     Type checkCastable(DiagnosticPosition pos, Type found, Type req, CheckContext checkContext) {
-        if (types.isCastable(found, req, castWarner(pos, found, req))) {
+        if (checkCastable(pos, found, req, checkContext, castWarner(pos, found, req))) {
             return req;
         } else {
-            checkContext.report(pos, diags.fragment(Fragments.InconvertibleTypes(found, req)));
             return types.createErrorType(found);
         }
     }
 
+    boolean checkCastable(DiagnosticPosition pos, Type found, Type req,
+                          CheckContext checkContext, Warner warner) {
+        if (types.isCastable(found, req, warner)) {
+            return true;
+        } else {
+            checkContext.report(pos, diags.fragment(Fragments.InconvertibleTypes(found, req)));
+            return false;
+        }
+    }
+
     /** Check for redundant casts (i.e. where source type is a subtype of target type)
      * The problem should only be reported for non-292 cast
      */
     public void checkRedundantCast(Env<AttrContext> env, final JCTypeCast tree) {
         if (!tree.type.isErroneous()
@@ -3162,11 +3178,13 @@
         if (defaultTargets == null) {
             Set<Name> targets = new HashSet<>();
             targets.add(names.ANNOTATION_TYPE);
             targets.add(names.CONSTRUCTOR);
             targets.add(names.FIELD);
-            targets.add(names.RECORD_COMPONENT);
+            if (allowRecords) {
+                targets.add(names.RECORD_COMPONENT);
+            }
             targets.add(names.LOCAL_VARIABLE);
             targets.add(names.METHOD);
             targets.add(names.PACKAGE);
             targets.add(names.PARAMETER);
             targets.add(names.TYPE);
