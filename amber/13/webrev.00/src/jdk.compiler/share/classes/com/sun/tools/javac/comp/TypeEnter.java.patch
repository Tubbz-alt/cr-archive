diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/TypeEnter.java
@@ -916,11 +916,14 @@
             ClassSymbol sym = tree.sym;
             if ((sym.flags_field & RECORD) != 0) {
                 List<JCVariableDecl> fields = TreeInfo.recordFields(tree);
                 memberEnter.memberEnter(fields, env);
                 for (JCVariableDecl field : fields) {
-                    sym.getRecordComponent(field, true);
+                    sym.getRecordComponent(field, true,
+                            field.mods.annotations.isEmpty() ?
+                                    List.nil() :
+                                    new TreeCopier<JCTree>(make.at(field.pos)).copy(field.mods.annotations));
                 }
 
                 enterThisAndSuper(sym, env);
 
                 // lets enter all constructors
@@ -1038,11 +1041,13 @@
             if (implSym == null || (implSym.flags_field & GENERATED_MEMBER) != 0) {
                 /* here we are pushing the annotations present in the corresponding field down to the accessor
                  * it could be that some of those annotations are not applicable to the accessor, they will be striped
                  * away later at Check::validateAnnotation
                  */
-                List<JCAnnotation> originalAnnos = rec.getOriginalAnnos();
+                List<JCAnnotation> originalAnnos = rec.getOriginalAnnos().isEmpty() ?
+                        rec.getOriginalAnnos() :
+                        new TreeCopier<JCTree>(make.at(tree.pos)).copy(rec.getOriginalAnnos());
                 JCMethodDecl getter = make.at(tree.pos).
                         MethodDef(
                                 make.Modifiers(Flags.PUBLIC | Flags.GENERATED_MEMBER, originalAnnos),
                           tree.sym.name,
                           /* we need to special case for the case when the user declared the type as an ident
@@ -1349,11 +1354,13 @@
             for (JCVariableDecl arg : md.params) {
                 /* at this point we are passing all the annotations in the field to the corresponding
                  * parameter in the constructor.
                  */
                 RecordComponent rc = ((ClassSymbol) owner).getRecordComponent(arg.sym);
-                arg.mods.annotations = rc.getOriginalAnnos();
+                arg.mods.annotations = rc.getOriginalAnnos().isEmpty() ?
+                        List.nil() :
+                        new TreeCopier<JCTree>(make.at(arg.pos)).copy(rc.getOriginalAnnos());
                 arg.vartype = tmpRecordFieldDecls.head.vartype;
                 tmpRecordFieldDecls = tmpRecordFieldDecls.tail;
             }
             return md;
         }
