diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
@@ -25,10 +25,11 @@
 
 package com.sun.tools.javac.comp;
 
 import java.util.*;
 import java.util.function.BiConsumer;
+import java.util.stream.Stream;
 
 import javax.lang.model.element.ElementKind;
 import javax.tools.JavaFileObject;
 
 import com.sun.source.tree.CaseTree;
@@ -74,11 +75,10 @@
 import static com.sun.tools.javac.code.Kinds.Kind.*;
 import static com.sun.tools.javac.code.TypeTag.*;
 import static com.sun.tools.javac.code.TypeTag.WILDCARD;
 import static com.sun.tools.javac.tree.JCTree.Tag.*;
 import com.sun.tools.javac.util.JCDiagnostic.DiagnosticFlag;
-import java.util.stream.Stream;
 
 /** This is the main context-dependent analysis phase in GJC. It
  *  encompasses name resolution, type checking and constant folding as
  *  subtasks. Some subtasks involve auxiliary classes.
  *  @see Check
@@ -3893,20 +3893,11 @@
             boolean valid = false;
             if (allowReifiableTypesInInstanceof) {
                 if (preview.isPreview(Feature.REIFIABLE_TYPES_INSTANCEOF)) {
                     preview.warnPreview(tree.expr.pos(), Feature.REIFIABLE_TYPES_INSTANCEOF);
                 }
-                Warner warner = new Warner();
-                if (!types.isCastable(exprtype, clazztype, warner)) {
-                    chk.basicHandler.report(tree.expr.pos(),
-                                            diags.fragment(Fragments.InconvertibleTypes(exprtype, clazztype)));
-                } else if (warner.hasLint(LintCategory.UNCHECKED)) {
-                    log.error(tree.expr.pos(),
-                              Errors.InstanceofReifiableNotSafe(exprtype, clazztype));
-                } else {
-                    valid = true;
-                }
+                valid = verifyCastable(tree.expr.pos(), exprtype, clazztype);
             } else {
                 log.error(typeTree.pos(), Errors.IllegalGenericTypeForInstof);
             }
             if (!valid) {
                 clazztype = types.createErrorType(clazztype);
@@ -3936,43 +3927,61 @@
         matchBindings = new MatchBindings(List.of(tree.symbol), List.nil());
     }
 
     @Override
     public void visitDeconstructionPattern(JCDeconstructionPattern tree) {
-        Type site = tree.type = attribType(tree.deconstructor, env);
-        List<Type> recordTypes;
+        tree.type = attribType(tree.deconstructor, env);
+        Type site = types.removeWildcards(tree.type);
+        List<Type> expectedRecordTypes;
         if (site.tsym.kind == Kind.TYP && ((ClassSymbol) site.tsym).isRecord()) {
             ClassSymbol record = (ClassSymbol) site.tsym;
-            recordTypes = record.getRecordComponents().stream().map(rc -> rc.type).collect(List.collector());
+            expectedRecordTypes = record.getRecordComponents().stream().map(rc -> types.memberType(site, rc)).collect(List.collector());
             tree.record = record;
         } else {
             log.error(tree.pos(), Errors.DeconstructionPatternOnlyRecords(site.tsym));
-            recordTypes = Stream.generate(() -> Type.noType)
+            expectedRecordTypes = Stream.generate(() -> Type.noType)
                                 .limit(tree.nested.size())
                                 .collect(List.collector());
         }
         ListBuffer<BindingSymbol> outBindings = new ListBuffer<>();
+        List<Type> recordTypes = expectedRecordTypes;
         List<JCPattern> nestedPatterns = tree.nested;
         while (recordTypes.nonEmpty() && nestedPatterns.nonEmpty()) {
-            boolean nestedIsValidPattern = !nestedPatterns.head.hasTag(BINDINGPATTERN) ||
-                                           ((JCBindingPattern) nestedPatterns.head).vartype == null;
-            attribExpr(nestedPatterns.head, env, nestedIsValidPattern ? recordTypes.head : Type.noType);
+            boolean nestedIsVarPattern = nestedPatterns.head.hasTag(BINDINGPATTERN) &&
+                                         ((JCBindingPattern) nestedPatterns.head).vartype == null;
+            attribExpr(nestedPatterns.head, env, nestedIsVarPattern ? recordTypes.head : Type.noType);
+            verifyCastable(nestedPatterns.head.pos(), recordTypes.head, nestedPatterns.head.type);
             outBindings.addAll(matchBindings.bindingsWhenTrue);
             nestedPatterns = nestedPatterns.tail;
             recordTypes = recordTypes.tail;
         }
+        if (recordTypes.nonEmpty() || nestedPatterns.nonEmpty()) {
+            while (nestedPatterns.nonEmpty()) {
+                attribExpr(nestedPatterns.head, env, Type.noType);
+                nestedPatterns = nestedPatterns.tail;
+            }
+            List<Type> nestedTypes =
+                    tree.nested.stream().map(p -> p.type).collect(List.collector());
+            log.error(tree.pos(),
+                      Errors.IncorrectNumberOfNestedPatterns(expectedRecordTypes,
+                                                             nestedTypes));
+        }
         result = tree.type;
         matchBindings = new MatchBindings(outBindings.toList(), List.nil());
     }
 
-    private boolean isSubTypesIgnoreNone(List<Type> ts, List<Type> ss) {
-        while (ts.tail != null && ss.tail != null &&
-               (ts.head == Type.noType || types.isSubtype(ts.head, ss.head))) {
-            ts = ts.tail;
-            ss = ss.tail;
+    private boolean verifyCastable(DiagnosticPosition pos, Type exprtype, Type clazztype) {
+        Warner warner = new Warner();
+        if (!chk.checkCastable(pos, exprtype, clazztype, chk.basicHandler, warner)) {
+            return false;
+        } else if (warner.hasLint(LintCategory.UNCHECKED)) {
+            log.error(pos,
+                      Errors.InstanceofReifiableNotSafe(exprtype, clazztype));
+            return false;
+        } else {
+            return true;
         }
-        return ts.tail == null && ss.tail == null;
     }
 
     public void visitIndexed(JCArrayAccess tree) {
         Type owntype = types.createErrorType(tree.type);
         Type atype = attribExpr(tree.indexed, env);
@@ -5631,11 +5640,11 @@
                 that.symbol = new BindingSymbol(that.name, that.type, syms.noSymbol);
                 that.symbol.adr = 0;
             }
             super.visitBindingPattern(that);
         }
-        //XXX: DeconstructionPattern!!!!
+
         @Override
         public void visitNewClass(JCNewClass that) {
             if (that.constructor == null) {
                 that.constructor = new MethodSymbol(0, names.init,
                         dummyMethodType(), syms.noSymbol);
