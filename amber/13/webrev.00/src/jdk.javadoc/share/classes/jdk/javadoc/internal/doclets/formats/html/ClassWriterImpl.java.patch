diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ClassWriterImpl.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ClassWriterImpl.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ClassWriterImpl.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/ClassWriterImpl.java
@@ -43,14 +43,13 @@
 import com.sun.source.doctree.DocTree;
 import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;
 import jdk.javadoc.internal.doclets.formats.html.markup.Entity;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlAttr;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;
-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTag;
+import jdk.javadoc.internal.doclets.formats.html.markup.TagName;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;
-import jdk.javadoc.internal.doclets.formats.html.markup.Navigation;
-import jdk.javadoc.internal.doclets.formats.html.markup.Navigation.PageMode;
+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;
 import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;
 import jdk.javadoc.internal.doclets.toolkit.ClassWriter;
 import jdk.javadoc.internal.doclets.toolkit.Content;
 import jdk.javadoc.internal.doclets.toolkit.taglets.ParamTaglet;
 import jdk.javadoc.internal.doclets.toolkit.util.ClassTree;
@@ -113,12 +112,12 @@
         Content linkContent = getModuleLink(utils.elementUtils.getModuleOf(typeElement),
                 contents.moduleLabel);
         navBar.setNavLinkModule(linkContent);
         navBar.setMemberSummaryBuilder(configuration.getBuilderFactory().getMemberSummaryBuilder(this));
         navBar.setUserHeader(getUserHeaderFooter(true));
-        headerContent.add(navBar.getContent(true));
-        HtmlTree div = new HtmlTree(HtmlTag.DIV);
+        headerContent.add(navBar.getContent(Navigation.Position.TOP));
+        HtmlTree div = new HtmlTree(TagName.DIV);
         div.setStyle(HtmlStyle.header);
         if (configuration.showModules) {
             ModuleElement mdle = configuration.docEnv.getElementUtils().getModuleOf(typeElement);
             Content classModuleLabel = HtmlTree.SPAN(HtmlStyle.moduleLabelInType, contents.moduleLabel);
             Content moduleNameDiv = HtmlTree.DIV(HtmlStyle.subTitle, classModuleLabel);
@@ -139,11 +138,11 @@
         }
         LinkInfoImpl linkInfo = new LinkInfoImpl(configuration,
                 LinkInfoImpl.Kind.CLASS_HEADER, typeElement);
         //Let's not link to ourselves in the header.
         linkInfo.linkToSelf = false;
-        Content heading = HtmlTree.HEADING(Headings.PAGE_TITLE_HEADING, true,
+        Content heading = HtmlTree.HEADING_TITLE(Headings.PAGE_TITLE_HEADING,
                 HtmlStyle.title, new StringContent(header));
         heading.add(getTypeParameterLinks(linkInfo));
         div.add(heading);
         bodyContents.setHeader(headerContent)
                 .addMainContent(MarkerComments.START_OF_CLASS_DATA)
@@ -159,21 +158,21 @@
     @Override
     public void addFooter() {
         bodyContents.addMainContent(MarkerComments.END_OF_CLASS_DATA);
         Content htmlTree = HtmlTree.FOOTER();
         navBar.setUserFooter(getUserHeaderFooter(false));
-        htmlTree.add(navBar.getContent(false));
+        htmlTree.add(navBar.getContent(Navigation.Position.BOTTOM));
         addBottom(htmlTree);
         bodyContents.setFooter(htmlTree);
     }
 
     @Override
     public void printDocument(Content contentTree) throws DocFileIOException {
         String description = getDescription("declaration", typeElement);
         PackageElement pkg = utils.containingPackage(typeElement);
         List<DocPath> localStylesheets = getLocalStylesheets(pkg);
-        contentTree.add(bodyContents.toContent());
+        contentTree.add(bodyContents);
         printHtmlDocument(configuration.metakeywords.getMetaKeywords(typeElement),
                 description, localStylesheets, contentTree);
     }
 
     @Override
@@ -191,13 +190,13 @@
         return typeElement;
     }
 
     @Override @SuppressWarnings("preview")
     public void addClassSignature(String modifiers, Content classInfoTree) {
-        Content hr = new HtmlTree(HtmlTag.HR);
+        Content hr = new HtmlTree(TagName.HR);
         classInfoTree.add(hr);
-        Content pre = new HtmlTree(HtmlTag.PRE);
+        Content pre = new HtmlTree(TagName.PRE);
         addAnnotationInfo(typeElement, pre);
         pre.add(modifiers);
         LinkInfoImpl linkInfo = new LinkInfoImpl(configuration,
                 LinkInfoImpl.Kind.CLASS_SIGNATURE, typeElement);
         //Let's not link to ourselves in the signature.
@@ -213,40 +212,42 @@
             pre.add(span);
         }
         if (utils.isRecord(typeElement)) {
             pre.add(getRecordComponents(typeElement));
         }
-        if (!utils.isInterface(typeElement)) {
-            TypeMirror superclass = utils.getFirstVisibleSuperClass(typeElement);
-            if (superclass != null) {
-                pre.add(DocletConstants.NL);
-                pre.add("extends ");
-                Content link = getLink(new LinkInfoImpl(configuration,
-                        LinkInfoImpl.Kind.CLASS_SIGNATURE_PARENT_NAME,
-                        superclass));
-                pre.add(link);
-            }
-        }
-        List<? extends TypeMirror> interfaces = typeElement.getInterfaces();
-        if (!interfaces.isEmpty()) {
-            boolean isFirst = true;
-            for (TypeMirror type : interfaces) {
-                TypeElement tDoc = utils.asTypeElement(type);
-                if (!(utils.isPublic(tDoc) || utils.isLinkable(tDoc))) {
-                    continue;
-                }
-                if (isFirst) {
+        if (!utils.isAnnotationType(typeElement)) {
+            if (!utils.isInterface(typeElement)) {
+                TypeMirror superclass = utils.getFirstVisibleSuperClass(typeElement);
+                if (superclass != null) {
                     pre.add(DocletConstants.NL);
-                    pre.add(utils.isInterface(typeElement) ? "extends " : "implements ");
-                    isFirst = false;
-                } else {
-                    pre.add(", ");
+                    pre.add("extends ");
+                    Content link = getLink(new LinkInfoImpl(configuration,
+                            LinkInfoImpl.Kind.CLASS_SIGNATURE_PARENT_NAME,
+                            superclass));
+                    pre.add(link);
+                }
+            }
+            List<? extends TypeMirror> interfaces = typeElement.getInterfaces();
+            if (!interfaces.isEmpty()) {
+                boolean isFirst = true;
+                for (TypeMirror type : interfaces) {
+                    TypeElement tDoc = utils.asTypeElement(type);
+                    if (!(utils.isPublic(tDoc) || utils.isLinkable(tDoc))) {
+                        continue;
+                    }
+                    if (isFirst) {
+                        pre.add(DocletConstants.NL);
+                        pre.add(utils.isInterface(typeElement) ? "extends " : "implements ");
+                        isFirst = false;
+                    } else {
+                        pre.add(", ");
+                    }
+                    Content link = getLink(new LinkInfoImpl(configuration,
+                            LinkInfoImpl.Kind.CLASS_SIGNATURE_PARENT_NAME,
+                            type));
+                    pre.add(link);
                 }
-                Content link = getLink(new LinkInfoImpl(configuration,
-                                                        LinkInfoImpl.Kind.CLASS_SIGNATURE_PARENT_NAME,
-                                                        type));
-                pre.add(link);
             }
         }
         classInfoTree.add(pre);
     }
 
@@ -406,11 +407,11 @@
         }
     }
 
     @Override
     public void addImplementedInterfacesInfo(Content classInfoTree) {
-        SortedSet<TypeMirror> interfaces = new TreeSet<>(utils.makeTypeMirrorClassUseComparator());
+        SortedSet<TypeMirror> interfaces = new TreeSet<>(comparators.makeTypeMirrorClassUseComparator());
         interfaces.addAll(utils.getAllInterfaces(typeElement));
         if (utils.isClass(typeElement) && !interfaces.isEmpty()) {
             HtmlTree dl = HtmlTree.DL(HtmlStyle.notes);
             dl.add(HtmlTree.DT(contents.allImplementedInterfacesLabel));
             dl.add(HtmlTree.DD(getClassLinks(LinkInfoImpl.Kind.IMPLEMENTED_INTERFACES, interfaces)));
@@ -419,11 +420,11 @@
     }
 
     @Override
     public void addSuperInterfacesInfo(Content classInfoTree) {
         SortedSet<TypeMirror> interfaces =
-                new TreeSet<>(utils.makeTypeMirrorIndexUseComparator());
+                new TreeSet<>(comparators.makeTypeMirrorIndexUseComparator());
         interfaces.addAll(utils.getAllInterfaces(typeElement));
 
         if (utils.isInterface(typeElement) && !interfaces.isEmpty()) {
             HtmlTree dl = HtmlTree.DL(HtmlStyle.notes);
             dl.add(HtmlTree.DT(contents.allSuperinterfacesLabel));
@@ -442,11 +443,11 @@
             public Void visitType(TypeElement e, Void p) {
                 HtmlTree dl = HtmlTree.DL(HtmlStyle.notes);
                 dl.add(HtmlTree.DT(utils.isInterface(e)
                         ? contents.enclosingInterfaceLabel
                         : contents.enclosingClassLabel));
-                Content dd = new HtmlTree(HtmlTag.DD);
+                Content dd = new HtmlTree(TagName.DD);
                 dd.add(getLink(new LinkInfoImpl(configuration,
                         LinkInfoImpl.Kind.CLASS, e)));
                 dl.add(dd);
                 classInfoTree.add(dl);
                 return null;
@@ -457,11 +458,11 @@
     @Override
     public void addFunctionalInterfaceInfo (Content classInfoTree) {
         if (isFunctionalInterface()) {
             HtmlTree dl = HtmlTree.DL(HtmlStyle.notes);
             dl.add(HtmlTree.DT(contents.functionalInterface));
-            Content dd = new HtmlTree(HtmlTag.DD);
+            Content dd = new HtmlTree(TagName.DD);
             dd.add(contents.functionalInterfaceMessage);
             dl.add(dd);
             classInfoTree.add(dl);
         }
     }
@@ -533,6 +534,21 @@
      */
     @Override
     public TypeElement getTypeElement() {
         return typeElement;
     }
+
+    /**
+     * Get the member details tree
+     *
+     * @param contentTree the tree used to generate the member details tree
+     * @return a content tree for the member details
+     */
+    public Content getMemberDetailsTree(Content contentTree) {
+        HtmlTree section = HtmlTree.SECTION(HtmlStyle.details, contentTree);
+        // The following id is required by the Navigation bar
+        if (utils.isAnnotationType(typeElement)) {
+            section.setId(SectionName.ANNOTATION_TYPE_ELEMENT_DETAIL.getName());
+        }
+        return section;
+    }
 }
