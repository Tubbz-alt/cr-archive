diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/IndexBuilder.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/IndexBuilder.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/IndexBuilder.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/IndexBuilder.java
@@ -31,10 +31,11 @@
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ModuleElement;
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 
+import jdk.javadoc.internal.doclets.formats.html.SearchIndexItem;
 import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;
 import jdk.javadoc.internal.doclets.toolkit.Messages;
 
 import static jdk.javadoc.internal.doclets.toolkit.util.VisibleMemberTable.Kind.*;
 
@@ -50,11 +51,11 @@
 
     /**
      * Sets of elements keyed by the first character of the names of the
      * elements in those sets.
      */
-    private final Map<Character, SortedSet<Element>> indexMap;
+    private final Map<Character, SortedSet<IndexItem>> indexMap;
 
     /**
      * Don't generate deprecated information if true.
      */
     private final boolean noDeprecated;
@@ -64,11 +65,11 @@
      */
     private final boolean classesOnly;
 
     private final BaseConfiguration configuration;
     private final Utils utils;
-    private final Comparator<Element> comparator;
+    private final Comparator<IndexItem> comparator;
 
     /**
      * Creates a new {@code IndexBuilder}.
      *
      * @param configuration the current configuration of the doclet
@@ -104,22 +105,20 @@
         }
 
         this.noDeprecated = noDeprecated;
         this.classesOnly = classesOnly;
         this.indexMap = new TreeMap<>();
-        comparator = classesOnly
-                ? utils.makeAllClassesComparator()
-                : utils.makeIndexUseComparator();
+        comparator = utils.comparators.makeIndexComparator(classesOnly);
         buildIndex();
     }
 
     /**
      * Indexes all the members in all the packages and all the classes.
      */
     private void buildIndex()  {
         Set<TypeElement> classes = configuration.getIncludedTypeElements();
-        indexElements(classes);
+        indexTypeElements(classes);
         if (classesOnly) {
             return;
         }
         Set<PackageElement> packages = configuration.getSpecifiedPackageElements();
         if (packages.isEmpty()) {
@@ -127,11 +126,11 @@
                     .stream()
                     .map(utils::containingPackage)
                     .filter(_package -> _package != null && !_package.isUnnamed())
                     .collect(Collectors.toSet());
         }
-        indexElements(packages);
+        packages.forEach(this::indexPackage);
         classes.stream()
                .filter(this::shouldIndex)
                .forEach(this::indexMembers);
 
         if (configuration.showModules) {
@@ -145,31 +144,46 @@
      *
      * @param te TypeElement whose members are to be indexed
      */
     private void indexMembers(TypeElement te) {
         VisibleMemberTable vmt = configuration.getVisibleMemberTable(te);
-        indexElements(vmt.getMembers(ANNOTATION_TYPE_FIELDS));
-        indexElements(vmt.getMembers(FIELDS));
-        indexElements(vmt.getMembers(METHODS));
-        indexElements(vmt.getMembers(CONSTRUCTORS));
-        indexElements(vmt.getMembers(ENUM_CONSTANTS));
+        indexElements(vmt.getVisibleMembers(FIELDS), te);
+        indexElements(vmt.getVisibleMembers(ANNOTATION_TYPE_MEMBER_OPTIONAL), te);
+        indexElements(vmt.getVisibleMembers(ANNOTATION_TYPE_MEMBER_REQUIRED), te);
+        indexElements(vmt.getVisibleMembers(METHODS), te);
+        indexElements(vmt.getVisibleMembers(CONSTRUCTORS), te);
+        indexElements(vmt.getVisibleMembers(ENUM_CONSTANTS), te);
     }
 
     /**
      * Indexes the provided elements.
      *
      * @param elements a collection of elements
      */
-    private void indexElements(Iterable<? extends Element> elements) {
+    private void indexElements(Iterable<? extends Element> elements, TypeElement typeElement) {
         for (Element element : elements) {
             if (shouldIndex(element)) {
-                String name = utils.isPackage(element)
-                        ? utils.getPackageName((PackageElement) element)
-                        : utils.getSimpleName(element);
+                String name = utils.getSimpleName(element);
                 Character ch = keyCharacter(name);
-                SortedSet<Element> set = indexMap.computeIfAbsent(ch, c -> new TreeSet<>(comparator));
-                set.add(element);
+                SortedSet<IndexItem> set = indexMap.computeIfAbsent(ch, c -> new TreeSet<>(comparator));
+                set.add(new IndexItem(element, typeElement, configuration.utils));
+            }
+        }
+    }
+
+    /**
+     * Index the given type elements.
+     *
+     * @param elements type elements
+     */
+    private void indexTypeElements(Iterable<TypeElement> elements) {
+        for (TypeElement typeElement : elements) {
+            if (shouldIndex(typeElement)) {
+                String name = utils.getSimpleName(typeElement);
+                Character ch = keyCharacter(name);
+                SortedSet<IndexItem> set = indexMap.computeIfAbsent(ch, c -> new TreeSet<>(comparator));
+                set.add(new IndexItem(typeElement, configuration.utils));
             }
         }
     }
 
     private static Character keyCharacter(String s) {
@@ -180,12 +194,25 @@
      * Indexes all the modules.
      */
     private void indexModules() {
         for (ModuleElement m : configuration.modules) {
             Character ch = keyCharacter(m.getQualifiedName().toString());
-            SortedSet<Element> set = indexMap.computeIfAbsent(ch, c -> new TreeSet<>(comparator));
-            set.add(m);
+            SortedSet<IndexItem> set = indexMap.computeIfAbsent(ch, c -> new TreeSet<>(comparator));
+            set.add(new IndexItem(m, configuration.utils));
+        }
+    }
+
+    /**
+     * Index the given package element.
+     *
+     * @param packageElement the package element
+     */
+    private void indexPackage(PackageElement packageElement) {
+        if (shouldIndex(packageElement)) {
+            Character ch = keyCharacter(utils.getPackageName(packageElement));
+            SortedSet<IndexItem> set = indexMap.computeIfAbsent(ch, c -> new TreeSet<>(comparator));
+            set.add(new IndexItem(packageElement, configuration.utils));
         }
     }
 
     /**
      * Should this element be added to the index?
@@ -212,23 +239,23 @@
     /**
      * Returns a map representation of this index.
      *
      * @return map
      */
-    public Map<Character, SortedSet<Element>> asMap() {
+    public Map<Character, SortedSet<IndexItem>> asMap() {
         return indexMap;
     }
 
     /**
      * Returns a sorted list of elements whose names start with the
      * provided character.
      *
      * @param key index key
      * @return list of elements keyed by the provided character
      */
-    public List<? extends Element> getMemberList(Character key) {
-        SortedSet<Element> set = indexMap.get(key);
+    public List<IndexItem> getMemberList(Character key) {
+        SortedSet<IndexItem> set = indexMap.get(key);
         if (set == null) {
             return null;
         }
         return new ArrayList<>(set);
     }
@@ -237,6 +264,20 @@
      * Returns a list of index keys.
      */
     public List<Character> keys() {
         return new ArrayList<>(indexMap.keySet());
     }
+
+    /**
+     * Add search tags for the key {@code key}.
+     *
+     * @param key the index key
+     * @param searchTags the search tags
+     */
+    public void addSearchTags(char key, List<SearchIndexItem> searchTags) {
+        searchTags.forEach(searchTag -> {
+            SortedSet<IndexItem> set = indexMap.computeIfAbsent(key, c -> new TreeSet<>(comparator));
+            set.add(new IndexItem(searchTag));
+        });
+    }
+
 }
