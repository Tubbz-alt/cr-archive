diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/AnnotationTypeRequiredMemberBuilder.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/AnnotationTypeRequiredMemberBuilder.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/AnnotationTypeRequiredMemberBuilder.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/AnnotationTypeRequiredMemberBuilder.java
@@ -76,11 +76,11 @@
     protected AnnotationTypeRequiredMemberBuilder(Context context,
             TypeElement typeElement,
             AnnotationTypeRequiredMemberWriter writer,
             VisibleMemberTable.Kind memberType) {
         super(context, typeElement);
-        this.writer = writer;
+        this.writer = Objects.requireNonNull(writer);
         this.members = getVisibleMembers(memberType);
     }
 
 
     /**
@@ -124,32 +124,30 @@
     }
 
     /**
      * Build the member documentation.
      *
-     * @param memberDetailsTree the content tree to which the documentation will be added
+     * @param detailsList the content tree to which the documentation will be added
      * @throws DocletException if an error occurs
      */
-    protected void buildAnnotationTypeMember(Content memberDetailsTree)
+    protected void buildAnnotationTypeMember(Content detailsList)
             throws DocletException {
-        if (writer == null) {
-            return;
-        }
         if (hasMembersToDocument()) {
-            writer.addAnnotationDetailsMarker(memberDetailsTree);
+            writer.addAnnotationDetailsMarker(detailsList);
             Content annotationDetailsTreeHeader = writer.getAnnotationDetailsTreeHeader();
-            Content detailsTree = writer.getMemberTreeHeader();
+            Content memberList = writer.getMemberList();
 
             for (Element member : members) {
                 currentMember = member;
                 Content annotationDocTree = writer.getAnnotationDocTreeHeader(currentMember);
 
                 buildAnnotationTypeMemberChildren(annotationDocTree);
 
-                detailsTree.add(writer.getAnnotationDoc(annotationDocTree));
+                memberList.add(writer.getMemberListItem(annotationDocTree));
             }
-            memberDetailsTree.add(writer.getAnnotationDetails(annotationDetailsTreeHeader, detailsTree));
+            Content annotationDetails = writer.getAnnotationDetails(annotationDetailsTreeHeader, memberList);
+            detailsList.add(annotationDetails);
         }
     }
 
     protected void buildAnnotationTypeMemberChildren(Content annotationDocTree) {
         buildSignature(annotationDocTree);
@@ -176,11 +174,11 @@
         writer.addDeprecated(currentMember, annotationDocTree);
     }
 
     /**
      * Build the comments for the member.  Do nothing if
-     * {@link BaseOptions#noComment} is set to true.
+     * {@link BaseOptions#noComment()} is set to true.
      *
      * @param annotationDocTree the content tree to which the documentation will be added
      */
     protected void buildMemberComments(Content annotationDocTree) {
         if (!options.noComment()) {
