diff a/src/jdk.jdi/share/native/libdt_shmem/shmemBase.c b/src/jdk.jdi/share/native/libdt_shmem/shmemBase.c
--- a/src/jdk.jdi/share/native/libdt_shmem/shmemBase.c
+++ b/src/jdk.jdi/share/native/libdt_shmem/shmemBase.c
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -59,10 +59,25 @@
                                   setLastError(error); \
                                   return error; \
                               } \
                           } while (0)
 
+#define ENTER_CONNECTION(connection) \
+        do { \
+            InterlockedIncrement(&connection->refcount); \
+            if (IS_STATE_CLOSED(connection->state)) { \
+                setLastErrorMsg("stream closed"); \
+                InterlockedDecrement(&connection->refcount); \
+                return SYS_ERR; \
+            } \
+        } while (0)
+
+#define LEAVE_CONNECTION(connection) \
+        do { \
+            InterlockedDecrement(&connection->refcount); \
+        } while (0)
+
 /*
  * The following assertions should hold anytime the stream's mutex is not held
  */
 #define STREAM_INVARIANT(stream) \
         do { \
@@ -152,10 +167,12 @@
     sys_shmem_t sharedMemory;
     Stream incoming;
     Stream outgoing;
     sys_process_t otherProcess;
     sys_event_t shutdown;           /* signalled to indicate shutdown */
+    volatile DWORD32 refcount;
+    jint state;
 } SharedMemoryConnection;
 
 static jdwpTransportCallback *callback;
 static JavaVM *jvm;
 static int tlsIndex;
@@ -359,11 +376,11 @@
     return sysEventSignal(stream->hasData);
 }
 
 
 static jint
-closeStream(Stream *stream, jboolean linger)
+closeStream(Stream *stream, jboolean linger, volatile DWORD32 *refcount)
 {
     /*
      * Lock stream during close - ignore shutdown event as we are
      * closing down and shutdown should be signalled.
      */
@@ -371,14 +388,12 @@
 
     /* mark the stream as closed */
     stream->state = STATE_CLOSED;
     /* wake up waitForData() if it is in sysEventWait() */
     sysEventSignal(stream->hasData);
-    sysEventClose(stream->hasData);
     /* wake up waitForSpace() if it is in sysEventWait() */
     sysEventSignal(stream->hasSpace);
-    sysEventClose(stream->hasSpace);
 
     /*
      * If linger requested then give the stream a few seconds to
      * drain before closing it.
      */
@@ -391,12 +406,24 @@
             attempts--;
         }
     }
 
     CHECK_ERROR(leaveMutex(stream));
-    sysIPMutexClose(stream->mutex);
-    return SYS_OK;
+
+    /* Attempt to close resources */
+    int attempts = 10;
+    while (attempts > 0) {
+        if (*refcount == 0) {
+            sysEventClose(stream->hasData);
+            sysEventClose(stream->hasSpace);
+            sysIPMutexClose(stream->mutex);
+            return SYS_OK;
+        }
+        sysSleep(200);
+        attempts--;
+    }
+    return SYS_ERR;
 }
 
 /*
  * Server creates stream.
  */
@@ -415,19 +442,20 @@
 
     sprintf(objectName, "%s.hasData", name);
     error = createWithGeneratedName(objectName, stream->shared->hasDataEventName,
                                     createEvent, &stream->hasData);
     if (error != SYS_OK) {
-        (void)closeStream(stream, JNI_FALSE);
+        sysIPMutexClose(stream->mutex);
         return error;
     }
 
     sprintf(objectName, "%s.hasSpace", name);
     error = createWithGeneratedName(objectName, stream->shared->hasSpaceEventName,
                                     createEvent, &stream->hasSpace);
     if (error != SYS_OK) {
-        (void)closeStream(stream, JNI_FALSE);
+        sysIPMutexClose(stream->mutex);
+        sysEventClose(stream->hasData);
         return error;
     }
 
     stream->shared->readOffset = 0;
     stream->shared->writeOffset = 0;
@@ -449,19 +477,20 @@
 
     error = sysEventOpen(stream->shared->hasDataEventName,
                              &stream->hasData);
     if (error != SYS_OK) {
         setLastError(error);
-        (void)closeStream(stream, JNI_FALSE);
+        sysIPMutexClose(stream->mutex);
         return error;
     }
 
     error = sysEventOpen(stream->shared->hasSpaceEventName,
                              &stream->hasSpace);
     if (error != SYS_OK) {
         setLastError(error);
-        (void)closeStream(stream, JNI_FALSE);
+        sysIPMutexClose(stream->mutex);
+        sysEventClose(stream->hasData);
         return error;
     }
 
     stream->state = STATE_OPEN;
 
@@ -478,10 +507,11 @@
      */
     SharedMemoryConnection *conn = (*callback->alloc)(sizeof(SharedMemoryConnection));
     if (conn != NULL) {
         memset(conn, 0, sizeof(SharedMemoryConnection));
     }
+    conn->state = STATE_OPEN;
     return conn;
 }
 
 static void
 freeConnection(SharedMemoryConnection *connection)
@@ -490,41 +520,41 @@
 }
 
 static void
 closeConnection(SharedMemoryConnection *connection)
 {
+    /* mark the connection as closed */
+    connection->state = STATE_CLOSED;
+
     /*
      * Signal all threads accessing this connection that we are
      * shutting down.
      */
     if (connection->shutdown) {
         sysEventSignal(connection->shutdown);
     }
 
-
-    (void)closeStream(&connection->outgoing, JNI_TRUE);
-    (void)closeStream(&connection->incoming, JNI_FALSE);
-
-    if (connection->sharedMemory) {
-        sysSharedMemClose(connection->sharedMemory, connection->shared);
+    Stream * stream = &connection->outgoing;
+    if (stream->state == STATE_OPEN) {
+        (void)closeStream(stream, JNI_TRUE, &connection->refcount);
     }
-    if (connection->otherProcess) {
-        sysProcessClose(connection->otherProcess);
+    stream = &connection->incoming;
+    if (stream->state == STATE_OPEN) {
+        (void)closeStream(stream, JNI_FALSE, &connection->refcount);
     }
 
-    /*
-     * Ideally we should close the connection->shutdown event and
-     * free the connection structure. However as closing the
-     * connection is asynchronous it means that other threads may
-     * still be accessing the connection structure. On Win32 this
-     * means we leak 132 bytes and one event per connection. This
-     * memory will be reclaim at process exit.
-     *
-     * if (connection->shutdown)
-     *     sysEventClose(connection->shutdown);
-     * freeConnection(connection);
-     */
+    if (connection->refcount == 0) {
+        if (connection->sharedMemory) {
+            sysSharedMemClose(connection->sharedMemory, connection->shared);
+        }
+        if (connection->otherProcess) {
+            sysProcessClose(connection->otherProcess);
+        }
+        if (connection->shutdown) {
+            sysEventClose(connection->shutdown);
+        }
+    }
 }
 
 
 /*
  * For client: connect to the shared memory.  Open incoming and
@@ -543,34 +573,37 @@
 
     sprintf(connection->name, "%s.%" PRId64, transport->name, sysProcessGetID());
     error = sysSharedMemOpen(connection->name, &connection->sharedMemory,
                              &connection->shared);
     if (error != SYS_OK) {
-        closeConnection(connection);
+        freeConnection(connection);
         return error;
     }
 
     /* This process is the client */
     connection->incoming.shared = &connection->shared->toClient;
     connection->outgoing.shared = &connection->shared->toServer;
 
     error = openStream(&connection->incoming);
     if (error != SYS_OK) {
         closeConnection(connection);
+        freeConnection(connection);
         return error;
     }
 
     error = openStream(&connection->outgoing);
     if (error != SYS_OK) {
         closeConnection(connection);
+        freeConnection(connection);
         return error;
     }
 
     error = sysProcessOpen(otherPID, &connection->otherProcess);
     if (error != SYS_OK) {
         setLastError(error);
         closeConnection(connection);
+        freeConnection(connection);
         return error;
     }
 
     /*
      * Create an event that signals that the connection is shutting
@@ -580,10 +613,11 @@
      */
     error = sysEventCreate(NULL, &connection->shutdown, JNI_TRUE);
     if (error != SYS_OK) {
         setLastError(error);
         closeConnection(connection);
+        freeConnection(connection);
         return error;
     }
 
     *connectionPtr = connection;
     return SYS_OK;
@@ -607,11 +641,11 @@
 
     sprintf(connection->name, "%s.%" PRId64, transport->name, otherPID);
     error = sysSharedMemCreate(connection->name, sizeof(SharedMemory),
                                &connection->sharedMemory, &connection->shared);
     if (error != SYS_OK) {
-        closeConnection(connection);
+        freeConnection(connection);
         return error;
     }
 
     memset(connection->shared, 0, sizeof(SharedMemory));
 
@@ -622,25 +656,28 @@
     strcpy(streamName, connection->name);
     strcat(streamName, ".ctos");
     error = createStream(streamName, &connection->incoming);
     if (error != SYS_OK) {
         closeConnection(connection);
+        freeConnection(connection);
         return error;
     }
 
     strcpy(streamName, connection->name);
     strcat(streamName, ".stoc");
     error = createStream(streamName, &connection->outgoing);
     if (error != SYS_OK) {
         closeConnection(connection);
+        freeConnection(connection);
         return error;
     }
 
     error = sysProcessOpen(otherPID, &connection->otherProcess);
     if (error != SYS_OK) {
         setLastError(error);
         closeConnection(connection);
+        freeConnection(connection);
         return error;
     }
 
     /*
      * Create an event that signals that the connection is shutting
@@ -650,10 +687,11 @@
      */
     error = sysEventCreate(NULL, &connection->shutdown, JNI_TRUE);
     if (error != SYS_OK) {
         setLastError(error);
         closeConnection(connection);
+        freeConnection(connection);
         return error;
     }
 
     *connectionPtr = connection;
     return SYS_OK;
@@ -845,21 +883,21 @@
          * Reject the attacher
          */
         transport->shared->isAccepted = JNI_FALSE;
         sysEventSignal(transport->acceptEvent);
 
-        freeConnection(connection);
         return error;
     }
 
     transport->shared->isAccepted = JNI_TRUE;
     error = sysEventSignal(transport->acceptEvent);
     if (error != SYS_OK) {
         /*
          * No real point trying to reject it.
          */
         closeConnection(connection);
+        freeConnection(connection);
         return error;
     }
 
     *connectionPtr = connection;
     return SYS_OK;
@@ -925,21 +963,41 @@
 void
 shmemBase_closeConnection(SharedMemoryConnection *connection)
 {
     clearLastError();
     closeConnection(connection);
+    /*
+     * Ideally we should free the connection structure. However,
+     * since the connection has already being published, other
+     * threads may still be accessing it. In particular, refcount
+     * and state fields could be accessed at any time even after
+     * closing the connection. On Win32 this means we leak 140
+     * bytes. This memory will be reclaimed at process exit.
+     *
+     * In general reference counting should exist externally to
+     * the object being managed so that it can be freed. If we
+     * want to free SharedMemoryConnection, one alternative could
+     * be to define a new struct X and move all those fields there
+     * except refcount and state. We would have a pointer to a
+     * dynamically allocated X from SharedMemoryConnection. Then
+     * if refcount is 0 we could also free X. This would leak
+     * 12 bytes instead of 140.
+     *
+     * freeConnection(connection);
+     *
+     */
 }
 
 void
 shmemBase_closeTransport(SharedMemoryTransport *transport)
 {
     clearLastError();
     closeTransport(transport);
 }
 
-jint
-shmemBase_sendByte(SharedMemoryConnection *connection, jbyte data)
+static jint
+shmemBase_sendByte_internal(SharedMemoryConnection *connection, jbyte data)
 {
     Stream *stream = &connection->outgoing;
     SharedStream *shared = stream->shared;
     int offset;
 
@@ -960,11 +1018,20 @@
 
     return SYS_OK;
 }
 
 jint
-shmemBase_receiveByte(SharedMemoryConnection *connection, jbyte *data)
+shmemBase_sendByte(SharedMemoryConnection *connection, jbyte data)
+{
+    ENTER_CONNECTION(connection);
+    jint rc = shmemBase_sendByte_internal(connection, data);
+    LEAVE_CONNECTION(connection);
+    return rc;
+}
+
+static jint
+shmemBase_receiveByte_internal(SharedMemoryConnection *connection, jbyte *data)
 {
     Stream *stream = &connection->incoming;
     SharedStream *shared = stream->shared;
     int offset;
 
@@ -984,10 +1051,19 @@
     CHECK_ERROR(signalSpace(stream));
 
     return SYS_OK;
 }
 
+jint
+shmemBase_receiveByte(SharedMemoryConnection *connection, jbyte *data)
+{
+    ENTER_CONNECTION(connection);
+    jint rc = shmemBase_receiveByte_internal(connection, data);
+    LEAVE_CONNECTION(connection);
+    return rc;
+}
+
 static jint
 sendBytes(SharedMemoryConnection *connection, const void *bytes, jint length)
 {
     Stream *stream = &connection->outgoing;
     SharedStream *shared = stream->shared;
@@ -1028,12 +1104,12 @@
 
 
 /*
  * Send packet header followed by data.
  */
-jint
-shmemBase_sendPacket(SharedMemoryConnection *connection, const jdwpPacket *packet)
+static jint
+shmemBase_sendPacket_internal(SharedMemoryConnection *connection, const jdwpPacket *packet)
 {
     jint data_length;
 
     clearLastError();
 
@@ -1056,10 +1132,19 @@
     }
 
     return SYS_OK;
 }
 
+jint
+shmemBase_sendPacket(SharedMemoryConnection *connection, const jdwpPacket *packet)
+{
+    ENTER_CONNECTION(connection);
+    jint rc = shmemBase_sendPacket_internal(connection, packet);
+    LEAVE_CONNECTION(connection);
+    return rc;
+}
+
 static jint
 receiveBytes(SharedMemoryConnection *connection, void *bytes, jint length)
 {
     Stream *stream = &connection->incoming;
     SharedStream *shared = stream->shared;
@@ -1098,12 +1183,12 @@
 
 /*
  * Read packet header and insert into packet structure.
  * Allocate space for the data and fill it in.
  */
-jint
-shmemBase_receivePacket(SharedMemoryConnection *connection, jdwpPacket *packet)
+static jint
+shmemBase_receivePacket_internal(SharedMemoryConnection *connection, jdwpPacket *packet)
 {
     jint data_length;
     jint error;
 
     clearLastError();
@@ -1140,10 +1225,19 @@
     }
 
     return SYS_OK;
 }
 
+jint
+shmemBase_receivePacket(SharedMemoryConnection *connection, jdwpPacket *packet)
+{
+    ENTER_CONNECTION(connection);
+    jint rc = shmemBase_receivePacket_internal(connection, packet);
+    LEAVE_CONNECTION(connection);
+    return rc;
+}
+
 jint
 shmemBase_name(struct SharedMemoryTransport *transport, char **name)
 {
     *name = transport->name;
     return SYS_OK;
