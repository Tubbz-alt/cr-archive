diff a/src/jdk.crypto.ec/share/classes/sun/security/ec/ECDSASignature.java b/src/jdk.crypto.ec/share/classes/sun/security/ec/ECDSASignature.java
--- a/src/jdk.crypto.ec/share/classes/sun/security/ec/ECDSASignature.java
+++ b/src/jdk.crypto.ec/share/classes/sun/security/ec/ECDSASignature.java
@@ -461,10 +461,18 @@
         Optional<byte[]> sigOpt = signDigestAvailable(privateKey, digest, random);
         byte[] sig;
         if (sigOpt.isPresent()) {
             sig = sigOpt.get();
         } else {
+            if (SunEC.isNativeDisabled()) {
+                NamedCurve nc = CurveDB.lookup(privateKey.getParams());
+                throw new SignatureException(
+                        new InvalidAlgorithmParameterException(
+                                "Legacy SunEC curve disabled:  " +
+                                        (nc != null ? nc.toString()
+                                                : "unknown")));
+            }
             sig = signDigestNative(privateKey, digest, random);
         }
 
         if (p1363Format) {
             return sig;
@@ -489,10 +497,19 @@
                 = verifySignedDigestAvailable(publicKey, sig, digest);
 
         if (verifyOpt.isPresent()) {
             return verifyOpt.get();
         } else {
+            if (SunEC.isNativeDisabled()) {
+                NamedCurve nc = CurveDB.lookup(publicKey.getParams());
+                throw new SignatureException(
+                        new InvalidAlgorithmParameterException(
+                                "Legacy SunEC curve disabled:  " +
+                                        (nc != null ? nc.toString()
+                                                : "unknown")));
+            }
+
             byte[] w;
             ECParameterSpec params = publicKey.getParams();
             // DER OID
             byte[] encodedParams = ECUtil.encodeECParameterSpec(null, params);
 
