diff a/src/jdk.crypto.ec/share/classes/sun/security/ec/SunEC.java b/src/jdk.crypto.ec/share/classes/sun/security/ec/SunEC.java
--- a/src/jdk.crypto.ec/share/classes/sun/security/ec/SunEC.java
+++ b/src/jdk.crypto.ec/share/classes/sun/security/ec/SunEC.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2009, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -23,12 +23,21 @@
  * questions.
  */
 
 package sun.security.ec;
 
-import java.util.*;
-import java.security.*;
+import java.security.AccessController;
+import java.security.InvalidParameterException;
+import java.security.NoSuchAlgorithmException;
+import java.security.PrivilegedAction;
+import java.security.Provider;
+import java.security.ProviderException;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
 import java.util.regex.Pattern;
 import sun.security.util.CurveDB;
 import sun.security.util.NamedCurve;
 
 import static sun.security.util.SecurityConstants.PROVIDER_VER;
@@ -51,26 +60,40 @@
  */
 public final class SunEC extends Provider {
 
     private static final long serialVersionUID = -2279741672933606418L;
 
-    // flag indicating whether the full EC implementation is present
-    // (when native library is absent then fewer EC algorithms are available)
-    private static boolean useFullImplementation = true;
+    // This flag is true if the native library is disabled or not loaded.
+    private static boolean disableNative = true;
+
     static {
-        try {
-            AccessController.doPrivileged(new PrivilegedAction<Void>() {
-                public Void run() {
-                    System.loadLibrary("sunec"); // check for native library
-                    return null;
-                }
-            });
-        } catch (UnsatisfiedLinkError e) {
-            useFullImplementation = false;
+        String s = sun.security.action.GetPropertyAction.privilegedGetProperty(
+                "jdk.sunec.disableNative");
+        if (s != null && s.equalsIgnoreCase("false")) {
+            disableNative = false;
+        }
+
+        // If native is enabled, verify the library is available.
+        if (!disableNative) {
+            try {
+                AccessController.doPrivileged(new PrivilegedAction<Void>() {
+                    public Void run() {
+                        System.loadLibrary("sunec"); // check for native library
+                        return null;
+                    }
+                });
+            } catch (UnsatisfiedLinkError e) {
+                disableNative = true;
+            }
         }
     }
 
+    // Check if native library support is disabled.
+    static boolean isNativeDisabled() {
+        return SunEC.disableNative;
+    }
+
     private static class ProviderService extends Provider.Service {
 
         ProviderService(Provider p, String type, String algo, String cn) {
             super(p, type, algo, cn, null, null);
         }
@@ -163,17 +186,17 @@
     public SunEC() {
         super("SunEC", PROVIDER_VER,
             "Sun Elliptic Curve provider (EC, ECDSA, ECDH)");
         AccessController.doPrivileged(new PrivilegedAction<Void>() {
             public Void run() {
-                putEntries(useFullImplementation);
+                putEntries();
                 return null;
             }
         });
     }
 
-    void putEntries(boolean useFullImplementation) {
+    void putEntries() {
         HashMap<String, String> ATTRS = new HashMap<>(3);
         ATTRS.put("ImplementedIn", "Software");
         String ecKeyClasses = "java.security.interfaces.ECPublicKey" +
                  "|java.security.interfaces.ECPrivateKey";
         ATTRS.put("SupportedKeyClasses", ecKeyClasses);
@@ -192,12 +215,20 @@
         // "AlgorithmParameters.EC SupportedCurves" prop used by unit test
         boolean firstCurve = true;
         StringBuilder names = new StringBuilder();
         Pattern nameSplitPattern = Pattern.compile(CurveDB.SPLIT_PATTERN);
 
-        Collection<? extends NamedCurve> supportedCurves =
-            CurveDB.getSupportedCurves();
+        Collection<? extends NamedCurve> supportedCurves;
+        if (SunEC.isNativeDisabled()) {
+            supportedCurves = Collections.unmodifiableList(List.of(
+                    CurveDB.lookup("secp256r1"),
+                    CurveDB.lookup("secp384r1"),
+                    CurveDB.lookup("secp521r1")));
+        } else {
+            supportedCurves = CurveDB.getSupportedCurves();
+        }
+
         for (NamedCurve namedCurve : supportedCurves) {
             if (!firstCurve) {
                 names.append("|");
             } else {
                 firstCurve = false;
@@ -223,18 +254,10 @@
             new String[] { "EllipticCurve", "1.2.840.10045.2.1", "OID.1.2.840.10045.2.1" },
             apAttrs));
 
         putXDHEntries();
 
-        /*
-         * Register the algorithms below only when the full ECC implementation
-         * is available
-         */
-        if (!useFullImplementation) {
-            return;
-        }
-
         /*
          * Signature engines
          */
         putService(new ProviderService(this, "Signature",
             "NONEwithECDSA", "sun.security.ec.ECDSASignature$Raw",
