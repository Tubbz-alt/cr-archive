diff a/src/java.net.http/share/classes/java/net/http/HttpRequest.java b/src/java.net.http/share/classes/java/net/http/HttpRequest.java
--- a/src/java.net.http/share/classes/java/net/http/HttpRequest.java
+++ b/src/java.net.http/share/classes/java/net/http/HttpRequest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -29,10 +29,12 @@
 import java.io.InputStream;
 import java.net.URI;
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.OpenOption;
 import java.nio.file.Path;
 import java.time.Duration;
 import java.util.Iterator;
 import java.util.Objects;
 import java.util.Optional;
@@ -612,16 +614,20 @@
          *
          * <p> Security manager permission checks are performed in this factory
          * method, when the {@code BodyPublisher} is created. Care must be taken
          * that the {@code BodyPublisher} is not shared with untrusted code.
          *
-         * @param path the path to the file containing the body
+         * @param  path the path to the file containing the body
          * @return a BodyPublisher
          * @throws java.io.FileNotFoundException if the path is not found
-         * @throws SecurityException if a security manager has been installed
-         *          and it denies {@link SecurityManager#checkRead(String)
-         *          read access} to the given file
+         * @throws SecurityException if
+         *         {@linkplain Files#newInputStream(Path, OpenOption...)
+         *         opening the file for reading} is denied:
+         *         in the case of the system-default file system provider,
+         *         and a security manager is installed,
+         *         {@link SecurityManager#checkRead(String) checkRead}
+         *         is invoked to check read access to the given file
          */
         public static BodyPublisher ofFile(Path path) throws FileNotFoundException {
             Objects.requireNonNull(path);
             return RequestPublishers.FilePublisher.create(path);
         }
