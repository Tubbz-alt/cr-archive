diff a/test/hotspot/gtest/gc/shared/test_gcTimer.cpp b/test/hotspot/gtest/gc/shared/test_gcTimer.cpp
--- a/test/hotspot/gtest/gc/shared/test_gcTimer.cpp
+++ b/test/hotspot/gtest/gc/shared/test_gcTimer.cpp
@@ -32,12 +32,28 @@
     timer->register_gc_start(Ticks(ticks));
   }
   static void register_gc_end(GCTimer* const timer, jlong ticks) {
     timer->register_gc_end(Ticks(ticks));
   }
+  static void register_gc_pause_start(GCTimer* const timer, jlong ticks) {
+    timer->register_gc_pause_start("pause", Ticks(ticks));
+  }
+  static void register_gc_pause_end(GCTimer* const timer, jlong ticks) {
+    timer->register_gc_pause_end(Ticks(ticks));
+  }
+  static void register_gc_concurrent_start(ConcurrentGCTimer* const timer, jlong ticks) {
+    timer->register_gc_concurrent_start("concurrent", Ticks(ticks));
+  }
+  static void register_gc_concurrent_end(ConcurrentGCTimer* const timer, jlong ticks) {
+    timer->register_gc_concurrent_end(Ticks(ticks));
+  }
+
+  static Tickspan duration(jlong ticks) { return Ticks(ticks) - Ticks(0); }
 };
 
+static Tickspan duration(jlong ticks) { return GCTimerTest::duration(ticks); }
+
 TEST(GCTimer, start) {
   GCTimer gc_timer;
   GCTimerTest::register_gc_start(&gc_timer, 1);
 
   EXPECT_EQ(1, gc_timer.gc_start().value());
@@ -50,11 +66,56 @@
   GCTimerTest::register_gc_end(&gc_timer, 2);
 
   EXPECT_EQ(2, gc_timer.gc_end().value());
 }
 
-class TimePartitionPhasesIteratorTest {
+TEST(GCTimer, pause) {
+  GCTimer gc_timer;
+
+  GCTimerTest::register_gc_start(&gc_timer, 1);
+  GCTimerTest::register_gc_pause_start(&gc_timer, 2);
+  GCTimerTest::register_gc_pause_end(&gc_timer, 4);
+  GCTimerTest::register_gc_end(&gc_timer, 5);
+
+  TimePartitions* partitions = gc_timer.time_partitions();
+  EXPECT_EQ(1, partitions->num_phases());
+  EXPECT_EQ(duration(2), partitions->sum_of_pauses());
+
+  EXPECT_EQ(5, gc_timer.gc_end().value());
+}
+
+TEST(ConcurrentGCTimer, pause) {
+  ConcurrentGCTimer gc_timer;
+
+  GCTimerTest::register_gc_start(&gc_timer, 1);
+  GCTimerTest::register_gc_pause_start(&gc_timer, 2);
+  GCTimerTest::register_gc_pause_end(&gc_timer, 4);
+  GCTimerTest::register_gc_end(&gc_timer, 7);
+
+  TimePartitions* partitions = gc_timer.time_partitions();
+  EXPECT_EQ(1, partitions->num_phases());
+  EXPECT_EQ(duration(2), partitions->sum_of_pauses());
+
+  EXPECT_EQ(7, gc_timer.gc_end().value());
+}
+
+TEST(ConcurrentGCTimer, concurrent) {
+  ConcurrentGCTimer gc_timer;
+
+  GCTimerTest::register_gc_start(&gc_timer, 1);
+  GCTimerTest::register_gc_concurrent_start(&gc_timer, 2);
+  GCTimerTest::register_gc_concurrent_end(&gc_timer, 4);
+  GCTimerTest::register_gc_end(&gc_timer, 5);
+
+  TimePartitions* partitions = gc_timer.time_partitions();
+  EXPECT_EQ(1, partitions->num_phases());
+  EXPECT_EQ(duration(0), partitions->sum_of_pauses());
+
+  EXPECT_EQ(5, gc_timer.gc_end().value());
+}
+
+class TimePartitionsTest {
  public:
 
   static void validate_gc_phase(GCPhase* phase, int level, const char* name, const jlong& start, const jlong& end) {
     EXPECT_EQ(level, phase->level());
     EXPECT_STREQ(name, phase->name());
@@ -65,174 +126,174 @@
   static void validate_pauses(const TimePartitions& time_partitions, const Tickspan& expected_sum_of_pauses, const Tickspan& expected_longest_pause) {
     EXPECT_EQ(expected_sum_of_pauses, time_partitions.sum_of_pauses());
     EXPECT_EQ(expected_longest_pause, time_partitions.longest_pause());
   }
   static void validate_pauses(const TimePartitions& time_partitions, const Tickspan& expected_pause) {
-    TimePartitionPhasesIteratorTest::validate_pauses(time_partitions, expected_pause, expected_pause);
+    validate_pauses(time_partitions, expected_pause, expected_pause);
   }
   static void validate_pauses(const TimePartitions& time_partitions, jlong end, jlong start) {
-    TimePartitionPhasesIteratorTest::validate_pauses(time_partitions, Ticks(end) - Ticks(start));
+    validate_pauses(time_partitions, Ticks(end) - Ticks(start));
   }
   static void validate_pauses(const TimePartitions& time_partitions, jlong all_end, jlong all_start, jlong longest_end, jlong longest_start) {
-    TimePartitionPhasesIteratorTest::validate_pauses(time_partitions, Ticks(all_end) - Ticks(all_start), Ticks(longest_end) - Ticks(longest_start));
+    validate_pauses(time_partitions, Ticks(all_end) - Ticks(all_start), Ticks(longest_end) - Ticks(longest_start));
   }
 
   static void report_gc_phase_start(TimePartitions* const partitions, const char* name, jlong ticks, GCPhase::PhaseType type=GCPhase::PausePhaseType) {
     partitions->report_gc_phase_start(name, Ticks(ticks), type);
   }
 
-  static void report_gc_phase_end(TimePartitions* const partitions, jlong ticks, GCPhase::PhaseType type=GCPhase::PausePhaseType) {
-    partitions->report_gc_phase_end(Ticks(ticks), type);
+  static void report_gc_phase_end(TimePartitions* const partitions, jlong ticks) {
+    partitions->report_gc_phase_end(Ticks(ticks));
   }
 };
 
 TEST(TimePartitionPhasesIterator, one_pause) {
   TimePartitions time_partitions;
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "PausePhase", 2);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 8);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "PausePhase", 2);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 8);
 
   TimePartitionPhasesIterator iter(&time_partitions);
 
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 0, "PausePhase", 2, 8));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 0, "PausePhase", 2, 8));
 
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_pauses(time_partitions, 8, 2));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_pauses(time_partitions, 8, 2));
 
   EXPECT_FALSE(iter.has_next()) << "Too many elements";
 }
 
 TEST(TimePartitionPhasesIterator, two_pauses) {
   TimePartitions time_partitions;
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "PausePhase1", 2);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 3);
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "PausePhase2", 4);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 6);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "PausePhase1", 2);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 3);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "PausePhase2", 4);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 6);
 
   TimePartitionPhasesIterator iter(&time_partitions);
 
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 0, "PausePhase1", 2, 3));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 0, "PausePhase2", 4, 6));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 0, "PausePhase1", 2, 3));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 0, "PausePhase2", 4, 6));
 
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_pauses(time_partitions, 3, 0, 2, 0));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_pauses(time_partitions, 3, 0, 2, 0));
 
   EXPECT_FALSE(iter.has_next()) << "Too many elements";
 }
 
 TEST(TimePartitionPhasesIterator, one_sub_pause_phase) {
   TimePartitions time_partitions;
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "PausePhase", 2);
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase", 3);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 4);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 5);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "PausePhase", 2);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase", 3);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 4);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 5);
 
   TimePartitionPhasesIterator iter(&time_partitions);
 
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 0, "PausePhase", 2, 5));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 1, "SubPhase", 3, 4));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 0, "PausePhase", 2, 5));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 1, "SubPhase", 3, 4));
 
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_pauses(time_partitions, 3, 0));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_pauses(time_partitions, 3, 0));
 
   EXPECT_FALSE(iter.has_next()) << "Too many elements";
 }
 
 TEST(TimePartitionPhasesIterator, max_nested_pause_phases) {
   TimePartitions time_partitions;
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "PausePhase", 2);
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase1", 3);
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase2", 4);
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase3", 5);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 6);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 7);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 8);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 9);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "PausePhase", 2);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase1", 3);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase2", 4);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase3", 5);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 6);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 7);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 8);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 9);
 
   TimePartitionPhasesIterator iter(&time_partitions);
 
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 0, "PausePhase", 2, 9));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 1, "SubPhase1", 3, 8));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 2, "SubPhase2", 4, 7));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 3, "SubPhase3", 5, 6));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 0, "PausePhase", 2, 9));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 1, "SubPhase1", 3, 8));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 2, "SubPhase2", 4, 7));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 3, "SubPhase3", 5, 6));
 
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_pauses(time_partitions, 7, 0));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_pauses(time_partitions, 7, 0));
 
   EXPECT_FALSE(iter.has_next()) << "Too many elements";
 }
 
 TEST(TimePartitionPhasesIterator, many_sub_pause_phases) {
   TimePartitions time_partitions;
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "PausePhase", 2);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "PausePhase", 2);
 
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase1", 3);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 4);
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase2", 5);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 6);
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase3", 7);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 8);
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase4", 9);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 10);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase1", 3);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 4);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase2", 5);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 6);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase3", 7);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 8);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase4", 9);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 10);
 
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 11);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 11);
 
   TimePartitionPhasesIterator iter(&time_partitions);
 
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 0, "PausePhase", 2, 11));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 1, "SubPhase1", 3, 4));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 1, "SubPhase2", 5, 6));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 1, "SubPhase3", 7, 8));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 1, "SubPhase4", 9, 10));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 0, "PausePhase", 2, 11));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 1, "SubPhase1", 3, 4));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 1, "SubPhase2", 5, 6));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 1, "SubPhase3", 7, 8));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 1, "SubPhase4", 9, 10));
 
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_pauses(time_partitions, 9, 0));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_pauses(time_partitions, 9, 0));
 
   EXPECT_FALSE(iter.has_next()) << "Too many elements";
 }
 
 TEST(TimePartitionPhasesIterator, many_sub_pause_phases2) {
   TimePartitions time_partitions;
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "PausePhase", 2);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "PausePhase", 2);
 
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase1", 3);
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase11", 4);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 5);
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase12", 6);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 7);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 8);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase1", 3);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase11", 4);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 5);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase12", 6);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 7);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 8);
 
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase2", 9);
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase21", 10);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 11);
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase22", 12);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 13);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 14);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase2", 9);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase21", 10);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 11);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase22", 12);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 13);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 14);
 
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "SubPhase3", 15);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 16);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "SubPhase3", 15);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 16);
 
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 17);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 17);
 
   TimePartitionPhasesIterator iter(&time_partitions);
 
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 0, "PausePhase", 2, 17));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 1, "SubPhase1", 3, 8));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 2, "SubPhase11", 4, 5));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 2, "SubPhase12", 6, 7));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 1, "SubPhase2", 9, 14));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 2, "SubPhase21", 10, 11));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 2, "SubPhase22", 12, 13));
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 1, "SubPhase3", 15, 16));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 0, "PausePhase", 2, 17));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 1, "SubPhase1", 3, 8));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 2, "SubPhase11", 4, 5));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 2, "SubPhase12", 6, 7));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 1, "SubPhase2", 9, 14));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 2, "SubPhase21", 10, 11));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 2, "SubPhase22", 12, 13));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 1, "SubPhase3", 15, 16));
 
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_pauses(time_partitions, 15, 0));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_pauses(time_partitions, 15, 0));
 
   EXPECT_FALSE(iter.has_next()) << "Too many elements";
 }
 
 TEST(TimePartitionPhasesIterator, one_concurrent) {
   TimePartitions time_partitions;
-  TimePartitionPhasesIteratorTest::report_gc_phase_start(&time_partitions, "ConcurrentPhase", 2, GCPhase::ConcurrentPhaseType);
-  TimePartitionPhasesIteratorTest::report_gc_phase_end(&time_partitions, 8, GCPhase::ConcurrentPhaseType);
+  TimePartitionsTest::report_gc_phase_start(&time_partitions, "ConcurrentPhase", 2, GCPhase::ConcurrentPhaseType);
+  TimePartitionsTest::report_gc_phase_end(&time_partitions, 8);
 
   TimePartitionPhasesIterator iter(&time_partitions);
 
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_gc_phase(iter.next(), 0, "ConcurrentPhase", 2, 8));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_gc_phase(iter.next(), 0, "ConcurrentPhase", 2, 8));
   // ConcurrentPhaseType should not affect to both 'sum_of_pauses()' and 'longest_pause()'.
-  EXPECT_NO_FATAL_FAILURE(TimePartitionPhasesIteratorTest::validate_pauses(time_partitions, Tickspan()));
+  EXPECT_NO_FATAL_FAILURE(TimePartitionsTest::validate_pauses(time_partitions, Tickspan()));
 
   EXPECT_FALSE(iter.has_next()) << "Too many elements";
 }
