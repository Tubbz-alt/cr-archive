diff a/test/hotspot/jtreg/gc/ergonomics/TestDynamicNumberOfGCThreads.java b/test/hotspot/jtreg/gc/ergonomics/TestDynamicNumberOfGCThreads.java
--- a/test/hotspot/jtreg/gc/ergonomics/TestDynamicNumberOfGCThreads.java
+++ b/test/hotspot/jtreg/gc/ergonomics/TestDynamicNumberOfGCThreads.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -68,25 +68,17 @@
     output.shouldHaveExitValue(0); // test should run succesfully
     output.shouldContain("new_active_workers");
   }
 
   private static void testDynamicNumberOfGCThreads(String gcFlag) throws Exception {
-    // UseDynamicNumberOfGCThreads and TraceDynamicGCThreads enabled
+    // UseDynamicNumberOfGCThreads enabled
     String[] baseArgs = {"-XX:+UnlockExperimentalVMOptions", "-XX:+" + gcFlag, "-Xmx10M", "-XX:+UseDynamicNumberOfGCThreads", "-Xlog:gc+task=trace", GCTest.class.getName()};
 
     // Base test with gc and +UseDynamicNumberOfGCThreads:
     ProcessBuilder pb_enabled = ProcessTools.createJavaProcessBuilder(baseArgs);
     verifyDynamicNumberOfGCThreads(new OutputAnalyzer(pb_enabled.start()));
 
-    // Ensure it also works on uniprocessors or if user specifies -XX:ParallelGCThreads=1:
-    String[] extraArgs = {"-XX:+UnlockDiagnosticVMOptions", "-XX:+ForceDynamicNumberOfGCThreads", "-XX:ParallelGCThreads=1"};
-    String[] finalArgs = new String[baseArgs.length + extraArgs.length];
-    System.arraycopy(extraArgs, 0, finalArgs, 0,                extraArgs.length);
-    System.arraycopy(baseArgs,  0, finalArgs, extraArgs.length, baseArgs.length);
-    pb_enabled = ProcessTools.createJavaProcessBuilder(finalArgs);
-    verifyDynamicNumberOfGCThreads(new OutputAnalyzer(pb_enabled.start()));
-
     // Turn on parallel reference processing
     String[] parRefProcArg = {"-XX:+ParallelRefProcEnabled", "-XX:-ShowMessageBoxOnError"};
     String[] parRefArgs = new String[baseArgs.length + parRefProcArg.length];
     System.arraycopy(parRefProcArg, 0, parRefArgs, 0,                parRefProcArg.length);
     System.arraycopy(baseArgs,  0, parRefArgs, parRefProcArg.length, baseArgs.length);
