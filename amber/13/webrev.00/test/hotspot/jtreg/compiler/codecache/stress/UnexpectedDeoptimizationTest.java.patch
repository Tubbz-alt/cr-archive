diff a/test/hotspot/jtreg/compiler/codecache/stress/UnexpectedDeoptimizationTest.java b/test/hotspot/jtreg/compiler/codecache/stress/UnexpectedDeoptimizationTest.java
--- a/test/hotspot/jtreg/compiler/codecache/stress/UnexpectedDeoptimizationTest.java
+++ b/test/hotspot/jtreg/compiler/codecache/stress/UnexpectedDeoptimizationTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /*
  * @test UnexpectedDeoptimizationTest
- * @key stress
+ * @key stress randomness
  * @summary stressing code cache by forcing unexpected deoptimizations
  * @library /test/lib /
  * @modules java.base/jdk.internal.misc
  *          java.management
  *
@@ -46,17 +46,21 @@
  *                   compiler.codecache.stress.UnexpectedDeoptimizationTest
  */
 
 package compiler.codecache.stress;
 
+import java.util.Random;
+import jdk.test.lib.Utils;
+
 public class UnexpectedDeoptimizationTest implements Runnable {
+    private final Random rng = Utils.getRandomInstance();
 
     public static void main(String[] args) {
         new CodeCacheStressRunner(new UnexpectedDeoptimizationTest()).runTest();
     }
 
     @Override
     public void run() {
-        Helper.WHITE_BOX.deoptimizeFrames(Helper.RNG.nextBoolean());
+        Helper.WHITE_BOX.deoptimizeFrames(rng.nextBoolean());
     }
 
 }
