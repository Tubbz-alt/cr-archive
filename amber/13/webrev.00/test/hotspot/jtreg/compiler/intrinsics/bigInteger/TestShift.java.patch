diff a/test/hotspot/jtreg/compiler/intrinsics/bigInteger/TestShift.java b/test/hotspot/jtreg/compiler/intrinsics/bigInteger/TestShift.java
--- a/test/hotspot/jtreg/compiler/intrinsics/bigInteger/TestShift.java
+++ b/test/hotspot/jtreg/compiler/intrinsics/bigInteger/TestShift.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,12 +21,14 @@
  * questions.
  */
 
 /**
  * @test
+ * @key randomness
  * @bug 8234692
  * @summary Add C2 x86 intrinsic for BigInteger::shiftLeft() and BigInteger::shiftRight() method
+ * @library /test/lib
  * @requires vm.compiler2.enabled
  *
  * @run main/othervm/timeout=600 -XX:-TieredCompilation -Xbatch
  *      -XX:CompileCommand=exclude,compiler.intrinsics.bigInteger.TestShift::main
  *      -XX:CompileCommand=option,compiler.intrinsics.bigInteger.TestShift::base_left_shift,ccstr,DisableIntrinsic,_bigIntegerLeftShiftWorker
@@ -48,10 +50,11 @@
 package compiler.intrinsics.bigInteger;
 
 import java.math.BigInteger;
 import java.util.Arrays;
 import java.util.Random;
+import jdk.test.lib.Utils;
 
 public class TestShift {
 
     public static BigInteger base_left_shift(BigInteger op1, int shift) {
       return op1.shiftLeft(shift);
@@ -95,13 +98,11 @@
       BigInteger [] oldLeftShiftResult = new BigInteger[10];
       BigInteger [] newLeftShiftResult = new BigInteger[10];
       BigInteger [] oldRightShiftResult = new BigInteger[10];
       BigInteger [] newRightShiftResult = new BigInteger[10];
 
-      Random rand = new Random();
-      long seed = System.nanoTime();
-      rand.setSeed(seed);
+      Random rand = Utils.getRandomInstance();
       int shiftCount = rand.nextInt(30) + 1;
 
       for(int i = 0; i < inputbuffer.length; i++) {
         int numbits = rand.nextInt(4096)+32;
         inputbuffer[i] = new BigInteger(numbits, rand);
