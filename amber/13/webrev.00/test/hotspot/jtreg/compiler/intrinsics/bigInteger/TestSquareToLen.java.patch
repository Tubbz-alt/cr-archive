diff a/test/hotspot/jtreg/compiler/intrinsics/bigInteger/TestSquareToLen.java b/test/hotspot/jtreg/compiler/intrinsics/bigInteger/TestSquareToLen.java
--- a/test/hotspot/jtreg/compiler/intrinsics/bigInteger/TestSquareToLen.java
+++ b/test/hotspot/jtreg/compiler/intrinsics/bigInteger/TestSquareToLen.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,12 +21,14 @@
  * questions.
  */
 
 /**
  * @test
+ * @key randomness
  * @bug 8081778
  * @summary Add C2 x86 intrinsic for BigInteger::squareToLen() method
+ * @library /test/lib
  *
  * @run main/othervm/timeout=600 -XX:-TieredCompilation -Xbatch
  *      -XX:CompileCommand=exclude,compiler.intrinsics.bigInteger.TestSquareToLen::main
  *      -XX:CompileCommand=option,compiler.intrinsics.bigInteger.TestSquareToLen::base_multiply,ccstr,DisableIntrinsic,_squareToLen
  *      -XX:CompileCommand=option,java.math.BigInteger::multiply,ccstr,DisableIntrinsic,_squareToLen
@@ -40,10 +42,11 @@
 
 package compiler.intrinsics.bigInteger;
 
 import java.math.BigInteger;
 import java.util.Random;
+import jdk.test.lib.Utils;
 
 public class TestSquareToLen {
 
     // Avoid intrinsic by preventing inlining multiply() and squareToLen().
     public static BigInteger base_multiply(BigInteger op1) {
@@ -81,16 +84,12 @@
       BigInteger oldsum = new BigInteger("0");
       BigInteger newsum = new BigInteger("0");
 
       BigInteger b1, b2, oldres, newres;
 
-      Random rand = new Random();
-      long seed = System.nanoTime();
-      Random rand1 = new Random();
-      long seed1 = System.nanoTime();
-      rand.setSeed(seed);
-      rand1.setSeed(seed1);
+      Random rand = new Random(Utils.getRandomInstance().nextLong());
+      Random rand1 = new Random(Utils.getRandomInstance().nextLong());
 
       for (int j = 0; j < 100000; j++) {
         int rand_int = rand1.nextInt(3136)+32;
         b1 = new BigInteger(rand_int, rand);
 
