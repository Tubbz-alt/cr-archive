diff a/test/hotspot/jtreg/serviceability/sa/TestCpoolForInvokeDynamic.java b/test/hotspot/jtreg/serviceability/sa/TestCpoolForInvokeDynamic.java
--- a/test/hotspot/jtreg/serviceability/sa/TestCpoolForInvokeDynamic.java
+++ b/test/hotspot/jtreg/serviceability/sa/TestCpoolForInvokeDynamic.java
@@ -31,22 +31,23 @@
 import sun.jvm.hotspot.oops.Method;
 import sun.jvm.hotspot.utilities.MethodArray;
 import sun.jvm.hotspot.ui.classbrowser.HTMLGenerator;
 
 import jdk.test.lib.apps.LingeredApp;
+import jdk.test.lib.Asserts;
 import jdk.test.lib.JDKToolLauncher;
 import jdk.test.lib.JDKToolFinder;
 import jdk.test.lib.Platform;
 import jdk.test.lib.process.ProcessTools;
 import jdk.test.lib.process.OutputAnalyzer;
+import jdk.test.lib.SA.SATestUtils;
 import jdk.test.lib.Utils;
-import jdk.test.lib.Asserts;
 
 /**
  * @test
  * @library /test/lib
- * @requires vm.hasSAandCanAttach & os.family != "mac"
+ * @requires vm.hasSA
  * @modules java.base/jdk.internal.misc
  *          jdk.hotspot.agent/sun.jvm.hotspot
  *          jdk.hotspot.agent/sun.jvm.hotspot.utilities
  *          jdk.hotspot.agent/sun.jvm.hotspot.oops
  *          jdk.hotspot.agent/sun.jvm.hotspot.debugger
@@ -101,10 +102,11 @@
             Long.toString(lingeredAppPid)
         };
 
         // Start a new process to attach to the lingered app
         ProcessBuilder processBuilder = ProcessTools.createJavaProcessBuilder(toolArgs);
+        SATestUtils.addPrivilegesIfNeeded(processBuilder);
         OutputAnalyzer SAOutput = ProcessTools.executeProcess(processBuilder);
         SAOutput.shouldHaveExitValue(0);
         System.out.println(SAOutput.getOutput());
 
         SAOutput.shouldContain("invokedynamic");
@@ -113,22 +115,20 @@
         SAOutput.shouldContain("compare:()LTestComparator");
         SAOutput.shouldNotContain("Corrupted constant pool");
     }
 
     public static void main (String... args) throws Exception {
+        SATestUtils.skipIfCannotAttach(); // throws SkippedException if attach not expected to work.
 
         String[] instanceKlassNames = new String[] {
                                           "LingeredAppWithInvokeDynamic"
                                       };
 
         if (args == null || args.length == 0) {
             try {
-                String[] vmArgs = Utils.appendTestJavaOpts(
-                    "-XX:+UsePerfData");
-
                 theApp = new LingeredAppWithInvokeDynamic();
-                LingeredApp.startApp(theApp, vmArgs);
+                LingeredApp.startApp(theApp, "-XX:+UsePerfData");
                 createAnotherToAttach(instanceKlassNames,
                                       theApp.getPid());
             } finally {
                 LingeredApp.stopApp(theApp);
             }
