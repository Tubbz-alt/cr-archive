diff a/test/lib/jdk/test/lib/apps/LingeredApp.java b/test/lib/jdk/test/lib/apps/LingeredApp.java
--- a/test/lib/jdk/test/lib/apps/LingeredApp.java
+++ b/test/lib/jdk/test/lib/apps/LingeredApp.java
@@ -55,11 +55,11 @@
  *
  *   or fine grained control
  *
  *   a = new SmartTestApp("MyLock.lck");
  *   a.createLock();
- *   a.runApp();
+ *   a.runAppExactJvmOpts(Utils.getTestJavaOpts());
  *   a.waitAppReady();
  *     // do something
  *   a.deleteLock();
  *   a.waitAppTerminate();
  *
@@ -105,18 +105,10 @@
      */
     public String getLockFileName() {
         return this.lockFileName;
     }
 
-    /**
-     *
-     * @return name of testapp
-     */
-    public String getAppName() {
-        return this.getClass().getName();
-    }
-
     /**
      *
      *  @return pid of java process running testapp
      */
     public long getPid() {
@@ -281,11 +273,11 @@
 
     /**
      * Analyze an environment and prepare a command line to
      * run the app, app name should be added explicitly
      */
-    public List<String> runAppPrepare(String[] vmArguments) {
+    private List<String> runAppPrepare(String[] vmArguments) {
         // We should always use testjava or throw an exception,
         // so we can't use JDKToolFinder.getJDKTool("java");
         // that falls back to compile java on error
         String jdkPath = System.getProperty("test.jdk");
         if (jdkPath == null) {
@@ -301,27 +293,28 @@
         String osname = System.getProperty("os.name");
         String javapath = jdkPath + ((osname.startsWith("window")) ? "/bin/java.exe" : "/bin/java");
 
         List<String> cmd = new ArrayList<String>();
         cmd.add(javapath);
-
-        if (vmArguments == null) {
-            // Propagate getTestJavaOpts() to LingeredApp
-            vmArguments = Utils.getTestJavaOpts();
-        } else {
-            // Lets user manage LingeredApp options
-        }
         Collections.addAll(cmd, vmArguments);
 
         // Make sure we set correct classpath to run the app
         cmd.add("-cp");
         String classpath = System.getProperty("test.class.path");
         cmd.add((classpath == null) ? "." : classpath);
 
         return cmd;
     }
 
+    /**
+     * Adds application name to the command line.
+     * By default adds name of this class.
+     */
+    protected void runAddAppName(List<String> cmd) {
+        cmd.add(getClass().getName());
+    }
+
     /**
      * Assemble command line to a printable string
      */
     public void printCommandLine(List<String> cmd) {
         // A bit of verbosity
@@ -333,20 +326,20 @@
         System.err.println("Command line: [" + cmdLine.toString() + "]");
     }
 
     /**
      * Run the app.
-     *
-     * @param vmArguments
+     * User should provide exact options to run app. Might use #Utils.getTestJavaOpts() to set default test options.
+     * @param vmOpts
      * @throws IOException
      */
-    public void runApp(String[] vmArguments)
+    public void runAppExactJvmOpts(String[] vmOpts)
             throws IOException {
 
-        List<String> cmd = runAppPrepare(vmArguments);
+        List<String> cmd = runAppPrepare(vmOpts);
 
-        cmd.add(this.getAppName());
+        runAddAppName(cmd);
         cmd.add(lockFileName);
 
         printCommandLine(cmd);
 
         ProcessBuilder pb = new ProcessBuilder(cmd);
@@ -390,39 +383,52 @@
     }
 
     /**
      *  High level interface for test writers
      */
+
     /**
      * Factory method that starts pre-created LingeredApp
      * lock name is autogenerated
-     * @param cmd - vm options, could be null to auto add Utils.getTestJavaOpts()
+     * User should provide exact options to run app. Might use #Utils.getTestJavaOpts() to set default test options.
+     * @param jvmOpts - the exact vm options used to start LingeredApp
      * @param theApp - app to start
      * @throws IOException
      */
-    public static void startApp(LingeredApp theApp, String... cmd) throws IOException {
+    public static void startAppExactJvmOpts(LingeredApp theApp, String... jvmOpts) throws IOException {
         theApp.createLock();
         try {
-            theApp.runApp(cmd);
+            theApp.runAppExactJvmOpts(jvmOpts);
             theApp.waitAppReady(appWaitTime);
         } catch (Exception ex) {
             theApp.deleteLock();
             throw ex;
         }
     }
 
+    /**
+     * Factory method that starts pre-created LingeredApp
+     * lock name is autogenerated, additionalJvmOpts are appended to default test options
+     * @param additionalJvmOpts - additional Jvm options, appended to #Utils.getTestJavaOpts();
+     * @param theApp - app to start
+     * @throws IOException
+     */
+    public static void startApp(LingeredApp theApp, String... additionalJvmOpts) throws IOException {
+        startAppExactJvmOpts(theApp, Utils.prependTestJavaOpts(additionalJvmOpts));
+    }
+
     /**
      * Factory method that creates LingeredApp object with ready to use application
-     * lock name is autogenerated
-     * @param cmd - vm options, could be null to auto add Utils.getTestJavaOpts()
+     * lock name is autogenerated, additionalJvmOpts are appended to default test options
+     * @param additionalJvmOpts - additional Jvm options, appended to #Utils.getTestJavaOpts();
      * @return LingeredApp object
      * @throws IOException
      */
-    public static LingeredApp startApp(String... cmd) throws IOException {
+    public static LingeredApp startApp(String... additionalJvmOpts) throws IOException {
         LingeredApp a = new LingeredApp();
         try {
-            startApp(a, cmd);
+            startApp(a, additionalJvmOpts);
         } catch (Exception ex) {
             System.err.println("LingeredApp failed to start: " + ex);
             a.finishApp();
             throw ex;
         }
