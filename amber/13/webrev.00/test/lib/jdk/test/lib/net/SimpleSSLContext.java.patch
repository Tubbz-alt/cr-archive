diff a/test/lib/jdk/test/lib/net/SimpleSSLContext.java b/test/lib/jdk/test/lib/net/SimpleSSLContext.java
--- a/test/lib/jdk/test/lib/net/SimpleSSLContext.java
+++ b/test/lib/jdk/test/lib/net/SimpleSSLContext.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2005, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -25,10 +25,11 @@
 
 import java.util.*;
 import java.io.*;
 import java.security.*;
 import java.security.cert.*;
+import java.util.function.Supplier;
 import javax.net.ssl.*;
 
 /**
  * Creates a simple usable SSLContext for SSLSocketFactory
  * or a HttpsServer using either a given keystore or a default
@@ -48,11 +49,16 @@
     /**
      * loads default keystore from SimpleSSLContext
      * source directory
      */
     public SimpleSSLContext() throws IOException {
+        this(() -> "TLS");
+    }
+
+    private SimpleSSLContext(Supplier<String> protocols) throws IOException {
         try {
+            final String proto = protocols.get();
             AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {
                 @Override
                 public Void run() throws Exception {
                     String paths = System.getProperty("test.src.path");
                     StringTokenizer st = new StringTokenizer(paths, File.pathSeparator);
@@ -61,11 +67,11 @@
                         String path = st.nextToken();
                         try {
                             File f = new File(path, "jdk/test/lib/net/testkeys");
                             if (f.exists()) {
                                 try (FileInputStream fis = new FileInputStream(f)) {
-                                    init(fis);
+                                    init(fis, proto);
                                     return null;
                                 }
                             }
                         } catch (SecurityException e) {
                             // catch and ignore because permission only required
@@ -95,15 +101,15 @@
      * loads default keystore from given directory
      */
     public SimpleSSLContext(String dir) throws IOException {
         String file = dir + "/testkeys";
         try (FileInputStream fis = new FileInputStream(file)) {
-            init(fis);
+            init(fis, "TLS");
         }
     }
 
-    private void init(InputStream i) throws IOException {
+    private void init(InputStream i, String protocol) throws IOException {
         try {
             char[] passphrase = "passphrase".toCharArray();
             KeyStore ks = KeyStore.getInstance("PKCS12");
             ks.load(i, passphrase);
 
@@ -111,18 +117,27 @@
             kmf.init(ks, passphrase);
 
             TrustManagerFactory tmf = TrustManagerFactory.getInstance("PKIX");
             tmf.init(ks);
 
-            ssl = SSLContext.getInstance("TLS");
+            ssl = SSLContext.getInstance(protocol);
             ssl.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);
         } catch (KeyManagementException | KeyStoreException |
                 UnrecoverableKeyException | CertificateException |
                 NoSuchAlgorithmException e) {
             throw new RuntimeException(e.getMessage());
         }
     }
 
+    public static SSLContext getContext(String protocol) throws IOException {
+        if(protocol == null || protocol.isEmpty()) {
+            return new SimpleSSLContext().get();
+        }
+        else {
+            return new SimpleSSLContext(() -> protocol).get();
+        }
+    }
+
     public SSLContext get() {
         return ssl;
     }
 }
