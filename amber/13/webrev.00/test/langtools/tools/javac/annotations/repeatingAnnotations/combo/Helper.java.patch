diff a/test/langtools/tools/javac/annotations/repeatingAnnotations/combo/Helper.java b/test/langtools/tools/javac/annotations/repeatingAnnotations/combo/Helper.java
--- a/test/langtools/tools/javac/annotations/repeatingAnnotations/combo/Helper.java
+++ b/test/langtools/tools/javac/annotations/repeatingAnnotations/combo/Helper.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, 2014, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -94,20 +94,24 @@
     // Compile a list of FileObjects
     // Used when packages are needed and classes need to be loaded at runtime
     static File destDir = new File(System.getProperty("user.dir"));
 
     public static boolean compileCode(DiagnosticCollector<JavaFileObject> diagnostics, Iterable<? extends JavaFileObject> files) {
+        return compileCode(diagnostics, files, null);
+    }
+
+    public static boolean compileCode(DiagnosticCollector<JavaFileObject> diagnostics, Iterable<? extends JavaFileObject> files, Iterable<String> options) {
         boolean ok = false;
         JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
         if (compiler == null) {
             throw new RuntimeException("can't get javax.tools.JavaCompiler!");
         }
 
         try (StandardJavaFileManager fm = compiler.getStandardFileManager(null, null, null)) {
             // Assuming filesCount can maximum be 2 and if true, one file is package-info.java
             if (isPkgInfoPresent(files)) {
-                JavacTask task = (JavacTask) compiler.getTask(null, fm, diagnostics, null, null, files);
+                JavacTask task = (JavacTask) compiler.getTask(null, fm, diagnostics, options, null, files);
                 try {
                     fm.setLocation(StandardLocation.CLASS_OUTPUT, Arrays.asList(destDir));
                     task.generate();
                 } catch (IOException ioe) {
                     throw new RuntimeException("Compilation failed for package level tests", ioe);
@@ -118,11 +122,11 @@
                       err++;
                     }
                 }
                 ok = (err == 0);
             } else {
-                CompilationTask task = compiler.getTask(null, null, diagnostics, null, null, files);
+                CompilationTask task = compiler.getTask(null, null, diagnostics, options, null, files);
                 ok = task.call();
             }
             return ok;
         } catch (IOException e) {
             throw new Error(e);
