diff a/test/jdk/sun/tools/jhsdb/JShellHeapDumpTest.java b/test/jdk/sun/tools/jhsdb/JShellHeapDumpTest.java
--- a/test/jdk/sun/tools/jhsdb/JShellHeapDumpTest.java
+++ b/test/jdk/sun/tools/jhsdb/JShellHeapDumpTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,11 +22,11 @@
  */
 
 /**
  * @test
  * @bug 8225715
- * @requires vm.hasSAandCanAttach
+ * @requires vm.hasSA
  * @library /test/lib
  * @compile JShellHeapDumpTest.java
  * @run main/timeout=240 JShellHeapDumpTest
  */
 
@@ -36,15 +36,16 @@
 import java.io.File;
 import java.util.List;
 import java.util.Arrays;
 import java.util.Map;
 
+import jdk.test.lib.hprof.parser.HprofReader;
 import jdk.test.lib.JDKToolLauncher;
 import jdk.test.lib.JDKToolFinder;
 import jdk.test.lib.process.OutputAnalyzer;
 import jdk.test.lib.process.ProcessTools;
-import jdk.test.lib.hprof.parser.HprofReader;
+import jdk.test.lib.SA.SATestUtils;
 
 import jdk.jshell.JShell;
 
 public class JShellHeapDumpTest {
 
@@ -65,11 +66,11 @@
                 launcher.addToolArg(cmd);
             }
 
             launcher.addToolArg("--pid=" + Long.toString(jShellPID));
 
-            ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());
+            ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);
             OutputAnalyzer output = ProcessTools.executeProcess(processBuilder);
             System.out.println("jhsdb jmap stdout:");
             System.out.println(output.getStdout());
             System.out.println("jhsdb jmap stderr:");
             System.out.println(output.getStderr());
@@ -148,10 +149,11 @@
         } catch (Exception e) {
         }
     }
 
     public static void main(String[] args) throws Exception {
+        SATestUtils.skipIfCannotAttach(); // throws SkippedException if attach not expected to work.
         if (args.length == 1) {
             if (args[0].equals("nosleep")) {
                 doSleep = false;
             } else {
                 throw new RuntimeException("Invalid arg: " + args[0]);
