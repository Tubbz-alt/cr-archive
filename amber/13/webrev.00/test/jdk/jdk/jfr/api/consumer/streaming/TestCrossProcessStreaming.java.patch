diff a/test/jdk/jdk/jfr/api/consumer/streaming/TestCrossProcessStreaming.java b/test/jdk/jdk/jfr/api/consumer/streaming/TestCrossProcessStreaming.java
--- a/test/jdk/jdk/jfr/api/consumer/streaming/TestCrossProcessStreaming.java
+++ b/test/jdk/jdk/jfr/api/consumer/streaming/TestCrossProcessStreaming.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -32,16 +32,16 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 
-import com.sun.tools.attach.VirtualMachine;
 import jdk.jfr.Event;
 import jdk.jfr.Name;
 import jdk.jfr.Recording;
 import jdk.jfr.consumer.EventStream;
 import jdk.test.lib.Asserts;
+import jdk.test.lib.jfr.StreamingUtils;
 import jdk.test.lib.process.ProcessTools;
 
 /**
  * @test
  * @summary Test scenario where JFR event producer is in a different process
@@ -81,11 +81,11 @@
         int batch2Count;
     }
 
     public static void main(String... args) throws Exception {
         Process process = EventProducer.start();
-        Path repo = getJfrRepository(process);
+        Path repo = StreamingUtils.getJfrRepository(process);
 
         // Consume 1000 events in a first batch
         CountDownLatch consumed = new CountDownLatch(1000);
         try (EventStream es = EventStream.openRepository(repo)) {
             es.onEvent("Batch1", e -> consumed.countDown());
@@ -125,17 +125,22 @@
         Asserts.assertEquals(process.exitValue(), 0, "Incorrect exit value");
         Asserts.assertEquals(total.get(), produced.get(), "Missing events");
     }
 
     static class EventProducer {
+        private static final String MAIN_STARTED = "MAIN_STARTED";
+
         static Process start() throws Exception {
             String[] args = {"-XX:StartFlightRecording", EventProducer.class.getName()};
             ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(false, args);
-            return ProcessTools.startProcess("Event-Producer", pb);
+            return ProcessTools.startProcess("Event-Producer", pb,
+                                             line -> line.contains(MAIN_STARTED),
+                                             0, TimeUnit.SECONDS);
         }
 
         public static void main(String... args) throws Exception {
+            System.out.println(MAIN_STARTED);
             ResultEvent rs = new ResultEvent();
             rs.batch1Count = emit(TestEvent1.class, "second-batch");
             rs.batch2Count = emit(TestEvent2.class, "exit");
             rs.commit();
         }
@@ -162,18 +167,6 @@
     }
 
     static boolean signalCheck(String name) throws Exception {
         return Files.exists(Paths.get(".", name));
     }
-
-    static Path getJfrRepository(Process p) throws Exception {
-        VirtualMachine vm = VirtualMachine.attach(String.valueOf(p.pid()));
-        while (true) {
-            String repo = vm.getSystemProperties().getProperty("jdk.jfr.repository");
-            if (repo != null) {
-                vm.detach();
-                System.out.println("JFR repository: " + repo);
-                return Paths.get(repo);
-            }
-        }
-    }
 }
