diff a/test/jdk/javax/net/ssl/compatibility/UseCase.java b/test/jdk/javax/net/ssl/compatibility/UseCase.java
--- a/test/jdk/javax/net/ssl/compatibility/UseCase.java
+++ b/test/jdk/javax/net/ssl/compatibility/UseCase.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -34,10 +34,11 @@
 
     public static final boolean FULL_CIPHER_SUITES
             = Boolean.getBoolean("fullCipherSuites");
 
     public static final Protocol[] PROTOCOLS = new Protocol[] {
+            Protocol.SSLV3,
             Protocol.TLSV1,
             Protocol.TLSV1_1,
             Protocol.TLSV1_2,
             Protocol.TLSV1_3 };
 
@@ -146,11 +147,11 @@
     public final CipherSuite cipherSuite;
     public final Boolean clientAuth;
     public final ServerName serverName;
     public final AppProtocol appProtocol;
 
-    public final boolean negativeCase;
+    public final boolean protocolSupportsCipherSuite;
 
     public UseCase(
             Protocol protocol,
             CipherSuite cipherSuite,
             boolean clientAuth,
@@ -160,11 +161,11 @@
         this.cipherSuite = cipherSuite;
         this.clientAuth = clientAuth;
         this.serverName = serverName;
         this.appProtocol = appProtocol;
 
-        negativeCase = !cipherSuite.supportedByProtocol(protocol);
+        protocolSupportsCipherSuite = cipherSuite.supportedByProtocol(protocol);
     }
 
     @Override
     public String toString() {
         return Utils.join(Utils.PARAM_DELIMITER,
