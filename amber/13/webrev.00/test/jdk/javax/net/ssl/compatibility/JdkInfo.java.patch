diff a/test/jdk/javax/net/ssl/compatibility/JdkInfo.java b/test/jdk/javax/net/ssl/compatibility/JdkInfo.java
--- a/test/jdk/javax/net/ssl/compatibility/JdkInfo.java
+++ b/test/jdk/javax/net/ssl/compatibility/JdkInfo.java
@@ -1,7 +1,8 @@
+
 /*
- * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -19,10 +20,13 @@
  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
+import java.util.LinkedHashMap;
+import java.util.Map;
+
 /*
  * It represents a JDK with some specific attributes.
  * If two JdkInfo instances have the same version value, the instances are
  * regarded as equivalent.
  */
@@ -30,11 +34,13 @@
 
     public final String jdkPath;
 
     public final String version;
     public final String supportedProtocols;
+    public final String enabledProtocols;
     public final String supportedCipherSuites;
+    public final String enabledCipherSuites;
     public final boolean supportsSNI;
     public final boolean supportsALPN;
 
     public JdkInfo(String jdkPath) {
         this.jdkPath = jdkPath;
@@ -46,18 +52,22 @@
         }
 
         String[] attributes = Utils.split(output, Utils.PARAM_DELIMITER);
         version = attributes[0].replaceAll(".*=", "");
         supportedProtocols = attributes[1].replaceAll(".*=", "");
-        supportedCipherSuites = attributes[2].replaceAll(".*=", "");
-        supportsSNI = Boolean.valueOf(attributes[3].replaceAll(".*=", ""));
-        supportsALPN = Boolean.valueOf(attributes[4].replaceAll(".*=", ""));
+        enabledProtocols = attributes[2].replaceAll(".*=", "");
+        supportedCipherSuites = attributes[3].replaceAll(".*=", "");
+        enabledCipherSuites = attributes[4].replaceAll(".*=", "");
+        supportsSNI = Boolean.valueOf(attributes[5].replaceAll(".*=", ""));
+        supportsALPN = Boolean.valueOf(attributes[6].replaceAll(".*=", ""));
     }
 
     // Determines the specific attributes for the specified JDK.
     private static String jdkAttributes(String jdkPath) {
-        return ProcessUtils.java(jdkPath, null, JdkUtils.class).getOutput();
+        Map<String, String> props = new LinkedHashMap<>();
+        props.put("java.security.properties", Utils.SECURITY_PROPERTIES_FILE);
+        return ProcessUtils.java(jdkPath, props, JdkUtils.class).getOutput();
     }
 
     @Override
     public int hashCode() {
         return version == null ? 0 : version.hashCode();
@@ -87,9 +97,17 @@
 
     public boolean supportsProtocol(Protocol protocol) {
         return supportedProtocols.contains(protocol.name);
     }
 
+    public boolean enablesProtocol(Protocol protocol) {
+        return enabledProtocols.contains(protocol.name);
+    }
+
     public boolean supportsCipherSuite(CipherSuite cipherSuite) {
         return supportedCipherSuites.contains(cipherSuite.name());
     }
+
+    public boolean enablesCipherSuite(CipherSuite cipherSuite) {
+        return enabledCipherSuites.contains(cipherSuite.name());
+    }
 }
