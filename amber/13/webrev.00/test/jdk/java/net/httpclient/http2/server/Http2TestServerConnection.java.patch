diff a/test/jdk/java/net/httpclient/http2/server/Http2TestServerConnection.java b/test/jdk/java/net/httpclient/http2/server/Http2TestServerConnection.java
--- a/test/jdk/java/net/httpclient/http2/server/Http2TestServerConnection.java
+++ b/test/jdk/java/net/httpclient/http2/server/Http2TestServerConnection.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -45,10 +45,11 @@
 import jdk.internal.net.http.hpack.Decoder;
 import jdk.internal.net.http.hpack.DecodingCallback;
 import jdk.internal.net.http.hpack.Encoder;
 import sun.net.www.http.ChunkedInputStream;
 import sun.net.www.http.HttpClient;
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static jdk.internal.net.http.frame.SettingsFrame.HEADER_TABLE_SIZE;
 
 /**
  * Represents one HTTP2 connection, either plaintext upgraded from HTTP/1.1
  * or HTTPS opened using "h2" ALPN.
@@ -121,14 +122,19 @@
                               Socket socket,
                               Http2TestExchangeSupplier exchangeSupplier,
                               Properties properties)
         throws IOException
     {
+        System.err.println("TestServer: New connection from " + socket);
+
         if (socket instanceof SSLSocket) {
-            handshake(server.serverName(), (SSLSocket)socket);
+            SSLSocket sslSocket = (SSLSocket)socket;
+            handshake(server.serverName(), sslSocket);
+            if (!server.supportsHTTP11 && !"h2".equals(sslSocket.getApplicationProtocol())) {
+                throw new IOException("Unexpected ALPN: [" + sslSocket.getApplicationProtocol() + "]");
+            }
         }
-        System.err.println("TestServer: New connection from " + socket);
         this.server = server;
         this.exchangeSupplier = exchangeSupplier;
         this.streams = Collections.synchronizedMap(new HashMap<>());
         this.outStreams = Collections.synchronizedMap(new HashMap<>());
         this.outputQ = new Queue<>(sentinel);
@@ -246,11 +252,11 @@
         }
     }
 
     private static void handshake(String name, SSLSocket sock) throws IOException {
         if (name == null) {
-            // no name set. No need to check
+            sock.getSession(); // awaits handshake completion
             return;
         } else if (name.equals("localhost")) {
             name = "localhost";
         }
         final String fname = name;
@@ -302,12 +308,11 @@
         if (Arrays.compare(clientPreface, bytes) != 0) {
             throw new IOException("Invalid preface: " + new String(bytes, 0, len));
         }
     }
 
-    Http1InitialRequest doUpgrade() throws IOException {
-        Http1InitialRequest upgrade = readHttp1Request();
+    Http1InitialRequest doUpgrade(Http1InitialRequest upgrade) throws IOException {
         String h2c = getHeader(upgrade.headers, "Upgrade");
         if (h2c == null || !h2c.equals("h2c")) {
             System.err.println("Server:HEADERS: " + upgrade);
             throw new IOException("Bad upgrade 1 " + h2c);
         }
@@ -349,23 +354,62 @@
 
     public int getMaxFrameSize() {
         return clientSettings.getParameter(SettingsFrame.MAX_FRAME_SIZE);
     }
 
+    /** Sends a pre-canned HTTP/1.1 response. */
+    private void standardHTTP11Response(Http1InitialRequest request)
+        throws IOException
+    {
+        String upgradeHeader = getHeader(request.headers, "Upgrade");
+        if (upgradeHeader != null) {
+            throw new IOException("Unexpected Upgrade header:" + upgradeHeader);
+        }
+
+        sendHttp1Response(200, "OK",
+                          "Connection", "close",
+                          "Content-Length", "0",
+                          "X-Magic", "HTTP/1.1 request received by HTTP/2 server",
+                          "X-Received-Body", new String(request.body, UTF_8));
+    }
+
     void run() throws Exception {
         Http1InitialRequest upgrade = null;
         if (!secure) {
-            upgrade = doUpgrade();
-        } else {
-            readPreface();
-            sendSettingsFrame(true);
-            clientSettings = (SettingsFrame) readFrame();
-            if (clientSettings.getFlag(SettingsFrame.ACK)) {
-                // we received the ack to our frame first
+            Http1InitialRequest request = readHttp1Request();
+            String h2c = getHeader(request.headers, "Upgrade");
+            if (h2c == null || !h2c.equals("h2c")) {
+                if (server.supportsHTTP11) {
+                    standardHTTP11Response(request);
+                    socket.close();
+                    return;
+                } else {
+                    System.err.println("Server:HEADERS: " + upgrade);
+                    throw new IOException("Bad upgrade 1 " + h2c);
+                }
+            }
+            upgrade = doUpgrade(request);
+        } else { // secure
+            SSLSocket sslSocket = (SSLSocket)socket;
+            if (sslSocket.getApplicationProtocol().equals("h2")) {
+                readPreface();
+                sendSettingsFrame(true);
                 clientSettings = (SettingsFrame) readFrame();
+                if (clientSettings.getFlag(SettingsFrame.ACK)) {
+                    // we received the ack to our frame first
+                    clientSettings = (SettingsFrame) readFrame();
+                }
+                nextstream = 1;
+            } else if (sslSocket.getApplicationProtocol().equals("http/1.1") ||
+                       sslSocket.getApplicationProtocol().equals("")) {
+                standardHTTP11Response(readHttp1Request());
+                socket.shutdownOutput();
+                socket.close();
+                return;
+            } else {
+                throw new IOException("Unexpected ALPN:" + sslSocket.getApplicationProtocol());
             }
-            nextstream = 1;
         }
 
         // Uncomment if needed, but very noisy
         //System.out.println("ServerSettings: " + serverSettings);
         //System.out.println("ClientSettings: " + clientSettings);
