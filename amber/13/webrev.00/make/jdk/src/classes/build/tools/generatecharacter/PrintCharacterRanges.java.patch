diff a/make/jdk/src/classes/build/tools/generatecharacter/PrintCharacterRanges.java b/make/jdk/src/classes/build/tools/generatecharacter/PrintCharacterRanges.java
--- a/make/jdk/src/classes/build/tools/generatecharacter/PrintCharacterRanges.java
+++ b/make/jdk/src/classes/build/tools/generatecharacter/PrintCharacterRanges.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -43,20 +43,20 @@
 
     int begin() { return begin; }
     int end()   { return end;   }
   }
 
-  private static List/*<BooleanRange>*/ recoverBooleanRanges(String methodName) throws Exception {
-    List result = new ArrayList();
+  private static List<BooleanRange> recoverBooleanRanges(String methodName) throws Exception {
+    List<BooleanRange> result = new ArrayList<>();
     int currentRangeStart = -1;
-    Method method = Character.class.getDeclaredMethod(methodName, new Class[] { Character.TYPE });
+    Method method = Character.class.getDeclaredMethod(methodName, new Class<?>[] { Character.TYPE });
     if (method == null) {
       throw new RuntimeException("No method \"" + methodName + "\"(C) found");
     }
 
     for (int i = 0; i <= 255; i++) {
-      boolean methodRes = ((Boolean) method.invoke(null, new Object[] { new Character((char) i) })).booleanValue();
+      boolean methodRes = ((Boolean) method.invoke(null, new Object[] { Character.valueOf((char) i) })).booleanValue();
       if (methodRes) {
         if (currentRangeStart < 0) {
           currentRangeStart = i;
         }
         if (i == 255) {
@@ -89,21 +89,21 @@
     }
     s.append("')");
     return s.toString();
   }
 
-  private static void printBooleanRanges(List/*<BooleanRange>*/ ranges, String methodName) {
+  private static void printBooleanRanges(List<BooleanRange> ranges, String methodName) {
     System.out.print(methodName + ":");
-    for (Iterator iter = ranges.iterator(); iter.hasNext();) {
-      BooleanRange range = (BooleanRange) iter.next();
+    for (Iterator<BooleanRange> iter = ranges.iterator(); iter.hasNext();) {
+      BooleanRange range = iter.next();
       System.out.print(" [ " + describe(range.begin()) + ", " + describe(range.end()) + " ]");
     }
     System.out.println("");
   }
 
   private static void recoverAndPrintBooleanRanges(String methodName) throws Exception {
-    List ranges = recoverBooleanRanges(methodName);
+    List<BooleanRange> ranges = recoverBooleanRanges(methodName);
     printBooleanRanges(ranges, methodName);
   }
 
   static class ShiftRange {
     private int begin;
@@ -119,21 +119,21 @@
     int begin()  { return begin;  }
     int end()    { return end;    }
     int offset() { return offset; }
   }
 
-  private static List/*<ShiftRange>*/ recoverShiftRanges(String methodName) throws Exception {
-    List result = new ArrayList();
+  private static List<ShiftRange> recoverShiftRanges(String methodName) throws Exception {
+    List<ShiftRange> result = new ArrayList<>();
     int currentRangeStart = -1;
     int currentRangeOffset = -1;
-    Method method = Character.class.getDeclaredMethod(methodName, new Class[] { Character.TYPE });
+    Method method = Character.class.getDeclaredMethod(methodName, new Class<?>[] { Character.TYPE });
     if (method == null) {
       throw new RuntimeException("No method \"" + methodName + "\"(C) found");
     }
 
     for (int i = 0; i <= 255; i++) {
-      char methodRes = ((Character) method.invoke(null, new Object[] { new Character((char) i) })).charValue();
+      char methodRes = ((Character) method.invoke(null, new Object[] { Character.valueOf((char) i) })).charValue();
       if (methodRes != i) {
         int offset = methodRes - i;
         if (currentRangeStart < 0) {
           currentRangeStart = i;
         } else if (offset != currentRangeOffset) {
@@ -153,15 +153,15 @@
     }
 
     return result;
   }
 
-  private static void printShiftRanges(List/*<ShiftRange>*/ ranges, String methodName) {
+  private static void printShiftRanges(List<ShiftRange> ranges, String methodName) {
     System.out.print(methodName + ":");
     boolean isFirst = true;
-    for (Iterator iter = ranges.iterator(); iter.hasNext();) {
-      ShiftRange range = (ShiftRange) iter.next();
+    for (Iterator<ShiftRange> iter = ranges.iterator(); iter.hasNext();) {
+      ShiftRange range = iter.next();
       if (isFirst) {
         isFirst = false;
       } else {
         System.out.print(", ");
       }
@@ -171,11 +171,11 @@
     }
     System.out.println("");
   }
 
   private static void recoverAndPrintShiftRanges(String methodName) throws Exception {
-    List ranges = recoverShiftRanges(methodName);
+    List<ShiftRange> ranges = recoverShiftRanges(methodName);
     printShiftRanges(ranges, methodName);
   }
 
   public static void main(String[] args) {
     try {
