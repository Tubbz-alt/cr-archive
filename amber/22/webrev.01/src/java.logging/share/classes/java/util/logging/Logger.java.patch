diff a/src/java.logging/share/classes/java/util/logging/Logger.java b/src/java.logging/share/classes/java/util/logging/Logger.java
--- a/src/java.logging/share/classes/java/util/logging/Logger.java
+++ b/src/java.logging/share/classes/java/util/logging/Logger.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -445,11 +445,11 @@
     private String name;
     private volatile LoggerBundle loggerBundle = NO_RESOURCE_BUNDLE;
     private boolean anonymous;
 
     // Cache to speed up behavior of findResourceBundle:
-    private ResourceBundle catalog;     // Cached resource bundle
+    private WeakReference<ResourceBundle> catalogRef;  // Cached resource bundle
     private String catalogName;         // name associated with catalog
     private Locale catalogLocale;       // locale associated with catalog
 
     // The fields relating to parent-child relationships and levels
     // are managed under a separate lock, the treeLock.
@@ -2120,10 +2120,15 @@
      */
     public boolean getUseParentHandlers() {
         return config.useParentHandlers;
     }
 
+    private ResourceBundle catalog() {
+        WeakReference<ResourceBundle> ref = catalogRef;
+        return ref == null ? null : ref.get();
+    }
+
     /**
      * Private utility method to map a resource bundle name to an
      * actual resource bundle, using a simple one-entry cache.
      * Returns null for a null name.
      * May also return null if we can't find the resource bundle and
@@ -2159,17 +2164,18 @@
             return null;
         }
 
         Locale currentLocale = Locale.getDefault();
         final LoggerBundle lb = loggerBundle;
+        ResourceBundle catalog = catalog();
 
         // Normally we should hit on our simple one entry cache.
         if (lb.userBundle != null &&
                 name.equals(lb.resourceBundleName)) {
             return lb.userBundle;
         } else if (catalog != null && currentLocale.equals(catalogLocale)
-                && name.equals(catalogName)) {
+                    && name.equals(catalogName)) {
             return catalog;
         }
 
         // Use the thread's context ClassLoader.  If there isn't one, use the
         // {@linkplain java.lang.ClassLoader#getSystemClassLoader() system ClassLoader}.
@@ -2185,10 +2191,11 @@
         // We also look in the TCCL if callerModule is null or unnamed.
         if (!useCallersModule || callerModule == null || !callerModule.isNamed()) {
             try {
                 Module mod = cl.getUnnamedModule();
                 catalog = RbAccess.RB_ACCESS.getBundle(name, currentLocale, mod);
+                catalogRef = new WeakReference<>(catalog);
                 catalogName = name;
                 catalogLocale = currentLocale;
                 return catalog;
             } catch (MissingResourceException ex) {
                 // We can't find the ResourceBundle in the default
@@ -2212,10 +2219,11 @@
 
                         // we already tried the TCCL and found nothing - so try
                         // with the module's loader this time.
                         catalog = ResourceBundle.getBundle(name, currentLocale,
                                                            moduleCL);
+                        catalogRef = new WeakReference<>(catalog);
                         catalogName = name;
                         catalogLocale = currentLocale;
                         return catalog;
                     } catch (MissingResourceException x) {
                         return null; // no luck
@@ -2229,10 +2237,11 @@
             //  useCallersModule && callerModule != null && callerModule.isNamed();
             // Try with the caller's module
             try {
                 // Use the caller's module
                 catalog = RbAccess.RB_ACCESS.getBundle(name, currentLocale, callerModule);
+                catalogRef = new WeakReference<>(catalog);
                 catalogName = name;
                 catalogLocale = currentLocale;
                 return catalog;
             } catch (MissingResourceException ex) {
                 return null; // no luck
