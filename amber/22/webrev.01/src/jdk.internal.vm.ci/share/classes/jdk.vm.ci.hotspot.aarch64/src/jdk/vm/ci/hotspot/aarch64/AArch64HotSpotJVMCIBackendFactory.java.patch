diff a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot.aarch64/src/jdk/vm/ci/hotspot/aarch64/AArch64HotSpotJVMCIBackendFactory.java b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot.aarch64/src/jdk/vm/ci/hotspot/aarch64/AArch64HotSpotJVMCIBackendFactory.java
--- a/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot.aarch64/src/jdk/vm/ci/hotspot/aarch64/AArch64HotSpotJVMCIBackendFactory.java
+++ b/src/jdk.internal.vm.ci/share/classes/jdk.vm.ci.hotspot.aarch64/src/jdk/vm/ci/hotspot/aarch64/AArch64HotSpotJVMCIBackendFactory.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -78,23 +78,17 @@
             features.add(AArch64.CPUFeature.STXR_PREFETCH);
         }
         if ((config.vmVersionFeatures & config.aarch64A53MAC) != 0) {
             features.add(AArch64.CPUFeature.A53MAC);
         }
-        if ((config.vmVersionFeatures & config.aarch64DMB_ATOMICS) != 0) {
-            features.add(AArch64.CPUFeature.DMB_ATOMICS);
-        }
 
         return features;
     }
 
     private static EnumSet<AArch64.Flag> computeFlags(@SuppressWarnings("unused") AArch64HotSpotVMConfig config) {
         EnumSet<AArch64.Flag> flags = EnumSet.noneOf(AArch64.Flag.class);
 
-        if (config.useBarriersForVolatile) {
-            flags.add(AArch64.Flag.UseBarriersForVolatile);
-        }
         if (config.useCRC32) {
             flags.add(AArch64.Flag.UseCRC32);
         }
         if (config.useNeon) {
             flags.add(AArch64.Flag.UseNeon);
