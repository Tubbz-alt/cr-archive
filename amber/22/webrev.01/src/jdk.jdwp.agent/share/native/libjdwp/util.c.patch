diff a/src/jdk.jdwp.agent/share/native/libjdwp/util.c b/src/jdk.jdwp.agent/share/native/libjdwp/util.c
--- a/src/jdk.jdwp.agent/share/native/libjdwp/util.c
+++ b/src/jdk.jdwp.agent/share/native/libjdwp/util.c
@@ -24,10 +24,11 @@
  */
 
 #include <ctype.h>
 
 #include "util.h"
+#include "utf_util.h"
 #include "transport.h"
 #include "eventHandler.h"
 #include "threadControl.h"
 #include "outStream.h"
 #include "inStream.h"
@@ -1650,17 +1651,30 @@
     }
 
     /* Create jstrings for property name and value */
     nameString = JNI_FUNC_PTR(env,NewStringUTF)(env, propertyName);
     if (nameString != NULL) {
-        valueString = JNU_NewStringPlatform(env, propertyValue);
-        if (valueString != NULL) {
-            /* invoke Properties.setProperty */
-            JNI_FUNC_PTR(env,CallObjectMethod)
-                (env, gdata->agent_properties,
-                 gdata->setProperty,
-                 nameString, valueString);
+        /* convert the value to UTF8 */
+        int len;
+        char *utf8value;
+        int utf8maxSize;
+
+        len = (int)strlen(propertyValue);
+        utf8maxSize = len * 4 + 1;
+        utf8value = (char *)jvmtiAllocate(utf8maxSize);
+        if (utf8value != NULL) {
+            utf8FromPlatform(propertyValue, len, (jbyte *)utf8value, utf8maxSize);
+            valueString = JNI_FUNC_PTR(env, NewStringUTF)(env, utf8value);
+            jvmtiDeallocate(utf8value);
+
+            if (valueString != NULL) {
+                /* invoke Properties.setProperty */
+                JNI_FUNC_PTR(env,CallObjectMethod)
+                    (env, gdata->agent_properties,
+                     gdata->setProperty,
+                     nameString, valueString);
+            }
         }
     }
     if (JNI_FUNC_PTR(env,ExceptionOccurred)(env)) {
         JNI_FUNC_PTR(env,ExceptionClear)(env);
     }
