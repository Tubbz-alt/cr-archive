diff a/src/hotspot/cpu/ppc/templateTable_ppc_64.cpp b/src/hotspot/cpu/ppc/templateTable_ppc_64.cpp
--- a/src/hotspot/cpu/ppc/templateTable_ppc_64.cpp
+++ b/src/hotspot/cpu/ppc/templateTable_ppc_64.cpp
@@ -2516,11 +2516,11 @@
   __ mtctr(Rbtable);
   __ bctr();
 
 #ifdef ASSERT
   __ bind(LFlagInvalid);
-  __ stop("got invalid flag", 0x654);
+  __ stop("got invalid flag");
 #endif
 
   if (!is_static && rc == may_not_rewrite) {
     // We reuse the code from is_static.  It's jumped to via the table above.
     return;
@@ -2531,11 +2531,11 @@
   address pc_before_fence = __ pc();
   __ fence(); // Volatile entry point (one instruction before non-volatile_entry point).
   assert(__ pc() - pc_before_fence == (ptrdiff_t)BytesPerInstWord, "must be single instruction");
   assert(branch_table[vtos] == 0, "can't compute twice");
   branch_table[vtos] = __ pc(); // non-volatile_entry point
-  __ stop("vtos unexpected", 0x655);
+  __ stop("vtos unexpected");
 #endif
 
   __ align(32, 28, 28); // Align load.
   // __ bind(Ldtos);
   __ fence(); // Volatile entry point (one instruction before non-volatile_entry point).
@@ -2845,19 +2845,19 @@
   __ mtctr(Rbtable);
   __ bctr();
 
 #ifdef ASSERT
   __ bind(LFlagInvalid);
-  __ stop("got invalid flag", 0x656);
+  __ stop("got invalid flag");
 
   // __ bind(Lvtos);
   address pc_before_release = __ pc();
   __ release(); // Volatile entry point (one instruction before non-volatile_entry point).
   assert(__ pc() - pc_before_release == (ptrdiff_t)BytesPerInstWord, "must be single instruction");
   assert(branch_table[vtos] == 0, "can't compute twice");
   branch_table[vtos] = __ pc(); // non-volatile_entry point
-  __ stop("vtos unexpected", 0x657);
+  __ stop("vtos unexpected");
 #endif
 
   __ align(32, 28, 28); // Align pop.
   // __ bind(Ldtos);
   __ release(); // Volatile entry point (one instruction before non-volatile_entry point).
