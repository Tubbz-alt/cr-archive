diff a/src/hotspot/share/oops/compressedOops.hpp b/src/hotspot/share/oops/compressedOops.hpp
--- a/src/hotspot/share/oops/compressedOops.hpp
+++ b/src/hotspot/share/oops/compressedOops.hpp
@@ -131,28 +131,50 @@
 class CompressedKlassPointers : public AllStatic {
   friend class VMStructs;
 
   static NarrowPtrStruct _narrow_klass;
 
-  // CompressedClassSpaceSize set to 1GB, but appear 3GB away from _narrow_ptrs_base during CDS dump.
-  static uint64_t _narrow_klass_range;
+  // Together with base, this defines the address range within which Klass
+  //  structures will be located: [base, base+range). While the maximal
+  //  possible encoding range is 4|32G for shift 0|3, if we know beforehand
+  //  the expected range of Klass* pointers will be smaller, a platform
+  //  could use this info to optimize encoding.
+  static size_t _range;
 
-public:
   static void set_base(address base);
+  static void set_range(size_t range);
+
+public:
+
   static void set_shift(int shift);
-  static void set_range(uint64_t range);
+
+
+  // Given an address p, return true if p can be used as an encoding base.
+  //  (Some platforms have restrictions of what constitutes a valid base
+  //   address).
+  static bool is_valid_base(address p);
+
+  // Given an address range [addr, addr+len) which the encoding is supposed to
+  //  cover, choose base, shift and range.
+  //  The address range is the expected range of uncompressed Klass pointers we
+  //  will encounter (and the implicit promise that there will be no Klass
+  //  structures outside this range).
+  static void initialize(address addr, size_t len);
+
+  static void     print_mode(outputStream* st);
 
   static address  base()               { return  _narrow_klass._base; }
-  static uint64_t range()              { return  _narrow_klass_range; }
+  static size_t   range()              { return  _range; }
   static int      shift()              { return  _narrow_klass._shift; }
 
   static bool is_null(Klass* v)      { return v == NULL; }
   static bool is_null(narrowKlass v) { return v == 0; }
 
   static inline Klass* decode_raw(narrowKlass v);
   static inline Klass* decode_not_null(narrowKlass v);
   static inline Klass* decode(narrowKlass v);
   static inline narrowKlass encode_not_null(Klass* v);
   static inline narrowKlass encode(Klass* v);
+
 };
 
 #endif // SHARE_OOPS_COMPRESSEDOOPS_HPP
