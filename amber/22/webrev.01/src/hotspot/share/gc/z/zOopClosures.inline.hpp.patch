diff a/src/hotspot/share/gc/z/zOopClosures.inline.hpp b/src/hotspot/share/gc/z/zOopClosures.inline.hpp
--- a/src/hotspot/share/gc/z/zOopClosures.inline.hpp
+++ b/src/hotspot/share/gc/z/zOopClosures.inline.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -85,11 +85,11 @@
 }
 
 inline void ZPhantomCleanOopClosure::do_oop(oop* p) {
   // Read the oop once, to make sure the liveness check
   // and the later clearing uses the same value.
-  const oop obj = *(volatile oop*)p;
+  const oop obj = Atomic::load(p);
   if (ZBarrier::is_alive_barrier_on_phantom_oop(obj)) {
     ZBarrier::keep_alive_barrier_on_phantom_oop_field(p);
   } else {
     // The destination could have been modified/reused, in which case
     // we don't want to clear it. However, no one could write the same
