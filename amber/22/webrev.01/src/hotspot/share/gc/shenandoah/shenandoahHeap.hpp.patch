diff a/src/hotspot/share/gc/shenandoah/shenandoahHeap.hpp b/src/hotspot/share/gc/shenandoah/shenandoahHeap.hpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahHeap.hpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahHeap.hpp
@@ -455,10 +455,11 @@
   ShenandoahControlThread*   control_thread()          { return _control_thread;    }
   ShenandoahMarkCompact*     full_gc()                 { return _full_gc;           }
 
 public:
   ShenandoahCollectorPolicy* shenandoah_policy() const { return _shenandoah_policy; }
+  ShenandoahMode*            mode()              const { return _gc_mode;           }
   ShenandoahHeuristics*      heuristics()        const { return _heuristics;        }
   ShenandoahFreeSet*         free_set()          const { return _free_set;          }
   ShenandoahConcurrentMark*  concurrent_mark()         { return _scm;               }
   ShenandoahPacer*           pacer()             const { return _pacer;             }
 
@@ -494,15 +495,19 @@
 //
 private:
   AlwaysTrueClosure    _subject_to_discovery;
   ReferenceProcessor*  _ref_processor;
   ShenandoahSharedFlag _process_references;
+  bool                 _ref_proc_mt_discovery;
+  bool                 _ref_proc_mt_processing;
 
   void ref_processing_init();
 
 public:
   ReferenceProcessor* ref_processor() { return _ref_processor; }
+  bool ref_processor_mt_discovery()   { return _ref_proc_mt_discovery;  }
+  bool ref_processor_mt_processing()  { return _ref_proc_mt_processing; }
   void set_process_references(bool pr);
   bool process_references() const;
 
 // ---------- Class Unloading
 //
@@ -627,10 +632,13 @@
 
   size_t _bitmap_size;
   size_t _bitmap_regions_per_slice;
   size_t _bitmap_bytes_per_slice;
 
+  size_t _pretouch_heap_page_size;
+  size_t _pretouch_bitmap_page_size;
+
   bool _bitmap_region_special;
   bool _aux_bitmap_region_special;
 
   ShenandoahLiveData** _liveness_cache;
 
@@ -663,10 +671,12 @@
 
   // Liveness caching support
   ShenandoahLiveData* get_liveness_cache(uint worker_id);
   void flush_liveness_cache(uint worker_id);
 
+  size_t pretouch_heap_page_size() { return _pretouch_heap_page_size; }
+
 // ---------- Evacuation support
 //
 private:
   ShenandoahCollectionSet* _collection_set;
   ShenandoahEvacOOMHandler _oom_evac_handler;
@@ -687,12 +697,12 @@
   // Evacuates object src. Returns the evacuated object, either evacuated
   // by this thread, or by some other thread.
   inline oop evacuate_object(oop src, Thread* thread);
 
   // Call before/after evacuation.
-  void enter_evacuation();
-  void leave_evacuation();
+  inline void enter_evacuation(Thread* t);
+  inline void leave_evacuation(Thread* t);
 
 // ---------- Helper functions
 //
 public:
   template <class T>
