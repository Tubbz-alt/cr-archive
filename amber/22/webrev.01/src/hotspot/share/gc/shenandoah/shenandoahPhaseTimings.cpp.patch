diff a/src/hotspot/share/gc/shenandoah/shenandoahPhaseTimings.cpp b/src/hotspot/share/gc/shenandoah/shenandoahPhaseTimings.cpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahPhaseTimings.cpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahPhaseTimings.cpp
@@ -31,14 +31,16 @@
 #include "gc/shenandoah/shenandoahUtils.hpp"
 #include "gc/shenandoah/heuristics/shenandoahHeuristics.hpp"
 #include "runtime/orderAccess.hpp"
 #include "utilities/ostream.hpp"
 
-#define SHENANDOAH_PHASE_NAME_FORMAT "%-28s"
+#define SHENANDOAH_PHASE_NAME_FORMAT "%-30s"
 #define SHENANDOAH_S_TIME_FORMAT "%8.3lf"
 #define SHENANDOAH_US_TIME_FORMAT "%8.0lf"
 #define SHENANDOAH_US_WORKER_TIME_FORMAT "%3.0lf"
+#define SHENANDOAH_US_WORKER_NOTIME_FORMAT "%3s"
+#define SHENANDOAH_PARALLELISM_FORMAT "%4.2lf"
 
 #define SHENANDOAH_PHASE_DECLARE_NAME(type, title) \
   title,
 
 const char* ShenandoahPhaseTimings::_phase_names[] = {
@@ -227,18 +229,26 @@
   out->cr();
   for (uint i = 0; i < _num_phases; i++) {
     double v = _cycle_data[i] * 1000000.0;
     if (v > 0) {
       out->print(SHENANDOAH_PHASE_NAME_FORMAT " " SHENANDOAH_US_TIME_FORMAT " us", _phase_names[i], v);
+
+      if (is_worker_phase(Phase(i))) {
+        double total = _cycle_data[i + 1] * 1000000.0;
+        if (total > 0) {
+          out->print(", parallelism: " SHENANDOAH_PARALLELISM_FORMAT "x", total / v);
+        }
+      }
+
       if (_worker_data[i] != NULL) {
         out->print(", workers (us): ");
         for (uint c = 0; c < _max_workers; c++) {
           double tv = _worker_data[i]->get(c);
           if (tv != ShenandoahWorkerData::uninitialized()) {
             out->print(SHENANDOAH_US_WORKER_TIME_FORMAT ", ", tv * 1000000.0);
           } else {
-            out->print("%3s, ", "---");
+            out->print(SHENANDOAH_US_WORKER_NOTIME_FORMAT ", ", "---");
           }
         }
       }
       out->cr();
     }
