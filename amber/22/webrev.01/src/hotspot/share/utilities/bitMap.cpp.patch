diff a/src/hotspot/share/utilities/bitMap.cpp b/src/hotspot/share/utilities/bitMap.cpp
--- a/src/hotspot/share/utilities/bitMap.cpp
+++ b/src/hotspot/share/utilities/bitMap.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -85,11 +85,17 @@
     if (old_map != NULL) {
       Copy::disjoint_words((HeapWord*)old_map, (HeapWord*) map,
                            MIN2(old_size_in_words, new_size_in_words));
     }
 
-    if (clear && new_size_in_words > old_size_in_words) {
+    if (clear && (new_size_in_bits > old_size_in_bits)) {
+      // If old_size_in_bits is not word-aligned, then the preceeding
+      // copy can include some trailing bits in the final copied word
+      // that also need to be cleared.  See clear_range_within_word.
+      bm_word_t mask = bit_mask(old_size_in_bits) - 1;
+      map[raw_to_words_align_down(old_size_in_bits)] &= mask;
+      // Clear the remaining full words.
       clear_range_of_words(map, old_size_in_words, new_size_in_words);
     }
   }
 
   if (old_map != NULL) {
@@ -666,16 +672,15 @@
   }
   return 0;
 }
 
 BitMap::idx_t BitMap::count_one_bits() const {
-  return count_one_bits_in_range_of_words(0, size_in_words());
+  return count_one_bits(0, size());
 }
 
 // Returns the number of bits set within  [beg, end).
 BitMap::idx_t BitMap::count_one_bits(idx_t beg, idx_t end) const {
-
   verify_range(beg, end);
 
   idx_t beg_full_word = to_words_align_up(beg);
   idx_t end_full_word = to_words_align_down(end);
 
