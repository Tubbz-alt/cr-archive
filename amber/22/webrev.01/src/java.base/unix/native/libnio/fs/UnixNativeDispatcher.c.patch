diff a/src/java.base/unix/native/libnio/fs/UnixNativeDispatcher.c b/src/java.base/unix/native/libnio/fs/UnixNativeDispatcher.c
--- a/src/java.base/unix/native/libnio/fs/UnixNativeDispatcher.c
+++ b/src/java.base/unix/native/libnio/fs/UnixNativeDispatcher.c
@@ -359,44 +359,10 @@
         throwUnixException(env, errno);
     }
     return (jint)res;
 }
 
-JNIEXPORT jlong JNICALL
-Java_sun_nio_fs_UnixNativeDispatcher_fopen0(JNIEnv* env, jclass this,
-    jlong pathAddress, jlong modeAddress)
-{
-    FILE* fp = NULL;
-    const char* path = (const char*)jlong_to_ptr(pathAddress);
-    const char* mode = (const char*)jlong_to_ptr(modeAddress);
-
-    do {
-        fp = fopen(path, mode);
-    } while (fp == NULL && errno == EINTR);
-
-    if (fp == NULL) {
-        throwUnixException(env, errno);
-    }
-
-    return ptr_to_jlong(fp);
-}
-
-JNIEXPORT void JNICALL
-Java_sun_nio_fs_UnixNativeDispatcher_fclose(JNIEnv* env, jclass this, jlong stream)
-{
-    FILE* fp = jlong_to_ptr(stream);
-
-    /* NOTE: fclose() wrapper is only used with read-only streams.
-     * If it ever is used with write streams, it might be better to add
-     * RESTARTABLE(fflush(fp)) before closing, to make sure the stream
-     * is completely written even if fclose() failed.
-     */
-    if (fclose(fp) == EOF && errno != EINTR) {
-        throwUnixException(env, errno);
-    }
-}
-
 JNIEXPORT void JNICALL
 Java_sun_nio_fs_UnixNativeDispatcher_rewind(JNIEnv* env, jclass this, jlong stream)
 {
     FILE* fp = jlong_to_ptr(stream);
     int saved_errno;
@@ -1074,37 +1040,10 @@
         (*env)->SetLongField(env, attrs, attrs_f_bfree,  long_to_jlong(buf.f_bfree));
         (*env)->SetLongField(env, attrs, attrs_f_bavail, long_to_jlong(buf.f_bavail));
     }
 }
 
-JNIEXPORT jlong JNICALL
-Java_sun_nio_fs_UnixNativeDispatcher_pathconf0(JNIEnv* env, jclass this,
-    jlong pathAddress, jint name)
-{
-    long err;
-    const char* path = (const char*)jlong_to_ptr(pathAddress);
-
-    err = pathconf(path, (int)name);
-    if (err == -1) {
-        throwUnixException(env, errno);
-    }
-    return (jlong)err;
-}
-
-JNIEXPORT jlong JNICALL
-Java_sun_nio_fs_UnixNativeDispatcher_fpathconf(JNIEnv* env, jclass this,
-    jint fd, jint name)
-{
-    long err;
-
-    err = fpathconf((int)fd, (int)name);
-    if (err == -1) {
-        throwUnixException(env, errno);
-    }
-    return (jlong)err;
-}
-
 JNIEXPORT void JNICALL
 Java_sun_nio_fs_UnixNativeDispatcher_mknod0(JNIEnv* env, jclass this,
     jlong pathAddress, jint mode, jlong dev)
 {
     int err;
