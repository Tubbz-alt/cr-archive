diff a/src/java.base/share/classes/java/lang/StringConcatHelper.java b/src/java.base/share/classes/java/lang/StringConcatHelper.java
--- a/src/java.base/share/classes/java/lang/StringConcatHelper.java
+++ b/src/java.base/share/classes/java/lang/StringConcatHelper.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2015, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -186,17 +186,15 @@
      * given the coder and final index. Index is measured in chars, not in bytes!
      *
      * @param indexCoder final char index in the buffer, along with coder packed
      *                   into higher bits.
      * @param buf        buffer to append to
-     * @param prefix     a constant to prepend before value
      * @param value      boolean value to encode
-     * @param suffix     a constant to prepend after value
+     * @param prefix     a constant to prepend before value
      * @return           updated index (coder value retained)
      */
-    static long prepend(long indexCoder, byte[] buf, String prefix, boolean value, String suffix) {
-        if (suffix != null) indexCoder = prepend(indexCoder, buf, suffix);
+    static long prepend(long indexCoder, byte[] buf, boolean value, String prefix) {
         indexCoder = prepend(indexCoder, buf, value);
         if (prefix != null) indexCoder = prepend(indexCoder, buf, prefix);
         return indexCoder;
     }
 
@@ -205,17 +203,15 @@
      * given the coder and final index. Index is measured in chars, not in bytes!
      *
      * @param indexCoder final char index in the buffer, along with coder packed
      *                   into higher bits.
      * @param buf        buffer to append to
-     * @param prefix     a constant to prepend before value
      * @param value      boolean value to encode
-     * @param suffix     a constant to prepend after value
+     * @param prefix     a constant to prepend before value
      * @return           updated index (coder value retained)
      */
-    static long prepend(long indexCoder, byte[] buf, String prefix, byte value, String suffix) {
-        if (suffix != null) indexCoder = prepend(indexCoder, buf, suffix);
+    static long prepend(long indexCoder, byte[] buf, byte value, String prefix) {
         indexCoder = prepend(indexCoder, buf, (int)value);
         if (prefix != null) indexCoder = prepend(indexCoder, buf, prefix);
         return indexCoder;
     }
 
@@ -243,17 +239,15 @@
      * given the coder and final index. Index is measured in chars, not in bytes!
      *
      * @param indexCoder final char index in the buffer, along with coder packed
      *                   into higher bits.
      * @param buf        buffer to append to
-     * @param prefix     a constant to prepend before value
      * @param value      boolean value to encode
-     * @param suffix     a constant to prepend after value
+     * @param prefix     a constant to prepend before value
      * @return           updated index (coder value retained)
      */
-    static long prepend(long indexCoder, byte[] buf, String prefix, char value, String suffix) {
-        if (suffix != null) indexCoder = prepend(indexCoder, buf, suffix);
+    static long prepend(long indexCoder, byte[] buf, char value, String prefix) {
         indexCoder = prepend(indexCoder, buf, value);
         if (prefix != null) indexCoder = prepend(indexCoder, buf, prefix);
         return indexCoder;
     }
 
@@ -262,17 +256,15 @@
      * given the coder and final index. Index is measured in chars, not in bytes!
      *
      * @param indexCoder final char index in the buffer, along with coder packed
      *                   into higher bits.
      * @param buf        buffer to append to
-     * @param prefix     a constant to prepend before value
      * @param value      boolean value to encode
-     * @param suffix     a constant to prepend after value
+     * @param prefix     a constant to prepend before value
      * @return           updated index (coder value retained)
      */
-    static long prepend(long indexCoder, byte[] buf, String prefix, short value, String suffix) {
-        if (suffix != null) indexCoder = prepend(indexCoder, buf, suffix);
+    static long prepend(long indexCoder, byte[] buf, short value, String prefix) {
         indexCoder = prepend(indexCoder, buf, (int)value);
         if (prefix != null) indexCoder = prepend(indexCoder, buf, prefix);
         return indexCoder;
     }
 
@@ -299,17 +291,15 @@
      * given the coder and final index. Index is measured in chars, not in bytes!
      *
      * @param indexCoder final char index in the buffer, along with coder packed
      *                   into higher bits.
      * @param buf        buffer to append to
-     * @param prefix     a constant to prepend before value
      * @param value      boolean value to encode
-     * @param suffix     a constant to prepend after value
+     * @param prefix     a constant to prepend before value
      * @return           updated index (coder value retained)
      */
-    static long prepend(long indexCoder, byte[] buf, String prefix, int value, String suffix) {
-        if (suffix != null) indexCoder = prepend(indexCoder, buf, suffix);
+    static long prepend(long indexCoder, byte[] buf, int value, String prefix) {
         indexCoder = prepend(indexCoder, buf, value);
         if (prefix != null) indexCoder = prepend(indexCoder, buf, prefix);
         return indexCoder;
     }
 
@@ -336,17 +326,15 @@
      * given the coder and final index. Index is measured in chars, not in bytes!
      *
      * @param indexCoder final char index in the buffer, along with coder packed
      *                   into higher bits.
      * @param buf        buffer to append to
-     * @param prefix     a constant to prepend before value
      * @param value      boolean value to encode
-     * @param suffix     a constant to prepend after value
+     * @param prefix     a constant to prepend before value
      * @return           updated index (coder value retained)
      */
-    static long prepend(long indexCoder, byte[] buf, String prefix, long value, String suffix) {
-        if (suffix != null) indexCoder = prepend(indexCoder, buf, suffix);
+    static long prepend(long indexCoder, byte[] buf, long value, String prefix) {
         indexCoder = prepend(indexCoder, buf, value);
         if (prefix != null) indexCoder = prepend(indexCoder, buf, prefix);
         return indexCoder;
     }
 
@@ -375,17 +363,15 @@
      * given the coder and final index. Index is measured in chars, not in bytes!
      *
      * @param indexCoder final char index in the buffer, along with coder packed
      *                   into higher bits.
      * @param buf        buffer to append to
-     * @param prefix     a constant to prepend before value
      * @param value      boolean value to encode
-     * @param suffix     a constant to prepend after value
+     * @param prefix     a constant to prepend before value
      * @return           updated index (coder value retained)
      */
-    static long prepend(long indexCoder, byte[] buf, String prefix, String value, String suffix) {
-        if (suffix != null) indexCoder = prepend(indexCoder, buf, suffix);
+    static long prepend(long indexCoder, byte[] buf, String value, String prefix) {
         indexCoder = prepend(indexCoder, buf, value);
         if (prefix != null) indexCoder = prepend(indexCoder, buf, prefix);
         return indexCoder;
     }
 
@@ -420,12 +406,12 @@
     static String simpleConcat(Object first, Object second) {
         String s1 = stringOf(first);
         String s2 = stringOf(second);
         // start "mixing" in length and coder or arguments, order is not
         // important
-        long indexCoder = mix(initialCoder(), s2);
-        indexCoder = mix(indexCoder, s1);
+        long indexCoder = mix(initialCoder(), s1);
+        indexCoder = mix(indexCoder, s2);
         byte[] buf = newArray(indexCoder);
         // prepend each argument in reverse order, since we prepending
         // from the end of the byte array
         indexCoder = prepend(indexCoder, buf, s2);
         indexCoder = prepend(indexCoder, buf, s1);
@@ -447,10 +433,32 @@
 
     private static final long UTF16 = (long)String.UTF16 << 32;
 
     private static final Unsafe UNSAFE = Unsafe.getUnsafe();
 
+    /**
+     * Allocates an uninitialized byte array based on the length and coder
+     * information, then prepends the given suffix string at the end of the
+     * byte array before returning it. The calling code must adjust the
+     * indexCoder so that it's taken the coder of the suffix into account, but
+     * subtracted the length of the suffix.
+     *
+     * @param suffix
+     * @param indexCoder
+     * @return the newly allocated byte array
+     */
+    @ForceInline
+    static byte[] newArrayWithSuffix(String suffix, long indexCoder) {
+        byte[] buf = newArray(indexCoder + suffix.length());
+        if (indexCoder < UTF16) {
+            suffix.getBytes(buf, (int)indexCoder, String.LATIN1);
+        } else {
+            suffix.getBytes(buf, (int)indexCoder, String.UTF16);
+        }
+        return buf;
+    }
+
     /**
      * Allocates an uninitialized byte array based on the length and coder information
      * in indexCoder
      * @param indexCoder
      * @return the newly allocated byte array
@@ -476,7 +484,6 @@
         } catch (NoSuchMethodException|IllegalAccessException e) {
             throw new AssertionError(e);
         }
     }
 
-
 }
