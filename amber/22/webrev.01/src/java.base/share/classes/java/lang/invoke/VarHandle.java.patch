diff a/src/java.base/share/classes/java/lang/invoke/VarHandle.java b/src/java.base/share/classes/java/lang/invoke/VarHandle.java
--- a/src/java.base/share/classes/java/lang/invoke/VarHandle.java
+++ b/src/java.base/share/classes/java/lang/invoke/VarHandle.java
@@ -453,10 +453,20 @@
 
     RuntimeException unsupported() {
         return new UnsupportedOperationException();
     }
 
+    boolean isDirect() {
+        return true;
+    }
+
+    VarHandle asDirect() {
+        return this;
+    }
+
+    VarHandle target() { return null; }
+
     // Plain accessors
 
     /**
      * Returns the value of a variable, with memory semantics of reading as
      * if the variable was declared non-{@code volatile}.  Commonly referred to
@@ -1880,22 +1890,22 @@
     /**
      * Returns the variable type of variables referenced by this VarHandle.
      *
      * @return the variable type of variables referenced by this VarHandle
      */
-    public final Class<?> varType() {
+    public Class<?> varType() {
         MethodType typeSet = accessModeType(AccessMode.SET);
         return typeSet.parameterType(typeSet.parameterCount() - 1);
     }
 
     /**
      * Returns the coordinate types for this VarHandle.
      *
      * @return the coordinate types for this VarHandle. The returned
      * list is unmodifiable
      */
-    public final List<Class<?>> coordinateTypes() {
+    public List<Class<?>> coordinateTypes() {
         MethodType typeGet = accessModeType(AccessMode.GET);
         return typeGet.parameterList();
     }
 
     /**
@@ -1956,11 +1966,11 @@
      *
      * @param accessMode the access mode, corresponding to the
      * signature-polymorphic method of the same name
      * @return a method handle bound to this VarHandle and the given access mode
      */
-    public final MethodHandle toMethodHandle(AccessMode accessMode) {
+    public MethodHandle toMethodHandle(AccessMode accessMode) {
         MemberName mn = AccessMode.getMemberName(accessMode.ordinal(), vform);
         if (mn != null) {
             MethodHandle mh = getMethodHandle(accessMode.ordinal());
             return mh.bindTo(this);
         }
@@ -2006,11 +2016,11 @@
         }
         return tis;
     }
 
     @ForceInline
-    final MethodHandle getMethodHandle(int mode) {
+    MethodHandle getMethodHandle(int mode) {
         TypesAndInvokers tis = getTypesAndInvokers();
         MethodHandle mh = tis.methodHandle_table[mode];
         if (mh == null) {
             mh = tis.methodHandle_table[mode] = getMethodHandleUncached(mode);
         }
