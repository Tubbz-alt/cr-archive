diff a/src/java.base/share/classes/java/lang/invoke/Invokers.java b/src/java.base/share/classes/java/lang/invoke/Invokers.java
--- a/src/java.base/share/classes/java/lang/invoke/Invokers.java
+++ b/src/java.base/share/classes/java/lang/invoke/Invokers.java
@@ -363,10 +363,11 @@
         final int THIS_VH      = 0;
         final int ARG_BASE     = THIS_VH + 1;
         final int ARG_LIMIT = ARG_BASE + mtype.parameterCount();
         int nameCursor = ARG_LIMIT;
         final int VAD_ARG      = nameCursor++;
+        final int UNBOUND_VH   = nameCursor++;
         final int CHECK_TYPE   = nameCursor++;
         final int CHECK_CUSTOM = (CUSTOMIZE_THRESHOLD >= 0) ? nameCursor++ : -1;
         final int LINKER_CALL  = nameCursor++;
 
         Name[] names = new Name[LINKER_CALL + 1];
@@ -374,15 +375,18 @@
         for (int i = 0; i < mtype.parameterCount(); i++) {
             names[ARG_BASE + i] = argument(ARG_BASE + i, BasicType.basicType(mtype.parameterType(i)));
         }
         names[VAD_ARG] = new Name(ARG_LIMIT, BasicType.basicType(Object.class));
 
+        names[UNBOUND_VH] = new Name(getFunction(NF_directVarHandleTarget), names[THIS_VH]);
+
         names[CHECK_TYPE] = new Name(getFunction(NF_checkVarHandleGenericType), names[THIS_VH], names[VAD_ARG]);
 
         Object[] outArgs = new Object[ARG_LIMIT + 1];
         outArgs[0] = names[CHECK_TYPE];
-        for (int i = 0; i < ARG_LIMIT; i++) {
+        outArgs[1] = names[UNBOUND_VH];
+        for (int i = 1; i < ARG_LIMIT; i++) {
             outArgs[i + 1] = names[i];
         }
 
         if (CHECK_CUSTOM != -1) {
             names[CHECK_CUSTOM] = new Name(getFunction(NF_checkCustomized), outArgs[0]);
@@ -409,10 +413,11 @@
         final int CALL_VH      = THIS_MH + 1;
         final int ARG_BASE     = CALL_VH + 1;
         final int ARG_LIMIT = ARG_BASE + mtype.parameterCount();
         int nameCursor = ARG_LIMIT;
         final int VAD_ARG      = nameCursor++;
+        final int UNBOUND_VH   = nameCursor++;
         final int CHECK_TYPE   = nameCursor++;
         final int LINKER_CALL  = nameCursor++;
 
         Name[] names = new Name[LINKER_CALL + 1];
         names[THIS_MH] = argument(THIS_MH, BasicType.basicType(Object.class));
@@ -425,18 +430,21 @@
         names[THIS_MH] = names[THIS_MH].withConstraint(speciesData);
 
         NamedFunction getter = speciesData.getterFunction(0);
         names[VAD_ARG] = new Name(getter, names[THIS_MH]);
 
+        names[UNBOUND_VH] = new Name(getFunction(NF_directVarHandleTarget), names[CALL_VH]);
+
         if (isExact) {
             names[CHECK_TYPE] = new Name(getFunction(NF_checkVarHandleExactType), names[CALL_VH], names[VAD_ARG]);
         } else {
             names[CHECK_TYPE] = new Name(getFunction(NF_checkVarHandleGenericType), names[CALL_VH], names[VAD_ARG]);
         }
         Object[] outArgs = new Object[ARG_LIMIT];
         outArgs[0] = names[CHECK_TYPE];
-        for (int i = 1; i < ARG_LIMIT; i++) {
+        outArgs[1] = names[UNBOUND_VH];
+        for (int i = 2; i < ARG_LIMIT; i++) {
             outArgs[i] = names[i];
         }
 
         MethodType outCallType = mtype.insertParameterTypes(0, VarHandle.class)
                 .basicType();
@@ -518,10 +526,16 @@
          * else
          *  => MH.asType(MT0).invokeBasic(A*)
          */
     }
 
+    @ForceInline
+    /*non-public*/
+    static VarHandle directVarHandleTarget(VarHandle handle) {
+        return handle.asDirect();
+    }
+
     static MemberName linkToCallSiteMethod(MethodType mtype) {
         LambdaForm lform = callSiteForm(mtype, false);
         return lform.vmentry;
     }
 
@@ -598,11 +612,12 @@
         NF_checkGenericType = 1,
         NF_getCallSiteTarget = 2,
         NF_checkCustomized = 3,
         NF_checkVarHandleGenericType = 4,
         NF_checkVarHandleExactType = 5,
-        NF_LIMIT = 6;
+        NF_directVarHandleTarget = 6,
+        NF_LIMIT = 7;
 
     private static final @Stable NamedFunction[] NFS = new NamedFunction[NF_LIMIT];
 
     private static NamedFunction getFunction(byte func) {
         NamedFunction nf = NFS[func];
@@ -628,10 +643,12 @@
                     return getNamedFunction("checkCustomized", MethodType.methodType(void.class, MethodHandle.class));
                 case NF_checkVarHandleGenericType:
                     return getNamedFunction("checkVarHandleGenericType", MethodType.methodType(MethodHandle.class, VarHandle.class, VarHandle.AccessDescriptor.class));
                 case NF_checkVarHandleExactType:
                     return getNamedFunction("checkVarHandleExactType", MethodType.methodType(MethodHandle.class, VarHandle.class, VarHandle.AccessDescriptor.class));
+                case NF_directVarHandleTarget:
+                    return getNamedFunction("directVarHandleTarget", MethodType.methodType(VarHandle.class, VarHandle.class));
                 default:
                     throw newInternalError("Unknown function: " + func);
             }
         } catch (ReflectiveOperationException ex) {
             throw newInternalError(ex);
