diff a/src/java.base/share/classes/java/lang/invoke/VarForm.java b/src/java.base/share/classes/java/lang/invoke/VarForm.java
--- a/src/java.base/share/classes/java/lang/invoke/VarForm.java
+++ b/src/java.base/share/classes/java/lang/invoke/VarForm.java
@@ -43,42 +43,49 @@
 
     final @Stable MemberName[] memberName_table;
 
     VarForm(Class<?> implClass, Class<?> receiver, Class<?> value, Class<?>... intermediate) {
         this.methodType_table = new MethodType[VarHandle.AccessType.values().length];
+        if (receiver == null) {
+            initMethodTypes(value, intermediate);
+        } else {
+            Class<?>[] coordinates = new Class<?>[intermediate.length + 1];
+            coordinates[0] = receiver;
+            System.arraycopy(intermediate, 0, coordinates, 1, intermediate.length);
+            initMethodTypes(value, coordinates);
+        }
 
         // TODO lazily calculate
         this.memberName_table = linkFromStatic(implClass);
+    }
 
-        // (Receiver, <Intermediates>)
-        List<Class<?>> l = new ArrayList<>();
-        if (receiver != null)
-            l.add(receiver);
-        for (Class<?> c : intermediate)
-            l.add(c);
+    VarForm(Class<?> value, Class<?>[] coordinates) {
+        this.methodType_table = new MethodType[VarHandle.AccessType.values().length];
+        this.memberName_table = null;
+        initMethodTypes(value, coordinates);
+    }
 
+    void initMethodTypes(Class<?> value, Class<?>... coordinates) {
         // (Receiver, <Intermediates>)Value
         methodType_table[VarHandle.AccessType.GET.ordinal()] =
-                MethodType.methodType(value, l).erase();
+                MethodType.methodType(value, coordinates).erase();
 
         // (Receiver, <Intermediates>, Value)void
-        l.add(value);
         methodType_table[VarHandle.AccessType.SET.ordinal()] =
-                MethodType.methodType(void.class, l).erase();
+                MethodType.methodType(void.class, coordinates).appendParameterTypes(value).erase();
 
         // (Receiver, <Intermediates>, Value)Value
         methodType_table[VarHandle.AccessType.GET_AND_UPDATE.ordinal()] =
-                MethodType.methodType(value, l).erase();
+                MethodType.methodType(value, coordinates).appendParameterTypes(value).erase();
 
         // (Receiver, <Intermediates>, Value, Value)boolean
-        l.add(value);
         methodType_table[VarHandle.AccessType.COMPARE_AND_SET.ordinal()] =
-                MethodType.methodType(boolean.class, l).erase();
+                MethodType.methodType(boolean.class, coordinates).appendParameterTypes(value, value).erase();
 
         // (Receiver, <Intermediates>, Value, Value)Value
         methodType_table[VarHandle.AccessType.COMPARE_AND_EXCHANGE.ordinal()] =
-                MethodType.methodType(value, l).erase();
+                MethodType.methodType(value, coordinates).appendParameterTypes(value, value).erase();
     }
 
     @ForceInline
     final MethodType getMethodType(int type) {
         return methodType_table[type];
