diff a/src/java.base/share/classes/jdk/internal/access/JavaLangInvokeAccess.java b/src/java.base/share/classes/jdk/internal/access/JavaLangInvokeAccess.java
--- a/src/java.base/share/classes/jdk/internal/access/JavaLangInvokeAccess.java
+++ b/src/java.base/share/classes/jdk/internal/access/JavaLangInvokeAccess.java
@@ -23,13 +23,15 @@
  * questions.
  */
 
 package jdk.internal.access;
 
+import java.lang.invoke.MethodHandle;
 import java.lang.invoke.MethodType;
 import java.lang.invoke.VarHandle;
 import java.nio.ByteOrder;
+import java.util.List;
 import java.util.Map;
 
 public interface JavaLangInvokeAccess {
     /**
      * Create a new MemberName instance. Used by {@code StackFrameInfo}.
@@ -111,12 +113,18 @@
     /**
      * Returns a var handle view of a given memory address.
      * Used by {@code jdk.internal.foreign.LayoutPath} and
      * {@code jdk.incubator.foreign.MemoryHandles}.
      */
-    VarHandle memoryAddressViewVarHandle(Class<?> carrier, long alignmentMask,
-                                         ByteOrder order, long offset, long[] strides);
+    VarHandle memoryAccessVarHandle(Class<?> carrier, long alignmentMask,
+                                    ByteOrder order, long offset, long[] strides);
+
+    /**
+     * Is {@code handle} a memory access varhandle?
+     * Used by {@code jdk.incubator.foreign.MemoryHandles}.
+     */
+    boolean isMemoryAccessVarHandle(VarHandle handle);
 
     /**
      * Returns the carrier associated with a memory access var handle.
      * Used by {@code jdk.incubator.foreign.MemoryHandles}.
      */
@@ -143,6 +151,42 @@
     /**
      * Returns the strides associated with a memory access var handle.
      * Used by {@code jdk.incubator.foreign.MemoryHandles}.
      */
     long[] memoryAddressStrides(VarHandle handle);
+
+    /**
+     * Var handle carrier combinator.
+     * Used by {@code jdk.incubator.foreign.MemoryHandles}.
+     */
+    VarHandle filterValue(VarHandle target, MethodHandle filterToTarget, MethodHandle filterFromTarget);
+
+    /**
+     * Var handle filter coordinates combinator.
+     * Used by {@code jdk.incubator.foreign.MemoryHandles}.
+     */
+    VarHandle filterCoordinates(VarHandle target, int pos, MethodHandle... filters);
+
+    /**
+     * Var handle drop coordinates combinator.
+     * Used by {@code jdk.incubator.foreign.MemoryHandles}.
+     */
+    VarHandle dropCoordinates(VarHandle target, int pos, Class<?>... valueTypes);
+
+    /**
+     * Var handle permute coordinates combinator.
+     * Used by {@code jdk.incubator.foreign.MemoryHandles}.
+     */
+    VarHandle permuteCoordinates(VarHandle target, List<Class<?>> newCoordinates, int... reorder);
+
+    /**
+     * Var handle collect coordinates combinator.
+     * Used by {@code jdk.incubator.foreign.MemoryHandles}.
+     */
+    VarHandle collectCoordinates(VarHandle target, int pos, MethodHandle filter);
+
+    /**
+     * Var handle insert coordinates combinator.
+     * Used by {@code jdk.incubator.foreign.MemoryHandles}.
+     */
+    VarHandle insertCoordinates(VarHandle target, int pos, Object... values);
 }
