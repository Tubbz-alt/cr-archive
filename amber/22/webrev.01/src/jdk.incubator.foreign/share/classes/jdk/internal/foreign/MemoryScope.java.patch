diff a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
--- a/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
+++ b/src/jdk.incubator.foreign/share/classes/jdk/internal/foreign/MemoryScope.java
@@ -29,11 +29,11 @@
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.VarHandle;
 
 /**
  * This class manages the temporal bounds associated with a memory segment. A scope has a liveness bit, which is updated
- * when the scope is closed (this operation is triggered by {@link MemorySegmentImpl#close()}). Furthermore, a scope is
+ * when the scope is closed (this operation is triggered by {@link AbstractMemorySegmentImpl#close()}). Furthermore, a scope is
  * associated with an <em>atomic</em> counter which can be incremented (upon calling the {@link #acquire()} method),
  * and is decremented (when a previously acquired segment is later closed).
  */
 public final class MemoryScope {
 
@@ -56,10 +56,12 @@
     final static int CLOSED = -1;
     final static int MAX_ACQUIRE = Integer.MAX_VALUE;
 
     final Runnable cleanupAction;
 
+    final static MemoryScope GLOBAL = new MemoryScope(null, null);
+
     public MemoryScope(Object ref, Runnable cleanupAction) {
         this.ref = ref;
         this.cleanupAction = cleanupAction;
     }
 
@@ -103,17 +105,22 @@
                 throw new IllegalStateException();
             }
         } while (!COUNT_HANDLE.compareAndSet(this, value, value - 1));
     }
 
-    void close() {
+    void close(boolean doCleanup) {
         if (!COUNT_HANDLE.compareAndSet(this, UNACQUIRED, CLOSED)) {
             //first check if already closed...
             checkAliveConfined();
             //...if not, then we have acquired views that are still active
             throw new IllegalStateException("Cannot close a segment that has active acquired views");
         }
-        if (cleanupAction != null) {
+        if (doCleanup && cleanupAction != null) {
             cleanupAction.run();
         }
     }
+
+    MemoryScope dup() {
+        close(false);
+        return new MemoryScope(ref, cleanupAction);
+    }
 }
