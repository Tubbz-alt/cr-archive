diff a/test/jdk/java/foreign/TestLayouts.java b/test/jdk/java/foreign/TestLayouts.java
--- a/test/jdk/java/foreign/TestLayouts.java
+++ b/test/jdk/java/foreign/TestLayouts.java
@@ -30,10 +30,11 @@
 import jdk.incubator.foreign.MemoryLayout;
 
 import java.lang.invoke.VarHandle;
 import java.nio.ByteOrder;
 import java.util.function.LongFunction;
+import java.util.stream.Stream;
 
 import jdk.incubator.foreign.MemorySegment;
 import jdk.incubator.foreign.SequenceLayout;
 import org.testng.annotations.*;
 import static org.testng.Assert.*;
@@ -174,10 +175,29 @@
         );
         assertEquals(struct.byteSize(), 1 + 1 + 2 + 4 + 8);
         assertEquals(struct.byteAlignment(), 8);
     }
 
+    @Test(dataProvider="basicLayouts")
+    public void testPaddingNoAlign(MemoryLayout layout) {
+        assertEquals(MemoryLayout.ofPaddingBits(layout.bitSize()).bitAlignment(), 1);
+    }
+
+    @Test(dataProvider="basicLayouts")
+    public void testStructPaddingAndAlign(MemoryLayout layout) {
+        MemoryLayout struct = MemoryLayout.ofStruct(
+                layout, MemoryLayout.ofPaddingBits(128 - layout.bitSize()));
+        assertEquals(struct.bitAlignment(), layout.bitAlignment());
+    }
+
+    @Test(dataProvider="basicLayouts")
+    public void testUnionPaddingAndAlign(MemoryLayout layout) {
+        MemoryLayout struct = MemoryLayout.ofUnion(
+                layout, MemoryLayout.ofPaddingBits(128 - layout.bitSize()));
+        assertEquals(struct.bitAlignment(), layout.bitAlignment());
+    }
+
     @Test
     public void testUnionSizeAndAlign() {
         MemoryLayout struct = MemoryLayout.ofUnion(
                 MemoryLayouts.JAVA_BYTE,
                 MemoryLayouts.JAVA_CHAR,
@@ -186,10 +206,15 @@
         );
         assertEquals(struct.byteSize(), 8);
         assertEquals(struct.byteAlignment(), 8);
     }
 
+    @Test(dataProvider = "layoutKinds")
+    public void testPadding(LayoutKind kind) {
+        assertEquals(kind == LayoutKind.PADDING, kind.layout.isPadding());
+    }
+
     @Test(dataProvider="layoutsAndAlignments")
     public void testAlignmentString(MemoryLayout layout, long bitAlign) {
         long[] alignments = { 8, 16, 32, 64, 128 };
         for (long a : alignments) {
             assertFalse(layout.toString().contains("%"));
@@ -234,10 +259,17 @@
             values[(i * 2) + 1] = new Object[] { layoutKinds[i].layout, 18 }; // not a power of 2
         }
         return values;
     }
 
+    @DataProvider(name = "layoutKinds")
+    public Object[][] layoutsKinds() {
+        return Stream.of(LayoutKind.values())
+                .map(lk -> new Object[] { lk })
+                .toArray(Object[][]::new);
+    }
+
     enum SizedLayoutFactory {
         VALUE_LE(size -> MemoryLayout.ofValueBits(size, ByteOrder.LITTLE_ENDIAN)),
         VALUE_BE(size -> MemoryLayout.ofValueBits(size, ByteOrder.BIG_ENDIAN)),
         PADDING(MemoryLayout::ofPaddingBits),
         SEQUENCE(size -> MemoryLayout.ofSequence(size, MemoryLayouts.PAD_8));
@@ -266,21 +298,19 @@
         LayoutKind(MemoryLayout layout) {
             this.layout = layout;
         }
     }
 
+    @DataProvider(name = "basicLayouts")
+    public Object[][] basicLayouts() {
+        return Stream.of(basicLayouts)
+                .map(l -> new Object[] { l })
+                .toArray(Object[][]::new);
+    }
+
     @DataProvider(name = "layoutsAndAlignments")
     public Object[][] layoutsAndAlignments() {
-        MemoryLayout[] basicLayouts = {
-                MemoryLayouts.JAVA_BYTE,
-                MemoryLayouts.JAVA_CHAR,
-                MemoryLayouts.JAVA_SHORT,
-                MemoryLayouts.JAVA_INT,
-                MemoryLayouts.JAVA_FLOAT,
-                MemoryLayouts.JAVA_LONG,
-                MemoryLayouts.JAVA_DOUBLE,
-        };
         Object[][] layoutsAndAlignments = new Object[basicLayouts.length * 5][];
         int i = 0;
         //add basic layouts
         for (MemoryLayout l : basicLayouts) {
             layoutsAndAlignments[i++] = new Object[] { l, l.bitAlignment() };
@@ -301,6 +331,16 @@
         for (MemoryLayout l : basicLayouts) {
             layoutsAndAlignments[i++] = new Object[] { MemoryLayout.ofUnion(l), l.bitAlignment() };
         }
         return layoutsAndAlignments;
     }
+
+    static MemoryLayout[] basicLayouts = {
+            MemoryLayouts.JAVA_BYTE,
+            MemoryLayouts.JAVA_CHAR,
+            MemoryLayouts.JAVA_SHORT,
+            MemoryLayouts.JAVA_INT,
+            MemoryLayouts.JAVA_FLOAT,
+            MemoryLayouts.JAVA_LONG,
+            MemoryLayouts.JAVA_DOUBLE,
+    };
 }
