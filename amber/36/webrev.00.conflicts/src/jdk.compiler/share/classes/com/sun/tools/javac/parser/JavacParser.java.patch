diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavacParser.java
@@ -562,14 +562,18 @@
 
     /**
      * Ident = IDENTIFIER
      */
     public Name ident() {
-        return ident(false);
+        return ident(false, false);
     }
 
     protected Name ident(boolean advanceOnErrors) {
+        return ident(advanceOnErrors, false);
+    }
+
+    protected Name ident(boolean advanceOnErrors, boolean underscoreAllowed) {
         if (token.kind == IDENTIFIER) {
             Name name = token.name();
             nextToken();
             return name;
         } else if (token.kind == ASSERT) {
@@ -591,14 +595,20 @@
                 log.error(DiagnosticFlag.SYNTAX, token.pos, Errors.ThisAsIdentifier);
                 nextToken();
                 return names.error;
             }
         } else if (token.kind == UNDERSCORE) {
-            if (Feature.UNDERSCORE_IDENTIFIER.allowedInSource(source)) {
-                log.warning(token.pos, Warnings.UnderscoreAsIdentifier);
-            } else {
-                log.error(DiagnosticFlag.SYNTAX, token.pos, Errors.UnderscoreAsIdentifier);
+            if (!underscoreAllowed) {
+                if (Feature.UNDERSCORE_AS_PARAM_NAME.allowedInSource(source)) {
+                    log.error(token.pos, Errors.UnderscoreNotAllowed);
+                } else {
+                    if (Feature.UNDERSCORE_IDENTIFIER.allowedInSource(source)) {
+                        log.warning(token.pos, Warnings.UnderscoreAsIdentifier);
+                    } else {
+                        log.error(token.pos, Errors.UnderscoreAsIdentifier);
+                    }
+                }
             }
             Name name = token.name();
             nextToken();
             return name;
         } else {
@@ -612,11 +622,15 @@
 
     /**
      * Qualident = Ident { DOT [Annotations] Ident }
      */
     public JCExpression qualident(boolean allowAnnos) {
-        JCExpression t = toP(F.at(token.pos).Ident(ident()));
+        return qualident(allowAnnos, false);
+    }
+
+    public JCExpression qualident(boolean allowAnnos, boolean underscoreAllowed) {
+        JCExpression t = toP(F.at(token.pos).Ident(ident(false, underscoreAllowed)));
         while (token.kind == DOT) {
             int pos = token.pos;
             nextToken();
             List<JCAnnotation> tyannos = null;
             if (allowAnnos) {
@@ -1793,11 +1807,11 @@
         PARENS
     }
 
     JCExpression lambdaExpressionOrStatement(boolean hasParens, boolean explicitParams, int pos) {
         List<JCVariableDecl> params = explicitParams ?
-                formalParameters(true, false) :
+                formalParameters(FormalParameterKind.LAMBDA) :
                 implicitParameters(hasParens);
         if (explicitParams) {
             LambdaClassifier lambdaClassifier = new LambdaClassifier();
             for (JCVariableDecl param: params) {
                 Name restrictedTypeName;
@@ -2871,11 +2885,11 @@
         JCModifiers mods = optFinal(Flags.PARAMETER);
         List<JCExpression> catchTypes = catchTypes();
         JCExpression paramType = catchTypes.size() > 1 ?
                 toP(F.at(catchTypes.head.getStartPosition()).TypeUnion(catchTypes)) :
                 catchTypes.head;
-        JCVariableDecl formal = variableDeclaratorId(mods, paramType);
+        JCVariableDecl formal = variableDeclaratorId(mods, paramType, FormalParameterKind.CATCH);
         accept(RPAREN);
         JCBlock body = block();
         return F.at(pos).Catch(formal, body);
     }
 
@@ -3368,30 +3382,72 @@
             }
         }
         return null;
     }
 
+    /** The kind of a formal parameter
+     */
+    enum FormalParameterKind {
+        /* a formal lambda parameter
+         */
+        LAMBDA {
+            @Override
+            boolean isLambdaParameter() {
+                return true;
+            }
+        },
+        /* a formal catch clause parameter
+         */
+        CATCH,
+        /* a formal method parameter
+         */
+        METHOD,
+        /* a formal record parameter
+         */
+        RECORD;
+
+        boolean isLambdaParameter() {
+            return false;
+        }
+        boolean isRecordParameter() {
+            return false;
+        }
+    }
+
     /** VariableDeclaratorId = Ident BracketsOpt
      */
     JCVariableDecl variableDeclaratorId(JCModifiers mods, JCExpression type) {
+<<<<<<< HEAD
         return variableDeclaratorId(mods, type, false, false);
     }
     //where
     JCVariableDecl variableDeclaratorId(JCModifiers mods, JCExpression type, boolean lambdaParameter, boolean recordComponent) {
+=======
+        return variableDeclaratorId(mods, type, FormalParameterKind.METHOD);
+    }
+
+    JCVariableDecl variableDeclaratorId(JCModifiers mods, JCExpression type, FormalParameterKind parameterKind) {
+>>>>>>> 7cffdc99929e9bbd89765c7d0e8390f9e40fe238
         int pos = token.pos;
         Name name;
-        if (lambdaParameter && token.kind == UNDERSCORE) {
+        boolean allowUnderscoreAsFormal = Feature.UNDERSCORE_AS_PARAM_NAME.allowedInSource(source);
+        boolean isUnderscore = token.kind == UNDERSCORE;
+        if (parameterKind.isLambdaParameter() && isUnderscore && !allowUnderscoreAsFormal) {
             log.error(pos, Errors.UnderscoreAsIdentifierInLambda);
             name = token.name();
             nextToken();
+        } else if (parameterKind == FormalParameterKind.METHOD && isUnderscore && allowUnderscoreAsFormal) {
+            log.error(pos, Errors.UnderscoreAsIdentifierInMethod);
+            name = token.name();
+            nextToken();
         } else {
             if (allowThisIdent ||
-                !lambdaParameter ||
+                parameterKind != FormalParameterKind.LAMBDA ||
                 LAX_IDENTIFIER.accepts(token.kind) ||
                 mods.flags != Flags.PARAMETER ||
                 mods.annotations.nonEmpty()) {
-                JCExpression pn = qualident(false);
+                JCExpression pn = qualident(false, allowUnderscoreAsFormal);
                 if (pn.hasTag(Tag.IDENT) && ((JCIdent)pn).name != names._this) {
                     name = ((JCIdent)pn).name;
                 } else {
                     if (allowThisIdent) {
                         if ((mods.flags & Flags.VARARGS) != 0) {
@@ -3419,16 +3475,25 @@
         }
         if ((mods.flags & Flags.VARARGS) != 0 &&
                 token.kind == LBRACKET) {
             log.error(token.pos, Errors.VarargsAndOldArraySyntax);
         }
+<<<<<<< HEAD
         if (recordComponent && token.kind == LBRACKET) {
             log.error(token.pos, Errors.RecordComponentAndOldArraySyntax);
         }
         type = bracketsOpt(type);
 
         return toP(F.at(pos).VarDef(mods, name, type, null));
+=======
+        int dimensionsPos = token.pos;
+        JCExpression typeWithDimensions = bracketsOpt(type);
+        if (allowUnderscoreAsFormal && isUnderscore && typeWithDimensions != type) {
+            log.error(dimensionsPos, Errors.UnderscoreCantBeFollowedByDimensions);
+        }
+        return toP(F.at(pos).VarDef(mods, name, typeWithDimensions, null));
+>>>>>>> 7cffdc99929e9bbd89765c7d0e8390f9e40fe238
     }
 
     /** Resources = Resource { ";" Resources }
      */
     List<JCTree> resources() {
@@ -3778,11 +3843,11 @@
         mods.flags |= Flags.RECORD;
         Name name = typeName();
 
         List<JCTypeParameter> typarams = typeParametersOpt();
 
-        List<JCVariableDecl> headerFields = formalParameters(false, true);
+        List<JCVariableDecl> headerFields = formalParameters(FormalParameterKind.RECORD);
 
         List<JCExpression> implementing = List.nil();
         if (token.kind == IMPLEMENTS) {
             nextToken();
             implementing = typeList();
@@ -4291,11 +4356,11 @@
             this.receiverParam = null;
             // Parsing formalParameters sets the receiverParam, if present
             List<JCVariableDecl> params = List.nil();
             List<JCExpression> thrown = List.nil();
             if (!isRecord || name != names.init || token.kind == LPAREN) {
-                params = formalParameters();
+                params = formalParameters(FormalParameterKind.METHOD);
                 if (!isVoid) type = bracketsOpt(type);
                 if (token.kind == THROWS) {
                     nextToken();
                     thrown = qualidentList(true);
                 }
@@ -4407,20 +4472,17 @@
 
     /** FormalParameters = "(" [ FormalParameterList ] ")"
      *  FormalParameterList = [ FormalParameterListNovarargs , ] LastFormalParameter
      *  FormalParameterListNovarargs = [ FormalParameterListNovarargs , ] FormalParameter
      */
-    List<JCVariableDecl> formalParameters() {
-        return formalParameters(false, false);
-    }
-    List<JCVariableDecl> formalParameters(boolean lambdaParameters, boolean recordComponents) {
+    List<JCVariableDecl> formalParameters(FormalParameterKind parameterKind) {
         ListBuffer<JCVariableDecl> params = new ListBuffer<>();
         JCVariableDecl lastParam;
         accept(LPAREN);
         if (token.kind != RPAREN) {
-            this.allowThisIdent = !lambdaParameters && !recordComponents;
-            lastParam = formalParameter(lambdaParameters, recordComponents);
+            this.allowThisIdent = parameterKind != FormalParameterKind.LAMBDA && parameterKind != FormalParameterKind.RECORD;
+            lastParam = formalParameter(parameterKind);
             if (lastParam.nameexpr != null) {
                 this.receiverParam = lastParam;
             } else {
                 params.append(lastParam);
             }
@@ -4428,11 +4490,11 @@
             while (token.kind == COMMA) {
                 if ((lastParam.mods.flags & Flags.VARARGS) != 0) {
                     log.error(DiagnosticFlag.SYNTAX, lastParam, Errors.VarargsMustBeLast);
                 }
                 nextToken();
-                params.append(lastParam = formalParameter(lambdaParameters, recordComponents));
+                params.append(lastParam = formalParameter(parameterKind));
             }
         }
         if (token.kind == RPAREN) {
             nextToken();
         } else {
@@ -4539,22 +4601,22 @@
     }
 
     /** FormalParameter = { FINAL | '@' Annotation } Type VariableDeclaratorId
      *  LastFormalParameter = { FINAL | '@' Annotation } Type '...' Ident | FormalParameter
      */
-    protected JCVariableDecl formalParameter(boolean lambdaParameter, boolean recordComponent) {
-        JCModifiers mods = !recordComponent ? optFinal(Flags.PARAMETER) : modifiersOpt();
-        if (recordComponent && mods.flags != 0) {
+    protected JCVariableDecl formalParameter(FormalParameterKind parameterKind) {
+        JCModifiers mods = parameterKind != FormalParameterKind.RECORD ? optFinal(Flags.PARAMETER) : modifiersOpt();
+        if (parameterKind == FormalParameterKind.RECORD && mods.flags != 0) {
             log.error(mods.pos, Errors.RecordCantDeclareFieldModifiers);
         }
-        if (recordComponent) {
+        if (parameterKind == FormalParameterKind.RECORD) {
             mods.flags |= Flags.RECORD | Flags.FINAL | Flags.PRIVATE | Flags.GENERATED_MEMBER;
         }
         // need to distinguish between vararg annos and array annos
         // look at typeAnnotationsPushedBack comment
         this.permitTypeAnnotationsPushBack = true;
-        JCExpression type = parseType(lambdaParameter);
+        JCExpression type = parseType(parameterKind == FormalParameterKind.LAMBDA);
         this.permitTypeAnnotationsPushBack = false;
 
         if (token.kind == ELLIPSIS) {
             List<JCAnnotation> varargsAnnos = typeAnnotationsPushedBack;
             typeAnnotationsPushedBack = List.nil();
@@ -4567,16 +4629,24 @@
             if (typeAnnotationsPushedBack.nonEmpty()) {
                 reportSyntaxError(typeAnnotationsPushedBack.head.pos, Errors.IllegalStartOfType);
             }
             typeAnnotationsPushedBack = List.nil();
         }
+<<<<<<< HEAD
         return variableDeclaratorId(mods, type, lambdaParameter, recordComponent);
+=======
+        return variableDeclaratorId(mods, type, parameterKind);
+>>>>>>> 7cffdc99929e9bbd89765c7d0e8390f9e40fe238
     }
 
     protected JCVariableDecl implicitParameter() {
         JCModifiers mods = F.at(token.pos).Modifiers(Flags.PARAMETER);
+<<<<<<< HEAD
         return variableDeclaratorId(mods, null, true, false);
+=======
+        return variableDeclaratorId(mods, null, FormalParameterKind.LAMBDA);
+>>>>>>> 7cffdc99929e9bbd89765c7d0e8390f9e40fe238
     }
 
 /* ---------- auxiliary methods -------------- */
     /** Check that given tree is a legal expression statement.
      */
