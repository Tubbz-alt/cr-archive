diff a/src/java.base/share/classes/java/lang/Class.java b/src/java.base/share/classes/java/lang/Class.java
--- a/src/java.base/share/classes/java/lang/Class.java
+++ b/src/java.base/share/classes/java/lang/Class.java
@@ -199,10 +199,12 @@
                               Constable {
     private static final int ANNOTATION= 0x00002000;
     private static final int ENUM      = 0x00004000;
     private static final int SYNTHETIC = 0x00001000;
 
+    private static final ClassDesc[] EMPTY_CLASS_DESC_ARRAY = new ClassDesc[0];
+
     private static native void registerNatives();
     static {
         registerNatives();
     }
 
@@ -3104,11 +3106,10 @@
         volatile Constructor<T>[] publicConstructors;
         // Intermediate results for getFields and getMethods
         volatile Field[] declaredPublicFields;
         volatile Method[] declaredPublicMethods;
         volatile Class<?>[] interfaces;
-        volatile ClassDesc[] permittedSubclasses;
 
         // Cached names
         String simpleName;
         String canonicalName;
         static final String NULL_SENTINEL = new String();
@@ -4390,45 +4391,34 @@
      *           feature of the Java language. Preview features
      *           may be removed in a future release, or upgraded to permanent
      *           features of the Java language.}
      *
      * Returns an array containing {@code ClassDesc} objects representing all the
-     * permitted subclasses of this {@code Class} if it is sealed. Returns an empty array if this
-     * {@code Class} is not sealed.
+     * direct subclasses or direct implementation classes permitted to extend or implement this class or interface
+     * if it is sealed. Returns an empty array if this class or interface is not sealed.
      *
-     * @return an array of class descriptors of all the permitted subclasses of this class
+     * @return an array of class descriptors of all the permitted subclasses of this class or interface
      *
      * @jls 8.1 Class Declarations
      * @jls 9.1 Interface Declarations
      * @since 15
      */
     @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.SEALED_CLASSES, essentialAPI=false)
     public ClassDesc[] permittedSubclasses() {
-        ReflectionData<T> rd = reflectionData();
-        if (rd.permittedSubclasses != null) {
-            return rd.permittedSubclasses;
-        }
-
-        if (isArray() || isPrimitive()) {
-            rd.permittedSubclasses = new ClassDesc[0];
-            return rd.permittedSubclasses;
-        }
-        String[] subclassNames = getPermittedSubclasses0();
-        if (subclassNames.length == 0) {
-            rd.permittedSubclasses = new ClassDesc[0];
-            return rd.permittedSubclasses;
+        String[] subclassNames;
+        if (isArray() || isPrimitive() || (subclassNames = getPermittedSubclasses0()).length == 0) {
+            return EMPTY_CLASS_DESC_ARRAY;
         }
         ClassDesc[] constants = new ClassDesc[subclassNames.length];
         int i = 0;
         for (String subclassName : subclassNames) {
             try {
                 constants[i++] = ClassDesc.of(subclassName.replace('/', '.'));
             } catch (IllegalArgumentException iae) {
                 throw new InternalError("Invalid type in permitted subclasses information: " + subclassName, iae);
             }
         }
-        rd.permittedSubclasses = constants;
         return constants;
     }
 
     /**
      * * {@preview Associated with sealed classes, a preview feature of the Java language.
@@ -4436,21 +4426,24 @@
      *           This method is associated with <i>sealed classes</i>, a preview
      *           feature of the Java language. Preview features
      *           may be removed in a future release, or upgraded to permanent
      *           features of the Java language.}
      *
-     * Returns true if this {@linkplain Class} is sealed.
+     * Returns {@code true} if and only if this {@code Class} object represents a sealed class or interface.
      *
-     * @return returns true if this class is sealed
+     * @return {@code true} if and only if this {@code Class} object represents a sealed class or interface.
      *
      * @jls 8.1 Class Declarations
      * @jls 9.1 Interface Declarations
      * @since 15
      */
     @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.SEALED_CLASSES, essentialAPI=false)
     @SuppressWarnings("preview")
     public boolean isSealed() {
+        if (isArray() || isPrimitive()) {
+            return false;
+        }
         return permittedSubclasses().length != 0;
     }
 
     private native String[] getPermittedSubclasses0();
 }
