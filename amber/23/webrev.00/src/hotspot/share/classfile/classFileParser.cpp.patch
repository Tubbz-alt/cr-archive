diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -3511,18 +3511,18 @@
                      CHECK);
 }
 
 bool ClassFileParser::supports_sealed_types() {
   return _major_version == JVM_CLASSFILE_MAJOR_VERSION &&
-    _minor_version == JAVA_PREVIEW_MINOR_VERSION &&
-    Arguments::enable_preview();
+         _minor_version == JAVA_PREVIEW_MINOR_VERSION &&
+         Arguments::enable_preview();
 }
 
 bool ClassFileParser::supports_records() {
   return _major_version == JVM_CLASSFILE_MAJOR_VERSION &&
-    _minor_version == JAVA_PREVIEW_MINOR_VERSION &&
-    Arguments::enable_preview();
+         _minor_version == JAVA_PREVIEW_MINOR_VERSION &&
+         Arguments::enable_preview();
 }
 
 void ClassFileParser::parse_classfile_attributes(const ClassFileStream* const cfs,
                                                  ConstantPool* cp,
                  ClassFileParser::ClassAnnotationCollector* parsed_annotations,
@@ -3788,16 +3788,16 @@
             // Check for PermittedSubclasses tag
             if (tag == vmSymbols::tag_permitted_subclasses()) {
               if (supports_sealed_types()) {
                 if (parsed_permitted_subclasses_attribute) {
                   classfile_parse_error("Multiple PermittedSubclasses attributes in class file %s", CHECK);
+                }
                 // Classes marked ACC_FINAL cannot have a PermittedSubclasses attribute.
-                } else if (_access_flags.is_final()) {
+                if (_access_flags.is_final()) {
                   classfile_parse_error("PermittedSubclasses attribute in final class file %s", CHECK);
-                } else {
-                  parsed_permitted_subclasses_attribute = true;
                 }
+                parsed_permitted_subclasses_attribute = true;
                 permitted_subclasses_attribute_start = cfs->current();
                 permitted_subclasses_attribute_length = attribute_length;
               }
               cfs->skip_u1(attribute_length, CHECK);
             } else {
@@ -4758,11 +4758,10 @@
 static void check_super_class_access(const InstanceKlass* this_klass, TRAPS) {
   assert(this_klass != NULL, "invariant");
   const Klass* const super = this_klass->super();
 
   if (super != NULL) {
-    assert(super->is_instance_klass(), "super is not instance klass");
     const InstanceKlass* super_ik = InstanceKlass::cast(super);
 
     if (super->is_final()) {
       ResourceMark rm(THREAD);
       Exceptions::fthrow(
@@ -4776,11 +4775,11 @@
 
     if (super_ik->is_sealed() && !super_ik->has_as_permitted_subclass(this_klass)) {
       ResourceMark rm(THREAD);
       Exceptions::fthrow(
         THREAD_AND_LOCATION,
-        vmSymbols::java_lang_VerifyError(),
+        vmSymbols::java_lang_IncompatibleClassChangeError(),
         "class %s cannot inherit from sealed class %s",
         this_klass->external_name(),
         super_ik->external_name());
       return;
     }
@@ -4847,11 +4846,11 @@
 
     if (k->is_sealed() && !k->has_as_permitted_subclass(this_klass)) {
       ResourceMark rm(THREAD);
       Exceptions::fthrow(
         THREAD_AND_LOCATION,
-        vmSymbols::java_lang_VerifyError(),
+        vmSymbols::java_lang_IncompatibleClassChangeError(),
         "class %s cannot %s sealed interface %s",
         this_klass->external_name(),
         this_klass->is_interface() ? "extend" : "implement",
         k->external_name());
       return;
