diff a/src/hotspot/share/oops/instanceKlass.cpp b/src/hotspot/share/oops/instanceKlass.cpp
--- a/src/hotspot/share/oops/instanceKlass.cpp
+++ b/src/hotspot/share/oops/instanceKlass.cpp
@@ -231,11 +231,19 @@
                              k->external_name(), this->external_name());
   }
 
   // Check that the class and its super are in the same module.
   if (k->module() != this->module()) {
-    log_trace(class, sealed)("Check failed for same module of permitted subclass of %s and sealed class %s",
+    ResourceMark rm(THREAD);
+    log_trace(class, sealed)("Check failed for same module of permitted subclass %s and sealed class %s",
+                             k->external_name(), this->external_name());
+    return false;
+  }
+
+  if (!k->is_public() && !is_same_class_package(k)) {
+    ResourceMark rm(THREAD);
+    log_trace(class, sealed)("Check failed, subclass %s not public and not in the same package as sealed class %s",
                              k->external_name(), this->external_name());
     return false;
   }
 
   // Check for a resolved cp entry, else fall back to a name check.
@@ -727,12 +735,12 @@
   }
 }
 
 bool InstanceKlass::is_sealed() const {
   return _permitted_subclasses != NULL &&
-        _permitted_subclasses != Universe::the_empty_short_array() &&
-        _permitted_subclasses->length() > 0;
+         _permitted_subclasses != Universe::the_empty_short_array() &&
+         _permitted_subclasses->length() > 0;
 }
 
 bool InstanceKlass::should_be_initialized() const {
   return !is_initialized();
 }
