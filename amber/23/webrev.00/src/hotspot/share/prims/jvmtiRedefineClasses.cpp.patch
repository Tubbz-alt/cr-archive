diff a/src/hotspot/share/prims/jvmtiRedefineClasses.cpp b/src/hotspot/share/prims/jvmtiRedefineClasses.cpp
--- a/src/hotspot/share/prims/jvmtiRedefineClasses.cpp
+++ b/src/hotspot/share/prims/jvmtiRedefineClasses.cpp
@@ -853,12 +853,14 @@
   return JVMTI_ERROR_NONE;
 }
 
 
 static jvmtiError check_permitted_subclasses_attribute(InstanceKlass* the_class,
-                                                     InstanceKlass* scratch_class) {
+                                                       InstanceKlass* scratch_class) {
   // Check whether the class PermittedSubclasses attribute has been changed.
+  Thread* thread = Thread::current();
+  ResourceMark rm(thread);
   Array<u2>* the_permitted_subclasses = the_class->permitted_subclasses();
   Array<u2>* scr_permitted_subclasses = scratch_class->permitted_subclasses();
   bool the_subclasses_exist = the_permitted_subclasses != Universe::the_empty_short_array();
   bool scr_subclasses_exist = scr_permitted_subclasses != Universe::the_empty_short_array();
   int subclasses_len = the_permitted_subclasses->length();
@@ -2002,15 +2004,14 @@
 // Rewrite constant pool references in the PermittedSubclasses attribute.
 bool VM_RedefineClasses::rewrite_cp_refs_in_permitted_subclasses_attribute(
        InstanceKlass* scratch_class) {
 
   Array<u2>* permitted_subclasses = scratch_class->permitted_subclasses();
-  if (permitted_subclasses != NULL) {
-    for (int i = 0; i < permitted_subclasses->length(); i++) {
-      u2 cp_index = permitted_subclasses->at(i);
-      permitted_subclasses->at_put(i, find_new_index(cp_index));
-    }
+  assert(permitted_subclasses != NULL, "unexpected null permitted_subclasses");
+  for (int i = 0; i < permitted_subclasses->length(); i++) {
+    u2 cp_index = permitted_subclasses->at(i);
+    permitted_subclasses->at_put(i, find_new_index(cp_index));
   }
   return true;
 }
 
 // Rewrite constant pool references in the methods.
