diff a/make/data/jdwp/jdwp.spec b/make/data/jdwp/jdwp.spec
--- a/make/data/jdwp/jdwp.spec
+++ b/make/data/jdwp/jdwp.spec
@@ -459,20 +459,13 @@
         "All breakpoints in the redefined classes are cleared."
         "If resetting of stack frames is desired, the "
         "<a href=\"#JDWP_StackFrame_PopFrames\">PopFrames</a> command can be used "
         "to pop frames with obsolete methods."
         "<p>"
-        "Unless the canUnrestrictedlyRedefineClasses capability is present the following "
-        "redefinitions are restricted: "
-        "<ul>"
-        "<li>changing the schema (the fields)</li>"
-        "<li>changing the hierarchy (superclasses, interfaces)</li>"
-        "<li>deleting a method</li>"
-        "<li>changing class modifiers</li>"
-        "<li>changing method modifiers</li>"
-        "<li>changing the <code>NestHost</code>, <code>NestMembers</code>, <code>PermittedSubclasses</code>, or <code>Record</code> class attributes</li>"
-        "</ul>"
+        "Unless the canUnrestrictedlyRedefineClasses capability is present "
+        "the redefinition must follow the restrictions described in "
+        "<a href=\"../jvmti.html#RedefineClasses\">JVM TI RedefineClasses</a>."
         "<p>"
         "Requires canRedefineClasses capability - see "
         "<a href=\"#JDWP_VirtualMachine_CapabilitiesNew\">CapabilitiesNew</a>. "
         "In addition to the canRedefineClasses capability, the target VM must "
         "have the canAddMethod capability to add methods when redefining classes, "
diff a/src/hotspot/share/classfile/classFileParser.cpp b/src/hotspot/share/classfile/classFileParser.cpp
--- a/src/hotspot/share/classfile/classFileParser.cpp
+++ b/src/hotspot/share/classfile/classFileParser.cpp
@@ -3511,18 +3511,18 @@
                      CHECK);
 }
 
 bool ClassFileParser::supports_sealed_types() {
   return _major_version == JVM_CLASSFILE_MAJOR_VERSION &&
-    _minor_version == JAVA_PREVIEW_MINOR_VERSION &&
-    Arguments::enable_preview();
+         _minor_version == JAVA_PREVIEW_MINOR_VERSION &&
+         Arguments::enable_preview();
 }
 
 bool ClassFileParser::supports_records() {
   return _major_version == JVM_CLASSFILE_MAJOR_VERSION &&
-    _minor_version == JAVA_PREVIEW_MINOR_VERSION &&
-    Arguments::enable_preview();
+         _minor_version == JAVA_PREVIEW_MINOR_VERSION &&
+         Arguments::enable_preview();
 }
 
 void ClassFileParser::parse_classfile_attributes(const ClassFileStream* const cfs,
                                                  ConstantPool* cp,
                  ClassFileParser::ClassAnnotationCollector* parsed_annotations,
@@ -3788,16 +3788,16 @@
             // Check for PermittedSubclasses tag
             if (tag == vmSymbols::tag_permitted_subclasses()) {
               if (supports_sealed_types()) {
                 if (parsed_permitted_subclasses_attribute) {
                   classfile_parse_error("Multiple PermittedSubclasses attributes in class file %s", CHECK);
+                }
                 // Classes marked ACC_FINAL cannot have a PermittedSubclasses attribute.
-                } else if (_access_flags.is_final()) {
+                if (_access_flags.is_final()) {
                   classfile_parse_error("PermittedSubclasses attribute in final class file %s", CHECK);
-                } else {
-                  parsed_permitted_subclasses_attribute = true;
                 }
+                parsed_permitted_subclasses_attribute = true;
                 permitted_subclasses_attribute_start = cfs->current();
                 permitted_subclasses_attribute_length = attribute_length;
               }
               cfs->skip_u1(attribute_length, CHECK);
             } else {
@@ -4758,11 +4758,10 @@
 static void check_super_class_access(const InstanceKlass* this_klass, TRAPS) {
   assert(this_klass != NULL, "invariant");
   const Klass* const super = this_klass->super();
 
   if (super != NULL) {
-    assert(super->is_instance_klass(), "super is not instance klass");
     const InstanceKlass* super_ik = InstanceKlass::cast(super);
 
     if (super->is_final()) {
       ResourceMark rm(THREAD);
       Exceptions::fthrow(
@@ -4776,11 +4775,11 @@
 
     if (super_ik->is_sealed() && !super_ik->has_as_permitted_subclass(this_klass)) {
       ResourceMark rm(THREAD);
       Exceptions::fthrow(
         THREAD_AND_LOCATION,
-        vmSymbols::java_lang_VerifyError(),
+        vmSymbols::java_lang_IncompatibleClassChangeError(),
         "class %s cannot inherit from sealed class %s",
         this_klass->external_name(),
         super_ik->external_name());
       return;
     }
@@ -4847,11 +4846,11 @@
 
     if (k->is_sealed() && !k->has_as_permitted_subclass(this_klass)) {
       ResourceMark rm(THREAD);
       Exceptions::fthrow(
         THREAD_AND_LOCATION,
-        vmSymbols::java_lang_VerifyError(),
+        vmSymbols::java_lang_IncompatibleClassChangeError(),
         "class %s cannot %s sealed interface %s",
         this_klass->external_name(),
         this_klass->is_interface() ? "extend" : "implement",
         k->external_name());
       return;
diff a/src/hotspot/share/oops/instanceKlass.cpp b/src/hotspot/share/oops/instanceKlass.cpp
--- a/src/hotspot/share/oops/instanceKlass.cpp
+++ b/src/hotspot/share/oops/instanceKlass.cpp
@@ -231,11 +231,19 @@
                              k->external_name(), this->external_name());
   }
 
   // Check that the class and its super are in the same module.
   if (k->module() != this->module()) {
-    log_trace(class, sealed)("Check failed for same module of permitted subclass of %s and sealed class %s",
+    ResourceMark rm(THREAD);
+    log_trace(class, sealed)("Check failed for same module of permitted subclass %s and sealed class %s",
+                             k->external_name(), this->external_name());
+    return false;
+  }
+
+  if (!k->is_public() && !is_same_class_package(k)) {
+    ResourceMark rm(THREAD);
+    log_trace(class, sealed)("Check failed, subclass %s not public and not in the same package as sealed class %s",
                              k->external_name(), this->external_name());
     return false;
   }
 
   // Check for a resolved cp entry, else fall back to a name check.
@@ -727,12 +735,12 @@
   }
 }
 
 bool InstanceKlass::is_sealed() const {
   return _permitted_subclasses != NULL &&
-        _permitted_subclasses != Universe::the_empty_short_array() &&
-        _permitted_subclasses->length() > 0;
+         _permitted_subclasses != Universe::the_empty_short_array() &&
+         _permitted_subclasses->length() > 0;
 }
 
 bool InstanceKlass::should_be_initialized() const {
   return !is_initialized();
 }
diff a/src/hotspot/share/prims/jvm.cpp b/src/hotspot/share/prims/jvm.cpp
--- a/src/hotspot/share/prims/jvm.cpp
+++ b/src/hotspot/share/prims/jvm.cpp
@@ -2110,29 +2110,23 @@
   InstanceKlass* ik = InstanceKlass::cast(c);
   {
     JvmtiVMObjectAllocEventCollector oam;
     Array<u2>* subclasses = ik->permitted_subclasses();
     int length = subclasses == NULL ? 0 : subclasses->length();
-    if (length != 0) {
-      objArrayOop r = oopFactory::new_objArray(SystemDictionary::String_klass(),
-                                               length, CHECK_NULL);
-      objArrayHandle result (THREAD, r);
-      int i;
-      for (i = 0; i < length; i++) {
-        int cp_index = subclasses->at(i);
-        // This returns <package-name>/<class-name>.
-        Symbol* klass_name = ik->constants()->klass_name_at(cp_index);
-        assert(klass_name != NULL, "Unexpected null klass_name");
-        Handle perm_subtype_h = java_lang_String::create_from_symbol(klass_name, CHECK_NULL);
-        result->obj_at_put(i, perm_subtype_h());
-      }
-      return (jobjectArray)JNIHandles::make_local(THREAD, result());
+    objArrayOop r = oopFactory::new_objArray(SystemDictionary::String_klass(),
+                                             length, CHECK_NULL);
+    objArrayHandle result(THREAD, r);
+    for (int i = 0; i < length; i++) {
+      int cp_index = subclasses->at(i);
+      // This returns <package-name>/<class-name>.
+      Symbol* klass_name = ik->constants()->klass_name_at(cp_index);
+      assert(klass_name != NULL, "Unexpected null klass_name");
+      Handle perm_subtype_h = java_lang_String::create_from_symbol(klass_name, CHECK_NULL);
+      result->obj_at_put(i, perm_subtype_h());
     }
+    return (jobjectArray)JNIHandles::make_local(THREAD, result());
   }
-  // if it gets to here return an empty array, cases will be: the class is primitive, or an array, or just not sealed
-  objArrayOop result = oopFactory::new_objArray(SystemDictionary::String_klass(), 0, CHECK_NULL);
-  return (jobjectArray)JNIHandles::make_local(env, result);
 }
 JVM_END
 
 // Constant pool access //////////////////////////////////////////////////////////
 
diff a/src/hotspot/share/prims/jvmtiRedefineClasses.cpp b/src/hotspot/share/prims/jvmtiRedefineClasses.cpp
--- a/src/hotspot/share/prims/jvmtiRedefineClasses.cpp
+++ b/src/hotspot/share/prims/jvmtiRedefineClasses.cpp
@@ -853,12 +853,14 @@
   return JVMTI_ERROR_NONE;
 }
 
 
 static jvmtiError check_permitted_subclasses_attribute(InstanceKlass* the_class,
-                                                     InstanceKlass* scratch_class) {
+                                                       InstanceKlass* scratch_class) {
   // Check whether the class PermittedSubclasses attribute has been changed.
+  Thread* thread = Thread::current();
+  ResourceMark rm(thread);
   Array<u2>* the_permitted_subclasses = the_class->permitted_subclasses();
   Array<u2>* scr_permitted_subclasses = scratch_class->permitted_subclasses();
   bool the_subclasses_exist = the_permitted_subclasses != Universe::the_empty_short_array();
   bool scr_subclasses_exist = scr_permitted_subclasses != Universe::the_empty_short_array();
   int subclasses_len = the_permitted_subclasses->length();
@@ -2002,15 +2004,14 @@
 // Rewrite constant pool references in the PermittedSubclasses attribute.
 bool VM_RedefineClasses::rewrite_cp_refs_in_permitted_subclasses_attribute(
        InstanceKlass* scratch_class) {
 
   Array<u2>* permitted_subclasses = scratch_class->permitted_subclasses();
-  if (permitted_subclasses != NULL) {
-    for (int i = 0; i < permitted_subclasses->length(); i++) {
-      u2 cp_index = permitted_subclasses->at(i);
-      permitted_subclasses->at_put(i, find_new_index(cp_index));
-    }
+  assert(permitted_subclasses != NULL, "unexpected null permitted_subclasses");
+  for (int i = 0; i < permitted_subclasses->length(); i++) {
+    u2 cp_index = permitted_subclasses->at(i);
+    permitted_subclasses->at_put(i, find_new_index(cp_index));
   }
   return true;
 }
 
 // Rewrite constant pool references in the methods.
diff a/src/java.base/share/classes/java/lang/Class.java b/src/java.base/share/classes/java/lang/Class.java
--- a/src/java.base/share/classes/java/lang/Class.java
+++ b/src/java.base/share/classes/java/lang/Class.java
@@ -199,10 +199,12 @@
                               Constable {
     private static final int ANNOTATION= 0x00002000;
     private static final int ENUM      = 0x00004000;
     private static final int SYNTHETIC = 0x00001000;
 
+    private static final ClassDesc[] EMPTY_CLASS_DESC_ARRAY = new ClassDesc[0];
+
     private static native void registerNatives();
     static {
         registerNatives();
     }
 
@@ -3104,11 +3106,10 @@
         volatile Constructor<T>[] publicConstructors;
         // Intermediate results for getFields and getMethods
         volatile Field[] declaredPublicFields;
         volatile Method[] declaredPublicMethods;
         volatile Class<?>[] interfaces;
-        volatile ClassDesc[] permittedSubclasses;
 
         // Cached names
         String simpleName;
         String canonicalName;
         static final String NULL_SENTINEL = new String();
@@ -4390,45 +4391,34 @@
      *           feature of the Java language. Preview features
      *           may be removed in a future release, or upgraded to permanent
      *           features of the Java language.}
      *
      * Returns an array containing {@code ClassDesc} objects representing all the
-     * permitted subclasses of this {@code Class} if it is sealed. Returns an empty array if this
-     * {@code Class} is not sealed.
+     * direct subclasses or direct implementation classes permitted to extend or implement this class or interface
+     * if it is sealed. Returns an empty array if this class or interface is not sealed.
      *
-     * @return an array of class descriptors of all the permitted subclasses of this class
+     * @return an array of class descriptors of all the permitted subclasses of this class or interface
      *
      * @jls 8.1 Class Declarations
      * @jls 9.1 Interface Declarations
      * @since 15
      */
     @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.SEALED_CLASSES, essentialAPI=false)
     public ClassDesc[] permittedSubclasses() {
-        ReflectionData<T> rd = reflectionData();
-        if (rd.permittedSubclasses != null) {
-            return rd.permittedSubclasses;
-        }
-
-        if (isArray() || isPrimitive()) {
-            rd.permittedSubclasses = new ClassDesc[0];
-            return rd.permittedSubclasses;
-        }
-        String[] subclassNames = getPermittedSubclasses0();
-        if (subclassNames.length == 0) {
-            rd.permittedSubclasses = new ClassDesc[0];
-            return rd.permittedSubclasses;
+        String[] subclassNames;
+        if (isArray() || isPrimitive() || (subclassNames = getPermittedSubclasses0()).length == 0) {
+            return EMPTY_CLASS_DESC_ARRAY;
         }
         ClassDesc[] constants = new ClassDesc[subclassNames.length];
         int i = 0;
         for (String subclassName : subclassNames) {
             try {
                 constants[i++] = ClassDesc.of(subclassName.replace('/', '.'));
             } catch (IllegalArgumentException iae) {
                 throw new InternalError("Invalid type in permitted subclasses information: " + subclassName, iae);
             }
         }
-        rd.permittedSubclasses = constants;
         return constants;
     }
 
     /**
      * * {@preview Associated with sealed classes, a preview feature of the Java language.
@@ -4436,21 +4426,24 @@
      *           This method is associated with <i>sealed classes</i>, a preview
      *           feature of the Java language. Preview features
      *           may be removed in a future release, or upgraded to permanent
      *           features of the Java language.}
      *
-     * Returns true if this {@linkplain Class} is sealed.
+     * Returns {@code true} if and only if this {@code Class} object represents a sealed class or interface.
      *
-     * @return returns true if this class is sealed
+     * @return {@code true} if and only if this {@code Class} object represents a sealed class or interface.
      *
      * @jls 8.1 Class Declarations
      * @jls 9.1 Interface Declarations
      * @since 15
      */
     @jdk.internal.PreviewFeature(feature=jdk.internal.PreviewFeature.Feature.SEALED_CLASSES, essentialAPI=false)
     @SuppressWarnings("preview")
     public boolean isSealed() {
+        if (isArray() || isPrimitive()) {
+            return false;
+        }
         return permittedSubclasses().length != 0;
     }
 
     private native String[] getPermittedSubclasses0();
 }
diff a/src/java.instrument/share/classes/java/lang/instrument/Instrumentation.java b/src/java.instrument/share/classes/java/lang/instrument/Instrumentation.java
--- a/src/java.instrument/share/classes/java/lang/instrument/Instrumentation.java
+++ b/src/java.instrument/share/classes/java/lang/instrument/Instrumentation.java
@@ -220,17 +220,12 @@
      *
      * <P>
      * Instances of the retransformed class are not affected.
      *
      * <P>
-     * The retransformation may change method bodies, the constant pool and
-     * attributes (unless explicitly prohibited).
-     * The retransformation must not add, remove or rename fields or methods, change the
-     * signatures of methods, or change inheritance.
-     * The retransformation must not change the <code>NestHost</code>, <code>NestMembers</code>,
-     * <code>PermittedSubclasses</code>, or <code>Record</code> attributes.
-     * These restrictions may be lifted in future versions.
+     * The supported class file changes are described in
+     * <a href="{@docRoot}/../specs/jvmti.html#RetransformClasses">JVM TI RetransformClasses</a>.
      * The class file bytes are not checked, verified and installed
      * until after the transformations have been applied, if the resultant bytes are in
      * error this method will throw an exception.
      *
      * <P>
@@ -311,17 +306,12 @@
      *
      * <P>
      * Instances of the redefined class are not affected.
      *
      * <P>
-     * The redefinition may change method bodies, the constant pool and attributes
-     * (unless explicitly prohibited).
-     * The redefinition must not add, remove or rename fields or methods, change the
-     * signatures of methods, or change inheritance.
-     * The redefinition must not change the <code>NestHost</code>, <code>NestMembers</code>,
-     * <code>PermittedSubclasses</code>, or <code>Record</code> attributes.
-     * These restrictions may be lifted in future versions.
+     * The supported class file changes are described in
+     * <a href="{@docRoot}/../specs/jvmti.html#RedefineClasses">JVM TI RedefineClasses</a>.
      * The class file bytes are not checked, verified and installed
      * until after the transformations have been applied, if the resultant bytes are in
      * error this method will throw an exception.
      *
      * <P>
diff a/src/jdk.jdi/share/classes/com/sun/jdi/VirtualMachine.java b/src/jdk.jdi/share/classes/com/sun/jdi/VirtualMachine.java
--- a/src/jdk.jdi/share/classes/com/sun/jdi/VirtualMachine.java
+++ b/src/jdk.jdi/share/classes/com/sun/jdi/VirtualMachine.java
@@ -212,21 +212,13 @@
      * is false any call of this method will throw this exception.
      * <LI>If {@link #canAddMethod() canAddMethod()} is false
      * attempting to add a method will throw this exception.
      * <LI>If {@link #canUnrestrictedlyRedefineClasses()
      *            canUnrestrictedlyRedefineClasses()}
-     * is false, attempting any of the following will throw
-     * this exception
-     *   <UL>
-     *   <LI>changing the schema (the fields)
-     *   <LI>changing the hierarchy (superclasses, interfaces)
-     *   <LI>deleting a method
-     *   <LI>changing class modifiers
-     *   <LI>changing method modifiers
-     *   <LI>changing the {@code NestHost}, {@code NestMembers}, {@code PermittedSubclasses}, or {@code Record} class attributes
-     *   </UL>
-     * </UL>
+     * is false attempting any of the unsupported class file changes described
+     * in <a href="{@docRoot}/../specs/jvmti.html#RedefineClasses">
+     * JVM TI RedefineClasses</a> will throw this exception.
      *
      * @throws java.lang.NoClassDefFoundError if the bytes
      * don't correspond to the reference type (the names
      * don't match).
      *
diff a/test/hotspot/jtreg/runtime/modules/SealedModuleTest.java b/test/hotspot/jtreg/runtime/modules/SealedModuleTest.java
--- a/test/hotspot/jtreg/runtime/modules/SealedModuleTest.java
+++ b/test/hotspot/jtreg/runtime/modules/SealedModuleTest.java
@@ -65,24 +65,31 @@
         // Test subtype in the same named package and named module as its super
         // class.  This should succeed.
         // Class sealedP1.C1 extends class sealedP1.SuperClass.
         Class p1_C1_class = Class.forName("sealedP1.C1");
 
-        // Test subtype in different named package but same named module as its
-        // super class. This should succeed.
+        // Test non-public class in same module but different package than its
+        // super class. This should throw ICCE.
         // Class sealedP2.C2 extends class sealedP1.SuperClass.
-        Class p2_C2_class = Class.forName("sealedP2.C2");
+        try {
+            Class p2_C2_class = Class.forName("sealedP2.C2");
+            throw new RuntimeException("Expected IncompatibleClassChangeError exception not thrown");
+        } catch (IncompatibleClassChangeError e) {
+            if (!e.getMessage().contains("cannot inherit from sealed class")) {
+                throw new RuntimeException("Wrong IncompatibleClassChangeError exception thrown: " + e.getMessage());
+            }
+        }
 
         // Test subtype in a different module than its super type.  This should
         // fail even though they have the same class loader.
         // Class sealedP3.C3 extends class sealedP1.SuperClass.
         try {
             Class p3_C3_class = Class.forName("sealedP3.C3");
-            throw new RuntimeException("Expected VerifyError exception not thrown");
-        } catch (VerifyError e) {
+            throw new RuntimeException("Expected IncompatibleClassChangeError exception not thrown");
+        } catch (IncompatibleClassChangeError e) {
             if (!e.getMessage().contains("cannot inherit from sealed class")) {
-                throw new RuntimeException("Wrong VerifyError exception thrown: " + e.getMessage());
+                throw new RuntimeException("Wrong IncompatibleClassChangeError exception thrown: " + e.getMessage());
             }
         }
 
     }
 }
diff a/test/hotspot/jtreg/runtime/modules/sealedP2/C2.java b/test/hotspot/jtreg/runtime/modules/sealedP2/C2.java
--- a/test/hotspot/jtreg/runtime/modules/sealedP2/C2.java
+++ b/test/hotspot/jtreg/runtime/modules/sealedP2/C2.java
@@ -22,8 +22,8 @@
  */
 
 // Small class used by SealedModuleTest
 package sealedP2;
 
-public final class C2 extends sealedP1.SuperClass {
+final class C2 extends sealedP1.SuperClass {
     public void method2() { }
 }
diff a/test/hotspot/jtreg/runtime/sealedClasses/Pkg/Permitted.java b/test/hotspot/jtreg/runtime/sealedClasses/Pkg/Permitted.java
--- a/test/hotspot/jtreg/runtime/sealedClasses/Pkg/Permitted.java
+++ b/test/hotspot/jtreg/runtime/sealedClasses/Pkg/Permitted.java
@@ -21,6 +21,6 @@
  * questions.
  */
 
 package Pkg;
 
-public final class Permitted implements SealedInterface { }
+final class Permitted implements SealedInterface { }
diff a/test/hotspot/jtreg/runtime/sealedClasses/SealedUnnamedModuleIntfTest.java b/test/hotspot/jtreg/runtime/sealedClasses/SealedUnnamedModuleIntfTest.java
--- a/test/hotspot/jtreg/runtime/sealedClasses/SealedUnnamedModuleIntfTest.java
+++ b/test/hotspot/jtreg/runtime/sealedClasses/SealedUnnamedModuleIntfTest.java
@@ -35,25 +35,25 @@
 
         // Classes Permitted, NotPermitted, and WrongPackage all try to implement
         // sealed interface SealedInterface.
         // Interface SealedInterface permits classes Permitted and WrongPackage.
 
-        // Test permitted subclass and superclass in unnamed module and same package.
-        // This should succeed.
+        // Test non-public permitted subclass and superclass in unnamed module and
+        // same package.  This should succeed.
         Class permitted = Class.forName("Pkg.Permitted");
 
         // Test unpermitted subclass and superclass in unnamed module and same package.
         // This should throw an exception.
         try {
             Class notPermitted = Class.forName("Pkg.NotPermitted");
-            throw new RuntimeException("Expected VerifyError exception not thrown");
-        } catch (VerifyError e) {
+            throw new RuntimeException("Expected IncompatibleClassChangeError exception not thrown");
+        } catch (IncompatibleClassChangeError e) {
             if (!e.getMessage().contains("cannot implement sealed interface")) {
-                throw new RuntimeException("Wrong VerifyError exception thrown: " + e.getMessage());
+                throw new RuntimeException("Wrong IncompatibleClassChangeError exception thrown: " + e.getMessage());
             }
         }
 
-        // Test both permitted subclass and superclass in unnamed module but in different
-        // packages.  This should not throw an exception.
+        // Test public permitted subclass and superclass in same unnamed module but in
+        // different packages.  This should not throw an exception.
         Class wrongPkg = Class.forName("otherPkg.WrongPackage");
     }
 }
diff a/test/hotspot/jtreg/runtime/sealedClasses/SealedUnnamedModuleTest.java b/test/hotspot/jtreg/runtime/sealedClasses/SealedUnnamedModuleTest.java
--- a/test/hotspot/jtreg/runtime/sealedClasses/SealedUnnamedModuleTest.java
+++ b/test/hotspot/jtreg/runtime/sealedClasses/SealedUnnamedModuleTest.java
@@ -42,23 +42,24 @@
 
         // Test unpermitted subclass and superclass in unnamed module and same package.
         // This should fail.
         try {
             Class mars = Class.forName("planets.Mars");
-            throw new RuntimeException("Expected VerifyError exception not thrown");
-        } catch (VerifyError e) {
+            throw new RuntimeException("Expected IncompatibleClassChangeError exception not thrown");
+        } catch (IncompatibleClassChangeError e) {
             if (!e.getMessage().contains("cannot inherit from sealed class")) {
-                throw new RuntimeException("Wrong VerifyError exception thrown: " + e.getMessage());
+                throw new RuntimeException("Wrong IncompatibleClassChangeError exception thrown: " + e.getMessage());
             }
         }
 
-        // Test both permitted subclass and superclass in unnamed module but in different
-        // packages.  This should fail.
+        // Test non-public permitted subclass and superclass in same unnamed module but
+        // in different packages.  This should fail.
         try {
             Class pluto = Class.forName("asteroids.Pluto");
-        } catch (VerifyError e) {
+            throw new RuntimeException("Expected IncompatibleClassChangeError exception not thrown");
+        } catch (IncompatibleClassChangeError e) {
             if (!e.getMessage().contains("cannot inherit from sealed class")) {
-                throw new RuntimeException("Wrong VerifyError exception thrown: " + e.getMessage());
+                throw new RuntimeException("Wrong IncompatibleClassChangeError exception thrown: " + e.getMessage());
             }
         }
     }
 }
diff a/test/hotspot/jtreg/runtime/sealedClasses/asteroids/Pluto.java b/test/hotspot/jtreg/runtime/sealedClasses/asteroids/Pluto.java
--- a/test/hotspot/jtreg/runtime/sealedClasses/asteroids/Pluto.java
+++ b/test/hotspot/jtreg/runtime/sealedClasses/asteroids/Pluto.java
@@ -21,7 +21,7 @@
  * questions.
  */
 
 package asteroids;
 
-public final class Pluto extends planets.OuterPlanets { }
+final class Pluto extends planets.OuterPlanets { }
 
