diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeMaker.java
@@ -40,15 +40,10 @@
 import com.sun.tools.javac.tree.JCTree.*;
 
 import static com.sun.tools.javac.code.Flags.*;
 import static com.sun.tools.javac.code.Kinds.Kind.*;
 import static com.sun.tools.javac.code.TypeTag.*;
-import com.sun.tools.javac.tree.JCTree;
-import com.sun.tools.javac.tree.JCTree.JCExpression;
-import com.sun.tools.javac.tree.JCTree.JCPattern;
-import com.sun.tools.javac.util.List;
-import com.sun.tools.javac.util.Name;
 
 /** Factory class for trees.
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
@@ -480,12 +475,12 @@
         JCBindingPattern tree = new JCBindingPattern(name, null, vartype);
         tree.pos = pos;
         return tree;
     }
 
-    public JCDeconstructionPattern DeconstructionPattern(Name name, JCExpression deconstructor, List<JCPattern> nested) {
-        JCDeconstructionPattern tree = new JCDeconstructionPattern(name, deconstructor, nested);
+    public JCDeconstructionPattern DeconstructionPattern(JCExpression deconstructor, List<JCPattern> nested) {
+        JCDeconstructionPattern tree = new JCDeconstructionPattern(deconstructor, nested);
         tree.pos = pos;
         return tree;
     }
 
     public JCLiteralPattern LiteralPattern(JCExpression cexp) {
@@ -657,11 +652,11 @@
         JCErroneous tree = new JCErroneous(errs);
         tree.pos = pos;
         return tree;
     }
 
-    public LetExpr LetExpr(List<? extends JCStatement> defs, JCExpression expr) {
+    public LetExpr LetExpr(List<JCStatement> defs, JCExpression expr) {
         LetExpr tree = new LetExpr(defs, expr);
         tree.pos = pos;
         return tree;
     }
 
