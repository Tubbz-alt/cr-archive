diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavaTokenizer.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavaTokenizer.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavaTokenizer.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/parser/JavaTokenizer.java
@@ -231,12 +231,12 @@
                 case '\n':
                 case '\r':
                     if (!multiline) {
                         lexError(reader.bp, Errors.IllegalEscChar);
                     } else {
-                        int start = reader.bp;
                         checkSourceLevel(reader.bp, Feature.TEXT_BLOCKS);
+                        int start = reader.bp;
                         if (reader.ch == '\r' && reader.peekChar() == '\n') {
                            reader.nextChar(translateEscapesNow);
                         }
                         reader.nextChar(translateEscapesNow);
                         processLineTerminator(start, reader.bp);
@@ -400,10 +400,21 @@
             reader.scanChar();
         }
         return count;
     }
 
+    /** Skip and process a line terminator.
+     */
+    private void skipLineTerminator() {
+        int start = reader.bp;
+        if (isCRLF()) {
+            reader.scanChar();
+        }
+        reader.scanChar();
+        processLineTerminator(start, reader.bp);
+    }
+
     /** Scan a string literal or text block.
      */
     private void scanString(int pos) {
         // Clear flags.
         isTextBlock = false;
@@ -423,30 +434,25 @@
         case 3: // Starting a text block.
             // Check if preview feature is enabled for text blocks.
             checkSourceLevel(pos, Feature.TEXT_BLOCKS);
             isTextBlock = true;
             // Verify the open delimiter sequence.
-            boolean hasOpenEOLN = false;
-            while (reader.bp < reader.buflen && Character.isWhitespace(reader.ch)) {
-                hasOpenEOLN = isEOLN();
-                if (hasOpenEOLN) {
+            while (reader.bp < reader.buflen) {
+                char ch = reader.ch;
+                if (ch != ' ' && ch != '\t' && ch != FF) {
                     break;
                 }
                 reader.scanChar();
             }
-            // Error if the open delimiter sequence not is """<Whitespace>*<LineTerminator>.
-            if (!hasOpenEOLN) {
+            if (isEOLN()) {
+                skipLineTerminator();
+            } else {
+                // Error if the open delimiter sequence is not
+                //     """<white space>*<LineTerminator>.
                 lexError(reader.bp, Errors.IllegalTextBlockOpen);
                 return;
             }
-            // Skip line terminator.
-            int start = reader.bp;
-            if (isCRLF()) {
-                reader.scanChar();
-            }
-            reader.scanChar();
-            processLineTerminator(start, reader.bp);
             break;
         }
         // While characters are available.
         while (reader.bp < reader.buflen) {
             // If possible close delimiter sequence.
@@ -464,17 +470,13 @@
                 // Line terminator in string literal is an error.
                 // Fall out to unclosed string literal error.
                 if (openCount == 1) {
                     break;
                 }
-                 // Add line terminator to string buffer.
-                int start = reader.bp;
-                if (isCRLF()) {
-                    reader.scanChar();
-                }
-                reader.putChar('\n', true);
-                processLineTerminator(start, reader.bp);
+                skipLineTerminator();
+                // Add line terminator to string buffer.
+                reader.putChar('\n', false);
                 // Record first line terminator for error recovery.
                 if (firstEOLN == -1) {
                     firstEOLN = reader.bp;
                 }
             } else if (reader.ch == '\\') {
