diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeCopier.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeCopier.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeCopier.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/tree/TreeCopier.java
@@ -500,20 +500,20 @@
     @DefinedBy(Api.COMPILER_TREE)
     public JCTree visitDeconstructionPattern(DeconstructionPatternTree node, P p) {
         JCDeconstructionPattern t = (JCDeconstructionPattern) node;
         JCExpression deconstructor = copy(t.deconstructor, p);
         List<JCPattern> nested = copy(t.nested, p);
-        return M.at(t.pos).DeconstructionPattern(t.name, deconstructor, nested);
+        return M.at(t.pos).DeconstructionPattern(deconstructor, nested);
     }
 
     @DefinedBy(Api.COMPILER_TREE)
     public JCTree visitLiteralPattern(LiteralPatternTree node, P p) {
         JCLiteralPattern t = (JCLiteralPattern)node;
         JCExpression value = copy(t.value, p);
         return M.at(t.pos).LiteralPattern(value);
     }
-    
+
     @DefinedBy(Api.COMPILER_TREE)
     public JCTree visitUnary(UnaryTree node, P p) {
         JCUnary t = (JCUnary) node;
         JCExpression arg = copy(t.arg, p);
         return M.at(t.pos).Unary(t.getTag(), arg);
@@ -600,11 +600,11 @@
     public JCTree visitOther(Tree node, P p) {
         JCTree tree = (JCTree) node;
         switch (tree.getTag()) {
             case LETEXPR: {
                 LetExpr t = (LetExpr) node;
-                List<? extends JCStatement> defs = copy(t.defs, p);
+                List<JCStatement> defs = copy(t.defs, p);
                 JCExpression expr = copy(t.expr, p);
                 return M.at(t.pos).LetExpr(defs, expr);
             }
             default:
                 throw new AssertionError("unknown tree tag: " + tree.getTag());
