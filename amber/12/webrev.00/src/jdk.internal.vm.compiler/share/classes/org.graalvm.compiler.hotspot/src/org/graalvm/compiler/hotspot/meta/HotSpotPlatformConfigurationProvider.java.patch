diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/meta/HotSpotPlatformConfigurationProvider.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/meta/HotSpotPlatformConfigurationProvider.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/meta/HotSpotPlatformConfigurationProvider.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/meta/HotSpotPlatformConfigurationProvider.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -35,10 +35,11 @@
 import org.graalvm.compiler.nodes.java.AbstractNewObjectNode;
 import org.graalvm.compiler.nodes.memory.FixedAccessNode;
 import org.graalvm.compiler.nodes.spi.PlatformConfigurationProvider;
 
 import jdk.vm.ci.meta.MetaAccessProvider;
+import jdk.vm.ci.meta.ResolvedJavaField;
 import jdk.vm.ci.meta.ResolvedJavaType;
 
 public class HotSpotPlatformConfigurationProvider implements PlatformConfigurationProvider {
     private final BarrierSet barrierSet;
 
@@ -59,58 +60,58 @@
         return barrierSet;
     }
 
     private BarrierSet createBarrierSet(GraalHotSpotVMConfig config, MetaAccessProvider metaAccess) {
         boolean useDeferredInitBarriers = config.useDeferredInitBarriers;
+        ResolvedJavaType objectArrayType = metaAccess.lookupJavaType(Object[].class);
         if (config.useG1GC) {
-            ResolvedJavaType referenceType = HotSpotReplacementsUtil.referenceType(metaAccess);
-            long referentOffset = HotSpotReplacementsUtil.referentOffset(metaAccess);
-            return new G1BarrierSet(referenceType, referentOffset) {
+            ResolvedJavaField referentField = HotSpotReplacementsUtil.referentField(metaAccess);
+            return new G1BarrierSet(objectArrayType, referentField) {
                 @Override
-                protected boolean writeRequiresPostBarrier(FixedAccessNode initializingWrite, ValueNode writtenValue) {
-                    if (!super.writeRequiresPostBarrier(initializingWrite, writtenValue)) {
+                protected boolean writeRequiresPostBarrier(FixedAccessNode node, ValueNode writtenValue) {
+                    if (!super.writeRequiresPostBarrier(node, writtenValue)) {
                         return false;
                     }
-                    return !useDeferredInitBarriers || !isWriteToNewObject(initializingWrite);
+                    return !useDeferredInitBarriers || !isWriteToNewObject(node);
                 }
             };
         } else {
-            return new CardTableBarrierSet() {
+            return new CardTableBarrierSet(objectArrayType) {
                 @Override
-                protected boolean writeRequiresBarrier(FixedAccessNode initializingWrite, ValueNode writtenValue) {
-                    if (!super.writeRequiresBarrier(initializingWrite, writtenValue)) {
+                protected boolean writeRequiresBarrier(FixedAccessNode node, ValueNode writtenValue) {
+                    if (!super.writeRequiresBarrier(node, writtenValue)) {
                         return false;
                     }
-                    return !useDeferredInitBarriers || !isWriteToNewObject(initializingWrite);
+                    return !useDeferredInitBarriers || !isWriteToNewObject(node);
                 }
 
             };
         }
     }
 
     /**
      * For initializing writes, the last allocation executed by the JVM is guaranteed to be
      * automatically card marked so it's safe to skip the card mark in the emitted code.
      */
-    protected boolean isWriteToNewObject(FixedAccessNode initializingWrite) {
-        if (!initializingWrite.getLocationIdentity().isInit()) {
+    protected boolean isWriteToNewObject(FixedAccessNode node) {
+        if (!node.getLocationIdentity().isInit()) {
             return false;
         }
         // This is only allowed for the last allocation in sequence
-        ValueNode base = initializingWrite.getAddress().getBase();
+        ValueNode base = node.getAddress().getBase();
         if (base instanceof AbstractNewObjectNode) {
-            Node pred = initializingWrite.predecessor();
+            Node pred = node.predecessor();
             while (pred != null) {
                 if (pred == base) {
                     return true;
                 }
                 if (pred instanceof AbstractNewObjectNode) {
-                    initializingWrite.getDebug().log(DebugContext.INFO_LEVEL, "Disallowed deferred init because %s was last allocation instead of %s", pred, base);
+                    node.getDebug().log(DebugContext.INFO_LEVEL, "Disallowed deferred init because %s was last allocation instead of %s", pred, base);
                     return false;
                 }
                 pred = pred.predecessor();
             }
         }
-        initializingWrite.getDebug().log(DebugContext.INFO_LEVEL, "Unable to find allocation for deferred init for %s with base %s", initializingWrite, base);
+        node.getDebug().log(DebugContext.INFO_LEVEL, "Unable to find allocation for deferred init for %s with base %s", node, base);
         return false;
     }
 }
