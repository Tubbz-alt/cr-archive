diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/memory/MemoryMapNode.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/memory/MemoryMapNode.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/memory/MemoryMapNode.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/memory/MemoryMapNode.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -47,32 +47,32 @@
 import org.graalvm.compiler.nodes.spi.LIRLowerable;
 import org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool;
 import jdk.internal.vm.compiler.word.LocationIdentity;
 
 @NodeInfo(allowedUsageTypes = {Extension, Memory}, cycles = CYCLES_0, size = SIZE_0)
-public final class MemoryMapNode extends FloatingNode implements MemoryMap, MemoryNode, LIRLowerable {
+public final class MemoryMapNode extends FloatingNode implements MemoryMap, SingleMemoryKill, LIRLowerable {
 
     public static final NodeClass<MemoryMapNode> TYPE = NodeClass.create(MemoryMapNode.class);
     protected final List<LocationIdentity> locationIdentities;
     @Input(Memory) NodeInputList<ValueNode> nodes;
 
-    private boolean checkOrder(EconomicMap<LocationIdentity, MemoryNode> mmap) {
+    private boolean checkOrder(EconomicMap<LocationIdentity, MemoryKill> mmap) {
         for (int i = 0; i < locationIdentities.size(); i++) {
             LocationIdentity locationIdentity = locationIdentities.get(i);
             ValueNode n = nodes.get(i);
             assertTrue(mmap.get(locationIdentity) == n, "iteration order of keys differs from values in input map");
         }
         return true;
     }
 
-    public MemoryMapNode(EconomicMap<LocationIdentity, MemoryNode> mmap) {
+    public MemoryMapNode(EconomicMap<LocationIdentity, MemoryKill> mmap) {
         super(TYPE, StampFactory.forVoid());
         int size = mmap.size();
         locationIdentities = new ArrayList<>(size);
         nodes = new NodeInputList<>(this, size);
         int index = 0;
-        MapCursor<LocationIdentity, MemoryNode> cursor = mmap.getEntries();
+        MapCursor<LocationIdentity, MemoryKill> cursor = mmap.getEntries();
         while (cursor.advance()) {
             locationIdentities.add(cursor.getKey());
             nodes.initialize(index, (ValueNode) cursor.getValue());
             index++;
         }
@@ -90,36 +90,41 @@
         }
         return false;
     }
 
     @Override
-    public MemoryNode getLastLocationAccess(LocationIdentity locationIdentity) {
+    public MemoryKill getLastLocationAccess(LocationIdentity locationIdentity) {
         if (locationIdentity.isImmutable()) {
             return null;
         } else {
             int index = locationIdentities.indexOf(locationIdentity);
             if (index == -1) {
                 index = locationIdentities.indexOf(any());
             }
             assert index != -1;
-            return (MemoryNode) nodes.get(index);
+            return (MemoryKill) nodes.get(index);
         }
     }
 
     @Override
     public Collection<LocationIdentity> getLocations() {
         return locationIdentities;
     }
 
-    public EconomicMap<LocationIdentity, MemoryNode> toMap() {
-        EconomicMap<LocationIdentity, MemoryNode> res = EconomicMap.create(Equivalence.DEFAULT, locationIdentities.size());
+    public EconomicMap<LocationIdentity, MemoryKill> toMap() {
+        EconomicMap<LocationIdentity, MemoryKill> res = EconomicMap.create(Equivalence.DEFAULT, locationIdentities.size());
         for (int i = 0; i < nodes.size(); i++) {
-            res.put(locationIdentities.get(i), (MemoryNode) nodes.get(i));
+            res.put(locationIdentities.get(i), (MemoryKill) nodes.get(i));
         }
         return res;
     }
 
     @Override
     public void generate(NodeLIRBuilderTool generator) {
         // nothing to do...
     }
+
+    @Override
+    public LocationIdentity getKilledLocationIdentity() {
+        return LocationIdentity.any();
+    }
 }
