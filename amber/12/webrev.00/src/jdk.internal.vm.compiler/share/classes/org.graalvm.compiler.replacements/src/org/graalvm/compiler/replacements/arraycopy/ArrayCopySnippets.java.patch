diff a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/arraycopy/ArrayCopySnippets.java b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/arraycopy/ArrayCopySnippets.java
--- a/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/arraycopy/ArrayCopySnippets.java
+++ b/src/jdk.internal.vm.compiler/share/classes/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/arraycopy/ArrayCopySnippets.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2011, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2011, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -373,11 +373,10 @@
         private final SnippetInfo genericArraycopyWithSlowPathWork;
         private final SnippetInfo exactArraycopyWithSlowPathWork;
 
         private ResolvedJavaMethod originalArraycopy;
         private final Counters counters;
-        private boolean expandArraycopyLoop;
 
         public Templates(ArrayCopySnippets receiver, OptionValues options, Iterable<DebugHandlersFactory> factories, Factory factory, Providers providers,
                         SnippetReflectionProvider snippetReflection, TargetDescription target) {
             super(options, factories, providers, snippetReflection, target);
             this.counters = new Counters(factory);
@@ -396,10 +395,14 @@
             SnippetInfo info = snippet(ArrayCopySnippets.class, methodName, originalArraycopy(), receiver, LocationIdentity.any());
             return info;
         }
 
         public void lower(ArrayCopyNode arraycopy, LoweringTool tool) {
+            lower(arraycopy, false, tool);
+        }
+
+        public void lower(ArrayCopyNode arraycopy, boolean mayExpandThisArraycopy, LoweringTool tool) {
             JavaKind elementKind = selectComponentKind(arraycopy);
             SnippetInfo snippetInfo;
             ArrayCopyTypeCheck arrayTypeCheck;
 
             ResolvedJavaType srcType = StampTool.typeOrNull(arraycopy.getSource().stamp(NodeView.DEFAULT));
@@ -454,11 +457,11 @@
                         arrayTypeCheck = ArrayCopyTypeCheck.LAYOUT_HELPER_BASED_ARRAY_TYPE_CHECK;
                     }
                 }
             }
 
-            if (this.expandArraycopyLoop && snippetInfo == arraycopyExactStubCallSnippet) {
+            if (mayExpandThisArraycopy && snippetInfo == arraycopyExactStubCallSnippet) {
                 snippetInfo = arraycopyExactSnippet;
             }
 
             // create the snippet
             Arguments args = new Arguments(snippetInfo, arraycopy.graph().getGuardsStage(), tool.getLoweringStage());
@@ -492,13 +495,17 @@
 
             instantiate(args, arraycopy);
         }
 
         public void lower(ArrayCopyWithDelayedLoweringNode arraycopy, LoweringTool tool) {
+            lower(arraycopy, false, tool);
+        }
+
+        public void lower(ArrayCopyWithDelayedLoweringNode arraycopy, boolean mayExpandArraycopyLoops, LoweringTool tool) {
             StructuredGraph graph = arraycopy.graph();
 
-            if (arraycopy.getSnippet() == exactArraycopyWithSlowPathWork && this.expandArraycopyLoop) {
+            if (arraycopy.getSnippet() == exactArraycopyWithSlowPathWork && mayExpandArraycopyLoops) {
                 if (!graph.getGuardsStage().areDeoptsFixed()) {
                     // Don't lower until floating guards are fixed.
                     return;
                 }
             } else {
@@ -595,11 +602,7 @@
                     throw new GraalError(e);
                 }
             }
             return originalArraycopy;
         }
-
-        public void setExpandArraycopyLoop(boolean b) {
-            this.expandArraycopyLoop = b;
-        }
     }
 }
