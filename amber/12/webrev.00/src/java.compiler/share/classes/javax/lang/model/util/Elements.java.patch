diff a/src/java.compiler/share/classes/javax/lang/model/util/Elements.java b/src/java.compiler/share/classes/javax/lang/model/util/Elements.java
--- a/src/java.compiler/share/classes/javax/lang/model/util/Elements.java
+++ b/src/java.compiler/share/classes/javax/lang/model/util/Elements.java
@@ -23,11 +23,10 @@
  * questions.
  */
 
 package javax.lang.model.util;
 
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.LinkedHashSet;
@@ -244,17 +243,17 @@
     /**
      * Returns the text of the documentation (&quot;Javadoc&quot;)
      * comment of an element.
      *
      * <p> A documentation comment of an element is a comment that
-     * begins with "{@code /**}" , ends with a separate
+     * begins with "{@code /**}", ends with a separate
      * "<code>*&#47;</code>", and immediately precedes the element,
      * ignoring white space.  Therefore, a documentation comment
-     * contains at least three"{@code *}" characters.  The text
+     * contains at least three "{@code *}" characters.  The text
      * returned for the documentation comment is a processed form of
-     * the comment as it appears in source code.  The leading "{@code
-     * /**}" and trailing "<code>*&#47;</code>" are removed.  For lines
+     * the comment as it appears in source code.  The leading "{@code /**}"
+     * and trailing "<code>*&#47;</code>" are removed.  For lines
      * of the comment starting after the initial "{@code /**}",
      * leading white space characters are discarded as are any
      * consecutive "{@code *}" characters appearing after the white
      * space or starting the line.  The processed lines are then
      * concatenated together (including line terminators) and
@@ -380,11 +379,11 @@
         /**
          * Describes a construct explicitly declared in source code.
          */
         EXPLICIT,
 
-       /**
+        /**
          * A mandated construct is one that is not explicitly declared
          * in the source code, but whose presence is mandated by the
          * specification. Such a construct is said to be implicitly
          * declared.
          *
@@ -401,23 +400,23 @@
          * @jls 9.6.3 Repeatable Annotation Types
          * @jls 9.7.5 Multiple Annotations of the Same Type
          */
         MANDATED,
 
-       /**
+        /**
          * A synthetic construct is one that is neither implicitly nor
          * explicitly declared in the source code. Such a construct is
          * typically a translation artifact created by a compiler.
          */
         SYNTHETIC;
 
         /**
          * Returns {@code true} for values corresponding to constructs
          * that are implicitly or explicitly declared, {@code false}
          * otherwise.
-         * @return {@code true} for {@link EXPLICIT} and {@link
-         * MANDATED}, {@code false} otherwise.
+         * @return {@code true} for {@link #EXPLICIT} and {@link #MANDATED},
+         *         {@code false} otherwise.
          */
         public boolean isDeclared() {
             return this != SYNTHETIC;
         }
     }
