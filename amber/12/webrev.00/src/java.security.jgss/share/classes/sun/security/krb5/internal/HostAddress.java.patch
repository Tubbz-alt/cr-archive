diff a/src/java.security.jgss/share/classes/sun/security/krb5/internal/HostAddress.java b/src/java.security.jgss/share/classes/sun/security/krb5/internal/HostAddress.java
--- a/src/java.security.jgss/share/classes/sun/security/krb5/internal/HostAddress.java
+++ b/src/java.security.jgss/share/classes/sun/security/krb5/internal/HostAddress.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -131,11 +131,10 @@
 
     /**
      * Gets the InetAddress of this HostAddress.
      * @return the IP address for this specified host.
      * @exception UnknownHostException if no IP address for the host could be found.
-     *
      */
     public InetAddress getInetAddress() throws UnknownHostException {
         // the type of internet addresses is 2.
         if (addrType == Krb5.ADDRTYPE_INET ||
             addrType == Krb5.ADDRTYPE_INET6) {
@@ -170,11 +169,10 @@
      * @param new_addrType the value of the address type which matches the defined
      *                       address family constants in the Berkeley Standard
      *                       Distributions of Unix.
      * @param new_address network address.
      * @exception KrbApErrException if address type and address length do not match defined value.
-     *
      */
     public HostAddress(int new_addrType, byte[] new_address)
         throws KrbApErrException, UnknownHostException {
         switch(new_addrType) {
         case Krb5.ADDRTYPE_INET:        //Internet address
@@ -226,11 +224,10 @@
     /**
      * Constructs a host address from a single DER-encoded value.
      * @param encoding a single DER-encoded value.
      * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.
      * @exception IOException if an I/O error occurs while reading encoded data.
-     *
      */
     public HostAddress(DerValue encoding) throws Asn1Exception, IOException {
         DerValue der = encoding.getData().getDerValue();
         if ((der.getTag() & (byte)0x1F) == (byte)0x00) {
             addrType = der.getData().getBigInteger().intValue();
@@ -246,17 +243,15 @@
         if (encoding.getData().available() > 0)
             throw new Asn1Exception(Krb5.ASN1_BAD_ID);
     }
 
     /**
-         * Encodes a HostAddress object.
-         * @return a byte array of encoded HostAddress object.
-         * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.
-         * @exception IOException if an I/O error occurs while reading encoded data.
-         *
-         */
-
+     * Encodes a HostAddress object.
+     * @return a byte array of encoded HostAddress object.
+     * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.
+     * @exception IOException if an I/O error occurs while reading encoded data.
+     */
     public byte[] asn1Encode() throws Asn1Exception, IOException {
         DerOutputStream bytes = new DerOutputStream();
         DerOutputStream temp = new DerOutputStream();
         temp.putInteger(this.addrType);
         bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x00), temp);
@@ -269,19 +264,18 @@
     }
 
     /**
      * Parses (unmarshal) a host address from a DER input stream.  This form
      * parsing might be used when expanding a value which is part of
-         * a constructed sequence and uses explicitly tagged type.
+     * a constructed sequence and uses explicitly tagged type.
      *
      * @exception Asn1Exception on error.
      * @exception IOException if an I/O error occurs while reading encoded data.
      * @param data the Der input stream value, which contains one or more marshaled value.
      * @param explicitTag tag number.
      * @param optional indicates if this data field is optional
      * @return an instance of HostAddress.
-     *
      */
     public static HostAddress parse(DerInputStream data, byte explicitTag,
                                     boolean optional)
         throws Asn1Exception, IOException{
         if ((optional) &&
