diff a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/History.java b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/History.java
--- a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/History.java
+++ b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/History.java
@@ -43,23 +43,29 @@
     void save() throws IOException;
 
     /**
      * Write history to the file. If incremental only the events that are new since the last incremental operation to
      * the file are added.
+     * @param  file        History file
+     * @param  incremental If true incremental write operation is performed.
      * @throws IOException if a problem occurs
      */
     void write(Path file, boolean incremental) throws IOException;
 
     /**
      * Append history to the file. If incremental only the events that are new since the last incremental operation to
      * the file are added.
+     * @param  file        History file
+     * @param  incremental If true incremental append operation is performed.
      * @throws IOException if a problem occurs
      */
     void append(Path file, boolean incremental) throws IOException;
 
     /**
      * Read history from the file. If incremental only the events that are not contained within the internal list are added.
+     * @param  file        History file
+     * @param  incremental If true incremental read operation is performed.
      * @throws IOException if a problem occurs
      */
     void read(Path file, boolean incremental) throws IOException;
 
     /**
@@ -131,10 +137,15 @@
             }
             @Override
             public Entry next() {
                 return it.previous();
             }
+            @Override
+            public void remove() {
+                it.remove();
+                resetIndex();
+            }
         };
     }
 
     //
     // Navigation
@@ -189,6 +200,11 @@
     /**
      * Move to the end of the history buffer. This will be a blank entry, after
      * all of the other iterator.
      */
     void moveToEnd();
+
+    /**
+     * Reset index after remove
+     */
+    void resetIndex();
 }
