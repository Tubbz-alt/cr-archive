diff a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/LineReader.java b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/LineReader.java
--- a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/LineReader.java
+++ b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/LineReader.java
@@ -1,16 +1,18 @@
 /*
- * Copyright (c) 2002-2018, the original author or authors.
+ * Copyright (c) 2002-2019, the original author or authors.
  *
  * This software is distributable under the BSD license. See the terms of the
  * BSD license in the documentation provided with this software.
  *
  * https://opensource.org/licenses/BSD-3-Clause
  */
 package jdk.internal.org.jline.reader;
 
+import java.io.File;
 import java.io.InputStream;
+import java.util.Collection;
 import java.util.Map;
 import java.util.function.IntConsumer;
 
 import jdk.internal.org.jline.keymap.KeyMap;
 import jdk.internal.org.jline.terminal.MouseEvent;
@@ -55,11 +57,11 @@
  * <dd>A short word explaining what is "missing". This is supplied from
  * the {@link EOFError#getMissing()} method, if provided.
  * Defaults to an empty string.
  * </dd>
  * <dt>{@code %}<var>n</var>{@code P}<var>c</var></dt>
- * <dd>Insert padding at this possion, repeating the following
+ * <dd>Insert padding at this position, repeating the following
  *   character <var>c</var> as needed to bring the total prompt
  *   column width as specified by the digits <var>n</var>.
  * </dd>
  * <dt>{@code %P}<var>c</var></dt>
  * <dd>As before, but use width from the initial prompt.
@@ -128,10 +130,11 @@
     String DOWN_CASE_WORD = "down-case-word";
     String DOWN_HISTORY = "down-history";
     String DOWN_LINE = "down-line";
     String DOWN_LINE_OR_HISTORY = "down-line-or-history";
     String DOWN_LINE_OR_SEARCH = "down-line-or-search";
+    String EDIT_AND_EXECUTE_COMMAND = "edit-and-execute-command";
     String EMACS_BACKWARD_WORD = "emacs-backward-word";
     String EMACS_EDITING_MODE = "emacs-editing-mode";
     String EMACS_FORWARD_WORD = "emacs-forward-word";
     String END_OF_BUFFER_OR_HISTORY = "end-of-buffer-or-history";
     String END_OF_HISTORY = "end-of-history";
@@ -352,10 +355,23 @@
     /**
      * Number of history items to keep in the history file.
      */
     String HISTORY_FILE_SIZE = "history-file-size";
 
+    /**
+     * New line automatic indentation after opening/closing bracket.
+     */
+    String INDENTATION = "indentation";
+
+    /**
+     * Max buffer size for advanced features.
+     * Once the length of the buffer reaches this threshold, no
+     * advanced features will be enabled. This includes the undo
+     * buffer, syntax highlighting, parsing, etc....
+     */
+    String FEATURES_MAX_BUFFER_SIZE = "features-max-buffer-size";
+
     Map<String, KeyMap<Binding>> defaultKeyMaps();
 
     enum Option {
         COMPLETE_IN_WORD,
         DISABLE_EVENT_EXPANSION,
@@ -396,10 +412,11 @@
          * the right margin, it will be shown at the start of the next line.
          */
         DELAY_LINE_WRAP,
         AUTO_PARAM_SLASH(true),
         AUTO_REMOVE_SLASH(true),
+        USE_FORWARD_SLASH(false),
         /** When hitting the <code>&lt;tab&gt;</code> key at the beginning of the line, insert a tabulation
          *  instead of completing.  This is mainly useful when {@link #BRACKETED_PASTE} is
          *  disabled, so that copy/paste of indented text does not trigger completion.
          */
         INSERT_TAB,
@@ -413,10 +430,16 @@
          */
         ERASE_LINE_ON_FINISH,
 
         /** if history search is fully case insensitive */
         CASE_INSENSITIVE_SEARCH,
+
+        /** Automatic insertion of closing bracket */
+        INSERT_BRACKET,
+
+        /** Show command options tab completion candidates for zero length word */
+        EMPTY_WORD_OPTIONS(true),
         ;
 
         private final boolean def;
 
         Option() {
@@ -437,10 +460,31 @@
         CHAR,
         LINE,
         PASTE
     }
 
+    enum SuggestionType {
+        /**
+         * As you type command line suggestions are disabled.
+         */
+        NONE,
+        /**
+         * Prepare command line suggestions using command history.
+         * Requires an additional widgets implementation.
+         */
+        HISTORY,
+        /**
+         * Prepare command line suggestions using command completer data.
+         */
+        COMPLETER,
+        /**
+         * Prepare command line suggestions using command completer data and/or command positional argument descriptions.
+         * Requires an additional widgets implementation.
+         */
+        TAIL_TIP
+    }
+
     /**
      * Read the next line and return the contents of the buffer.
      *
      * Equivalent to <code>readLine(null, null, null)</code>.
      *
@@ -653,6 +697,19 @@
 
     RegionType getRegionActive();
 
     int getRegionMark();
 
+    void addCommandsInBuffer(Collection<String> commands);
+
+    void editAndAddInBuffer(File file) throws Exception;
+
+    String getLastBinding();
+
+    String getTailTip();
+
+    void setTailTip(String tailTip);
+
+    void setAutosuggestion(SuggestionType type);
+
+    SuggestionType getAutosuggestion();
 }
