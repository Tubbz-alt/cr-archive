diff a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/terminal/impl/ExternalTerminal.java b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/terminal/impl/ExternalTerminal.java
--- a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/terminal/impl/ExternalTerminal.java
+++ b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/terminal/impl/ExternalTerminal.java
@@ -6,11 +6,13 @@
  *
  * https://opensource.org/licenses/BSD-3-Clause
  */
 package jdk.internal.org.jline.terminal.impl;
 
+import jdk.internal.org.jline.terminal.Attributes;
 import jdk.internal.org.jline.terminal.Cursor;
+import jdk.internal.org.jline.terminal.Size;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.charset.Charset;
@@ -55,21 +57,38 @@
                             InputStream masterInput,
                             OutputStream masterOutput,
                             Charset encoding,
                             SignalHandler signalHandler,
                             boolean paused) throws IOException {
+        this(name, type, masterInput, masterOutput, encoding, signalHandler, paused, null, null);
+    }
+
+    public ExternalTerminal(String name, String type,
+                            InputStream masterInput,
+                            OutputStream masterOutput,
+                            Charset encoding,
+                            SignalHandler signalHandler,
+                            boolean paused,
+                            Attributes attributes,
+                            Size size) throws IOException {
         super(name, type, masterOutput, encoding, signalHandler);
         this.masterInput = masterInput;
+        if (attributes != null) {
+            setAttributes(attributes);
+        }
+        if (size != null) {
+            setSize(size);
+        }
         if (!paused) {
             resume();
         }
     }
 
-    public void close() throws IOException {
+    protected void doClose() throws IOException {
         if (closed.compareAndSet(false, true)) {
             pause();
-            super.close();
+            super.doClose();
         }
     }
 
     @Override
     public boolean canPauseResume() {
