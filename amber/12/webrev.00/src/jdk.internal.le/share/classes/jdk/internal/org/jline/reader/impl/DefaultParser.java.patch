diff a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/impl/DefaultParser.java b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/impl/DefaultParser.java
--- a/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/impl/DefaultParser.java
+++ b/src/jdk.internal.le/share/classes/jdk/internal/org/jline/reader/impl/DefaultParser.java
@@ -1,17 +1,19 @@
 /*
- * Copyright (c) 2002-2018, the original author or authors.
+ * Copyright (c) 2002-2020, the original author or authors.
  *
  * This software is distributable under the BSD license. See the terms of the
  * BSD license in the documentation provided with this software.
  *
  * https://opensource.org/licenses/BSD-3-Clause
  */
 package jdk.internal.org.jline.reader.impl;
 
 import java.util.*;
 import java.util.function.Predicate;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import jdk.internal.org.jline.reader.CompletingParsedLine;
 import jdk.internal.org.jline.reader.EOFError;
 import jdk.internal.org.jline.reader.ParsedLine;
 import jdk.internal.org.jline.reader.Parser;
@@ -35,10 +37,14 @@
 
     private char[] openingBrackets = null;
 
     private char[] closingBrackets = null;
 
+    private String regexVariable = "[a-zA-Z_]{1,}[a-zA-Z0-9_-]*((.|\\['|\\[\\\"|\\[)[a-zA-Z0-9_-]*(|'\\]|\\\"\\]|\\])){0,1}";
+    private String regexCommand = "[:]{0,1}[a-zA-Z]{1,}[a-zA-Z0-9_-]*";
+    private int commandGroup = 4;
+
     //
     // Chainable setters
     //
 
     public DefaultParser quoteChars(final char[] chars) {
@@ -54,20 +60,35 @@
     public DefaultParser eofOnUnclosedQuote(boolean eofOnUnclosedQuote) {
         this.eofOnUnclosedQuote = eofOnUnclosedQuote;
         return this;
     }
 
-    public DefaultParser eofOnUnclosedBracket(Bracket... brackets){
+    public DefaultParser eofOnUnclosedBracket(Bracket... brackets) {
         setEofOnUnclosedBracket(brackets);
         return this;
     }
 
     public DefaultParser eofOnEscapedNewLine(boolean eofOnEscapedNewLine) {
         this.eofOnEscapedNewLine = eofOnEscapedNewLine;
         return this;
     }
 
+    public DefaultParser regexVariable(String regexVariable) {
+        this.regexVariable = regexVariable;
+        return this;
+    }
+
+    public DefaultParser regexCommand(String regexCommand) {
+        this.regexCommand = regexCommand;
+        return this;
+    }
+
+    public DefaultParser commandGroup(int commandGroup) {
+        this.commandGroup = commandGroup;
+        return this;
+    }
+
     //
     // Java bean getters and setters
     //
 
     public void setQuoteChars(final char[] chars) {
@@ -100,11 +121,11 @@
 
     public boolean isEofOnEscapedNewLine() {
         return eofOnEscapedNewLine;
     }
 
-    public void setEofOnUnclosedBracket(Bracket... brackets){
+    public void setEofOnUnclosedBracket(Bracket... brackets) {
         if (brackets == null) {
             openingBrackets = null;
             closingBrackets = null;
         } else {
             Set<Bracket> bs = new HashSet<>(Arrays.asList(brackets));
@@ -133,20 +154,74 @@
                 i++;
             }
         }
     }
 
+    public void setRegexVariable(String regexVariable) {
+        this.regexVariable = regexVariable;
+    }
+
+    public void setRegexCommand(String regexCommand) {
+        this.regexCommand = regexCommand;
+    }
+
+    public void setCommandGroup(int commandGroup) {
+        this.commandGroup = commandGroup;
+    }
+
+    @Override
+    public boolean validCommandName(String name) {
+        return name != null && name.matches(regexCommand);
+    }
+
+    @Override
+    public boolean validVariableName(String name) {
+        return name != null && name.matches(regexVariable);
+    }
+
+
+    @Override
+    public String getCommand(final String line) {
+        String out = "";
+        Pattern  patternCommand = Pattern.compile("^\\s*" + regexVariable + "=(" + regexCommand + ")(\\s+.*|$)");
+        Matcher matcher = patternCommand.matcher(line);
+        if (matcher.find()) {
+            out = matcher.group(commandGroup);
+        } else {
+            out = line.trim().split("\\s+")[0];
+            int idx = out.indexOf("=");
+            if (idx > -1) {
+                out = out.substring(idx + 1);
+            }
+            if (!out.matches(regexCommand)) {
+                out = "";
+            }
+        }
+        return out;
+    }
+
+    @Override
+    public String getVariable(final String line) {
+        String out = null;
+        Pattern  patternCommand = Pattern.compile("^\\s*(" + regexVariable + ")\\s*=[^=~].*");
+        Matcher matcher = patternCommand.matcher(line);
+        if (matcher.find()) {
+            out = matcher.group(1);
+        }
+        return out;
+    }
+
     public ParsedLine parse(final String line, final int cursor, ParseContext context) {
         List<String> words = new LinkedList<>();
         StringBuilder current = new StringBuilder();
         int wordCursor = -1;
         int wordIndex = -1;
         int quoteStart = -1;
         int rawWordCursor = -1;
         int rawWordLength = -1;
         int rawWordStart = 0;
-        BracketChecker bracketChecker = new BracketChecker();
+        BracketChecker bracketChecker = new BracketChecker(cursor);
         boolean quotedWord = false;
 
         for (int i = 0; (line != null) && (i < line.length()); i++) {
             // once we reach the cursor, set the
             // position of the selected index
@@ -161,16 +236,19 @@
             if (quoteStart < 0 && isQuoteChar(line, i)) {
                 // Start a quote block
                 quoteStart = i;
                 if (current.length()==0) {
                     quotedWord = true;
+                    if (context == ParseContext.SPLIT_LINE) {
+                        current.append(line.charAt(i));
+                    }
                 } else {
                     current.append(line.charAt(i));
                 }
             } else if (quoteStart >= 0 && line.charAt(quoteStart) == line.charAt(i) && !isEscaped(line, i)) {
                 // End quote block
-                if (!quotedWord) {
+                if (!quotedWord || context == ParseContext.SPLIT_LINE) {
                     current.append(line.charAt(i));
                 } else if (rawWordCursor >= 0 && rawWordLength < 0) {
                     rawWordLength = i - rawWordStart + 1;
                 }
                 quoteStart = -1;
@@ -189,10 +267,12 @@
                 if (!isEscapeChar(line, i)) {
                     current.append(line.charAt(i));
                     if (quoteStart < 0) {
                         bracketChecker.check(line, i);
                     }
+                } else if (context == ParseContext.SPLIT_LINE) {
+                    current.append(line.charAt(i));
                 }
             }
         }
 
         if (current.length() > 0 || cursor == line.length()) {
@@ -215,15 +295,22 @@
             }
             if (eofOnUnclosedQuote && quoteStart >= 0) {
                 throw new EOFError(-1, -1, "Missing closing quote", line.charAt(quoteStart) == '\''
                         ? "quote" : "dquote");
             }
-            if (bracketChecker.isOpeningBracketMissing()) {
-                throw new EOFError(-1, -1, "Missing opening bracket", "missing: " + bracketChecker.getMissingOpeningBracket());
-            }
-            if (bracketChecker.isClosingBracketMissing()) {
-                throw new EOFError(-1, -1, "Missing closing brackets", "add: " + bracketChecker.getMissingClosingBrackets());
+            if (bracketChecker.isClosingBracketMissing() || bracketChecker.isOpeningBracketMissing()) {
+                String message = null;
+                String missing = null;
+                if (bracketChecker.isClosingBracketMissing()) {
+                    message = "Missing closing brackets";
+                    missing = "add: " + bracketChecker.getMissingClosingBrackets();
+                } else {
+                    message = "Missing opening bracket";
+                    missing = "missing: " + bracketChecker.getMissingOpeningBracket();
+                }
+                throw new EOFError(-1, -1, message, missing,
+                        bracketChecker.getOpenBrackets(), bracketChecker.getNextClosingBracket());
             }
         }
 
         String openingQuote = quotedWord ? line.substring(quoteStart, quoteStart + 1) : null;
         return new ArgumentList(line, words, wordIndex, wordCursor, cursor, openingQuote, rawWordCursor, rawWordLength);
@@ -345,14 +432,19 @@
     }
 
     private class BracketChecker {
         private int missingOpeningBracket = -1;
         private List<Integer> nested = new ArrayList<>();
+        private int openBrackets = 0;
+        private int cursor;
+        private String nextClosingBracket;
 
-        public BracketChecker(){}
+        public BracketChecker(int cursor) {
+            this.cursor = cursor;
+        }
 
-        public void check(final CharSequence buffer, final int pos){
+        public void check(final CharSequence buffer, final int pos) {
             if (openingBrackets == null || pos < 0) {
                 return;
             }
             int bid = bracketId(openingBrackets, buffer, pos);
             if (bid >= 0) {
@@ -365,39 +457,53 @@
                     } else {
                         missingOpeningBracket = bid;
                     }
                 }
             }
+            if (cursor > pos) {
+                openBrackets = nested.size();
+                if (nested.size() > 0) {
+                    nextClosingBracket = String.valueOf(closingBrackets[nested.get(nested.size() - 1)]);
+                }
+            }
         }
 
-        public boolean isOpeningBracketMissing(){
+        public boolean isOpeningBracketMissing() {
             return missingOpeningBracket != -1;
         }
 
-        public String getMissingOpeningBracket(){
+        public String getMissingOpeningBracket() {
             if (!isOpeningBracketMissing()) {
                 return null;
             }
             return Character.toString(openingBrackets[missingOpeningBracket]);
         }
 
-        public boolean isClosingBracketMissing(){
+        public boolean isClosingBracketMissing() {
             return !nested.isEmpty();
         }
 
-        public String getMissingClosingBrackets(){
+        public String getMissingClosingBrackets() {
             if (!isClosingBracketMissing()) {
                 return null;
             }
             StringBuilder out = new StringBuilder();
             for (int i = nested.size() - 1; i > -1; i--) {
                 out.append(closingBrackets[nested.get(i)]);
             }
             return out.toString();
         }
 
-        private int bracketId(final char[] brackets, final CharSequence buffer, final int pos){
+        public int getOpenBrackets() {
+            return openBrackets;
+        }
+
+        public String getNextClosingBracket() {
+            return nested.size() == 2 ? nextClosingBracket : null;
+        }
+
+        private int bracketId(final char[] brackets, final CharSequence buffer, final int pos) {
             for (int i=0; i < brackets.length; i++) {
                 if (buffer.charAt(pos) == brackets[i]) {
                     return i;
                 }
             }
