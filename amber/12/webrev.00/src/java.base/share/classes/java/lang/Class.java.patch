diff a/src/java.base/share/classes/java/lang/Class.java b/src/java.base/share/classes/java/lang/Class.java
--- a/src/java.base/share/classes/java/lang/Class.java
+++ b/src/java.base/share/classes/java/lang/Class.java
@@ -137,16 +137,16 @@
  *                            " is " + obj.getClass().getName());
  *     }
  * </pre></blockquote>
  *
  * <p> It is also possible to get the {@code Class} object for a named
- * type (or for void) using a class literal.  See Section 15.8.2 of
- * <cite>The Java&trade; Language Specification</cite>.
+ * type (or for void) using a class literal.  See Section {@jls
+ * 15.8.2} of <cite>The Java&trade; Language Specification</cite>.
  * For example:
  *
  * <blockquote>
- *     {@code System.out.println("The name of class Foo is: "+Foo.class.getName());}
+ *     {@code System.out.println("The name of class Foo is: " + Foo.class.getName());}
  * </blockquote>
  *
  * @param <T> the type of the class modeled by this {@code Class}
  * object.  For example, the type of {@code String.class} is {@code
  * Class<String>}.  Use {@code Class<?>} if the class being modeled is
@@ -191,11 +191,11 @@
      * primitive type, this method returns the name of the primitive type.  If
      * this {@code Class} object represents void this method returns
      * "void". If this {@code Class} object represents an array type,
      * this method returns "class " followed by {@code getName}.
      *
-     * @return a string representation of this class object.
+     * @return a string representation of this {@code Class} object.
      */
     public String toString() {
         return (isInterface() ? "interface " : (isPrimitive() ? "" : "class "))
             + getName();
     }
@@ -205,11 +205,11 @@
      * information about modifiers and type parameters.
      *
      * The string is formatted as a list of type modifiers, if any,
      * followed by the kind of type (empty string for primitive types
      * and {@code class}, {@code enum}, {@code interface},
-     * <code>&#64;</code>{@code interface}, or {@code record} as appropriate), followed
+     * {@code @interface}, or {@code record} as appropriate), followed
      * by the type's name, followed by an angle-bracketed
      * comma-separated list of the type's type parameters, if any,
      * including informative bounds on the type parameters, if any.
      *
      * A space is used to separate modifiers from one another and to
@@ -374,18 +374,21 @@
      *  {@code Class.forName("Foo", true, this.getClass().getClassLoader())}
      * </blockquote>
      *
      * Note that this method throws errors related to loading, linking
      * or initializing as specified in Sections {@jls 12.2}, {@jls
-     * 12.3}, and {@jls 12.4} of <em>The Java Language
-     * Specification</em>.
+     * 12.3}, and {@jls 12.4} of <cite>The Java&trade; Language
+     * Specification</cite>.
      * Note that this method does not check whether the requested class
      * is accessible to its caller.
      *
      * @param name       fully qualified name of the desired class
-     * @param initialize if {@code true} the class will be initialized (which implies linking).
-     *                   See Section {@jls 12.4} of <em>The Java Language Specification</em>.
+
+     * @param initialize if {@code true} the class will be initialized
+     *                   (which implies linking). See Section {@jls
+     *                   12.4} of <cite>The Java&trade; Language
+     *                   Specification</cite>.
      * @param loader     class loader from which the class must be loaded
      * @return           class object representing the desired class
      *
      * @throws    LinkageError if the linkage fails
      * @throws    ExceptionInInitializerError if the initialization provoked
@@ -658,12 +661,12 @@
      * {@code false}.
      *
      * <p> Specifically, this method tests whether the type represented by the
      * specified {@code Class} parameter can be converted to the type
      * represented by this {@code Class} object via an identity conversion
-     * or via a widening reference conversion. See <em>The Java Language
-     * Specification</em>, sections {@jls 5.1.1} and {@jls 5.1.4},
+     * or via a widening reference conversion. See <cite>The Java&trade; Language
+     * Specification</cite>, sections {@jls 5.1.1} and {@jls 5.1.4},
      * for details.
      *
      * @param     cls the {@code Class} object to be checked
      * @return    the {@code boolean} value indicating whether objects of the
      *            type {@code cls} can be assigned to objects of this class
@@ -674,24 +677,24 @@
     @HotSpotIntrinsicCandidate
     public native boolean isAssignableFrom(Class<?> cls);
 
 
     /**
-     * Determines if the specified {@code Class} object represents an
+     * Determines if this {@code Class} object represents an
      * interface type.
      *
-     * @return  {@code true} if this object represents an interface;
+     * @return  {@code true} if this {@code Class} object represents an interface;
      *          {@code false} otherwise.
      */
     @HotSpotIntrinsicCandidate
     public native boolean isInterface();
 
 
     /**
      * Determines if this {@code Class} object represents an array class.
      *
-     * @return  {@code true} if this object represents an array class;
+     * @return  {@code true} if this {@code Class} object represents an array class;
      *          {@code false} otherwise.
      * @since   1.1
      */
     @HotSpotIntrinsicCandidate
     public native boolean isArray();
@@ -731,11 +734,11 @@
     /**
      * Returns true if this {@code Class} object represents an annotation
      * type.  Note that if this method returns true, {@link #isInterface()}
      * would also return true, as all annotation types are also interfaces.
      *
-     * @return {@code true} if this class object represents an annotation
+     * @return {@code true} if this {@code Class} object represents an annotation
      *      type; {@code false} otherwise
      * @since 1.5
      */
     public boolean isAnnotation() {
         return (getModifiers() & ANNOTATION) != 0;
@@ -743,11 +746,11 @@
 
     /**
      * Returns {@code true} if this class is a synthetic class;
      * returns {@code false} otherwise.
      * @return {@code true} if and only if this class is a synthetic class as
-     *         defined by the Java Language Specification.
+     *         defined by <cite>The Java&trade; Language Specification</cite>.
      * @jls 13.1 The Form of a Binary
      * @since 1.5
      */
     public boolean isSynthetic() {
         return (getModifiers() & SYNTHETIC) != 0;
@@ -756,20 +759,20 @@
     /**
      * Returns the  name of the entity (class, interface, array class,
      * primitive type, or void) represented by this {@code Class} object,
      * as a {@code String}.
      *
-     * <p> If this class object represents a reference type that is not an
-     * array type then the binary name of the class is returned, as specified
-     * by
-     * <cite>The Java&trade; Language Specification</cite>.
+     * <p> If this {@code Class} object represents a reference type that is
+     * not an array type then the binary name of the class is
+     * returned, as specified by <cite>The Java&trade; Language
+     * Specification</cite>.
      *
-     * <p> If this class object represents a primitive type or void, then the
+     * <p> If this {@code Class} object represents a primitive type or void, then the
      * name returned is a {@code String} equal to the Java language
      * keyword corresponding to the primitive type or void.
      *
-     * <p> If this class object represents a class of arrays, then the internal
+     * <p> If this {@code Class} object represents a class of arrays, then the internal
      * form of the name consists of the name of the element type preceded by
      * one or more '{@code [}' characters representing the depth of the array
      * nesting.  The encoding of element type names is as follows:
      *
      * <blockquote><table class="striped">
@@ -805,11 +808,11 @@
      * (new int[3][4][5][6][7][8][9]).getClass().getName()
      *     returns "[[[[[[[I"
      * </pre></blockquote>
      *
      * @return  the name of the class or interface
-     *          represented by this object.
+     *          represented by this {@code Class} object.
      */
     public String getName() {
         String name = this.name;
         return name != null ? name : initClassName();
     }
@@ -823,15 +826,15 @@
      * Returns the class loader for the class.  Some implementations may use
      * null to represent the bootstrap class loader. This method will return
      * null in such implementations if this class was loaded by the bootstrap
      * class loader.
      *
-     * <p>If this object
+     * <p>If this {@code Class} object
      * represents a primitive type or void, null is returned.
      *
      * @return  the class loader that loaded the class or interface
-     *          represented by this object.
+     *          represented by this {@code Class} object.
      * @throws  SecurityException
      *          if a security manager is present, and the caller's class loader
      *          is not {@code null} and is not the same as or an ancestor of the
      *          class loader for the class whose class loader is requested,
      *          and the caller does not have the
@@ -894,12 +897,12 @@
      *
      * @return an array of {@code TypeVariable} objects that represent
      *     the type variables declared by this generic declaration
      * @throws java.lang.reflect.GenericSignatureFormatError if the generic
      *     signature of this generic declaration does not conform to
-     *     the format specified in
-     *     <cite>The Java&trade; Virtual Machine Specification</cite>
+     *     the format specified in section {@jvms 4.7.9} of
+     *     <cite>The Java&trade; Virtual Machine Specification</cite>,
      * @since 1.5
      */
     @SuppressWarnings("unchecked")
     public TypeVariable<Class<T>>[] getTypeParameters() {
         ClassRepository info = getGenericInfo();
@@ -913,47 +916,48 @@
     /**
      * Returns the {@code Class} representing the direct superclass of the
      * entity (class, interface, primitive type or void) represented by
      * this {@code Class}.  If this {@code Class} represents either the
      * {@code Object} class, an interface, a primitive type, or void, then
-     * null is returned.  If this object represents an array class then the
-     * {@code Class} object representing the {@code Object} class is
+     * null is returned.  If this {@code Class} object represents an array class
+     * then the {@code Class} object representing the {@code Object} class is
      * returned.
      *
-     * @return the direct superclass of the class represented by this object
+     * @return the direct superclass of the class represented by this {@code Class} object
      */
     @HotSpotIntrinsicCandidate
     public native Class<? super T> getSuperclass();
 
 
     /**
      * Returns the {@code Type} representing the direct superclass of
      * the entity (class, interface, primitive type or void) represented by
-     * this {@code Class}.
+     * this {@code Class} object.
      *
      * <p>If the superclass is a parameterized type, the {@code Type}
      * object returned must accurately reflect the actual type
      * arguments used in the source code. The parameterized type
      * representing the superclass is created if it had not been
      * created before. See the declaration of {@link
      * java.lang.reflect.ParameterizedType ParameterizedType} for the
      * semantics of the creation process for parameterized types.  If
-     * this {@code Class} represents either the {@code Object}
+     * this {@code Class} object represents either the {@code Object}
      * class, an interface, a primitive type, or void, then null is
-     * returned.  If this object represents an array class then the
-     * {@code Class} object representing the {@code Object} class is
+     * returned.  If this {@code Class} object represents an array class
+     * then the {@code Class} object representing the {@code Object} class is
      * returned.
      *
      * @throws java.lang.reflect.GenericSignatureFormatError if the generic
      *     class signature does not conform to the format specified in
-     *     <cite>The Java&trade; Virtual Machine Specification</cite>
+     *     section {@jvms 4.7.9} of <cite>The Java&trade; Virtual
+     *     Machine Specification</cite>
      * @throws TypeNotPresentException if the generic superclass
      *     refers to a non-existent type declaration
      * @throws java.lang.reflect.MalformedParameterizedTypeException if the
      *     generic superclass refers to a parameterized type that cannot be
      *     instantiated  for any reason
-     * @return the direct superclass of the class represented by this object
+     * @return the direct superclass of the class represented by this {@code Class} object
      * @since 1.5
      */
     public Type getGenericSuperclass() {
         ClassRepository info = getGenericInfo();
         if (info == null) {
@@ -1038,17 +1042,17 @@
     // cached package name
     private transient String packageName;
 
     /**
      * Returns the interfaces directly implemented by the class or interface
-     * represented by this object.
+     * represented by this {@code Class} object.
      *
-     * <p>If this object represents a class, the return value is an array
+     * <p>If this {@code Class} object represents a class, the return value is an array
      * containing objects representing all interfaces directly implemented by
      * the class.  The order of the interface objects in the array corresponds
      * to the order of the interface names in the {@code implements} clause of
-     * the declaration of the class represented by this object.  For example,
+     * the declaration of the class represented by this {@code Class} object.  For example,
      * given the declaration:
      * <blockquote>
      * {@code class Shimmer implements FloorWax, DessertTopping { ... }}
      * </blockquote>
      * suppose the value of {@code s} is an instance of
@@ -1062,20 +1066,20 @@
      * {@code s.getClass().getInterfaces()[1]}
      * </blockquote>
      * is the {@code Class} object that represents interface
      * {@code DessertTopping}.
      *
-     * <p>If this object represents an interface, the array contains objects
+     * <p>If this {@code Class} object represents an interface, the array contains objects
      * representing all interfaces directly extended by the interface.  The
      * order of the interface objects in the array corresponds to the order of
      * the interface names in the {@code extends} clause of the declaration of
-     * the interface represented by this object.
+     * the interface represented by this {@code Class} object.
      *
-     * <p>If this object represents a class or interface that implements no
+     * <p>If this {@code Class} object represents a class or interface that implements no
      * interfaces, the method returns an array of length 0.
      *
-     * <p>If this object represents a primitive type or void, the method
+     * <p>If this {@code Class} object represents a primitive type or void, the method
      * returns an array of length 0.
      *
      * <p>If this {@code Class} object represents an array type, the
      * interfaces {@code Cloneable} and {@code java.io.Serializable} are
      * returned in that order.
@@ -1106,47 +1110,47 @@
     private native Class<?>[] getInterfaces0();
 
     /**
      * Returns the {@code Type}s representing the interfaces
      * directly implemented by the class or interface represented by
-     * this object.
+     * this {@code Class} object.
      *
      * <p>If a superinterface is a parameterized type, the
      * {@code Type} object returned for it must accurately reflect
      * the actual type arguments used in the source code. The
      * parameterized type representing each superinterface is created
      * if it had not been created before. See the declaration of
      * {@link java.lang.reflect.ParameterizedType ParameterizedType}
      * for the semantics of the creation process for parameterized
      * types.
      *
-     * <p>If this object represents a class, the return value is an array
+     * <p>If this {@code Class} object represents a class, the return value is an array
      * containing objects representing all interfaces directly implemented by
      * the class.  The order of the interface objects in the array corresponds
      * to the order of the interface names in the {@code implements} clause of
-     * the declaration of the class represented by this object.
+     * the declaration of the class represented by this {@code Class} object.
      *
-     * <p>If this object represents an interface, the array contains objects
+     * <p>If this {@code Class} object represents an interface, the array contains objects
      * representing all interfaces directly extended by the interface.  The
      * order of the interface objects in the array corresponds to the order of
      * the interface names in the {@code extends} clause of the declaration of
-     * the interface represented by this object.
+     * the interface represented by this {@code Class} object.
      *
-     * <p>If this object represents a class or interface that implements no
+     * <p>If this {@code Class} object represents a class or interface that implements no
      * interfaces, the method returns an array of length 0.
      *
-     * <p>If this object represents a primitive type or void, the method
+     * <p>If this {@code Class} object represents a primitive type or void, the method
      * returns an array of length 0.
      *
      * <p>If this {@code Class} object represents an array type, the
      * interfaces {@code Cloneable} and {@code java.io.Serializable} are
      * returned in that order.
      *
      * @throws java.lang.reflect.GenericSignatureFormatError
-     *     if the generic class signature does not conform to the format
-     *     specified in
-     *     <cite>The Java&trade; Virtual Machine Specification</cite>
+     *     if the generic class signature does not conform to the
+     *     format specified in section {@jvms 4.7.9} of <cite>The
+     *     Java&trade; Virtual Machine Specification</cite>
      * @throws TypeNotPresentException if any of the generic
      *     superinterfaces refers to a non-existent type declaration
      * @throws java.lang.reflect.MalformedParameterizedTypeException
      *     if any of the generic superinterfaces refer to a parameterized
      *     type that cannot be instantiated for any reason
@@ -1190,21 +1194,21 @@
      * using the methods of class {@code Modifier}.
      *
      * <p> If the underlying class is an array class, then its
      * {@code public}, {@code private} and {@code protected}
      * modifiers are the same as those of its component type.  If this
-     * {@code Class} represents a primitive type or void, its
+     * {@code Class} object represents a primitive type or void, its
      * {@code public} modifier is always {@code true}, and its
      * {@code protected} and {@code private} modifiers are always
-     * {@code false}. If this object represents an array class, a
+     * {@code false}. If this {@code Class} object represents an array class, a
      * primitive type or void, then its {@code final} modifier is always
      * {@code true} and its interface modifier is always
      * {@code false}. The values of its other modifiers are not determined
      * by this specification.
      *
-     * <p> The modifier encodings are defined in <em>The Java Virtual Machine
-     * Specification</em>, table 4.1.
+     * <p> The modifier encodings are defined in section {@jvms 4.1}
+     * of <cite>The Java&trade; Virtual Machine Specification</cite>.
      *
      * @return the {@code int} representing the modifiers for this class
      * @see     java.lang.reflect.Modifier
      * @since 1.1
      */
@@ -1214,11 +1218,11 @@
 
     /**
      * Gets the signers of this class.
      *
      * @return  the signers of this class, or null if there are no signers.  In
-     *          particular, this method returns null if this object represents
+     *          particular, this method returns null if this {@code Class} object represents
      *          a primitive type or void.
      * @since   1.1
      */
     public native Object[] getSigners();
 
@@ -1608,15 +1612,15 @@
         }
         return getName();
     }
 
     /**
-     * Returns the canonical name of the underlying class as
-     * defined by the Java Language Specification.  Returns null if
-     * the underlying class does not have a canonical name (i.e., if
-     * it is a local or anonymous class or an array whose component
-     * type does not have a canonical name).
+     * Returns the canonical name of the underlying class as defined
+     * by <cite>The Java&trade; Language Specification</cite>, section
+     * {@jls 6.7}.  Returns null if the underlying class does not have
+     * a canonical name (i.e., if it is a local or anonymous class or
+     * an array whose component type does not have a canonical name).
      * @return the canonical name of the underlying class if it exists, and
      * {@code null} otherwise.
      * @since 1.5
      */
     public String getCanonicalName() {
@@ -1926,11 +1930,12 @@
      * all the public constructors of the class represented by this
      * {@code Class} object.  An array of length 0 is returned if the
      * class has no public constructors, or if the class is an array class, or
      * if the class reflects a primitive type or void.
      *
-     * Note that while this method returns an array of {@code
+     * @apiNote
+     * While this method returns an array of {@code
      * Constructor<T>} objects (that is an array of constructors from
      * this class), the return type of this method is {@code
      * Constructor<?>[]} and <em>not</em> {@code Constructor<T>[]} as
      * might be expected.  This less informative return type is
      * necessary since after being returned from this method, the
@@ -1965,11 +1970,11 @@
      * field of the class or interface represented by this {@code Class}
      * object. The {@code name} parameter is a {@code String} specifying the
      * simple name of the desired field.
      *
      * <p> The field to be reflected is determined by the algorithm that
-     * follows.  Let C be the class or interface represented by this object:
+     * follows.  Let C be the class or interface represented by this {@code Class} object:
      *
      * <OL>
      * <LI> If C declares a public field with the name specified, that is the
      *      field to be reflected.</LI>
      * <LI> If no field was found in step 1 above, this algorithm is applied
@@ -2399,11 +2404,12 @@
      * class has a default constructor, it is included in the returned array.
      * This method returns an array of length 0 if this {@code Class}
      * object represents an interface, a primitive type, an array class, or
      * void.
      *
-     * <p> See <em>The Java Language Specification</em>, section {@jls 8.2}.
+     * <p> See <cite>The Java&trade; Language Specification</cite>,
+     * section {@jls 8.2}.
      *
      * @return  the array of {@code Constructor} objects representing all the
      *          declared constructors of this class
      * @throws  SecurityException
      *          If a security manager, <i>s</i>, is present and any of the
@@ -2649,13 +2655,13 @@
      * caller's module.
      *
      * <p> Otherwise, if this class is not in a named module then the rules for
      * searching resources associated with a given class are implemented by the
      * defining {@linkplain ClassLoader class loader} of the class.  This method
-     * delegates to this object's class loader.  If this object was loaded by
-     * the bootstrap class loader, the method delegates to {@link
-     * ClassLoader#getSystemResourceAsStream}.
+     * delegates to this {@code Class} object's class loader.
+     * If this {@code Class} object was loaded by the bootstrap class loader,
+     * the method delegates to {@link ClassLoader#getSystemResourceAsStream}.
      *
      * <p> Before delegation, an absolute resource name is constructed from the
      * given resource name using this algorithm:
      *
      * <ul>
@@ -2747,13 +2753,13 @@
      * caller's module.
      *
      * <p> Otherwise, if this class is not in a named module then the rules for
      * searching resources associated with a given class are implemented by the
      * defining {@linkplain ClassLoader class loader} of the class.  This method
-     * delegates to this object's class loader. If this object was loaded by
-     * the bootstrap class loader, the method delegates to {@link
-     * ClassLoader#getSystemResource}.
+     * delegates to this {@code Class} object's class loader.
+     * If this {@code Class} object was loaded by the bootstrap class loader,
+     * the method delegates to {@link ClassLoader#getSystemResource}.
      *
      * <p> Before delegation, an absolute resource name is constructed from the
      * given resource name using this algorithm:
      *
      * <ul>
@@ -3536,13 +3542,14 @@
      * status pertains to this class, the most recent setting for the most
      * specific pertinent package default assertion status is returned;
      * otherwise, if this class is not a system class (i.e., it has a
      * class loader) its class loader's default assertion status is returned;
      * otherwise, the system class default assertion status is returned.
-     * <p>
+     *
+     * @apiNote
      * Few programmers will have any need for this method; it is provided
-     * for the benefit of the JRE itself.  (It allows a class to determine at
+     * for the benefit of the JDK itself.  (It allows a class to determine at
      * the time that it is initialized whether assertions should be enabled.)
      * Note that this method is not guaranteed to return the actual
      * assertion status that was (or will be) associated with the specified
      * class when it was (or will be) initialized.
      *
@@ -3649,12 +3656,12 @@
     /**
      * Returns the elements of this enum class or null if this
      * Class object does not represent an enum type.
      *
      * @return an array containing the values comprising the enum class
-     *     represented by this Class object in the order they're
-     *     declared, or null if this Class object does not
+     *     represented by this {@code Class} object in the order they're
+     *     declared, or null if this {@code Class} object does not
      *     represent an enum type
      * @since 1.5
      */
     public T[] getEnumConstants() {
         T[] values = getEnumConstantsShared();
@@ -3743,21 +3750,21 @@
 
     /**
      * Casts this {@code Class} object to represent a subclass of the class
      * represented by the specified class object.  Checks that the cast
      * is valid, and throws a {@code ClassCastException} if it is not.  If
-     * this method succeeds, it always returns a reference to this class object.
+     * this method succeeds, it always returns a reference to this {@code Class} object.
      *
      * <p>This method is useful when a client needs to "narrow" the type of
      * a {@code Class} object to pass it to an API that restricts the
      * {@code Class} objects that it is willing to accept.  A cast would
      * generate a compile-time warning, as the correctness of the cast
      * could not be checked at runtime (because generic types are implemented
      * by erasure).
      *
-     * @param <U> the type to cast this class object to
-     * @param clazz the class of the type to cast this class object to
+     * @param <U> the type to cast this {@code Class} object to
+     * @param clazz the class of the type to cast this {@code Class} object to
      * @return this {@code Class} object, cast to represent a subclass of
      *    the specified class object.
      * @throws ClassCastException if this {@code Class} object does not
      *    represent a subclass of the specified class (here "subclass" includes
      *    the class itself).
@@ -3770,13 +3777,18 @@
         else
             throw new ClassCastException(this.toString());
     }
 
     /**
+     * {@inheritDoc}
+     * <p>Note that any annotation returned by this method is a
+     * declaration annotation.
+     *
      * @throws NullPointerException {@inheritDoc}
      * @since 1.5
      */
+    @Override
     @SuppressWarnings("unchecked")
     public <A extends Annotation> A getAnnotation(Class<A> annotationClass) {
         Objects.requireNonNull(annotationClass);
 
         return (A) annotationData().annotations.get(annotationClass);
@@ -3791,10 +3803,14 @@
     public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass) {
         return GenericDeclaration.super.isAnnotationPresent(annotationClass);
     }
 
     /**
+     * {@inheritDoc}
+     * <p>Note that any annotations returned by this method are
+     * declaration annotations.
+     *
      * @throws NullPointerException {@inheritDoc}
      * @since 1.8
      */
     @Override
     public <A extends Annotation> A[] getAnnotationsByType(Class<A> annotationClass) {
@@ -3805,17 +3821,26 @@
                                                           this,
                                                           annotationClass);
     }
 
     /**
+     * {@inheritDoc}
+     * <p>Note that any annotations returned by this method are
+     * declaration annotations.
+     *
      * @since 1.5
      */
+    @Override
     public Annotation[] getAnnotations() {
         return AnnotationParser.toArray(annotationData().annotations);
     }
 
     /**
+     * {@inheritDoc}
+     * <p>Note that any annotation returned by this method is a
+     * declaration annotation.
+     *
      * @throws NullPointerException {@inheritDoc}
      * @since 1.8
      */
     @Override
     @SuppressWarnings("unchecked")
@@ -3824,10 +3849,14 @@
 
         return (A) annotationData().declaredAnnotations.get(annotationClass);
     }
 
     /**
+     * {@inheritDoc}
+     * <p>Note that any annotations returned by this method are
+     * declaration annotations.
+     *
      * @throws NullPointerException {@inheritDoc}
      * @since 1.8
      */
     @Override
     public <A extends Annotation> A[] getDeclaredAnnotationsByType(Class<A> annotationClass) {
@@ -3836,12 +3865,17 @@
         return AnnotationSupport.getDirectlyAndIndirectlyPresent(annotationData().declaredAnnotations,
                                                                  annotationClass);
     }
 
     /**
+     * {@inheritDoc}
+     * <p>Note that any annotations returned by this method are
+     * declaration annotations.
+     *
      * @since 1.5
      */
+    @Override
     public Annotation[] getDeclaredAnnotations()  {
         return AnnotationParser.toArray(annotationData().declaredAnnotations);
     }
 
     // annotation data that might get invalidated when JVM TI RedefineClasses() is called
@@ -4023,14 +4057,14 @@
      * a member of the nest by the nest host, then it is considered to belong
      * to its own nest and {@code this} is returned as the host.
      *
      * @apiNote A {@code class} file of version 55.0 or greater may record the
      * host of the nest to which it belongs by using the {@code NestHost}
-     * attribute (JVMS 4.7.28). Alternatively, a {@code class} file of
+     * attribute (JVMS {@jvms 4.7.28}). Alternatively, a {@code class} file of
      * version 55.0 or greater may act as a nest host by enumerating the nest's
      * other members with the
-     * {@code NestMembers} attribute (JVMS 4.7.29).
+     * {@code NestMembers} attribute (JVMS {@jvms 4.7.29}).
      * A {@code class} file of version 54.0 or lower does not use these
      * attributes.
      *
      * @return the nest host of this class or interface
      *
