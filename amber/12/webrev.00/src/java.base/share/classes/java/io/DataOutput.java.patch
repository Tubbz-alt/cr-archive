diff a/src/java.base/share/classes/java/io/DataOutput.java b/src/java.base/share/classes/java/io/DataOutput.java
--- a/src/java.base/share/classes/java/io/DataOutput.java
+++ b/src/java.base/share/classes/java/io/DataOutput.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1995, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1995, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -111,12 +111,12 @@
      * @throws     IOException  if an I/O error occurs.
      */
     void writeBoolean(boolean v) throws IOException;
 
     /**
-     * Writes to the output stream the eight low-
-     * order bits of the argument {@code v}.
+     * Writes to the output stream the eight low-order
+     * bits of the argument {@code v}.
      * The 24 high-order bits of {@code v}
      * are ignored. (This means  that {@code writeByte}
      * does exactly the same thing as {@code write}
      * for an integer argument.) The byte written
      * by this method may be read by the {@code readByte}
@@ -138,11 +138,11 @@
      * (byte)(0xff & (v >> 8))
      * (byte)(0xff & v)
      * }</pre> <p>
      * The bytes written by this method may be
      * read by the {@code readShort} method
-     * of interface {@code DataInput} , which
+     * of interface {@code DataInput}, which
      * will then return a {@code short} equal
      * to {@code (short)v}.
      *
      * @param      v   the {@code short} value to be written.
      * @throws     IOException  if an I/O error occurs.
@@ -159,11 +159,11 @@
      * (byte)(0xff & (v >> 8))
      * (byte)(0xff & v)
      * }</pre><p>
      * The bytes written by this method may be
      * read by the {@code readChar} method
-     * of interface {@code DataInput} , which
+     * of interface {@code DataInput}, which
      * will then return a {@code char} equal
      * to {@code (char)v}.
      *
      * @param      v   the {@code char} value to be written.
      * @throws     IOException  if an I/O error occurs.
@@ -181,11 +181,11 @@
      * (byte)(0xff & (v >>  8))
      * (byte)(0xff & v)
      * }</pre><p>
      * The bytes written by this method may be read
      * by the {@code readInt} method of interface
-     * {@code DataInput} , which will then
+     * {@code DataInput}, which will then
      * return an {@code int} equal to {@code v}.
      *
      * @param      v   the {@code int} value to be written.
      * @throws     IOException  if an I/O error occurs.
      */
@@ -206,11 +206,11 @@
      * (byte)(0xff & (v >>  8))
      * (byte)(0xff & v)
      * }</pre><p>
      * The bytes written by this method may be
      * read by the {@code readLong} method
-     * of interface {@code DataInput} , which
+     * of interface {@code DataInput}, which
      * will then return a {@code long} equal
      * to {@code v}.
      *
      * @param      v   the {@code long} value to be written.
      * @throws     IOException  if an I/O error occurs.
@@ -341,11 +341,11 @@
      * after this, the one-, two-, or three-byte
      * representation of each character in the
      * string {@code s} is written.<p>  The
      * bytes written by this method may be read
      * by the {@code readUTF} method of interface
-     * {@code DataInput} , which will then
+     * {@code DataInput}, which will then
      * return a {@code String} equal to {@code s}.
      *
      * @param      s   the string value to be written.
      * @throws     IOException  if an I/O error occurs.
      */
