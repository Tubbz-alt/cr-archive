diff a/src/java.base/share/classes/java/text/NumberFormat.java b/src/java.base/share/classes/java/text/NumberFormat.java
--- a/src/java.base/share/classes/java/text/NumberFormat.java
+++ b/src/java.base/share/classes/java/text/NumberFormat.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -311,11 +311,11 @@
     @Override
     public final Object parseObject(String source, ParsePosition pos) {
         return parse(source, pos);
     }
 
-   /**
+    /**
      * Specialization of format.
      *
      * @param number the double number to format
      * @return the formatted String
      * @throws           ArithmeticException if rounding is needed with rounding
@@ -336,11 +336,11 @@
      * fastFormat() is supposed to be implemented in concrete subclasses only.
      * Default implem always returns null.
      */
     String fastFormat(double number) { return null; }
 
-   /**
+    /**
      * Specialization of format.
      *
      * @param number the long number to format
      * @return the formatted String
      * @throws           ArithmeticException if rounding is needed with rounding
@@ -350,11 +350,11 @@
     public final String format(long number) {
         return format(number, new StringBuffer(),
                       DontCareFieldPosition.INSTANCE).toString();
     }
 
-   /**
+    /**
      * Specialization of format.
      *
      * @param number     the double number to format
      * @param toAppendTo the StringBuffer to which the formatted text is to be
      *                   appended
@@ -373,11 +373,11 @@
      */
     public abstract StringBuffer format(double number,
                                         StringBuffer toAppendTo,
                                         FieldPosition pos);
 
-   /**
+    /**
      * Specialization of format.
      *
      * @param number     the long number to format
      * @param toAppendTo the StringBuffer to which the formatted text is to be
      *                   appended
@@ -396,11 +396,11 @@
      */
     public abstract StringBuffer format(long number,
                                         StringBuffer toAppendTo,
                                         FieldPosition pos);
 
-   /**
+    /**
      * Returns a Long if possible (e.g., within the range [Long.MIN_VALUE,
      * Long.MAX_VALUE] and with no decimals), otherwise a Double.
      * If IntegerOnly is set, will stop at a decimal
      * point (or equivalent; e.g., for rational numbers "1 2/3", will stop
      * after the 1).
@@ -863,11 +863,11 @@
 
     /**
      * Sets the minimum number of digits allowed in the fraction portion of a
      * number. minimumFractionDigits must be &le; maximumFractionDigits.  If the
      * new value for minimumFractionDigits exceeds the current value
-     * of maximumFractionDigits, then maximumIntegerDigits will also be set to
+     * of maximumFractionDigits, then maximumFractionDigits will also be set to
      * the new value
      *
      * @param newValue the minimum number of fraction digits to be shown; if
      * less than zero, then zero is used. The concrete subclass may enforce an
      * upper limit to this value appropriate to the numeric type being formatted.
