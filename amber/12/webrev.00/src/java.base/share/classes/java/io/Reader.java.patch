diff a/src/java.base/share/classes/java/io/Reader.java b/src/java.base/share/classes/java/io/Reader.java
--- a/src/java.base/share/classes/java/io/Reader.java
+++ b/src/java.base/share/classes/java/io/Reader.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -60,11 +60,11 @@
      * stream is initially open.  The stream is closed by calling the
      * {@code close()} method.  Subsequent calls to {@code close()} have no
      * effect.
      *
      * <p> While the stream is open, the {@code read()}, {@code read(char[])},
-     * {@code read(char[], int, int)}, {@code read(Charbuffer)}, {@code
+     * {@code read(char[], int, int)}, {@code read(CharBuffer)}, {@code
      * ready()}, {@code skip(long)}, and {@code transferTo()} methods all
      * behave as if end of stream has been reached. After the stream has been
      * closed, these methods all throw {@code IOException}.
      *
      * <p> The {@code markSupported()} method returns {@code false}.  The
@@ -181,11 +181,11 @@
      * @throws IOException if an I/O error occurs
      * @throws NullPointerException if target is null
      * @throws java.nio.ReadOnlyBufferException if target is a read only buffer
      * @since 1.5
      */
-    public int read(java.nio.CharBuffer target) throws IOException {
+    public int read(CharBuffer target) throws IOException {
         int len = target.remaining();
         char[] cbuf = new char[len];
         int n = read(cbuf, 0, len);
         if (n > 0)
             target.put(cbuf, 0, n);
