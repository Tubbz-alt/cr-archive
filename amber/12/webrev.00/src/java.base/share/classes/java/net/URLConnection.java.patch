diff a/src/java.base/share/classes/java/net/URLConnection.java b/src/java.base/share/classes/java/net/URLConnection.java
--- a/src/java.base/share/classes/java/net/URLConnection.java
+++ b/src/java.base/share/classes/java/net/URLConnection.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1995, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1995, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -155,11 +155,11 @@
  * @see     java.net.URLConnection#setUseCaches(boolean)
  * @since   1.0
  */
 public abstract class URLConnection {
 
-   /**
+    /**
      * The URL represents the remote object on the World Wide Web to
      * which this connection is opened.
      * <p>
      * The value of this field can be accessed by the
      * {@code getURL} method.
@@ -170,11 +170,11 @@
      * @see     java.net.URLConnection#getURL()
      * @see     java.net.URLConnection#url
      */
     protected URL url;
 
-   /**
+    /**
      * This variable is set by the {@code setDoInput} method. Its
      * value is returned by the {@code getDoInput} method.
      * <p>
      * A URL connection can be used for input and/or output. Setting the
      * {@code doInput} flag to {@code true} indicates that
@@ -185,11 +185,11 @@
      * @see     java.net.URLConnection#getDoInput()
      * @see     java.net.URLConnection#setDoInput(boolean)
      */
     protected boolean doInput = true;
 
-   /**
+    /**
      * This variable is set by the {@code setDoOutput} method. Its
      * value is returned by the {@code getDoOutput} method.
      * <p>
      * A URL connection can be used for input and/or output. Setting the
      * {@code doOutput} flag to {@code true} indicates
@@ -202,11 +202,11 @@
      */
     protected boolean doOutput = false;
 
     private static boolean defaultAllowUserInteraction = false;
 
-   /**
+    /**
      * If {@code true}, this {@code URL} is being examined in
      * a context in which it makes sense to allow user interactions such
      * as popping up an authentication dialog. If {@code false},
      * then no user interaction is allowed.
      * <p>
@@ -223,11 +223,11 @@
      */
     protected boolean allowUserInteraction = defaultAllowUserInteraction;
 
     private static volatile boolean defaultUseCaches = true;
 
-   /**
+    /**
      * If {@code true}, the protocol is allowed to use caching
      * whenever it can. If {@code false}, the protocol must always
      * try to get a fresh copy of the object.
      * <p>
      * This field is set by the {@code setUseCaches} method. Its
@@ -246,11 +246,11 @@
     protected boolean useCaches;
 
     private static final ConcurrentHashMap<String,Boolean> defaultCaching =
         new ConcurrentHashMap<>();
 
-   /**
+    /**
      * Some protocols support skipping the fetching of the object unless
      * the object has been modified more recently than a certain time.
      * <p>
      * A nonzero value gives a time as the number of milliseconds since
      * January 1, 1970, GMT. The object is fetched only if it has been
@@ -266,11 +266,11 @@
      * @see     java.net.URLConnection#getIfModifiedSince()
      * @see     java.net.URLConnection#setIfModifiedSince(long)
      */
     protected long ifModifiedSince = 0;
 
-   /**
+    /**
      * If {@code false}, this connection object has not created a
      * communications link to the specified URL. If {@code true},
      * the communications link has been established.
      */
     protected boolean connected = false;
@@ -284,13 +284,13 @@
     /**
      * @since 1.6
      */
     private MessageHeader requests;
 
-   /**
-    * @since   1.1
-    */
+    /**
+     * @since 1.1
+     */
     private static volatile FileNameMap fileNameMap;
 
     /**
      * Loads filename map (a mimetable) from a data file. It will
      * first try to load the user-specific table, defined
@@ -370,11 +370,11 @@
      * when opening a communications link to the resource referenced
      * by this URLConnection.  If the timeout expires before the
      * connection can be established, a
      * java.net.SocketTimeoutException is raised. A timeout of zero is
      * interpreted as an infinite timeout.
-
+     *
      * <p> Some non-standard implementation of this method may ignore
      * the specified timeout. To see the connect timeout set, please
      * call getConnectTimeout().
      *
      * @param timeout an {@code int} that specifies the connect
@@ -414,11 +414,11 @@
      * reading from Input stream when a connection is established to a
      * resource. If the timeout expires before there is data available
      * for read, a java.net.SocketTimeoutException is raised. A
      * timeout of zero is interpreted as an infinite timeout.
      *
-     *<p> Some non-standard implementation of this method ignores the
+     * <p> Some non-standard implementation of this method ignores the
      * specified timeout. To see the read timeout set, please call
      * getReadTimeout().
      *
      * @param timeout an {@code int} that specifies the timeout
      * value to be used in milliseconds
@@ -1030,11 +1030,11 @@
      */
     public long getIfModifiedSince() {
         return ifModifiedSince;
     }
 
-   /**
+    /**
      * Returns the default value of a {@code URLConnection}'s
      * {@code useCaches} flag.
      * <p>
      * This default is "sticky", being a part of the static state of all
      * URLConnections.  This flag applies to the next, and all following
@@ -1047,11 +1047,11 @@
      */
     public boolean getDefaultUseCaches() {
         return defaultUseCaches;
     }
 
-   /**
+    /**
      * Sets the default value of the {@code useCaches} field to the
      * specified value. This default value can be over-ridden
      * per protocol using {@link #setDefaultUseCaches(String,boolean)}
      *
      * @param   defaultusecaches   the new value.
@@ -1059,11 +1059,11 @@
      */
     public void setDefaultUseCaches(boolean defaultusecaches) {
         defaultUseCaches = defaultusecaches;
     }
 
-   /**
+    /**
      * Sets the default value of the {@code useCaches} field for the named
      * protocol to the given value. This value overrides any default setting
      * set by {@link #setDefaultUseCaches(boolean)} for the given protocol.
      * Successive calls to this method change the setting and affect the
      * default value for all future connections of that protocol. The protocol
@@ -1076,11 +1076,11 @@
     public static void setDefaultUseCaches(String protocol, boolean defaultVal) {
         protocol = protocol.toLowerCase(Locale.US);
         defaultCaching.put(protocol, defaultVal);
     }
 
-   /**
+    /**
      * Returns the default value of the {@code useCaches} flag for the given protocol. If
      * {@link #setDefaultUseCaches(String,boolean)} was called for the given protocol,
      * then that value is returned. Otherwise, if {@link #setDefaultUseCaches(boolean)}
      * was called, then that value is returned. If neither method was called,
      * the return value is {@code true}. The protocol name is case insensitive.
