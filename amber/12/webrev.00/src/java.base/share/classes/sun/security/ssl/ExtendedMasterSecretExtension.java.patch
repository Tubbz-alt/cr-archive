diff a/src/java.base/share/classes/sun/security/ssl/ExtendedMasterSecretExtension.java b/src/java.base/share/classes/sun/security/ssl/ExtendedMasterSecretExtension.java
--- a/src/java.base/share/classes/sun/security/ssl/ExtendedMasterSecretExtension.java
+++ b/src/java.base/share/classes/sun/security/ssl/ExtendedMasterSecretExtension.java
@@ -1,8 +1,8 @@
 /*
  * Copyright (c) 2017, Red Hat, Inc. and/or its affiliates.
- * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -66,16 +66,18 @@
 
         private ExtendedMasterSecretSpec() {
             // blank
         }
 
-        private ExtendedMasterSecretSpec(ByteBuffer m) throws IOException {
+        private ExtendedMasterSecretSpec(HandshakeContext hc,
+                ByteBuffer m) throws IOException {
             // Parse the extension.
             if (m.hasRemaining()) {
-                throw new SSLProtocolException(
+                throw hc.conContext.fatal(Alert.DECODE_ERROR,
+                        new SSLProtocolException(
                     "Invalid extended_master_secret extension data: " +
-                    "not empty");
+                    "not empty"));
             }
         }
 
         @Override
         public String toString() {
@@ -84,13 +86,13 @@
     }
 
     private static final
             class ExtendedMasterSecretStringizer implements SSLStringizer {
         @Override
-        public String toString(ByteBuffer buffer) {
+        public String toString(HandshakeContext hc, ByteBuffer buffer) {
             try {
-                return (new ExtendedMasterSecretSpec(buffer)).toString();
+                return (new ExtendedMasterSecretSpec(hc, buffer)).toString();
             } catch (IOException ioe) {
                 // For debug logging only, so please swallow exceptions.
                 return ioe.getMessage();
             }
         }
@@ -166,17 +168,12 @@
                 }
                 return;     // ignore the extension
             }
 
             // Parse the extension.
-            ExtendedMasterSecretSpec spec;
-            try {
-                spec = new ExtendedMasterSecretSpec(buffer);
-            } catch (IOException ioe) {
-                throw shc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
-
+            ExtendedMasterSecretSpec spec =
+                    new ExtendedMasterSecretSpec(shc, buffer);
             if (shc.isResumption && shc.resumingSession != null &&
                     !shc.resumingSession.useExtendedMasterSecret) {
                 // For abbreviated handshake request, If the original
                 // session did not use the "extended_master_secret"
                 // extension but the new ClientHello contains the
@@ -321,17 +318,12 @@
                         "Server sent the extended_master_secret " +
                         "extension improperly");
             }
 
             // Parse the extension.
-            ExtendedMasterSecretSpec spec;
-            try {
-                spec = new ExtendedMasterSecretSpec(buffer);
-            } catch (IOException ioe) {
-                throw chc.conContext.fatal(Alert.UNEXPECTED_MESSAGE, ioe);
-            }
-
+            ExtendedMasterSecretSpec spec =
+                    new ExtendedMasterSecretSpec(chc, buffer);
             if (chc.isResumption && chc.resumingSession != null &&
                     !chc.resumingSession.useExtendedMasterSecret) {
                 throw chc.conContext.fatal(Alert.UNSUPPORTED_EXTENSION,
                         "Server sent an unexpected extended_master_secret " +
                         "extension on session resumption");
