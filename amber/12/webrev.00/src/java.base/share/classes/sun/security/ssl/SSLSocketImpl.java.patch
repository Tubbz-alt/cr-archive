diff a/src/java.base/share/classes/sun/security/ssl/SSLSocketImpl.java b/src/java.base/share/classes/sun/security/ssl/SSLSocketImpl.java
--- a/src/java.base/share/classes/sun/security/ssl/SSLSocketImpl.java
+++ b/src/java.base/share/classes/sun/security/ssl/SSLSocketImpl.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1996, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1996, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -434,10 +434,12 @@
                 //
                 // Handle handshake messages only, need no application data.
                 if (!conContext.isNegotiated) {
                     readHandshakeRecord();
                 }
+            } catch (InterruptedIOException iioe) {
+                handleException(iioe);
             } catch (IOException ioe) {
                 throw conContext.fatal(Alert.HANDSHAKE_FAILURE,
                     "Couldn't kickstart handshaking", ioe);
             } catch (Exception oe) {    // including RuntimeException
                 handleException(oe);
@@ -1107,13 +1109,21 @@
          *
          * If the socket is not connected, has been shutdown because of an error
          * or has been closed, throw an Exception.
          */
         private boolean checkEOF() throws IOException {
-            if (conContext.isInboundClosed()) {
+            if (conContext.isBroken) {
+                if (conContext.closeReason == null) {
+                    return true;
+                } else {
+                    throw new SSLException(
+                            "Connection has closed: " + conContext.closeReason,
+                            conContext.closeReason);
+                }
+            } else if (conContext.isInboundClosed()) {
                 return true;
-            } else if (conContext.isInputCloseNotified || conContext.isBroken) {
+            } else if (conContext.isInputCloseNotified) {
                 if (conContext.closeReason == null) {
                     return true;
                 } else {
                     throw new SSLException(
                         "Connection has closed: " + conContext.closeReason,
@@ -1372,16 +1382,15 @@
                         conContext.isNegotiated) {
                     return 0;
                 }
             } catch (SSLException ssle) {
                 throw ssle;
+            } catch (InterruptedIOException iioe) {
+                // don't change exception in case of timeouts or interrupts
+                throw iioe;
             } catch (IOException ioe) {
-                if (!(ioe instanceof SSLException)) {
-                    throw new SSLException("readHandshakeRecord", ioe);
-                } else {
-                    throw ioe;
-                }
+                throw new SSLException("readHandshakeRecord", ioe);
             }
         }
 
         return -1;
     }
@@ -1438,10 +1447,13 @@
                         buffer.position() > 0) {
                     return buffer;
                 }
             } catch (SSLException ssle) {
                 throw ssle;
+            } catch (InterruptedIOException iioe) {
+                // don't change exception in case of timeouts or interrupts
+                throw iioe;
             } catch (IOException ioe) {
                 if (!(ioe instanceof SSLException)) {
                     throw new SSLException("readApplicationRecord", ioe);
                 } else {
                     throw ioe;
