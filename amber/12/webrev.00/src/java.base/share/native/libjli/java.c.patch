diff a/src/java.base/share/native/libjli/java.c b/src/java.base/share/native/libjli/java.c
--- a/src/java.base/share/native/libjli/java.c
+++ b/src/java.base/share/native/libjli/java.c
@@ -239,11 +239,11 @@
     int mode = LM_UNKNOWN;
     char *what = NULL;
     char *main_class = NULL;
     int ret;
     InvocationFunctions ifn;
-    jlong start, end;
+    jlong start = 0, end = 0;
     char jvmpath[MAXPATHLEN];
     char jrepath[MAXPATHLEN];
     char jvmcfg[MAXPATHLEN];
 
     _fVersion = fullversion;
@@ -406,11 +406,11 @@
     jclass mainClass = NULL;
     jclass appClass = NULL; // actual application class being launched
     jmethodID mainID;
     jobjectArray mainArgs;
     int ret = 0;
-    jlong start, end;
+    jlong start = 0, end = 0;
 
     RegisterThread();
 
     /* Initialize the virtual machine */
     start = CounterGet();
@@ -1616,11 +1616,11 @@
 LoadMainClass(JNIEnv *env, int mode, char *name)
 {
     jmethodID mid;
     jstring str;
     jobject result;
-    jlong start, end;
+    jlong start = 0, end = 0;
     jclass cls = GetLauncherHelperClass(env);
     NULL_CHECK0(cls);
     if (JLI_IsTraceLauncher()) {
         start = CounterGet();
     }
@@ -1631,11 +1631,11 @@
     NULL_CHECK0(str = NewPlatformString(env, name));
     NULL_CHECK0(result = (*env)->CallStaticObjectMethod(env, cls, mid,
                                                         USE_STDERR, mode, str));
 
     if (JLI_IsTraceLauncher()) {
-        end   = CounterGet();
+        end = CounterGet();
         printf("%ld micro seconds to load main class\n",
                (long)(jint)Counter2Micros(end-start));
         printf("----%s----\n", JLDEBUG_ENV_ENTRY);
     }
 
@@ -2078,11 +2078,11 @@
 {
     FILE *jvmCfg;
     char line[MAXPATHLEN+20];
     int cnt = 0;
     int lineno = 0;
-    jlong start, end;
+    jlong start = 0, end = 0;
     int vmType;
     char *tmpPtr;
     char *altVMName = NULL;
     char *serverClassVMName = NULL;
     static char *whiteSpace = " \t";
@@ -2170,11 +2170,11 @@
     }
     fclose(jvmCfg);
     knownVMsCount = cnt;
 
     if (JLI_IsTraceLauncher()) {
-        end   = CounterGet();
+        end = CounterGet();
         printf("%ld micro seconds to parse jvm.cfg\n",
                (long)(jint)Counter2Micros(end-start));
     }
 
     return cnt;
