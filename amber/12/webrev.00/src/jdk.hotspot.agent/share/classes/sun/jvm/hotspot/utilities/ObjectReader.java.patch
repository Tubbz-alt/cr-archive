diff a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/ObjectReader.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/ObjectReader.java
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/ObjectReader.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/utilities/ObjectReader.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2002, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2002, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -203,19 +203,25 @@
 
    private void setPropertiesEntry(java.util.Properties p, Oop oop) {
       InstanceKlass ik = (InstanceKlass)oop.getKlass();
       OopField keyField = (OopField)ik.findField("key", "Ljava/lang/Object;");
       OopField valueField = (OopField)ik.findField("val", "Ljava/lang/Object;");
+      OopField nextField = (OopField)ik.findField("next", "Ljava/util/concurrent/ConcurrentHashMap$Node;");
 
       try {
          p.setProperty((String)readObject(keyField.getValue(oop)),
                        (String)readObject(valueField.getValue(oop)));
       } catch (ClassNotFoundException ce) {
          if (DEBUG) {
             debugPrintStackTrace(ce);
          }
       }
+      // If this hashmap table Node is chained, then follow the chain to the next Node.
+      Oop chainedOop = nextField.getValue(oop);
+      if (chainedOop != null) {
+          setPropertiesEntry(p, chainedOop);
+      }
    }
 
    protected Object getHashtable(Instance oop) {
       InstanceKlass k = (InstanceKlass)oop.getKlass();
       OopField tableField = (OopField)k.findField("table", "[Ljava/util/Hashtable$Entry;");
