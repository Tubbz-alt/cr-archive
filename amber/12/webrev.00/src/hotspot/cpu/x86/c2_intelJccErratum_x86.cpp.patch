diff a/src/hotspot/cpu/x86/c2_intelJccErratum_x86.cpp b/src/hotspot/cpu/x86/c2_intelJccErratum_x86.cpp
--- a/src/hotspot/cpu/x86/c2_intelJccErratum_x86.cpp
+++ b/src/hotspot/cpu/x86/c2_intelJccErratum_x86.cpp
@@ -27,10 +27,11 @@
 #include "c2_intelJccErratum_x86.hpp"
 #include "opto/cfgnode.hpp"
 #include "opto/compile.hpp"
 #include "opto/machnode.hpp"
 #include "opto/node.hpp"
+#include "opto/output.hpp"
 #include "opto/regalloc.hpp"
 #include "utilities/align.hpp"
 #include "utilities/debug.hpp"
 
 // Compute which 32 byte boundary an address corresponds to
@@ -50,11 +51,11 @@
   }
   return node_index == (block->number_of_nodes() - 1);
 }
 
 int IntelJccErratum::jcc_erratum_taint_node(MachNode* node, PhaseRegAlloc* regalloc) {
-  node->add_flag(Node::Flag_intel_jcc_erratum);
+  node->add_flag(Node::PD::Flag_intel_jcc_erratum);
   return node->size(regalloc);
 }
 
 int IntelJccErratum::tag_affected_machnodes(Compile* C, PhaseCFG* cfg, PhaseRegAlloc* regalloc) {
   ResourceMark rm;
@@ -96,11 +97,11 @@
 
 int IntelJccErratum::compute_padding(uintptr_t current_offset, const MachNode* mach, Block* block, uint index_in_block, PhaseRegAlloc* regalloc) {
   int jcc_size = mach->size(regalloc);
   if (index_in_block < block->number_of_nodes() - 1) {
     Node* next = block->get_node(index_in_block + 1);
-    if (next->is_Mach() && (next->as_Mach()->flags() & Node::Flag_intel_jcc_erratum)) {
+    if (next->is_Mach() && (next->as_Mach()->flags() & Node::PD::Flag_intel_jcc_erratum)) {
       jcc_size += mach->size(regalloc);
     }
   }
   if (jcc_size > largest_jcc_size()) {
     // Let's not try fixing this for nodes that seem unreasonably large
@@ -124,11 +125,11 @@
     _start_pc(pc()) {
   if (!VM_Version::has_intel_jcc_erratum()) {
     return;
   }
 
-  if (Compile::current()->in_scratch_emit_size()) {
+  if (Compile::current()->output()->in_scratch_emit_size()) {
     // When we measure the size of this 32 byte alignment, we apply a conservative guess.
     __ nop(jcc_size);
   } else if (IntelJccErratum::is_crossing_or_ending_at_32_byte_boundary(_start_pc, _start_pc + jcc_size)) {
     // The affected branch might get slowed down by micro code mitigations
     // as it could be susceptible to the erratum. Place nops until the next
@@ -139,11 +140,11 @@
   }
 }
 
 IntelJccErratumAlignment::~IntelJccErratumAlignment() {
   if (!VM_Version::has_intel_jcc_erratum() ||
-      Compile::current()->in_scratch_emit_size()) {
+      Compile::current()->output()->in_scratch_emit_size()) {
     return;
   }
 
   assert(!IntelJccErratum::is_crossing_or_ending_at_32_byte_boundary(_start_pc, pc()), "Invalid jcc_size estimate");
 }
