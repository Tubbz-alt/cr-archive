diff a/src/hotspot/cpu/x86/assembler_x86.hpp b/src/hotspot/cpu/x86/assembler_x86.hpp
--- a/src/hotspot/cpu/x86/assembler_x86.hpp
+++ b/src/hotspot/cpu/x86/assembler_x86.hpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -337,19 +337,19 @@
 
   static Address make_array(ArrayAddress);
 
  private:
   bool base_needs_rex() const {
-    return _base != noreg && _base->encoding() >= 8;
+    return _base->is_valid() && _base->encoding() >= 8;
   }
 
   bool index_needs_rex() const {
-    return _index != noreg &&_index->encoding() >= 8;
+    return _index->is_valid() &&_index->encoding() >= 8;
   }
 
   bool xmmindex_needs_rex() const {
-    return _xmmindex != xnoreg && _xmmindex->encoding() >= 8;
+    return _xmmindex->is_valid() && _xmmindex->encoding() >= 8;
   }
 
   relocInfo::relocType reloc() const { return _rspec.type(); }
 
   friend class Assembler;
@@ -657,36 +657,41 @@
 
   bool _legacy_mode_bw;
   bool _legacy_mode_dq;
   bool _legacy_mode_vl;
   bool _legacy_mode_vlbw;
-  bool _is_managed;
+  NOT_LP64(bool _is_managed;)
 
   class InstructionAttr *_attributes;
 
   // 64bit prefixes
-  int prefix_and_encode(int reg_enc, bool byteinst = false);
-  int prefixq_and_encode(int reg_enc);
+  void prefix(Register reg);
+  void prefix(Register dst, Register src, Prefix p);
+  void prefix(Register dst, Address adr, Prefix p);
 
+  void prefix(Address adr);
+  void prefix(Address adr, Register reg,  bool byteinst = false);
+  void prefix(Address adr, XMMRegister reg);
+
+  int prefix_and_encode(int reg_enc, bool byteinst = false);
   int prefix_and_encode(int dst_enc, int src_enc) {
     return prefix_and_encode(dst_enc, false, src_enc, false);
   }
   int prefix_and_encode(int dst_enc, bool dst_is_byte, int src_enc, bool src_is_byte);
-  int prefixq_and_encode(int dst_enc, int src_enc);
 
-  void prefix(Register reg);
-  void prefix(Register dst, Register src, Prefix p);
-  void prefix(Register dst, Address adr, Prefix p);
-  void prefix(Address adr);
-  void prefixq(Address adr);
+  // Some prefixq variants always emit exactly one prefix byte, so besides a
+  // prefix-emitting method we provide a method to get the prefix byte to emit,
+  // which can then be folded into a byte stream.
+  int8_t get_prefixq(Address adr);
+  int8_t get_prefixq(Address adr, Register reg);
 
-  void prefix(Address adr, Register reg,  bool byteinst = false);
-  void prefix(Address adr, XMMRegister reg);
+  void prefixq(Address adr);
   void prefixq(Address adr, Register reg);
   void prefixq(Address adr, XMMRegister reg);
 
-  void prefetch_prefix(Address src);
+  int prefixq_and_encode(int reg_enc);
+  int prefixq_and_encode(int dst_enc, int src_enc);
 
   void rex_prefix(Address adr, XMMRegister xreg,
                   VexSimdPrefix pre, VexOpcode opc, bool rex_w);
   int  rex_prefix_and_encode(int dst_enc, int src_enc,
                              VexSimdPrefix pre, VexOpcode opc, bool rex_w);
@@ -718,44 +723,54 @@
   void emit_arith_imm32(int op1, int op2, Register dst, int32_t imm32);
   void emit_arith(int op1, int op2, Register dst, Register src);
 
   bool emit_compressed_disp_byte(int &disp);
 
+  void emit_modrm(int mod, int dst_enc, int src_enc);
+  void emit_modrm_disp8(int mod, int dst_enc, int src_enc,
+                        int disp);
+  void emit_modrm_sib(int mod, int dst_enc, int src_enc,
+                      Address::ScaleFactor scale, int index_enc, int base_enc);
+  void emit_modrm_sib_disp8(int mod, int dst_enc, int src_enc,
+                            Address::ScaleFactor scale, int index_enc, int base_enc,
+                            int disp);
+
+  void emit_operand_helper(int reg_enc,
+                           int base_enc, int index_enc, Address::ScaleFactor scale,
+                           int disp,
+                           RelocationHolder const& rspec,
+                           int rip_relative_correction = 0);
+
   void emit_operand(Register reg,
                     Register base, Register index, Address::ScaleFactor scale,
                     int disp,
                     RelocationHolder const& rspec,
                     int rip_relative_correction = 0);
 
-  void emit_operand(XMMRegister reg, Register base, XMMRegister index,
-                    Address::ScaleFactor scale,
-                    int disp, RelocationHolder const& rspec);
+  void emit_operand(Register reg,
+                    Register base, XMMRegister index, Address::ScaleFactor scale,
+                    int disp,
+                    RelocationHolder const& rspec);
 
-  void emit_operand(Register reg, Address adr, int rip_relative_correction = 0);
+  void emit_operand(XMMRegister xreg,
+                    Register base, XMMRegister xindex, Address::ScaleFactor scale,
+                    int disp,
+                    RelocationHolder const& rspec);
 
-  // operands that only take the original 32bit registers
-  void emit_operand32(Register reg, Address adr);
+  void emit_operand(Register reg, Address adr,
+                    int rip_relative_correction = 0);
 
   void emit_operand(XMMRegister reg,
                     Register base, Register index, Address::ScaleFactor scale,
                     int disp,
                     RelocationHolder const& rspec);
 
   void emit_operand(XMMRegister reg, Address adr);
 
-  void emit_operand(MMXRegister reg, Address adr);
-
-  // workaround gcc (3.2.1-7) bug
-  void emit_operand(Address adr, MMXRegister reg);
-
-
   // Immediate-to-memory forms
   void emit_arith_operand(int op1, Register rm, Address adr, int32_t imm32);
 
-  void emit_farith(int b1, int b2, int i);
-
-
  protected:
   #ifdef ASSERT
   void check_relocation(RelocationHolder const& rspec, int format);
   #endif
 
@@ -855,11 +870,10 @@
   // Decoding
   static address locate_operand(address inst, WhichOperand which);
   static address locate_next_instruction(address inst);
 
   // Utilities
-  static bool is_polling_page_far() NOT_LP64({ return false;});
   static bool query_compressed_disp_byte(int disp, bool is_evex_inst, int vector_len,
                                          int cur_tuple_type, int in_size_in_bits, int cur_encoding);
 
   // Generic instructions
   // Does 32bit or 64bit as needed for the platform. In some sense these
@@ -868,25 +882,38 @@
   void init_attributes(void) {
     _legacy_mode_bw = (VM_Version::supports_avx512bw() == false);
     _legacy_mode_dq = (VM_Version::supports_avx512dq() == false);
     _legacy_mode_vl = (VM_Version::supports_avx512vl() == false);
     _legacy_mode_vlbw = (VM_Version::supports_avx512vlbw() == false);
-    _is_managed = false;
+    NOT_LP64(_is_managed = false;)
     _attributes = NULL;
   }
 
   void set_attributes(InstructionAttr *attributes) { _attributes = attributes; }
   void clear_attributes(void) { _attributes = NULL; }
 
-  void set_managed(void) { _is_managed = true; }
-  void clear_managed(void) { _is_managed = false; }
-  bool is_managed(void) { return _is_managed; }
+  void set_managed(void) { NOT_LP64(_is_managed = true;) }
+  void clear_managed(void) { NOT_LP64(_is_managed = false;) }
+  bool is_managed(void) {
+    NOT_LP64(return _is_managed;)
+    LP64_ONLY(return false;) }
 
   void lea(Register dst, Address src);
 
   void mov(Register dst, Register src);
 
+#ifdef _LP64
+  // support caching the result of some routines
+
+  // must be called before pusha(), popa(), vzeroupper() - checked with asserts
+  static void precompute_instructions();
+
+  void pusha_uncached();
+  void popa_uncached();
+#endif
+  void vzeroupper_uncached();
+
   void pusha();
   void popa();
 
   void pushf();
   void popf();
@@ -1133,13 +1160,21 @@
 
   // Divide Scalar Single-Precision Floating-Point Values
   void divss(XMMRegister dst, Address src);
   void divss(XMMRegister dst, XMMRegister src);
 
-  void emms();
 
 #ifndef _LP64
+ private:
+  // operands that only take the original 32bit registers
+  void emit_operand32(Register reg, Address adr);
+
+  void emit_farith(int b1, int b2, int i);
+
+ public:
+  void emms();
+
   void fabs();
 
   void fadd(int i);
 
   void fadd_d(Address src);
@@ -1501,16 +1536,11 @@
 
 #ifdef _LP64
   void movq(Register dst, Register src);
   void movq(Register dst, Address src);
   void movq(Address  dst, Register src);
-#endif
-
-  void movq(Address     dst, MMXRegister src );
-  void movq(MMXRegister dst, Address src );
 
-#ifdef _LP64
   // These dummies prevent using movq from converting a zero (like NULL) into Register
   // by giving the compiler two choices it can't resolve
 
   void movq(Address  dst, void* dummy);
   void movq(Register dst, void* dummy);
@@ -2166,10 +2196,13 @@
   void vpxor(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len);
   void vpxor(XMMRegister dst, XMMRegister nds, Address src, int vector_len);
   void evpxorq(XMMRegister dst, XMMRegister nds, XMMRegister src, int vector_len);
   void evpxorq(XMMRegister dst, XMMRegister nds, Address src, int vector_len);
 
+  // Ternary logic instruction.
+  void vpternlogd(XMMRegister dst, int imm8, XMMRegister src2, XMMRegister src3, int vector_len);
+  void vpternlogd(XMMRegister dst, int imm8, XMMRegister src2, Address     src3, int vector_len);
 
   // vinserti forms
   void vinserti128(XMMRegister dst, XMMRegister nds, XMMRegister src, uint8_t imm8);
   void vinserti128(XMMRegister dst, XMMRegister nds, Address src, uint8_t imm8);
   void vinserti32x4(XMMRegister dst, XMMRegister nds, XMMRegister src, uint8_t imm8);
@@ -2267,66 +2300,64 @@
     bool rex_vex_w,     // Width of data: if 32-bits or less, false, else if 64-bit or specially defined, true
     bool legacy_mode,   // Details if either this instruction is conditionally encoded to AVX or earlier if true else possibly EVEX
     bool no_reg_mask,   // when true, k0 is used when EVEX encoding is chosen, else embedded_opmask_register_specifier is used
     bool uses_vl)       // This instruction may have legacy constraints based on vector length for EVEX
     :
-      _avx_vector_len(vector_len),
       _rex_vex_w(rex_vex_w),
-      _rex_vex_w_reverted(false),
-      _legacy_mode(legacy_mode),
+      _legacy_mode(legacy_mode || UseAVX < 3),
       _no_reg_mask(no_reg_mask),
       _uses_vl(uses_vl),
-      _tuple_type(Assembler::EVEX_ETUP),
-      _input_size_in_bits(Assembler::EVEX_NObit),
+      _rex_vex_w_reverted(false),
       _is_evex_instruction(false),
-      _evex_encoding(0),
       _is_clear_context(true),
       _is_extended_context(false),
+      _avx_vector_len(vector_len),
+      _tuple_type(Assembler::EVEX_ETUP),
+      _input_size_in_bits(Assembler::EVEX_NObit),
+      _evex_encoding(0),
       _embedded_opmask_register_specifier(0), // hard code k0
-      _current_assembler(NULL) {
-    if (UseAVX < 3) _legacy_mode = true;
-  }
+      _current_assembler(NULL) { }
 
   ~InstructionAttr() {
     if (_current_assembler != NULL) {
       _current_assembler->clear_attributes();
     }
     _current_assembler = NULL;
   }
 
 private:
-  int  _avx_vector_len;
   bool _rex_vex_w;
-  bool _rex_vex_w_reverted;
   bool _legacy_mode;
   bool _no_reg_mask;
   bool _uses_vl;
-  int  _tuple_type;
-  int  _input_size_in_bits;
+  bool _rex_vex_w_reverted;
   bool _is_evex_instruction;
-  int  _evex_encoding;
   bool _is_clear_context;
   bool _is_extended_context;
+  int  _avx_vector_len;
+  int  _tuple_type;
+  int  _input_size_in_bits;
+  int  _evex_encoding;
   int _embedded_opmask_register_specifier;
 
   Assembler *_current_assembler;
 
 public:
   // query functions for field accessors
-  int  get_vector_len(void) const { return _avx_vector_len; }
   bool is_rex_vex_w(void) const { return _rex_vex_w; }
-  bool is_rex_vex_w_reverted(void) { return _rex_vex_w_reverted; }
   bool is_legacy_mode(void) const { return _legacy_mode; }
   bool is_no_reg_mask(void) const { return _no_reg_mask; }
   bool uses_vl(void) const { return _uses_vl; }
+  bool is_rex_vex_w_reverted(void) { return _rex_vex_w_reverted; }
+  bool is_evex_instruction(void) const { return _is_evex_instruction; }
+  bool is_clear_context(void) const { return _is_clear_context; }
+  bool is_extended_context(void) const { return _is_extended_context; }
+  int  get_vector_len(void) const { return _avx_vector_len; }
   int  get_tuple_type(void) const { return _tuple_type; }
   int  get_input_size(void) const { return _input_size_in_bits; }
-  int  is_evex_instruction(void) const { return _is_evex_instruction; }
   int  get_evex_encoding(void) const { return _evex_encoding; }
-  bool is_clear_context(void) const { return _is_clear_context; }
-  bool is_extended_context(void) const { return _is_extended_context; }
-  int get_embedded_opmask_register_specifier(void) const { return _embedded_opmask_register_specifier; }
+  int  get_embedded_opmask_register_specifier(void) const { return _embedded_opmask_register_specifier; }
 
   // Set the vector len manually
   void set_vector_len(int vector_len) { _avx_vector_len = vector_len; }
 
   // Set revert rex_vex_w for avx encoding
