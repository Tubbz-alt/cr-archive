diff a/src/hotspot/cpu/sparc/frame_sparc.cpp b/src/hotspot/cpu/sparc/frame_sparc.cpp
--- a/src/hotspot/cpu/sparc/frame_sparc.cpp
+++ b/src/hotspot/cpu/sparc/frame_sparc.cpp
@@ -548,24 +548,23 @@
   return frame(sp, younger_sp, frame_is_interpreted);
 }
 
 
 void frame::patch_pc(Thread* thread, address pc) {
+  assert(_cb == CodeCache::find_blob(pc), "unexpected pc");
   vmassert(_deopt_state != unknown, "frame is unpatchable");
-  if(thread == Thread::current()) {
-   StubRoutines::Sparc::flush_callers_register_windows_func()();
+  if (thread == Thread::current()) {
+    StubRoutines::Sparc::flush_callers_register_windows_func()();
   }
   if (TracePcPatching) {
     // QQQ this assert is invalid (or too strong anyway) sice _pc could
     // be original pc and frame could have the deopt pc.
     // assert(_pc == *O7_addr() + pc_return_offset, "frame has wrong pc");
     tty->print_cr("patch_pc at address " INTPTR_FORMAT " [" INTPTR_FORMAT " -> " INTPTR_FORMAT "]",
                   p2i(O7_addr()), p2i(_pc), p2i(pc));
   }
-  _cb = CodeCache::find_blob(pc);
   *O7_addr() = pc - pc_return_offset;
-  _cb = CodeCache::find_blob(_pc);
   address original_pc = CompiledMethod::get_deopt_original_pc(this);
   if (original_pc != NULL) {
     assert(original_pc == _pc, "expected original to be stored before patching");
     _deopt_state = is_deoptimized;
   } else {
