diff a/src/hotspot/cpu/arm/macroAssembler_arm.cpp b/src/hotspot/cpu/arm/macroAssembler_arm.cpp
--- a/src/hotspot/cpu/arm/macroAssembler_arm.cpp
+++ b/src/hotspot/cpu/arm/macroAssembler_arm.cpp
@@ -1624,61 +1624,10 @@
       ldr(method_result, Address(method_result, Rtmp));
     }
   }
 }
 
-#ifdef COMPILER2
-// TODO: 8 bytes at a time? pre-fetch?
-// Compare char[] arrays aligned to 4 bytes.
-void MacroAssembler::char_arrays_equals(Register ary1, Register ary2,
-                                        Register limit, Register result,
-                                      Register chr1, Register chr2, Label& Ldone) {
-  Label Lvector, Lloop;
-
-  // if (ary1 == ary2)
-  //     return true;
-  cmpoop(ary1, ary2);
-  b(Ldone, eq);
-
-  // Note: limit contains number of bytes (2*char_elements) != 0.
-  tst(limit, 0x2); // trailing character ?
-  b(Lvector, eq);
-
-  // compare the trailing char
-  sub(limit, limit, sizeof(jchar));
-  ldrh(chr1, Address(ary1, limit));
-  ldrh(chr2, Address(ary2, limit));
-  cmp(chr1, chr2);
-  mov(result, 0, ne);     // not equal
-  b(Ldone, ne);
-
-  // only one char ?
-  tst(limit, limit);
-  mov(result, 1, eq);
-  b(Ldone, eq);
-
-  // word by word compare, dont't need alignment check
-  bind(Lvector);
-
-  // Shift ary1 and ary2 to the end of the arrays, negate limit
-  add(ary1, limit, ary1);
-  add(ary2, limit, ary2);
-  neg(limit, limit);
-
-  bind(Lloop);
-  ldr_u32(chr1, Address(ary1, limit));
-  ldr_u32(chr2, Address(ary2, limit));
-  cmp_32(chr1, chr2);
-  mov(result, 0, ne);     // not equal
-  b(Ldone, ne);
-  adds(limit, limit, 2*sizeof(jchar));
-  b(Lloop, ne);
-
-  // Caller should set it:
-  // mov(result_reg, 1);  //equal
-}
-#endif
 
 void MacroAssembler::inc_counter(address counter_addr, Register tmpreg1, Register tmpreg2) {
   mov_slow(tmpreg1, counter_addr);
   ldr_s32(tmpreg2, tmpreg1);
   add_32(tmpreg2, tmpreg2, 1);
@@ -1968,118 +1917,21 @@
   }
   BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();
   return bs->resolve(this, decorators, obj);
 }
 
-
-#ifdef COMPILER2
-void MacroAssembler::fast_lock(Register Roop, Register Rbox, Register Rscratch, Register Rscratch2, Register scratch3)
-{
-  assert(VM_Version::supports_ldrex(), "unsupported, yet?");
-
-  Register Rmark      = Rscratch2;
-
-  assert(Roop != Rscratch, "");
-  assert(Roop != Rmark, "");
-  assert(Rbox != Rscratch, "");
-  assert(Rbox != Rmark, "");
-
-  Label fast_lock, done;
-
-  if (UseBiasedLocking && !UseOptoBiasInlining) {
-    assert(scratch3 != noreg, "need extra temporary for -XX:-UseOptoBiasInlining");
-    biased_locking_enter(Roop, Rmark, Rscratch, false, scratch3, done, done);
-    // Fall through if lock not biased otherwise branch to done
-  }
-
-  // Invariant: Rmark loaded below does not contain biased lock pattern
-
-  ldr(Rmark, Address(Roop, oopDesc::mark_offset_in_bytes()));
-  tst(Rmark, markWord::unlocked_value);
-  b(fast_lock, ne);
-
-  // Check for recursive lock
-  // See comments in InterpreterMacroAssembler::lock_object for
-  // explanations on the fast recursive locking check.
-  // -1- test low 2 bits
-  movs(Rscratch, AsmOperand(Rmark, lsl, 30));
-  // -2- test (hdr - SP) if the low two bits are 0
-  sub(Rscratch, Rmark, SP, eq);
-  movs(Rscratch, AsmOperand(Rscratch, lsr, exact_log2(os::vm_page_size())), eq);
-  // If still 'eq' then recursive locking OK
-  // set to zero if recursive lock, set to non zero otherwise (see discussion in JDK-8153107)
-  str(Rscratch, Address(Rbox, BasicLock::displaced_header_offset_in_bytes()));
-  b(done);
-
-  bind(fast_lock);
-  str(Rmark, Address(Rbox, BasicLock::displaced_header_offset_in_bytes()));
-
-  bool allow_fallthrough_on_failure = true;
-  bool one_shot = true;
-  cas_for_lock_acquire(Rmark, Rbox, Roop, Rscratch, done, allow_fallthrough_on_failure, one_shot);
-
-  bind(done);
-
-  // At this point flags are set as follows:
-  //  EQ -> Success
-  //  NE -> Failure, branch to slow path
-}
-
-void MacroAssembler::fast_unlock(Register Roop, Register Rbox, Register Rscratch, Register Rscratch2)
-{
-  assert(VM_Version::supports_ldrex(), "unsupported, yet?");
-
-  Register Rmark      = Rscratch2;
-
-  assert(Roop != Rscratch, "");
-  assert(Roop != Rmark, "");
-  assert(Rbox != Rscratch, "");
-  assert(Rbox != Rmark, "");
-
-  Label done;
-
-  if (UseBiasedLocking && !UseOptoBiasInlining) {
-    biased_locking_exit(Roop, Rscratch, done);
-  }
-
-  ldr(Rmark, Address(Rbox, BasicLock::displaced_header_offset_in_bytes()));
-  // If hdr is NULL, we've got recursive locking and there's nothing more to do
-  cmp(Rmark, 0);
-  b(done, eq);
-
-  // Restore the object header
-  bool allow_fallthrough_on_failure = true;
-  bool one_shot = true;
-  cas_for_lock_release(Rmark, Rbox, Roop, Rscratch, done, allow_fallthrough_on_failure, one_shot);
-
-  bind(done);
-
-}
-
 void MacroAssembler::safepoint_poll(Register tmp1, Label& slow_path) {
-  if (SafepointMechanism::uses_thread_local_poll()) {
-    ldr_u32(tmp1, Address(Rthread, Thread::polling_page_offset()));
-    tst(tmp1, exact_log2(SafepointMechanism::poll_bit()));
-    b(slow_path, eq);
-  } else {
-    ldr_global_s32(tmp1, SafepointSynchronize::address_of_state());
-    cmp(tmp1, SafepointSynchronize::_not_synchronized);
-    b(slow_path, ne);
-  }
+  ldr_u32(tmp1, Address(Rthread, Thread::polling_page_offset()));
+  tst(tmp1, exact_log2(SafepointMechanism::poll_bit()));
+  b(slow_path, eq);
 }
 
 void MacroAssembler::get_polling_page(Register dest) {
-  if (SafepointMechanism::uses_thread_local_poll()) {
-    ldr(dest, Address(Rthread, Thread::polling_page_offset()));
-  } else {
-    mov_address(dest, os::get_polling_page());
-  }
+  ldr(dest, Address(Rthread, Thread::polling_page_offset()));
 }
 
 void MacroAssembler::read_polling_page(Register dest, relocInfo::relocType rtype) {
   get_polling_page(dest);
   relocate(rtype);
   ldr(dest, Address(dest));
 }
 
-
-#endif // COMPILER2
