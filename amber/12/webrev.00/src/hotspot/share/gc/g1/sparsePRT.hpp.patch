diff a/src/hotspot/share/gc/g1/sparsePRT.hpp b/src/hotspot/share/gc/g1/sparsePRT.hpp
--- a/src/hotspot/share/gc/g1/sparsePRT.hpp
+++ b/src/hotspot/share/gc/g1/sparsePRT.hpp
@@ -33,18 +33,16 @@
 #include "utilities/align.hpp"
 #include "utilities/globalDefinitions.hpp"
 
 class RSHashTable;
 class SparsePRTEntry;
-class SparsePRTIter;
 
 // Sparse remembered set for a heap region (the "owning" region).  Maps
 // indices of other regions to short sequences of cards in the other region
 // that might contain pointers into the owner region.
 // Concurrent access to a SparsePRT must be serialized by some external mutex.
 class SparsePRT {
-  friend class SparsePRTIter;
   friend class SparsePRTBucketIter;
 
   RSHashTable* _table;
 
   static const size_t InitialCapacity = 8;
@@ -117,11 +115,10 @@
   // Set the region_ind to the given value, and delete all cards.
   inline void init(RegionIdx_t region_ind);
 
   RegionIdx_t r_ind() const { return _region_ind; }
   bool valid_entry() const { return r_ind() >= 0; }
-  void set_r_ind(RegionIdx_t rind) { _region_ind = rind; }
 
   int next_index() const { return _next_index; }
   int* next_index_addr() { return &_next_index; }
   void set_next_index(int ni) { _next_index = ni; }
 
@@ -145,22 +142,20 @@
   }
 };
 
 class RSHashTable : public CHeapObj<mtGC> {
 
-  friend class RSHashTableIter;
   friend class RSHashTableBucketIter;
 
   // Inverse maximum hash table occupancy used.
   static float TableOccupancyFactor;
 
   size_t _num_entries;
 
   size_t _capacity;
   size_t _capacity_mask;
   size_t _occupied_entries;
-  size_t _occupied_cards;
 
   SparsePRTEntry* _entries;
   int* _buckets;
   int  _free_region;
   int  _free_list;
@@ -176,15 +171,19 @@
   int alloc_entry();
   // Declares the entry "fi" to be free.  (It must have already been
   // deleted from any bucket lists.
   void free_entry(int fi);
 
+  // For the empty sentinel created at static initialization time
+  RSHashTable();
+
 public:
   RSHashTable(size_t capacity);
   ~RSHashTable();
 
   static const int NullEntry = -1;
+  static RSHashTable empty_table;
 
   bool should_expand() const { return _occupied_entries == _num_entries; }
 
   // Attempts to ensure that the given card_index in the given region is in
   // the sparse table.  If successful (because the card was already
@@ -204,11 +203,10 @@
 
   void clear();
 
   size_t capacity() const      { return _capacity; }
   size_t capacity_mask() const { return _capacity_mask;  }
-  size_t occupied_entries() const { return _occupied_entries; }
   size_t mem_size() const;
   // The number of SparsePRTEntry instances available.
   size_t num_entries() const { return _num_entries; }
 
   SparsePRTEntry* entry(int i) const {
@@ -217,45 +215,14 @@
   }
 
   void print();
 };
 
-// This is embedded in HRRS iterator.
-class RSHashTableIter {
-  // Return value indicating "invalid/no card".
-  static const int NoCardFound = -1;
-
-  int _tbl_ind;         // [-1, 0.._rsht->_capacity)
-  int _bl_ind;          // [-1, 0.._rsht->_capacity)
-  short _card_ind;      // [0..SparsePRTEntry::cards_num())
-  RSHashTable* _rsht;
-
-  // If the bucket list pointed to by _bl_ind contains a card, sets
-  // _bl_ind to the index of that entry,
-  // Returns the card found if there is, otherwise returns InvalidCard.
-  CardIdx_t find_first_card_in_list();
-
-  // Computes the proper card index for the card whose offset in the
-  // current region (as indicated by _bl_ind) is "ci".
-  // This is subject to errors when there is iteration concurrent with
-  // modification, but these errors should be benign.
-  size_t compute_card_ind(CardIdx_t ci);
-
-public:
-  RSHashTableIter(RSHashTable* rsht) :
-    _tbl_ind(RSHashTable::NullEntry), // So that first increment gets to 0.
-    _bl_ind(RSHashTable::NullEntry),
-    _card_ind((SparsePRTEntry::cards_num() - 1)),
-    _rsht(rsht) {}
-
-  bool has_next(size_t& card_index);
-};
-
 // This is embedded in HRRS iterator.
 class RSHashTableBucketIter {
-  int _tbl_ind;         // [-1, 0.._rsht->_capacity)
-  int _bl_ind;          // [-1, 0.._rsht->_capacity)
+  uint _tbl_ind;        // [0.._rsht->_capacity)
+  int  _bl_ind;         // [-1, 0.._rsht->_capacity)
 
   RSHashTable* _rsht;
 
 public:
   RSHashTableBucketIter(RSHashTable* rsht) :
@@ -264,20 +231,10 @@
     _rsht(rsht) { }
 
   bool has_next(SparsePRTEntry*& entry);
 };
 
-class SparsePRTIter: public RSHashTableIter {
-public:
-  SparsePRTIter(const SparsePRT* sprt) :
-    RSHashTableIter(sprt->_table) { }
-
-  bool has_next(size_t& card_index) {
-    return RSHashTableIter::has_next(card_index);
-  }
-};
-
 class SparsePRTBucketIter: public RSHashTableBucketIter {
 public:
   SparsePRTBucketIter(const SparsePRT* sprt) :
     RSHashTableBucketIter(sprt->_table) {}
 
