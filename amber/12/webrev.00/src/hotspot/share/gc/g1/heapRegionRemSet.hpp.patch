diff a/src/hotspot/share/gc/g1/heapRegionRemSet.hpp b/src/hotspot/share/gc/g1/heapRegionRemSet.hpp
--- a/src/hotspot/share/gc/g1/heapRegionRemSet.hpp
+++ b/src/hotspot/share/gc/g1/heapRegionRemSet.hpp
@@ -79,12 +79,12 @@
   static jint _n_coarsenings;
 
   PerRegionTable** _fine_grain_regions;
   size_t           _n_fine_entries;
 
-  // The fine grain remembered sets are doubly linked together using
-  // their 'next' and 'prev' fields.
+  // The fine grain remembered sets are linked together using
+  // their 'next' fields.
   // This allows fast bulk freeing of all the fine grain remembered
   // set entries, and fast finding of all of them without iterating
   // over the _fine_grain_regions table.
   PerRegionTable * _first_all_fine_prts;
   PerRegionTable * _last_all_fine_prts;
@@ -111,12 +111,10 @@
   // to hold _m, and the fine-grain table to be full.
   PerRegionTable* delete_region_table(size_t& added_by_deleted);
 
   // link/add the given fine grain remembered set into the "all" list
   void link_to_all(PerRegionTable * prt);
-  // unlink/remove the given fine grain remembered set into the "all" list
-  void unlink_from_all(PerRegionTable * prt);
 
   bool contains_reference_locked(OopOrNarrowOopStar from) const;
 
 public:
   // Create a new remembered set. The given mutex is used to ensure consistency.
@@ -153,10 +151,13 @@
   // Returns the size of the free list content in bytes.
   static size_t fl_mem_size();
 
   // Clear the entire contents of this remembered set.
   void clear();
+
+  // Safe for use by concurrent readers outside _m
+  bool is_region_coarsened(RegionIdx_t from_hrm_ind) const;
 };
 
 class PerRegionTable: public CHeapObj<mtGC> {
   friend class OtherRegionsTable;
 
@@ -165,13 +166,10 @@
   jint            _occupied;
 
   // next pointer for free/allocated 'all' list
   PerRegionTable* _next;
 
-  // prev pointer for the allocated 'all' list
-  PerRegionTable* _prev;
-
   // next pointer in collision list
   PerRegionTable * _collision_list_next;
 
   // Global free list of PRTs
   static PerRegionTable* volatile _free_list;
@@ -179,11 +177,11 @@
 protected:
   PerRegionTable(HeapRegion* hr) :
     _hr(hr),
     _bm(HeapRegion::CardsPerRegion, mtGC),
     _occupied(0),
-    _next(NULL), _prev(NULL),
+    _next(NULL),
     _collision_list_next(NULL)
   {}
 
 public:
   // We need access in order to union things into the base table.
@@ -241,20 +239,15 @@
   // Returns an initialized PerRegionTable instance.
   static PerRegionTable* alloc(HeapRegion* hr);
 
   PerRegionTable* next() const { return _next; }
   void set_next(PerRegionTable* next) { _next = next; }
-  PerRegionTable* prev() const { return _prev; }
-  void set_prev(PerRegionTable* prev) { _prev = prev; }
 
   // Accessor and Modification routines for the pointer for the
   // singly linked collision list that links the PRTs within the
   // OtherRegionsTable::_fine_grain_regions hash table.
   //
-  // It might be useful to also make the collision list doubly linked
-  // to avoid iteration over the collisions list during scrubbing/deletion.
-  // OTOH there might not be many collisions.
 
   PerRegionTable* collision_list_next() const {
     return _collision_list_next;
   }
 
