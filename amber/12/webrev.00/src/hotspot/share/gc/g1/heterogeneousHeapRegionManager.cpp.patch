diff a/src/hotspot/share/gc/g1/heterogeneousHeapRegionManager.cpp b/src/hotspot/share/gc/g1/heterogeneousHeapRegionManager.cpp
--- a/src/hotspot/share/gc/g1/heterogeneousHeapRegionManager.cpp
+++ b/src/hotspot/share/gc/g1/heterogeneousHeapRegionManager.cpp
@@ -323,22 +323,32 @@
     assert(is_available(hr->hrm_index()), "Must be committed");
   }
   return hr;
 }
 
-uint HeterogeneousHeapRegionManager::find_contiguous_only_empty(size_t num) {
+HeapRegion* HeterogeneousHeapRegionManager::allocate_humongous_from_free_list(uint num_regions) {
   if (has_borrowed_regions()) {
-      return G1_NO_HRM_INDEX;
+      return NULL;
+  }
+  uint candidate = find_contiguous(start_index_of_nvdimm(), end_index_of_nvdimm(), num_regions, true);
+  if (candidate == G1_NO_HRM_INDEX) {
+    return NULL;
   }
-  return find_contiguous(start_index_of_nvdimm(), end_index_of_nvdimm(), num, true);
+  return allocate_free_regions_starting_at(candidate, num_regions);
 }
 
-uint HeterogeneousHeapRegionManager::find_contiguous_empty_or_unavailable(size_t num) {
+HeapRegion* HeterogeneousHeapRegionManager::allocate_humongous_allow_expand(uint num_regions) {
   if (has_borrowed_regions()) {
-    return G1_NO_HRM_INDEX;
+    return NULL;
   }
-  return find_contiguous(start_index_of_nvdimm(), end_index_of_nvdimm(), num, false);
+  uint candidate = find_contiguous(start_index_of_nvdimm(), end_index_of_nvdimm(), num_regions, false);
+  if (candidate == G1_NO_HRM_INDEX) {
+    return NULL;
+  }
+
+  expand_exact(candidate, num_regions, NULL);
+  return allocate_free_regions_starting_at(candidate, num_regions);
 }
 
 uint HeterogeneousHeapRegionManager::find_contiguous(size_t start, size_t end, size_t num, bool empty_only) {
   uint found = 0;
   size_t length_found = 0;
