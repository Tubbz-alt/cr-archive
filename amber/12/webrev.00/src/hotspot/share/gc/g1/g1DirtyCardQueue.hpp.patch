diff a/src/hotspot/share/gc/g1/g1DirtyCardQueue.hpp b/src/hotspot/share/gc/g1/g1DirtyCardQueue.hpp
--- a/src/hotspot/share/gc/g1/g1DirtyCardQueue.hpp
+++ b/src/hotspot/share/gc/g1/g1DirtyCardQueue.hpp
@@ -210,11 +210,11 @@
   size_t _process_cards_threshold;
 
   // If the queue contains more cards than configured here, the
   // mutator must start doing some of the concurrent refinement work.
   size_t _max_cards;
-  size_t _max_cards_padding;
+  volatile size_t _padded_max_cards;
   static const size_t MaxCardsUnlimited = SIZE_MAX;
 
   // Array of cumulative dirty cards refined by mutator threads.
   // Array has an entry per id in _free_ids.
   size_t* _mutator_refined_cards_counters;
@@ -243,15 +243,17 @@
   // stopped, or one past the last element if the entire buffer was
   // processed. Increments *total_refined_cards by the number of cards
   // processed and removed from the buffer.
   bool refine_buffer(BufferNode* node, uint worker_id, size_t* total_refined_cards);
 
-  bool mut_process_buffer(BufferNode* node);
+  // Deal with buffer after a call to refine_buffer.  If fully processed,
+  // deallocate the buffer.  Otherwise, record it as paused.
+  void handle_refined_buffer(BufferNode* node, bool fully_processed);
 
-  // If the number of completed buffers is > stop_at, then remove and
-  // return a completed buffer from the list.  Otherwise, return NULL.
-  BufferNode* get_completed_buffer(size_t stop_at = 0);
+  // Remove and return a completed buffer from the list, or return NULL
+  // if none available.
+  BufferNode* get_completed_buffer();
 
 public:
   G1DirtyCardQueueSet(BufferNode::Allocator* allocator);
   ~G1DirtyCardQueueSet();
 
@@ -263,15 +265,10 @@
   // mutator threads to do card-processing work.
   static uint num_par_ids();
 
   static void handle_zero_index_for_thread(Thread* t);
 
-  // Either process the entire buffer and return true, or enqueue the
-  // buffer and return false.  If the buffer is completely processed,
-  // it can be reused in place.
-  bool process_or_enqueue_completed_buffer(BufferNode* node);
-
   virtual void enqueue_completed_buffer(BufferNode* node);
 
   // Upper bound on the number of cards currently in in this queue set.
   // Read without synchronization.  The value may be high because there
   // is a concurrent modification of the set of buffers.
@@ -293,10 +290,21 @@
 
   void merge_bufferlists(G1RedirtyCardsQueueSet* src);
 
   G1BufferNodeList take_all_completed_buffers();
 
+  // Helper for G1DirtyCardQueue::handle_completed_buffer().
+  // Enqueue the buffer, and optionally perform refinement by the mutator.
+  // Mutator refinement is only done by Java threads, and only if there
+  // are more than max_cards (possibly padded) cards in the completed
+  // buffers.
+  //
+  // Mutator refinement, if performed, stops processing a buffer if
+  // SuspendibleThreadSet::should_yield(), recording the incompletely
+  // processed buffer for later processing of the remainder.
+  void handle_completed_buffer(BufferNode* node);
+
   // If there are more than stop_at cards in the completed buffers, pop
   // a buffer, refine its contents, and return true.  Otherwise return
   // false.
   //
   // Stops processing a buffer if SuspendibleThreadSet::should_yield(),
@@ -314,23 +322,22 @@
   void abandon_logs();
 
   // If any threads have partial logs, add them to the global list of logs.
   void concatenate_logs();
 
-  void set_max_cards(size_t m) {
-    _max_cards = m;
-  }
-  size_t max_cards() const {
-    return _max_cards;
-  }
+  // Threshold for mutator threads to also do refinement when there
+  // are concurrent refinement threads.
+  size_t max_cards() const;
 
-  void set_max_cards_padding(size_t padding) {
-    _max_cards_padding = padding;
-  }
-  size_t max_cards_padding() const {
-    return _max_cards_padding;
-  }
+  // Set threshold for mutator threads to also do refinement.
+  void set_max_cards(size_t value);
+
+  // Artificially increase mutator refinement threshold.
+  void set_max_cards_padding(size_t padding);
+
+  // Discard artificial increase of mutator refinement threshold.
+  void discard_max_cards_padding();
 
   // Total dirty cards refined by mutator threads.
   size_t total_mutator_refined_cards() const;
 };
 
