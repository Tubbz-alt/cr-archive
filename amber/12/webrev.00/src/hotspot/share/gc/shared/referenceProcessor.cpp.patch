diff a/src/hotspot/share/gc/shared/referenceProcessor.cpp b/src/hotspot/share/gc/shared/referenceProcessor.cpp
--- a/src/hotspot/share/gc/shared/referenceProcessor.cpp
+++ b/src/hotspot/share/gc/shared/referenceProcessor.cpp
@@ -780,12 +780,17 @@
   size_t const num_soft_refs = total_count(_discoveredSoftRefs);
   phase_times->set_ref_discovered(REF_SOFT, num_soft_refs);
 
   phase_times->set_processing_is_mt(_processing_is_mt);
 
-  if (num_soft_refs == 0 || _current_soft_ref_policy == NULL) {
-    log_debug(gc, ref)("Skipped phase1 of Reference Processing due to unavailable references");
+  if (num_soft_refs == 0) {
+    log_debug(gc, ref)("Skipped phase 1 of Reference Processing: no references");
+    return;
+  }
+
+  if (_current_soft_ref_policy == NULL) {
+    log_debug(gc, ref)("Skipped phase 1 of Reference Processing: no policy");
     return;
   }
 
   RefProcMTDegreeAdjuster a(this, RefPhase1, num_soft_refs);
 
@@ -794,11 +799,11 @@
     maybe_balance_queues(_discoveredSoftRefs);
   }
 
   RefProcPhaseTimeTracker tt(RefPhase1, phase_times);
 
-  log_reflist("Phase1 Soft before", _discoveredSoftRefs, _max_num_queues);
+  log_reflist("Phase 1 Soft before", _discoveredSoftRefs, _max_num_queues);
   if (_processing_is_mt) {
     RefProcPhase1Task phase1(*this, phase_times, _current_soft_ref_policy);
     task_executor->execute(phase1, num_queues());
   } else {
     size_t removed = 0;
@@ -809,11 +814,11 @@
                                                   is_alive, keep_alive, complete_gc);
     }
 
     phase_times->add_ref_cleared(REF_SOFT, removed);
   }
-  log_reflist("Phase1 Soft after", _discoveredSoftRefs, _max_num_queues);
+  log_reflist("Phase 1 Soft after", _discoveredSoftRefs, _max_num_queues);
 }
 
 void ReferenceProcessor::process_soft_weak_final_refs(BoolObjectClosure* is_alive,
                                                       OopClosure* keep_alive,
                                                       VoidClosure* complete_gc,
@@ -829,11 +834,11 @@
   phase_times->set_ref_discovered(REF_FINAL, num_final_refs);
 
   phase_times->set_processing_is_mt(_processing_is_mt);
 
   if (num_total_refs == 0) {
-    log_debug(gc, ref)("Skipped phase2 of Reference Processing due to unavailable references");
+    log_debug(gc, ref)("Skipped phase 2 of Reference Processing: no references");
     return;
   }
 
   RefProcMTDegreeAdjuster a(this, RefPhase2, num_total_refs);
 
@@ -844,13 +849,13 @@
     maybe_balance_queues(_discoveredFinalRefs);
   }
 
   RefProcPhaseTimeTracker tt(RefPhase2, phase_times);
 
-  log_reflist("Phase2 Soft before", _discoveredSoftRefs, _max_num_queues);
-  log_reflist("Phase2 Weak before", _discoveredWeakRefs, _max_num_queues);
-  log_reflist("Phase2 Final before", _discoveredFinalRefs, _max_num_queues);
+  log_reflist("Phase 2 Soft before", _discoveredSoftRefs, _max_num_queues);
+  log_reflist("Phase 2 Weak before", _discoveredWeakRefs, _max_num_queues);
+  log_reflist("Phase 2 Final before", _discoveredFinalRefs, _max_num_queues);
   if (_processing_is_mt) {
     RefProcPhase2Task phase2(*this, phase_times);
     task_executor->execute(phase2, num_queues());
   } else {
     RefProcWorkerTimeTracker t(phase_times->phase2_worker_time_sec(), 0);
@@ -886,11 +891,11 @@
     }
     complete_gc->do_void();
   }
   verify_total_count_zero(_discoveredSoftRefs, "SoftReference");
   verify_total_count_zero(_discoveredWeakRefs, "WeakReference");
-  log_reflist("Phase2 Final after", _discoveredFinalRefs, _max_num_queues);
+  log_reflist("Phase 2 Final after", _discoveredFinalRefs, _max_num_queues);
 }
 
 void ReferenceProcessor::process_final_keep_alive(OopClosure* keep_alive,
                                                   VoidClosure* complete_gc,
                                                   AbstractRefProcTaskExecutor*  task_executor,
@@ -900,11 +905,11 @@
   size_t const num_final_refs = total_count(_discoveredFinalRefs);
 
   phase_times->set_processing_is_mt(_processing_is_mt);
 
   if (num_final_refs == 0) {
-    log_debug(gc, ref)("Skipped phase3 of Reference Processing due to unavailable references");
+    log_debug(gc, ref)("Skipped phase 3 of Reference Processing: no references");
     return;
   }
 
   RefProcMTDegreeAdjuster a(this, RefPhase3, num_final_refs);
 
@@ -940,11 +945,11 @@
   phase_times->set_ref_discovered(REF_PHANTOM, num_phantom_refs);
 
   phase_times->set_processing_is_mt(_processing_is_mt);
 
   if (num_phantom_refs == 0) {
-    log_debug(gc, ref)("Skipped phase4 of Reference Processing due to unavailable references");
+    log_debug(gc, ref)("Skipped phase 4 of Reference Processing: no references");
     return;
   }
 
   RefProcMTDegreeAdjuster a(this, RefPhase4, num_phantom_refs);
 
@@ -954,11 +959,11 @@
   }
 
   // Phase 4: Walk phantom references appropriately.
   RefProcPhaseTimeTracker tt(RefPhase4, phase_times);
 
-  log_reflist("Phase4 Phantom before", _discoveredPhantomRefs, _max_num_queues);
+  log_reflist("Phase 4 Phantom before", _discoveredPhantomRefs, _max_num_queues);
   if (_processing_is_mt) {
     RefProcPhase4Task phase4(*this, phase_times);
     task_executor->execute(phase4, num_queues());
   } else {
     size_t removed = 0;
