diff a/src/hotspot/share/gc/shenandoah/shenandoahAsserts.hpp b/src/hotspot/share/gc/shenandoah/shenandoahAsserts.hpp
--- a/src/hotspot/share/gc/shenandoah/shenandoahAsserts.hpp
+++ b/src/hotspot/share/gc/shenandoah/shenandoahAsserts.hpp
@@ -67,10 +67,14 @@
   static void assert_rp_isalive_not_installed(const char *file, int line);
   static void assert_rp_isalive_installed(const char *file, int line);
 
   static void assert_locked_or_shenandoah_safepoint(Mutex* lock, const char* file, int line);
 
+  static void assert_heaplocked(const char* file, int line);
+  static void assert_not_heaplocked(const char* file, int line);
+  static void assert_heaplocked_or_safepoint(const char* file, int line);
+
 #ifdef ASSERT
 #define shenandoah_assert_in_heap(interior_loc, obj) \
                     ShenandoahAsserts::assert_in_heap(interior_loc, obj, __FILE__, __LINE__);
 #define shenandoah_assert_in_correct_region(interior_loc, obj) \
                     ShenandoahAsserts::assert_in_correct_region(interior_loc, obj, __FILE__, __LINE__);
@@ -132,10 +136,19 @@
 #define shenandoah_assert_safepoint() \
                     assert(ShenandoahSafepoint::is_at_shenandoah_safepoint(), "Should be at Shenandoah Safepoints");
 
 #define shenandoah_assert_locked_or_safepoint(lock) \
                     ShenandoahAsserts::assert_locked_or_shenandoah_safepoint(lock, __FILE__, __LINE__);
+
+#define shenandoah_assert_heaplocked() \
+                    ShenandoahAsserts::assert_heaplocked(__FILE__, __LINE__)
+
+#define shenandoah_assert_not_heaplocked() \
+                    ShenandoahAsserts::assert_not_heaplocked(__FILE__, __LINE__)
+
+#define shenandoah_assert_heaplocked_or_safepoint() \
+                    ShenandoahAsserts::assert_heaplocked_or_safepoint(__FILE__, __LINE__)
 #else
 #define shenandoah_assert_in_heap(interior_loc, obj)
 #define shenandoah_assert_in_correct_region(interior_loc, obj)
 
 #define shenandoah_assert_correct_if(interior_loc, obj, condition)
@@ -170,10 +183,14 @@
 #define shenandoah_assert_rp_isalive_not_installed()
 
 #define shenandoah_assert_safepoint()
 #define shenandoah_assert_locked_or_safepoint(lock)
 
+#define shenandoah_assert_heaplocked()
+#define shenandoah_assert_not_heaplocked()
+#define shenandoah_assert_heaplocked_or_safepoint()
+
 #endif
 
 #define shenandoah_not_implemented \
                     { fatal("Deliberately not implemented."); }
 #define shenandoah_not_implemented_return(v) \
