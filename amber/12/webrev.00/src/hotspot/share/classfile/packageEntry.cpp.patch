diff a/src/hotspot/share/classfile/packageEntry.cpp b/src/hotspot/share/classfile/packageEntry.cpp
--- a/src/hotspot/share/classfile/packageEntry.cpp
+++ b/src/hotspot/share/classfile/packageEntry.cpp
@@ -87,11 +87,11 @@
   }
 }
 
 // Set the package's exported states based on the value of the ModuleEntry.
 void PackageEntry::set_exported(ModuleEntry* m) {
-  MutexLocker m1(Module_lock);
+  assert(Module_lock->owned_by_self(), "should have the Module_lock");
   if (is_unqual_exported()) {
     // An exception could be thrown, but choose to simply ignore.
     // Illegal to convert an unqualified exported package to be qualifiedly exported
     return;
   }
@@ -107,16 +107,12 @@
 }
 
 // Set the package as exported to all unnamed modules unless the package is
 // already unqualifiedly exported.
 void PackageEntry::set_is_exported_allUnnamed() {
-  if (module()->is_open()) {
-    // No-op for open modules since all packages are unqualifiedly exported
-    return;
-  }
-
-  MutexLocker m1(Module_lock);
+  assert(!module()->is_open(), "should have been checked already");
+  assert(Module_lock->owned_by_self(), "should have the Module_lock");
   if (!is_unqual_exported()) {
    _export_flags = PKG_EXP_ALLUNNAMED;
   }
 }
 
@@ -127,11 +123,10 @@
 void PackageEntry::purge_qualified_exports() {
   assert_locked_or_safepoint(Module_lock);
   if (_must_walk_exports &&
       _qualified_exports != NULL &&
       !_qualified_exports->is_empty()) {
-    ModuleEntry* pkg_module = module();
 
     // This package's _must_walk_exports flag will be reset based
     // on the remaining live modules on the exports list.
     _must_walk_exports = false;
 
