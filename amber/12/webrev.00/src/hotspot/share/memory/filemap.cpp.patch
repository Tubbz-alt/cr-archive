diff a/src/hotspot/share/memory/filemap.cpp b/src/hotspot/share/memory/filemap.cpp
--- a/src/hotspot/share/memory/filemap.cpp
+++ b/src/hotspot/share/memory/filemap.cpp
@@ -291,10 +291,27 @@
   size_t len = strlen(name) + 1;
   _name = MetadataFactory::new_array<char>(ClassLoaderData::the_null_class_loader_data(), (int)len, THREAD);
   strcpy(_name->data(), name);
 }
 
+void SharedClassPathEntry::copy_from(SharedClassPathEntry* ent, ClassLoaderData* loader_data, TRAPS) {
+  _type = ent->_type;
+  _timestamp = ent->_timestamp;
+  _filesize = ent->_filesize;
+  _from_class_path_attr = ent->_from_class_path_attr;
+  set_name(ent->name(), THREAD);
+
+  if (ent->is_jar() && !ent->is_signed() && ent->manifest() != NULL) {
+    Array<u1>* buf = MetadataFactory::new_array<u1>(loader_data,
+                                                    ent->manifest_size(),
+                                                    THREAD);
+    char* p = (char*)(buf->data());
+    memcpy(p, ent->manifest(), ent->manifest_size());
+    set_manifest(buf);
+  }
+}
+
 const char* SharedClassPathEntry::name() const {
   if (UseSharedSpaces && is_modules_image()) {
     // In order to validate the runtime modules image file size against the archived
     // size information, we need to obtain the runtime modules image path. The recorded
     // dump time modules image path in the archive may be different from the runtime path
@@ -379,14 +396,30 @@
   num_entries += ClassLoader::num_app_classpath_entries();
   num_entries += ClassLoader::num_module_path_entries();
   num_entries += FileMapInfo::num_non_existent_class_paths();
   size_t bytes = entry_size * num_entries;
 
-  _table = MetadataFactory::new_array<u8>(loader_data, (int)(bytes + 7 / 8), THREAD);
+  _table = MetadataFactory::new_array<u8>(loader_data, (int)bytes, THREAD);
   _size = num_entries;
 }
 
+// Make a copy of the _shared_path_table for use during dynamic CDS dump.
+// It is needed because some Java code continues to execute after dynamic dump has finished.
+// However, during dynamic dump, we have modified FileMapInfo::_shared_path_table so
+// FileMapInfo::shared_path(i) returns incorrect information in ClassLoader::record_result().
+void FileMapInfo::copy_shared_path_table(ClassLoaderData* loader_data, Thread* THREAD) {
+  size_t entry_size = sizeof(SharedClassPathEntry);
+  size_t bytes = entry_size * _shared_path_table.size();
+
+  _saved_shared_path_table = SharedPathTable(MetadataFactory::new_array<u8>(loader_data, (int)bytes, THREAD),
+                                             _shared_path_table.size());
+
+  for (int i = 0; i < _shared_path_table.size(); i++) {
+    _saved_shared_path_table.path_at(i)->copy_from(shared_path(i), loader_data, THREAD);
+  }
+}
+
 void FileMapInfo::allocate_shared_path_table() {
   Arguments::assert_is_dumping_archive();
 
   EXCEPTION_MARK; // The following calls should never throw, but would exit VM on error.
   ClassLoaderData* loader_data = ClassLoaderData::the_null_class_loader_data();
@@ -407,10 +440,12 @@
     const char* path = _non_existent_class_paths->at(x);
     shared_path(i)->init_as_non_existent(path, THREAD);
   }
 
   assert(i == _shared_path_table.size(), "number of shared path entry mismatch");
+
+  copy_shared_path_table(loader_data, THREAD);
 }
 
 int FileMapInfo::add_shared_classpaths(int i, const char* which, ClassPathEntry *cpe, TRAPS) {
   while (cpe != NULL) {
     bool is_jrt = (cpe == ClassLoader::get_jrt_entry());
@@ -935,14 +970,10 @@
   os::free(dynamic_header);
   os::close(fd);
   return true;
 }
 
-void FileMapInfo::restore_shared_path_table() {
-  _shared_path_table = _current_info->header()->shared_path_table();
-}
-
 // Read the FileMapInfo information from the file.
 
 bool FileMapInfo::init_from_file(int fd) {
   size_t sz = is_static() ? sizeof(FileMapHeader) : sizeof(DynamicArchiveHeader);
   size_t n = os::read(fd, header(), (unsigned int)sz);
@@ -1176,19 +1207,47 @@
   if (base != NULL) {
     write_bytes_aligned(base, size);
   }
 }
 
+size_t FileMapInfo::set_oopmaps_offset(GrowableArray<ArchiveHeapOopmapInfo>* oopmaps, size_t curr_size) {
+  for (int i = 0; i < oopmaps->length(); i++) {
+    oopmaps->at(i)._offset = curr_size;
+    curr_size += oopmaps->at(i)._oopmap_size_in_bytes;
+  }
+  return curr_size;
+}
+
+size_t FileMapInfo::write_oopmaps(GrowableArray<ArchiveHeapOopmapInfo>* oopmaps, size_t curr_offset, uintptr_t* buffer) {
+  for (int i = 0; i < oopmaps->length(); i++) {
+    memcpy(((char*)buffer) + curr_offset, oopmaps->at(i)._oopmap, oopmaps->at(i)._oopmap_size_in_bytes);
+    curr_offset += oopmaps->at(i)._oopmap_size_in_bytes;
+  }
+  return curr_offset;
+}
 
-void FileMapInfo::write_bitmap_region(const CHeapBitMap* ptrmap) {
+void FileMapInfo::write_bitmap_region(const CHeapBitMap* ptrmap,
+                                      GrowableArray<ArchiveHeapOopmapInfo>* closed_oopmaps,
+                                      GrowableArray<ArchiveHeapOopmapInfo>* open_oopmaps) {
   ResourceMark rm;
   size_t size_in_bits = ptrmap->size();
   size_t size_in_bytes = ptrmap->size_in_bytes();
+
+  if (closed_oopmaps != NULL && open_oopmaps != NULL) {
+    size_in_bytes = set_oopmaps_offset(closed_oopmaps, size_in_bytes);
+    size_in_bytes = set_oopmaps_offset(open_oopmaps, size_in_bytes);
+  }
+
   uintptr_t* buffer = (uintptr_t*)NEW_RESOURCE_ARRAY(char, size_in_bytes);
-  ptrmap->write_to(buffer, size_in_bytes);
+  ptrmap->write_to(buffer, ptrmap->size_in_bytes());
   header()->set_ptrmap_size_in_bits(size_in_bits);
 
+  if (closed_oopmaps != NULL && open_oopmaps != NULL) {
+    size_t curr_offset = write_oopmaps(closed_oopmaps, ptrmap->size_in_bytes(), buffer);
+    write_oopmaps(open_oopmaps, curr_offset, buffer);
+  }
+
   log_debug(cds)("ptrmap = " INTPTR_FORMAT " (" SIZE_FORMAT " bytes)",
                  p2i(buffer), size_in_bytes);
   write_region(MetaspaceShared::bm, (char*)buffer, size_in_bytes, /*read_only=*/true, /*allow_exec=*/false);
 }
 
@@ -1251,13 +1310,11 @@
 
     log_debug(cds)("Archive heap region %d: " INTPTR_FORMAT " - " INTPTR_FORMAT " = " SIZE_FORMAT_W(8) " bytes",
                    i, p2i(start), p2i(start + size), size);
     write_region(i, start, size, false, false);
     if (size > 0) {
-      address oopmap = oopmaps->at(arr_idx)._oopmap;
-      assert(oopmap >= (address)SharedBaseAddress, "must be");
-      space_at(i)->init_oopmap(oopmap - (address)SharedBaseAddress,
+      space_at(i)->init_oopmap(oopmaps->at(arr_idx)._offset,
                                oopmaps->at(arr_idx)._oopmap_size_in_bits);
     }
   }
   return total_size;
 }
@@ -1477,45 +1534,48 @@
   }
 
   return MAP_ARCHIVE_SUCCESS;
 }
 
-char* FileMapInfo::map_relocation_bitmap(size_t& bitmap_size) {
+// The return value is the location of the archive relocation bitmap.
+char* FileMapInfo::map_bitmap_region() {
   FileMapRegion* si = space_at(MetaspaceShared::bm);
-  bitmap_size = si->used_aligned();
+  if (si->mapped_base() != NULL) {
+    return si->mapped_base();
+  }
   bool read_only = true, allow_exec = false;
   char* requested_addr = NULL; // allow OS to pick any location
   char* bitmap_base = os::map_memory(_fd, _full_path, si->file_offset(),
-                                     requested_addr, bitmap_size, read_only, allow_exec);
+                                     requested_addr, si->used_aligned(), read_only, allow_exec);
   if (bitmap_base == NULL) {
     log_error(cds)("failed to map relocation bitmap");
     return NULL;
   }
 
-  if (VerifySharedSpaces && !region_crc_check(bitmap_base, bitmap_size, si->crc())) {
+  if (VerifySharedSpaces && !region_crc_check(bitmap_base, si->used_aligned(), si->crc())) {
     log_error(cds)("relocation bitmap CRC error");
-    if (!os::unmap_memory(bitmap_base, bitmap_size)) {
+    if (!os::unmap_memory(bitmap_base, si->used_aligned())) {
       fatal("os::unmap_memory of relocation bitmap failed");
     }
     return NULL;
   }
 
+  si->set_mapped_base(bitmap_base);
+  si->set_mapped_from_file(true);
   return bitmap_base;
 }
 
 bool FileMapInfo::relocate_pointers(intx addr_delta) {
   log_debug(cds, reloc)("runtime archive relocation start");
-  size_t bitmap_size;
-  char* bitmap_base = map_relocation_bitmap(bitmap_size);
+  char* bitmap_base = map_bitmap_region();
 
   if (bitmap_base == NULL) {
     return false;
   } else {
     size_t ptrmap_size_in_bits = header()->ptrmap_size_in_bits();
-    log_debug(cds, reloc)("mapped relocation bitmap @ " INTPTR_FORMAT " (" SIZE_FORMAT
-                          " bytes = " SIZE_FORMAT " bits)",
-                          p2i(bitmap_base), bitmap_size, ptrmap_size_in_bits);
+    log_debug(cds, reloc)("mapped relocation bitmap @ " INTPTR_FORMAT " (" SIZE_FORMAT " bits)",
+                          p2i(bitmap_base), ptrmap_size_in_bits);
 
     BitMapView ptrmap((BitMap::bm_word_t*)bitmap_base, ptrmap_size_in_bits);
 
     // Patch all pointers in the the mapped region that are marked by ptrmap.
     address patch_base = (address)mapped_base();
@@ -1534,13 +1594,12 @@
 
     SharedDataRelocator<false> patcher((address*)patch_base, (address*)patch_end, valid_old_base, valid_old_end,
                                        valid_new_base, valid_new_end, addr_delta);
     ptrmap.iterate(&patcher);
 
-    if (!os::unmap_memory(bitmap_base, bitmap_size)) {
-      fatal("os::unmap_memory of relocation bitmap failed");
-    }
+    // The MetaspaceShared::bm region will be unmapped in MetaspaceShared::initialize_shared_spaces().
+
     log_debug(cds, reloc)("runtime archive relocation done");
     return true;
   }
 }
 
@@ -1749,14 +1808,15 @@
                                 int max, int* num, bool is_open_archive) {
   MemRegion* regions = MemRegion::create_array(max, mtInternal);
 
   struct Cleanup {
     MemRegion* _regions;
+    uint _length;
     bool _aborted;
-    Cleanup(MemRegion* regions) : _regions(regions), _aborted(true) { }
-    ~Cleanup() { if (_aborted) { FREE_C_HEAP_ARRAY(MemRegion, _regions); } }
-  } cleanup(regions);
+    Cleanup(MemRegion* regions, uint length) : _regions(regions), _length(length), _aborted(true) { }
+    ~Cleanup() { if (_aborted) { MemRegion::destroy_array(_regions, _length); } }
+  } cleanup(regions, max);
 
   FileMapRegion* si;
   int region_num = 0;
 
   for (int i = first;
@@ -1836,14 +1896,20 @@
                                         MetaspaceShared::first_open_archive_heap_region);
 }
 
 void FileMapInfo::patch_archived_heap_embedded_pointers(MemRegion* ranges, int num_ranges,
                                                         int first_region_idx) {
+  char* bitmap_base = map_bitmap_region();
+  if (bitmap_base == NULL) {
+    return;
+  }
   for (int i=0; i<num_ranges; i++) {
     FileMapRegion* si = space_at(i + first_region_idx);
-    HeapShared::patch_archived_heap_embedded_pointers(ranges[i], (address)(SharedBaseAddress + si->oopmap_offset()),
-                                                      si->oopmap_size_in_bits());
+    HeapShared::patch_archived_heap_embedded_pointers(
+      ranges[i],
+      (address)(space_at(MetaspaceShared::bm)->mapped_base()) + si->oopmap_offset(),
+      si->oopmap_size_in_bits());
   }
 }
 
 // This internally allocates objects using SystemDictionary::Object_klass(), so it
 // must be called after the well-known classes are resolved.
@@ -1924,18 +1990,23 @@
   if (!check) {
     fail_stop("Mark mismatch while restoring from shared file.");
   }
 }
 
-void FileMapInfo::metaspace_pointers_do(MetaspaceClosure* it) {
-  _shared_path_table.metaspace_pointers_do(it);
+void FileMapInfo::metaspace_pointers_do(MetaspaceClosure* it, bool use_copy) {
+  if (use_copy) {
+    _saved_shared_path_table.metaspace_pointers_do(it);
+  } else {
+    _shared_path_table.metaspace_pointers_do(it);
+  }
 }
 
 FileMapInfo* FileMapInfo::_current_info = NULL;
 FileMapInfo* FileMapInfo::_dynamic_archive_info = NULL;
 bool FileMapInfo::_heap_pointers_need_patching = false;
 SharedPathTable FileMapInfo::_shared_path_table;
+SharedPathTable FileMapInfo::_saved_shared_path_table;
 bool FileMapInfo::_validating_shared_path_table = false;
 bool FileMapInfo::_memory_mapping_failed = false;
 GrowableArray<const char*>* FileMapInfo::_non_existent_class_paths = NULL;
 
 // Open the shared archive file, read and validate the header
