diff a/src/hotspot/share/runtime/perfData.hpp b/src/hotspot/share/runtime/perfData.hpp
--- a/src/hotspot/share/runtime/perfData.hpp
+++ b/src/hotspot/share/runtime/perfData.hpp
@@ -426,11 +426,10 @@
   public:
     inline void inc() { (*(jlong*)_valuep)++; }
     inline void inc(jlong val) { (*(jlong*)_valuep) += val; }
     inline void dec(jlong val) { inc(-val); }
     inline void add(jlong val) { (*(jlong*)_valuep) += val; }
-    void clear_sample_helper() { _sample_helper = NULL; }
 };
 
 /*
  * The PerfLongCounter class, and its alias PerfCounter, implement
  * a PerfData subtype that holds a jlong data value that can (should)
@@ -682,26 +681,21 @@
     static inline int count();
 
     // return the list of all known PerfData items that are to be
     // sampled by the StatSampler.
     static PerfDataList* sampled();
-    static inline int sampled_count();
 
     // return the list of all known PerfData items that have a
     // variability classification of type Constant
     static PerfDataList* constants();
-    static inline int constants_count();
 
   public:
 
     // method to check for the existence of a PerfData item with
     // the given name.
     static inline bool exists(const char* name);
 
-    // method to search for a instrumentation object by name
-    static PerfData* find_by_name(const char* name);
-
     // method to map a CounterNS enumeration to a namespace string
     static const char* ns_to_string(CounterNS ns) {
       return _name_spaces[ns];
     }
 
@@ -711,13 +705,10 @@
       return (ns != NULL_NS) && ((ns % 3) == JAVA_NS);
     }
     static bool is_unstable_supported(CounterNS ns) {
       return (ns != NULL_NS) && ((ns % 3) == COM_NS);
     }
-    static bool is_unstable_unsupported(CounterNS ns) {
-      return (ns == NULL_NS) || ((ns % 3) == SUN_NS);
-    }
 
     // methods to test the interface stability of a given counter name
     //
     static bool is_stable_supported(const char* name) {
       const char* javadot = "java.";
@@ -725,13 +716,10 @@
     }
     static bool is_unstable_supported(const char* name) {
       const char* comdot = "com.sun.";
       return strncmp(name, comdot, strlen(comdot)) == 0;
     }
-    static bool is_unstable_unsupported(const char* name) {
-      return !(is_stable_supported(name) && is_unstable_supported(name));
-    }
 
     // method to construct counter name strings in a given name space.
     // The string object is allocated from the Resource Area and calls
     // to this method must be made within a ResourceMark.
     //
@@ -911,25 +899,17 @@
 class PerfTraceTime : public StackObj {
 
   protected:
     elapsedTimer _t;
     PerfLongCounter* _timerp;
-    // pointer to thread-local or global recursion counter variable
-    int* _recursion_counter;
 
   public:
-    inline PerfTraceTime(PerfLongCounter* timerp) : _timerp(timerp), _recursion_counter(NULL) {
+    inline PerfTraceTime(PerfLongCounter* timerp) : _timerp(timerp) {
       if (!UsePerfData) return;
       _t.start();
     }
 
-    inline PerfTraceTime(PerfLongCounter* timerp, int* recursion_counter) : _timerp(timerp), _recursion_counter(recursion_counter) {
-      if (!UsePerfData || (_recursion_counter != NULL &&
-                           (*_recursion_counter)++ > 0)) return;
-      _t.start();
-    }
-
     inline void suspend() { if (!UsePerfData) return; _t.stop(); }
     inline void resume() { if (!UsePerfData) return; _t.start(); }
 
     ~PerfTraceTime();
 };
@@ -962,12 +942,8 @@
     inline PerfTraceTimedEvent(PerfLongCounter* timerp, PerfLongCounter* eventp): PerfTraceTime(timerp), _eventp(eventp) {
       if (!UsePerfData) return;
       _eventp->inc();
     }
 
-    inline PerfTraceTimedEvent(PerfLongCounter* timerp, PerfLongCounter* eventp, int* recursion_counter): PerfTraceTime(timerp, recursion_counter), _eventp(eventp) {
-      if (!UsePerfData) return;
-      _eventp->inc();
-    }
 };
 
 #endif // SHARE_RUNTIME_PERFDATA_HPP
