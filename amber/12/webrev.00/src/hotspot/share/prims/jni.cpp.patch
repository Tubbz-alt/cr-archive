diff a/src/hotspot/share/prims/jni.cpp b/src/hotspot/share/prims/jni.cpp
--- a/src/hotspot/share/prims/jni.cpp
+++ b/src/hotspot/share/prims/jni.cpp
@@ -30,10 +30,11 @@
 #include "classfile/altHashing.hpp"
 #include "classfile/classFileStream.hpp"
 #include "classfile/classLoader.hpp"
 #include "classfile/javaClasses.hpp"
 #include "classfile/javaClasses.inline.hpp"
+#include "classfile/moduleEntry.hpp"
 #include "classfile/modules.hpp"
 #include "classfile/symbolTable.hpp"
 #include "classfile/systemDictionary.hpp"
 #include "classfile/vmSymbols.hpp"
 #include "gc/shared/gcLocker.inline.hpp"
@@ -395,17 +396,17 @@
   Handle loader(THREAD, SystemDictionary::java_system_loader());
   if (k != NULL) {
     // Special handling to make sure JNI_OnLoad and JNI_OnUnload are executed
     // in the correct class context.
     if (k->class_loader() == NULL &&
-        k->name() == vmSymbols::java_lang_ClassLoader_NativeLibrary()) {
+        k->name() == vmSymbols::jdk_internal_loader_NativeLibraries()) {
       JavaValue result(T_OBJECT);
       JavaCalls::call_static(&result, k,
                              vmSymbols::getFromClass_name(),
                              vmSymbols::void_class_signature(),
                              CHECK_NULL);
-      // When invoked from JNI_OnLoad, NativeLibrary::getFromClass returns
+      // When invoked from JNI_OnLoad, NativeLibraries::getFromClass returns
       // a non-NULL Class object.  When invoked from JNI_OnUnload,
       // it will return NULL to indicate no context.
       oop mirror = (oop) result.get_jobject();
       if (mirror != NULL) {
         Klass* fromClass = java_lang_Class::as_Klass(mirror);
@@ -2809,21 +2810,30 @@
   jint ret = 0;
   DT_RETURN_MARK(RegisterNatives, jint, (const jint&)ret);
 
   Klass* k = java_lang_Class::as_Klass(JNIHandles::resolve_non_null(clazz));
 
-  // There are no restrictions on native code registering native methods, which
-  // allows agents to redefine the bindings to native methods. But we issue a
-  // warning if any code running outside of the boot/platform loader is rebinding
-  // any native methods in classes loaded by the boot/platform loader.
-  Klass* caller = thread->security_get_caller_class(1);
+  // There are no restrictions on native code registering native methods,
+  // which allows agents to redefine the bindings to native methods, however
+  // we issue a warning if any code running outside of the boot/platform
+  // loader is rebinding any native methods in classes loaded by the
+  // boot/platform loader that are in named modules. That will catch changes
+  // to platform classes while excluding classes added to the bootclasspath.
   bool do_warning = false;
-  oop cl = k->class_loader();
-  if (cl ==  NULL || SystemDictionary::is_platform_class_loader(cl)) {
-    // If no caller class, or caller class has a different loader, then
-    // issue a warning below.
-    do_warning = (caller == NULL) || caller->class_loader() != cl;
+
+  // Only instanceKlasses can have native methods
+  if (k->is_instance_klass()) {
+    oop cl = k->class_loader();
+    InstanceKlass* ik = InstanceKlass::cast(k);
+    // Check for a platform class
+    if ((cl ==  NULL || SystemDictionary::is_platform_class_loader(cl)) &&
+        ik->module()->is_named()) {
+      Klass* caller = thread->security_get_caller_class(1);
+      // If no caller class, or caller class has a different loader, then
+      // issue a warning below.
+      do_warning = (caller == NULL) || caller->class_loader() != cl;
+    }
   }
 
 
   for (int index = 0; index < nMethods; index++) {
     const char* meth_name = methods[index].name;
