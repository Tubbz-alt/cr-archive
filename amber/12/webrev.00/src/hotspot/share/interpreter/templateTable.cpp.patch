diff a/src/hotspot/share/interpreter/templateTable.cpp b/src/hotspot/share/interpreter/templateTable.cpp
--- a/src/hotspot/share/interpreter/templateTable.cpp
+++ b/src/hotspot/share/interpreter/templateTable.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -24,11 +24,10 @@
 
 #include "precompiled.hpp"
 #include "gc/shared/barrierSet.hpp"
 #include "interpreter/interp_masm.hpp"
 #include "interpreter/templateTable.hpp"
-#include "runtime/timerTrace.hpp"
 
 #ifdef CC_INTERP
 
 void templateTable_init() {
 }
@@ -166,30 +165,25 @@
 
 
 //----------------------------------------------------------------------------------------------------
 // Implementation of TemplateTable: Initialization
 
-bool                       TemplateTable::_is_initialized = false;
 Template                   TemplateTable::_template_table     [Bytecodes::number_of_codes];
 Template                   TemplateTable::_template_table_wide[Bytecodes::number_of_codes];
 
 Template*                  TemplateTable::_desc;
 InterpreterMacroAssembler* TemplateTable::_masm;
-BarrierSet*                TemplateTable::_bs;
 
 
 void TemplateTable::def(Bytecodes::Code code, int flags, TosState in, TosState out, void (*gen)(), char filler) {
   assert(filler == ' ', "just checkin'");
   def(code, flags, in, out, (Template::generator)gen, 0);
 }
 
 
 void TemplateTable::def(Bytecodes::Code code, int flags, TosState in, TosState out, void (*gen)(int arg), int arg) {
   // should factor out these constants
-  const int ubcp = 1 << Template::uses_bcp_bit;
-  const int disp = 1 << Template::does_dispatch_bit;
-  const int clvm = 1 << Template::calls_vm_bit;
   const int iswd = 1 << Template::wide_bit;
   // determine which table to use
   bool is_wide = (flags & iswd) != 0;
   // make sure that wide instructions have a vtos entry point
   // (since they are executed extremely rarely, it doesn't pay out to have an
@@ -221,16 +215,15 @@
 void TemplateTable::def(Bytecodes::Code code, int flags, TosState in, TosState out, void (*gen)(Condition cc), Condition cc) {
   def(code, flags, in, out, (Template::generator)gen, (int)cc);
 }
 
 void TemplateTable::initialize() {
-  if (_is_initialized) return;
-
-  // Initialize table
-  TraceTime timer("TemplateTable initialization", TRACETIME_LOG(Info, startuptime));
-
-  _bs = BarrierSet::barrier_set();
+#ifdef ASSERT
+  static bool is_initialized = false;
+  assert(!is_initialized, "must only initialize once");
+  is_initialized = true;
+#endif
 
   // For better readability
   const char _    = ' ';
   const int  ____ = 0;
   const int  ubcp = 1 << Template::uses_bcp_bit;
@@ -505,18 +498,11 @@
   def(Bytecodes::_nofast_iload        , ubcp|____|clvm|____, vtos, itos, nofast_iload        ,  _           );
 
   def(Bytecodes::_shouldnotreachhere   , ____|____|____|____, vtos, vtos, shouldnotreachhere ,  _           );
   // platform specific bytecodes
   pd_initialize();
-
-  _is_initialized = true;
 }
 
-void templateTable_init() {
-  TemplateTable::initialize();
-}
-
-
 void TemplateTable::unimplemented_bc() {
   _masm->unimplemented( Bytecodes::name(_desc->bytecode()));
 }
 #endif /* !CC_INTERP */
