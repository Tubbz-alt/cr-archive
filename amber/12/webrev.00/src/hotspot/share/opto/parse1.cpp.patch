diff a/src/hotspot/share/opto/parse1.cpp b/src/hotspot/share/opto/parse1.cpp
--- a/src/hotspot/share/opto/parse1.cpp
+++ b/src/hotspot/share/opto/parse1.cpp
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -670,11 +670,11 @@
           // Predicates may have been added after a dominating if
           if (!block->has_predicates()) {
             // Need correct bci for predicate.
             // It is fine to set it here since do_one_block() will set it anyway.
             set_parse_bci(block->start());
-            add_predicate();
+            add_empty_predicates();
           }
           // Add new region for back branches.
           int edges = block->pred_count() - block->preds_parsed() + 1; // +1 for original region
           RegionNode *r = new RegionNode(edges+1);
           _gvn.set_type(r, Type::CONTROL);
@@ -1652,11 +1652,11 @@
       if (target->is_SEL_head()) {
         DEBUG_ONLY( target->mark_merged_backedge(block()); )
         if (target->start() == 0) {
           // Add loop predicate for the special case when
           // there are backbranches to the method entry.
-          add_predicate();
+          add_empty_predicates();
         }
       }
       // Add a Region to start the new basic block.  Phis will be added
       // later lazily.
       int edges = target->pred_count();
@@ -2251,12 +2251,11 @@
 //------------------------------add_safepoint----------------------------------
 void Parse::add_safepoint() {
   // See if we can avoid this safepoint.  No need for a SafePoint immediately
   // after a Call (except Leaf Call) or another SafePoint.
   Node *proj = control();
-  bool add_poll_param = SafePointNode::needs_polling_address_input();
-  uint parms = add_poll_param ? TypeFunc::Parms+1 : TypeFunc::Parms;
+  uint parms = TypeFunc::Parms+1;
   if( proj->is_Proj() ) {
     Node *n0 = proj->in(0);
     if( n0->is_Catch() ) {
       n0 = n0->in(0)->in(0);
       assert( n0->is_Call(), "expect a call here" );
@@ -2299,21 +2298,15 @@
   sfpnt->init_req(TypeFunc::Memory   , mem   );
   sfpnt->init_req(TypeFunc::ReturnAdr, top() );
   sfpnt->init_req(TypeFunc::FramePtr , top() );
 
   // Create a node for the polling address
-  if( add_poll_param ) {
-    Node *polladr;
-    if (SafepointMechanism::uses_thread_local_poll()) {
-      Node *thread = _gvn.transform(new ThreadLocalNode());
-      Node *polling_page_load_addr = _gvn.transform(basic_plus_adr(top(), thread, in_bytes(Thread::polling_page_offset())));
-      polladr = make_load(control(), polling_page_load_addr, TypeRawPtr::BOTTOM, T_ADDRESS, Compile::AliasIdxRaw, MemNode::unordered);
-    } else {
-      polladr = ConPNode::make((address)os::get_polling_page());
-    }
-    sfpnt->init_req(TypeFunc::Parms+0, _gvn.transform(polladr));
-  }
+  Node *polladr;
+  Node *thread = _gvn.transform(new ThreadLocalNode());
+  Node *polling_page_load_addr = _gvn.transform(basic_plus_adr(top(), thread, in_bytes(Thread::polling_page_offset())));
+  polladr = make_load(control(), polling_page_load_addr, TypeRawPtr::BOTTOM, T_ADDRESS, Compile::AliasIdxRaw, MemNode::unordered);
+  sfpnt->init_req(TypeFunc::Parms+0, _gvn.transform(polladr));
 
   // Fix up the JVM State edges
   add_safepoint_edges(sfpnt);
   Node *transformed_sfpnt = _gvn.transform(sfpnt);
   set_control(transformed_sfpnt);
