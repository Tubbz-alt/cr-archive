diff a/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacAppStoreBundler.java b/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacAppStoreBundler.java
--- a/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacAppStoreBundler.java
+++ b/src/jdk.incubator.jpackage/macosx/classes/jdk/incubator/jpackage/internal/MacAppStoreBundler.java
@@ -38,14 +38,10 @@
 
     private static final ResourceBundle I18N = ResourceBundle.getBundle(
             "jdk.incubator.jpackage.internal.resources.MacResources");
 
     private static final String TEMPLATE_BUNDLE_ICON_HIDPI = "java.icns";
-    private final static String DEFAULT_ENTITLEMENTS =
-            "MacAppStore.entitlements";
-    private final static String DEFAULT_INHERIT_ENTITLEMENTS =
-            "MacAppStore_Inherit.entitlements";
 
     public static final BundlerParamInfo<String> MAC_APP_STORE_APP_SIGNING_KEY =
             new StandardBundlerParam<>(
             "mac.signing-key-app",
             String.class,
@@ -92,17 +88,10 @@
 
                 return result;
             },
             (s, p) -> s);
 
-    public static final StandardBundlerParam<File> MAC_APP_STORE_ENTITLEMENTS  =
-            new StandardBundlerParam<>(
-            Arguments.CLIOptions.MAC_APP_STORE_ENTITLEMENTS.getId(),
-            File.class,
-            params -> null,
-            (s, p) -> new File(s));
-
     public static final BundlerParamInfo<String> INSTALLER_SUFFIX =
             new StandardBundlerParam<> (
             "mac.app-store.installerName.suffix",
             String.class,
             params -> "-MacAppStore",
@@ -131,24 +120,19 @@
             }
             // first, make sure we don't use the local signing key
             params.put(DEVELOPER_ID_APP_SIGNING_KEY.getID(), null);
             File appLocation = prepareAppBundle(params);
 
-            prepareEntitlements(params);
-
             String signingIdentity =
                     MAC_APP_STORE_APP_SIGNING_KEY.fetchFrom(params);
             String identifierPrefix =
                     BUNDLE_ID_SIGNING_PREFIX.fetchFrom(params);
-            String entitlementsFile =
-                    getConfig_Entitlements(params).toString();
-            String inheritEntitlements =
-                    getConfig_Inherit_Entitlements(params).toString();
+            MacAppImageBuilder.prepareEntitlements(params);
 
             MacAppImageBuilder.signAppBundle(params, appLocation.toPath(),
                     signingIdentity, identifierPrefix,
-                    entitlementsFile, inheritEntitlements);
+                    MacAppImageBuilder.getConfig_Entitlements(params));
             MacAppImageBuilder.restoreKeychainList(params);
 
             ProcessBuilder pb;
 
             // create the final pkg file
@@ -186,35 +170,10 @@
             Log.verbose(ex);
             throw new PackagerException(ex);
         }
     }
 
-    private File getConfig_Entitlements(Map<String, ? super Object> params) {
-        return new File(CONFIG_ROOT.fetchFrom(params),
-                APP_NAME.fetchFrom(params) + ".entitlements");
-    }
-
-    private File getConfig_Inherit_Entitlements(
-            Map<String, ? super Object> params) {
-        return new File(CONFIG_ROOT.fetchFrom(params),
-                APP_NAME.fetchFrom(params) + "_Inherit.entitlements");
-    }
-
-    private void prepareEntitlements(Map<String, ? super Object> params)
-            throws IOException {
-        createResource(DEFAULT_ENTITLEMENTS, params)
-                .setCategory(
-                        I18N.getString("resource.mac-app-store-entitlements"))
-                .setExternal(MAC_APP_STORE_ENTITLEMENTS.fetchFrom(params))
-                .saveToFile(getConfig_Entitlements(params));
-
-        createResource(DEFAULT_INHERIT_ENTITLEMENTS, params)
-                .setCategory(I18N.getString(
-                        "resource.mac-app-store-inherit-entitlements"))
-                .saveToFile(getConfig_Entitlements(params));
-    }
-
     ///////////////////////////////////////////////////////////////////////
     // Implement Bundler
     ///////////////////////////////////////////////////////////////////////
 
     @Override
