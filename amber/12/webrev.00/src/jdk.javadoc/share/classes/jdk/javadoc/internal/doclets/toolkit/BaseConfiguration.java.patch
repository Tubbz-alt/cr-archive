diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/BaseConfiguration.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/BaseConfiguration.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/BaseConfiguration.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/BaseConfiguration.java
@@ -45,10 +45,11 @@
 import jdk.javadoc.doclet.StandardDoclet;
 import jdk.javadoc.doclet.Taglet;
 import jdk.javadoc.internal.doclets.formats.html.HtmlDoclet;
 import jdk.javadoc.internal.doclets.toolkit.builders.BuilderFactory;
 import jdk.javadoc.internal.doclets.toolkit.taglets.TagletManager;
+import jdk.javadoc.internal.doclets.toolkit.util.Comparators;
 import jdk.javadoc.internal.doclets.toolkit.util.DocFile;
 import jdk.javadoc.internal.doclets.toolkit.util.DocFileFactory;
 import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;
 import jdk.javadoc.internal.doclets.toolkit.util.Extern;
 import jdk.javadoc.internal.doclets.toolkit.util.Group;
@@ -306,29 +307,30 @@
     public Set<TypeElement> getIncludedTypeElements() {
         return includedTypeElements;
     }
 
     private void initModules() {
+        Comparators comparators = utils.comparators;
         // Build the modules structure used by the doclet
-        modules = new TreeSet<>(utils.makeModuleComparator());
+        modules = new TreeSet<>(comparators.makeModuleComparator());
         modules.addAll(getSpecifiedModuleElements());
 
-        modulePackages = new TreeMap<>(utils.makeModuleComparator());
+        modulePackages = new TreeMap<>(comparators.makeModuleComparator());
         for (PackageElement p : packages) {
             ModuleElement mdle = docEnv.getElementUtils().getModuleOf(p);
             if (mdle != null && !mdle.isUnnamed()) {
                 Set<PackageElement> s = modulePackages
-                        .computeIfAbsent(mdle, m -> new TreeSet<>(utils.makePackageComparator()));
+                        .computeIfAbsent(mdle, m -> new TreeSet<>(comparators.makePackageComparator()));
                 s.add(p);
             }
         }
 
         for (PackageElement p : getIncludedPackageElements()) {
             ModuleElement mdle = docEnv.getElementUtils().getModuleOf(p);
             if (mdle != null && !mdle.isUnnamed()) {
                 Set<PackageElement> s = modulePackages
-                        .computeIfAbsent(mdle, m -> new TreeSet<>(utils.makePackageComparator()));
+                        .computeIfAbsent(mdle, m -> new TreeSet<>(comparators.makePackageComparator()));
                 s.add(p);
             }
         }
 
         // add entries for modules which may not have exported packages
@@ -340,11 +342,11 @@
             packages.addAll(pkgs);
         }
     }
 
     private void initPackages() {
-        packages = new TreeSet<>(utils.makePackageComparator());
+        packages = new TreeSet<>(utils.comparators.makePackageComparator());
         // add all the included packages
         packages.addAll(includedPackageElements);
     }
 
     /*
