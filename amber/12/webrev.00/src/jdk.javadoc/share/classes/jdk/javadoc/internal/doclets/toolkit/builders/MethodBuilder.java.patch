diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MethodBuilder.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MethodBuilder.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MethodBuilder.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MethodBuilder.java
@@ -76,11 +76,11 @@
      */
     private MethodBuilder(Context context,
             TypeElement typeElement,
             MethodWriter writer) {
         super(context, typeElement);
-        this.writer = writer;
+        this.writer = Objects.requireNonNull(writer);
         methods = getVisibleMembers(METHODS);
     }
 
     /**
      * Construct a new MethodBuilder.
@@ -107,33 +107,31 @@
     }
 
     /**
      * Build the method documentation.
      *
-     * @param memberDetailsTree the content tree to which the documentation will be added
+     * @param detailsList the content tree to which the documentation will be added
      * @throws DocletException if there is a problem while building the documentation
      */
-    protected void buildMethodDoc(Content memberDetailsTree) throws DocletException {
-        if (writer == null) {
-            return;
-        }
+    protected void buildMethodDoc(Content detailsList) throws DocletException {
         if (hasMembersToDocument()) {
-            Content methodDetailsTreeHeader = writer.getMethodDetailsTreeHeader(memberDetailsTree);
-            Content methodDetailsTree = writer.getMemberTreeHeader();
+            Content methodDetailsTreeHeader = writer.getMethodDetailsTreeHeader(detailsList);
+            Content memberList = writer.getMemberList();
 
             for (Element method : methods) {
                 currentMethod = (ExecutableElement)method;
                 Content methodDocTree = writer.getMethodDocTreeHeader(currentMethod);
 
                 buildSignature(methodDocTree);
                 buildDeprecationInfo(methodDocTree);
                 buildMethodComments(methodDocTree);
                 buildTagInfo(methodDocTree);
 
-                methodDetailsTree.add(writer.getMethodDoc(methodDocTree));
+                memberList.add(writer.getMemberListItem(methodDocTree));
             }
-            memberDetailsTree.add(writer.getMethodDetails(methodDetailsTreeHeader, methodDetailsTree));
+            Content methodDetails = writer.getMethodDetails(methodDetailsTreeHeader, memberList);
+            detailsList.add(methodDetails);
         }
     }
 
     /**
      * Build the signature.
@@ -153,11 +151,11 @@
         writer.addDeprecated(currentMethod, methodDocTree);
     }
 
     /**
      * Build the comments for the method.  Do nothing if
-     * {@link BaseOptions#noComment} is set to true.
+     * {@link BaseOptions#noComment()} is set to true.
      *
      * @param methodDocTree the content tree to which the documentation will be added
      */
     protected void buildMethodComments(Content methodDocTree) {
         if (!options.noComment()) {
