diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/PropertyBuilder.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/PropertyBuilder.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/PropertyBuilder.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/PropertyBuilder.java
@@ -73,11 +73,11 @@
      */
     private PropertyBuilder(Context context,
             TypeElement typeElement,
             PropertyWriter writer) {
         super(context, typeElement);
-        this.writer = writer;
+        this.writer = Objects.requireNonNull(writer);
         properties = getVisibleMembers(PROPERTIES);
     }
 
     /**
      * Construct a new PropertyBuilder.
@@ -109,33 +109,30 @@
     }
 
     /**
      * Build the property documentation.
      *
-     * @param memberDetailsTree the content tree to which the documentation will be added
+     * @param detailsList the content tree to which the documentation will be added
      * @throws DocletException if there is a problem while building the documentation
      */
-    protected void buildPropertyDoc(Content memberDetailsTree) throws DocletException {
-        if (writer == null) {
-            return;
-        }
+    protected void buildPropertyDoc(Content detailsList) throws DocletException {
         if (hasMembersToDocument()) {
-            Content propertyDetailsTreeHeader = writer.getPropertyDetailsTreeHeader(memberDetailsTree);
-            Content propertyDetailsTree = writer.getMemberTreeHeader();
+            Content propertyDetailsTreeHeader = writer.getPropertyDetailsTreeHeader(detailsList);
+            Content memberList = writer.getMemberList();
 
             for (Element property : properties) {
                 currentProperty = (ExecutableElement)property;
                 Content propertyDocTree = writer.getPropertyDocTreeHeader(currentProperty);
 
                 buildSignature(propertyDocTree);
                 buildPropertyComments(propertyDocTree);
                 buildTagInfo(propertyDocTree);
 
-                propertyDetailsTree.add(writer.getPropertyDoc(propertyDocTree));
+                memberList.add(writer.getMemberListItem(propertyDocTree));
             }
-            memberDetailsTree.add(
-                    writer.getPropertyDetails(propertyDetailsTreeHeader, propertyDetailsTree));
+            Content propertyDetails = writer.getPropertyDetails(propertyDetailsTreeHeader, memberList);
+            detailsList.add(propertyDetails);
         }
     }
 
     /**
      * Build the signature.
@@ -155,11 +152,11 @@
         writer.addDeprecated(currentProperty, propertyDocTree);
     }
 
     /**
      * Build the comments for the property.  Do nothing if
-     * {@link BaseOptions#noComment} is set to true.
+     * {@link BaseOptions#noComment()} is set to true.
      *
      * @param propertyDocTree the content tree to which the documentation will be added
      */
     protected void buildPropertyComments(Content propertyDocTree) {
         if (!options.noComment()) {
