diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/BodyContents.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/BodyContents.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/BodyContents.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/markup/BodyContents.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2019, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -25,22 +25,28 @@
 
 package jdk.javadoc.internal.doclets.formats.html.markup;
 
 import jdk.javadoc.internal.doclets.toolkit.Content;
 
+import java.io.IOException;
+import java.io.Writer;
 import java.util.ArrayList;
 import java.util.List;
 
 /**
- * A builder for the contents of the BODY element.
+ * Content for the {@code <body>} element.
+ *
+ * The content is a {@code <div>} element that contains a
+ * header that is always visible, and main content that
+ * can be scrolled if necessary.
  *
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
  */
-public class BodyContents {
+public class BodyContents extends Content {
 
     private List<Content> mainContents = new ArrayList<>();
     private Content header = HtmlTree.EMPTY;
     private Content footer = HtmlTree.EMPTY;
 
@@ -57,22 +63,41 @@
     public BodyContents setFooter(Content footer) {
         this.footer = footer;
         return this;
     }
 
+    /**
+     * {@inheritDoc}
+     *
+     * @implSpec This implementation always returns {@code false}.
+     *
+     * @return {@code false}
+     */
+    @Override
+    public boolean isEmpty() {
+        return false;
+    }
+
+    @Override
+    public boolean write(Writer out, boolean atNewline) throws IOException {
+        return toContent().write(out, atNewline);
+    }
+
     /**
      * Returns the HTML for the contents of the BODY element.
      *
      * @return the HTML
      */
-    public Content toContent() {
-        HtmlTree mainTree = HtmlTree.MAIN();
-        mainContents.forEach(mainTree::add);
-        HtmlTree flexHeader = HtmlTree.HEADER().setStyle(HtmlStyle.flexHeader);
-        flexHeader.add(header);
-        HtmlTree flexBox = HtmlTree.DIV(HtmlStyle.flexBox, flexHeader);
-        HtmlTree flexContent = HtmlTree.DIV(HtmlStyle.flexContent, mainTree);
-        flexContent.add(footer);
-        flexBox.add(flexContent);
-        return flexBox;
+    private Content toContent() {
+        HtmlTree flexHeader = HtmlTree.HEADER()
+                .setStyle(HtmlStyle.flexHeader)
+                .add(header);
+
+        HtmlTree flexContent = HtmlTree.DIV(HtmlStyle.flexContent)
+                .add(HtmlTree.MAIN().add(mainContents))
+                .add(footer);
+
+        return HtmlTree.DIV(HtmlStyle.flexBox)
+                .add(flexHeader)
+                .add(flexContent);
     }
 }
