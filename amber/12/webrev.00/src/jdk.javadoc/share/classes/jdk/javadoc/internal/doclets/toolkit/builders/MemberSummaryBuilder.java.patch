diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MemberSummaryBuilder.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MemberSummaryBuilder.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MemberSummaryBuilder.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/MemberSummaryBuilder.java
@@ -37,11 +37,10 @@
 
 import com.sun.source.doctree.DocCommentTree;
 import com.sun.source.doctree.DocTree;
 import com.sun.source.doctree.DocTree.Kind;
 import com.sun.source.doctree.UnknownBlockTagTree;
-import jdk.javadoc.internal.doclets.toolkit.AnnotationTypeWriter;
 import jdk.javadoc.internal.doclets.toolkit.ClassWriter;
 import jdk.javadoc.internal.doclets.toolkit.Content;
 import jdk.javadoc.internal.doclets.toolkit.MemberSummaryWriter;
 import jdk.javadoc.internal.doclets.toolkit.WriterFactory;
 import jdk.javadoc.internal.doclets.toolkit.util.CommentHelper;
@@ -83,11 +82,11 @@
      * @param typeElement   the type element.
      */
     private MemberSummaryBuilder(Context context, TypeElement typeElement) {
         super(context, typeElement);
         memberSummaryWriters = new EnumMap<>(VisibleMemberTable.Kind.class);
-        comparator = utils.makeIndexUseComparator();
+        comparator = utils.comparators.makeIndexElementComparator();
         pHelper = new PropertyHelper(this);
     }
 
     /**
      * Construct a new MemberSummaryBuilder for a general type.
@@ -103,10 +102,12 @@
             @Override
             public void build(Content contentTree) {
                 buildPropertiesSummary(contentTree);
                 buildNestedClassesSummary(contentTree);
                 buildEnumConstantsSummary(contentTree);
+                buildAnnotationTypeRequiredMemberSummary(contentTree);
+                buildAnnotationTypeOptionalMemberSummary(contentTree);
                 buildFieldsSummary(contentTree);
                 buildConstructorsSummary(contentTree);
                 buildMethodsSummary(contentTree);
             }
 
@@ -123,44 +124,10 @@
             builder.memberSummaryWriters.put(kind, msw);
         }
         return builder;
     }
 
-    /**
-     * Construct a new MemberSummaryBuilder for an annotation type.
-     *
-     * @param annotationTypeWriter the writer for the class whose members are
-     *                             being summarized.
-     * @param context       the build context.
-     * @return              the instance
-     */
-    public static MemberSummaryBuilder getInstance(
-            AnnotationTypeWriter annotationTypeWriter, Context context) {
-        MemberSummaryBuilder builder = new MemberSummaryBuilder(context,
-                annotationTypeWriter.getAnnotationTypeElement()) {
-            @Override
-            public void build(Content contentTree) {
-                buildAnnotationTypeFieldsSummary(contentTree);
-                buildAnnotationTypeRequiredMemberSummary(contentTree);
-                buildAnnotationTypeOptionalMemberSummary(contentTree);
-            }
-
-            @Override
-            public boolean hasMembersToDocument() {
-                return !utils.getAnnotationMembers(typeElement).isEmpty();
-            }
-        };
-        WriterFactory wf = context.configuration.getWriterFactory();
-        for (VisibleMemberTable.Kind kind : VisibleMemberTable.Kind.values()) {
-            MemberSummaryWriter msw = builder.getVisibleMemberTable().hasVisibleMembers(kind)
-                    ? wf.getMemberSummaryWriter(annotationTypeWriter, kind)
-                    : null;
-            builder.memberSummaryWriters.put(kind, msw);
-        }
-        return builder;
-    }
-
     /**
      * Return the specified visible member map.
      *
      * @return the specified visible member map.
      * @throws ArrayIndexOutOfBoundsException when the type is invalid.
@@ -220,12 +187,12 @@
      * Build the summary for fields.
      *
      * @param memberSummaryTree the content tree to which the documentation will be added
      */
     protected void buildAnnotationTypeFieldsSummary(Content memberSummaryTree) {
-        MemberSummaryWriter writer = memberSummaryWriters.get(ANNOTATION_TYPE_FIELDS);
-        addSummary(writer, ANNOTATION_TYPE_FIELDS, false, memberSummaryTree);
+        MemberSummaryWriter writer = memberSummaryWriters.get(FIELDS);
+        addSummary(writer, FIELDS, false, memberSummaryTree);
     }
 
     /**
      * Build the summary for the optional members.
      *
