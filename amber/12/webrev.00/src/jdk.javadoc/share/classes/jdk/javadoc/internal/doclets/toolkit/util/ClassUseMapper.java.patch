diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/ClassUseMapper.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/ClassUseMapper.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/ClassUseMapper.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/ClassUseMapper.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -188,18 +188,20 @@
 
     private final DocletEnvironment docEnv;
     private final Elements elementUtils;
     private final Types typeUtils;
     private final Utils utils;
+    private final Comparators comparators;
 
     public ClassUseMapper(BaseConfiguration configuration, ClassTree classtree) {
         docEnv = configuration.docEnv;
         elementUtils = docEnv.getElementUtils();
         typeUtils = docEnv.getTypeUtils();
         utils = configuration.utils;
+        comparators = utils.comparators;
         this.classtree = classtree;
-        classToPackage = new TreeMap<>(utils.makeClassUseComparator());
+        classToPackage = new TreeMap<>(comparators.makeClassUseComparator());
         // Map subclassing, subinterfacing implementing, ...
         for (TypeElement te : classtree.baseClasses()) {
             subclasses(te);
         }
         for (TypeElement intfc : classtree.baseInterfaces()) {
@@ -280,11 +282,11 @@
      * Return all subClasses of a class AND fill-in classToSubclass map.
      */
     private Collection<TypeElement> subclasses(TypeElement te) {
         Collection<TypeElement> ret = classToSubclass.get(te);
         if (ret == null) {
-            ret = new TreeSet<>(utils.makeClassUseComparator());
+            ret = new TreeSet<>(comparators.makeClassUseComparator());
             Set<TypeElement> subs = classtree.subClasses(te);
             if (subs != null) {
                 ret.addAll(subs);
                 for (TypeElement sub : subs) {
                     ret.addAll(subclasses(sub));
@@ -299,11 +301,11 @@
      * Return all subInterfaces of an interface AND fill-in classToSubinterface map.
      */
     private Collection<TypeElement> subinterfaces(TypeElement te) {
         Collection<TypeElement> ret = classToSubinterface.get(te);
         if (ret == null) {
-            ret = new TreeSet<>(utils.makeClassUseComparator());
+            ret = new TreeSet<>(comparators.makeClassUseComparator());
             Set<TypeElement> subs = classtree.subInterfaces(te);
             if (subs != null) {
                 ret.addAll(subs);
                 for (TypeElement sub : subs) {
                     ret.addAll(subinterfaces(sub));
@@ -320,11 +322,11 @@
      * and classToSubinterface maps.
      */
     private Collection<TypeElement> implementingClasses(TypeElement te) {
         Collection<TypeElement> ret = classToImplementingClass.get(te);
         if (ret == null) {
-            ret = new TreeSet<>(utils.makeClassUseComparator());
+            ret = new TreeSet<>(comparators.makeClassUseComparator());
             Set<TypeElement> impl = classtree.implementingClasses(te);
             if (impl != null) {
                 ret.addAll(impl);
                 for (TypeElement anImpl : impl) {
                     ret.addAll(subclasses(anImpl));
@@ -341,11 +343,11 @@
     /**
      * Determine classes used by a method or constructor, so they can be inverse mapped.
      */
     private void mapExecutable(ExecutableElement ee) {
         final boolean isConstructor = utils.isConstructor(ee);
-        Set<TypeMirror> classArgs = new TreeSet<>(utils.makeTypeMirrorClassUseComparator());
+        Set<TypeMirror> classArgs = new TreeSet<>(comparators.makeTypeMirrorClassUseComparator());
         for (VariableElement param : ee.getParameters()) {
             TypeMirror pType = param.asType();
             // primitives don't get mapped and type variables are mapped elsewhere
             if (!pType.getKind().isPrimitive() && !utils.isTypeVariable(pType)) {
                 // no duplicates please
@@ -425,20 +427,20 @@
     }
 
     private Set<PackageElement> packageSet(TypeElement te) {
         Set<PackageElement> pkgSet = classToPackage.get(te);
         if (pkgSet == null) {
-            pkgSet = new TreeSet<>(utils.makeClassUseComparator());
+            pkgSet = new TreeSet<>(comparators.makeClassUseComparator());
             classToPackage.put(te, pkgSet);
         }
         return pkgSet;
     }
 
     private Set<TypeElement> classSet(TypeElement te) {
         Set<TypeElement> clsSet = classToClass.get(te);
         if (clsSet == null) {
-            clsSet = new TreeSet<>(utils.makeClassUseComparator());
+            clsSet = new TreeSet<>(comparators.makeClassUseComparator());
             classToClass.put(te, clsSet);
         }
         return clsSet;
     }
 
