diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SystemPropertiesWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SystemPropertiesWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SystemPropertiesWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SystemPropertiesWriter.java
@@ -22,29 +22,37 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package jdk.javadoc.internal.doclets.formats.html;
 
+import jdk.javadoc.internal.doclets.formats.html.SearchIndexItem.Category;
+import jdk.javadoc.internal.doclets.formats.html.markup.BodyContents;
 import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;
+import jdk.javadoc.internal.doclets.formats.html.markup.FixedStringContent;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;
-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTag;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;
-import jdk.javadoc.internal.doclets.formats.html.markup.Navigation;
-import jdk.javadoc.internal.doclets.formats.html.markup.Navigation.PageMode;
+import jdk.javadoc.internal.doclets.formats.html.Navigation.PageMode;
 import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;
 import jdk.javadoc.internal.doclets.formats.html.markup.Table;
 import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;
 import jdk.javadoc.internal.doclets.toolkit.Content;
+import jdk.javadoc.internal.doclets.toolkit.DocletElement;
+import jdk.javadoc.internal.doclets.toolkit.OverviewElement;
 import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;
 import jdk.javadoc.internal.doclets.toolkit.util.DocPath;
 import jdk.javadoc.internal.doclets.toolkit.util.DocPaths;
 
-import java.util.ArrayList;
+import javax.lang.model.element.Element;
+import java.nio.file.Path;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.TreeMap;
+import java.util.WeakHashMap;
+
+import static java.util.stream.Collectors.groupingBy;
+import static java.util.stream.Collectors.toList;
 
 /**
  * Generates the file with the summary of all the system properties.
  *
  *  <p><b>This is NOT part of any supported API.
@@ -52,73 +60,76 @@
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
  */
 public class SystemPropertiesWriter extends HtmlDocletWriter {
 
+    private final Navigation navBar;
+
     /**
-     * The HTML tree for main tag.
+     * Cached contents of {@code <title>...</title>} tags of the HTML pages.
      */
-    private final HtmlTree mainTree = HtmlTree.MAIN();
-
-    private final Navigation navBar;
+    final Map<Element, String> titles = new WeakHashMap<>();
 
     /**
      * Constructs SystemPropertiesWriter object.
      *
      * @param configuration The current configuration
      * @param filename Path to the file which is getting generated.
      */
     public SystemPropertiesWriter(HtmlConfiguration configuration, DocPath filename) {
         super(configuration, filename);
-        this.navBar = new Navigation(null, configuration, PageMode.SYSTEMPROPERTIES, path);
+        this.navBar = new Navigation(null, configuration, PageMode.SYSTEM_PROPERTIES, path);
     }
 
-    /**
-     * Creates SystemPropertiesWriter object.
-     *
-     * @param configuration The current configuration
-     * @throws DocFileIOException
-     */
     public static void generate(HtmlConfiguration configuration) throws DocFileIOException {
         generate(configuration, DocPaths.SYSTEM_PROPERTIES);
     }
 
     private static void generate(HtmlConfiguration configuration, DocPath fileName) throws DocFileIOException {
+        boolean hasSystemProperties = configuration.searchItems
+                .containsAnyOfCategories(Category.SYSTEM_PROPERTY);
+        if (!hasSystemProperties) {
+            // Cannot defer this check any further, because of the super() call
+            // that prints out notices on creating files, etc.
+            //
+            // There is probably a better place for this kind of checks (see how
+            // this is achieved in other "optional" pages, like Constant Values
+            // and Serialized Form).
+            return;
+        }
         SystemPropertiesWriter systemPropertiesGen = new SystemPropertiesWriter(configuration, fileName);
         systemPropertiesGen.buildSystemPropertiesPage();
     }
 
     /**
      * Prints all the system properties to the file.
      */
     protected void buildSystemPropertiesPage() throws DocFileIOException {
-        String label = resources.getText("doclet.systemProperties");
-        HtmlTree bodyTree = getBody(getWindowTitle(label));
-        HtmlTree header = HtmlTree.HEADER();
-        addTop(header);
+        String title = resources.getText("doclet.systemProperties");
+        HtmlTree body = getBody(getWindowTitle(title));
+        Content headerContent = new ContentBuilder();
+        addTop(headerContent);
         navBar.setUserHeader(getUserHeaderFooter(true));
-        header.add(navBar.getContent(true));
-        bodyTree.add(header);
+        headerContent.add(navBar.getContent(Navigation.Position.TOP));
         Content mainContent = new ContentBuilder();
         addSystemProperties(mainContent);
-        Content titleContent = new StringContent(resources.getText("doclet.systemProperties"));
-        Content pHeading = HtmlTree.HEADING(Headings.PAGE_TITLE_HEADING, true,
-                HtmlStyle.title, titleContent);
-        Content headerDiv = HtmlTree.DIV(HtmlStyle.header, pHeading);
-        mainTree.add(headerDiv);
-        mainTree.add(mainContent);
-        bodyTree.add(mainTree);
         Content footer = HtmlTree.FOOTER();
         navBar.setUserFooter(getUserHeaderFooter(false));
-        footer.add(navBar.getContent(false));
+        footer.add(navBar.getContent(Navigation.Position.BOTTOM));
         addBottom(footer);
-        bodyTree.add(footer);
-        printHtmlDocument(null, "system properties", bodyTree);
+        body.add(new BodyContents()
+                .setHeader(headerContent)
+                .addMainContent(HtmlTree.DIV(HtmlStyle.header,
+                        HtmlTree.HEADING(Headings.PAGE_TITLE_HEADING,
+                                contents.getContent("doclet.systemProperties"))))
+                .addMainContent(mainContent)
+                .setFooter(footer));
+        printHtmlDocument(null, "system properties", body);
     }
 
     /**
-     * Add all the system properties to the content tree.
+     * Adds all the system properties to the content tree.
      *
      * @param content HtmlTree content to which the links will be added
      */
     protected void addSystemProperties(Content content) {
         Map<String, List<SearchIndexItem>> searchIndexMap = groupSystemProperties();
@@ -129,43 +140,51 @@
                 .setColumnStyles(HtmlStyle.colFirst, HtmlStyle.colLast);
         for (Entry<String, List<SearchIndexItem>> entry : searchIndexMap.entrySet()) {
             Content propertyName = new StringContent(entry.getKey());
             List<SearchIndexItem> searchIndexItems = entry.getValue();
             Content separatedReferenceLinks = new ContentBuilder();
-            separatedReferenceLinks.add(links.createLink(
-                    pathToRoot.resolve(searchIndexItems.get(0).getUrl()),
-                    getLinkLabel(searchIndexItems.get(0))));
+            separatedReferenceLinks.add(createLink(searchIndexItems.get(0)));
             for (int i = 1; i < searchIndexItems.size(); i++) {
                 separatedReferenceLinks.add(separator);
-                separatedReferenceLinks.add(links.createLink(
-                        pathToRoot.resolve(searchIndexItems.get(i).getUrl()),
-                        getLinkLabel(searchIndexItems.get(i))));
+                separatedReferenceLinks.add(createLink(searchIndexItems.get(i)));
             }
-            table.addRow(propertyName, separatedReferenceLinks);
+            table.addRow(propertyName, HtmlTree.DIV(HtmlStyle.block, separatedReferenceLinks));
         }
-        content.add(table.toContent());
+        content.add(table);
     }
 
     private Map<String, List<SearchIndexItem>> groupSystemProperties() {
-        Map<String, List<SearchIndexItem>> searchIndexMap = new TreeMap<>();
-        for (SearchIndexItem searchIndex : searchItems.get(SearchIndexItem.Category.SEARCH_TAGS)) {
-            if (searchIndex.isSystemProperty()) {
-                List<SearchIndexItem> list = searchIndexMap
-                        .computeIfAbsent(searchIndex.getLabel(), k -> new ArrayList<>());
-                list.add(searchIndex);
-            }
-        }
-        return searchIndexMap;
+        return searchItems
+                .itemsOfCategories(Category.SYSTEM_PROPERTY)
+                .collect(groupingBy(SearchIndexItem::getLabel, TreeMap::new, toList()));
     }
 
-    private String getLinkLabel(SearchIndexItem searchIndexItem) {
-        String holder = searchIndexItem.getHolder();
-        String url = searchIndexItem.getUrl();
-        final String docFiles = "/doc-files/";
-        if (url.contains(docFiles)) {
-            final int idx = url.indexOf(docFiles);
-            final int len = docFiles.length();
-            return url.substring(idx + len, url.indexOf("#", idx));
+    private Content createLink(SearchIndexItem i) {
+        assert i.getCategory() == Category.SYSTEM_PROPERTY : i;
+        if (i.getElement() != null) {
+            if (i.getElement() instanceof OverviewElement) {
+                return links.createLink(pathToRoot.resolve(i.getUrl()),
+                                        resources.getText("doclet.Overview"));
+            }
+            DocletElement e = ((DocletElement) i.getElement());
+            // Implementations of DocletElement do not override equals and
+            // hashCode; putting instances of DocletElement in a map is not
+            // incorrect, but might well be inefficient
+            String t = titles.computeIfAbsent(i.getElement(), utils::getHTMLTitle);
+            if (t.isBlank()) {
+                // The user should probably be notified (a warning?) that this
+                // file does not have a title
+                Path p = Path.of(e.getFileObject().toUri());
+                t = p.getFileName().toString();
+            }
+            ContentBuilder b = new ContentBuilder();
+            b.add(HtmlTree.CODE(new FixedStringContent(i.getHolder() + ": ")));
+            // non-program elements should be displayed using a normal font
+            b.add(t);
+            return links.createLink(pathToRoot.resolve(i.getUrl()), b);
+        } else {
+            // program elements should be displayed using a code font
+            Content link = links.createLink(pathToRoot.resolve(i.getUrl()), i.getHolder());
+            return HtmlTree.CODE(link);
         }
-        return holder;
     }
 }
