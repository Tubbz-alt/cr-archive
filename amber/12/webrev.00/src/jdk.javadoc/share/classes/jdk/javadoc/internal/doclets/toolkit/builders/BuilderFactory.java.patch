diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/BuilderFactory.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/BuilderFactory.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/BuilderFactory.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/BuilderFactory.java
@@ -31,11 +31,10 @@
 import javax.lang.model.element.ModuleElement;
 import javax.lang.model.element.PackageElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
 
-import jdk.javadoc.internal.doclets.toolkit.AnnotationTypeWriter;
 import jdk.javadoc.internal.doclets.toolkit.BaseConfiguration;
 import jdk.javadoc.internal.doclets.toolkit.ClassWriter;
 import jdk.javadoc.internal.doclets.toolkit.PropertyWriter;
 import jdk.javadoc.internal.doclets.toolkit.WriterFactory;
 import jdk.javadoc.internal.doclets.toolkit.util.ClassTree;
@@ -115,22 +114,10 @@
     public AbstractBuilder getClassBuilder(TypeElement typeElement, ClassTree classTree) {
         return ClassBuilder.getInstance(context, typeElement,
             writerFactory.getClassWriter(typeElement, classTree));
     }
 
-    /**
-     * Return the builder for the annotation type.
-     *
-     * @param annotationType the annotation type being documented.
-     * @return the writer for the annotation type.  Return null if this
-     * writer is not supported by the doclet.
-     */
-    public AbstractBuilder getAnnotationTypeBuilder(TypeElement annotationType) {
-        return AnnotationTypeBuilder.getInstance(context, annotationType,
-            writerFactory.getAnnotationTypeWriter(annotationType));
-    }
-
     /**
      * Return an instance of the method builder for the given class.
      *
      * @param classWriter the writer for the enclosing class
      * @return an instance of the method builder for the given class.
@@ -138,53 +125,38 @@
     public AbstractMemberBuilder getMethodBuilder(ClassWriter classWriter) {
         return MethodBuilder.getInstance(context, classWriter.getTypeElement(),
             writerFactory.getMethodWriter(classWriter));
     }
 
-    /**
-     * Return an instance of the annotation type fields builder for the given
-     * class.
-     *
-     * @param annotationTypeWriter the writer for the enclosing annotation type
-     * @return an instance of the annotation type field builder for the given
-     *         annotation type.
-     */
-    public AbstractMemberBuilder getAnnotationTypeFieldsBuilder(
-            AnnotationTypeWriter annotationTypeWriter) {
-        return AnnotationTypeFieldBuilder.getInstance(context,
-                annotationTypeWriter.getAnnotationTypeElement(),
-                writerFactory.getAnnotationTypeFieldWriter(annotationTypeWriter));
-    }
-
     /**
      * Return an instance of the annotation type member builder for the given
      * class.
      *
-     * @param annotationTypeWriter the writer for the enclosing annotation type
+     * @param classWriter the writer for the enclosing annotation type
      * @return an instance of the annotation type member builder for the given
      *         annotation type.
      */
     public AbstractMemberBuilder getAnnotationTypeOptionalMemberBuilder(
-            AnnotationTypeWriter annotationTypeWriter) {
+            ClassWriter classWriter) {
         return AnnotationTypeOptionalMemberBuilder.getInstance(context,
-            annotationTypeWriter.getAnnotationTypeElement(),
-            writerFactory.getAnnotationTypeOptionalMemberWriter(annotationTypeWriter));
+            classWriter.getTypeElement(),
+            writerFactory.getAnnotationTypeOptionalMemberWriter(classWriter));
     }
 
     /**
      * Return an instance of the annotation type member builder for the given
      * class.
      *
-     * @param annotationTypeWriter the writer for the enclosing annotation type
+     * @param classWriter the writer for the enclosing annotation type
      * @return an instance of the annotation type member builder for the given
      *         annotation type.
      */
     public AbstractMemberBuilder getAnnotationTypeRequiredMemberBuilder(
-            AnnotationTypeWriter annotationTypeWriter) {
+            ClassWriter classWriter) {
         return AnnotationTypeRequiredMemberBuilder.getInstance(context,
-            annotationTypeWriter.getAnnotationTypeElement(),
-            writerFactory.getAnnotationTypeRequiredMemberWriter(annotationTypeWriter));
+            classWriter.getTypeElement(),
+            writerFactory.getAnnotationTypeRequiredMemberWriter(classWriter));
     }
 
     /**
      * Return an instance of the enum constants builder for the given class.
      *
@@ -240,22 +212,10 @@
      */
     public MemberSummaryBuilder getMemberSummaryBuilder(ClassWriter classWriter) {
         return MemberSummaryBuilder.getInstance(classWriter, context);
     }
 
-    /**
-     * Return an instance of the member summary builder for the given annotation
-     * type.
-     *
-     * @param annotationTypeWriter the writer for the enclosing annotation type
-     * @return an instance of the member summary builder for the given
-     *         annotation type.
-     */
-    public MemberSummaryBuilder getMemberSummaryBuilder(AnnotationTypeWriter annotationTypeWriter) {
-        return MemberSummaryBuilder.getInstance(annotationTypeWriter, context);
-    }
-
     /**
      * Return the builder that builds the serialized form.
      *
      * @return the builder that builds the serialized form.
      */
