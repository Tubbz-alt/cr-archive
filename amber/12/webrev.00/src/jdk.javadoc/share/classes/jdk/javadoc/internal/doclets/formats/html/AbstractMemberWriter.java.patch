diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractMemberWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractMemberWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractMemberWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/AbstractMemberWriter.java
@@ -41,18 +41,19 @@
 import com.sun.source.doctree.DocTree;
 
 import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;
 import jdk.javadoc.internal.doclets.formats.html.markup.Entity;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;
-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTag;
+import jdk.javadoc.internal.doclets.formats.html.markup.TagName;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;
 import jdk.javadoc.internal.doclets.formats.html.markup.Links;
 import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;
 import jdk.javadoc.internal.doclets.formats.html.markup.Table;
 import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;
 import jdk.javadoc.internal.doclets.toolkit.Content;
 import jdk.javadoc.internal.doclets.toolkit.MemberSummaryWriter;
+import jdk.javadoc.internal.doclets.toolkit.MemberWriter;
 import jdk.javadoc.internal.doclets.toolkit.Resources;
 import jdk.javadoc.internal.doclets.toolkit.taglets.DeprecatedTaglet;
 import jdk.javadoc.internal.doclets.toolkit.util.DocletConstants;
 import jdk.javadoc.internal.doclets.toolkit.util.Utils;
 
@@ -68,11 +69,11 @@
  *  <p><b>This is NOT part of any supported API.
  *  If you write code that depends on this, you do so at your own risk.
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
  */
-public abstract class AbstractMemberWriter implements MemberSummaryWriter {
+public abstract class AbstractMemberWriter implements MemberSummaryWriter, MemberWriter {
 
     protected final HtmlConfiguration configuration;
     protected final HtmlOptions options;
     protected final Utils utils;
     protected final SubWriterHolderWriter writer;
@@ -203,11 +204,11 @@
      * @param type the type to add
      * @param tdSummaryType the content tree to which the modified and type will be added
      */
     protected void addModifierAndType(Element member, TypeMirror type,
             Content tdSummaryType) {
-        HtmlTree code = new HtmlTree(HtmlTag.CODE);
+        HtmlTree code = new HtmlTree(TagName.CODE);
         addModifier(member, code);
         if (type == null) {
             code.add(utils.isClass(member) ? "class" : "interface");
             code.add(Entity.NO_BREAK_SPACE);
         } else {
@@ -218,11 +219,11 @@
                 Content typeParameters = ((AbstractExecutableMemberWriter) this)
                         .getTypeParameters((ExecutableElement)member);
                     code.add(typeParameters);
                 //Code to avoid ugly wrapping in member summary table.
                 if (typeParameters.charCount() > 10) {
-                    code.add(new HtmlTree(HtmlTag.BR));
+                    code.add(new HtmlTree(TagName.BR));
                 } else {
                     code.add(Entity.NO_BREAK_SPACE);
                 }
                 code.add(
                         writer.getLink(new LinkInfoImpl(configuration,
@@ -345,11 +346,11 @@
                 if (te != null
                         && !utils.isConstructor(element)
                         && !utils.isClass(element)
                         && !utils.isInterface(element)
                         && !utils.isAnnotationType(element)) {
-                    HtmlTree name = new HtmlTree(HtmlTag.SPAN);
+                    HtmlTree name = new HtmlTree(TagName.SPAN);
                     name.setStyle(HtmlStyle.typeNameLabel);
                     name.add(name(te) + ".");
                     typeContent.add(name);
                 }
                 addSummaryLink(utils.isClass(element) || utils.isInterface(element)
@@ -358,11 +359,11 @@
                         te, element, typeContent);
                 Content desc = new ContentBuilder();
                 writer.addSummaryLinkComment(this, element, desc);
                 useTable.addRow(summaryType, typeContent, desc);
             }
-            contentTree.add(useTable.toContent());
+            contentTree.add(useTable);
         }
     }
 
     protected void serialWarning(Element e, String key, String a1, String a2) {
         if (options.serialWarn()) {
@@ -433,11 +434,11 @@
      *
      * @return a content tree for the inherited summary links
      */
     @Override
     public Content getInheritedSummaryLinksTree() {
-        return new HtmlTree(HtmlTag.CODE);
+        return new HtmlTree(TagName.CODE);
     }
 
     /**
      * Get the summary table tree for the given class.
      *
@@ -451,11 +452,11 @@
         }
         Table table = getSummaryTable();
         if (table.needsScript()) {
             writer.getMainBodyScript().append(table.getScript());
         }
-        return table.toContent();
+        return table;
     }
 
     /**
      * Get the member tree to be documented.
      *
@@ -465,10 +466,20 @@
     @Override
     public Content getMemberTree(Content memberTree) {
         return writer.getMemberTree(memberTree);
     }
 
+    @Override
+    public Content getMemberList() {
+        return writer.getMemberList();
+    }
+
+    @Override
+    public Content getMemberListItem(Content memberTree) {
+        return writer.getMemberListItem(memberTree);
+    }
+
     /**
      * A content builder for member signatures.
      */
     class MemberSignature {
 
@@ -579,11 +590,11 @@
                 content.add(HtmlTree.SPAN(HtmlStyle.returnType, returnType));
                 content.add(Entity.NO_BREAK_SPACE);
             }
 
             // Name
-            HtmlTree nameSpan = new HtmlTree(HtmlTag.SPAN);
+            HtmlTree nameSpan = new HtmlTree(TagName.SPAN);
             nameSpan.setStyle(HtmlStyle.memberName);
             if (options.linkSource()) {
                 Content name = new StringContent(name(element));
                 writer.addSrcLink(element, name, nameSpan);
             } else {
@@ -613,25 +624,20 @@
             set.remove(NATIVE);
             set.remove(SYNCHRONIZED);
             set.remove(STRICTFP);
 
             // According to JLS, we should not be showing public modifier for
-            // interface methods.
-            if ((utils.isField(element) || utils.isMethod(element))
-                    && ((writer instanceof ClassWriterImpl
-                    && utils.isInterface(((ClassWriterImpl) writer).getTypeElement())  ||
-                    writer instanceof AnnotationTypeWriterImpl) )) {
-                // Remove the implicit abstract and public modifiers
-                if (utils.isMethod(element) &&
-                        (utils.isInterface(element.getEnclosingElement()) ||
-                                utils.isAnnotationType(element.getEnclosingElement()))) {
-                    set.remove(ABSTRACT);
-                    set.remove(PUBLIC);
-                }
-                if (!utils.isMethod(element)) {
-                    set.remove(PUBLIC);
-                }
+            // interface methods and fields.
+            if ((utils.isField(element) || utils.isMethod(element))) {
+               Element te = element.getEnclosingElement();
+               if (utils.isInterface(te) || utils.isAnnotationType(te)) {
+                   // Remove the implicit abstract and public modifiers
+                   if (utils.isMethod(element)) {
+                       set.remove(ABSTRACT);
+                   }
+                   set.remove(PUBLIC);
+               }
             }
             if (!set.isEmpty()) {
                 String mods = set.stream().map(Modifier::toString).collect(Collectors.joining(" "));
                 htmltree.add(HtmlTree.SPAN(HtmlStyle.modifiers, new StringContent(mods)));
                 htmltree.add(Entity.NO_BREAK_SPACE);
@@ -684,11 +690,11 @@
                 htmltree.add("()");
             } else {
                 parameters.add(")");
                 htmltree.add(Entity.ZERO_WIDTH_SPACE);
                 htmltree.add("(");
-                htmltree.add(HtmlTree.SPAN(HtmlStyle.arguments, parameters));
+                htmltree.add(HtmlTree.SPAN(HtmlStyle.parameters, parameters));
             }
 
             // Exceptions
             if (exceptions != null && !exceptions.isEmpty()) {
                 CharSequence indent = " ".repeat(Math.max(0, indentSize + 1 - 7));
