diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/VisibleMemberTable.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/VisibleMemberTable.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/VisibleMemberTable.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/VisibleMemberTable.java
@@ -92,11 +92,10 @@
         INNER_CLASSES,
         ENUM_CONSTANTS,
         FIELDS,
         CONSTRUCTORS,
         METHODS,
-        ANNOTATION_TYPE_FIELDS,
         ANNOTATION_TYPE_MEMBER_OPTIONAL,
         ANNOTATION_TYPE_MEMBER_REQUIRED,
         PROPERTIES;
 
         public static final EnumSet<Kind> summarySet = EnumSet.range(INNER_CLASSES, METHODS);
@@ -113,12 +112,10 @@
 
     private List<VisibleMemberTable> allSuperclasses;
     private List<VisibleMemberTable> allSuperinterfaces;
     private List<VisibleMemberTable> parents;
 
-
-    private Map<Kind, List<Element>> extraMembers = new EnumMap<>(Kind.class);
     private Map<Kind, List<Element>> visibleMembers = null;
     private Map<ExecutableElement, PropertyMembers> propertyMap = new HashMap<>();
 
     // Keeps track of method overrides
     Map<ExecutableElement, OverridingMethodInfo> overriddenMethodTable
@@ -147,15 +144,10 @@
         }
         computeParents();
         computeVisibleMembers();
     }
 
-    List<? extends Element> getExtraMembers(Kind kind) {
-        ensureInitialized();
-        return visibleMembers.getOrDefault(kind, Collections.emptyList());
-    }
-
     List<VisibleMemberTable> getAllSuperclasses() {
         ensureInitialized();
         return allSuperclasses;
     }
 
@@ -285,11 +277,11 @@
                 .forEach(result::add);
 
         // ... and finally the sorted super interfaces.
         allSuperinterfaces.stream()
                 .map(vmt -> vmt.te)
-                .sorted(utils.makeGeneralPurposeComparator())
+                .sorted(utils.comparators.makeGeneralPurposeComparator())
                 .forEach(result::add);
 
         return result;
     }
 
@@ -350,10 +342,15 @@
         PropertyMembers pm =  propertyMap.get(propertyMethod);
         return pm == null ? null : pm.setter;
     }
 
     private void computeParents() {
+        // suppress parents of annotation types
+        if (utils.isAnnotationType(te)) {
+            return;
+        }
+
         for (TypeMirror intfType : te.getInterfaces()) {
             TypeElement intfc = utils.asTypeElement(intfType);
             if (intfc != null) {
                 VisibleMemberTable vmt = mcache.getVisibleMemberTable(intfc);
                 allSuperinterfaces.add(vmt);
@@ -377,25 +374,16 @@
         // Note: these have some baggage, and are redundant,
         // allow this to be GC'ed.
         LocalMemberTable lmt = new LocalMemberTable();
 
         for (Kind k : Kind.values()) {
-            computeLeafMembers(lmt, k);
             computeVisibleMembers(lmt, k);
         }
         // All members have been computed, compute properties.
         computeVisibleProperties(lmt);
     }
 
-    private void computeLeafMembers(LocalMemberTable lmt, Kind kind) {
-        List<Element> list = new ArrayList<>();
-        if (utils.isUndocumentedEnclosure(te)) {
-            list.addAll(lmt.getOrderedMembers(kind));
-        }
-        parents.forEach(pvmt -> list.addAll(pvmt.getExtraMembers(kind)));
-        extraMembers.put(kind, Collections.unmodifiableList(list));
-    }
 
     void computeVisibleMembers(LocalMemberTable lmt, Kind kind) {
         switch (kind) {
             case FIELDS: case INNER_CLASSES:
                 computeVisibleFieldsAndInnerClasses(lmt, kind);
@@ -451,11 +439,10 @@
     }
 
     private void computeVisibleFieldsAndInnerClasses(LocalMemberTable lmt, Kind kind) {
         Set<Element> result = new LinkedHashSet<>();
         for (VisibleMemberTable pvmt : parents) {
-            result.addAll(pvmt.getExtraMembers(kind));
             result.addAll(pvmt.getAllVisibleMembers(kind));
         }
 
         // Filter out members in the inherited list that are hidden
         // by this type or should not be inherited at all.
@@ -486,36 +473,10 @@
                             k -> new ArrayList<>());
                     list.add(e.getKey());
                 }
             });
             inheritedMethods.addAll(pvmt.getAllVisibleMembers(Kind.METHODS));
-
-            // Copy the extra members (if any) from the lineage.
-            if (!utils.shouldDocument(pvmt.te)) {
-                List<? extends Element> extraMethods = pvmt.getExtraMembers(Kind.METHODS);
-
-                if (lmt.getOrderedMembers(Kind.METHODS).isEmpty()) {
-                    inheritedMethods.addAll(extraMethods);
-                    continue;
-                }
-
-                // Check if an extra-method ought to percolate through.
-                for (Element extraMethod : extraMethods) {
-                    boolean found = false;
-
-                    List<Element> lmethods = lmt.getMembers(extraMethod, Kind.METHODS);
-                    for (Element lmethod : lmethods) {
-                        ExecutableElement method = (ExecutableElement)lmethod;
-                        found = utils.elementUtils.overrides(method,
-                                (ExecutableElement)extraMethod, te);
-                        if (found)
-                            break;
-                    }
-                    if (!found)
-                        inheritedMethods.add(extraMethod);
-                }
-            }
         }
 
         // Filter out inherited methods that:
         // a. cannot override (private instance members)
         // b. are overridden and should not be visible in this type
@@ -530,19 +491,18 @@
         // be visible.
         Predicate<ExecutableElement> isVisible = m -> {
             OverridingMethodInfo p = overriddenMethodTable.getOrDefault(m, null);
             return p == null || !p.simpleOverride;
         };
-        List<Element> mlist = lmt.getOrderedMembers(Kind.METHODS);
-        List<Element> llist = mlist.stream()
+        List<Element> localList = lmt.getOrderedMembers(Kind.METHODS)
+                .stream()
                 .map(m -> (ExecutableElement)m)
                 .filter(isVisible)
                 .collect(Collectors.toList());
 
-        // Merge the above lists, making sure the local methods precede
-        // the others
-        list.addAll(0, llist);
+        // Merge the above lists, making sure the local methods precede the others
+        list.addAll(0, localList);
 
         // Final filtration of elements
         list = list.stream()
                 .filter(this::mustDocument)
                 .collect(Collectors.toList());
@@ -671,20 +631,20 @@
                     case RECORD:
                         addMember(e, Kind.INNER_CLASSES);
                         break;
                     case FIELD:
                         addMember(e, Kind.FIELDS);
-                        addMember(e, Kind.ANNOTATION_TYPE_FIELDS);
                         break;
                     case METHOD:
-                        ExecutableElement ee = (ExecutableElement)e;
                         if (utils.isAnnotationType(te)) {
+                            ExecutableElement ee = (ExecutableElement) e;
                             addMember(e, ee.getDefaultValue() == null
                                     ? Kind.ANNOTATION_TYPE_MEMBER_REQUIRED
                                     : Kind.ANNOTATION_TYPE_MEMBER_OPTIONAL);
+                        } else {
+                            addMember(e, Kind.METHODS);
                         }
-                        addMember(e, Kind.METHODS);
                         break;
                     case CONSTRUCTOR:
                             addMember(e, Kind.CONSTRUCTORS);
                         break;
                     case ENUM_CONSTANT:
@@ -891,16 +851,13 @@
 
     private class ImplementedMethods {
 
         private final Map<ExecutableElement, TypeMirror> interfaces = new HashMap<>();
         private final List<ExecutableElement> methlist = new ArrayList<>();
-        private final TypeElement typeElement;
-        private final ExecutableElement method;
 
         public ImplementedMethods(ExecutableElement method) {
-            this.method = method;
-            typeElement = utils.getEnclosingTypeElement(method);
+            TypeElement typeElement = utils.getEnclosingTypeElement(method);
             Set<TypeMirror> intfacs = utils.getAllInterfaces(typeElement);
             /*
              * Search for the method in the list of interfaces. If found check if it is
              * overridden by any other subinterface method which this class
              * implements. If it is not overridden, add it in the method list.
