diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/ConstructorBuilder.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/ConstructorBuilder.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/ConstructorBuilder.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/builders/ConstructorBuilder.java
@@ -72,11 +72,11 @@
      */
     private ConstructorBuilder(Context context,
             TypeElement typeElement,
             ConstructorWriter writer) {
         super(context, typeElement);
-        this.writer = writer;
+        this.writer = Objects.requireNonNull(writer);
         constructors = getVisibleMembers(CONSTRUCTORS);
         for (Element ctor : constructors) {
             if (utils.isProtected(ctor) || utils.isPrivate(ctor)) {
                 writer.setFoundNonPubConstructor(true);
             }
@@ -116,34 +116,31 @@
     }
 
     /**
      * Build the constructor documentation.
      *
-     * @param memberDetailsTree the content tree to which the documentation will be added
-     * @throws DocletException is there is a problem while building the documentation
+     * @param detailsList the content tree to which the documentation will be added
+     * @throws DocletException if there is a problem while building the documentation
      */
-    protected void buildConstructorDoc(Content memberDetailsTree) throws DocletException {
-        if (writer == null) {
-            return;
-        }
+    protected void buildConstructorDoc(Content detailsList) throws DocletException {
         if (hasMembersToDocument()) {
-            Content constructorDetailsTreeHeader = writer.getConstructorDetailsTreeHeader(memberDetailsTree);
-            Content constructorDetailsTree = writer.getMemberTreeHeader();
+            Content constructorDetailsTreeHeader = writer.getConstructorDetailsTreeHeader(detailsList);
+            Content memberList = writer.getMemberList();
 
             for (Element constructor : constructors) {
                 currentConstructor = (ExecutableElement)constructor;
                 Content constructorDocTree = writer.getConstructorDocTreeHeader(currentConstructor);
 
                 buildSignature(constructorDocTree);
                 buildDeprecationInfo(constructorDocTree);
                 buildConstructorComments(constructorDocTree);
                 buildTagInfo(constructorDocTree);
 
-                constructorDetailsTree.add(writer.getConstructorDoc(constructorDocTree));
+                memberList.add(writer.getMemberListItem(constructorDocTree));
             }
-            memberDetailsTree.add(
-                    writer.getConstructorDetails(constructorDetailsTreeHeader, constructorDetailsTree));
+            Content constructorDetails = writer.getConstructorDetails(constructorDetailsTreeHeader, memberList);
+            detailsList.add(constructorDetails);
         }
     }
 
     /**
      * Build the signature.
@@ -163,11 +160,11 @@
         writer.addDeprecated(currentConstructor, constructorDocTree);
     }
 
     /**
      * Build the comments for the constructor.  Do nothing if
-     * {@link BaseOptions#noComment} is set to true.
+     * {@link BaseOptions#noComment()} is set to true.
      *
      * @param constructorDocTree the content tree to which the documentation will be added
      */
     protected void buildConstructorComments(Content constructorDocTree) {
         if (!options.noComment()) {
