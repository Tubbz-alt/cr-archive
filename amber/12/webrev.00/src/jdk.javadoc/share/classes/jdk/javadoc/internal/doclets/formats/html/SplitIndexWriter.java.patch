diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SplitIndexWriter.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SplitIndexWriter.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SplitIndexWriter.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/formats/html/SplitIndexWriter.java
@@ -25,31 +25,31 @@
 
 package jdk.javadoc.internal.doclets.formats.html;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
 import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
+import java.util.stream.Collectors;
 
+import jdk.javadoc.internal.doclets.formats.html.SearchIndexItem.Category;
 import jdk.javadoc.internal.doclets.formats.html.markup.BodyContents;
 import jdk.javadoc.internal.doclets.formats.html.markup.ContentBuilder;
 import jdk.javadoc.internal.doclets.formats.html.markup.Entity;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;
-import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTag;
+import jdk.javadoc.internal.doclets.formats.html.markup.TagName;
 import jdk.javadoc.internal.doclets.formats.html.markup.HtmlTree;
 import jdk.javadoc.internal.doclets.formats.html.markup.StringContent;
 import jdk.javadoc.internal.doclets.toolkit.Content;
 import jdk.javadoc.internal.doclets.toolkit.util.DocFileIOException;
 import jdk.javadoc.internal.doclets.toolkit.util.DocPath;
 import jdk.javadoc.internal.doclets.toolkit.util.DocPaths;
 import jdk.javadoc.internal.doclets.toolkit.util.IndexBuilder;
 
-
 /**
  * Generate Separate Index Files for all the member names with Indexing in
  * Unicode Order. This will create "index-files" directory in the current or
  * destination directory and will generate separate file for each unicode index.
  *
@@ -88,16 +88,19 @@
      * @param configuration the configuration for this doclet
      * @param indexBuilder IndexBuilder built by {@link IndexBuilder}
      * @throws DocFileIOException if there is a problem generating the index files
      */
     public static void generate(HtmlConfiguration configuration,
-                                IndexBuilder indexBuilder) throws DocFileIOException {
+                                IndexBuilder indexBuilder) throws DocFileIOException
+    {
         DocPath path = DocPaths.INDEX_FILES;
         SortedSet<Character> keys = new TreeSet<>(indexBuilder.asMap().keySet());
-        Collection<SearchIndexItem> searchItems =
-                configuration.searchItems.get(SearchIndexItem.Category.SEARCH_TAGS);
-        keys.addAll(buildSearchTagIndex(searchItems).keySet());
+        Set<Character> searchItemsKeys = configuration.searchItems
+                .itemsOfCategories(Category.INDEX, Category.SYSTEM_PROPERTY)
+                .map(i -> keyCharacter(i.getLabel()))
+                .collect(Collectors.toSet());
+        keys.addAll(searchItemsKeys);
         ListIterator<Character> li = new ArrayList<>(keys).listIterator();
         while (li.hasNext()) {
             Character ch = li.next();
             DocPath filename = DocPaths.indexN(li.nextIndex());
             SplitIndexWriter indexgen = new SplitIndexWriter(configuration,
@@ -123,36 +126,31 @@
                 unicode.toString());
         HtmlTree body = getBody(getWindowTitle(title));
         Content headerContent = new ContentBuilder();
         addTop(headerContent);
         navBar.setUserHeader(getUserHeaderFooter(true));
-        headerContent.add(navBar.getContent(true));
+        headerContent.add(navBar.getContent(Navigation.Position.TOP));
         Content main = new ContentBuilder();
         main.add(HtmlTree.DIV(HtmlStyle.header,
                 HtmlTree.HEADING(Headings.PAGE_TITLE_HEADING,
                         contents.getContent("doclet.Index"))));
         Content mainContent = new ContentBuilder();
         addLinksForIndexes(mainContent);
-        if (tagSearchIndexMap.get(unicode) == null) {
-            addContents(unicode, indexBuilder.getMemberList(unicode), mainContent);
-        } else if (indexBuilder.getMemberList(unicode) == null) {
-            addSearchContents(unicode, tagSearchIndexMap.get(unicode), mainContent);
-        } else {
-            addContents(unicode, indexBuilder.getMemberList(unicode),
-                        tagSearchIndexMap.get(unicode), mainContent);
+        if (tagSearchIndexMap.get(unicode) != null) {
+            indexBuilder.addSearchTags(unicode, tagSearchIndexMap.get(unicode));
         }
+        addContents(unicode, indexBuilder.getMemberList(unicode), mainContent);
         addLinksForIndexes(mainContent);
         main.add(mainContent);
         HtmlTree footer = HtmlTree.FOOTER();
         navBar.setUserFooter(getUserHeaderFooter(false));
-        footer.add(navBar.getContent(false));
+        footer.add(navBar.getContent(Navigation.Position.BOTTOM));
         addBottom(footer);
         body.add(new BodyContents()
                 .setHeader(headerContent)
                 .addMainContent(main)
-                .setFooter(footer)
-                .toContent());
+                .setFooter(footer));
         String description = "index: " + unicode;
         printHtmlDocument(null, description, body);
     }
 
     /**
@@ -165,19 +163,19 @@
             int j = i + 1;
             contentTree.add(links.createLink(DocPaths.indexN(j),
                     new StringContent(indexElements.get(i).toString())));
             contentTree.add(Entity.NO_BREAK_SPACE);
         }
-        contentTree.add(new HtmlTree(HtmlTag.BR));
+        contentTree.add(new HtmlTree(TagName.BR));
         contentTree.add(links.createLink(pathToRoot.resolve(DocPaths.ALLCLASSES_INDEX),
                                          contents.allClassesLabel));
         if (!configuration.packages.isEmpty()) {
             contentTree.add(getVerticalSeparator());
             contentTree.add(links.createLink(pathToRoot.resolve(DocPaths.ALLPACKAGES_INDEX),
                                              contents.allPackagesLabel));
         }
-        if (!searchItems.get(SearchIndexItem.Category.SEARCH_TAGS).isEmpty()) {
+        if (searchItems.containsAnyOfCategories(Category.SYSTEM_PROPERTY)) {
             contentTree.add(getVerticalSeparator());
             contentTree.add(links.createLink(pathToRoot.resolve(DocPaths.SYSTEM_PROPERTIES),
                                              contents.systemPropertiesLabel));
         }
     }
