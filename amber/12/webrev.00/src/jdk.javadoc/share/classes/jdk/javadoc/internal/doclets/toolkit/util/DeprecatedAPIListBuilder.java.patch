diff a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/DeprecatedAPIListBuilder.java b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/DeprecatedAPIListBuilder.java
--- a/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/DeprecatedAPIListBuilder.java
+++ b/src/jdk.javadoc/share/classes/jdk/javadoc/internal/doclets/toolkit/util/DeprecatedAPIListBuilder.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1998, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1998, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -74,21 +74,19 @@
         this.configuration = configuration;
         this.utils = configuration.utils;
         deprecatedMap = new EnumMap<>(DeprElementKind.class);
         for (DeprElementKind kind : DeprElementKind.values()) {
             deprecatedMap.put(kind,
-                    new TreeSet<>(utils.makeDeprecatedComparator()));
+                    new TreeSet<>(utils.comparators.makeDeprecatedComparator()));
         }
         buildDeprecatedAPIInfo();
     }
 
     /**
      * Build the sorted list of all the deprecated APIs in this run.
      * Build separate lists for deprecated modules, packages, classes, constructors,
      * methods and fields.
-     *
-     * @param configuration the current configuration of the doclet.
      */
     private void buildDeprecatedAPIInfo() {
         SortedSet<Element> rset = deprecatedMap.get(DeprElementKind.REMOVAL);
         SortedSet<ModuleElement> modules = configuration.modules;
         SortedSet<Element> mset = deprecatedMap.get(DeprElementKind.MODULE);
@@ -163,11 +161,10 @@
     /**
      * Add the members into a single list of deprecated members.
      *
      * @param rset set of elements deprecated for removal.
      * @param sset set of deprecated elements.
-     * @param list List of all the particular deprecated members, e.g. methods.
      * @param members members to be added in the list.
      */
     private void composeDeprecatedList(SortedSet<Element> rset, SortedSet<Element> sset, List<? extends Element> members) {
         for (Element member : members) {
             if (utils.isDeprecatedForRemoval(member)) {
