diff a/src/java.security.sasl/share/classes/javax/security/sasl/SaslClient.java b/src/java.security.sasl/share/classes/javax/security/sasl/SaslClient.java
--- a/src/java.security.sasl/share/classes/javax/security/sasl/SaslClient.java
+++ b/src/java.security.sasl/share/classes/javax/security/sasl/SaslClient.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -25,28 +25,28 @@
 
 package javax.security.sasl;
 
 /**
  * Performs SASL authentication as a client.
- *<p>
+ * <p>
  * A protocol library such as one for LDAP gets an instance of this
  * class in order to perform authentication defined by a specific SASL
  * mechanism. Invoking methods on the {@code SaslClient} instance
  * process challenges and create responses according to the SASL
  * mechanism implemented by the {@code SaslClient}.
  * As the authentication proceeds, the instance
  * encapsulates the state of a SASL client's authentication exchange.
- *<p>
+ * <p>
  * Here's an example of how an LDAP library might use a {@code SaslClient}.
  * It first gets an instance of a {@code SaslClient}:
- *<blockquote><pre>{@code
+ * <blockquote><pre>{@code
  * SaslClient sc = Sasl.createSaslClient(mechanisms,
  *     authorizationId, protocol, serverName, props, callbackHandler);
- *}</pre></blockquote>
+ * }</pre></blockquote>
  * It can then proceed to use the client for authentication.
  * For example, an LDAP library might use the client as follows:
- *<blockquote><pre>{@code
+ * <blockquote><pre>{@code
  * // Get initial response and send to server
  * byte[] response = (sc.hasInitialResponse() ? sc.evaluateChallenge(new byte[0]) :
  *     null);
  * LdapResult res = ldap.sendBindRequest(dn, sc.getName(), response);
  * while (!sc.isComplete() &&
@@ -72,11 +72,11 @@
  *      // communication with server
  *      ldap.in = new SecureInputStream(sc, ldap.in);
  *      ldap.out = new SecureOutputStream(sc, ldap.out);
  *    }
  * }
- *}</pre></blockquote>
+ * }</pre></blockquote>
  *
  * If the mechanism has an initial response, the library invokes
  * {@code evaluateChallenge()} with an empty
  * challenge and to get initial response.
  * Protocols such as IMAP4, which do not include an initial response with
@@ -133,28 +133,28 @@
      */
     public abstract byte[] evaluateChallenge(byte[] challenge)
         throws SaslException;
 
     /**
-      * Determines whether the authentication exchange has completed.
-      * This method may be called at any time, but typically, it
-      * will not be called until the caller has received indication
-      * from the server
-      * (in a protocol-specific manner) that the exchange has completed.
-      *
-      * @return true if the authentication exchange has completed; false otherwise.
-      */
+     * Determines whether the authentication exchange has completed.
+     * This method may be called at any time, but typically, it
+     * will not be called until the caller has received indication
+     * from the server
+     * (in a protocol-specific manner) that the exchange has completed.
+     *
+     * @return true if the authentication exchange has completed; false otherwise.
+     */
     public abstract boolean isComplete();
 
     /**
      * Unwraps a byte array received from the server.
      * This method can be called only after the authentication exchange has
      * completed (i.e., when {@code isComplete()} returns true) and only if
      * the authentication exchange has negotiated integrity and/or privacy
      * as the quality of protection; otherwise, an
      * {@code IllegalStateException} is thrown.
-     *<p>
+     * <p>
      * {@code incoming} is the contents of the SASL buffer as defined in RFC 2222
      * without the leading four octet field that represents the length.
      * {@code offset} and {@code len} specify the portion of {@code incoming}
      * to use.
      *
@@ -177,11 +177,11 @@
      * This method can be called only after the authentication exchange has
      * completed (i.e., when {@code isComplete()} returns true) and only if
      * the authentication exchange has negotiated integrity and/or privacy
      * as the quality of protection; otherwise, an
      * {@code IllegalStateException} is thrown.
-     *<p>
+     * <p>
      * The result of this method will make up the contents of the SASL buffer
      * as defined in RFC 2222 without the leading four octet field that
      * represents the length.
      * {@code offset} and {@code len} specify the portion of {@code outgoing}
      * to use.
@@ -213,11 +213,10 @@
      * @return The value of the negotiated property. If null, the property was
      * not negotiated or is not applicable to this mechanism.
      * @exception IllegalStateException if this authentication exchange
      * has not completed
      */
-
     public abstract Object getNegotiatedProperty(String propName);
 
      /**
       * Disposes of any system resources or security-sensitive information
       * the SaslClient might be using. Invoking this method invalidates
