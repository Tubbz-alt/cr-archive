diff a/src/java.security.sasl/share/classes/com/sun/security/sasl/ExternalClient.java b/src/java.security.sasl/share/classes/com/sun/security/sasl/ExternalClient.java
--- a/src/java.security.sasl/share/classes/com/sun/security/sasl/ExternalClient.java
+++ b/src/java.security.sasl/share/classes/com/sun/security/sasl/ExternalClient.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1999, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1999, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.  Oracle designates this
@@ -28,17 +28,17 @@
 import javax.security.sasl.*;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 
 /**
-  * Implements the EXTERNAL SASL client mechanism.
-  * (<A HREF="http://www.ietf.org/rfc/rfc2222.txt">RFC 2222</A>).
-  * The EXTERNAL mechanism returns the optional authorization ID as
-  * the initial response. It processes no challenges.
-  *
-  * @author Rosanna Lee
-  */
+ * Implements the EXTERNAL SASL client mechanism.
+ * (<A HREF="http://www.ietf.org/rfc/rfc2222.txt">RFC 2222</A>).
+ * The EXTERNAL mechanism returns the optional authorization ID as
+ * the initial response. It processes no challenges.
+ *
+ * @author Rosanna Lee
+ */
 final class ExternalClient implements SaslClient {
     private byte[] username;
     private boolean completed = false;
 
     /**
@@ -101,14 +101,14 @@
     public boolean isComplete() {
         return completed;
     }
 
     /**
-      * Unwraps the incoming buffer.
-      *
-      * @throws SaslException Not applicable to this mechanism.
-      */
+     * Unwraps the incoming buffer.
+     *
+     * @throws SaslException Not applicable to this mechanism.
+     */
     public byte[] unwrap(byte[] incoming, int offset, int len)
         throws SaslException {
         if (completed) {
             throw new SaslException("EXTERNAL has no supported QOP");
         } else {
@@ -116,14 +116,14 @@
                 "EXTERNAL authentication Not completed");
         }
     }
 
     /**
-      * Wraps the outgoing buffer.
-      *
-      * @throws SaslException Not applicable to this mechanism.
-      */
+     * Wraps the outgoing buffer.
+     *
+     * @throws SaslException Not applicable to this mechanism.
+     */
     public byte[] wrap(byte[] outgoing, int offset, int len)
         throws SaslException {
         if (completed) {
             throw new SaslException("EXTERNAL has no supported QOP");
         } else {
