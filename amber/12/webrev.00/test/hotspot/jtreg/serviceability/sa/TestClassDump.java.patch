diff a/test/hotspot/jtreg/serviceability/sa/TestClassDump.java b/test/hotspot/jtreg/serviceability/sa/TestClassDump.java
--- a/test/hotspot/jtreg/serviceability/sa/TestClassDump.java
+++ b/test/hotspot/jtreg/serviceability/sa/TestClassDump.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2017, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -27,16 +27,17 @@
 
 import jdk.test.lib.apps.LingeredApp;
 import jdk.test.lib.Platform;
 import jdk.test.lib.process.OutputAnalyzer;
 import jdk.test.lib.process.ProcessTools;
+import jdk.test.lib.SA.SATestUtils;
 
 /**
  * @test
  * @bug 8184982
  * @summary Test ClassDump tool
- * @requires vm.hasSAandCanAttach
+ * @requires vm.hasSA
  * @library /test/lib
  * @run main/othervm TestClassDump
  */
 
 public class TestClassDump {
@@ -48,10 +49,11 @@
         OutputAnalyzer output;
 
         pb = ProcessTools.createJavaProcessBuilder(
                 "-Dsun.jvm.hotspot.tools.jcore.outputDir=jtreg_classes",
                 "-m", "jdk.hotspot.agent/sun.jvm.hotspot.tools.jcore.ClassDump", String.valueOf(lingeredAppPid));
+        SATestUtils.addPrivilegesIfNeeded(pb);
         output = new OutputAnalyzer(pb.start());
         output.shouldHaveExitValue(0);
         if (!Files.isDirectory(Paths.get("jtreg_classes"))) {
             throw new RuntimeException("jtreg_classes directory not found");
         }
@@ -67,10 +69,11 @@
 
         pb = ProcessTools.createJavaProcessBuilder(
                 "-Dsun.jvm.hotspot.tools.jcore.outputDir=jtreg_classes2",
                 "-Dsun.jvm.hotspot.tools.jcore.PackageNameFilter.pkgList=jdk,sun",
                 "-m", "jdk.hotspot.agent/sun.jvm.hotspot.tools.jcore.ClassDump", String.valueOf(lingeredAppPid));
+        SATestUtils.addPrivilegesIfNeeded(pb);
         output = new OutputAnalyzer(pb.start());
         output.shouldHaveExitValue(0);
         if (Files.exists(Paths.get("jtreg_classes2", "java", "math", "BigInteger.class"))) {
             throw new RuntimeException("jtreg_classes2/java/math/BigInteger.class not expected");
         }
@@ -81,10 +84,11 @@
             throw new RuntimeException("jtreg_classes2/jdk/internal/loader/BootLoader.class not found");
         }
     }
 
     public static void main(String[] args) throws Exception {
+        SATestUtils.skipIfCannotAttach(); // throws SkippedException if attach not expected to work.
         LingeredApp theApp = null;
         try {
             theApp = LingeredApp.startApp();
             long pid = theApp.getPid();
             System.out.println("Started LingeredApp with pid " + pid);
