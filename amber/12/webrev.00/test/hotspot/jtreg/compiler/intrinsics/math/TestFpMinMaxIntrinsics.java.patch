diff a/test/hotspot/jtreg/compiler/intrinsics/math/TestFpMinMaxIntrinsics.java b/test/hotspot/jtreg/compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
--- a/test/hotspot/jtreg/compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
+++ b/test/hotspot/jtreg/compiler/intrinsics/math/TestFpMinMaxIntrinsics.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
  * Copyright (c) 2018, 2019, Arm Limited. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
@@ -24,11 +24,13 @@
 
 /*
  * @test
  * @bug 8212043
  * @summary Test compiler intrinsics of floating-point Math.min/max
+ * @library /test/lib
  *
+ * @comment the test isn't marked by 'randomness' b/c randomSearchTree case isn't used
  * @run main/othervm -Xint compiler.intrinsics.math.TestFpMinMaxIntrinsics sanityTests 1
  * @run main/othervm -XX:+UnlockDiagnosticVMOptions
  *                   -Xcomp -XX:TieredStopAtLevel=1
  *                   -XX:CompileOnly=java/lang/Math
  *                   compiler.intrinsics.math.TestFpMinMaxIntrinsics sanityTests 1
@@ -50,10 +52,11 @@
 package compiler.intrinsics.math;
 
 import java.util.Arrays;
 import java.util.Random;
 import java.lang.reflect.Method;
+import jdk.test.lib.Utils;
 
 public class TestFpMinMaxIntrinsics {
 
     private static final float fPos     =  15280.0f;
     private static final float fNeg     = -55555.5f;
@@ -196,11 +199,11 @@
     }
 
     private static final int COUNT = 1000;
     private static final int LOOPS = 100;
 
-    private static Random r = new Random();
+    private static Random r = Utils.getRandomInstance();
 
     private static Node[] pool = new Node[COUNT];
 
     private static long time = 0;
     private static long times = 0;
