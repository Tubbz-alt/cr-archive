diff a/test/hotspot/jtreg/compiler/codecache/stress/OverloadCompileQueueTest.java b/test/hotspot/jtreg/compiler/codecache/stress/OverloadCompileQueueTest.java
--- a/test/hotspot/jtreg/compiler/codecache/stress/OverloadCompileQueueTest.java
+++ b/test/hotspot/jtreg/compiler/codecache/stress/OverloadCompileQueueTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,10 +21,11 @@
  * questions.
  */
 
 /*
  * @test OverloadCompileQueueTest
+ * @key stress randomness
  * @summary stressing code cache by overloading compile queues
  * @library /test/lib /
  * @modules java.base/jdk.internal.misc
  *          java.management
  *
@@ -44,13 +45,15 @@
  */
 
 package compiler.codecache.stress;
 
 import jdk.test.lib.Platform;
+import jdk.test.lib.Utils;
 
 import java.lang.reflect.Method;
 import java.util.stream.IntStream;
+import java.util.Random;
 
 public class OverloadCompileQueueTest implements Runnable {
     private static final int MAX_SLEEP = 10000;
     private static final String METHOD_TO_ENQUEUE = "method";
     private static final int LEVEL_SIMPLE = 1;
@@ -58,10 +61,11 @@
     private static final boolean TIERED_COMPILATION
             = Helper.WHITE_BOX.getBooleanVMFlag("TieredCompilation");
     private static final int TIERED_STOP_AT_LEVEL
             = Helper.WHITE_BOX.getIntxVMFlag("TieredStopAtLevel").intValue();
     private static final int[] AVAILABLE_LEVELS;
+    private final Random rng = Utils.getRandomInstance();
     static {
         if (TIERED_COMPILATION) {
             AVAILABLE_LEVELS = IntStream
                     .rangeClosed(LEVEL_SIMPLE, TIERED_STOP_AT_LEVEL)
                     .toArray();
@@ -102,11 +106,11 @@
         }
     }
 
     private void lockUnlock() {
         try {
-            int sleep = Helper.RNG.nextInt(MAX_SLEEP);
+            int sleep = rng.nextInt(MAX_SLEEP);
             Helper.WHITE_BOX.lockCompilation();
             Thread.sleep(sleep);
         } catch (InterruptedException e) {
             throw new Error("TESTBUG: lockUnlocker thread was unexpectedly interrupted", e);
         } finally {
