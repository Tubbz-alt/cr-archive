diff a/test/hotspot/jtreg/compiler/codecache/stress/RandomAllocationTest.java b/test/hotspot/jtreg/compiler/codecache/stress/RandomAllocationTest.java
--- a/test/hotspot/jtreg/compiler/codecache/stress/RandomAllocationTest.java
+++ b/test/hotspot/jtreg/compiler/codecache/stress/RandomAllocationTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2016, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,11 +21,11 @@
  * questions.
  */
 
 /*
  * @test RandomAllocationTest
- * @key stress
+ * @key stress randomness
  * @summary stressing code cache by allocating randomly sized "dummy" code blobs
  * @library /test/lib /
  * @modules java.base/jdk.internal.misc
  *          java.management
  *
@@ -47,35 +47,38 @@
 package compiler.codecache.stress;
 
 import sun.hotspot.code.BlobType;
 
 import java.util.ArrayList;
+import java.util.Random;
+import jdk.test.lib.Utils;
 
 public class RandomAllocationTest implements Runnable {
     private static final long CODE_CACHE_SIZE
             = Helper.WHITE_BOX.getUintxVMFlag("ReservedCodeCacheSize");
     private static final int MAX_BLOB_SIZE = (int) (CODE_CACHE_SIZE >> 7);
     private static final BlobType[] BLOB_TYPES
             = BlobType.getAvailable().toArray(new BlobType[0]);
+    private final Random rng = Utils.getRandomInstance();
 
     public static void main(String[] args) {
         new CodeCacheStressRunner(new RandomAllocationTest()).runTest();
     }
 
     private final ArrayList<Long> blobs = new ArrayList<>();
     @Override
     public void run() {
-        boolean allocate = blobs.isEmpty() || Helper.RNG.nextBoolean();
+        boolean allocate = blobs.isEmpty() || rng.nextBoolean();
         if (allocate) {
-            int type = Helper.RNG.nextInt(BLOB_TYPES.length);
+            int type = rng.nextInt(BLOB_TYPES.length);
             long addr = Helper.WHITE_BOX.allocateCodeBlob(
-                    Helper.RNG.nextInt(MAX_BLOB_SIZE), BLOB_TYPES[type].id);
+                    rng.nextInt(MAX_BLOB_SIZE), BLOB_TYPES[type].id);
             if (addr != 0) {
                 blobs.add(addr);
             }
         } else {
-            int index = Helper.RNG.nextInt(blobs.size());
+            int index = rng.nextInt(blobs.size());
             Helper.WHITE_BOX.freeCodeBlob(blobs.remove(index));
         }
     }
 
 }
