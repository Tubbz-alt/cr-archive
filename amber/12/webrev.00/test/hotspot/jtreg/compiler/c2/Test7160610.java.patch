diff a/test/hotspot/jtreg/compiler/c2/Test7160610.java b/test/hotspot/jtreg/compiler/c2/Test7160610.java
--- a/test/hotspot/jtreg/compiler/c2/Test7160610.java
+++ b/test/hotspot/jtreg/compiler/c2/Test7160610.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2012, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,32 +21,38 @@
  * questions.
  */
 
 /**
  * @test
+ * @key randomness
  * @bug 7160610
  * @summary Unknown Native Code compilation issue.
- *
+ * @library /test/lib
  * @run main/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-OptimizeFill compiler.c2.Test7160610
  */
 
 package compiler.c2;
 
+import jdk.test.lib.Utils;
+
+import java.util.Random;
+
 public class Test7160610 {
   private static final byte[] BYTE_ARRAY = new byte[7];
   private static int[] anIntArray1190 = new int[32768];
   private static int[] anIntArray1191 = new int[32768];
 
   public static void main(String arg[]) {
+    Random rng = Utils.getRandomInstance();
     int i = 256;
     for(int j = BYTE_ARRAY[2]; j < anIntArray1190.length; j++) {
       anIntArray1190[j] = BYTE_ARRAY[2];
     }
 
     for(int k = BYTE_ARRAY[2]; (k ^ BYTE_ARRAY[1]) > -5001; k++) {
-      int i1 = (int)(Math.random() * 128D * (double)i);
-      anIntArray1190[i1] = (int)(Math.random() * 256D);
+      int i1 = (int)(rng.nextDouble() * 128D * (double)i);
+      anIntArray1190[i1] = (int)(rng.nextDouble() * 256D);
     }
 
     for(int l = BYTE_ARRAY[2]; (l ^ BYTE_ARRAY[1]) > -21; l++) {
       for(int j1 = BYTE_ARRAY[0]; j1 < i + -BYTE_ARRAY[0]; j1++) {
         for(int k1 = BYTE_ARRAY[0]; (k1 ^ BYTE_ARRAY[1]) > -128; k1++) {
