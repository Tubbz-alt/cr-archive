diff a/test/hotspot/jtreg/compiler/c2/aarch64/TestVolatiles.java b/test/hotspot/jtreg/compiler/c2/aarch64/TestVolatiles.java
--- a/test/hotspot/jtreg/compiler/c2/aarch64/TestVolatiles.java
+++ b/test/hotspot/jtreg/compiler/c2/aarch64/TestVolatiles.java
@@ -37,11 +37,11 @@
  *                       TestUnsafeVolatileGAS}
  * and <testtype> in {G1,
  *                    Serial,
  *                    Parallel,
  *                    Shenandoah,
- *                    ShenandoahTraversal}
+ *                    ShenandoahIU}
  */
 
 
 package compiler.c2.aarch64;
 
@@ -92,16 +92,16 @@
             argcount = 10;
             procArgs = new String[argcount];
             procArgs[argcount - 3] = "-XX:+UnlockExperimentalVMOptions";
             procArgs[argcount - 2] = "-XX:+UseShenandoahGC";
             break;
-        case "ShenandoahTraversal":
+        case "ShenandoahIU":
             argcount = 11;
             procArgs = new String[argcount];
             procArgs[argcount - 4] = "-XX:+UnlockExperimentalVMOptions";
             procArgs[argcount - 3] = "-XX:+UseShenandoahGC";
-            procArgs[argcount - 2] = "-XX:ShenandoahGCMode=traversal";
+            procArgs[argcount - 2] = "-XX:ShenandoahGCMode=iu";
             break;
         default:
             throw new RuntimeException("unexpected test type " + testType);
         }
 
@@ -329,11 +329,11 @@
                     "dmb ish",
                     "strb"
                 };
                 break;
             case "Shenandoah":
-            case "ShenandoahTraversal":
+            case "ShenandoahIU":
                  // Shenandoah generates normal object graphs for
                  // volatile stores
                 matches = new String[] {
                     "membar_release \\(elided\\)",
                     useCompressedOops ? "stlrw?" : "stlr",
@@ -408,11 +408,11 @@
                     "ret"
                 };
                 break;
 
             case "Shenandoah":
-            case "ShenandoahTraversal":
+            case "ShenandoahIU":
                  // Shenandoah generates normal object graphs for
                  // volatile stores
                 matches = new String[] {
                     "membar_release",
                     "dmb ish",
@@ -498,11 +498,11 @@
                     "dmb ish",
                     "strb"
                 };
                 break;
             case "Shenandoah":
-            case "ShenandoahTraversal":
+            case "ShenandoahIU":
                 // For volatile CAS, Shenanodoah generates normal
                 // graphs with a shenandoah-specific cmpxchg
                 matches = new String[] {
                     "membar_release \\(elided\\)",
                     useCompressedOops ? "cmpxchgw?_acq_shenandoah" : "cmpxchg_acq_shenandoah",
@@ -576,11 +576,11 @@
                     "dmb ish",
                     "ret"
                 };
                 break;
             case "Shenandoah":
-            case "ShenandoahTraversal":
+            case "ShenandoahIU":
                 // For volatile CAS, Shenanodoah generates normal
                 // graphs with a shenandoah-specific cmpxchg
                 matches = new String[] {
                     "membar_release",
                     "dmb ish",
@@ -682,11 +682,11 @@
                     "dmb ish",
                     "strb"
                 };
                 break;
             case "Shenandoah":
-            case "ShenandoahTraversal":
+            case "ShenandoahIU":
                 // For volatile CAS, Shenanodoah generates normal
                 // graphs with a shenandoah-specific cmpxchg
                 matches = new String[] {
                     "membar_release \\(elided\\)",
                     useCompressedOops ? "cmpxchgw?_acq_shenandoah" : "cmpxchg_acq_shenandoah",
@@ -760,11 +760,11 @@
                     "dmb ish",
                     "ret"
                 };
                 break;
             case "Shenandoah":
-            case "ShenandoahTraversal":
+            case "ShenandoahIU":
                 // For volatile CAS, Shenanodoah generates normal
                 // graphs with a shenandoah-specific cmpxchg
                 matches = new String[] {
                     "membar_release",
                     "dmb ish",
@@ -846,11 +846,11 @@
                     "dmb ish",
                     "strb"
                 };
                 break;
             case "Shenandoah":
-            case "ShenandoahTraversal":
+            case "ShenandoahIU":
                 matches = new String[] {
                     "membar_release \\(elided\\)",
                     useCompressedOops ? "atomic_xchgw?_acq" : "atomic_xchg_acq",
                     "membar_acquire \\(elided\\)",
                     "ret"
@@ -922,11 +922,11 @@
                     "dmb ish",
                     "ret"
                 };
                 break;
             case "Shenandoah":
-            case "ShenandoahTraversal":
+            case "ShenandoahIU":
                 matches = new String[] {
                     "membar_release",
                     "dmb ish",
                     useCompressedOops ? "atomic_xchgw? " : "atomic_xchg ",
                     "membar_acquire",
