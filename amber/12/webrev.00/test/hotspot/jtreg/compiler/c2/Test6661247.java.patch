diff a/test/hotspot/jtreg/compiler/c2/Test6661247.java b/test/hotspot/jtreg/compiler/c2/Test6661247.java
--- a/test/hotspot/jtreg/compiler/c2/Test6661247.java
+++ b/test/hotspot/jtreg/compiler/c2/Test6661247.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 1997, 2008, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 1997, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,20 +21,23 @@
  * questions.
  */
 
 /*
  * @test
+ * @key randomness
  * @bug 6661247
  * @summary Internal bug in 32-bit HotSpot optimizer while bit manipulations
  *
+ * @library /test/lib
  * @run main compiler.c2.Test6661247
  */
 
 package compiler.c2;
 
 import java.nio.LongBuffer;
 import java.util.Random;
+import jdk.test.lib.Utils;
 
 // This isn't a completely reliable test for 6661247 since the results
 // depend on what the local schedule looks like but it does reproduce
 // the issue in current builds.
 
@@ -131,11 +134,11 @@
             else
                 dest.put((int)(destPos >>> 6), dest.get((int)(destPos >>> 6)) & ~(1L << (destPos & 63)));
         }
     }
     public static void main(String[] args) {
-        Random r = new Random();
+        Random r = Utils.getRandomInstance();
         int entries = 1000;
         boolean[] src = new boolean[entries * 64];
         long[] dest = new long[entries];
         long[] result = new long[entries];
 
