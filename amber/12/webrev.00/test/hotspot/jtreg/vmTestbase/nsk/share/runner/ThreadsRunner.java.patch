diff a/test/hotspot/jtreg/vmTestbase/nsk/share/runner/ThreadsRunner.java b/test/hotspot/jtreg/vmTestbase/nsk/share/runner/ThreadsRunner.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/share/runner/ThreadsRunner.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/share/runner/ThreadsRunner.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2007, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -20,18 +20,18 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 package nsk.share.runner;
 
-import nsk.share.Wicket;
 import nsk.share.gc.OOMStress;
 import nsk.share.log.*;
 import nsk.share.test.Stresser;
 import nsk.share.test.ExecutionController;
 import nsk.share.TestBug;
 import java.util.List;
 import java.util.ArrayList;
+import java.util.concurrent.atomic.AtomicInteger;
 
 /**
  *  Helper to assist in running threads.
  *
  *  This class starts a number of threads which run some tasks in cycle.
@@ -42,12 +42,12 @@
 
     private Log log;
     private RunParams runParams;
     private List<Runnable> runnables = new ArrayList<Runnable>();
     private List<ManagedThread> threads = new ArrayList<ManagedThread>();
-    private Wicket wicket = new Wicket();
-    private Wicket finished;
+    private AtomicInteger notStarted;
+    private AtomicInteger finished;
     private boolean started = false;
     private boolean successful = true;
 
     public ThreadsRunner() {
         this(RunParams.getInstance());
@@ -59,54 +59,80 @@
 
     public final void setLog(Log log) {
         this.log = log;
     }
 
-    private class ManagedThread extends Thread {
+    private static class ManagedThreadFactory {
+
+        private RunParams params;
+
+        static ManagedThreadFactory createFactory(RunParams params) {
+            return new ManagedThreadFactory(params);
+        }
+
+        private ManagedThreadFactory(RunParams params) {
+            this.params = params;
+        }
+
+        public Thread newThread(Runnable runnable, String name, int num) {
+            return new Thread(runnable, name);
+        }
+    }
+
+    private class ManagedThread implements Runnable {
 
         private Stresser stresser;
         private Throwable exception;
         private Runnable test;
         private boolean shouldWait;
+        private Thread thread;
+
 
-        public ManagedThread(Runnable test) {
-            super(test.toString());
+        public ManagedThread(ManagedThreadFactory threadFactory, Runnable test, int num) {
             this.test = test;
             this.shouldWait = true;
-            this.stresser = new Stresser(this.getName(), runParams.getStressOptions());
+            this.thread = threadFactory.newThread(this, test.toString(), num);
+            this.stresser = new Stresser(thread.getName(), runParams.getStressOptions());
         }
 
+        @Override
         public void run() {
-            wicket.waitFor();
+            notStarted.decrementAndGet();
+            while (notStarted.get() != 0) {
+                Thread.onSpinWait();
+            }
             try {
                 stresser.start(runParams.getIterations());
-                while (!this.isInterrupted() && stresser.iteration()) {
+                while (!this.thread.isInterrupted() && stresser.iteration()) {
                     test.run();
                     Thread.yield();
                 }
-                waitForOtherThreads();
             } catch (OutOfMemoryError oom) {
-                waitForOtherThreads();
                 if (test instanceof OOMStress) {
                     // Test stressing OOM, not a failure.
                     log.info("Caught OutOfMemoryError in OOM stress test, omitting exception.");
                 } else {
                     failWithException(oom);
                 }
             } catch (Throwable t) {
-                waitForOtherThreads();
                 failWithException(t);
             } finally {
+                waitForOtherThreads();
                 stresser.finish();
             }
         }
 
         private void waitForOtherThreads() {
             if (shouldWait) {
                 shouldWait = false;
-                finished.unlock();
-                finished.waitFor();
+                finished.decrementAndGet();
+                while (finished.get() != 0) {
+                    try {
+                        Thread.sleep(100);
+                    } catch (InterruptedException ie) {
+                    }
+                }
             } else {
                 throw new TestBug("Waiting a second time is not premitted");
             }
         }
 
@@ -119,11 +145,11 @@
 
         public void forceFinish() {
             stresser.forceFinish();
             if (runParams.isInterruptThreads()) {
                 log.debug("Interrupting: " + this);
-                this.interrupt();
+                this.thread.interrupt();
             }
         }
 
         public final Throwable getException() {
             return exception;
@@ -149,11 +175,11 @@
     private Runnable get(int index) {
         return (Runnable) runnables.get(index);
     }
 
     public Thread getThread(int index) {
-        return threads.get(index);
+        return threads.get(index).thread;
     }
 
     private int getCount() {
         return runnables.size();
     }
@@ -161,13 +187,15 @@
     private void prepare() {
     }
 
     private void create() {
         int threadCount = runnables.size();
-        finished = new Wicket(threadCount);
+        notStarted = new AtomicInteger(threadCount);
+        finished = new AtomicInteger(threadCount);
+        ManagedThreadFactory factory = ManagedThreadFactory.createFactory(runParams);
         for (int i = 0; i < threadCount; ++i) {
-            threads.add(new ManagedThread(get(i)));
+            threads.add(new ManagedThread(factory, get(i), i));
         }
     }
 
     /**
      * Start threads that run the tasks.
@@ -177,15 +205,14 @@
             return;
         }
         create();
         prepare();
         for (int i = 0; i < threads.size(); ++i) {
-            Thread t = (Thread) threads.get(i);
+            Thread t = threads.get(i).thread;
             log.debug("Starting " + t);
             t.start();
         }
-        wicket.unlock();
         started = true;
     }
 
     /**
      * Stop threads that run the tasks.
@@ -201,11 +228,11 @@
     /**
      * Join threads that run the tasks.
      */
     public void join() throws InterruptedException {
         for (int i = 0; i < threads.size(); ++i) {
-            Thread t = (Thread) threads.get(i);
+            Thread t = threads.get(i).thread;
             //log.debug("Joining " + t);
             t.join();
         }
     }
 
@@ -229,11 +256,11 @@
     }
 
     private ManagedThread findManagedThread(Thread t) {
         for (int i = 0; i < threads.size(); i++) {
             ManagedThread mt = threads.get(i);
-            if (mt == t) {
+            if (mt.thread == t) {
                 return mt;
             }
         }
         return null;
     }
