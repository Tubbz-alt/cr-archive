diff a/test/hotspot/jtreg/vmTestbase/nsk/share/Wicket.java b/test/hotspot/jtreg/vmTestbase/nsk/share/Wicket.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/share/Wicket.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/share/Wicket.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -22,10 +22,14 @@
  */
 
 package nsk.share;
 
 import java.io.PrintStream;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.locks.Condition;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
 
 /**
  * Wicket provides a means for one or more threads to suspend execution
  * (to wait) until notified by one or more other threads that some set
  * of locks is now open.
@@ -58,10 +62,13 @@
     private PrintStream debugOutput = null;
 
     /** Wicket's string identifier */
     private String name = "";
 
+    private final Lock lock = new ReentrantLock();
+    private final Condition condition = lock.newCondition();
+
     /**
      * Construct a Wicket with only one closed lock.
      */
     public Wicket() {
         this(1);
@@ -104,22 +111,30 @@
      * the locks will be open by some other threads. One lock can be open
      * by invoking the unlock method for this Wicket.
      *
      * <p>Please note, that the method would ignore Thread.interrupt() requests.
      */
-    public synchronized void waitFor() {
-        ++waiters;
-        if (debugOutput != null) {
-            debugOutput.printf("Wicket %s: waitFor()\n", name);
-        }
+    public void waitFor() {
+        long id = System.currentTimeMillis();
 
-        while (count > 0) {
-            try {
-                wait();
-            } catch (InterruptedException e) {}
+        lock.lock();
+        try {
+            ++waiters;
+            if (debugOutput != null) {
+                debugOutput.printf("Wicket %d %s: waitFor(). There are %d waiters totally now.\n", id, name, waiters);
+            }
+
+            while (count > 0) {
+                try {
+                    condition.await();
+                } catch (InterruptedException e) {
+                }
+            }
+            --waiters;
+        } finally {
+            lock.unlock();
         }
-        --waiters;
     }
 
     /**
      * Wait for all locks of this Wicket to be open within the given
      * period of time.
@@ -148,29 +163,39 @@
      *
      * @param timeout the maximum time to wait in milliseconds
      * @return the number of closed locks
      * @throws IllegalArgumentException if timeout is less than 0
      */
-    public synchronized int waitFor(long timeout) {
-        if (debugOutput != null) {
-            debugOutput.printf("Wicket %s: waitFor(%d)\n", name, timeout);
-        }
-
+    public int waitFor(long timeout) {
         if (timeout < 0)
             throw new IllegalArgumentException(
-                "timeout value is negative: " + timeout);
-        ++waiters;
-        long waitTime = timeout;
-        long startTime = System.currentTimeMillis();
-        while (count > 0 && waitTime > 0) {
-            try {
-                wait(waitTime);
-            } catch (InterruptedException e) {}
-            waitTime = timeout - (System.currentTimeMillis() - startTime);
+                    "timeout value is negative: " + timeout);
+
+        long id = System.currentTimeMillis();
+
+        lock.lock();
+        try {
+            ++waiters;
+            if (debugOutput != null) {
+                debugOutput.printf("Wicket %d %s: waitFor(). There are %d waiters totally now.\n", id, name, waiters);
+            }
+
+            long waitTime = timeout;
+            long startTime = System.currentTimeMillis();
+
+            while (count > 0  && waitTime > 0) {
+                try {
+                    condition.await(waitTime, TimeUnit.MILLISECONDS);
+                } catch (InterruptedException e) {
+                }
+                waitTime = timeout - (System.currentTimeMillis() - startTime);
+            }
+            --waiters;
+            return count;
+        } finally {
+            lock.unlock();
         }
-        --waiters;
-        return (count);
     }
 
     /**
      * Unlock one closed lock.
      *
@@ -180,21 +205,27 @@
      * by invoking the waitFor method for this Wicket will be released
      * and re-enabled for thread scheduling purposes.
      *
      * @throws IllegalStateException if there is no one closed lock
      */
-    public synchronized void unlock() {
-        if (debugOutput != null) {
-            debugOutput.printf("Wicket %s: unlock()\n", name);
-        }
+    public void unlock() {
 
-        if (count == 0)
-            throw new IllegalStateException("locks are already open");
+        lock.lock();
+        try {
+            if (count == 0)
+                throw new IllegalStateException("locks are already open");
 
-        --count;
-        if (count == 0) {
-            notifyAll();
+            --count;
+            if (debugOutput != null) {
+                debugOutput.printf("Wicket %s: unlock() the count is now %d\n", name, count);
+            }
+
+            if (count == 0) {
+                condition.signalAll();
+            }
+        } finally {
+            lock.unlock();
         }
     }
 
     /**
      * Unlock all closed locks.
@@ -203,27 +234,38 @@
      *
      * <p>If any threads are waiting by invoking the waitFor method for
      * this Wicket then they will be released and re-enabled for thread
      * scheduling purposes.
      */
-    public synchronized void unlockAll() {
+    public void unlockAll() {
         if (debugOutput != null) {
             debugOutput.printf("Wicket %s: unlockAll()\n", name);
         }
 
-        count = 0;
-        notifyAll();
+        lock.lock();
+        try {
+            count = 0;
+            condition.signalAll();
+        } finally {
+            lock.unlock();
+        }
     }
 
     /**
      * Return current number of waiters - threads that are currently
      * waiting using one of waitFor methods.
      *
      * @return number of waiters
      */
-    public synchronized int getWaiters() {
-        if (debugOutput != null) {
-            debugOutput.printf("Wicket %s: getWaiters()\n", name);
+    public int getWaiters() {
+
+        lock.lock();
+        try {
+            if (debugOutput != null) {
+                debugOutput.printf("Wicket %s: getWaiters()\n", name);
+            }
+            return waiters;
+        } finally {
+            lock.unlock();
         }
-        return waiters;
     }
 }
