diff a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/stress/thread/strace010.java b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/stress/thread/strace010.java
--- a/test/hotspot/jtreg/vmTestbase/nsk/monitoring/stress/thread/strace010.java
+++ b/test/hotspot/jtreg/vmTestbase/nsk/monitoring/stress/thread/strace010.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2003, 2018, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2003, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -30,11 +30,11 @@
 import nsk.monitoring.share.*;
 
 /**
  * The test starts recursive threads, switches them  to the various
  * state after reaching defined depth and checks up their stack traces
- * and states gotten via the ThreadMBean interface. The test may be executed
+ * and states gotten via the ThreadMXBean interface. The test may be executed
  * with the following parameters:
  * <ul>
  *      <li>
  *          <code>depth</code> specifies depth of the recursion.
  *      <li>
@@ -76,12 +76,12 @@
  * specified parameters and switches them to the various state. The test sets
  * every thread should be switched in one of the following states:
  * <code>BLOCKED</code>, <code>WAITING</code>, <code>SLEEPING</code> or
  * <code>RUNNING</code>.
  * <p>After threads are reaching the specified state, test checks up their stack
- * traces and states gotten via the ThreadMBean interface.
- * <p>The test fails if state of some thread gotten via the ThreadMBean
+ * traces and states gotten via the ThreadMXBean interface.
+ * <p>The test fails if state of some thread gotten via the ThreadMXBean
  * interface doesn't correspond to the state specified by the test or stack
  * trace contains an extra element. Expected stack trace elements are specified
  * by {@link nsk.monitoring.share.ThreadMonitor ThreadMonitor}
  *
  * @see ThreadMonitor
