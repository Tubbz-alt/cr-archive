diff a/test/lib/jdk/test/lib/LockFreeLogger.java b/test/lib/jdk/test/lib/LockFreeLogger.java
--- a/test/lib/jdk/test/lib/LockFreeLogger.java
+++ b/test/lib/jdk/test/lib/LockFreeLogger.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2014, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2014, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,64 +21,45 @@
  * questions.
  */
 
 package jdk.test.lib;
 
-import java.util.Collection;
-import java.util.Comparator;
-import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
+import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
-import java.util.concurrent.atomic.AtomicInteger;
 import java.util.stream.Collectors;
 
 /**
  * A logger designed specifically to allow collecting ordered log messages
  * in a multi-threaded environment without involving any kind of locking.
  * <p>
  * It is particularly useful in situations when one needs to assert various
  * details about the tested thread state or the locks it hold while also wanting
  * to produce diagnostic log messages.
- * <p>
- * The logger does not provide any guarantees about the completness of the
- * logs written from different threads - it is up to the caller to make sure
- * {@code toString()} method is called only when all the activity has ceased
- * and the per-thread logs contain all the necessary data.
- *
- * @author Jaroslav Bachorik
- **/
+ */
 public class LockFreeLogger {
-    private final AtomicInteger logCntr = new AtomicInteger(0);
-    private final Collection<Map<Integer, String>> allRecords = new ConcurrentLinkedQueue<>();
-    private final ThreadLocal<Map<Integer, String>> records = ThreadLocal.withInitial(ConcurrentHashMap::new);
+    /**
+     * ConcurrentLinkedQueue implements non-blocking algorithm.
+     */
+    private final Queue<String> records = new ConcurrentLinkedQueue<>();
 
     public LockFreeLogger() {
-        allRecords.add(records.get());
     }
 
     /**
-     * Log a message
+     * Logs a message.
      * @param format Message format
      * @param params Message parameters
      */
     public void log(String format, Object ... params) {
-        int id = logCntr.getAndIncrement();
-        records.get().put(id, String.format(format, params));
+        records.add(String.format(format, params));
     }
 
     /**
-     * Will generate an aggregated log of chronologically ordered messages.
-     * <p>
-     * Make sure that you call this method only when all the related threads
-     * have finished; otherwise you might get incomplete data.
+     * Generates an aggregated log of chronologically ordered messages.
      *
      * @return An aggregated log of chronologically ordered messages
      */
     @Override
     public String toString() {
-        return allRecords.stream()
-            .flatMap(m -> m.entrySet().stream())
-            .sorted(Comparator.comparing(Map.Entry::getKey))
-            .map(Map.Entry::getValue)
-            .collect(Collectors.joining());
+        return records.stream().collect(Collectors.joining());
     }
 }
