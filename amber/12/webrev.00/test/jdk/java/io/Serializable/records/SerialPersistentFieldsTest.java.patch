diff a/test/jdk/java/io/Serializable/records/SerialPersistentFieldsTest.java b/test/jdk/java/io/Serializable/records/SerialPersistentFieldsTest.java
--- a/test/jdk/java/io/Serializable/records/SerialPersistentFieldsTest.java
+++ b/test/jdk/java/io/Serializable/records/SerialPersistentFieldsTest.java
@@ -30,18 +30,16 @@
  * @run testng/othervm --enable-preview SerialPersistentFieldsTest
  */
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.ObjectStreamClass;
 import java.io.ObjectStreamField;
 import java.io.Serializable;
-import java.io.UncheckedIOException;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 import java.math.BigDecimal;
 import jdk.internal.org.objectweb.asm.ClassReader;
 import jdk.internal.org.objectweb.asm.ClassVisitor;
@@ -227,17 +225,10 @@
     static byte[] addSerialPersistentFields(byte[] classBytes,
                                             ObjectStreamField[] spf) {
         ClassReader reader = new ClassReader(classBytes);
         ClassWriter writer = new ClassWriter(reader, COMPUTE_MAXS | COMPUTE_FRAMES);
         reader.accept(new SerialPersistentFieldsVisitor(writer, spf), 0);
-        try {
-            FileOutputStream fos = new FileOutputStream("R1.class");
-            fos.write(writer.toByteArray());
-            fos.close();
-        } catch (IOException ioe) {
-            throw new UncheckedIOException(ioe);
-        }
         return writer.toByteArray();
     }
 
     /** A visitor that adds a serialPersistentFields field, and assigns it in clinit. */
     static final class SerialPersistentFieldsVisitor extends ClassVisitor {
