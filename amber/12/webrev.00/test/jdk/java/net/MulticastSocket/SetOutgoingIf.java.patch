diff a/test/jdk/java/net/MulticastSocket/SetOutgoingIf.java b/test/jdk/java/net/MulticastSocket/SetOutgoingIf.java
--- a/test/jdk/java/net/MulticastSocket/SetOutgoingIf.java
+++ b/test/jdk/java/net/MulticastSocket/SetOutgoingIf.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2007, 2017, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2007, 2020, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -21,20 +21,35 @@
  * questions.
  */
 
 /*
  * @test
- * @bug 4742177
+ * @bug 4742177 8241786
+ * @library /test/lib
+ * @run main/othervm SetOutgoingIf
  * @summary Re-test IPv6 (and specifically MulticastSocket) with latest Linux & USAGI code
  */
+import java.io.IOException;
 import java.net.*;
 import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
+import jdk.test.lib.NetworkConfiguration;
 
 
-public class SetOutgoingIf {
-    private static int PORT = 9001;
+public class SetOutgoingIf implements AutoCloseable {
     private static String osname;
+    private final MulticastSocket SOCKET;
+    private final int PORT;
+    private final Map<NetIf, MulticastSender> sendersMap = new ConcurrentHashMap<>();
+    private SetOutgoingIf() {
+        try {
+            SOCKET = new MulticastSocket();
+            PORT = SOCKET.getLocalPort();
+        } catch (IOException io) {
+            throw new ExceptionInInitializerError(io);
+        }
+    }
 
     static boolean isWindows() {
         if (osname == null)
             osname = System.getProperty("os.name");
         return osname.contains("Windows");
@@ -43,24 +58,32 @@
     static boolean isMacOS() {
         return System.getProperty("os.name").contains("OS X");
     }
 
     private static boolean hasIPv6() throws Exception {
-        List<NetworkInterface> nics = Collections.list(
-                                        NetworkInterface.getNetworkInterfaces());
-        for (NetworkInterface nic : nics) {
-            List<InetAddress> addrs = Collections.list(nic.getInetAddresses());
-            for (InetAddress addr : addrs) {
-                if (addr instanceof Inet6Address)
-                    return true;
-            }
+        return NetworkConfiguration.probe()
+                .ip6Addresses()
+                .findAny()
+                .isPresent();
+    }
+
+    public static void main(String[] args) throws Exception {
+        try (var test = new SetOutgoingIf()) {
+            test.run();
         }
+    }
 
-        return false;
+    @Override
+    public void close() {
+        try {
+            SOCKET.close();
+        } finally {
+            sendersMap.values().stream().forEach(MulticastSender::close);
+        }
     }
 
-    public static void main(String[] args) throws Exception {
+    public void run() throws Exception {
         if (isWindows()) {
             System.out.println("The test only run on non-Windows OS. Bye.");
             return;
         }
 
@@ -97,15 +120,18 @@
                 }
             } else {
                 System.out.println("Ignore NetworkInterface nic == " + nic);
             }
         }
+        Collections.reverse(netIfs);
         if (netIfs.size() <= 1) {
             System.out.println("Need 2 or more network interfaces to run. Bye.");
             return;
         }
 
+        System.out.println("Using PORT: " + PORT);
+
         // We will send packets to one ipv4, and one ipv6
         // multicast group using each network interface :-
         //      224.1.1.1        --|
         //      ff02::1:1        --|--> using network interface #1
         //      224.1.2.1        --|
@@ -127,13 +153,13 @@
 
             debug("Adding " + groups + " groups for " + netIf.nic().getName());
             netIf.groups(groups);
 
             // use a separated thread to send to those 2 groups
-            Thread sender = new Thread(new Sender(netIf,
-                                                  groups,
-                                                  PORT));
+            var multicastSender = new MulticastSender(netIf, groups, PORT);
+            sendersMap.put(netIf, multicastSender);
+            Thread sender = new Thread(multicastSender);
             sender.setDaemon(true); // we want sender to stop when main thread exits
             sender.start();
         }
 
         // try to receive on each group, then check if the packet comes
@@ -141,92 +167,106 @@
         //
         byte[] buf = new byte[1024];
         for (NetIf netIf : netIfs) {
             NetworkInterface nic = netIf.nic();
             for (InetAddress group : netIf.groups()) {
-                MulticastSocket mcastsock = new MulticastSocket(PORT);
-                mcastsock.setSoTimeout(5000);   // 5 second
-                DatagramPacket packet = new DatagramPacket(buf, 0, buf.length);
-
-                // the interface supports the IP multicast group
-                debug("Joining " + group + " on " + nic.getName());
-                mcastsock.joinGroup(new InetSocketAddress(group, PORT), nic);
-
-                try {
-                    mcastsock.receive(packet);
-                    debug("received packet on " + packet.getAddress());
-                } catch (Exception e) {
-                    // test failed if any exception
-                    throw new RuntimeException(e);
-                }
+                try (MulticastSocket mcastsock = new MulticastSocket(PORT)) {
+                    mcastsock.setSoTimeout(5000);   // 5 second
+                    DatagramPacket packet = new DatagramPacket(buf, 0, buf.length);
+
+                    // the interface supports the IP multicast group
+                    debug("Joining " + group + " on " + nic.getName());
+                    mcastsock.joinGroup(new InetSocketAddress(group, PORT), nic);
+
+                    try {
+                        mcastsock.receive(packet);
+                        debug("received packet on " + packet.getAddress());
+                    } catch (Exception e) {
+                        // test failed if any exception
+                        throw new RuntimeException(e);
+                    }
 
-                // now check which network interface this packet comes from
-                NetworkInterface from = NetworkInterface.getByInetAddress(packet.getAddress());
-                NetworkInterface shouldbe = nic;
-                if (from != null) {
-                    if (!from.equals(shouldbe)) {
-                        System.out.println("Packets on group "
-                                        + group + " should come from "
-                                        + shouldbe.getName() + ", but came from "
-                                        + from.getName());
+                    // now check which network interface this packet comes from
+                    NetworkInterface from = NetworkInterface.getByInetAddress(packet.getAddress());
+                    NetworkInterface shouldbe = nic;
+                    if (from != null) {
+                        if (!from.equals(shouldbe)) {
+                            System.out.println("Packets on group "
+                                    + group + " should come from "
+                                    + shouldbe.getName() + ", but came from "
+                                    + from.getName());
+                        }
                     }
-                }
 
-                mcastsock.leaveGroup(new InetSocketAddress(group, PORT), nic);
+                    mcastsock.leaveGroup(new InetSocketAddress(group, PORT), nic);
+                }
             }
         }
     }
 
     private static boolean isTestExcludedInterface(NetworkInterface nif) {
-        if (isMacOS() && nif.getName().contains("awdl"))
-            return true;
-        String dName = nif.getDisplayName();
-        if (isWindows() && dName != null && dName.contains("Teredo"))
-            return true;
-        return false;
+       return !NetworkConfiguration.isTestable(nif)
+               || isMacOS() && nif.getName().startsWith("utun")
+               || !NetworkConfiguration.hasNonLinkLocalAddress(nif);
     }
 
     private static boolean debug = true;
 
     static void debug(String message) {
         if (debug)
             System.out.println(message);
     }
 }
 
-class Sender implements Runnable {
-    private NetIf netIf;
-    private List<InetAddress> groups;
-    private int port;
+class MulticastSender implements Runnable, AutoCloseable {
+    private final NetIf netIf;
+    private final List<InetAddress> groups;
+    private final int port;
+    private volatile boolean closed;
+    private long count;
 
-    public Sender(NetIf netIf,
+    public MulticastSender(NetIf netIf,
                   List<InetAddress> groups,
                   int port) {
         this.netIf = netIf;
         this.groups = groups;
         this.port = port;
     }
 
+    @Override
+    public void close() {
+        closed = true;
+    }
+
     public void run() {
-        try {
-            MulticastSocket mcastsock = new MulticastSocket();
-            mcastsock.setNetworkInterface(netIf.nic());
+        var nic = netIf.nic();
+        try (MulticastSocket mcastsock = new MulticastSocket()) {
+            mcastsock.setNetworkInterface(nic);
             List<DatagramPacket> packets = new LinkedList<DatagramPacket>();
 
             byte[] buf = "hello world".getBytes();
             for (InetAddress group : groups) {
                 packets.add(new DatagramPacket(buf, buf.length, new InetSocketAddress(group, port)));
             }
 
-            for (;;) {
-                for (DatagramPacket packet : packets)
+            while (!closed) {
+                for (DatagramPacket packet : packets) {
                     mcastsock.send(packet);
-
+                    count++;
+                }
+                System.out.printf("Sent %d packets from %s\n", count, nic.getName());
                 Thread.sleep(1000);   // sleep 1 second
             }
         } catch (Exception e) {
-            throw new RuntimeException(e);
+            if (!closed) {
+                System.err.println("Unexpected exception for MulticastSender("
+                        + nic.getName() + "): " + e);
+                e.printStackTrace();
+                throw new RuntimeException(e);
+            }
+        } finally {
+            System.out.printf("Sent %d packets from %s\n", count, nic.getName());
         }
     }
 }
 
 @SuppressWarnings("unchecked")
@@ -279,6 +319,5 @@
 
     void groups(List<InetAddress> groups) {
         this.groups = groups;
     }
 }
-
