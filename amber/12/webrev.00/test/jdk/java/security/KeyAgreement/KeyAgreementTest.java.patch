diff a/test/jdk/java/security/KeyAgreement/KeyAgreementTest.java b/test/jdk/java/security/KeyAgreement/KeyAgreementTest.java
--- a/test/jdk/java/security/KeyAgreement/KeyAgreementTest.java
+++ b/test/jdk/java/security/KeyAgreement/KeyAgreementTest.java
@@ -1,7 +1,7 @@
 /*
- * Copyright (c) 2018, 2019, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License version 2 only, as
  * published by the Free Software Foundation.
@@ -29,10 +29,12 @@
  *          It removes com/sun/crypto/provider/KeyAgreement/DHGenSecretKey.java
  *          as the same functionality for DiffieHellman is covered along with
  *          this test file was covered before with JDK-4936763.
  * @run main/othervm -Djdk.crypto.KeyAgreement.legacyKDF=true KeyAgreementTest
  *          DiffieHellman DH SunJCE
+ * @run main/othervm -Djdk.sunec.disableNative=false KeyAgreementTest
+ *     ECDHNative EC SunEC
  * @run main KeyAgreementTest ECDH EC SunEC
  * @run main KeyAgreementTest XDH XDH SunEC
  */
 import java.security.KeyPair;
 import java.security.KeyPairGenerator;
@@ -50,11 +52,16 @@
     public static void main(String[] args) throws Exception {
 
         String kaAlgo = args[0];
         String kpgAlgo = args[1];
         String provider = args[2];
+        System.out.println("Testing " + kaAlgo);
         AlgoSpec aSpec = AlgoSpec.valueOf(AlgoSpec.class, kaAlgo);
+        // Switch kaAlgo to ECDH as it is used for algorithm names
+        if (kaAlgo.equals("ECDHNative")) {
+            kaAlgo = "ECDH";
+        }
         List<AlgorithmParameterSpec> specs = aSpec.getAlgorithmParameterSpecs();
         for (AlgorithmParameterSpec spec : specs) {
             testKeyAgreement(provider, kaAlgo, kpgAlgo, spec);
         }
     }
@@ -67,11 +74,11 @@
         // EC curve supported for KeyGeneration can found between intersection
         // of curves define in
         // "java.base/share/classes/sun/security/util/CurveDB.java"
         // and
         // "jdk.crypto.ec/share/native/libsunec/impl/ecdecode.c"
-        ECDH(
+        ECDHNative(
                 // SEC2 prime curves
                 "secp112r1", "secp112r2", "secp128r1", "secp128r2", "secp160k1",
                 "secp160r1", "secp192k1", "secp192r1", "secp224k1", "secp224r1",
                 "secp256k1", "secp256r1", "secp384r1", "secp521r1", "SECP521R1",
                 // ANSI X9.62 prime curves
@@ -85,20 +92,22 @@
                 // ANSI X9.62 binary curves
                 "X9.62 c2tnb191v1", "X9.62 c2tnb191v2", "X9.62 c2tnb191v3",
                 "X9.62 c2tnb239v1", "X9.62 c2tnb239v2", "X9.62 c2tnb239v3",
                 "X9.62 c2tnb359v1", "X9.62 c2tnb431r1"
         ),
+        ECDH("secp256r1", "secp384r1", "secp521r1"),
         XDH("X25519", "X448", "x25519"),
         // There is no curve for DiffieHellman
         DiffieHellman(new String[]{});
 
         private final List<AlgorithmParameterSpec> specs = new ArrayList<>();
 
         private AlgoSpec(String... curves) {
             // Generate AlgorithmParameterSpec for each KeyExchangeAlgorithm
             for (String crv : curves) {
                 switch (this.name()) {
+                    case "ECDHNative":
                     case "ECDH":
                         specs.add(new ECGenParameterSpec(crv));
                         break;
                     case "XDH":
                         specs.add(new NamedParameterSpec(crv));
@@ -124,10 +133,17 @@
     private static void testKeyAgreement(String provider, String kaAlgo,
             String kpgAlgo, AlgorithmParameterSpec spec) throws Exception {
 
         KeyPairGenerator kpg = KeyPairGenerator.getInstance(kpgAlgo, provider);
         kpg.initialize(spec);
+        if (spec instanceof ECGenParameterSpec) {
+            System.out.println("Testing curve: " +
+                    ((ECGenParameterSpec)spec).getName());
+        } else if (spec instanceof NamedParameterSpec) {
+                System.out.println("Testing curve: " +
+                        ((NamedParameterSpec)spec).getName());
+        }
         KeyPair kp1 = kpg.generateKeyPair();
         KeyPair kp2 = kpg.generateKeyPair();
 
         // Uses KeyAgreement based on Provider search order.
         KeyAgreement ka1 = KeyAgreement.getInstance(kaAlgo);
