diff a/test/jdk/java/nio/channels/DatagramChannel/AdaptorMulticasting.java b/test/jdk/java/nio/channels/DatagramChannel/AdaptorMulticasting.java
--- a/test/jdk/java/nio/channels/DatagramChannel/AdaptorMulticasting.java
+++ b/test/jdk/java/nio/channels/DatagramChannel/AdaptorMulticasting.java
@@ -20,16 +20,16 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 /* @test
- * @bug 8236925
+ * @bug 8236925 8241786
  * @summary Test DatagramChannel socket adaptor as a MulticastSocket
  * @library /test/lib
  * @build jdk.test.lib.NetworkConfiguration
  *        jdk.test.lib.net.IPSupport
- * @run main AdaptorMulticasting
+ * @run main/othervm AdaptorMulticasting
  * @run main/othervm -Djava.net.preferIPv4Stack=true AdaptorMulticasting
  */
 
 import java.io.IOException;
 import java.net.DatagramPacket;
@@ -41,10 +41,11 @@
 import java.net.SocketAddress;
 import java.net.SocketException;
 import java.net.SocketTimeoutException;
 import java.net.SocketOption;
 import java.nio.channels.DatagramChannel;
+import java.util.Arrays;
 import java.util.List;
 import java.util.stream.Collectors;
 import static java.net.StandardSocketOptions.*;
 import static java.net.StandardProtocolFamily.*;
 
@@ -127,10 +128,13 @@
      */
     static void testJoinGroup1(ProtocolFamily family,
                                MulticastSocket s,
                                InetAddress group,
                                NetworkInterface ni) throws IOException {
+
+        System.out.format("testJoinGroup1: local socket address: %s%n", s.getLocalSocketAddress());
+
         // check network interface not set
         assertTrue(s.getOption(IP_MULTICAST_IF) == null);
 
         // join
         s.joinGroup(group);
@@ -177,10 +181,13 @@
      */
     static void testJoinGroup2(ProtocolFamily family,
                                MulticastSocket s,
                                InetAddress group,
                                NetworkInterface ni) throws IOException {
+
+        System.out.format("testJoinGroup2: local socket address: %s%n", s.getLocalSocketAddress());
+
         // check network interface not set
         assertTrue(s.getOption(IP_MULTICAST_IF) == null);
 
         // join on default interface
         s.joinGroup(new InetSocketAddress(group, 0), null);
@@ -396,10 +403,13 @@
 
     /**
      * Send a datagram to the given multicast group and check that it is received.
      */
     static void testSendReceive(MulticastSocket s, InetAddress group) throws IOException {
+
+        System.out.println("testSendReceive");
+
         // outgoing multicast interface needs to be set
         assertTrue(s.getOption(IP_MULTICAST_IF) != null);
 
         SocketAddress target = new InetSocketAddress(group, s.getLocalPort());
         byte[] message = "hello".getBytes("UTF-8");
@@ -421,28 +431,41 @@
     /**
      * Send a datagram to the given multicast group and check that it is not
      * received.
      */
     static void testSendNoReceive(MulticastSocket s, InetAddress group) throws IOException {
+
+        System.out.println("testSendNoReceive");
+
         // outgoing multicast interface needs to be set
         assertTrue(s.getOption(IP_MULTICAST_IF) != null);
 
         SocketAddress target = new InetSocketAddress(group, s.getLocalPort());
-        byte[] message = "hello".getBytes("UTF-8");
+        long nano = System.nanoTime();
+        String text = nano + ": hello";
+        byte[] message = text.getBytes("UTF-8");
 
         // send datagram to multicast group
         DatagramPacket p = new DatagramPacket(message, message.length);
         p.setSocketAddress(target);
         s.send(p, (byte) 1);
 
         // datagram should not be received
         s.setSoTimeout(500);
         p = new DatagramPacket(new byte[1024], 100);
-        try {
-            s.receive(p);
-            assertTrue(false);
-        } catch (SocketTimeoutException expected) { }
+        while (true) {
+            try {
+                s.receive(p);
+                if (Arrays.equals(p.getData(), p.getOffset(), p.getLength(), message, 0, message.length)) {
+                    throw new RuntimeException("message shouldn't have been received");
+                } else {
+                    System.out.format("Received unexpected message from %s%n", p.getSocketAddress());
+                }
+            } catch (SocketTimeoutException expected) {
+                break;
+            }
+        }
     }
 
 
     static void assertTrue(boolean e) {
         if (!e) throw new RuntimeException();
