diff a/test/jdk/sun/tools/jhsdb/BasicLauncherTest.java b/test/jdk/sun/tools/jhsdb/BasicLauncherTest.java
--- a/test/jdk/sun/tools/jhsdb/BasicLauncherTest.java
+++ b/test/jdk/sun/tools/jhsdb/BasicLauncherTest.java
@@ -23,11 +23,11 @@
 
 /**
  * @test
  * @summary Basic test for jhsdb launcher
  * @library /test/lib
- * @requires vm.hasSAandCanAttach
+ * @requires vm.hasSA
  * @build jdk.test.lib.apps.*
  * @run main BasicLauncherTest
  */
 
 import java.io.BufferedReader;
@@ -41,10 +41,11 @@
 import jdk.test.lib.process.OutputAnalyzer;
 import jdk.test.lib.process.ProcessTools;
 import jdk.test.lib.apps.LingeredApp;
 import jdk.test.lib.Platform;
 import jdk.test.lib.JDKToolLauncher;
+import jdk.test.lib.SA.SATestUtils;
 import jdk.test.lib.Utils;
 
 public class BasicLauncherTest {
 
     private static LingeredApp theApp = null;
@@ -76,11 +77,11 @@
             System.out.println("Starting clhsdb against " + theApp.getPid());
             JDKToolLauncher launcher = createSALauncher();
             launcher.addToolArg("clhsdb");
             launcher.addToolArg("--pid=" + Long.toString(theApp.getPid()));
 
-            ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());
+            ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);
             processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
             Process toolProcess = processBuilder.start();
 
             try (OutputStream out = toolProcess.getOutputStream()) {
                 out.write("universe\n".getBytes());
@@ -120,28 +121,21 @@
             LingeredApp.stopApp(theApp);
         }
     }
 
     public static void launchJStack() throws IOException {
-
-        if (Platform.isOSX()) {
-            // Coredump stackwalking is not implemented for Darwin
-            System.out.println("This test is not expected to work on OS X. Skipping");
-            return;
-        }
-
         System.out.println("Starting LingeredApp");
         try {
             theApp = LingeredApp.startApp("-Xmx256m");
 
             System.out.println("Starting jstack against " + theApp.getPid());
             JDKToolLauncher launcher = createSALauncher();
 
             launcher.addToolArg("jstack");
             launcher.addToolArg("--pid=" + Long.toString(theApp.getPid()));
 
-            ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());
+            ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);
             OutputAnalyzer output = ProcessTools.executeProcess(processBuilder);;
             output.shouldContain("No deadlocks found");
             output.shouldNotContain("illegal bci");
             output.shouldNotContain("AssertionFailure");
             output.shouldHaveExitValue(0);
@@ -173,11 +167,11 @@
                 launcher.addToolArg(cmd);
             }
 
             launcher.addToolArg("--pid=" + Long.toString(theApp.getPid()));
 
-            ProcessBuilder processBuilder = new ProcessBuilder(launcher.getCommand());
+            ProcessBuilder processBuilder = SATestUtils.createProcessBuilder(launcher);
             processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);
             OutputAnalyzer output = ProcessTools.executeProcess(processBuilder);;
             output.shouldContain(expectedMessage);
             unexpectedMessage.ifPresent(output::shouldNotContain);
             output.shouldHaveExitValue(0);
@@ -196,10 +190,11 @@
         launch(expectedMessage, Optional.ofNullable(unexpectedMessage),
                                                        Arrays.asList(toolArgs));
     }
 
     public static void main(String[] args) throws Exception {
+        SATestUtils.skipIfCannotAttach(); // throws SkippedException if attach not expected to work.
 
         launchCLHSDB();
 
         launch("compiler detected", null, "jmap", "--clstats");
         launchJStack();
