diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Flags.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Flags.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Flags.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Flags.java
@@ -365,18 +365,29 @@
      *  accessors and fields
      */
     public static final int GENERATED_MEMBER = 1<<24; // MethodSymbols and VarSymbols
 
     /**
+<<<<<<< HEAD
      * Flag to indicate sealed class/interface declaration.
      */
     public static final long SEALED = 1L<<62; // ClassSymbols
 
     /**
      * Flag to indicate that the class/interface was declared with the non-sealed modifier.
      */
     public static final long NON_SEALED = 1L<<63; // ClassSymbols
+=======
+     * Flag for concise methods `=`
+     */
+    public static final long CONCISE_EQUAL = 1L<<61;
+
+    /**
+     * Flag for concise methods `->`
+     */
+    public static final long CONCISE_ARROW = 1L<<62;
+>>>>>>> 7dcb10d185fadcb37bc16ec742bb1e82369ff7b8
 
     /** Modifier masks.
      */
     public static final int
         AccessFlags           = PUBLIC | PROTECTED | PRIVATE,
@@ -506,17 +517,22 @@
         PREVIEW_API(Flags.PREVIEW_API),
         PREVIEW_ESSENTIAL_API(Flags.PREVIEW_ESSENTIAL_API),
         MATCH_BINDING(Flags.MATCH_BINDING),
         MATCH_BINDING_TO_OUTER(Flags.MATCH_BINDING_TO_OUTER),
         RECORD(Flags.RECORD),
+<<<<<<< HEAD
         SEALED(Flags.SEALED),
         NON_SEALED(Flags.NON_SEALED) {
             @Override
             public String toString() {
                 return "non-sealed";
             }
         };
+=======
+        CONCISE_EQUAL(Flags.CONCISE_EQUAL),
+        CONCISE_ARROW(Flags.CONCISE_ARROW);
+>>>>>>> 7dcb10d185fadcb37bc16ec742bb1e82369ff7b8
 
         Flag(long flag) {
             this.value = flag;
             this.lowercaseName = StringUtils.toLowerCase(name());
         }
diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Source.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Source.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Source.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/code/Source.java
@@ -207,11 +207,15 @@
         SWITCH_EXPRESSION(JDK14, Fragments.FeatureSwitchExpressions, DiagKind.PLURAL),
         TEXT_BLOCKS(JDK15, Fragments.FeatureTextBlocks, DiagKind.PLURAL),
         PATTERN_MATCHING_IN_INSTANCEOF(JDK15, Fragments.FeaturePatternMatchingInstanceof, DiagKind.NORMAL),
         REIFIABLE_TYPES_INSTANCEOF(JDK15, Fragments.FeatureReifiableTypesInstanceof, DiagKind.PLURAL),
         RECORDS(JDK15, Fragments.FeatureRecords, DiagKind.PLURAL),
+<<<<<<< HEAD
         SEALED_CLASSES(JDK15, Fragments.FeatureSealedClasses, DiagKind.PLURAL),
+=======
+        CONCISE_METHOD_BODIES(JDK13, Fragments.FeatureConciseMethodBodies, DiagKind.PLURAL);
+>>>>>>> 7dcb10d185fadcb37bc16ec742bb1e82369ff7b8
         ;
 
         enum DiagKind {
             NORMAL,
             PLURAL;
