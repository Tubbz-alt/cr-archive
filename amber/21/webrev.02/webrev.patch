diff a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
--- a/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
+++ b/src/jdk.compiler/share/classes/com/sun/tools/javac/comp/Attr.java
@@ -5089,11 +5089,16 @@
                                                   .map(s -> (ClassSymbol) s.tsym)
                                                   .collect(List.collector());
 
             if (sealedSupers.isEmpty()) {
                 if ((c.flags_field & Flags.NON_SEALED) != 0) {
-                    log.error(TreeInfo.diagnosticPositionFor(c, env.tree), Errors.NonSealedWithNoSealedSupertype(c));
+                    boolean hasErrorSuper = types.directSupertypes(c.type)
+                                                 .stream()
+                                                 .anyMatch(s -> s.tsym.kind == Kind.ERR);
+                    if (!hasErrorSuper) {
+                        log.error(TreeInfo.diagnosticPositionFor(c, env.tree), Errors.NonSealedWithNoSealedSupertype(c));
+                    }
                 }
             } else {
                 if (c.isLocal() && !c.isEnum()) {
                     log.error(TreeInfo.diagnosticPositionFor(c, env.tree), Errors.LocalClassesCantExtendSealed);
                 }
diff a/src/jdk.jshell/share/classes/jdk/jshell/Eval.java b/src/jdk.jshell/share/classes/jdk/jshell/Eval.java
--- a/src/jdk.jshell/share/classes/jdk/jshell/Eval.java
+++ b/src/jdk.jshell/share/classes/jdk/jshell/Eval.java
@@ -77,10 +77,11 @@
 import jdk.jshell.spi.ExecutionControl.UserException;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Collectors.toSet;
 import static java.util.Collections.singletonList;
 import com.sun.tools.javac.code.Symbol.TypeSymbol;
+import java.util.EnumSet;
 import static jdk.internal.jshell.debug.InternalDebugControl.DBG_GEN;
 import static jdk.jshell.Util.DOIT_METHOD_NAME;
 import static jdk.jshell.Util.PREFIX_PATTERN;
 import static jdk.jshell.Util.expunge;
 import static jdk.jshell.Snippet.SubKind.SINGLE_TYPE_IMPORT_SUBKIND;
@@ -188,11 +189,11 @@
      *
      * @param userSource the source of the snippet
      * @return usually a singleton list of Snippet, but may be empty or multiple
      */
     private List<Snippet> sourceToSnippets(String userSource) {
-        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, false).cleared());
+        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, false, false).cleared());
         if (compileSource.length() == 0) {
             return Collections.emptyList();
         }
         return state.taskFactory.parse(compileSource, pt -> {
             List<? extends Tree> units = pt.units();
@@ -209,11 +210,11 @@
                         : pt.getDiagnostics();
                 return compileFailResult(dlist, userSource, kindOfTree(unitTree));
             }
 
             // Erase illegal/ignored modifiers
-            String compileSourceInt = new MaskCommentsAndModifiers(compileSource, true).cleared();
+            String compileSourceInt = new MaskCommentsAndModifiers(compileSource, true, CLASS_LIKE_KINDS.contains(unitTree.getKind())).cleared();
 
             state.debug(DBG_GEN, "Kind: %s -- %s\n", unitTree.getKind(), unitTree);
             switch (unitTree.getKind()) {
                 case IMPORT:
                     return processImport(userSource, compileSourceInt);
@@ -239,10 +240,15 @@
                     return processStatement(userSource, compileSourceInt);
             }
         });
     }
 
+    @SuppressWarnings("preview")
+    private static final Set<Tree.Kind> CLASS_LIKE_KINDS =
+            EnumSet.of(Tree.Kind.ANNOTATION_TYPE, Tree.Kind.CLASS, Tree.Kind.ENUM,
+                       Tree.Kind.INTERFACE, Tree.Kind.RECORD);
+
     private List<Snippet> processImport(String userSource, String compileSource) {
         Wrap guts = Wrap.simpleWrap(compileSource);
         Matcher mat = IMPORT_PATTERN.matcher(compileSource);
         String fullname;
         String name;
@@ -814,11 +820,11 @@
         Snippet snip = new ErroneousSnippet(key, userSource, null,
                 probableKind, SubKind.UNKNOWN_SUBKIND);
         snip.setFailed(diags);
 
         // Install  wrapper for query by SourceCodeAnalysis.wrapper
-        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, true).cleared());
+        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, true, probableKind == Kind.TYPE_DECL).cleared());
         OuterWrap outer;
         switch (probableKind) {
             case IMPORT:
                 outer = state.outerMap.wrapImport(Wrap.simpleWrap(compileSource), snip);
                 break;
@@ -1213,11 +1219,11 @@
                 return message;
             }
     }
 
     private DiagList modifierDiagnostics(ModifiersTree modtree,
-                                         final TreeDissector dis, boolean isAbstractProhibited) {
+                                         final TreeDissector dis, boolean isNotClass) {
 
         List<Modifier> list = new ArrayList<>();
         boolean fatal = false;
         for (Modifier mod : modtree.getFlags()) {
             switch (mod) {
@@ -1225,22 +1231,28 @@
                 case NATIVE:
                     list.add(mod);
                     fatal = true;
                     break;
                 case ABSTRACT:
-                    if (isAbstractProhibited) {
+                    if (isNotClass) {
                         list.add(mod);
                         fatal = true;
                     }
                     break;
                 case PUBLIC:
                 case PROTECTED:
                 case PRIVATE:
                     // quietly ignore, user cannot see effects one way or the other
                     break;
-                case STATIC:
                 case FINAL:
+                    if (isNotClass) {
+                        //OK to declare a class final, to aid sealed classes
+                        list.add(mod);
+                        break;
+                    }
+                    break;
+                case STATIC:
                     list.add(mod);
                     break;
             }
         }
         if (list.isEmpty()) {
diff a/src/jdk.jshell/share/classes/jdk/jshell/MaskCommentsAndModifiers.java b/src/jdk.jshell/share/classes/jdk/jshell/MaskCommentsAndModifiers.java
--- a/src/jdk.jshell/share/classes/jdk/jshell/MaskCommentsAndModifiers.java
+++ b/src/jdk.jshell/share/classes/jdk/jshell/MaskCommentsAndModifiers.java
@@ -35,15 +35,15 @@
  * @author Robert Field
  */
 class MaskCommentsAndModifiers {
 
     private final static Set<String> IGNORED_MODIFIERS =
-            Stream.of( "public", "protected", "private", "static", "final" )
+            Stream.of( "public", "protected", "private", "static" )
                     .collect( Collectors.toSet() );
 
     private final static Set<String> OTHER_MODIFIERS =
-            Stream.of( "abstract", "strictfp", "transient", "volatile", "synchronized", "native", "default" )
+            Stream.of( "abstract", "final", "strictfp", "transient", "volatile", "synchronized", "native", "default" )
                     .collect( Collectors.toSet() );
 
     // Builder to accumulate non-masked characters
     private final StringBuilder sbCleared = new StringBuilder();
 
@@ -64,17 +64,21 @@
 
     // Do we mask-off ignored modifiers?  Set by parameter and turned off after
     // initial modifier section
     private boolean maskModifiers;
 
+    //is modifier "final" allowed?
+    private final boolean finalAllowed;
+
     // Does the string end with an unclosed '/*' style comment?
     private boolean openToken = false;
 
-    MaskCommentsAndModifiers(String s, boolean maskModifiers) {
+    MaskCommentsAndModifiers(String s, boolean maskModifiers, boolean finalAllowed) {
         this.str = s;
         this.length = s.length();
         this.maskModifiers = maskModifiers;
+        this.finalAllowed = finalAllowed;
         read();
         while (c >= 0) {
             next();
             read();
         }
@@ -248,11 +252,11 @@
                         writeTo(sb, c);
                         read();
                     } while (Character.isJavaIdentifierPart(c));
                     unread();
                     String id = sb.toString();
-                    if (maskModifiers && IGNORED_MODIFIERS.contains(id)) {
+                    if (maskModifiers && (IGNORED_MODIFIERS.contains(id) || (!finalAllowed && "final".equals(id)))) {
                         writeMask(sb);
                     } else {
                         write(sb);
                         if (maskModifiers && !OTHER_MODIFIERS.contains(id)) {
                             maskModifiers = false;
diff a/src/jdk.jshell/share/classes/jdk/jshell/SourceCodeAnalysisImpl.java b/src/jdk.jshell/share/classes/jdk/jshell/SourceCodeAnalysisImpl.java
--- a/src/jdk.jshell/share/classes/jdk/jshell/SourceCodeAnalysisImpl.java
+++ b/src/jdk.jshell/share/classes/jdk/jshell/SourceCodeAnalysisImpl.java
@@ -167,11 +167,11 @@
         INDEXER.submit(() -> refreshIndexes(cpVersion));
     }
 
     @Override
     public CompletionInfo analyzeCompletion(String srcInput) {
-        MaskCommentsAndModifiers mcm = new MaskCommentsAndModifiers(srcInput, false);
+        MaskCommentsAndModifiers mcm = new MaskCommentsAndModifiers(srcInput, false, false);
         if (mcm.endsWithOpenToken()) {
             proc.debug(DBG_COMPA, "Incomplete (open comment): %s\n", srcInput);
             return new CompletionInfoImpl(DEFINITELY_INCOMPLETE, null, srcInput + '\n');
         }
         String cleared = mcm.cleared();
diff a/src/jdk.jshell/share/classes/jdk/jshell/TreeDependencyScanner.java b/src/jdk.jshell/share/classes/jdk/jshell/TreeDependencyScanner.java
--- a/src/jdk.jshell/share/classes/jdk/jshell/TreeDependencyScanner.java
+++ b/src/jdk.jshell/share/classes/jdk/jshell/TreeDependencyScanner.java
@@ -64,15 +64,17 @@
     }
 
     // -- Differentiate declaration references from body references ---
 
     @Override
+    @SuppressWarnings("preview")
     public Void visitClass(ClassTree node, Set<String> p) {
         scan(node.getModifiers(), p);
         scan(node.getTypeParameters(), p);
         scan(node.getExtendsClause(), p);
         scan(node.getImplementsClause(), p);
+        scan(node.getPermitsClause(), p);
         scan(node.getMembers(), body);
         return null;
     }
 
     @Override
diff a/test/langtools/jdk/jshell/ClassesTest.java b/test/langtools/jdk/jshell/ClassesTest.java
--- a/test/langtools/jdk/jshell/ClassesTest.java
+++ b/test/langtools/jdk/jshell/ClassesTest.java
@@ -249,31 +249,31 @@
 
     public void classesIgnoredModifiers() {
         assertEval("public interface A { }");
         assertDeclareWarn1("static class B implements A { }",
                 new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 6, 0, -1, -1, Diagnostic.Kind.WARNING));
-        assertDeclareWarn1("final interface C extends A { }",
-                new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 5, 0, -1, -1, Diagnostic.Kind.WARNING));
+        assertDeclareWarn1("static interface C extends A { }",
+                new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 6, 0, -1, -1, Diagnostic.Kind.WARNING));
         assertActiveKeys();
     }
 
     public void classesIgnoredModifiersAnnotation() {
         assertEval("public @interface X { }");
         assertEval("@X public interface A { }");
         assertDeclareWarn1("@X static class B implements A { }",
                 new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 9, 0, -1, -1, Diagnostic.Kind.WARNING));
-        assertDeclareWarn1("@X final interface C extends A { }",
-                new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 8, 0, -1, -1, Diagnostic.Kind.WARNING));
+        assertDeclareWarn1("@X static interface C extends A { }",
+                new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 9, 0, -1, -1, Diagnostic.Kind.WARNING));
         assertActiveKeys();
     }
 
     public void classesIgnoredModifiersOtherModifiers() {
         assertEval("strictfp public interface A { }");
         assertDeclareWarn1("strictfp static class B implements A { }",
                 new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 15, 0, -1, -1, Diagnostic.Kind.WARNING));
-        assertDeclareWarn1("strictfp final interface C extends A { }",
-                new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 14, 0, -1, -1, Diagnostic.Kind.WARNING));
+        assertDeclareWarn1("strictfp static interface C extends A { }",
+                new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 15, 0, -1, -1, Diagnostic.Kind.WARNING));
         assertActiveKeys();
     }
 
     public void ignoreModifierSpaceIssue() {
         assertEval("interface I { void f(); } ");
diff a/test/langtools/jdk/jshell/ErrorTranslationTest.java b/test/langtools/jdk/jshell/ErrorTranslationTest.java
--- a/test/langtools/jdk/jshell/ErrorTranslationTest.java
+++ b/test/langtools/jdk/jshell/ErrorTranslationTest.java
@@ -80,10 +80,13 @@
                 newExpectedDiagnostic(0, 5, 0, -1, -1, Diagnostic.Kind.WARNING)};
         String[] mods = {"static", "final"};
         for (int i = 0; i < mods.length; ++i) {
             for (String code : new String[] {"class A {}", "void f() {}", "int a;"}) {
                 final int finalI = i;
+                if ("final".equals(mods[finalI]) && "class A {}".equals(code)) {
+                    continue; //skip, final classes are allowed
+                }
                 list.add(a -> assertDiagnostic(a, mods[finalI] + " " + code, diagnostics[finalI]));
             }
         }
         test(list.toArray(new ReplTest[list.size()]));
     }
diff a/test/langtools/jdk/jshell/IgnoreTest.java b/test/langtools/jdk/jshell/IgnoreTest.java
--- a/test/langtools/jdk/jshell/IgnoreTest.java
+++ b/test/langtools/jdk/jshell/IgnoreTest.java
@@ -119,12 +119,12 @@
     }
 
     public void testClassModifier() {
         TypeDeclSnippet c4 = (TypeDeclSnippet) assertDeclareWarn1("static class C4 {}", "jdk.eval.warn.illegal.modifiers");
         assertTypeDeclSnippet(c4, "C4", VALID, CLASS_SUBKIND, 0, 1);
-        TypeDeclSnippet c5 = (TypeDeclSnippet) assertDeclareWarn1("final class C5 {}", "jdk.eval.warn.illegal.modifiers");
-        assertTypeDeclSnippet(c5, "C5", VALID, CLASS_SUBKIND, 0, 1);
+        TypeDeclSnippet c5 = classKey(assertEval("final class C5 {}"));
+        assertTypeDeclSnippet(c5, "C5", VALID, CLASS_SUBKIND, 0, 0);
     }
 
     public void testInsideModifier() {
         assertEval("import static java.lang.reflect.Modifier.*;");
         assertEval("class C {"
diff a/test/langtools/jdk/jshell/ModifiersTest.java b/test/langtools/jdk/jshell/ModifiersTest.java
--- a/test/langtools/jdk/jshell/ModifiersTest.java
+++ b/test/langtools/jdk/jshell/ModifiersTest.java
@@ -42,11 +42,11 @@
 
     @DataProvider(name = "ignoredModifiers")
     public Object[][] getTestCases() {
         List<Object[]> testCases = new ArrayList<>();
         String[] ignoredModifiers = new String[] {
-            "static", "final"
+            "static"
         };
         String[] silentlyIgnoredModifiers = new String[] {
             "public", "protected", "private"
         };
         String[] before = new String[] {
diff a/test/langtools/jdk/jshell/SealedClassesTest.java b/test/langtools/jdk/jshell/SealedClassesTest.java
--- /dev/null
+++ b/test/langtools/jdk/jshell/SealedClassesTest.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ */
+
+/*
+ * @test
+ * @summary Test sealed class in jshell
+ * @modules jdk.jshell
+ * @build KullaTesting TestingInputStream ExpectedDiagnostic
+ * @run testng SealedClassesTest
+ */
+
+import javax.lang.model.SourceVersion;
+
+import jdk.jshell.TypeDeclSnippet;
+import jdk.jshell.Snippet.Status;
+
+import org.testng.annotations.BeforeMethod;
+import org.testng.annotations.Test;
+
+import static jdk.jshell.Snippet.Status.VALID;
+
+@Test
+public class SealedClassesTest extends KullaTesting {
+
+    public void testSealed() {
+        TypeDeclSnippet base = classKey(
+                assertEval("sealed class B permits I {}",
+                           ste(MAIN_SNIPPET, Status.NONEXISTENT, Status.RECOVERABLE_NOT_DEFINED, false, null)));
+        assertEval("final class I extends B {}",
+                   added(VALID),
+                   ste(base, Status.RECOVERABLE_NOT_DEFINED, Status.VALID, true, null));
+        assertEval("new I()");
+    }
+
+    public void testNonSealed() {
+        TypeDeclSnippet base = classKey(
+                assertEval("sealed class B permits I {}",
+                           ste(MAIN_SNIPPET, Status.NONEXISTENT, Status.RECOVERABLE_NOT_DEFINED, false, null)));
+        assertEval("non-sealed class I extends B {}",
+                   added(VALID),
+                   ste(base, Status.RECOVERABLE_NOT_DEFINED, Status.VALID, true, null));
+        assertEval("class I2 extends I {}");
+        assertEval("new I2()");
+    }
+
+    @BeforeMethod
+    public void setUp() {
+        setUp(b -> b.compilerOptions("--enable-preview", "-source", String.valueOf(SourceVersion.latest().ordinal()))
+                    .remoteVMOptions("--enable-preview"));
+    }
+}
diff a/test/langtools/tools/javac/sealed/SealedCompilationTests.java b/test/langtools/tools/javac/sealed/SealedCompilationTests.java
--- a/test/langtools/tools/javac/sealed/SealedCompilationTests.java
+++ b/test/langtools/tools/javac/sealed/SealedCompilationTests.java
@@ -53,10 +53,11 @@
 
 import com.sun.tools.javac.util.Assert;
 
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertTrue;
+import static org.testng.Assert.fail;
 import org.testng.annotations.Test;
 import tools.javac.combo.CompilationTestCase;
 
 import toolbox.ToolBox;
 import toolbox.JavacTask;
@@ -685,10 +686,22 @@
         if (!output.containsAll(expected)) {
             throw new AssertionError("Expected output not found. Expected: " + expected);
         }
     }
 
+    public void testNonSealedErroneousSuper() {
+        assertFail("compiler.err.cant.resolve",
+                   d -> {
+                       if (diags.keys().size() != 1) {
+                           fail("Unexpected errors: " + diags.keys());
+                       }
+                   },
+                   """
+                   non-sealed class C extends Undefined {}
+                   """);
+    }
+
     public void testIllFormedNonSealed() {
         for (String s : List.of(
             """
             sealed class C permits Sub {}
             non -sealed class Sub extends C {}
