diff a/src/jdk.jshell/share/classes/jdk/jshell/Eval.java b/src/jdk.jshell/share/classes/jdk/jshell/Eval.java
--- a/src/jdk.jshell/share/classes/jdk/jshell/Eval.java
+++ b/src/jdk.jshell/share/classes/jdk/jshell/Eval.java
@@ -77,10 +77,11 @@
 import jdk.jshell.spi.ExecutionControl.UserException;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Collectors.toSet;
 import static java.util.Collections.singletonList;
 import com.sun.tools.javac.code.Symbol.TypeSymbol;
+import java.util.EnumSet;
 import static jdk.internal.jshell.debug.InternalDebugControl.DBG_GEN;
 import static jdk.jshell.Util.DOIT_METHOD_NAME;
 import static jdk.jshell.Util.PREFIX_PATTERN;
 import static jdk.jshell.Util.expunge;
 import static jdk.jshell.Snippet.SubKind.SINGLE_TYPE_IMPORT_SUBKIND;
@@ -188,11 +189,11 @@
      *
      * @param userSource the source of the snippet
      * @return usually a singleton list of Snippet, but may be empty or multiple
      */
     private List<Snippet> sourceToSnippets(String userSource) {
-        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, false).cleared());
+        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, false, false).cleared());
         if (compileSource.length() == 0) {
             return Collections.emptyList();
         }
         return state.taskFactory.parse(compileSource, pt -> {
             List<? extends Tree> units = pt.units();
@@ -209,11 +210,11 @@
                         : pt.getDiagnostics();
                 return compileFailResult(dlist, userSource, kindOfTree(unitTree));
             }
 
             // Erase illegal/ignored modifiers
-            String compileSourceInt = new MaskCommentsAndModifiers(compileSource, true).cleared();
+            String compileSourceInt = new MaskCommentsAndModifiers(compileSource, true, CLASS_LIKE_KINDS.contains(unitTree.getKind())).cleared();
 
             state.debug(DBG_GEN, "Kind: %s -- %s\n", unitTree.getKind(), unitTree);
             switch (unitTree.getKind()) {
                 case IMPORT:
                     return processImport(userSource, compileSourceInt);
@@ -239,10 +240,15 @@
                     return processStatement(userSource, compileSourceInt);
             }
         });
     }
 
+    @SuppressWarnings("preview")
+    private static final Set<Tree.Kind> CLASS_LIKE_KINDS =
+            EnumSet.of(Tree.Kind.ANNOTATION_TYPE, Tree.Kind.CLASS, Tree.Kind.ENUM,
+                       Tree.Kind.INTERFACE, Tree.Kind.RECORD);
+
     private List<Snippet> processImport(String userSource, String compileSource) {
         Wrap guts = Wrap.simpleWrap(compileSource);
         Matcher mat = IMPORT_PATTERN.matcher(compileSource);
         String fullname;
         String name;
@@ -814,11 +820,11 @@
         Snippet snip = new ErroneousSnippet(key, userSource, null,
                 probableKind, SubKind.UNKNOWN_SUBKIND);
         snip.setFailed(diags);
 
         // Install  wrapper for query by SourceCodeAnalysis.wrapper
-        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, true).cleared());
+        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, true, probableKind == Kind.TYPE_DECL).cleared());
         OuterWrap outer;
         switch (probableKind) {
             case IMPORT:
                 outer = state.outerMap.wrapImport(Wrap.simpleWrap(compileSource), snip);
                 break;
