diff a/src/jdk.jshell/share/classes/jdk/jshell/Eval.java b/src/jdk.jshell/share/classes/jdk/jshell/Eval.java
--- a/src/jdk.jshell/share/classes/jdk/jshell/Eval.java
+++ b/src/jdk.jshell/share/classes/jdk/jshell/Eval.java
@@ -77,10 +77,11 @@
 import jdk.jshell.spi.ExecutionControl.UserException;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Collectors.toSet;
 import static java.util.Collections.singletonList;
 import com.sun.tools.javac.code.Symbol.TypeSymbol;
+import java.util.EnumSet;
 import static jdk.internal.jshell.debug.InternalDebugControl.DBG_GEN;
 import static jdk.jshell.Util.DOIT_METHOD_NAME;
 import static jdk.jshell.Util.PREFIX_PATTERN;
 import static jdk.jshell.Util.expunge;
 import static jdk.jshell.Snippet.SubKind.SINGLE_TYPE_IMPORT_SUBKIND;
@@ -188,11 +189,11 @@
      *
      * @param userSource the source of the snippet
      * @return usually a singleton list of Snippet, but may be empty or multiple
      */
     private List<Snippet> sourceToSnippets(String userSource) {
-        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, false).cleared());
+        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, false, false).cleared());
         if (compileSource.length() == 0) {
             return Collections.emptyList();
         }
         return state.taskFactory.parse(compileSource, pt -> {
             List<? extends Tree> units = pt.units();
@@ -209,11 +210,11 @@
                         : pt.getDiagnostics();
                 return compileFailResult(dlist, userSource, kindOfTree(unitTree));
             }
 
             // Erase illegal/ignored modifiers
-            String compileSourceInt = new MaskCommentsAndModifiers(compileSource, true).cleared();
+            String compileSourceInt = new MaskCommentsAndModifiers(compileSource, true, CLASS_LIKE_KINDS.contains(unitTree.getKind())).cleared();
 
             state.debug(DBG_GEN, "Kind: %s -- %s\n", unitTree.getKind(), unitTree);
             switch (unitTree.getKind()) {
                 case IMPORT:
                     return processImport(userSource, compileSourceInt);
@@ -239,10 +240,15 @@
                     return processStatement(userSource, compileSourceInt);
             }
         });
     }
 
+    @SuppressWarnings("preview")
+    private static final Set<Tree.Kind> CLASS_LIKE_KINDS =
+            EnumSet.of(Tree.Kind.ANNOTATION_TYPE, Tree.Kind.CLASS, Tree.Kind.ENUM,
+                       Tree.Kind.INTERFACE, Tree.Kind.RECORD);
+
     private List<Snippet> processImport(String userSource, String compileSource) {
         Wrap guts = Wrap.simpleWrap(compileSource);
         Matcher mat = IMPORT_PATTERN.matcher(compileSource);
         String fullname;
         String name;
@@ -814,11 +820,11 @@
         Snippet snip = new ErroneousSnippet(key, userSource, null,
                 probableKind, SubKind.UNKNOWN_SUBKIND);
         snip.setFailed(diags);
 
         // Install  wrapper for query by SourceCodeAnalysis.wrapper
-        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, true).cleared());
+        String compileSource = Util.trimEnd(new MaskCommentsAndModifiers(userSource, true, probableKind == Kind.TYPE_DECL).cleared());
         OuterWrap outer;
         switch (probableKind) {
             case IMPORT:
                 outer = state.outerMap.wrapImport(Wrap.simpleWrap(compileSource), snip);
                 break;
diff a/src/jdk.jshell/share/classes/jdk/jshell/MaskCommentsAndModifiers.java b/src/jdk.jshell/share/classes/jdk/jshell/MaskCommentsAndModifiers.java
--- a/src/jdk.jshell/share/classes/jdk/jshell/MaskCommentsAndModifiers.java
+++ b/src/jdk.jshell/share/classes/jdk/jshell/MaskCommentsAndModifiers.java
@@ -64,17 +64,21 @@
 
     // Do we mask-off ignored modifiers?  Set by parameter and turned off after
     // initial modifier section
     private boolean maskModifiers;
 
+    //is modifier "final" allowed?
+    private final boolean finalAllowed;
+
     // Does the string end with an unclosed '/*' style comment?
     private boolean openToken = false;
 
-    MaskCommentsAndModifiers(String s, boolean maskModifiers) {
+    MaskCommentsAndModifiers(String s, boolean maskModifiers, boolean finalAllowed) {
         this.str = s;
         this.length = s.length();
         this.maskModifiers = maskModifiers;
+        this.finalAllowed = finalAllowed;
         read();
         while (c >= 0) {
             next();
             read();
         }
@@ -248,11 +252,11 @@
                         writeTo(sb, c);
                         read();
                     } while (Character.isJavaIdentifierPart(c));
                     unread();
                     String id = sb.toString();
-                    if (maskModifiers && IGNORED_MODIFIERS.contains(id)) {
+                    if (maskModifiers && (IGNORED_MODIFIERS.contains(id) || (!finalAllowed && "final".equals(id)))) {
                         writeMask(sb);
                     } else {
                         write(sb);
                         if (maskModifiers && !OTHER_MODIFIERS.contains(id)) {
                             maskModifiers = false;
diff a/src/jdk.jshell/share/classes/jdk/jshell/SourceCodeAnalysisImpl.java b/src/jdk.jshell/share/classes/jdk/jshell/SourceCodeAnalysisImpl.java
--- a/src/jdk.jshell/share/classes/jdk/jshell/SourceCodeAnalysisImpl.java
+++ b/src/jdk.jshell/share/classes/jdk/jshell/SourceCodeAnalysisImpl.java
@@ -167,11 +167,11 @@
         INDEXER.submit(() -> refreshIndexes(cpVersion));
     }
 
     @Override
     public CompletionInfo analyzeCompletion(String srcInput) {
-        MaskCommentsAndModifiers mcm = new MaskCommentsAndModifiers(srcInput, false);
+        MaskCommentsAndModifiers mcm = new MaskCommentsAndModifiers(srcInput, false, false);
         if (mcm.endsWithOpenToken()) {
             proc.debug(DBG_COMPA, "Incomplete (open comment): %s\n", srcInput);
             return new CompletionInfoImpl(DEFINITELY_INCOMPLETE, null, srcInput + '\n');
         }
         String cleared = mcm.cleared();
diff a/test/langtools/jdk/jshell/ClassesTest.java b/test/langtools/jdk/jshell/ClassesTest.java
--- a/test/langtools/jdk/jshell/ClassesTest.java
+++ b/test/langtools/jdk/jshell/ClassesTest.java
@@ -249,31 +249,31 @@
 
     public void classesIgnoredModifiers() {
         assertEval("public interface A { }");
         assertDeclareWarn1("static class B implements A { }",
                 new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 6, 0, -1, -1, Diagnostic.Kind.WARNING));
-        assertDeclareWarn1("final interface C extends A { }",
-                new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 5, 0, -1, -1, Diagnostic.Kind.WARNING));
+        assertDeclareWarn1("static interface C extends A { }",
+                new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 6, 0, -1, -1, Diagnostic.Kind.WARNING));
         assertActiveKeys();
     }
 
     public void classesIgnoredModifiersAnnotation() {
         assertEval("public @interface X { }");
         assertEval("@X public interface A { }");
         assertDeclareWarn1("@X static class B implements A { }",
                 new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 9, 0, -1, -1, Diagnostic.Kind.WARNING));
-        assertDeclareWarn1("@X final interface C extends A { }",
-                new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 8, 0, -1, -1, Diagnostic.Kind.WARNING));
+        assertDeclareWarn1("@X static interface C extends A { }",
+                new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 9, 0, -1, -1, Diagnostic.Kind.WARNING));
         assertActiveKeys();
     }
 
     public void classesIgnoredModifiersOtherModifiers() {
         assertEval("strictfp public interface A { }");
         assertDeclareWarn1("strictfp static class B implements A { }",
                 new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 15, 0, -1, -1, Diagnostic.Kind.WARNING));
-        assertDeclareWarn1("strictfp final interface C extends A { }",
-                new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 14, 0, -1, -1, Diagnostic.Kind.WARNING));
+        assertDeclareWarn1("strictfp static interface C extends A { }",
+                new ExpectedDiagnostic("jdk.eval.warn.illegal.modifiers", 0, 15, 0, -1, -1, Diagnostic.Kind.WARNING));
         assertActiveKeys();
     }
 
     public void ignoreModifierSpaceIssue() {
         assertEval("interface I { void f(); } ");
diff a/test/langtools/jdk/jshell/ErrorTranslationTest.java b/test/langtools/jdk/jshell/ErrorTranslationTest.java
--- a/test/langtools/jdk/jshell/ErrorTranslationTest.java
+++ b/test/langtools/jdk/jshell/ErrorTranslationTest.java
@@ -80,10 +80,13 @@
                 newExpectedDiagnostic(0, 5, 0, -1, -1, Diagnostic.Kind.WARNING)};
         String[] mods = {"static", "final"};
         for (int i = 0; i < mods.length; ++i) {
             for (String code : new String[] {"class A {}", "void f() {}", "int a;"}) {
                 final int finalI = i;
+                if ("final".equals(mods[finalI]) && "class A {}".equals(code)) {
+                    continue; //skip, final classes are allowed
+                }
                 list.add(a -> assertDiagnostic(a, mods[finalI] + " " + code, diagnostics[finalI]));
             }
         }
         test(list.toArray(new ReplTest[list.size()]));
     }
diff a/test/langtools/jdk/jshell/IgnoreTest.java b/test/langtools/jdk/jshell/IgnoreTest.java
--- a/test/langtools/jdk/jshell/IgnoreTest.java
+++ b/test/langtools/jdk/jshell/IgnoreTest.java
@@ -119,12 +119,12 @@
     }
 
     public void testClassModifier() {
         TypeDeclSnippet c4 = (TypeDeclSnippet) assertDeclareWarn1("static class C4 {}", "jdk.eval.warn.illegal.modifiers");
         assertTypeDeclSnippet(c4, "C4", VALID, CLASS_SUBKIND, 0, 1);
-        TypeDeclSnippet c5 = (TypeDeclSnippet) assertDeclareWarn1("final class C5 {}", "jdk.eval.warn.illegal.modifiers");
-        assertTypeDeclSnippet(c5, "C5", VALID, CLASS_SUBKIND, 0, 1);
+        TypeDeclSnippet c5 = classKey(assertEval("final class C5 {}"));
+        assertTypeDeclSnippet(c5, "C5", VALID, CLASS_SUBKIND, 0, 0);
     }
 
     public void testInsideModifier() {
         assertEval("import static java.lang.reflect.Modifier.*;");
         assertEval("class C {"
diff a/test/langtools/jdk/jshell/ModifiersTest.java b/test/langtools/jdk/jshell/ModifiersTest.java
--- a/test/langtools/jdk/jshell/ModifiersTest.java
+++ b/test/langtools/jdk/jshell/ModifiersTest.java
@@ -42,11 +42,11 @@
 
     @DataProvider(name = "ignoredModifiers")
     public Object[][] getTestCases() {
         List<Object[]> testCases = new ArrayList<>();
         String[] ignoredModifiers = new String[] {
-            "static", "final"
+            "static"
         };
         String[] silentlyIgnoredModifiers = new String[] {
             "public", "protected", "private"
         };
         String[] before = new String[] {
